public class org.apache.commons.math.stat.inference.TestUtils extends java.lang.Object
{
    private static org.apache.commons.math.stat.inference.TTest tTest;
    private static org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest;
    private static org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest;
    private static org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova;

    protected void <init>()
    {
        org.apache.commons.math.stat.inference.TestUtils r0;

        r0 := @this: org.apache.commons.math.stat.inference.TestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setChiSquareTest(org.apache.commons.math.stat.inference.TTest)
    {
        org.apache.commons.math.stat.inference.TTest r0;

        r0 := @parameter0: org.apache.commons.math.stat.inference.TTest;

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest> = r0;

        return;
    }

    public static org.apache.commons.math.stat.inference.TTest getTTest()
    {
        org.apache.commons.math.stat.inference.TTest $r0;

        $r0 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        return $r0;
    }

    public static void setChiSquareTest(org.apache.commons.math.stat.inference.ChiSquareTest)
    {
        org.apache.commons.math.stat.inference.ChiSquareTest r0;

        r0 := @parameter0: org.apache.commons.math.stat.inference.ChiSquareTest;

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest> = r0;

        return;
    }

    public static org.apache.commons.math.stat.inference.ChiSquareTest getChiSquareTest()
    {
        org.apache.commons.math.stat.inference.ChiSquareTest $r0;

        $r0 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        return $r0;
    }

    public static void setUnknownDistributionChiSquareTest(org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest)
    {
        org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest r0;

        r0 := @parameter0: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest;

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest> = r0;

        return;
    }

    public static org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest()
    {
        org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest $r0;

        $r0 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest>;

        return $r0;
    }

    public static void setOneWayAnova(org.apache.commons.math.stat.inference.OneWayAnova)
    {
        org.apache.commons.math.stat.inference.OneWayAnova r0;

        r0 := @parameter0: org.apache.commons.math.stat.inference.OneWayAnova;

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova> = r0;

        return;
    }

    public static org.apache.commons.math.stat.inference.OneWayAnova getOneWayAnova()
    {
        org.apache.commons.math.stat.inference.OneWayAnova $r0;

        $r0 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova>;

        return $r0;
    }

    public static double homoscedasticT(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double homoscedasticT(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double homoscedasticT(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double homoscedasticT(org.apache.commons.math.stat.descriptive.StatisticalSummary,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static boolean homoscedasticTTest(double[], double[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: boolean homoscedasticTTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double homoscedasticTTest(double[], double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double homoscedasticTTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double homoscedasticTTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double homoscedasticTTest(org.apache.commons.math.stat.descriptive.StatisticalSummary,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static double pairedT(double[], double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double pairedT(double[],double[])>(r0, r1);

        return $d0;
    }

    public static boolean pairedTTest(double[], double[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: boolean pairedTTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double pairedTTest(double[], double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double pairedTTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double t(double, double[]) throws java.lang.IllegalArgumentException
    {
        double d0, $d1;
        double[] r0;
        org.apache.commons.math.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: double t(double,double[])>(d0, r0);

        return $d1;
    }

    public static double t(double, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException
    {
        double d0, $d1;
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: double t(double,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(d0, r0);

        return $d1;
    }

    public static double t(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double t(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double t(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double t(org.apache.commons.math.stat.descriptive.StatisticalSummary,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static boolean tTest(double, double[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double d0, d1;
        double[] r0;
        org.apache.commons.math.stat.inference.TTest $r1;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        d1 := @parameter2: double;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: boolean tTest(double,double[],double)>(d0, r0, d1);

        return $z0;
    }

    public static double tTest(double, double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double d0, $d1;
        double[] r0;
        org.apache.commons.math.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: double tTest(double,double[])>(d0, r0);

        return $d1;
    }

    public static boolean tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary, double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double d0, d1;
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math.stat.inference.TTest $r1;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        d1 := @parameter2: double;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: boolean tTest(double,org.apache.commons.math.stat.descriptive.StatisticalSummary,double)>(d0, r0, d1);

        return $z0;
    }

    public static double tTest(double, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double d0, $d1;
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.TTest: double tTest(double,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(d0, r0);

        return $d1;
    }

    public static boolean tTest(double[], double[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: boolean tTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double tTest(double[], double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double tTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static boolean tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary, double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0, r1;
        double d0;
        org.apache.commons.math.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: boolean tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary,org.apache.commons.math.stat.descriptive.StatisticalSummary,double)>(r0, r1, d0);

        return $z0;
    }

    public static double tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary, org.apache.commons.math.stat.descriptive.StatisticalSummary) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.TTest: double tTest(org.apache.commons.math.stat.descriptive.StatisticalSummary,org.apache.commons.math.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static double chiSquare(double[], long[]) throws java.lang.IllegalArgumentException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.ChiSquareTest: double chiSquare(double[],long[])>(r0, r1);

        return $d0;
    }

    public static double chiSquare(long[][]) throws java.lang.IllegalArgumentException
    {
        long[][] r0;
        org.apache.commons.math.stat.inference.ChiSquareTest $r1;
        double $d0;

        r0 := @parameter0: long[][];

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.ChiSquareTest: double chiSquare(long[][])>(r0);

        return $d0;
    }

    public static boolean chiSquareTest(double[], long[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0;
        long[] r1;
        double d0;
        org.apache.commons.math.stat.inference.ChiSquareTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.ChiSquareTest: boolean chiSquareTest(double[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double chiSquareTest(double[], long[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.ChiSquareTest: double chiSquareTest(double[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean chiSquareTest(long[][], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        long[][] r0;
        double d0;
        org.apache.commons.math.stat.inference.ChiSquareTest $r1;
        boolean $z0;

        r0 := @parameter0: long[][];

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.ChiSquareTest: boolean chiSquareTest(long[][],double)>(r0, d0);

        return $z0;
    }

    public static double chiSquareTest(long[][]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        long[][] r0;
        org.apache.commons.math.stat.inference.ChiSquareTest $r1;
        double $d0;

        r0 := @parameter0: long[][];

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.ChiSquareTest: double chiSquareTest(long[][])>(r0);

        return $d0;
    }

    public static double chiSquareDataSetsComparison(long[], long[]) throws java.lang.IllegalArgumentException
    {
        long[] r0, r1;
        org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest: double chiSquareDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static double chiSquareTestDataSetsComparison(long[], long[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        long[] r0, r1;
        org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest: double chiSquareTestDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean chiSquareTestDataSetsComparison(long[], long[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        long[] r0, r1;
        double d0;
        org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest $r2;
        boolean $z0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest: boolean chiSquareTestDataSetsComparison(long[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double oneWayAnovaFValue(java.util.Collection) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        java.util.Collection r0;
        org.apache.commons.math.stat.inference.OneWayAnova $r1;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.OneWayAnova: double anovaFValue(java.util.Collection)>(r0);

        return $d0;
    }

    public static double oneWayAnovaPValue(java.util.Collection) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        java.util.Collection r0;
        org.apache.commons.math.stat.inference.OneWayAnova $r1;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.OneWayAnova: double anovaPValue(java.util.Collection)>(r0);

        return $d0;
    }

    public static boolean oneWayAnovaTest(java.util.Collection, double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        java.util.Collection r0;
        double d0;
        org.apache.commons.math.stat.inference.OneWayAnova $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.stat.inference.OneWayAnova: boolean anovaTest(java.util.Collection,double)>(r0, d0);

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.commons.math.stat.inference.TTestImpl $r0;
        org.apache.commons.math.stat.inference.ChiSquareTestImpl $r1, $r2;
        org.apache.commons.math.stat.inference.OneWayAnovaImpl $r3;

        $r0 = new org.apache.commons.math.stat.inference.TTestImpl;

        specialinvoke $r0.<org.apache.commons.math.stat.inference.TTestImpl: void <init>()>();

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.TTest tTest> = $r0;

        $r1 = new org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        specialinvoke $r1.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void <init>()>();

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.ChiSquareTest chiSquareTest> = $r1;

        $r2 = new org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        specialinvoke $r2.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void <init>()>();

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest unknownDistributionChiSquareTest> = $r2;

        $r3 = new org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        specialinvoke $r3.<org.apache.commons.math.stat.inference.OneWayAnovaImpl: void <init>()>();

        <org.apache.commons.math.stat.inference.TestUtils: org.apache.commons.math.stat.inference.OneWayAnova oneWayAnova> = $r3;

        return;
    }
}
