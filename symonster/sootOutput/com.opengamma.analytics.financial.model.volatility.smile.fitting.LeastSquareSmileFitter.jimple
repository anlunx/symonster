public abstract class com.opengamma.analytics.financial.model.volatility.smile.fitting.LeastSquareSmileFitter extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.LeastSquareSmileFitter r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.LeastSquareSmileFitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform getFitResult(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption[], com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData[], double[], double[], java.util.BitSet);

    public abstract com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform getFitResult(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption[], com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData[], double[], java.util.BitSet);

    protected void testData(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption[], com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData[], double[], double[], java.util.BitSet, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.LeastSquareSmileFitter r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption[] r1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData[] r2;
        double[] r3, r4;
        java.util.BitSet r5;
        int i0, i1, $i2, $i12, $i13, i14;
        double d0, d1, d2, $d3, $d4, $d5;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r6, $r9;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r7, $r8, $r10, $r11;
        long $l3, $l4, $l6, $l7, $l9, $l10;
        byte $b5, $b8, $b11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.LeastSquareSmileFitter;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption[];

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.util.BitSet;

        i0 := @parameter5: int;

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.lang.Object[],java.lang.String)>(r1, "options");

        i1 = lengthof r1;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "data");

        $i2 = lengthof r2;

        if $i2 != i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Black function data array must be the same length as option array");

        if r3 == null goto label05;

        $i12 = lengthof r3;

        if $i12 != i1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Error array length must be the same as the option array length");

     label05:
        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "initial values");

        $i13 = lengthof r4;

        if $i13 != i0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "must have length of initial values array equal to number of parameters");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "fixed");

        $r6 = r1[0];

        d0 = virtualinvoke $r6.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $r7 = r2[0];

        d1 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: double getForward()>();

        $r8 = r2[0];

        d2 = virtualinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: double getDiscountFactor()>();

        i14 = 1;

     label08:
        if i14 >= i1 goto label15;

        $r9 = r1[i14];

        $d3 = virtualinvoke $r9.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z3, "options not all at same time horizon");

        $r10 = r2[i14];

        $d4 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: double getForward()>();

        $l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z4, "options don\'t all have same forward");

        $r11 = r2[i14];

        $d5 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: double getDiscountFactor()>();

        $l9 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2);

        $b11 = $l9 cmp $l10;

        if $b11 != 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z5, "options don\'t all have same discount factors");

        i14 = i14 + 1;

        goto label08;

     label15:
        return;
    }
}
