public class org.apache.commons.math.distribution.NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.NormalDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private static final double SQRT2PI;
    private double mean;
    private double standardDeviation;
    private final double solverAbsoluteAccuracy;

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean> = 0.0;

        r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation> = 1.0;

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void setMeanInternal(double)>(d0);

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void setStandardDeviationInternal(double)>(d1);

        r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public void <init>()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public double getMean()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        return $d0;
    }

    public void setMean(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void setMeanInternal(double)>(d0);

        return;
    }

    private void setMeanInternal(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean> = d0;

        return;
    }

    public double getStandardDeviation()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        return $d0;
    }

    public void setStandardDeviation(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: void setStandardDeviationInternal(double)>(d0);

        return;
    }

    private void setStandardDeviationInternal(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_STANDARD_DEVIATION>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation> = d0;

        return;
    }

    public double density(java.lang.Double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        java.lang.Double r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double density(double)>($d0);

        return $d1;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        d1 = d0 - $d2;

        $d3 = neg d1;

        $d8 = $d3 * d1;

        $d4 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d6 = 2.0 * $d4;

        $d5 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d7 = $d6 * $d5;

        $d9 = $d8 / $d7;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d9);

        $d12 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d11 = <org.apache.commons.math.distribution.NormalDistributionImpl: double SQRT2PI>;

        $d13 = $d12 * $d11;

        $d14 = $d10 / $d13;

        return $d14;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        d1 = d0 - $d2;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d4 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d5 = 40.0 * $d4;

        $b0 = $d3 cmpl $d5;

        if $b0 <= 0 goto label3;

        $b1 = d1 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $d13 = 0.0;

        goto label2;

     label1:
        $d13 = 1.0;

     label2:
        return $d13;

     label3:
        $d6 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d8 = $d6 * $d7;

        $d9 = d1 / $d8;

        $d10 = staticinvoke <org.apache.commons.math.special.Erf: double erf(double)>($d9);

        $d11 = 1.0 + $d10;

        $d12 = 0.5 * $d11;

        return $d12;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, $d1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return #-Infinity;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(d0);

        return $d1;
    }

    public double sample() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double $d0, $d1, $d2;
        org.apache.commons.math.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        $r1 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: org.apache.commons.math.random.RandomDataImpl randomData>;

        $d1 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        $d0 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: double nextGaussian(double,double)>($d1, $d0);

        return $d2;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        d1 = -1.7976931348623157E308;

        goto label2;

     label1:
        d1 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

     label2:
        return d1;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        d1 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        goto label2;

     label1:
        d1 = 1.7976931348623157E308;

     label2:
        return d1;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d4 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        $d3 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        d5 = $d4 - $d3;

        goto label3;

     label1:
        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

        $d2 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

        $d1 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double standardDeviation>;

        d5 = $d2 + $d1;

        goto label3;

     label2:
        d5 = r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double mean>;

     label3:
        return d5;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        return #Infinity;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double getStandardDeviation()>();

        $d1 = d0 * d0;

        return $d1;
    }

    public volatile double density(java.lang.Object) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.NormalDistributionImpl r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.NormalDistributionImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.NormalDistributionImpl: double density(java.lang.Double)>($r2);

        return $d0;
    }

    static void <clinit>()
    {
        double $d0;

        <org.apache.commons.math.distribution.NormalDistributionImpl: long serialVersionUID> = 8589540077390120676L;

        <org.apache.commons.math.distribution.NormalDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        $d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(6.283185307179586);

        <org.apache.commons.math.distribution.NormalDistributionImpl: double SQRT2PI> = $d0;

        return;
    }
}
