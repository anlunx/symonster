public class org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private int n;

    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        int i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_NUMBER_OF_SAMPLES>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n> = i0;

        return;
    }

    public double cdf(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double cdf(double,boolean)>(d0, 0);

        return $d1;
    }

    public double cdfExact(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double cdf(double,boolean)>(d0, 1);

        return $d1;
    }

    public double cdf(double, boolean) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14;
        boolean z0;
        int $i0, $i6, $i8, i9;
        byte $b1, $b2, $b3, $b4, $b5, $b7;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $i0 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d4 = (double) $i0;

        d1 = 1.0 / $d4;

        d2 = 0.5 * d1;

        $b1 = d0 cmpg d2;

        if $b1 > 0 goto label1;

        return 0.0;

     label1:
        $b2 = d2 cmpg d0;

        if $b2 >= 0 goto label4;

        $b7 = d0 cmpg d1;

        if $b7 > 0 goto label4;

        d13 = 1.0;

        $d10 = 2.0 * d0;

        d3 = $d10 - d1;

        i9 = 1;

     label2:
        $i8 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if i9 > $i8 goto label3;

        $d11 = (double) i9;

        $d12 = $d11 * d3;

        d13 = d13 * $d12;

        i9 = i9 + 1;

        goto label2;

     label3:
        return d13;

     label4:
        $d5 = 1.0 - d1;

        $b3 = $d5 cmpg d0;

        if $b3 > 0 goto label5;

        $b5 = d0 cmpg 1.0;

        if $b5 >= 0 goto label5;

        $d6 = 1.0 - d0;

        $i6 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d6, $i6);

        $d8 = 2.0 * $d7;

        $d9 = 1.0 - $d8;

        return $d9;

     label5:
        $b4 = 1.0 cmpg d0;

        if $b4 > 0 goto label6;

        return 1.0;

     label6:
        if z0 == 0 goto label7;

        $d14 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double exactK(double)>(d0);

        goto label8;

     label7:
        $d14 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: double roundedK(double)>(d0);

     label8:
        return $d14;
    }

    private double exactK(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, $d1, $d2, $d3, $d4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.math3.linear.FieldMatrix r1, r2;
        org.apache.commons.math3.FieldElement $r3;
        java.math.BigDecimal $r4;
        org.apache.commons.math3.fraction.BigFraction $r5, r6;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        $i1 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) $i1;

        $d2 = $d1 * d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d2);

        i0 = (int) $d3;

        r1 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: org.apache.commons.math3.linear.FieldMatrix createH(double)>(d0);

        $i2 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix power(int)>($i2);

        $i4 = i0 - 1;

        $i3 = i0 - 1;

        $r3 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i4, $i3);

        r6 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        i7 = 1;

     label1:
        $i5 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if i7 > $i5 goto label2;

        $r5 = virtualinvoke r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(i7);

        $i6 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        r6 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>($i6);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r6.<org.apache.commons.math3.fraction.BigFraction: java.math.BigDecimal bigDecimalValue(int,int)>(20, 4);

        $d4 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        return $d4;
    }

    private double roundedK(double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;
        org.apache.commons.math3.FieldElement $r4;
        org.apache.commons.math3.fraction.BigFraction $r5;
        org.apache.commons.math3.linear.RealMatrix r6;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        $i2 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d1 = (double) $i2;

        $d2 = $d1 * d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d2);

        i0 = (int) $d3;

        r1 = specialinvoke r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: org.apache.commons.math3.linear.FieldMatrix createH(double)>(d0);

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getRowDimension()>();

        $r3 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i1, i1);

        i8 = 0;

     label1:
        if i8 >= i1 goto label4;

        i9 = 0;

     label2:
        if i9 >= i1 goto label3;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i8, i9);

        $r5 = (org.apache.commons.math3.fraction.BigFraction) $r4;

        $d7 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: double doubleValue()>();

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i8, i9, $d7);

        i9 = i9 + 1;

        goto label2;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        $i3 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        r6 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix power(int)>($i3);

        $i5 = i0 - 1;

        $i4 = i0 - 1;

        d8 = interfaceinvoke r6.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i5, $i4);

        i10 = 1;

     label5:
        $i6 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        if i10 > $i6 goto label6;

        $d5 = (double) i10;

        $i7 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d4 = (double) $i7;

        $d6 = $d5 / $d4;

        d8 = d8 * $d6;

        i10 = i10 + 1;

        goto label5;

     label6:
        return d8;
    }

    private org.apache.commons.math3.linear.FieldMatrix createH(double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27;
        byte $b5;
        org.apache.commons.math3.fraction.BigFraction $r1, $r2, $r6, $r8, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r36, $r38, r39;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r3;
        org.apache.commons.math3.fraction.BigFractionField $r4;
        org.apache.commons.math3.fraction.BigFraction[] $r5, $r7, $r9, $r10, $r16, $r19, $r21, $r24, $r29, $r31, r41;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r32;
        java.lang.Double $r33, $r34;
        org.apache.commons.math3.fraction.FractionConversionException $r35, $r37;
        org.apache.commons.math3.fraction.BigFraction[][] r40;

        r0 := @this: org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution;

        d0 := @parameter0: double;

        $i2 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d2 = (double) $i2;

        $d3 = $d2 * d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d3);

        i0 = (int) $d4;

        $i3 = 2 * i0;

        i1 = $i3 - 1;

        $d7 = (double) i0;

        $i4 = r0.<org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: int n>;

        $d5 = (double) $i4;

        $d6 = $d5 * d0;

        d1 = $d7 - $d6;

        $b5 = d1 cmpl 1.0;

        if $b5 < 0 goto label01;

        $r32 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r32.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r33, $r34, 0);

        throw $r32;

     label01:
        $r1 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r1.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-20, 10000);

        r39 = $r1;

     label02:
        goto label07;

     label03:
        $r35 := @caughtexception;

     label04:
        $r36 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r36.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-10, 10000);

        r39 = $r36;

     label05:
        goto label07;

     label06:
        $r37 := @caughtexception;

        $r38 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r38.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-5, 10000);

        r39 = $r38;

     label07:
        r40 = newmultiarray (org.apache.commons.math3.fraction.BigFraction)[i1][i1];

        i21 = 0;

     label08:
        if i21 >= i1 goto label13;

        i22 = 0;

     label09:
        if i22 >= i1 goto label12;

        $i19 = i21 - i22;

        $i20 = $i19 + 1;

        if $i20 >= 0 goto label10;

        $r31 = r40[i21];

        $r30 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        $r31[i22] = $r30;

        goto label11;

     label10:
        $r29 = r40[i21];

        $r28 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        $r29[i22] = $r28;

     label11:
        i22 = i22 + 1;

        goto label09;

     label12:
        i21 = i21 + 1;

        goto label08;

     label13:
        r41 = newarray (org.apache.commons.math3.fraction.BigFraction)[i1];

        r41[0] = r39;

        i23 = 1;

     label14:
        if i23 >= i1 goto label15;

        $i18 = i23 - 1;

        $r26 = r41[$i18];

        $r27 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r26);

        r41[i23] = $r27;

        i23 = i23 + 1;

        goto label14;

     label15:
        i24 = 0;

     label16:
        if i24 >= i1 goto label17;

        $r19 = r40[i24];

        $r16 = r40[i24];

        $r18 = $r16[0];

        $r17 = r41[i24];

        $r20 = virtualinvoke $r18.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r17);

        $r19[0] = $r20;

        $i14 = i1 - 1;

        $r24 = r40[$i14];

        $i15 = i1 - 1;

        $r21 = r40[$i15];

        $r23 = $r21[i24];

        $i16 = i1 - i24;

        $i17 = $i16 - 1;

        $r22 = r41[$i17];

        $r25 = virtualinvoke $r23.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r22);

        $r24[i24] = $r25;

        i24 = i24 + 1;

        goto label16;

     label17:
        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE_HALF>;

        $i6 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: int compareTo(org.apache.commons.math3.fraction.BigFraction)>($r2);

        if $i6 != 1 goto label18;

        $i12 = i1 - 1;

        $r10 = r40[$i12];

        $i13 = i1 - 1;

        $r9 = r40[$i13];

        $r11 = $r9[0];

        $r12 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(2);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(int)>(1);

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction pow(int)>(i1);

        $r15 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r10[0] = $r15;

     label18:
        i25 = 0;

     label19:
        if i25 >= i1 goto label24;

        i26 = 0;

     label20:
        $i7 = i25 + 1;

        if i26 >= $i7 goto label23;

        $i8 = i25 - i26;

        $i9 = $i8 + 1;

        if $i9 <= 0 goto label22;

        i27 = 2;

     label21:
        $i10 = i25 - i26;

        $i11 = $i10 + 1;

        if i27 > $i11 goto label22;

        $r7 = r40[i25];

        $r5 = r40[i25];

        $r6 = $r5[i26];

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>(i27);

        $r7[i26] = $r8;

        i27 = i27 + 1;

        goto label21;

     label22:
        i26 = i26 + 1;

        goto label20;

     label23:
        i25 = i25 + 1;

        goto label19;

     label24:
        $r3 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r4 = staticinvoke <org.apache.commons.math3.fraction.BigFractionField: org.apache.commons.math3.fraction.BigFractionField getInstance()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])>($r4, r40);

        return $r3;

        catch org.apache.commons.math3.fraction.FractionConversionException from label01 to label02 with label03;
        catch org.apache.commons.math3.fraction.FractionConversionException from label04 to label05 with label06;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution: long serialVersionUID> = -4670676796862967187L;

        return;
    }
}
