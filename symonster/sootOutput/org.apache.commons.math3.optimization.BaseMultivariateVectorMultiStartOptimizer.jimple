public class org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer
{
    private final org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer;
    private int maxEvaluations;
    private int totalEvaluations;
    private int starts;
    private org.apache.commons.math3.random.RandomVectorGenerator generator;
    private org.apache.commons.math3.optimization.PointVectorValuePair[] optima;

    protected void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer, int, org.apache.commons.math3.random.RandomVectorGenerator)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer r1;
        int i0;
        org.apache.commons.math3.random.RandomVectorGenerator r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.math3.random.RandomVectorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        if i0 >= 1 goto label3;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label3:
        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer> = r1;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts> = i0;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator> = r2;

        return;
    }

    public org.apache.commons.math3.optimization.PointVectorValuePair[] getOptima()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r1, $r2, $r4;
        java.lang.Object $r3;
        org.apache.commons.math3.exception.MathIllegalStateException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        if $r1 != null goto label1;

        $r5 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_OPTIMUM_COMPUTED_YET>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (org.apache.commons.math3.optimization.PointVectorValuePair[]) $r3;

        return $r4;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $i0 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $i0 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

        return $i0;
    }

    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer $r1;
        org.apache.commons.math3.optimization.ConvergenceChecker $r2;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        return $r2;
    }

    public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        double[] r2, r3, r4, $r22;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r5, $r6, $r8, $r11, $r18, $r20;
        org.apache.commons.math3.optimization.PointVectorValuePair $r7, $r9, $r13;
        org.apache.commons.math3.random.RandomVectorGenerator $r10;
        org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer $r12, $r26;
        org.apache.commons.math3.exception.ConvergenceException $r17;
        java.lang.RuntimeException $r19, r21;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int maxEvaluations> = i0;

        r21 = null;

        $i1 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts>;

        $r5 = newarray (org.apache.commons.math3.optimization.PointVectorValuePair)[$i1];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima> = $r5;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations> = 0;

        i6 = 0;

     label01:
        $i2 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int starts>;

        if i6 >= $i2 goto label09;

     label02:
        $r11 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $i5 = i6;

        $r12 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $i3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

        $i4 = i0 - $i3;

        if i6 != 0 goto label03;

        $r22 = r4;

        goto label04;

     label03:
        $r10 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.random.RandomVectorGenerator generator>;

        $r22 = interfaceinvoke $r10.<org.apache.commons.math3.random.RandomVectorGenerator: double[] nextVector()>();

     label04:
        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimize(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,double[],double[],double[])>($i4, r1, r2, r3, $r22);

        $r11[$i5] = $r13;

     label05:
        goto label08;

     label06:
        $r17 := @caughtexception;

        $r18 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r18[i6] = null;

        goto label08;

     label07:
        $r19 := @caughtexception;

        r21 = $r19;

        $r20 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r20[i6] = null;

     label08:
        $i7 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations>;

        $r26 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer>;

        $i8 = interfaceinvoke $r26.<org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer: int getEvaluations()>();

        $i9 = $i7 + $i8;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: int totalEvaluations> = $i9;

        i6 = i6 + 1;

        goto label01;

     label09:
        specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: void sortPairs(double[],double[])>(r2, r3);

        $r6 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r7 = $r6[0];

        if $r7 != null goto label10;

        throw r21;

     label10:
        $r8 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r9 = $r8[0];

        return $r9;

        catch org.apache.commons.math3.exception.ConvergenceException from label02 to label05 with label06;
        catch java.lang.RuntimeException from label02 to label05 with label07;
    }

    private void sortPairs(double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r0;
        double[] r1, r2;
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 $r3;
        org.apache.commons.math3.optimization.PointVectorValuePair[] $r4;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r4 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair[] optima>;

        $r3 = new org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        specialinvoke $r3.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer,double[],double[])>(r0, r1, r2);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r4, $r3);

        return;
    }
}
