public class org.apache.commons.math3.distribution.BinomialDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    private static final long serialVersionUID;
    private final int numberOfTrials;
    private final double probabilityOfSuccess;

    public void <init>(int, double)
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int i0;
        double d0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.BinomialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r1, i0, d0);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, double)
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        int i0;
        double d0;
        byte $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5, $r8;
        org.apache.commons.math3.exception.NotPositiveException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        if i0 >= 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_TRIALS>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label1:
        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label2;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess> = d0;

        r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials> = i0;

        return;
    }

    public int getNumberOfTrials()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        return $i0;
    }

    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        return $d0;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int i0;
        double d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        i0 := @parameter0: int;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.BinomialDistribution: double logProbability(int)>(i0);

        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label1;

        $d1 = 0.0;

        goto label2;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d0);

     label2:
        return $d1;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int i0, $i1, $i2, $i3;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        if $i1 != 0 goto label3;

        if i0 != 0 goto label1;

        $d3 = 0.0;

        goto label2;

     label1:
        $d3 = #-Infinity;

     label2:
        return $d3;

     label3:
        if i0 < 0 goto label4;

        $i2 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        if i0 <= $i2 goto label5;

     label4:
        d4 = #-Infinity;

        goto label6;

     label5:
        $i3 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        $d2 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - $d0;

        d4 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>(i0, $i3, $d2, $d1);

     label6:
        return d4;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int i0, $i1, $i2, $i3;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d5 = 0.0;

        goto label3;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        if i0 < $i1 goto label2;

        d5 = 1.0;

        goto label3;

     label2:
        $d3 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $d0 = (double) i0;

        $d2 = $d0 + 1.0;

        $i2 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        $i3 = $i2 - i0;

        $d1 = (double) $i3;

        $d4 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d3, $d2, $d1);

        d5 = 1.0 - $d4;

     label3:
        return d5;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        $d1 = (double) $i0;

        $d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $d2 = $d1 * $d0;

        return $d2;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $i0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        $d1 = (double) $i0;

        $d3 = $d1 * d0;

        $d2 = 1.0 - d0;

        $d4 = $d3 * $d2;

        return $d4;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        double $d0;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $b0 = $d0 cmpg 1.0;

        if $b0 >= 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

     label2:
        return $i1;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;
        double $d0;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: double probabilityOfSuccess>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $i1 = r0.<org.apache.commons.math3.distribution.BinomialDistribution: int numberOfTrials>;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.BinomialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.BinomialDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.BinomialDistribution: long serialVersionUID> = 6751309484392813623L;

        return;
    }
}
