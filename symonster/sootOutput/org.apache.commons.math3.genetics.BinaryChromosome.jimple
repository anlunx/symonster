public abstract class org.apache.commons.math3.genetics.BinaryChromosome extends org.apache.commons.math3.genetics.AbstractListChromosome
{

    public void <init>(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.genetics.AbstractListChromosome: void <init>(java.util.List)>(r1);

        return;
    }

    public void <init>(java.lang.Integer[]) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.lang.Integer[] r1;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: java.lang.Integer[];

        specialinvoke r0.<org.apache.commons.math3.genetics.AbstractListChromosome: void <init>(java.lang.Object[])>(r1);

        return;
    }

    protected void checkValidity(java.util.List) throws org.apache.commons.math3.genetics.InvalidRepresentationException
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0;
        java.util.List r1;
        java.util.Iterator r2;
        int i0;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r8;
        org.apache.commons.math3.genetics.InvalidRepresentationException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i0 < 0 goto label2;

        if i0 <= 1 goto label3;

     label2:
        $r5 = new org.apache.commons.math3.genetics.InvalidRepresentationException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_BINARY_DIGIT>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        specialinvoke $r5.<org.apache.commons.math3.genetics.InvalidRepresentationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label3:
        goto label1;

     label4:
        return;
    }

    public static java.util.List randomBinaryRepresentation(int)
    {
        int i0, $i1, i2;
        java.util.ArrayList $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        java.lang.Integer $r3;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i1 = interfaceinvoke $r2.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    protected boolean isSame(org.apache.commons.math3.genetics.Chromosome)
    {
        org.apache.commons.math3.genetics.BinaryChromosome r0, r2;
        org.apache.commons.math3.genetics.Chromosome r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3;
        java.util.List $r3, $r4, $r7;
        java.lang.Object $r5, $r8;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.genetics.BinaryChromosome;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math3.genetics.BinaryChromosome;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.commons.math3.genetics.BinaryChromosome) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: int getLength()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.genetics.BinaryChromosome: int getLength()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i2 goto label5;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (java.lang.Integer) $r5;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.genetics.BinaryChromosome: java.util.List getRepresentation()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        $z1 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }
}
