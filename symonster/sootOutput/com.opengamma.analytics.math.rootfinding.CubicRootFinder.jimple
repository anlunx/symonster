public class com.opengamma.analytics.math.rootfinding.CubicRootFinder extends java.lang.Object implements com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder
{
    private static final double TWO_PI;

    public void <init>()
    {
        com.opengamma.analytics.math.rootfinding.CubicRootFinder r0;

        r0 := @this: com.opengamma.analytics.math.rootfinding.CubicRootFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.number.ComplexNumber[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)
    {
        com.opengamma.analytics.math.rootfinding.CubicRootFinder r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r1;
        double[] r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, d56, d57, d58, $d59;
        int $i0;
        byte $b1;
        boolean $z0, $z1;
        com.opengamma.analytics.math.number.ComplexNumber[] $r3, $r7;
        com.opengamma.analytics.math.number.ComplexNumber $r4, $r5, $r6, $r8, $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.rootfinding.CubicRootFinder;

        r1 := @parameter0: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i0 = lengthof r2;

        if $i0 != 4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Function is not a cubic");

        d0 = r2[3];

        $d13 = r2[2];

        d1 = $d13 / d0;

        $d14 = r2[1];

        d2 = $d14 / d0;

        $d15 = r2[0];

        d3 = $d15 / d0;

        d4 = d1 * d1;

        $d16 = 3.0 * d2;

        $d17 = d4 - $d16;

        d5 = $d17 / 9.0;

        $d18 = 2.0 * d1;

        $d21 = $d18 * d4;

        $d19 = 9.0 * d1;

        $d20 = $d19 * d2;

        $d23 = $d21 - $d20;

        $d22 = 27.0 * d3;

        $d24 = $d23 + $d22;

        d6 = $d24 / 54.0;

        d7 = d6 * d6;

        $d25 = d5 * d5;

        d8 = $d25 * d5;

        d9 = d1 / 3.0;

        $b1 = d7 cmpg d8;

        if $b1 >= 0 goto label3;

        $d39 = staticinvoke <java.lang.Math: double sqrt(double)>(d5);

        d56 = -2.0 * $d39;

        $d40 = staticinvoke <java.lang.Math: double sqrt(double)>(d8);

        $d41 = d6 / $d40;

        d57 = staticinvoke <java.lang.Math: double acos(double)>($d41);

        $r7 = newarray (com.opengamma.analytics.math.number.ComplexNumber)[3];

        $r8 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d42 = d57 / 3.0;

        $d43 = staticinvoke <java.lang.Math: double cos(double)>($d42);

        $d44 = d56 * $d43;

        $d45 = $d44 - d9;

        specialinvoke $r8.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d45, 0.0);

        $r7[0] = $r8;

        $r9 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d46 = d57 + 6.283185307179586;

        $d47 = $d46 / 3.0;

        $d48 = staticinvoke <java.lang.Math: double cos(double)>($d47);

        $d49 = d56 * $d48;

        $d50 = $d49 - d9;

        specialinvoke $r9.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d50, 0.0);

        $r7[1] = $r9;

        $r10 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d51 = d57 - 6.283185307179586;

        $d52 = $d51 / 3.0;

        $d53 = staticinvoke <java.lang.Math: double cos(double)>($d52);

        $d54 = d56 * $d53;

        $d55 = $d54 - d9;

        specialinvoke $r10.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d55, 0.0);

        $r7[2] = $r10;

        return $r7;

     label3:
        $d26 = staticinvoke <java.lang.Math: double signum(double)>(d6);

        $d27 = neg $d26;

        $d28 = staticinvoke <java.lang.Math: double abs(double)>(d6);

        $d29 = d7 - d8;

        $d30 = staticinvoke <java.lang.Math: double sqrt(double)>($d29);

        $d31 = $d28 + $d30;

        $d32 = staticinvoke <java.lang.Math: double cbrt(double)>($d31);

        d58 = $d27 * $d32;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d58, 0.0, 1.0E-16);

        if $z0 == 0 goto label4;

        $d59 = 0.0;

        goto label5;

     label4:
        $d59 = d5 / d58;

     label5:
        d10 = d58 + $d59;

        $d33 = -0.5 * d10;

        d11 = $d33 - d9;

        $d34 = staticinvoke <java.lang.Math: double sqrt(double)>(3.0);

        $d35 = d58 - $d59;

        $d36 = $d34 * $d35;

        d12 = $d36 / 2.0;

        $r3 = newarray (com.opengamma.analytics.math.number.ComplexNumber)[3];

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d37 = d10 - d9;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d37, 0.0);

        $r3[0] = $r4;

        $r5 = new com.opengamma.analytics.math.number.ComplexNumber;

        specialinvoke $r5.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(d11, d12);

        $r3[1] = $r5;

        $r6 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d38 = neg d12;

        specialinvoke $r6.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(d11, $d38);

        $r3[2] = $r6;

        return $r3;
    }

    public volatile java.lang.Object[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)
    {
        com.opengamma.analytics.math.rootfinding.CubicRootFinder r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r1;
        com.opengamma.analytics.math.number.ComplexNumber[] $r2;

        r0 := @this: com.opengamma.analytics.math.rootfinding.CubicRootFinder;

        r1 := @parameter0: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.rootfinding.CubicRootFinder: com.opengamma.analytics.math.number.ComplexNumber[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.rootfinding.CubicRootFinder: double TWO_PI> = 6.283185307179586;

        return;
    }
}
