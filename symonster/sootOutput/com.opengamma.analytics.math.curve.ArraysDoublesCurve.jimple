public abstract class com.opengamma.analytics.math.curve.ArraysDoublesCurve extends com.opengamma.analytics.math.curve.DoublesCurve
{
    private int _n;
    private double[] _xData;
    private double[] _yData;
    private java.lang.Double[] _xDataObject;
    private java.lang.Double[] _yDataObject;

    protected void <init>()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        return;
    }

    public void <init>(double[], double[], boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1, r2, $r8, $r9, $r10, $r11;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $i3 = lengthof r2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[1] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r5);

        $i4 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i4;

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r8 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, $i5);

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r8;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r9 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i6);

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r9;

        if z0 != 0 goto label3;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r10 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r11, $r10);

     label3:
        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1, r2;
        boolean z0, $z1;
        java.lang.Double r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        double[] $r10, $r11, $r12, $r13, $r16, $r17;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r7 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[0] = $r8;

        $i4 = lengthof r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[1] = $r9;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r7);

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r10 = newarray (double)[$i5];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r10;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r11 = newarray (double)[$i6];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r11;

        i7 = 0;

     label3:
        $i8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i7 >= $i8 goto label4;

        r3 = r1[i7];

        r4 = r2[i7];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "y");

        $r16 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $r16[i7] = $d0;

        $r17 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $d1 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r17[i7] = $d1;

        i7 = i7 + 1;

        goto label3;

     label4:
        if z0 != 0 goto label5;

        $r13 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r13, $r12);

     label5:
        return;
    }

    public void <init>(java.util.Map, boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.Map r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Double r4, r5;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r7, $r8, $r10, $r11, $r17, $r18;
        java.util.Set $r9;
        java.lang.Object $r12, $r13, $r14;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r7 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r7;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r8 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r8;

        i4 = 0;

        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.Double) $r13;

        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (java.lang.Double) $r14;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r5, "y");

        $r17 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r17[i4] = $d0;

        $r18 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r18[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r10 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r11, $r10);

     label3:
        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        boolean z0;
        com.opengamma.util.tuple.DoublesPair r2;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r4, $r5, $r6, $r7, $r9, $r10;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r4 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r4;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r5 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r5;

        i4 = 0;

     label1:
        $i3 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i4 >= $i3 goto label2;

        r2 = r1[i4];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "pair");

        $r9 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = r2.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r9[i4] = $d0;

        $r10 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $d1 = r2.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r10[i4] = $d1;

        i4 = i4 + 1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r7 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r7, $r6);

     label3:
        return;
    }

    public void <init>(java.util.Set, boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.Set r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        com.opengamma.util.tuple.DoublesPair r3;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r5, $r6, $r7, $r8, $r11, $r12;
        java.lang.Object $r9;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r5 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r5;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r6 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r6;

        i4 = 0;

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.util.tuple.DoublesPair) $r9;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "entry");

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r11[i4] = $d0;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = r3.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r12[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r7 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r8, $r7);

     label3:
        return;
    }

    public void <init>(java.util.List, java.util.List, boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.List r1, r2;
        boolean z0, $z1;
        java.lang.Double r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        double[] $r10, $r11, $r12, $r13, $r18, $r19;
        java.lang.Object $r14, $r15;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r7 = newarray (java.lang.Object)[2];

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[0] = $r8;

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r9;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r7);

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i4;

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r10 = newarray (double)[$i5];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r10;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r11 = newarray (double)[$i6];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r11;

        i7 = 0;

     label3:
        $i8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i7 >= $i8 goto label4;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r3 = (java.lang.Double) $r14;

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        r4 = (java.lang.Double) $r15;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "y");

        $r18 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $r18[i7] = $d0;

        $r19 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $d1 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r19[i7] = $d1;

        i7 = i7 + 1;

        goto label3;

     label4:
        if z0 != 0 goto label5;

        $r13 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r13, $r12);

     label5:
        return;
    }

    public void <init>(java.util.List, boolean)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.List r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        com.opengamma.util.tuple.DoublesPair r3;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r6, $r7, $r8, $r9, $r11, $r12;
        java.lang.Object $r10;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r6 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r6;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r7 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r7;

        i4 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.util.tuple.DoublesPair) $r10;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r11[i4] = $d0;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = r3.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r12[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r9 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r9, $r8);

     label3:
        return;
    }

    public void <init>(double[], double[], boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1, r2, $r9, $r10, $r11, $r12;
        boolean z0, $z1;
        java.lang.String r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r3);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r7;

        $i3 = lengthof r2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r6);

        $i4 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i4;

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r9 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, $i5);

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r9;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r10 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i6);

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r10;

        if z0 != 0 goto label3;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r12, $r11);

     label3:
        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1, r2;
        boolean z0, $z1;
        java.lang.String r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        double[] $r9, $r10, $r11, $r12, $r18, $r20;
        java.lang.Double $r13, $r15, $r17, $r19;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r3);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[0] = $r7;

        $i4 = lengthof r2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[1] = $r8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r6);

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r9 = newarray (double)[$i5];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r9;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r10 = newarray (double)[$i6];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r10;

        i7 = 0;

     label3:
        $i8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i7 >= $i8 goto label4;

        $r13 = r1[i7];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r13, "x");

        $r15 = r2[i7];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r15, "y");

        $r18 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r17 = r1[i7];

        $d0 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $r18[i7] = $d0;

        $r20 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $r19 = r2[i7];

        $d1 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $r20[i7] = $d1;

        i7 = i7 + 1;

        goto label3;

     label4:
        if z0 != 0 goto label5;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r12, $r11);

     label5:
        return;
    }

    public void <init>(java.util.Map, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.Map r1;
        boolean z0, $z1;
        java.lang.String r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r6, $r7, $r9, $r10, $r16, $r19;
        java.util.Set $r8;
        java.lang.Object $r11, $r12, $r14, $r17, $r20;
        java.lang.Double $r18, $r21;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r6 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r6;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r7 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r7;

        i4 = 0;

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r12, "x");

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r14, "y");

        $r16 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r17 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.Double) $r17;

        $d0 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        $r16[i4] = $d0;

        $r19 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $r20 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.lang.Double) $r20;

        $d1 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $r19[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r10 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r9 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r10, $r9);

     label3:
        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        boolean z0;
        java.lang.String r2;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r5, $r6, $r7, $r8, $r12, $r14;
        com.opengamma.util.tuple.DoublesPair $r9, $r11, $r13;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r5 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r5;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r6 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r6;

        i4 = 0;

     label1:
        $i3 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i4 >= $i3 goto label2;

        $r9 = r1[i4];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r9, "entry");

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r11 = r1[i4];

        $d0 = $r11.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r12[i4] = $d0;

        $r14 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $r13 = r1[i4];

        $d1 = $r13.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r14[i4] = $d1;

        i4 = i4 + 1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r7 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r8, $r7);

     label3:
        return;
    }

    public void <init>(java.util.Set, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.Set r1;
        boolean z0, $z1;
        java.lang.String r2;
        java.util.Iterator r3;
        com.opengamma.util.tuple.DoublesPair r4;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r6, $r7, $r8, $r9, $r12, $r13;
        java.lang.Object $r10;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r6 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r6;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r7 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r7;

        i4 = 0;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.tuple.DoublesPair) $r10;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "entry");

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = r4.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r12[i4] = $d0;

        $r13 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = r4.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r13[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r9 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r9, $r8);

     label3:
        return;
    }

    public void <init>(java.util.List, java.util.List, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.List r1, r2;
        boolean z0, $z1;
        java.lang.String r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        double[] $r9, $r10, $r11, $r12, $r17, $r20;
        java.lang.Object $r13, $r15, $r18, $r21;
        java.lang.Double $r19, $r22;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r3);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y data");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[2];

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r7;

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "x data size {} must be equal to y data size {}", $r6);

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i4;

        $i5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r9 = newarray (double)[$i5];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r9;

        $i6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r10 = newarray (double)[$i6];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r10;

        i7 = 0;

     label3:
        $i8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i7 >= $i8 goto label4;

        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r13, "x");

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r15, "y");

        $r17 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        $r19 = (java.lang.Double) $r18;

        $d0 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $r17[i7] = $d0;

        $r20 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $r21 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        $r22 = (java.lang.Double) $r21;

        $d1 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $r20[i7] = $d1;

        i7 = i7 + 1;

        goto label3;

     label4:
        if z0 != 0 goto label5;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r11 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r12, $r11);

     label5:
        return;
    }

    public void <init>(java.util.List, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.util.List r1;
        boolean z0, $z1;
        java.lang.String r2;
        java.util.Iterator r3;
        com.opengamma.util.tuple.DoublesPair r4;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r7, $r8, $r9, $r10, $r12, $r13;
        java.lang.Object $r11;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void <init>(java.lang.String)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r1, "data");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r7 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = $r7;

        $i2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r8 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = $r8;

        i4 = 0;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.tuple.DoublesPair) $r11;

        $r12 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = r4.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r12[i4] = $d0;

        $r13 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i3 = i4;

        i4 = i4 + 1;

        $d1 = r4.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r13[$i3] = $d1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $r10 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r9 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r10, $r9);

     label3:
        return;
    }

    public synchronized java.lang.Double[] getXData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1, $r2, $r3, $r5, $r7;
        int $i0, $i1, i2;
        double[] $r4;
        double $d0;
        java.lang.Double $r6;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject>;

        if $r1 == null goto label1;

        $r7 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject>;

        return $r7;

     label1:
        $i0 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r2 = newarray (java.lang.Double)[$i0];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject> = $r2;

        i2 = 0;

     label2:
        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i2 >= $i1 goto label3;

        $r5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject>;

        $r4 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $d0 = $r4[i2];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5[i2] = $r6;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r3 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject>;

        return $r3;
    }

    public synchronized java.lang.Double[] getYData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1, $r2, $r3, $r5, $r7;
        int $i0, $i1, i2;
        double[] $r4;
        double $d0;
        java.lang.Double $r6;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject>;

        if $r1 == null goto label1;

        $r7 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject>;

        return $r7;

     label1:
        $i0 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        $r2 = newarray (java.lang.Double)[$i0];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject> = $r2;

        i2 = 0;

     label2:
        $i1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        if i2 >= $i1 goto label3;

        $r5 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject>;

        $r4 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $d0 = $r4[i2];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5[i2] = $r6;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r3 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject>;

        return $r3;
    }

    public double[] getXDataAsPrimitive()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        return $r1;
    }

    public double[] getYDataAsPrimitive()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        return $r1;
    }

    public int size()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $i0 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4;
        double[] $r5, $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.curve.ArraysDoublesCurve) r1;

        $r6 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $r5 = r2.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 == 0 goto label4;

        $r8 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $r7 = r2.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $z2 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] $r1, $r2;
        int $i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        i5 = specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: int hashCode()>();

        $i1 = 31 * i5;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i6 = $i1 + $i2;

        $i3 = 31 * i6;

        $r2 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r2);

        i7 = $i3 + $i4;

        return i7;
    }

    public static com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta meta()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r0;

        $r0 = <com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta INSTANCE>;

        return $r0;
    }

    public com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = <com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta INSTANCE>;

        return $r1;
    }

    private int getN()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $i0 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n>;

        return $i0;
    }

    private void setN(int)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int i0;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        i0 := @parameter0: int;

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int _n> = i0;

        return;
    }

    public final org.joda.beans.Property n()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaProperty $r2;
        org.joda.beans.Property $r3;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        $r2 = virtualinvoke $r1.<com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: org.joda.beans.MetaProperty n()>();

        $r3 = interfaceinvoke $r2.<org.joda.beans.MetaProperty: org.joda.beans.Property createProperty(org.joda.beans.Bean)>(r0);

        return $r3;
    }

    private void setXData(double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: double[];

        staticinvoke <org.joda.beans.JodaBeanUtils: void notNull(java.lang.Object,java.lang.String)>(r1, "xData");

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData> = r1;

        return;
    }

    public final org.joda.beans.Property xData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaProperty $r2;
        org.joda.beans.Property $r3;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        $r2 = virtualinvoke $r1.<com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: org.joda.beans.MetaProperty xData()>();

        $r3 = interfaceinvoke $r2.<org.joda.beans.MetaProperty: org.joda.beans.Property createProperty(org.joda.beans.Bean)>(r0);

        return $r3;
    }

    private void setYData(double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: double[];

        staticinvoke <org.joda.beans.JodaBeanUtils: void notNull(java.lang.Object,java.lang.String)>(r1, "yData");

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData> = r1;

        return;
    }

    public final org.joda.beans.Property yData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaProperty $r2;
        org.joda.beans.Property $r3;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        $r2 = virtualinvoke $r1.<com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: org.joda.beans.MetaProperty yData()>();

        $r3 = interfaceinvoke $r2.<org.joda.beans.MetaProperty: org.joda.beans.Property createProperty(org.joda.beans.Bean)>(r0);

        return $r3;
    }

    private java.lang.Double[] getXDataObject()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject>;

        return $r1;
    }

    private void setXDataObject(java.lang.Double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.Double[];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _xDataObject> = r1;

        return;
    }

    public final org.joda.beans.Property xDataObject()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaProperty $r2;
        org.joda.beans.Property $r3;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        $r2 = virtualinvoke $r1.<com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: org.joda.beans.MetaProperty xDataObject()>();

        $r3 = interfaceinvoke $r2.<org.joda.beans.MetaProperty: org.joda.beans.Property createProperty(org.joda.beans.Bean)>(r0);

        return $r3;
    }

    private java.lang.Double[] getYDataObject()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject>;

        return $r1;
    }

    private void setYDataObject(java.lang.Double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.Double[];

        r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] _yDataObject> = r1;

        return;
    }

    public final org.joda.beans.Property yDataObject()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaProperty $r2;
        org.joda.beans.Property $r3;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        $r2 = virtualinvoke $r1.<com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: org.joda.beans.MetaProperty yDataObject()>();

        $r3 = interfaceinvoke $r2.<org.joda.beans.MetaProperty: org.joda.beans.Property createProperty(org.joda.beans.Bean)>(r0);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(192);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ArraysDoublesCurve{");

        i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void toString(java.lang.StringBuilder)>($r2);

        $i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i1 <= i0 goto label1;

        $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 2;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>($i3);

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void toString(java.lang.StringBuilder)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.StringBuilder r1, $r2, $r3, $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r20, $r21, $r23, $r24, $r27, $r28, $r30, $r31, $r34, $r35;
        int $i0;
        java.lang.Integer $r4;
        java.lang.String $r5, $r12, $r19, $r26, $r33;
        java.lang.Double[] $r11, $r18, $r25, $r32;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<com.opengamma.analytics.math.curve.DoublesCurve: void toString(java.lang.StringBuilder)>(r1);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $i0 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int getN()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <org.joda.beans.JodaBeanUtils: java.lang.String toString(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xData");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getXData()>();

        $r12 = staticinvoke <org.joda.beans.JodaBeanUtils: java.lang.String toString(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yData");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r18 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getYData()>();

        $r19 = staticinvoke <org.joda.beans.JodaBeanUtils: java.lang.String toString(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r23 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xDataObject");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r25 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getXDataObject()>();

        $r26 = staticinvoke <org.joda.beans.JodaBeanUtils: java.lang.String toString(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r30 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yDataObject");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r32 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getYDataObject()>();

        $r33 = staticinvoke <org.joda.beans.JodaBeanUtils: java.lang.String toString(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        return;
    }

    public volatile com.opengamma.analytics.math.curve.DoublesCurve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        return $r1;
    }

    public volatile com.opengamma.analytics.math.curve.Curve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        return $r1;
    }

    public volatile java.lang.Object[] getYData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getYData()>();

        return $r1;
    }

    public volatile java.lang.Comparable[] getXData()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getXData()>();

        return $r1;
    }

    public volatile org.joda.beans.MetaBean metaBean()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r1;
        org.joda.beans.MetaBean r2;

        r0 := @this: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta metaBean()>();

        r2 = (org.joda.beans.MetaBean) $r1;

        return r2;
    }

    static int access$000(com.opengamma.analytics.math.curve.ArraysDoublesCurve)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int $i0;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $i0 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: int getN()>();

        return $i0;
    }

    static java.lang.Double[] access$100(com.opengamma.analytics.math.curve.ArraysDoublesCurve)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getXDataObject()>();

        return $r1;
    }

    static java.lang.Double[] access$200(com.opengamma.analytics.math.curve.ArraysDoublesCurve)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] $r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: java.lang.Double[] getYDataObject()>();

        return $r1;
    }

    static void access$300(com.opengamma.analytics.math.curve.ArraysDoublesCurve, int)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        int i0;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        i0 := @parameter1: int;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void setN(int)>(i0);

        return;
    }

    static void access$400(com.opengamma.analytics.math.curve.ArraysDoublesCurve, double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter1: double[];

        specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void setXData(double[])>(r1);

        return;
    }

    static void access$500(com.opengamma.analytics.math.curve.ArraysDoublesCurve, double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter1: double[];

        specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void setYData(double[])>(r1);

        return;
    }

    static void access$600(com.opengamma.analytics.math.curve.ArraysDoublesCurve, java.lang.Double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter1: java.lang.Double[];

        specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void setXDataObject(java.lang.Double[])>(r1);

        return;
    }

    static void access$700(com.opengamma.analytics.math.curve.ArraysDoublesCurve, java.lang.Double[])
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        java.lang.Double[] r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        r1 := @parameter1: java.lang.Double[];

        specialinvoke r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: void setYDataObject(java.lang.Double[])>(r1);

        return;
    }

    static double[] access$800(com.opengamma.analytics.math.curve.ArraysDoublesCurve)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] $r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _xData>;

        return $r1;
    }

    static double[] access$900(com.opengamma.analytics.math.curve.ArraysDoublesCurve)
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve r0;
        double[] $r1;

        r0 := @parameter0: com.opengamma.analytics.math.curve.ArraysDoublesCurve;

        $r1 = r0.<com.opengamma.analytics.math.curve.ArraysDoublesCurve: double[] _yData>;

        return $r1;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta $r0;
        org.joda.beans.MetaBean r1;

        $r0 = <com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta: com.opengamma.analytics.math.curve.ArraysDoublesCurve$Meta INSTANCE>;

        r1 = (org.joda.beans.MetaBean) $r0;

        staticinvoke <org.joda.beans.JodaBeanUtils: void registerMetaBean(org.joda.beans.MetaBean)>(r1);

        return;
    }
}
