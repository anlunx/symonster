public abstract class org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver extends java.lang.Object implements org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver
{
    private static final double DEFAULT_RELATIVE_ACCURACY;
    private static final double DEFAULT_FUNCTION_VALUE_ACCURACY;
    private final double functionValueAccuracy;
    private final double absoluteAccuracy;
    private final double relativeAccuracy;
    private final org.apache.commons.math3.util.Incrementor evaluations;
    private double searchMin;
    private double searchMax;
    private double searchStart;
    private org.apache.commons.math3.analysis.UnivariateFunction function;

    protected void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double,double)>(1.0E-14, d0, 1.0E-15);

        return;
    }

    protected void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double,double)>(d0, d1, 1.0E-15);

        return;
    }

    protected void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1, d2;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r1.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations> = $r1;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double absoluteAccuracy> = d1;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double relativeAccuracy> = d0;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double functionValueAccuracy> = d2;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public double getMin()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMin>;

        return $d0;
    }

    public double getMax()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMax>;

        return $d0;
    }

    public double getStartValue()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchStart>;

        return $d0;
    }

    public double getAbsoluteAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double absoluteAccuracy>;

        return $d0;
    }

    public double getRelativeAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double relativeAccuracy>;

        return $d0;
    }

    public double getFunctionValueAccuracy()
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        $d0 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double functionValueAccuracy>;

        return $d0;
    }

    protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, $d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void incrementEvaluationCount()>();

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        return $d1;
    }

    protected void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2;
        org.apache.commons.math3.util.Incrementor $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMin> = d0;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchMax> = d1;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double searchStart> = d2;

        r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function> = r1;

        $r2 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i0);

        $r3 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        return;
    }

    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i0, r1, d0, d1, d2);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double doSolve()>();

        return $d3;
    }

    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $d2 = d1 - d0;

        $d3 = 0.5 * $d2;

        $d4 = d0 + $d3;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i0, r1, d0, d1, $d4);

        return $d5;
    }

    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i0, r1, #NaN, #NaN, d0);

        return $d1;
    }

    protected abstract double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException;

    protected boolean isBracketing(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: boolean isBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($r1, d0, d1);

        return $z0;
    }

    protected boolean isSequence(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1, d2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: boolean isSequence(double,double,double)>(d0, d1, d2);

        return $z0;
    }

    protected void verifyInterval(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyInterval(double,double)>(d0, d1);

        return;
    }

    protected void verifySequence(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifySequence(double,double,double)>(d0, d1, d2);

        return;
    }

    protected void verifyBracketing(double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        double d0, d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.analysis.UnivariateFunction function>;

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($r1, d0, d1);

        return;
    }

    protected void incrementEvaluationCount() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver r0;
        org.apache.commons.math3.util.Incrementor $r2;
        org.apache.commons.math3.exception.MaxCountExceededException $r3;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r4;
        java.lang.Number $r5;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r4.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label4:
        return;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double DEFAULT_FUNCTION_VALUE_ACCURACY> = 1.0E-15;

        <org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: double DEFAULT_RELATIVE_ACCURACY> = 1.0E-14;

        return;
    }
}
