class org.apache.commons.math.linear.QRDecompositionImpl$Solver extends java.lang.Object implements org.apache.commons.math.linear.DecompositionSolver
{
    private final double[][] qrt;
    private final double[] rDiag;

    private void <init>(double[][], double[])
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        double[][] r1;
        double[] r2;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt> = r1;

        r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag> = r2;

        return;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        double[] r1;
        int i0, i2;
        double d0;
        byte $b1;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        d0 = r1[i2];

        $b1 = d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public double[] solve(double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        double[] r1, r2, r3, r4, $r7, $r9, $r10, $r13, r20;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        double[][] $r5, $r6, $r11, $r12;
        boolean $z0;
        java.lang.Object $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19;
        org.apache.commons.math.linear.SingularMatrixException $r14;
        java.lang.Object[] $r15;
        org.apache.commons.math.exception.util.LocalizedFormats $r16;
        java.lang.Integer $r17, $r18;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        $r5 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        i0 = lengthof $r5;

        $r6 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        $r7 = $r6[0];

        i1 = lengthof $r7;

        $i2 = lengthof r1;

        if $i2 == i1 goto label01;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r15 = newarray (java.lang.Object)[2];

        $i5 = lengthof r1;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r15[0] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r15[1] = $r18;

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r19;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label02;

        $r14 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r14.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r14;

     label02:
        r2 = newarray (double)[i0];

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r8;

        i6 = 0;

     label03:
        $i3 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        if i6 >= $i3 goto label08;

        $r12 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        r20 = $r12[i6];

        d17 = 0.0;

        i7 = i6;

     label04:
        if i7 >= i1 goto label05;

        $d15 = r3[i7];

        $d14 = r20[i7];

        $d16 = $d15 * $d14;

        d17 = d17 + $d16;

        i7 = i7 + 1;

        goto label04;

     label05:
        $r13 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $d8 = $r13[i6];

        $d7 = r20[i6];

        $d9 = $d8 * $d7;

        d18 = d17 / $d9;

        i8 = i6;

     label06:
        if i8 >= i1 goto label07;

        $d12 = r3[i8];

        $d10 = r20[i8];

        $d11 = d18 * $d10;

        $d13 = $d12 + $d11;

        r3[i8] = $d13;

        i8 = i8 + 1;

        goto label06;

     label07:
        i6 = i6 + 1;

        goto label03;

     label08:
        $r9 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $i4 = lengthof $r9;

        i9 = $i4 - 1;

     label09:
        if i9 < 0 goto label12;

        $d1 = r3[i9];

        $r10 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $d0 = $r10[i9];

        $d2 = $d1 / $d0;

        r3[i9] = $d2;

        d19 = r3[i9];

        $r11 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        r4 = $r11[i9];

        r2[i9] = d19;

        i10 = 0;

     label10:
        if i10 >= i9 goto label11;

        $d5 = r3[i10];

        $d3 = r4[i10];

        $d4 = d19 * $d3;

        $d6 = $d5 - $d4;

        r3[i10] = $d6;

        i10 = i10 + 1;

        goto label10;

     label11:
        i9 = i9 + -1;

        goto label09;

     label12:
        return r2;
    }

    public org.apache.commons.math.linear.RealVector solve(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealVector r1;
        org.apache.commons.math.linear.ArrayRealVector $r3, $r4, $r6;
        java.lang.ClassCastException $r5;
        double[] $r7, $r8;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

     label1:
        $r3 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector solve(org.apache.commons.math.linear.ArrayRealVector)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        $r7 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $r8 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] solve(double[])>($r7);

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r8, 0);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.ArrayRealVector solve(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.ArrayRealVector r1, $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        $r3 = virtualinvoke r1.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] solve(double[])>($r3);

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r4, 0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealMatrix r1;
        int i0, i1, i2, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36;
        double[][] r2, r3, $r7, $r8, $r13, $r14;
        double[] r4, r5, r6, $r9, $r11, $r12, $r15, r23, r24, r25, r26, r27;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, d25;
        boolean $z0;
        org.apache.commons.math.linear.BlockRealMatrix $r10;
        org.apache.commons.math.linear.SingularMatrixException $r16;
        java.lang.Object[] $r17;
        org.apache.commons.math.exception.util.LocalizedFormats $r18;
        java.lang.Integer $r19, $r20, $r21;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r7 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        i0 = lengthof $r7;

        $r8 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        $r9 = $r8[0];

        i1 = lengthof $r9;

        $i8 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        if $i8 == i1 goto label01;

        $r18 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r17 = newarray (java.lang.Object)[4];

        $i21 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r17[0] = $r19;

        $i22 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        $r17[1] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r17[2] = $r21;

        $r17[3] = "n";

        $r22 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r18, $r17);

        throw $r22;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label02;

        $r16 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r16.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r16;

     label02:
        i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $i9 = i2 + 52;

        $i10 = $i9 - 1;

        i4 = $i10 / 52;

        r2 = staticinvoke <org.apache.commons.math.linear.BlockRealMatrix: double[][] createBlocksLayout(int,int)>(i0, i2);

        $i11 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        r3 = newmultiarray (double)[$i11][52];

        r4 = newarray (double)[52];

        i23 = 0;

     label03:
        if i23 >= i4 goto label24;

        i5 = i23 * 52;

        $i12 = i5 + 52;

        i6 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i12, i2);

        i7 = i6 - i5;

        $i14 = i1 - 1;

        $i13 = i6 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void copySubMatrix(int,int,int,int,double[][])>(0, $i14, i5, $i13, r3);

        i24 = 0;

     label04:
        $i15 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        if i24 >= $i15 goto label15;

        $r14 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        r23 = $r14[i24];

        $r15 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $d11 = $r15[i24];

        $d10 = r23[i24];

        $d12 = $d11 * $d10;

        d23 = 1.0 / $d12;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r4, 0, i7, 0.0);

        i25 = i24;

     label05:
        if i25 >= i1 goto label08;

        d24 = r23[i25];

        r24 = r3[i25];

        i26 = 0;

     label06:
        if i26 >= i7 goto label07;

        $d21 = r4[i26];

        $d19 = r24[i26];

        $d20 = d24 * $d19;

        $d22 = $d21 + $d20;

        r4[i26] = $d22;

        i26 = i26 + 1;

        goto label06;

     label07:
        i25 = i25 + 1;

        goto label05;

     label08:
        i27 = 0;

     label09:
        if i27 >= i7 goto label10;

        $d17 = r4[i27];

        $d18 = $d17 * d23;

        r4[i27] = $d18;

        i27 = i27 + 1;

        goto label09;

     label10:
        i28 = i24;

     label11:
        if i28 >= i1 goto label14;

        d25 = r23[i28];

        r25 = r3[i28];

        i29 = 0;

     label12:
        if i29 >= i7 goto label13;

        $d15 = r25[i29];

        $d13 = r4[i29];

        $d14 = $d13 * d25;

        $d16 = $d15 + $d14;

        r25[i29] = $d16;

        i29 = i29 + 1;

        goto label12;

     label13:
        i28 = i28 + 1;

        goto label11;

     label14:
        i24 = i24 + 1;

        goto label04;

     label15:
        $r11 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $i16 = lengthof $r11;

        i30 = $i16 - 1;

     label16:
        if i30 < 0 goto label23;

        i31 = i30 / 52;

        i32 = i31 * 52;

        $r12 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $d2 = $r12[i30];

        d0 = 1.0 / $d2;

        r26 = r3[i30];

        $i17 = i31 * i4;

        $i18 = $i17 + i23;

        r5 = r2[$i18];

        $i19 = i30 - i32;

        i33 = $i19 * i7;

        i34 = 0;

     label17:
        if i34 >= i7 goto label18;

        $d7 = r26[i34];

        $d8 = $d7 * d0;

        r26[i34] = $d8;

        $i20 = i33;

        i33 = i33 + 1;

        $d9 = r26[i34];

        r5[$i20] = $d9;

        i34 = i34 + 1;

        goto label17;

     label18:
        $r13 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[][] qrt>;

        r27 = $r13[i30];

        i35 = 0;

     label19:
        if i35 >= i30 goto label22;

        d1 = r27[i35];

        r6 = r3[i35];

        i36 = 0;

     label20:
        if i36 >= i7 goto label21;

        $d5 = r6[i36];

        $d3 = r26[i36];

        $d4 = $d3 * d1;

        $d6 = $d5 - $d4;

        r6[i36] = $d6;

        i36 = i36 + 1;

        goto label20;

     label21:
        i35 = i35 + 1;

        goto label19;

     label22:
        i30 = i30 + -1;

        goto label16;

     label23:
        i23 = i23 + 1;

        goto label03;

     label24:
        $r10 = new org.apache.commons.math.linear.BlockRealMatrix;

        specialinvoke $r10.<org.apache.commons.math.linear.BlockRealMatrix: void <init>(int,int,double[][],boolean)>(i0, i2, r2, 0);

        return $r10;
    }

    public org.apache.commons.math.linear.RealMatrix getInverse() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        double[] $r1;
        int $i0;
        org.apache.commons.math.linear.RealMatrix $r2, $r3;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        $r1 = r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: double[] rDiag>;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix)>($r2);

        return $r3;
    }

    void <init>(double[][], double[], org.apache.commons.math.linear.QRDecompositionImpl$1)
    {
        org.apache.commons.math.linear.QRDecompositionImpl$Solver r0;
        double[][] r1;
        double[] r2;
        org.apache.commons.math.linear.QRDecompositionImpl$1 r3;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math.linear.QRDecompositionImpl$1;

        specialinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: void <init>(double[][],double[])>(r1, r2);

        return;
    }
}
