public class com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction extends java.lang.Object implements com.opengamma.analytics.math.surface.SurfaceShiftFunction
{

    public void <init>()
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r7;
        double d0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CONSTANT_MULTIPLIER_");

        $r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double,java.lang.String)>(r1, d0, $r6);

        return $r7;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r8;
        double d0, $d1, $d2, $d3;
        java.lang.String r2;
        double[] r3, r4, r5, $r6;
        int i0, i1;
        com.opengamma.analytics.math.interpolation.Interpolator2D $r7;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getYDataAsPrimitive()>();

        i0 = lengthof r3;

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getZDataAsPrimitive()>();

        r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r6, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d2 = r5[i1];

        $d1 = 1.0 + d0;

        $d3 = $d2 * $d1;

        r5[i1] = $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator2D getInterpolator()>();

        $r8 = staticinvoke <com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface 'from'(double[],double[],double[],com.opengamma.analytics.math.interpolation.Interpolator2D,java.lang.String)>(r3, r4, r5, $r7, r2);

        return $r8;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double, double, double)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r7;
        double d0, d1, d2;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SINGLE_MULTIPLIER_");

        $r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double,double,double,java.lang.String)>(r1, d0, d1, d2, $r6);

        return $r7;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r11, $r13;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        java.lang.String r2;
        double[] r3, r4, r5, r6, r14, r15, r16;
        int i0, $i1, $i2, $i3, i10, i11;
        java.lang.Double $r7, $r8, $r9;
        com.opengamma.analytics.math.interpolation.Interpolator2D $r10, $r12;
        long $l4, $l5, $l7, $l8;
        byte $b6, $b9;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getYDataAsPrimitive()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getZDataAsPrimitive()>();

        i0 = lengthof r3;

        i10 = 0;

     label1:
        if i10 >= i0 goto label3;

        $d8 = r3[i10];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d8);

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label2;

        $d9 = r4[i10];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d9);

        $l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label2;

        r14 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r5, i0);

        $d11 = r14[i10];

        $d10 = 1.0 + d2;

        $d12 = $d11 * $d10;

        r14[i10] = $d12;

        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator2D getInterpolator()>();

        $r13 = staticinvoke <com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface 'from'(double[],double[],double[],com.opengamma.analytics.math.interpolation.Interpolator2D,java.lang.String)>(r3, r4, r14, $r12, r2);

        return $r13;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        $i1 = i0 + 1;

        r15 = newarray (double)[$i1];

        $i2 = i0 + 1;

        r16 = newarray (double)[$i2];

        $i3 = i0 + 1;

        r6 = newarray (double)[$i3];

        i11 = 0;

     label4:
        if i11 >= i0 goto label5;

        $d5 = r3[i11];

        r15[i11] = $d5;

        $d6 = r4[i11];

        r16[i11] = $d6;

        $d7 = r5[i11];

        r6[i11] = $d7;

        i11 = i11 + 1;

        goto label4;

     label5:
        r15[i0] = d0;

        r16[i0] = d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r7, $r8);

        $d3 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d4 = $d3 + d2;

        r6[i0] = $d4;

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator2D getInterpolator()>();

        $r11 = staticinvoke <com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface 'from'(double[],double[],double[],com.opengamma.analytics.math.interpolation.Interpolator2D,java.lang.String)>(r15, r16, r6, $r10, r2);

        return $r11;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double[], double[], double[])
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r10;
        double[] r2, r3, r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MULTIPLE_MULTIPLIER_");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double[],double[],double[],java.lang.String)>(r1, r2, r3, r4, $r9);

        return $r10;
    }

    public com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface, double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface r1, $r13, $r29;
        double[] r2, r3, r4, $r25, $r26, $r27;
        java.lang.String r5;
        int i0, i1, $i2, $i9, i10, i11;
        java.lang.Double[] r6, r7, r8;
        com.opengamma.analytics.math.interpolation.Interpolator2D $r12, $r28;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        java.lang.Double $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        long $l3, $l4, $l6, $l7;
        byte $b5, $b8;
        boolean $z3, z4;
        java.util.ArrayList $r30, $r32, $r34;
        java.util.List $r31, $r33, $r35;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "x shift");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "y shift");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "shifts");

        i0 = lengthof r2;

        if i0 != 0 goto label1;

        $r25 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getXDataAsPrimitive()>();

        $r26 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getYDataAsPrimitive()>();

        $r27 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: double[] getZDataAsPrimitive()>();

        $r28 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator2D getInterpolator()>();

        $r29 = staticinvoke <com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface 'from'(double[],double[],double[],com.opengamma.analytics.math.interpolation.Interpolator2D,java.lang.String)>($r25, $r26, $r27, $r28, r5);

        return $r29;

     label1:
        $i2 = lengthof r3;

        if i0 != $i2 goto label2;

        $i9 = lengthof r4;

        if i0 != $i9 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z3);

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.Double[] getXData()>();

        r7 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.Double[] getYData()>();

        r8 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.Double[] getZData()>();

        $r30 = new java.util.ArrayList;

        $r31 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        specialinvoke $r30.<java.util.ArrayList: void <init>(java.util.Collection)>($r31);

        $r32 = new java.util.ArrayList;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r7);

        specialinvoke $r32.<java.util.ArrayList: void <init>(java.util.Collection)>($r33);

        $r34 = new java.util.ArrayList;

        $r35 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r8);

        specialinvoke $r34.<java.util.ArrayList: void <init>(java.util.Collection)>($r35);

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: int size()>();

        i10 = 0;

     label4:
        if i10 >= i0 goto label9;

        z4 = 0;

        i11 = 0;

     label5:
        if i11 >= i1 goto label7;

        $r20 = r6[i11];

        $d8 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d8);

        $d9 = r2[i10];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d9);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label6;

        $r21 = r7[i11];

        $d10 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d10);

        $d11 = r3[i10];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d11);

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label6;

        $r22 = r8[i11];

        $d12 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $d13 = r4[i10];

        $d14 = 1.0 + $d13;

        $d15 = $d12 * $d14;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        interfaceinvoke $r34.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i11, $r23);

        z4 = 1;

     label6:
        i11 = i11 + 1;

        goto label5;

     label7:
        if z4 != 0 goto label8;

        $d0 = r2[i10];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r14);

        $d1 = r3[i10];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r15);

        $d2 = r2[i10];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $d3 = r3[i10];

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r18 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r16, $r17);

        $d4 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        $d5 = r4[i10];

        $d6 = 1.0 + $d5;

        $d7 = $d4 * $d6;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>($r19);

     label8:
        i10 = i10 + 1;

        goto label4;

     label9:
        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator2D getInterpolator()>();

        $r13 = staticinvoke <com.opengamma.analytics.math.surface.InterpolatedDoublesSurface: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface 'from'(java.util.List,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator2D,java.lang.String)>($r30, $r32, $r34, $r12, r5);

        return $r13;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double[] r2, r3, r4;
        java.lang.String r5;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.lang.String;

        $r6 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double[],double[],double[],java.lang.String)>($r6, r2, r3, r4, r5);

        return $r7;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double[], double[], double[])
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double[] r2, r3, r4;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double[],double[],double[])>($r5, r2, r3, r4);

        return $r6;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0, d1, d2;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: java.lang.String;

        $r3 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double,double,double,java.lang.String)>($r3, d0, d1, d2, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, double, double)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0, d1, d2;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double,double,double)>($r2, d0, d1, d2);

        return $r3;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        $r3 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double,java.lang.String)>($r3, d0, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double)
    {
        com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0;
        com.opengamma.analytics.math.surface.InterpolatedDoublesSurface $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        $r2 = (com.opengamma.analytics.math.surface.InterpolatedDoublesSurface) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedSurfaceMultiplicativeShiftFunction: com.opengamma.analytics.math.surface.InterpolatedDoublesSurface evaluate(com.opengamma.analytics.math.surface.InterpolatedDoublesSurface,double)>($r2, d0);

        return $r3;
    }
}
