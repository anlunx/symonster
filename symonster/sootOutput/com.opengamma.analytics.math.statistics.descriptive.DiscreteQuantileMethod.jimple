public abstract class com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod extends com.opengamma.analytics.math.statistics.descriptive.QuantileCalculationMethod
{

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod r0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.QuantileCalculationMethod: void <init>()>();

        return;
    }

    public double quantileFromSorted(double, double[])
    {
        com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod r0;
        double d0, $d1, $d2, $d3;
        double[] r1;
        int i0, i1, $i4;
        byte $b2, $b3;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $b2 = d0 cmpl 0.0;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Quantile should be above 0.");

        $b3 = d0 cmpg 1.0;

        if $b3 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Quantile should be below 1.");

        i0 = lengthof r1;

        $d1 = (double) i0;

        $d2 = d0 * $d1;

        i1 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.DiscreteQuantileMethod: int index(double)>($d2);

        $i4 = i1 - 1;

        $d3 = r1[$i4];

        return $d3;
    }

    abstract int index(double);
}
