public class org.apache.commons.math3.distribution.NakagamiDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private final double mu;
    private final double omega;
    private final double inverseAbsoluteAccuracy;

    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NakagamiDistribution: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, d1, d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.NakagamiDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, d0, d1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d2;
        byte $b0, $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r6, $r7;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label1:
        $b1 = d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_SCALE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu> = d0;

        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega> = d1;

        r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double inverseAbsoluteAccuracy> = d2;

        return;
    }

    public double getShape()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        return $d0;
    }

    public double getScale()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        return $d0;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double inverseAbsoluteAccuracy>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d1);

        $d5 = 2.0 * $d3;

        $d4 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d6 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d4);

        $d8 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d7 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d8, $d7);

        $d10 = $d6 * $d9;

        $d14 = $d5 / $d10;

        $d11 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d12 = 2.0 * $d11;

        $d13 = $d12 - 1.0;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d13);

        $d22 = $d14 * $d15;

        $d16 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d17 = neg $d16;

        $d18 = $d17 * d0;

        $d20 = $d18 * d0;

        $d19 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d21 = $d20 / $d19;

        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d21);

        $d24 = $d22 * $d23;

        return $d24;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        d0 := @parameter0: double;

        $d6 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = $d1 * d0;

        $d4 = $d2 * d0;

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d5 = $d4 / $d3;

        $d7 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double)>($d6, $d5);

        return $d7;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d1 = $d0 + 0.5;

        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d1);

        $d3 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d3);

        $d8 = $d2 / $d4;

        $d6 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d5 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d7 = $d6 / $d5;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $d10 = $d8 * $d9;

        return $d10;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d2 = $d1 + 0.5;

        $d3 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d2);

        $d4 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d5 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d4);

        d0 = $d3 / $d5;

        $d11 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double omega>;

        $d6 = r0.<org.apache.commons.math3.distribution.NakagamiDistribution: double mu>;

        $d7 = 1.0 / $d6;

        $d8 = $d7 * d0;

        $d9 = $d8 * d0;

        $d10 = 1.0 - $d9;

        $d12 = $d11 * $d10;

        return $d12;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.NakagamiDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NakagamiDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.NakagamiDistribution: long serialVersionUID> = 20141003L;

        <org.apache.commons.math3.distribution.NakagamiDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
