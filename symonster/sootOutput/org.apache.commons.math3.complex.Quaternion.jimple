public final class org.apache.commons.math3.complex.Quaternion extends java.lang.Object implements java.io.Serializable
{
    public static final org.apache.commons.math3.complex.Quaternion IDENTITY;
    public static final org.apache.commons.math3.complex.Quaternion ZERO;
    public static final org.apache.commons.math3.complex.Quaternion I;
    public static final org.apache.commons.math3.complex.Quaternion J;
    public static final org.apache.commons.math3.complex.Quaternion K;
    private static final long serialVersionUID;
    private final double q0;
    private final double q1;
    private final double q2;
    private final double q3;

    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.complex.Quaternion: double q0> = d0;

        r0.<org.apache.commons.math3.complex.Quaternion: double q1> = d1;

        r0.<org.apache.commons.math3.complex.Quaternion: double q2> = d2;

        r0.<org.apache.commons.math3.complex.Quaternion: double q3> = d3;

        return;
    }

    public void <init>(double, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0, $d1, $d2, $d3;
        double[] r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 3 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, 3);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.complex.Quaternion: double q0> = d0;

        $d1 = r1[0];

        r0.<org.apache.commons.math3.complex.Quaternion: double q1> = $d1;

        $d2 = r1[1];

        r0.<org.apache.commons.math3.complex.Quaternion: double q2> = $d2;

        $d3 = r1[2];

        r0.<org.apache.commons.math3.complex.Quaternion: double q3> = $d3;

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double[])>(0.0, r1);

        return;
    }

    public org.apache.commons.math3.complex.Quaternion getConjugate()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d6 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d5 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d4 = neg $d1;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d3 = neg $d2;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d6, $d5, $d4, $d3);

        return $r1;
    }

    public static org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;

        r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        d5 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        d6 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        d7 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d13 = d0 * d4;

        $d12 = d1 * d5;

        $d15 = $d13 - $d12;

        $d14 = d2 * d6;

        $d17 = $d15 - $d14;

        $d16 = d3 * d7;

        d8 = $d17 - $d16;

        $d19 = d0 * d5;

        $d18 = d1 * d4;

        $d21 = $d19 + $d18;

        $d20 = d2 * d7;

        $d23 = $d21 + $d20;

        $d22 = d3 * d6;

        d9 = $d23 - $d22;

        $d25 = d0 * d6;

        $d24 = d1 * d7;

        $d27 = $d25 - $d24;

        $d26 = d2 * d4;

        $d29 = $d27 + $d26;

        $d28 = d3 * d5;

        d10 = $d29 + $d28;

        $d31 = d0 * d7;

        $d30 = d1 * d6;

        $d33 = $d31 + $d30;

        $d32 = d2 * d5;

        $d35 = $d33 - $d32;

        $d34 = d3 * d4;

        d11 = $d35 + $d34;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(d8, d9, d10, d11);

        return $r2;
    }

    public org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r2 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d5 = $d3 + $d4;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d7 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d8 = $d6 + $d7;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d10 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d11 = $d9 + $d10;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d2, $d5, $d8, $d11);

        return $r2;
    }

    public org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r2 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d7 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d8 = $d6 - $d7;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d10 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d11 = $d9 - $d10;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d2, $d5, $d8, $d11);

        return $r2;
    }

    public org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $r2 = staticinvoke <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, r1);

        return $r2;
    }

    public static double dotProduct(org.apache.commons.math3.complex.Quaternion, org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter1: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d2 = $d0 * $d1;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d5 = $d3 * $d4;

        $d6 = $d2 + $d5;

        $d7 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d8 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d9 = $d7 * $d8;

        $d10 = $d6 + $d9;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d12 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d13 = $d11 * $d12;

        $d14 = $d10 + $d13;

        return $d14;
    }

    public double dotProduct(org.apache.commons.math3.complex.Quaternion)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        $d0 = staticinvoke <org.apache.commons.math3.complex.Quaternion: double dotProduct(org.apache.commons.math3.complex.Quaternion,org.apache.commons.math3.complex.Quaternion)>(r0, r1);

        return $d0;
    }

    public double getNorm()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d6 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d8 = $d7 * $d6;

        $d13 = $d9 + $d8;

        $d11 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d10 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d12 = $d11 * $d10;

        $d14 = $d13 + $d12;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d14);

        return $d15;
    }

    public org.apache.commons.math3.complex.Quaternion normalize()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0;
        org.apache.commons.math3.exception.ZeroException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getNorm()>();

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.ZeroException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORM>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[0] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d9 = $d2 / d0;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d8 = $d3 / d0;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d7 = $d4 / d0;

        $d5 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d6 = $d5 / d0;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d9, $d8, $d7, $d6);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.complex.Quaternion r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.complex.Quaternion;

        if $z0 == 0 goto label4;

        r2 = (org.apache.commons.math3.complex.Quaternion) r1;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d3 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $b1 = $d2 cmpl $d3;

        if $b1 != 0 goto label2;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d5 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $b2 = $d4 cmpl $d5;

        if $b2 != 0 goto label2;

        $d6 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d7 = virtualinvoke r2.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $b3 = $d6 cmpl $d7;

        if $b3 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        int i0, i1, $i2, i3, i4;
        double d0, $d1, $d2, $d3, $d4;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        i3 = 17;

        $r2 = newarray (double)[4];

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $r2[0] = $d1;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $r2[1] = $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $r2[2] = $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $r2[3] = $d4;

        i0 = lengthof $r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        d0 = $r2[i4];

        i1 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>(d0);

        $i2 = 31 * i3;

        i3 = $i2 + i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public boolean equals(org.apache.commons.math3.complex.Quaternion, double)
    {
        org.apache.commons.math3.complex.Quaternion r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        r1 := @parameter0: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter1: double;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d2 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, $d2, d0);

        if $z0 == 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d3, $d4, d0);

        if $z1 == 0 goto label1;

        $d5 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d6 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $z2 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d5, $d6, d0);

        if $z2 == 0 goto label1;

        $d7 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d8 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d7, $d8, d0);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public boolean isUnitQuaternion(double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getNorm()>();

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 1.0, d0);

        return $z0;
    }

    public boolean isPureQuaternion(double)
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double d0, $d1, $d2;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b0 = $d2 cmpg d0;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.math3.complex.Quaternion getPositivePolarForm()
    {
        org.apache.commons.math3.complex.Quaternion r0, r1, $r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion normalize()>();

        $r3 = new org.apache.commons.math3.complex.Quaternion;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        $d2 = neg $d1;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $d4 = neg $d3;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $d6 = neg $d5;

        $d7 = virtualinvoke r1.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $d8 = neg $d7;

        specialinvoke $r3.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d2, $d4, $d6, $d8);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion normalize()>();

        return $r2;
    }

    public org.apache.commons.math3.complex.Quaternion getInverse()
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26;
        byte $b0;
        org.apache.commons.math3.exception.ZeroException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d6 = $d2 * $d1;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d5 = $d4 * $d3;

        $d10 = $d6 + $d5;

        $d8 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d7 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d9 = $d8 * $d7;

        $d14 = $d10 + $d9;

        $d12 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d11 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d13 = $d12 * $d11;

        d0 = $d14 + $d13;

        $d15 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d15;

        if $b0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.ZeroException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORM>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[0] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d16 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d26 = $d16 / d0;

        $d17 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d18 = neg $d17;

        $d25 = $d18 / d0;

        $d19 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d20 = neg $d19;

        $d24 = $d20 / d0;

        $d21 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d22 = neg $d21;

        $d23 = $d22 / d0;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d26, $d25, $d24, $d23);

        return $r1;
    }

    public double getQ0()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        return $d0;
    }

    public double getQ1()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        return $d0;
    }

    public double getQ2()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        return $d0;
    }

    public double getQ3()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        return $d0;
    }

    public double getScalarPart()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ0()>();

        return $d0;
    }

    public double[] getVectorPart()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        double[] $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r1 = newarray (double)[3];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ1()>();

        $r1[0] = $d0;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ2()>();

        $r1[1] = $d1;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.complex.Quaternion: double getQ3()>();

        $r1[2] = $d2;

        return $r1;
    }

    public org.apache.commons.math3.complex.Quaternion multiply(double)
    {
        org.apache.commons.math3.complex.Quaternion r0, $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $d8 = d0 * $d1;

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $d7 = d0 * $d2;

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $d6 = d0 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $d5 = d0 * $d4;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>($d8, $d7, $d6, $d5);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.complex.Quaternion r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r13;

        r0 := @this: org.apache.commons.math3.complex.Quaternion;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r0.<org.apache.commons.math3.complex.Quaternion: double q0>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = r0.<org.apache.commons.math3.complex.Quaternion: double q1>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d2 = r0.<org.apache.commons.math3.complex.Quaternion: double q2>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d3 = r0.<org.apache.commons.math3.complex.Quaternion: double q3>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.complex.Quaternion $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.math3.complex.Quaternion: long serialVersionUID> = 20092012L;

        $r0 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r0.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(1.0, 0.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion IDENTITY> = $r0;

        $r1 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r1.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion ZERO> = $r1;

        $r2 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r2.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 1.0, 0.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion I> = $r2;

        $r3 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r3.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 1.0, 0.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion J> = $r3;

        $r4 = new org.apache.commons.math3.complex.Quaternion;

        specialinvoke $r4.<org.apache.commons.math3.complex.Quaternion: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 1.0);

        <org.apache.commons.math3.complex.Quaternion: org.apache.commons.math3.complex.Quaternion K> = $r4;

        return;
    }
}
