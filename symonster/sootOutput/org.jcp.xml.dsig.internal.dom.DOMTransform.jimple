public class org.jcp.xml.dsig.internal.dom.DOMTransform extends org.jcp.xml.dsig.internal.dom.DOMStructure implements javax.xml.crypto.dsig.Transform
{
    protected javax.xml.crypto.dsig.TransformService spi;

    public void <init>(javax.xml.crypto.dsig.TransformService)
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.dsig.TransformService r1;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: javax.xml.crypto.dsig.TransformService;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMStructure: void <init>()>();

        r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi> = r1;

        return;
    }

    public void <init>(org.w3c.dom.Element, javax.xml.crypto.XMLCryptoContext, java.security.Provider) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        org.w3c.dom.Element r1;
        javax.xml.crypto.XMLCryptoContext r2;
        java.security.Provider r3;
        java.lang.String r4;
        javax.xml.crypto.dsig.TransformService $r6, $r8, $r14;
        javax.xml.crypto.dom.DOMStructure $r7;
        java.security.InvalidAlgorithmParameterException $r9;
        javax.xml.crypto.MarshalException $r10, $r12;
        java.security.NoSuchAlgorithmException $r11, $r13;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.security.Provider;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMStructure: void <init>()>();

        r4 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: java.lang.String getAttributeValue(org.w3c.dom.Element,java.lang.String)>(r1, "Algorithm");

     label01:
        $r6 = staticinvoke <javax.xml.crypto.dsig.TransformService: javax.xml.crypto.dsig.TransformService getInstance(java.lang.String,java.lang.String)>(r4, "DOM");

        r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi> = $r6;

     label02:
        goto label07;

     label03:
        $r13 := @caughtexception;

     label04:
        $r14 = staticinvoke <javax.xml.crypto.dsig.TransformService: javax.xml.crypto.dsig.TransformService getInstance(java.lang.String,java.lang.String,java.security.Provider)>(r4, "DOM", r3);

        r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi> = $r14;

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        $r12 = new javax.xml.crypto.MarshalException;

        specialinvoke $r12.<javax.xml.crypto.MarshalException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label07:
        $r8 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r7 = new javax.xml.crypto.dom.DOMStructure;

        specialinvoke $r7.<javax.xml.crypto.dom.DOMStructure: void <init>(org.w3c.dom.Node)>(r1);

        virtualinvoke $r8.<javax.xml.crypto.dsig.TransformService: void init(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)>($r7, r2);

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        $r10 = new javax.xml.crypto.MarshalException;

        specialinvoke $r10.<javax.xml.crypto.MarshalException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label10:
        return;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label03;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label06;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label09;
    }

    public final java.security.spec.AlgorithmParameterSpec getParameterSpec()
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.dsig.TransformService $r1;
        java.security.spec.AlgorithmParameterSpec $r2;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        $r1 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r2 = virtualinvoke $r1.<javax.xml.crypto.dsig.TransformService: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        return $r2;
    }

    public final java.lang.String getAlgorithm()
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.dsig.TransformService $r1;
        java.lang.String $r2;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        $r1 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r2 = virtualinvoke $r1.<javax.xml.crypto.dsig.TransformService: java.lang.String getAlgorithm()>();

        return $r2;
    }

    public void marshal(org.w3c.dom.Node, java.lang.String, javax.xml.crypto.dom.DOMCryptoContext) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        org.w3c.dom.Node r1;
        java.lang.String r2, $r5, $r6;
        javax.xml.crypto.dom.DOMCryptoContext r3;
        org.w3c.dom.Document r4;
        boolean $z0;
        javax.xml.crypto.dom.DOMStructure $r7;
        javax.xml.crypto.dsig.TransformService $r8;
        org.w3c.dom.Element r9;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javax.xml.crypto.dom.DOMCryptoContext;

        r4 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Document getOwnerDocument(org.w3c.dom.Node)>(r1);

        $r5 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("Transforms");

        if $z0 == 0 goto label1;

        r9 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,java.lang.String,java.lang.String)>(r4, "Transform", "http://www.w3.org/2000/09/xmldsig#", r2);

        goto label2;

     label1:
        r9 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,java.lang.String,java.lang.String)>(r4, "CanonicalizationMethod", "http://www.w3.org/2000/09/xmldsig#", r2);

     label2:
        $r6 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: java.lang.String getAlgorithm()>();

        staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: void setAttribute(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r9, "Algorithm", $r6);

        $r8 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r7 = new javax.xml.crypto.dom.DOMStructure;

        specialinvoke $r7.<javax.xml.crypto.dom.DOMStructure: void <init>(org.w3c.dom.Node)>(r9);

        virtualinvoke $r8.<javax.xml.crypto.dsig.TransformService: void marshalParams(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext)>($r7, r3);

        interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r9);

        return;
    }

    public javax.xml.crypto.Data transform(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.Data r1, $r4;
        javax.xml.crypto.XMLCryptoContext r2;
        javax.xml.crypto.dsig.TransformService $r3;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        $r3 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r4 = virtualinvoke $r3.<javax.xml.crypto.dsig.TransformService: javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)>(r1, r2);

        return $r4;
    }

    public javax.xml.crypto.Data transform(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext, java.io.OutputStream) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.Data r1, $r5;
        javax.xml.crypto.XMLCryptoContext r2;
        java.io.OutputStream r3;
        javax.xml.crypto.dsig.TransformService $r4;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.io.OutputStream;

        $r4 = r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.dsig.TransformService spi>;

        $r5 = virtualinvoke $r4.<javax.xml.crypto.dsig.TransformService: javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)>(r1, r2, r3);

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        java.lang.Object r1;
        javax.xml.crypto.dsig.Transform r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.security.spec.AlgorithmParameterSpec $r5, $r6;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof javax.xml.crypto.dsig.Transform;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (javax.xml.crypto.dsig.Transform) r1;

        $r3 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: java.lang.String getAlgorithm()>();

        $r4 = interfaceinvoke r2.<javax.xml.crypto.dsig.Transform: java.lang.String getAlgorithm()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        $r6 = interfaceinvoke r2.<javax.xml.crypto.dsig.Transform: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        $z2 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: boolean paramsEqual(java.security.spec.AlgorithmParameterSpec,java.security.spec.AlgorithmParameterSpec)>($r5, $r6);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    javax.xml.crypto.Data transform(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext, javax.xml.crypto.dsig.dom.DOMSignContext) throws javax.xml.crypto.MarshalException, javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.DOMTransform r0;
        javax.xml.crypto.Data r1, $r6;
        javax.xml.crypto.XMLCryptoContext r2;
        javax.xml.crypto.dsig.dom.DOMSignContext r3;
        org.w3c.dom.Node $r4;
        java.lang.String $r5;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: javax.xml.crypto.dsig.dom.DOMSignContext;

        $r4 = virtualinvoke r3.<javax.xml.crypto.dsig.dom.DOMSignContext: org.w3c.dom.Node getParent()>();

        $r5 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: java.lang.String getSignaturePrefix(javax.xml.crypto.XMLCryptoContext)>(r3);

        virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: void marshal(org.w3c.dom.Node,java.lang.String,javax.xml.crypto.dom.DOMCryptoContext)>($r4, $r5, r3);

        $r6 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)>(r1, r2);

        return $r6;
    }
}
