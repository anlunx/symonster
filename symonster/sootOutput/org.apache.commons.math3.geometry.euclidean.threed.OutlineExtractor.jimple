public class org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor extends java.lang.Object
{
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D u;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D v;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D w;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = r2;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1, r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r3;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getOutline(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] r4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r5, $r8, $r9;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector $r6;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r7;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r10;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void <init>(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor,double)>(r0, $d0);

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r6);

        r3 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet getProjected()>();

        r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        i4 = 0;

     label1:
        $i0 = lengthof r4;

        if i4 >= $i0 goto label8;

        r5 = r4[i4];

        i5 = lengthof r5;

        i6 = 0;

     label2:
        if i6 >= i5 goto label6;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: boolean pointIsBetween(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],int,int)>(r5, i5, i6);

        if $z0 == 0 goto label5;

        i7 = i6;

     label3:
        $i2 = i5 - 1;

        if i7 >= $i2 goto label4;

        $i3 = i7 + 1;

        $r10 = r5[$i3];

        r5[i7] = $r10;

        i7 = i7 + 1;

        goto label3;

     label4:
        i5 = i5 + -1;

        goto label2;

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        $i1 = lengthof r5;

        if i5 == $i1 goto label7;

        $r8 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[i5];

        r4[i4] = $r8;

        $r9 = r4[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r9, 0, i5);

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return r4;
    }

    private boolean pointIsBetween(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], int, int)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r4;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;
        byte $b7, $b8;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i1 + i0;

        $i3 = $i2 - 1;

        $i4 = $i3 % i0;

        r2 = r1[$i4];

        r3 = r1[i1];

        $i5 = i1 + 1;

        $i6 = $i5 % i0;

        r4 = r1[$i6];

        $d7 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d8 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d0 = $d7 - $d8;

        $d9 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d10 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = $d9 - $d10;

        $d11 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d2 = $d11 - $d12;

        $d13 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d14 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d3 = $d13 - $d14;

        $d16 = d0 * d3;

        $d15 = d2 * d1;

        d4 = $d16 - $d15;

        $d18 = d0 * d2;

        $d17 = d1 * d3;

        d5 = $d18 + $d17;

        $d20 = d0 * d0;

        $d19 = d1 * d1;

        $d24 = $d20 + $d19;

        $d22 = d2 * d2;

        $d21 = d3 * d3;

        $d23 = $d22 + $d21;

        $d25 = $d24 * $d23;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d25);

        $d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $d27 = 1.0E-6 * d6;

        $b7 = $d26 cmpg $d27;

        if $b7 > 0 goto label1;

        $b8 = d5 cmpl 0.0;

        if $b8 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        return $r1;
    }
}
