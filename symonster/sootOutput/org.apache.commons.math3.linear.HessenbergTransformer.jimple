class org.apache.commons.math3.linear.HessenbergTransformer extends java.lang.Object
{
    private final double[][] householderVectors;
    private final double[] ort;
    private org.apache.commons.math3.linear.RealMatrix cachedP;
    private org.apache.commons.math3.linear.RealMatrix cachedPt;
    private org.apache.commons.math3.linear.RealMatrix cachedH;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, $i1, $i2;
        boolean $z0;
        double[][] $r2;
        double[] $r3;
        org.apache.commons.math3.linear.NonSquareMatrixException $r4;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i1, $i2);

        throw $r4;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors> = $r2;

        $r3 = newarray (double)[i0];

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort> = $r3;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = null;

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.HessenbergTransformer: void transform()>();

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, i1, $i2, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13;
        double[][] r1, $r4, $r6, $r9, $r15;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3, $r5;
        double[] $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r2 != null goto label17;

        $r4 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i0 = lengthof $r4;

        i1 = i0 - 1;

        r1 = newmultiarray (double)[i0][i0];

        i7 = 0;

     label01:
        if i7 >= i0 goto label06;

        i8 = 0;

     label02:
        if i8 >= i0 goto label05;

        $r18 = r1[i7];

        $i6 = i8;

        if i7 != i8 goto label03;

        $d12 = 1.0;

        goto label04;

     label03:
        $d12 = 0.0;

     label04:
        $r18[$i6] = $d12;

        i8 = i8 + 1;

        goto label02;

     label05:
        i7 = i7 + 1;

        goto label01;

     label06:
        i9 = i1 - 1;

     label07:
        if i9 < 1 goto label16;

        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r7 = $r6[i9];

        $i2 = i9 - 1;

        $d0 = $r7[$i2];

        $b3 = $d0 cmpl 0.0;

        if $b3 == 0 goto label15;

        i10 = i9 + 1;

     label08:
        if i10 > i1 goto label09;

        $r17 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r15 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r16 = $r15[i10];

        $i5 = i9 - 1;

        $d11 = $r16[$i5];

        $r17[i10] = $d11;

        i10 = i10 + 1;

        goto label08;

     label09:
        i11 = i9;

     label10:
        if i11 > i1 goto label15;

        d13 = 0.0;

        i12 = i9;

     label11:
        if i12 > i1 goto label12;

        $r13 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d9 = $r13[i12];

        $r14 = r1[i12];

        $d8 = $r14[i11];

        $d10 = $d9 * $d8;

        d13 = d13 + $d10;

        i12 = i12 + 1;

        goto label11;

     label12:
        $r8 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r8[i9];

        $d3 = d13 / $d1;

        $r9 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r10 = $r9[i9];

        $i4 = i9 - 1;

        $d2 = $r10[$i4];

        d14 = $d3 / $d2;

        i13 = i9;

     label13:
        if i13 > i1 goto label14;

        $r11 = r1[i13];

        $d6 = $r11[i11];

        $r12 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d4 = $r12[i13];

        $d5 = d14 * $d4;

        $d7 = $d6 + $d5;

        $r11[i11] = $d7;

        i13 = i13 + 1;

        goto label13;

     label14:
        i11 = i11 + 1;

        goto label10;

     label15:
        i9 = i9 + -1;

        goto label07;

     label16:
        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = $r5;

     label17:
        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix getPT()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix getH()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, $i1, $i2, i3, i4;
        double[][] r1, $r4, $r6, $r9;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3, $r5;
        double[] $r7, $r8, $r10, $r11;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH>;

        if $r2 != null goto label6;

        $r4 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i0 = lengthof $r4;

        r1 = newmultiarray (double)[i0][i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        if i3 <= 0 goto label2;

        $r11 = r1[i3];

        $i2 = i3 - 1;

        $r9 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r10 = $r9[i3];

        $i1 = i3 - 1;

        $d1 = $r10[$i1];

        $r11[$i2] = $d1;

     label2:
        i4 = i3;

     label3:
        if i4 >= i0 goto label4;

        $r8 = r1[i3];

        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r7 = $r6[i3];

        $d0 = $r7[i4];

        $r8[i4] = $d0;

        i4 = i4 + 1;

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH> = $r5;

     label6:
        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix cachedH>;

        return $r3;
    }

    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        return $r1;
    }

    private void transform()
    {
        org.apache.commons.math3.linear.HessenbergTransformer r0;
        int i0, i1, $i2, $i4, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        double[][] $r1, $r7, $r9, $r13, $r15, $r19, $r21, $r26;
        boolean $z0;
        double[] $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r22, $r23, $r24, $r25, $r27;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31, $d32, d33, d34, d35, d36, d37, d38;
        byte $b3;

        r0 := @this: org.apache.commons.math3.linear.HessenbergTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        i0 = lengthof $r1;

        i1 = i0 - 1;

        i8 = 1;

     label01:
        $i2 = i1 - 1;

        if i8 > $i2 goto label21;

        d30 = 0.0;

        i9 = i8;

     label02:
        if i9 > i1 goto label03;

        $r26 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r27 = $r26[i9];

        $i7 = i8 - 1;

        $d28 = $r27[$i7];

        $d29 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d28);

        d30 = d30 + $d29;

        i9 = i9 + 1;

        goto label02;

     label03:
        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d30, 0.0);

        if $z0 != 0 goto label20;

        d31 = 0.0;

        i10 = i1;

     label04:
        if i10 < i8 goto label05;

        $r23 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r21 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r22 = $r21[i10];

        $i6 = i8 - 1;

        $d23 = $r22[$i6];

        $d24 = $d23 / d30;

        $r23[i10] = $d24;

        $r24 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d26 = $r24[i10];

        $r25 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d25 = $r25[i10];

        $d27 = $d26 * $d25;

        d31 = d31 + $d27;

        i10 = i10 + -1;

        goto label04;

     label05:
        $r2 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d0 = $r2[i8];

        $b3 = $d0 cmpl 0.0;

        if $b3 <= 0 goto label06;

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d31);

        $d32 = neg $d22;

        goto label07;

     label06:
        $d32 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d31);

     label07:
        d33 = $d32;

        $r3 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d1 = $r3[i8];

        $d2 = $d1 * $d32;

        d34 = d31 - $d2;

        $r4 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d3 = $r4[i8];

        $d4 = $d3 - $d32;

        $r4[i8] = $d4;

        i11 = i8;

     label08:
        if i11 >= i0 goto label13;

        d35 = 0.0;

        i12 = i1;

     label09:
        if i12 < i8 goto label10;

        $r18 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d20 = $r18[i12];

        $r19 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r20 = $r19[i12];

        $d19 = $r20[i11];

        $d21 = $d20 * $d19;

        d35 = d35 + $d21;

        i12 = i12 + -1;

        goto label09;

     label10:
        d36 = d35 / d34;

        i13 = i8;

     label11:
        if i13 > i1 goto label12;

        $r15 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r16 = $r15[i13];

        $d17 = $r16[i11];

        $r17 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d15 = $r17[i13];

        $d16 = d36 * $d15;

        $d18 = $d17 - $d16;

        $r16[i11] = $d18;

        i13 = i13 + 1;

        goto label11;

     label12:
        i11 = i11 + 1;

        goto label08;

     label13:
        i14 = 0;

     label14:
        if i14 > i1 goto label19;

        d37 = 0.0;

        i15 = i1;

     label15:
        if i15 < i8 goto label16;

        $r12 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d13 = $r12[i15];

        $r13 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r14 = $r13[i14];

        $d12 = $r14[i15];

        $d14 = $d13 * $d12;

        d37 = d37 + $d14;

        i15 = i15 + -1;

        goto label15;

     label16:
        d38 = d37 / d34;

        i16 = i8;

     label17:
        if i16 > i1 goto label18;

        $r9 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r10 = $r9[i14];

        $d10 = $r10[i16];

        $r11 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d8 = $r11[i16];

        $d9 = d38 * $d8;

        $d11 = $d10 - $d9;

        $r10[i16] = $d11;

        i16 = i16 + 1;

        goto label17;

     label18:
        i14 = i14 + 1;

        goto label14;

     label19:
        $r6 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $r5 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[] ort>;

        $d5 = $r5[i8];

        $d6 = d30 * $d5;

        $r6[i8] = $d6;

        $r7 = r0.<org.apache.commons.math3.linear.HessenbergTransformer: double[][] householderVectors>;

        $r8 = $r7[i8];

        $i4 = i8 - 1;

        $d7 = d30 * d33;

        $r8[$i4] = $d7;

     label20:
        i8 = i8 + 1;

        goto label01;

     label21:
        return;
    }
}
