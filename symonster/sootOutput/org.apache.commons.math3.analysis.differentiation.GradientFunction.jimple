public class org.apache.commons.math3.analysis.differentiation.GradientFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateVectorFunction
{
    private final org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f;

    public void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)
    {
        org.apache.commons.math3.analysis.differentiation.GradientFunction r0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.GradientFunction;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.GradientFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f> = r1;

        return;
    }

    public double[] value(double[])
    {
        org.apache.commons.math3.analysis.differentiation.GradientFunction r0;
        double[] r1, r3;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int[] r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r5;
        double $d0, $d1;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r6, r7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.GradientFunction;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i0];

        i6 = 0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label2;

        $r6 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i5 = lengthof r1;

        $d1 = r1[i6];

        specialinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>($i5, 1, i6, $d1);

        r2[i6] = $r6;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.GradientFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f>;

        r7 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $i2 = lengthof r1;

        r3 = newarray (double)[$i2];

        $i3 = lengthof r1;

        r4 = newarray (int)[$i3];

        i7 = 0;

     label3:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label4;

        r4[i7] = 1;

        $d0 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        r3[i7] = $d0;

        r4[i7] = 0;

        i7 = i7 + 1;

        goto label3;

     label4:
        return r3;
    }
}
