public class org.apache.commons.math3.geometry.spherical.oned.ArcsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion implements java.lang.Iterable
{

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>(d0);

        return;
    }

    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double d0, d1, d2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double,double,double)>(d0, d1, d2);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double) throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void check2PiConsistency()>();

        return;
    }

    public void <init>(java.util.Collection, double) throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        java.util.Collection r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void check2PiConsistency()>();

        return;
    }

    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;
        org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle r0, r29, r30;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r7, $r8, $r9, $r11, $r13, $r17, $r18, $r20, $r21, $r23;
        java.lang.Boolean $r2, $r10, $r12, $r14, $r19, $r22, $r24;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r3, $r5, $r15;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r4, $r6, $r16;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r25;
        org.apache.commons.math3.exception.util.LocalizedFormats $r26;
        java.lang.Double $r27, $r28;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, 0);

        if $z0 != 0 goto label1;

        $d5 = d1 - d0;

        $b0 = $d5 cmpl 6.283185307179586;

        if $b0 < 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r2);

        return $r1;

     label2:
        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label3;

        $r25 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r26 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ENDPOINTS_NOT_AN_INTERVAL>;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r25.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r26, $r27, $r28, 1);

        throw $r25;

     label3:
        d3 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>(d0, 3.141592653589793);

        $d6 = d1 - d0;

        d4 = d3 + $d6;

        $r3 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r4 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d3);

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r4, 0, d2);

        r0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $b2 = d4 cmpg 6.283185307179586;

        if $b2 > 0 goto label4;

        $r15 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r16 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r16.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d4);

        specialinvoke $r15.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r16, 1, d2);

        r29 = virtualinvoke $r15.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $r17 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r18 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r19);

        $r20 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r21 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r22 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r22);

        $r23 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r23.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r24);

        specialinvoke $r20.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r29, $r21, $r23, null);

        specialinvoke $r17.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r0, $r18, $r20, null);

        return $r17;

     label4:
        $r5 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r6 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d7 = d4 - 6.283185307179586;

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d7);

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r6, 1, d2);

        r30 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r8 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r9 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r10);

        $r11 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r12);

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r30, $r9, $r11, null);

        $r13 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r14);

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r0, $r8, $r13, null);

        return $r7;
    }

    private void check2PiConsistency() throws org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r5, $r7;
        java.lang.Boolean r2, r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping $r9;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r2 = (java.lang.Boolean) $r6;

        $r7 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getLastLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (java.lang.Boolean) $r8;

        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        $z2 = $z0 ^ $z1;

        if $z2 == 0 goto label2;

        $r9 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping;

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping: void <init>()>();

        throw $r9;

     label2:
        return;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r3, r4, r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r4 = null;

        r5 = r1;

     label2:
        if r5 == null goto label3;

        r4 = r5;

        r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r5);

        goto label2;

     label3:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree getLastLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r3, r4, r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r4 = null;

        r5 = r1;

     label2:
        if r5 == null goto label3;

        r4 = r5;

        r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r5);

        goto label2;

     label3:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstArcStart()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, r3, r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label2:
        if r4 == null goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        if $z0 != 0 goto label3;

        r4 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        goto label2;

     label3:
        return r4;
    }

    private boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Boolean $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean isArcEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Boolean $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3, $r4, $r5, r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r6 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label1;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3, $r4, $r5, r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r6 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label1;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

     label1:
        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 == null goto label2;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        goto label1;

     label2:
        return r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

     label1:
        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 == null goto label2;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        goto label1;

     label2:
        return r3;
    }

    private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

        if r1 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

        if r1 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return $r2;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return $r2;
    }

    private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r3;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean isDirect()>();

        return $z0;
    }

    private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r4;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        return $d0;
    }

    public org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }

    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, $r4, $r12;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3, $r5;
        boolean $z0, $z1, $z2;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r7, $r8, $r9, $r11;
        java.lang.Object $r10, $r13;
        java.lang.Boolean $r14;
        java.util.Iterator r16;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r17;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label3;

        $r11 = <org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.spherical.oned.S1Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r11);

        $r12 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r14 = (java.lang.Boolean) $r13;

        $z2 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        $d10 = 6.283185307179586;

        goto label2;

     label1:
        $d10 = 0.0;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setSize(double)>($d10);

        goto label8;

     label3:
        d11 = 0.0;

        d12 = 0.0;

        r16 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r1 = (double[]) $r10;

        $d5 = r1[1];

        $d4 = r1[0];

        d0 = $d5 - $d4;

        d11 = d11 + d0;

        $d7 = r1[0];

        $d6 = r1[1];

        $d8 = $d7 + $d6;

        $d9 = d0 * $d8;

        d12 = d12 + $d9;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setSize(double)>(d11);

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d11, 6.283185307179586, 0);

        if $z1 == 0 goto label6;

        $r9 = <org.apache.commons.math3.geometry.spherical.oned.S1Point: org.apache.commons.math3.geometry.spherical.oned.S1Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r9);

        goto label8;

     label6:
        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d11 cmpl $d1;

        if $b0 < 0 goto label7;

        $r8 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d2 = 2.0 * d11;

        $d3 = d12 / $d2;

        specialinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d3);

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r8);

        goto label8;

     label7:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r17 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) $r6;

        $r7 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r7);

     label8:
        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.Point r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20;
        double[] r2;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r3, $r5, $r7, $r9, $r11, $r15, $r17, $r19, $r21;
        boolean $z0, $z1, $z2, $z3, z4;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        java.lang.Object $r13;
        java.util.Iterator r22;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r3 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) r1;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        z4 = 0;

        d11 = #NaN;

        d12 = #NaN;

        r22 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r2 = (double[]) $r13;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d11);

        if $z2 == 0 goto label02;

        d11 = r2[0];

     label02:
        if z4 != 0 goto label07;

        $d3 = r2[0];

        $b2 = d0 cmpg $d3;

        if $b2 >= 0 goto label05;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d12);

        if $z3 == 0 goto label03;

        z4 = 1;

        goto label07;

     label03:
        d13 = d0 - d12;

        $d9 = r2[0];

        d14 = $d9 - d0;

        $b5 = d13 cmpg d14;

        if $b5 >= 0 goto label04;

        $r20 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r21 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r21.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d12);

        specialinvoke $r20.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r21, d13);

        return $r20;

     label04:
        $r18 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r19 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d10 = r2[0];

        specialinvoke $r19.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d10);

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r19, d14);

        return $r18;

     label05:
        $d4 = r2[1];

        $b3 = d0 cmpg $d4;

        if $b3 > 0 goto label07;

        $d5 = r2[0];

        d15 = $d5 - d0;

        $d6 = r2[1];

        d16 = d0 - $d6;

        $b4 = d15 cmpg d16;

        if $b4 >= 0 goto label06;

        $r16 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r17 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d8 = r2[1];

        specialinvoke $r17.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d8);

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r17, d16);

        return $r16;

     label06:
        $r14 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r15 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d7 = r2[0];

        specialinvoke $r15.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d7);

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r15, d15);

        return $r14;

     label07:
        d12 = r2[1];

        goto label01;

     label08:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d12);

        if $z1 == 0 goto label09;

        $r12 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, null, 6.283185307179586);

        return $r12;

     label09:
        if z4 == 0 goto label11;

        $d2 = d12 - 6.283185307179586;

        d17 = d0 - $d2;

        d18 = d11 - d0;

        $b1 = d17 cmpg d18;

        if $b1 >= 0 goto label10;

        $r10 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r11 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r11.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d12);

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r11, d17);

        return $r10;

     label10:
        $r8 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r9 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d11);

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r9, d18);

        return $r8;

     label11:
        d19 = d0 - d12;

        $d1 = d11 + 6.283185307179586;

        d20 = $d1 - d0;

        $b0 = d19 cmpg d20;

        if $b0 >= 0 goto label12;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r7 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d12);

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r7, d19);

        return $r6;

     label12:
        $r4 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r5 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d11);

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r5, d20);

        return $r4;
    }

    public java.util.List asList()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        java.util.Iterator r2;
        double[] r3;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r6;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (double[]) $r5;

        $r6 = new org.apache.commons.math3.geometry.spherical.oned.Arc;

        $d0 = r3[0];

        $d1 = r3[1];

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.spherical.oned.Arc: void <init>(double,double,double)>($d0, $d1, $d2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r4;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator: void <init>(org.apache.commons.math3.geometry.spherical.oned.ArcsSet)>(r0);

        return $r1;
    }

    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.spherical.oned.Arc)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.spherical.oned.Arc r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        java.util.Iterator r2;
        double[] r3;
        boolean $z0, z1, z2;
        org.apache.commons.math3.geometry.partitioning.Side $r4, $r5, $r6, $r7;
        java.lang.Object $r8;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.Arc;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d0 = 3.141592653589793 + $d5;

        $d6 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSup()>();

        $d7 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d1 = $d6 - $d7;

        z1 = 0;

        z2 = 0;

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (double[]) $r8;

        $d8 = r3[0];

        $d9 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d8, d0);

        $d10 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d2 = $d9 - $d10;

        $d11 = r3[0];

        d3 = $d11 - d2;

        $d12 = r3[1];

        d4 = $d12 - d3;

        $d13 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        $d14 = d1 - $d13;

        $b0 = d2 cmpg $d14;

        if $b0 <= 0 goto label2;

        $d15 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        $d16 = 6.283185307179586 + $d15;

        $b1 = d4 cmpl $d16;

        if $b1 < 0 goto label3;

     label2:
        z1 = 1;

     label3:
        $d17 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        $d18 = d1 + $d17;

        $b2 = d4 cmpl $d18;

        if $b2 < 0 goto label4;

        z2 = 1;

     label4:
        goto label1;

     label5:
        if z1 == 0 goto label7;

        if z2 == 0 goto label6;

        $r7 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side BOTH>;

        return $r7;

     label6:
        $r6 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        return $r6;

     label7:
        if z2 == 0 goto label8;

        $r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        return $r5;

     label8:
        $r4 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

        return $r4;
    }

    public org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split split(org.apache.commons.math3.geometry.spherical.oned.Arc)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r9, $r10;
        org.apache.commons.math3.geometry.spherical.oned.Arc r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, d25, d26;
        java.util.Iterator r4;
        double[] r5;
        java.util.ArrayList $r6, $r7;
        boolean $z0;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split $r8;
        java.lang.Object $r11;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.Double $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.Arc;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $d5 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d0 = 3.141592653589793 + $d5;

        $d6 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSup()>();

        $d7 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d1 = $d6 - $d7;

        r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (double[]) $r11;

        $d8 = r5[0];

        $d9 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d8, d0);

        $d10 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        d2 = $d9 - $d10;

        $d11 = r5[0];

        d3 = $d11 - d2;

        $d12 = r5[1];

        d4 = $d12 - d3;

        $b0 = d2 cmpg d1;

        if $b0 >= 0 goto label05;

        $d19 = r5[0];

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d19);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r20);

        $b3 = d4 cmpl d1;

        if $b3 <= 0 goto label04;

        d23 = d1 + d3;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d23);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r22);

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d23);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r23);

        $b4 = d4 cmpl 6.283185307179586;

        if $b4 <= 0 goto label02;

        d24 = 6.283185307179586 + d3;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d24);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d24);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r26);

        $d22 = r5[1];

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d22);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r27);

        goto label03;

     label02:
        $d21 = r5[1];

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d21);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r24);

     label03:
        goto label09;

     label04:
        $d20 = r5[1];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d20);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label09;

     label05:
        $d13 = r5[0];

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

        $b1 = d4 cmpl 6.283185307179586;

        if $b1 <= 0 goto label08;

        d25 = 6.283185307179586 + d3;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d25);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d25);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r15);

        $d15 = 6.283185307179586 + d1;

        $b2 = d4 cmpl $d15;

        if $b2 <= 0 goto label06;

        $d17 = 6.283185307179586 + d1;

        d26 = $d17 + d3;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d26);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d26);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r18);

        $d18 = r5[1];

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label07;

     label06:
        $d16 = r5[1];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d16);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r16);

     label07:
        goto label09;

     label08:
        $d14 = r5[1];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r13);

     label09:
        goto label01;

     label10:
        $r8 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split;

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)>($r7);

        $r10 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)>($r6);

        specialinvoke $r8.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split: void <init>(org.apache.commons.math3.geometry.spherical.oned.ArcsSet,org.apache.commons.math3.geometry.spherical.oned.ArcsSet,org.apache.commons.math3.geometry.spherical.oned.ArcsSet$1)>($r9, $r10, null);

        return $r8;
    }

    private void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree, double, boolean)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3, $r8, $r10;
        double d0, $d1, $d2;
        boolean z0, $z2;
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle $r4;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r5, $r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7;
        java.lang.Boolean $r9, $r11;
        org.apache.commons.math3.exception.MathInternalError $r12;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        $r4 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r5 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>(d0);

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r5, $z2, $d1);

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>($r6, $d2);

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r7 == null goto label3;

        $r12 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r12;

     label3:
        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r4);

        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r9);

        $r10 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r11);

        return;
    }

    private org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r5, $r21;
        java.util.List r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, i10, i11, i12;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, $r22;
        java.lang.Boolean $r3, $r23;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;
        java.lang.Object $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Double $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20;
        byte $b6, $b9;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        i10 = 0;

     label02:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i10 >= $i0 goto label07;

        $i4 = i10 + 1;

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        i11 = $i4 % $i5;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i10);

        $r11 = (java.lang.Double) $r10;

        d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r13 = (java.lang.Double) $r12;

        $d7 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        d1 = staticinvoke <org.apache.commons.math3.util.MathUtils: double normalizeAngle(double,double)>($d7, d0);

        $d8 = d1 - d0;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $d10 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        $b6 = $d9 cmpg $d10;

        if $b6 > 0 goto label06;

        if i11 <= 0 goto label03;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i11);

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i10);

        i10 = i10 - 1;

        goto label06;

     label03:
        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>($i8);

        $r15 = (java.lang.Double) $r14;

        d2 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $r16 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        $r17 = (java.lang.Double) $r16;

        d3 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label05;

        $d13 = d2 - d3;

        $b9 = $d13 cmpl 3.141592653589793;

        if $b9 <= 0 goto label04;

        $r21 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r22 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r23 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r23);

        $d14 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r21.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r22, $d14);

        return $r21;

     label04:
        return null;

     label05:
        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        $r19 = (java.lang.Double) $r18;

        $d11 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d12 = $d11 + 6.283185307179586;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r20);

     label06:
        i10 = i10 + 1;

        goto label02;

     label07:
        $r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r3);

        i12 = 0;

     label08:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i12 >= $i2 goto label09;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i12);

        $r7 = (java.lang.Double) $r6;

        $d5 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree,double,boolean)>($r2, $d5, 1);

        $i3 = i12 + 1;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i3);

        $r9 = (java.lang.Double) $r8;

        $d6 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree,double,boolean)>($r2, $d6, 0);

        i12 = i12 + 2;

        goto label08;

     label09:
        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label10;

        return null;

     label10:
        $r5 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getTolerance()>();

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, $d4);

        return $r5;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.spherical.oned.ArcsSet)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstArcStart()>();

        return $r1;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static boolean access$200(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $z0;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$300(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static boolean access$400(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: boolean isArcEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $z0;
    }

    static double access$500(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $d0;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$600(org.apache.commons.math3.geometry.spherical.oned.ArcsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }
}
