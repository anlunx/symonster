public class com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution extends java.lang.Object implements com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution
{
    private final double _mu;
    private final double _sigma;
    private final double _ksi;
    private final cern.jet.random.engine.RandomEngine _engine;

    public void <init>(double, double, double)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double d0, d1, d2;
        cern.jet.random.engine.MersenneTwister64 $r1;
        java.util.Date $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new cern.jet.random.engine.MersenneTwister64;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        specialinvoke $r1.<cern.jet.random.engine.MersenneTwister64: void <init>(java.util.Date)>($r2);

        specialinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: void <init>(double,double,double,cern.jet.random.engine.RandomEngine)>(d0, d1, d2, $r1);

        return;
    }

    public void <init>(double, double, double, cern.jet.random.engine.RandomEngine)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double d0, d1, d2;
        cern.jet.random.engine.RandomEngine r1;
        byte $b0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 := @parameter3: cern.jet.random.engine.RandomEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "sigma must be > 0");

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d2, 0.0, 1.0E-15);

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "ksi cannot be zero");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu> = d0;

        r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma> = d1;

        r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi> = d2;

        r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: cern.jet.random.engine.RandomEngine _engine> = r1;

        return;
    }

    public double getMu()
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        return $d0;
    }

    public double getSigma()
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        return $d0;
    }

    public double getKsi()
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        return $d0;
    }

    public double getCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Double r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = specialinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double getZ(double)>($d1);

        $d3 = $d0 * $d2;

        $d6 = 1.0 + $d3;

        $d4 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d5 = -1.0 / $d4;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>($d6, $d5);

        $d8 = 1.0 - $d7;

        return $d8;
    }

    public double getInverseCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Double r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getPDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Double r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = specialinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double getZ(double)>($d1);

        $d3 = $d0 * $d2;

        $d8 = 1.0 + $d3;

        $d4 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d5 = 1.0 / $d4;

        $d6 = $d5 + 1.0;

        $d7 = neg $d6;

        $d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d8, $d7);

        $d10 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $d11 = $d9 / $d10;

        return $d11;
    }

    public double nextRandom()
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        cern.jet.random.engine.RandomEngine $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $d1 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $r1 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: cern.jet.random.engine.RandomEngine _engine>;

        $d2 = virtualinvoke $r1.<cern.jet.random.engine.RandomEngine: double nextDouble()>();

        $d3 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d4 = neg $d3;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d4);

        $d6 = $d5 - 1.0;

        $d8 = $d1 * $d6;

        $d7 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d9 = $d8 / $d7;

        $d10 = $d0 + $d9;

        return $d10;
    }

    private double getZ(double)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $b0 = $d1 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $d13 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $b4 = d0 cmpg $d13;

        if $b4 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Support for GPD is in the range x >= mu if ksi > 0");

        throw $r2;

     label1:
        $d2 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $b1 = $d2 cmpg 0.0;

        if $b1 >= 0 goto label3;

        $d7 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $b2 = d0 cmpg $d7;

        if $b2 <= 0 goto label2;

        $d11 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $d9 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $d8 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $d10 = $d9 / $d8;

        $d12 = $d11 - $d10;

        $b3 = d0 cmpl $d12;

        if $b3 < 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Support for GPD is in the range mu <= x <= mu - sigma / ksi if ksi < 0");

        throw $r1;

     label3:
        $d3 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $d5 = d0 - $d3;

        $d4 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        double $d0, $d1, $d2;
        long $l1, $l2, $l5, $l6, $l9, $l10, l14, l16, l18;
        int $i3, $i4, $i7, $i8, $i11, $i12, i15, i17, i19;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        l14 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i4 = 31 * 1;

        $l1 = l14 >>> 32;

        $l2 = l14 ^ $l1;

        $i3 = (int) $l2;

        i15 = $i4 + $i3;

        $d1 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        l16 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i8 = 31 * i15;

        $l5 = l16 >>> 32;

        $l6 = l16 ^ $l5;

        $i7 = (int) $l6;

        i17 = $i8 + $i7;

        $d2 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        l18 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $i12 = 31 * i17;

        $l9 = l18 >>> 32;

        $l10 = l18 ^ $l9;

        $i11 = (int) $l10;

        i19 = $i12 + $i11;

        return i19;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0, $l1, $l3, $l4, $l6, $l7;
        byte $b2, $b5, $b8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution) r1;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _ksi>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label4;

        return 0;

     label4:
        $d2 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r2.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _mu>;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label5;

        return 0;

     label5:
        $d4 = r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $d5 = r2.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double _sigma>;

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    public volatile double getInverseCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double getInverseCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double getCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getPDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GeneralizedParetoDistribution: double getPDF(java.lang.Double)>($r2);

        return $d0;
    }
}
