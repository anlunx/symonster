public class com.opengamma.analytics.financial.util.AssertSensitivityObjects extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.util.AssertSensitivityObjects r0;

        r0 := @this: com.opengamma.analytics.financial.util.AssertSensitivityObjects;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean compare(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, double, boolean)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity r1, r2;
        double d0;
        boolean z0, $z1, $z2, z3, $z4;
        java.util.Map $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        d0 := @parameter3: double;

        z0 := @parameter4: boolean;

        z3 = 1;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: java.util.Map getYieldDiscountingSensitivities()>();

        $r4 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: java.util.Map getYieldDiscountingSensitivities()>();

        $z1 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: boolean compare(java.util.Map,java.util.Map,double)>($r3, $r4, d0);

        if $z1 != 0 goto label1;

        z3 = 0;

     label1:
        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: java.util.Map getForwardSensitivities()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: java.util.Map getForwardSensitivities()>();

        $z2 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compareFwd(java.util.Map,java.util.Map,double)>($r5, $r6, d0);

        if $z2 != 0 goto label2;

        z3 = 0;

     label2:
        if z0 == 0 goto label5;

        if z3 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z3 = $z4;

     label5:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z3);

        return z3;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,double,boolean)>(r0, r1, r2, d0, 0);

        return $z0;
    }

    public static boolean assertDoesNotEqual(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,double,boolean)>(r0, r1, r2, d0, 1);

        return $z0;
    }

    private static boolean compareFwd(java.util.Map, java.util.Map, double)
    {
        java.util.Map r0, r1;
        double d0;
        java.lang.String r2;
        java.util.Set $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8, $r9, $r10, $r11, $r13;
        java.util.List $r12, $r14;
        java.util.Iterator r15, r17;
        java.util.Map$Entry r16, r18;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        d0 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity");

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r15 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = (java.lang.String) $r10;

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z3 == 0 goto label2;

        $r11 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.List) $r11;

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r14 = (java.util.List) $r13;

        $z4 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compareFwd(java.util.List,java.util.List,double)>($r12, $r14, d0);

        if $z4 != 0 goto label3;

        return 0;

     label2:
        return 0;

     label3:
        goto label1;

     label4:
        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r17 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        goto label5;

     label7:
        return 1;
    }

    private static boolean compareFwd(java.util.List, java.util.List, double)
    {
        java.util.List r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, i3;
        java.lang.Object $r2, $r4, $r6, $r8;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity $r3, $r5, $r7, $r9;
        byte $b1, $b2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r2;

        d1 = virtualinvoke $r3.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r4;

        d2 = virtualinvoke $r5.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $d3 = d1 - d2;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b1 = $d4 cmpl d0;

        if $b1 > 0 goto label2;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r7 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r6;

        $d5 = virtualinvoke $r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r9 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r8;

        $d6 = virtualinvoke $r9.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $d7 = $d5 - $d6;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b2 = $d8 cmpl d0;

        if $b2 <= 0 goto label3;

     label2:
        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 1;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity, com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity r1, r2;
        double d0;
        java.util.Map $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity;

        d0 := @parameter3: double;

        z3 = 1;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getYieldDiscountingSensitivities()>();

        $r4 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getYieldDiscountingSensitivities()>();

        $z0 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: boolean compare(java.util.Map,java.util.Map,double)>($r3, $r4, d0);

        if $z0 != 0 goto label1;

        z3 = 0;

     label1:
        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getForwardSensitivities()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getForwardSensitivities()>();

        $z1 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compareFwd(java.util.Map,java.util.Map,double)>($r5, $r6, d0);

        if $z1 != 0 goto label2;

        z3 = 0;

     label2:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getPriceCurveSensitivities()>();

        $r8 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity: java.util.Map getPriceCurveSensitivities()>();

        $z2 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: boolean compare(java.util.Map,java.util.Map,double)>($r7, $r8, d0);

        if $z2 != 0 goto label3;

        z3 = 0;

     label3:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z3);

        return z3;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity r1, r2;
        double d0;
        boolean z0, $z1, z2, $z3;
        java.util.Iterator r3;
        com.opengamma.util.money.Currency r4;
        java.util.Set $r5, $r6, $r7;
        java.lang.Object $r8;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity;

        d0 := @parameter3: double;

        z2 = 1;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: java.util.Set getCurrencies()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: java.util.Set getCurrencies()>();

        z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);

        if z0 != 0 goto label1;

        z2 = 0;

     label1:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: java.util.Set getCurrencies()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.money.Currency) $r8;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $r10 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $z1 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean assertEquals(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity,double)>(r0, $r9, $r10, d0);

        if $z1 != 0 goto label3;

        z2 = 0;

     label3:
        goto label2;

     label4:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z2);

        return z2;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity, com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity r1, r2;
        double d0;
        boolean z0, $z1, z2, $z3;
        java.util.Iterator r3;
        com.opengamma.util.money.Currency r4;
        java.util.Set $r5, $r6, $r7;
        java.lang.Object $r8;
        com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity;

        d0 := @parameter3: double;

        z2 = 1;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity: java.util.Set getCurrencies()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity: java.util.Set getCurrencies()>();

        z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);

        if z0 != 0 goto label1;

        z2 = 0;

     label1:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity: java.util.Set getCurrencies()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.money.Currency) $r8;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity: com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $r10 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.inflation.MultipleCurrencyInflationSensitivity: com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $z1 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean assertEquals(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity,com.opengamma.analytics.financial.provider.sensitivity.inflation.InflationSensitivity,double)>(r0, $r9, $r10, d0);

        if $z1 != 0 goto label3;

        z2 = 0;

     label3:
        goto label2;

     label4:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z2);

        return z2;
    }

    private static boolean compare(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, double, boolean)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity r1, r2;
        double d0, $d1, $d2, $d3, $d4;
        boolean z0, $z1, $z2, z3, $z4, $z5;
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r3;
        java.util.Map r4, r5;
        byte $b0, $b3, $b4, $b7, $b8;
        java.lang.Object[] $r8;
        java.lang.Double $r9;
        java.util.Set $r10, $r11;
        java.lang.Object $r12, $r13, $r14, $r15, $r17, $r19, $r21, $r25, $r27, $r28, $r29, $r30, $r32, $r34, $r36, $r40;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r16, $r18, $r31, $r33;
        int $i1, $i2, $i5, $i6;
        com.opengamma.analytics.math.matrix.Matrix $r20, $r22, $r23, $r24, $r26, $r35, $r37, $r38, $r39, $r41;
        java.util.Iterator r42, r45;
        java.util.Map$Entry r43, r46;
        com.opengamma.util.tuple.Pair r44, r47;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        d0 := @parameter3: double;

        z0 := @parameter4: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "sensitivity2");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8[0] = $r9;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "tolerance must be greater than 0; have {}", $r8);

        z3 = 1;

        r3 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra COMMONS_ALGEBRA>;

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity: java.util.Map getSensitivities()>();

        r5 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity: java.util.Map getSensitivities()>();

        $r10 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r42 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r27 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getKey()>();

        r44 = (com.opengamma.util.tuple.Pair) $r28;

        $r29 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        if $r29 != null goto label04;

        $r40 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r41 = (com.opengamma.analytics.math.matrix.Matrix) $r40;

        $d4 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r41);

        $b8 = $d4 cmpl d0;

        if $b8 <= 0 goto label06;

        z3 = 0;

        goto label06;

     label04:
        $r30 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r30;

        $i5 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r32 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        $r33 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r32;

        $i6 = virtualinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i5 == $i6 goto label05;

        z3 = 0;

        goto label06;

     label05:
        $r34 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r35 = (com.opengamma.analytics.math.matrix.Matrix) $r34;

        $r36 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        $r37 = (com.opengamma.analytics.math.matrix.Matrix) $r36;

        $r38 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r37, -1.0);

        $r39 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r35, $r38);

        $d3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r39);

        $b7 = $d3 cmpl d0;

        if $b7 <= 0 goto label06;

        z3 = 0;

     label06:
        goto label03;

     label07:
        $r11 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>();

        r45 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r12 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getKey()>();

        r47 = (com.opengamma.util.tuple.Pair) $r13;

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r47);

        if $r14 != null goto label09;

        $r25 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (com.opengamma.analytics.math.matrix.Matrix) $r25;

        $d2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r26);

        $b4 = $d2 cmpl d0;

        if $b4 <= 0 goto label11;

        z3 = 0;

        goto label11;

     label09:
        $r15 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r15;

        $i1 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r17 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r47);

        $r18 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r17;

        $i2 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 == $i2 goto label10;

        z3 = 0;

        goto label11;

     label10:
        $r19 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (com.opengamma.analytics.math.matrix.Matrix) $r19;

        $r21 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r47);

        $r22 = (com.opengamma.analytics.math.matrix.Matrix) $r21;

        $r23 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r22, -1.0);

        $r24 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r20, $r23);

        $d1 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r24);

        $b3 = $d1 cmpl d0;

        if $b3 <= 0 goto label11;

        z3 = 0;

     label11:
        goto label08;

     label12:
        if z0 == 0 goto label15;

        if z3 != 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        z3 = $z5;

     label15:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z3);

        return z3;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity,double,boolean)>(r0, r1, r2, d0, 0);

        return $z0;
    }

    public static boolean assertDoesNotEqual(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyParameterSensitivity,double,boolean)>(r0, r1, r2, d0, 1);

        return $z0;
    }

    private static boolean compare(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, double, boolean)
    {
        java.lang.String r0, r8;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity r1, r2;
        double d0, $d1, $d2;
        boolean z0, $z1, z2, $z3, $z4;
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r3;
        java.util.Map r4, r5;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r11;
        java.lang.Double $r12;
        java.util.Set $r13;
        java.lang.Object $r14, $r15, $r16, $r17, $r19, $r23;
        com.opengamma.analytics.math.matrix.Matrix $r18, $r20, $r21, $r22, $r24;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        d0 := @parameter3: double;

        z0 := @parameter4: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "sensitivity2");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r11[0] = $r12;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "tolerance must be greater than 0; have {}", $r11);

        z2 = 1;

        r3 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra COMMONS_ALGEBRA>;

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: java.util.Map getSensitivities()>();

        r5 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: java.util.Map getSensitivities()>();

        $r13 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        if $r16 != null goto label4;

        $r23 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (com.opengamma.analytics.math.matrix.Matrix) $r23;

        $d2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r24);

        $b2 = $d2 cmpl d0;

        if $b2 <= 0 goto label5;

        z2 = 0;

        goto label5;

     label4:
        $r17 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (com.opengamma.analytics.math.matrix.Matrix) $r17;

        $r19 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r20 = (com.opengamma.analytics.math.matrix.Matrix) $r19;

        $r21 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r20, -1.0);

        $r22 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r18, $r21);

        $d1 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)>($r22);

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label5;

        z2 = 0;

     label5:
        goto label3;

     label6:
        if z0 == 0 goto label9;

        if z2 != 0 goto label7;

        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        z2 = $z4;

     label9:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z2);

        return z2;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity,double,boolean)>(r0, r1, r2, d0, 0);

        return $z0;
    }

    public static boolean assertDoesNotEqual(java.lang.String, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity,com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity,double,boolean)>(r0, r1, r2, d0, 1);

        return $z0;
    }

    private static boolean compare(java.lang.String, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, double, boolean)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity r1, r2;
        double d0;
        boolean z0, z2, $z3;
        java.util.Map $r3, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        d0 := @parameter3: double;

        z0 := @parameter4: boolean;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: java.util.Map getSensitivities()>();

        $r4 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: java.util.Map getSensitivities()>();

        z2 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: boolean compare(java.util.Map,java.util.Map,double)>($r3, $r4, d0);

        if z0 == 0 goto label3;

        if z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z2 = $z3;

     label3:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z2);

        return z2;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,double,boolean)>(r0, r1, r2, d0, 0);

        return $z0;
    }

    public static boolean assertDoesNotEqual(java.lang.String, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity r1, r2;
        double d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        d0 := @parameter3: double;

        $z0 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean compare(java.lang.String,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,double,boolean)>(r0, r1, r2, d0, 1);

        return $z0;
    }

    public static boolean assertEquals(java.lang.String, com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity, com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity, double)
    {
        java.lang.String r0;
        com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity r1, r2;
        double d0;
        boolean z0, $z1, z2, $z3;
        java.util.Iterator r3;
        com.opengamma.util.money.Currency r4;
        java.util.Set $r5, $r6, $r7;
        java.lang.Object $r8;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity;

        r2 := @parameter2: com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity;

        d0 := @parameter3: double;

        z2 = 1;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: java.util.Set getCurrencies()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: java.util.Set getCurrencies()>();

        z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);

        if z0 != 0 goto label1;

        z2 = 0;

     label1:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: java.util.Set getCurrencies()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.money.Currency) $r8;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $r10 = virtualinvoke r2.<com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity getSensitivity(com.opengamma.util.money.Currency)>(r4);

        $z1 = staticinvoke <com.opengamma.analytics.financial.util.AssertSensitivityObjects: boolean assertEquals(java.lang.String,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity,double)>(r0, $r9, $r10, d0);

        if $z1 != 0 goto label3;

        z2 = 0;

     label3:
        goto label2;

     label4:
        staticinvoke <org.testng.AssertJUnit: void assertTrue(java.lang.String,boolean)>(r0, z2);

        return z2;
    }
}
