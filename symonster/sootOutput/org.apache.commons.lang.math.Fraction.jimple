public final class org.apache.commons.lang.math.Fraction extends java.lang.Number implements java.lang.Comparable
{
    private static final long serialVersionUID;
    public static final org.apache.commons.lang.math.Fraction ZERO;
    public static final org.apache.commons.lang.math.Fraction ONE;
    public static final org.apache.commons.lang.math.Fraction ONE_HALF;
    public static final org.apache.commons.lang.math.Fraction ONE_THIRD;
    public static final org.apache.commons.lang.math.Fraction TWO_THIRDS;
    public static final org.apache.commons.lang.math.Fraction ONE_QUARTER;
    public static final org.apache.commons.lang.math.Fraction TWO_QUARTERS;
    public static final org.apache.commons.lang.math.Fraction THREE_QUARTERS;
    public static final org.apache.commons.lang.math.Fraction ONE_FIFTH;
    public static final org.apache.commons.lang.math.Fraction TWO_FIFTHS;
    public static final org.apache.commons.lang.math.Fraction THREE_FIFTHS;
    public static final org.apache.commons.lang.math.Fraction FOUR_FIFTHS;
    private final int numerator;
    private final int denominator;
    private transient int hashCode;
    private transient java.lang.String toString;
    private transient java.lang.String toProperString;

    private void <init>(int, int)
    {
        org.apache.commons.lang.math.Fraction r0;
        int i0, i1;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<org.apache.commons.lang.math.Fraction: int hashCode> = 0;

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toString> = null;

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = null;

        r0.<org.apache.commons.lang.math.Fraction: int numerator> = i0;

        r0.<org.apache.commons.lang.math.Fraction: int denominator> = i1;

        return;
    }

    public static org.apache.commons.lang.math.Fraction getFraction(int, int)
    {
        org.apache.commons.lang.math.Fraction $r0;
        java.lang.ArithmeticException $r1, $r2;
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");

        throw $r2;

     label1:
        if i1 >= 0 goto label4;

        if i0 == -2147483648 goto label2;

        if i1 != -2147483648 goto label3;

     label2:
        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");

        throw $r1;

     label3:
        i0 = neg i0;

        i1 = neg i1;

     label4:
        $r0 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r0.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(i0, i1);

        return $r0;
    }

    public static org.apache.commons.lang.math.Fraction getFraction(int, int, int)
    {
        int i0, i1, i2, $i9;
        long $l3, $l4, $l5, $l6, $l10, $l11, $l12, $l13, l14;
        byte $b7, $b8;
        java.lang.ArithmeticException $r0, $r2, $r3, $r4;
        org.apache.commons.lang.math.Fraction $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 != 0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");

        throw $r4;

     label1:
        if i2 >= 0 goto label2;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be negative");

        throw $r3;

     label2:
        if i1 >= 0 goto label3;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The numerator must not be negative");

        throw $r2;

     label3:
        if i0 >= 0 goto label4;

        $l11 = (long) i0;

        $l10 = (long) i2;

        $l13 = $l11 * $l10;

        $l12 = (long) i1;

        l14 = $l13 - $l12;

        goto label5;

     label4:
        $l4 = (long) i0;

        $l3 = (long) i2;

        $l6 = $l4 * $l3;

        $l5 = (long) i1;

        l14 = $l6 + $l5;

     label5:
        $b7 = l14 cmp -2147483648L;

        if $b7 < 0 goto label6;

        $b8 = l14 cmp 2147483647L;

        if $b8 <= 0 goto label7;

     label6:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Numerator too large to represent as an Integer.");

        throw $r0;

     label7:
        $r1 = new org.apache.commons.lang.math.Fraction;

        $i9 = (int) l14;

        specialinvoke $r1.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i9, i2);

        return $r1;
    }

    public static org.apache.commons.lang.math.Fraction getReducedFraction(int, int)
    {
        int i0, $i1, i2, i3, i4, i5;
        org.apache.commons.lang.math.Fraction $r0, $r2;
        java.lang.ArithmeticException $r1, $r3;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        if i3 != 0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The denominator must not be zero");

        throw $r3;

     label1:
        if i2 != 0 goto label2;

        $r2 = <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ZERO>;

        return $r2;

     label2:
        if i3 != -2147483648 goto label3;

        $i1 = i2 & 1;

        if $i1 != 0 goto label3;

        i2 = i2 / 2;

        i3 = i3 / 2;

     label3:
        if i3 >= 0 goto label6;

        if i2 == -2147483648 goto label4;

        if i3 != -2147483648 goto label5;

     label4:
        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate");

        throw $r1;

     label5:
        i2 = neg i2;

        i3 = neg i3;

     label6:
        i0 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>(i2, i3);

        i4 = i2 / i0;

        i5 = i3 / i0;

        $r0 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r0.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(i4, i5);

        return $r0;
    }

    public static org.apache.commons.lang.math.Fraction getFraction(double)
    {
        byte b0, $b2, $b3, $b6, $b10;
        int i1, $i4, $i5, $i7, $i8, $i9, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12, d13, d15, d17, d19;
        java.lang.ArithmeticException $r0, $r2;
        boolean $z0;
        org.apache.commons.lang.math.Fraction $r1;

        d10 := @parameter0: double;

        $b2 = d10 cmpg 0.0;

        if $b2 >= 0 goto label1;

        $b10 = -1;

        goto label2;

     label1:
        $b10 = 1;

     label2:
        b0 = $b10;

        d11 = staticinvoke <java.lang.Math: double abs(double)>(d10);

        $b3 = d11 cmpl 2.147483647E9;

        if $b3 > 0 goto label3;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d11);

        if $z0 == 0 goto label4;

     label3:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The value must not be greater than Integer.MAX_VALUE or NaN");

        throw $r0;

     label4:
        i1 = (int) d11;

        $d2 = (double) i1;

        d12 = d11 - $d2;

        i11 = 0;

        i12 = 1;

        i13 = 1;

        i14 = 0;

        i15 = (int) d12;

        d13 = 1.0;

        $d3 = (double) i15;

        d15 = d12 - $d3;

        d17 = 1.7976931348623157E308;

        i16 = 1;

     label5:
        d0 = d17;

        $d4 = d13 / d15;

        i17 = (int) $d4;

        $d5 = (double) i17;

        $d6 = $d5 * d15;

        d19 = d13 - $d6;

        $i4 = i15 * i13;

        i18 = $i4 + i11;

        $i5 = i15 * i14;

        i19 = $i5 + i12;

        $d8 = (double) i18;

        $d7 = (double) i19;

        d1 = $d8 / $d7;

        $d9 = d12 - d1;

        d17 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        i15 = i17;

        d13 = d15;

        d15 = d19;

        i11 = i13;

        i12 = i14;

        i13 = i18;

        i14 = i19;

        i16 = i16 + 1;

        $b6 = d0 cmpl d17;

        if $b6 <= 0 goto label6;

        if i19 > 10000 goto label6;

        if i19 <= 0 goto label6;

        if i16 < 25 goto label5;

     label6:
        if i16 != 25 goto label7;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Unable to convert double to fraction");

        throw $r2;

     label7:
        $i7 = i1 * i12;

        $i8 = i11 + $i7;

        $i9 = $i8 * b0;

        $r1 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getReducedFraction(int,int)>($i9, i12);

        return $r1;
    }

    public static org.apache.commons.lang.math.Fraction getFraction(java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12;
        java.lang.String $r0, $r1, $r4, $r5, $r6, r11, r12;
        org.apache.commons.lang.math.Fraction $r2, $r3, $r7, $r9;
        java.lang.NumberFormatException $r8;
        double $d0;
        java.lang.IllegalArgumentException $r10;

        r11 := @parameter0: java.lang.String;

        if r11 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The string must not be null");

        throw $r10;

     label1:
        i5 = virtualinvoke r11.<java.lang.String: int indexOf(int)>(46);

        if i5 < 0 goto label2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r11);

        $r9 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getFraction(double)>($d0);

        return $r9;

     label2:
        i6 = virtualinvoke r11.<java.lang.String: int indexOf(int)>(32);

        if i6 <= 0 goto label4;

        $r4 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $i3 = i6 + 1;

        r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i3);

        i8 = virtualinvoke r12.<java.lang.String: int indexOf(int)>(47);

        if i8 >= 0 goto label3;

        $r8 = new java.lang.NumberFormatException;

        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("The fraction could not be parsed as the format X Y/Z");

        throw $r8;

     label3:
        $r5 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, i8);

        i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $i4 = i8 + 1;

        $r6 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>($i4);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getFraction(int,int,int)>(i7, i9, i0);

        return $r7;

     label4:
        i10 = virtualinvoke r11.<java.lang.String: int indexOf(int)>(47);

        if i10 >= 0 goto label5;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        $r3 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getFraction(int,int)>($i2, 1);

        return $r3;

     label5:
        $r0 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, i10);

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        $i1 = i10 + 1;

        $r1 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i1);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r2 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getFraction(int,int)>(i11, i12);

        return $r2;
    }

    public int getNumerator()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        return $i0;
    }

    public int getDenominator()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        return $i0;
    }

    public int getProperNumerator()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i2 = $i1 % $i0;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        return $i3;
    }

    public int getProperWhole()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i2 = $i1 / $i0;

        return $i2;
    }

    public int intValue()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i2 = $i1 / $i0;

        return $i2;
    }

    public long longValue()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1;
        long $l2, $l3, $l4;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $l3 = (long) $i0;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $l2 = (long) $i1;

        $l4 = $l3 / $l2;

        return $l4;
    }

    public float floatValue()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1;
        float $f0, $f1, $f2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $f1 = (float) $i0;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $f0 = (float) $i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public double doubleValue()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $d1 = (double) $i0;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $d0 = (double) $i1;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public org.apache.commons.lang.math.Fraction reduce()
    {
        org.apache.commons.lang.math.Fraction r0, $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i1 != 0 goto label3;

        $r2 = <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ZERO>;

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ZERO>;

     label2:
        return $r3;

     label3:
        $i2 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i4 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        i0 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>($i3, $i4);

        if i0 != 1 goto label4;

        return r0;

     label4:
        $i5 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i8 = $i5 / i0;

        $i6 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i7 = $i6 / i0;

        $r1 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getFraction(int,int)>($i8, $i7);

        return $r1;
    }

    public org.apache.commons.lang.math.Fraction invert()
    {
        org.apache.commons.lang.math.Fraction r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.ArithmeticException $r3, $r4;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i0 != 0 goto label1;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Unable to invert zero.");

        throw $r4;

     label1:
        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i1 != -2147483648 goto label2;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: can\'t negate numerator");

        throw $r3;

     label2:
        $i2 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i2 >= 0 goto label3;

        $r2 = new org.apache.commons.lang.math.Fraction;

        $i5 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i8 = neg $i5;

        $i6 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i7 = neg $i6;

        specialinvoke $r2.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i8, $i7);

        return $r2;

     label3:
        $r1 = new org.apache.commons.lang.math.Fraction;

        $i4 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i3 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        specialinvoke $r1.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i4, $i3);

        return $r1;
    }

    public org.apache.commons.lang.math.Fraction negate()
    {
        org.apache.commons.lang.math.Fraction r0, $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i0 != -2147483648 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: too large to negate");

        throw $r2;

     label1:
        $r1 = new org.apache.commons.lang.math.Fraction;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i3 = neg $i1;

        $i2 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i3, $i2);

        return $r1;
    }

    public org.apache.commons.lang.math.Fraction abs()
    {
        org.apache.commons.lang.math.Fraction r0, $r1;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i0 < 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction negate()>();

        return $r1;
    }

    public org.apache.commons.lang.math.Fraction pow(int)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return r0;

     label1:
        if i0 != 0 goto label2;

        $r10 = <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE>;

        return $r10;

     label2:
        if i0 >= 0 goto label4;

        if i0 != -2147483648 goto label3;

        $r7 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction invert()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction pow(int)>(2);

        $i5 = i0 / 2;

        $i6 = neg $i5;

        $r9 = virtualinvoke $r8.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction pow(int)>($i6);

        return $r9;

     label3:
        $r5 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction invert()>();

        $i4 = neg i0;

        $r6 = virtualinvoke $r5.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction pow(int)>($i4);

        return $r6;

     label4:
        r1 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction multiplyBy(org.apache.commons.lang.math.Fraction)>(r0);

        $i1 = i0 % 2;

        if $i1 != 0 goto label5;

        $i3 = i0 / 2;

        $r4 = virtualinvoke r1.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction pow(int)>($i3);

        return $r4;

     label5:
        $i2 = i0 / 2;

        $r2 = virtualinvoke r1.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction pow(int)>($i2);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction multiplyBy(org.apache.commons.lang.math.Fraction)>(r0);

        return $r3;
    }

    private static int greatestCommonDivisor(int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12, $i13, i14, $i15;
        java.lang.ArithmeticException $r0;

        i9 := @parameter0: int;

        i10 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>(i9);

        if $i0 <= 1 goto label01;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i10);

        if $i1 > 1 goto label02;

     label01:
        return 1;

     label02:
        if i9 <= 0 goto label03;

        i9 = neg i9;

     label03:
        if i10 <= 0 goto label04;

        i10 = neg i10;

     label04:
        i11 = 0;

     label05:
        $i12 = i9 & 1;

        if $i12 != 0 goto label06;

        $i8 = i10 & 1;

        if $i8 != 0 goto label06;

        if i11 >= 31 goto label06;

        i9 = i9 / 2;

        i10 = i10 / 2;

        i11 = i11 + 1;

        goto label05;

     label06:
        if i11 != 31 goto label07;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: gcd is 2^31");

        throw $r0;

     label07:
        $i2 = i9 & 1;

        if $i2 != 1 goto label08;

        $i13 = i10;

        goto label09;

     label08:
        $i3 = i9 / 2;

        $i13 = neg $i3;

     label09:
        i14 = $i13;

     label10:
        $i15 = i14 & 1;

        if $i15 != 0 goto label11;

        i14 = i14 / 2;

        goto label10;

     label11:
        if i14 <= 0 goto label12;

        i9 = neg i14;

        goto label13;

     label12:
        i10 = i14;

     label13:
        $i4 = i10 - i9;

        i14 = $i4 / 2;

        if i14 != 0 goto label10;

        $i6 = neg i9;

        $i5 = 1 << i11;

        $i7 = $i6 * $i5;

        return $i7;
    }

    private static int mulAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: mul");

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    private static int mulPosAndCheck(int, int)
    {
        int i0, i1, $i6;
        long l2, $l3, $l4;
        byte $b5;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $b5 = l2 cmp 2147483647L;

        if $b5 <= 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: mulPos");

        throw $r0;

     label1:
        $i6 = (int) l2;

        return $i6;
    }

    private static int addAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 + $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: add");

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    private static int subAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 - $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: add");

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public org.apache.commons.lang.math.Fraction add(org.apache.commons.lang.math.Fraction)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: org.apache.commons.lang.math.Fraction;

        $r2 = specialinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction addSub(org.apache.commons.lang.math.Fraction,boolean)>(r1, 1);

        return $r2;
    }

    public org.apache.commons.lang.math.Fraction subtract(org.apache.commons.lang.math.Fraction)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r2;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: org.apache.commons.lang.math.Fraction;

        $r2 = specialinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction addSub(org.apache.commons.lang.math.Fraction,boolean)>(r1, 0);

        return $r2;
    }

    private org.apache.commons.lang.math.Fraction addSub(org.apache.commons.lang.math.Fraction, boolean)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r11, $r13, $r15;
        boolean z0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36;
        java.math.BigInteger r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r16, r17, $r18;
        long $l8, $l11, $l13, $l16, $l17, $l18;
        java.lang.ArithmeticException $r12;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: org.apache.commons.lang.math.Fraction;

        z0 := @parameter1: boolean;

        if r1 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fraction must not be null");

        throw $r14;

     label01:
        $i3 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i3 != 0 goto label04;

        if z0 == 0 goto label02;

        $r15 = r1;

        goto label03;

     label02:
        $r15 = virtualinvoke r1.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction negate()>();

     label03:
        return $r15;

     label04:
        $i4 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i4 != 0 goto label05;

        return r0;

     label05:
        $i6 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i5 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        i0 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>($i6, $i5);

        if i0 != 1 goto label08;

        $i27 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i26 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        i33 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulAndCheck(int,int)>($i27, $i26);

        $i29 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i28 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        i34 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulAndCheck(int,int)>($i29, $i28);

        $r13 = new org.apache.commons.lang.math.Fraction;

        if z0 == 0 goto label06;

        $i35 = staticinvoke <org.apache.commons.lang.math.Fraction: int addAndCheck(int,int)>(i33, i34);

        goto label07;

     label06:
        $i35 = staticinvoke <org.apache.commons.lang.math.Fraction: int subAndCheck(int,int)>(i33, i34);

     label07:
        $i31 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i30 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i32 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulPosAndCheck(int,int)>($i31, $i30);

        specialinvoke $r13.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i35, $i32);

        return $r13;

     label08:
        $i7 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $l8 = (long) $i7;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l8);

        $i9 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i10 = $i9 / i0;

        $l11 = (long) $i10;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l11);

        r16 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $i12 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        $l13 = (long) $i12;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l13);

        $i14 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i15 = $i14 / i0;

        $l16 = (long) $i15;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l16);

        r17 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        if z0 == 0 goto label09;

        $r18 = virtualinvoke r16.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r17);

        goto label10;

     label09:
        $r18 = virtualinvoke r16.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r17);

     label10:
        r2 = $r18;

        $l17 = (long) i0;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l17);

        $r9 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        i1 = virtualinvoke $r9.<java.math.BigInteger: int intValue()>();

        if i1 != 0 goto label11;

        $i36 = i0;

        goto label12;

     label11:
        $i36 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>(i1, i0);

     label12:
        $l18 = (long) $i36;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l18);

        r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r10);

        $i19 = virtualinvoke r3.<java.math.BigInteger: int bitLength()>();

        if $i19 <= 31 goto label13;

        $r12 = new java.lang.ArithmeticException;

        specialinvoke $r12.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: numerator too large after multiply");

        throw $r12;

     label13:
        $r11 = new org.apache.commons.lang.math.Fraction;

        $i20 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        $i21 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i24 = $i21 / i0;

        $i22 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i23 = $i22 / $i36;

        $i25 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulPosAndCheck(int,int)>($i24, $i23);

        specialinvoke $r11.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>($i20, $i25);

        return $r11;
    }

    public org.apache.commons.lang.math.Fraction multiplyBy(org.apache.commons.lang.math.Fraction)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: org.apache.commons.lang.math.Fraction;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fraction must not be null");

        throw $r4;

     label1:
        $i2 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i2 == 0 goto label2;

        $i3 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i3 != 0 goto label3;

     label2:
        $r2 = <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ZERO>;

        return $r2;

     label3:
        $i5 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i4 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        i0 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>($i5, $i4);

        $i7 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i6 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        i1 = staticinvoke <org.apache.commons.lang.math.Fraction: int greatestCommonDivisor(int,int)>($i7, $i6);

        $i8 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i11 = $i8 / i0;

        $i9 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i10 = $i9 / i1;

        $i12 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulAndCheck(int,int)>($i11, $i10);

        $i13 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i16 = $i13 / i1;

        $i14 = r1.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i15 = $i14 / i0;

        $i17 = staticinvoke <org.apache.commons.lang.math.Fraction: int mulPosAndCheck(int,int)>($i16, $i15);

        $r3 = staticinvoke <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction getReducedFraction(int,int)>($i12, $i17);

        return $r3;
    }

    public org.apache.commons.lang.math.Fraction divideBy(org.apache.commons.lang.math.Fraction)
    {
        org.apache.commons.lang.math.Fraction r0, r1, $r2, $r3;
        int $i0;
        java.lang.ArithmeticException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: org.apache.commons.lang.math.Fraction;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fraction must not be null");

        throw $r5;

     label1:
        $i0 = r1.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i0 != 0 goto label2;

        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("The fraction to divide by must not be zero");

        throw $r4;

     label2:
        $r2 = virtualinvoke r1.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction invert()>();

        $r3 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction multiplyBy(org.apache.commons.lang.math.Fraction)>($r2);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.math.Fraction r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.lang.math.Fraction;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.lang.math.Fraction) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getNumerator()>();

        $i1 = virtualinvoke r2.<org.apache.commons.lang.math.Fraction: int getNumerator()>();

        if $i0 != $i1 goto label3;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        $i3 = virtualinvoke r2.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        if $i2 != $i3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.commons.lang.math.Fraction r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $i0 = r0.<org.apache.commons.lang.math.Fraction: int hashCode>;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getNumerator()>();

        $i3 = 629 + $i2;

        $i4 = 37 * $i3;

        $i5 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        $i6 = $i4 + $i5;

        r0.<org.apache.commons.lang.math.Fraction: int hashCode> = $i6;

     label1:
        $i1 = r0.<org.apache.commons.lang.math.Fraction: int hashCode>;

        return $i1;
    }

    public int compareTo(java.lang.Object)
    {
        org.apache.commons.lang.math.Fraction r0, r2;
        java.lang.Object r1;
        long l0, l1, $l6, $l7, $l10, $l11;
        int $i2, $i3, $i4, $i5, $i8, $i9, $i14, $i15;
        byte $b12, $b13;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        r1 := @parameter0: java.lang.Object;

        r2 = (org.apache.commons.lang.math.Fraction) r1;

        if r0 != r2 goto label1;

        return 0;

     label1:
        $i3 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i2 = r2.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i3 != $i2 goto label2;

        $i15 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i14 = r2.<org.apache.commons.lang.math.Fraction: int denominator>;

        if $i15 != $i14 goto label2;

        return 0;

     label2:
        $i4 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $l7 = (long) $i4;

        $i5 = r2.<org.apache.commons.lang.math.Fraction: int denominator>;

        $l6 = (long) $i5;

        l0 = $l7 * $l6;

        $i8 = r2.<org.apache.commons.lang.math.Fraction: int numerator>;

        $l11 = (long) $i8;

        $i9 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $l10 = (long) $i9;

        l1 = $l11 * $l10;

        $b12 = l0 cmp l1;

        if $b12 != 0 goto label3;

        return 0;

     label3:
        $b13 = l0 cmp l1;

        if $b13 >= 0 goto label4;

        return -1;

     label4:
        return 1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.math.Fraction r0;
        java.lang.String $r1, $r2, $r7;
        org.apache.commons.lang.text.StrBuilder $r3, $r4, $r5, $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $r1 = r0.<org.apache.commons.lang.math.Fraction: java.lang.String toString>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r3.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(32);

        $i0 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getNumerator()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(47);

        $i1 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toString> = $r7;

     label1:
        $r2 = r0.<org.apache.commons.lang.math.Fraction: java.lang.String toString>;

        return $r2;
    }

    public java.lang.String toProperString()
    {
        org.apache.commons.lang.math.Fraction r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r1, $r6, $r13, $r14, $r15;
        org.apache.commons.lang.text.StrBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.lang.math.Fraction;

        $r1 = r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString>;

        if $r1 != null goto label9;

        $i1 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i1 != 0 goto label1;

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = "0";

        goto label9;

     label1:
        $i3 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i2 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        if $i3 != $i2 goto label2;

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = "1";

        goto label9;

     label2:
        $i6 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i4 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i5 = -1 * $i4;

        if $i6 != $i5 goto label3;

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = "-1";

        goto label9;

     label3:
        $i7 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        if $i7 <= 0 goto label4;

        $i15 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

        $i16 = neg $i15;

        goto label5;

     label4:
        $i16 = r0.<org.apache.commons.lang.math.Fraction: int numerator>;

     label5:
        $i8 = r0.<org.apache.commons.lang.math.Fraction: int denominator>;

        $i9 = neg $i8;

        if $i16 >= $i9 goto label8;

        i0 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getProperNumerator()>();

        if i0 != 0 goto label6;

        $i14 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getProperWhole()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i14);

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = $r14;

        goto label7;

     label6:
        $r7 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r7.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(32);

        $i12 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getProperWhole()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i12);

        $r9 = virtualinvoke $r8.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(32);

        $r10 = virtualinvoke $r9.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(47);

        $i13 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        $r12 = virtualinvoke $r11.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i13);

        $r13 = virtualinvoke $r12.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = $r13;

     label7:
        goto label9;

     label8:
        $r2 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r2.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(32);

        $i10 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getNumerator()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i10);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(47);

        $i11 = virtualinvoke r0.<org.apache.commons.lang.math.Fraction: int getDenominator()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(int)>($i11);

        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString> = $r6;

     label9:
        $r15 = r0.<org.apache.commons.lang.math.Fraction: java.lang.String toProperString>;

        return $r15;
    }

    static void <clinit>()
    {
        org.apache.commons.lang.math.Fraction $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        <org.apache.commons.lang.math.Fraction: long serialVersionUID> = 65382027393090L;

        $r0 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r0.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(0, 1);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ZERO> = $r0;

        $r1 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r1.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(1, 1);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE> = $r1;

        $r2 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r2.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(1, 2);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE_HALF> = $r2;

        $r3 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r3.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(1, 3);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE_THIRD> = $r3;

        $r4 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r4.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(2, 3);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction TWO_THIRDS> = $r4;

        $r5 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r5.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(1, 4);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE_QUARTER> = $r5;

        $r6 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r6.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(2, 4);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction TWO_QUARTERS> = $r6;

        $r7 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r7.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(3, 4);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction THREE_QUARTERS> = $r7;

        $r8 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r8.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(1, 5);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction ONE_FIFTH> = $r8;

        $r9 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r9.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(2, 5);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction TWO_FIFTHS> = $r9;

        $r10 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r10.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(3, 5);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction THREE_FIFTHS> = $r10;

        $r11 = new org.apache.commons.lang.math.Fraction;

        specialinvoke $r11.<org.apache.commons.lang.math.Fraction: void <init>(int,int)>(4, 5);

        <org.apache.commons.lang.math.Fraction: org.apache.commons.lang.math.Fraction FOUR_FIFTHS> = $r11;

        return;
    }
}
