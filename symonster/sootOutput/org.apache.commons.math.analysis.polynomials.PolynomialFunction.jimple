public class org.apache.commons.math.analysis.polynomials.PolynomialFunction extends java.lang.Object implements org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction, java.io.Serializable
{
    private static final long serialVersionUID;
    private final double[] coefficients;

    public void <init>(double[])
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double[] r1, $r2, $r3;
        int $i0, i2;
        double $d0;
        byte $b1;
        org.apache.commons.math.exception.NoDataException $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i2 = lengthof r1;

        if i2 != 0 goto label1;

        $r4 = new org.apache.commons.math.exception.NoDataException;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r4.<org.apache.commons.math.exception.NoDataException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r5);

        throw $r4;

     label1:
        if i2 <= 1 goto label2;

        $i0 = i2 - 1;

        $d0 = r1[$i0];

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        i2 = i2 + -1;

        goto label1;

     label2:
        $r2 = newarray (double)[i2];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients> = $r2;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i2);

        return;
    }

    public double value(double)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunction: double evaluate(double[],double)>($r1, d0);

        return $d1;
    }

    public int degree()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        return $i1;
    }

    public double[] getCoefficients()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    protected static double evaluate(double[], double)
    {
        double[] r0;
        double d0, $d1, $d2, d3;
        int i0, $i1, i2;
        org.apache.commons.math.exception.NoDataException $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r1 = new org.apache.commons.math.exception.NoDataException;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r1.<org.apache.commons.math.exception.NoDataException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r2);

        throw $r1;

     label1:
        $i1 = i0 - 1;

        d3 = r0[$i1];

        i2 = i0 - 2;

     label2:
        if i2 < 0 goto label3;

        $d2 = d0 * d3;

        $d1 = r0[i2];

        d3 = $d2 + $d1;

        i2 = i2 + -1;

        goto label2;

     label3:
        return d3;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction add(org.apache.commons.math.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, r1, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        double[] r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        r1 := @parameter0: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i3 = lengthof $r3;

        $r4 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r4;

        i0 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i3, $i2);

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i5 = lengthof $r5;

        $r6 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i4 = lengthof $r6;

        i1 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>($i5, $i4);

        r2 = newarray (double)[i1];

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $r10 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r10[i9];

        $r11 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r11[i9];

        $d2 = $d1 + $d0;

        r2[i9] = $d2;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i7 = lengthof $r7;

        $r8 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i6 = lengthof $r8;

        if $i7 >= $i6 goto label3;

        $r12 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        goto label4;

     label3:
        $r12 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

     label4:
        $i8 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, i0, r2, i0, $i8);

        $r9 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        specialinvoke $r9.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return $r9;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction subtract(org.apache.commons.math.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, r1, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        double[] r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        r1 := @parameter0: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i3 = lengthof $r3;

        $r4 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = lengthof $r4;

        i0 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i3, $i2);

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i5 = lengthof $r5;

        $r6 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i4 = lengthof $r6;

        i1 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>($i5, $i4);

        r2 = newarray (double)[i1];

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $r12 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d3 = $r12[i9];

        $r13 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d2 = $r13[i9];

        $d4 = $d3 - $d2;

        r2[i9] = $d4;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i7 = lengthof $r7;

        $r8 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i6 = lengthof $r8;

        if $i7 >= $i6 goto label5;

        i10 = i0;

     label3:
        if i10 >= i1 goto label4;

        $r11 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r11[i10];

        $d1 = neg $d0;

        r2[i10] = $d1;

        i10 = i10 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r9 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i8 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i0, r2, i0, $i8);

     label6:
        $r10 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        specialinvoke $r10.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return $r10;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction negate()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, $r4;
        double[] r1, $r2, $r3, $r5;
        int $i0, $i1, i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d0 = $r5[i2];

        $d1 = neg $d0;

        r1[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        specialinvoke $r4.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r1);

        return $r4;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math.analysis.polynomials.PolynomialFunction)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, r1, $r5;
        double[] r2, $r3, $r4, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        r1 := @parameter0: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i1 = lengthof $r3;

        $r4 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i0 = lengthof $r4;

        $i2 = $i1 + $i0;

        $i3 = $i2 - 1;

        r2 = newarray (double)[$i3];

        i12 = 0;

     label1:
        $i4 = lengthof r2;

        if i12 >= $i4 goto label4;

        r2[i12] = 0.0;

        $i6 = i12 + 1;

        $r6 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i5 = lengthof $r6;

        $i7 = $i6 - $i5;

        i13 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>(0, $i7);

     label2:
        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i9 = lengthof $r7;

        $i8 = i12 + 1;

        $i10 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i9, $i8);

        if i13 >= $i10 goto label3;

        $d3 = r2[i12];

        $r8 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r8[i13];

        $r9 = r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i11 = i12 - i13;

        $d0 = $r9[$i11];

        $d2 = $d1 * $d0;

        $d4 = $d3 + $d2;

        r2[i12] = $d4;

        i13 = i13 + 1;

        goto label2;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        $r5 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        specialinvoke $r5.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r2);

        return $r5;
    }

    protected static double[] differentiate(double[])
    {
        double[] r0, r1, $r2;
        int i0, $i1, $i2, i3;
        double $d0, $d1, $d2;
        org.apache.commons.math.exception.NoDataException $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r3 = new org.apache.commons.math.exception.NoDataException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        specialinvoke $r3.<org.apache.commons.math.exception.NoDataException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r4);

        throw $r3;

     label1:
        if i0 != 1 goto label2;

        $r2 = newarray (double)[1];

        $r2[0] = 0.0;

        return $r2;

     label2:
        $i1 = i0 - 1;

        r1 = newarray (double)[$i1];

        i3 = i0 - 1;

     label3:
        if i3 <= 0 goto label4;

        $i2 = i3 - 1;

        $d1 = (double) i3;

        $d0 = r0[i3];

        $d2 = $d1 * $d0;

        r1[$i2] = $d2;

        i3 = i3 + -1;

        goto label3;

     label4:
        return r1;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction polynomialDerivative()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, $r1;
        double[] $r2, $r3;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r1 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r3 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] differentiate(double[])>($r2);

        specialinvoke $r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r3);

        return $r1;
    }

    public org.apache.commons.math.analysis.UnivariateRealFunction derivative()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, $r1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r1 = virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction polynomialDerivative()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.StringBuilder $r2;
        double[] $r3, $r4, $r8, $r9, $r18, $r21, $r22, $r23;
        byte $b0, $b1, $b3, $b4, $b8;
        java.lang.String $r5, $r7, $r12, $r14;
        int $i2, $i5, i6, $i7;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d1 = $r3[0];

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r21 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i5 = lengthof $r21;

        if $i5 != 1 goto label2;

        return "0";

     label1:
        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d2 = $r4[0];

        $r5 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label2:
        i6 = 1;

     label3:
        $r22 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i7 = lengthof $r22;

        if i6 >= $i7 goto label9;

        $r8 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d3 = $r8[i6];

        $b1 = $d3 cmpl 0.0;

        if $b1 == 0 goto label8;

        $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label5;

        $r18 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d5 = $r18[i6];

        $b4 = $d5 cmpg 0.0;

        if $b4 >= 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        goto label6;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        goto label6;

     label5:
        $r9 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d4 = $r9[i6];

        $b3 = $d4 cmpg 0.0;

        if $b3 >= 0 goto label6;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label6:
        $r23 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $d6 = $r23[i6];

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d6);

        $d7 = d0 - 1.0;

        $b8 = $d7 cmpl 0.0;

        if $b8 == 0 goto label7;

        $r14 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label7:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        if i6 <= 1 goto label8;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

     label8:
        i6 = i6 + 1;

        goto label3;

     label9:
        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0;
        double[] $r1;
        int $i1, $i2, i4;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $i1 = 31 * 1;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math.analysis.polynomials.PolynomialFunction) r1;

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $r3 = r2.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] coefficients>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.analysis.polynomials.PolynomialFunction: long serialVersionUID> = -7726511984200295583L;

        return;
    }
}
