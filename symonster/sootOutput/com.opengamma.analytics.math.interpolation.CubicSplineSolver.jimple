abstract class com.opengamma.analytics.math.interpolation.CubicSplineSolver extends java.lang.Object
{
    private final com.opengamma.analytics.math.linearalgebra.Decomposition _luObj;

    void <init>()
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons;

        specialinvoke $r1.<com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.linearalgebra.Decomposition _luObj> = $r1;

        return;
    }

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[]);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[]);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[], com.opengamma.analytics.math.matrix.DoubleMatrix2D);

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        return $r2;
    }

    protected double[] getDiffs(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, r2;
        int i0, $i1, $i2, $i3, i4;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r2 = newarray (double)[$i1];

        i4 = 0;

     label1:
        $i2 = i0 - 1;

        if i4 >= $i2 goto label2;

        $i3 = i4 + 1;

        $d1 = r1[$i3];

        $d0 = r1[i4];

        $d2 = $d1 - $d0;

        r2[i4] = $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    protected com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, r2, r3, r4, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double[][] r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r5 = newmultiarray (double)[$i1][4];

        i6 = 0;

     label1:
        $i2 = i0 - 1;

        if i6 >= $i2 goto label2;

        $r7 = r5[i6];

        $i3 = i6 + 1;

        $d0 = r4[$i3];

        $d2 = $d0 / 6.0;

        $d1 = r3[i6];

        $d7 = $d2 / $d1;

        $d3 = r4[i6];

        $d5 = $d3 / 6.0;

        $d4 = r3[i6];

        $d6 = $d5 / $d4;

        $d8 = $d7 - $d6;

        $r7[0] = $d8;

        $r8 = r5[i6];

        $d9 = r4[i6];

        $d10 = 0.5 * $d9;

        $r8[1] = $d10;

        $r9 = r5[i6];

        $i4 = i6 + 1;

        $d12 = r2[$i4];

        $d11 = r3[i6];

        $d16 = $d12 / $d11;

        $d14 = r2[i6];

        $d13 = r3[i6];

        $d15 = $d14 / $d13;

        $d21 = $d16 - $d15;

        $d18 = r3[i6];

        $d17 = r4[i6];

        $d19 = $d18 * $d17;

        $d20 = $d19 / 2.0;

        $d26 = $d21 - $d20;

        $d23 = r3[i6];

        $i5 = i6 + 1;

        $d22 = r4[$i5];

        $d24 = $d23 * $d22;

        $d25 = $d24 / 6.0;

        $d31 = $d26 - $d25;

        $d28 = r3[i6];

        $d27 = r4[i6];

        $d29 = $d28 * $d27;

        $d30 = $d29 / 6.0;

        $d32 = $d31 + $d30;

        $r9[2] = $d32;

        $r10 = r5[i6];

        $d33 = r2[i6];

        $r10[3] = $d33;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r6;
    }

    protected com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonSensitivityCoeffs(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, $r7, $r9, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r23;
        double[][] r2, $r5, $r6, $r8, $r10, $r12, $r16, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        double[][][] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r24;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r3 = newmultiarray (double)[$i2][4][i0];

        i9 = 0;

     label1:
        $i3 = i0 - 1;

        if i9 >= $i3 goto label4;

        $r6 = r3[i9];

        $r7 = $r6[3];

        $r7[i9] = 1.0;

        $r8 = r3[i9];

        $r9 = $r8[2];

        $i6 = i9 + 1;

        $d0 = r1[i9];

        $d1 = 1.0 / $d0;

        $r9[$i6] = $d1;

        $r10 = r3[i9];

        $r11 = $r10[2];

        $d2 = r1[i9];

        $d3 = -1.0 / $d2;

        $r11[i9] = $d3;

        i10 = 0;

     label2:
        if i10 >= i0 goto label3;

        $r12 = r3[i9];

        $r15 = $r12[0];

        $i7 = i9 + 1;

        $r13 = r2[$i7];

        $d4 = $r13[i10];

        $d6 = $d4 / 6.0;

        $d5 = r1[i9];

        $d11 = $d6 / $d5;

        $r14 = r2[i9];

        $d7 = $r14[i10];

        $d9 = $d7 / 6.0;

        $d8 = r1[i9];

        $d10 = $d9 / $d8;

        $d12 = $d11 - $d10;

        $r15[i10] = $d12;

        $r16 = r3[i9];

        $r18 = $r16[1];

        $r17 = r2[i9];

        $d13 = $r17[i10];

        $d14 = 0.5 * $d13;

        $r18[i10] = $d14;

        $r19 = r3[i9];

        $r20 = $r19[2];

        $d30 = $r20[i10];

        $d15 = r1[i9];

        $d17 = neg $d15;

        $r21 = r2[i9];

        $d16 = $r21[i10];

        $d18 = $d17 * $d16;

        $d23 = $d18 / 2.0;

        $d20 = r1[i9];

        $i8 = i9 + 1;

        $r22 = r2[$i8];

        $d19 = $r22[i10];

        $d21 = $d20 * $d19;

        $d22 = $d21 / 6.0;

        $d28 = $d23 - $d22;

        $d25 = r1[i9];

        $r23 = r2[i9];

        $d24 = $r23[i10];

        $d26 = $d25 * $d24;

        $d27 = $d26 / 6.0;

        $d29 = $d28 + $d27;

        $d31 = $d30 + $d29;

        $r20[i10] = $d31;

        i10 = i10 + 1;

        goto label2;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        $i4 = i0 - 1;

        r24 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i4];

        i11 = 0;

     label5:
        $i5 = i0 - 1;

        if i11 >= $i5 goto label6;

        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r5 = r3[i11];

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r5);

        r24[i11] = $r4;

        i11 = i11 + 1;

        goto label5;

     label6:
        return r24;
    }

    protected com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonCoefficientWithSensitivity(double[], double[], double[], double[][], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, r2, r3, r5, $r11, $r14, $r15;
        double[][] r4, r6, r9;
        int i0, $i1, $i2, i3, i4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r8, r16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        r5 := @parameter4: double[];

        r6 := @parameter5: double[][];

        i0 = lengthof r1;

        r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] combinedMatrixEqnSolver(double[][],double[],double[][])>(r4, r5, r6);

        r8 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        $r10 = r7[0];

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r12 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, $r11);

        r8[0] = $r12;

        r9 = newmultiarray (double)[i0][i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $r14 = r9[i3];

        $i2 = i4 + 1;

        $r13 = r7[$i2];

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d0 = $r15[i3];

        $r14[i4] = $d0;

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        r16 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonSensitivityCoeffs(double[],double[][])>(r3, r9);

        $i1 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r16, 0, r8, 1, $i1);

        return r8;
    }

    protected double[][] getCommonMatrixElements(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        double[][] r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r2 = newmultiarray (double)[i0][i0];

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r6 = r2[i7];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r6, 0.0);

        i7 = i7 + 1;

        goto label1;

     label2:
        i8 = 1;

     label3:
        $i2 = i0 - 1;

        if i8 >= $i2 goto label4;

        $r3 = r2[i8];

        $i4 = i8 - 1;

        $i3 = i8 - 1;

        $d0 = r1[$i3];

        $r3[$i4] = $d0;

        $r4 = r2[i8];

        $i5 = i8 - 1;

        $d2 = r1[$i5];

        $d1 = r1[i8];

        $d3 = $d2 + $d1;

        $d4 = 2.0 * $d3;

        $r4[i8] = $d4;

        $r5 = r2[i8];

        $i6 = i8 + 1;

        $d5 = r1[i8];

        $r5[$i6] = $d5;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r2;
    }

    protected double[] getCommonVectorElements(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 0.0);

        i6 = 1;

     label1:
        $i1 = i0 - 1;

        if i6 >= $i1 goto label2;

        $i2 = i6 + 1;

        $d0 = r1[$i2];

        $d2 = 6.0 * $d0;

        $d1 = r2[i6];

        $d7 = $d2 / $d1;

        $d3 = r1[i6];

        $d5 = 6.0 * $d3;

        $d4 = r2[i6];

        $d6 = $d5 / $d4;

        $d12 = $d7 - $d6;

        $d8 = r1[i6];

        $d10 = 6.0 * $d8;

        $i3 = i6 - 1;

        $d9 = r2[$i3];

        $d11 = $d10 / $d9;

        $d17 = $d12 - $d11;

        $i4 = i6 - 1;

        $d13 = r1[$i4];

        $d15 = 6.0 * $d13;

        $i5 = i6 - 1;

        $d14 = r2[$i5];

        $d16 = $d15 / $d14;

        $d18 = $d17 + $d16;

        r3[i6] = $d18;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r3;
    }

    protected double[][] getCommonVectorSensitivity(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[] r1, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        double[][] r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r2 = newmultiarray (double)[i0][i0];

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r6 = r2[i7];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r6, 0.0);

        i7 = i7 + 1;

        goto label1;

     label2:
        i8 = 1;

     label3:
        $i2 = i0 - 1;

        if i8 >= $i2 goto label4;

        $r3 = r2[i8];

        $i4 = i8 - 1;

        $i3 = i8 - 1;

        $d0 = r1[$i3];

        $d1 = 6.0 / $d0;

        $r3[$i4] = $d1;

        $r4 = r2[i8];

        $d2 = r1[i8];

        $d5 = -6.0 / $d2;

        $i5 = i8 - 1;

        $d3 = r1[$i5];

        $d4 = 6.0 / $d3;

        $d6 = $d5 - $d4;

        $r4[i8] = $d6;

        $r5 = r2[i8];

        $i6 = i8 + 1;

        $d7 = r1[i8];

        $d8 = 6.0 / $d7;

        $r5[$i6] = $d8;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r2;
    }

    protected double[] matrixEqnSolver(double[][], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[][] r1, r4, r5;
        double[] r2, r6, $r17, $r18;
        com.opengamma.analytics.math.linearalgebra.LUDecompositionResult r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r10, $r11, $r13;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r8;
        java.lang.Object $r9;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r16;
        com.opengamma.analytics.math.matrix.Matrix $r15;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        $r8 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.linearalgebra.Decomposition _luObj>;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r1);

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>($r7);

        r3 = (com.opengamma.analytics.math.linearalgebra.LUDecompositionResult) $r9;

        $r10 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getL()>();

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r11 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getU()>();

        r5 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        $r13 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getP()>();

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        $r15 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r13, $r14);

        $r16 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r15;

        r6 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r17 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] forwardSubstitution(double[][],double[])>(r4, r6);

        $r18 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] backSubstitution(double[][],double[])>(r5, $r17);

        return $r18;
    }

    protected com.opengamma.analytics.math.matrix.DoubleMatrix1D[] combinedMatrixEqnSolver(double[][], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[][] r1, r3, r5, r6;
        double[] r2, r8, r11, r12, $r24, $r25, $r32, $r33;
        int i0, $i1, $i2, i3;
        com.opengamma.analytics.math.linearalgebra.LUDecompositionResult r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r7, $r13, $r16, $r17, $r22;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r10;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r14;
        java.lang.Object $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r18, $r21, $r23, $r26, $r27, $r30, $r31;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r19, $r28;
        com.opengamma.analytics.math.matrix.Matrix $r20, $r29;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        i0 = lengthof r2;

        $r14 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.linearalgebra.Decomposition _luObj>;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r1);

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>($r13);

        r4 = (com.opengamma.analytics.math.linearalgebra.LUDecompositionResult) $r15;

        $r16 = interfaceinvoke r4.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getL()>();

        r5 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r17 = interfaceinvoke r4.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getU()>();

        r6 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r7 = interfaceinvoke r4.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getP()>();

        $r19 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        $r18 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r7, $r18);

        $r21 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r20;

        r8 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r22 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        $i1 = i0 + 1;

        r10 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i1];

        $r23 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r24 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] forwardSubstitution(double[][],double[])>(r5, r8);

        $r25 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] backSubstitution(double[][],double[])>(r6, $r24);

        specialinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r25);

        r10[0] = $r23;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r26 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getColumnVector(int)>(i3);

        r11 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r28 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        $r27 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r11);

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r7, $r27);

        $r30 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r29;

        r12 = virtualinvoke $r30.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i2 = i3 + 1;

        $r31 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r32 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] forwardSubstitution(double[][],double[])>(r5, r12);

        $r33 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: double[] backSubstitution(double[][],double[])>(r6, $r32);

        specialinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r33);

        r10[$i2] = $r31;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r10;
    }

    private double[] forwardSubstitution(double[][], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[][] r1;
        double[] r2, r3, $r4, $r5, $r6;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $d1 = r2[i1];

        $r4 = r1[i1];

        $d0 = $r4[i1];

        d7 = $d1 / $d0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r5 = r1[i1];

        $d3 = $r5[i2];

        $d2 = r3[i2];

        $d5 = $d3 * $d2;

        $r6 = r1[i1];

        $d4 = $r6[i1];

        $d6 = $d5 / $d4;

        d7 = d7 - $d6;

        i2 = i2 + 1;

        goto label2;

     label3:
        r3[i1] = d7;

        i1 = i1 + 1;

        goto label1;

     label4:
        return r3;
    }

    private double[] backSubstitution(double[][], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r0;
        double[][] r1;
        double[] r2, r3, $r4, $r5, $r6;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = i0 - 1;

     label1:
        if i1 <= -1 goto label4;

        $d1 = r2[i1];

        $r4 = r1[i1];

        $d0 = $r4[i1];

        d7 = $d1 / $d0;

        i2 = i1 + 1;

     label2:
        if i2 >= i0 goto label3;

        $r5 = r1[i1];

        $d3 = $r5[i2];

        $d2 = r3[i2];

        $d5 = $d3 * $d2;

        $r6 = r1[i1];

        $d4 = $r6[i1];

        $d6 = $d5 / $d4;

        d7 = d7 - $d6;

        i2 = i2 + 1;

        goto label2;

     label3:
        r3[i1] = d7;

        i1 = i1 + -1;

        goto label1;

     label4:
        return r3;
    }
}
