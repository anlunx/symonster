public class com.opengamma.analytics.math.interpolation.LinearInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r4, $r5, $r6, $r7, $r8, $r9;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        int $i0, $i1, $i2;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Value to be interpolated must not be null");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Data bundle must not be null");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        $r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        return $r9;

     label1:
        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        d2 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        d3 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d6 = $d4 - d0;

        $d5 = d2 - d0;

        $d8 = $d6 / $d5;

        $d7 = d3 - d1;

        $d9 = $d8 * $d7;

        $d10 = d1 + $d9;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        return $r8;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5, $r6, $r7, $r8, $r9;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, d15;
        double[] r4, r16;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, i8;
        byte $b3;
        com.opengamma.analytics.math.MathException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Value to be interpolated must not be null");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Data bundle must not be null");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        $r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label4;

        $d5 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r9 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d6 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $b3 = $d5 cmpl $d6;

        if $b3 <= 0 goto label1;

        $r10 = new com.opengamma.analytics.math.MathException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value of ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after last key. Use exstrapolator");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        r16 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        i8 = lengthof r16;

        if i8 != 1 goto label2;

        $d13 = 0.0;

        goto label3;

     label2:
        $i4 = i8 - 1;

        $d8 = r4[$i4];

        $i5 = i8 - 2;

        $d7 = r4[$i5];

        $d12 = $d8 - $d7;

        $i6 = i8 - 1;

        $d10 = r16[$i6];

        $i7 = i8 - 2;

        $d9 = r16[$i7];

        $d11 = $d10 - $d9;

        $d13 = $d12 / $d11;

     label3:
        return $d13;

     label4:
        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        d14 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        d15 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d3 = d15 - d1;

        $d2 = d14 - d0;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5, $r6, $r7;
        int i0, i1, $i2, $i3;
        double[] r3;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r4;
        double d0, d1, d2, d3, d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r3 = newarray (double)[i0];

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        $r5 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        if $r5 != null goto label1;

        $i3 = i0 - 1;

        r3[$i3] = 1.0;

        return r3;

     label1:
        i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $r6 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        d2 = d1 - d0;

        $d5 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d6 = d1 - $d5;

        d3 = $d6 / d2;

        d4 = 1.0 - d3;

        r3[i1] = d3;

        $i2 = i1 + 1;

        r3[$i2] = d4;

        return r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LinearInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.LinearInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
