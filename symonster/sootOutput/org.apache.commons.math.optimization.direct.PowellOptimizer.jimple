public class org.apache.commons.math.optimization.direct.PowellOptimizer extends org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer
{
    public static final double DEFAULT_LS_RELATIVE_TOLERANCE;
    public static final double DEFAULT_LS_ABSOLUTE_TOLERANCE;
    private final org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line;

    public void <init>()
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        specialinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: void <init>(double,double)>(1.0E-7, 1.0E-11);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: void <init>(double,double)>(d0, 1.0E-11);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double d0, d1;
        org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch $r1;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: void <init>()>();

        $r1 = new org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch;

        specialinvoke $r1.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: void <init>(org.apache.commons.math.optimization.direct.PowellOptimizer,double,double)>(r0, d0, d1);

        r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line> = $r1;

        return;
    }

    protected org.apache.commons.math.optimization.RealPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double[] r1, r3, $r5, $r15, $r16, $r19, $r23, r24, r25, r26, r32;
        int i0, i1, $i2, i8, i9, i10, i11;
        double[][] r2, r4, r27;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d18, d20, d21, d22, d23, d24, d25, d26, d27, d28;
        java.lang.Object $r6, $r7, $r11;
        org.apache.commons.math.optimization.RealPointValuePair $r8, $r9, $r30, $r31;
        org.apache.commons.math.optimization.RealConvergenceChecker $r10;
        boolean $z0;
        byte $b3, $b4, $b5, $b6, $b7;
        org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch $r12, $r13, $r14, $r20, $r21, $r22;
        org.apache.commons.math.optimization.GoalType $r17, $r18;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        $r5 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double[] point>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        r1 = (double[]) $r6;

        i0 = lengthof r1;

        r2 = newmultiarray (double)[i0][i0];

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $r23 = r2[i8];

        $r23[i8] = 1.0;

        i8 = i8 + 1;

        goto label01;

     label02:
        r24 = r1;

        d16 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double computeObjectiveValue(double[])>(r1);

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r25 = (double[]) $r7;

     label03:
        virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: void incrementIterationsCounter()>();

        d0 = d16;

        d18 = 0.0;

        i9 = 0;

        i10 = 0;

     label04:
        if i10 >= i0 goto label06;

        $r19 = r2[i10];

        r26 = specialinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double[] copyOf(double[],int)>($r19, i0);

        d20 = d16;

        $r20 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        virtualinvoke $r20.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: void search(double[],double[])>(r24, r26);

        $r21 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        d16 = virtualinvoke $r21.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: double getValueAtOptimum()>();

        $r22 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        d21 = virtualinvoke $r22.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: double getOptimum()>();

        r27 = specialinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>(r24, r26, d21);

        r24 = r27[0];

        $d15 = d20 - d16;

        $b7 = $d15 cmpl d18;

        if $b7 <= 0 goto label05;

        d18 = d20 - d16;

        i9 = i10;

     label05:
        i10 = i10 + 1;

        goto label04;

     label06:
        $r8 = new org.apache.commons.math.optimization.RealPointValuePair;

        specialinvoke $r8.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double)>(r25, d0);

        $r9 = new org.apache.commons.math.optimization.RealPointValuePair;

        specialinvoke $r9.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double)>(r24, d16);

        $r10 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker getConvergenceChecker()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: int getIterations()>();

        $z0 = interfaceinvoke $r10.<org.apache.commons.math.optimization.RealConvergenceChecker: boolean converged(int,org.apache.commons.math.optimization.RealPointValuePair,org.apache.commons.math.optimization.RealPointValuePair)>($i2, $r8, $r9);

        if $z0 == 0 goto label12;

        $r18 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.GoalType goal>;

        $r17 = <org.apache.commons.math.optimization.GoalType: org.apache.commons.math.optimization.GoalType MINIMIZE>;

        if $r18 != $r17 goto label09;

        $b6 = d16 cmpg d0;

        if $b6 >= 0 goto label07;

        $r30 = $r9;

        goto label08;

     label07:
        $r30 = $r8;

     label08:
        return $r30;

     label09:
        $b5 = d16 cmpl d0;

        if $b5 <= 0 goto label10;

        $r31 = $r9;

        goto label11;

     label10:
        $r31 = $r8;

     label11:
        return $r31;

     label12:
        r32 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        i11 = 0;

     label13:
        if i11 >= i0 goto label14;

        $d9 = r24[i11];

        $d8 = r25[i11];

        $d10 = $d9 - $d8;

        r32[i11] = $d10;

        $d11 = r24[i11];

        $d13 = 2.0 * $d11;

        $d12 = r25[i11];

        $d14 = $d13 - $d12;

        r3[i11] = $d14;

        i11 = i11 + 1;

        goto label13;

     label14:
        $r11 = virtualinvoke r24.<java.lang.Object: java.lang.Object clone()>();

        r25 = (double[]) $r11;

        d22 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double computeObjectiveValue(double[])>(r3);

        $b3 = d0 cmpl d22;

        if $b3 <= 0 goto label15;

        $d2 = d0 + d22;

        $d1 = 2.0 * d16;

        $d3 = $d2 - $d1;

        d23 = 2.0 * $d3;

        $d4 = d0 - d16;

        d24 = $d4 - d18;

        $d5 = d24 * d24;

        d25 = d23 * $d5;

        d26 = d0 - d22;

        $d6 = d18 * d26;

        $d7 = $d6 * d26;

        d27 = d25 - $d7;

        $b4 = d27 cmpg 0.0;

        if $b4 >= 0 goto label15;

        $r12 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        virtualinvoke $r12.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: void search(double[],double[])>(r24, r32);

        $r13 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        d16 = virtualinvoke $r13.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: double getValueAtOptimum()>();

        $r14 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch line>;

        d28 = virtualinvoke $r14.<org.apache.commons.math.optimization.direct.PowellOptimizer$LineSearch: double getOptimum()>();

        r4 = specialinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>(r24, r32, d28);

        r24 = r4[0];

        i1 = i0 - 1;

        $r15 = r2[i1];

        r2[i9] = $r15;

        $r16 = r4[1];

        r2[i1] = $r16;

     label15:
        goto label03;
    }

    private double[][] newPointAndDirection(double[], double[], double)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double[] r1, r2, r4, r5;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int i0, i1;
        double[][] r3;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        i0 = lengthof r1;

        r3 = newmultiarray (double)[2][i0];

        r4 = r3[0];

        r5 = r3[1];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r2[i1];

        $d2 = $d1 * d0;

        r5[i1] = $d2;

        $d4 = r1[i1];

        $d3 = r5[i1];

        $d5 = $d4 + $d3;

        r4[i1] = $d5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[] copyOf(double[], int)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double[] r1, r2;
        int i0, $i1, $i2;

        r0 := @this: org.apache.commons.math.optimization.direct.PowellOptimizer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 = newarray (double)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i2);

        return r2;
    }

    static double access$000(org.apache.commons.math.optimization.direct.PowellOptimizer, double[]) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        double[] r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.optimization.direct.PowellOptimizer;

        r1 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: double computeObjectiveValue(double[])>(r1);

        return $d0;
    }

    static org.apache.commons.math.optimization.GoalType access$100(org.apache.commons.math.optimization.direct.PowellOptimizer)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        org.apache.commons.math.optimization.GoalType $r1;

        r0 := @parameter0: org.apache.commons.math.optimization.direct.PowellOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.GoalType goal>;

        return $r1;
    }

    static org.apache.commons.math.optimization.GoalType access$200(org.apache.commons.math.optimization.direct.PowellOptimizer)
    {
        org.apache.commons.math.optimization.direct.PowellOptimizer r0;
        org.apache.commons.math.optimization.GoalType $r1;

        r0 := @parameter0: org.apache.commons.math.optimization.direct.PowellOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.direct.PowellOptimizer: org.apache.commons.math.optimization.GoalType goal>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.optimization.direct.PowellOptimizer: double DEFAULT_LS_ABSOLUTE_TOLERANCE> = 1.0E-11;

        <org.apache.commons.math.optimization.direct.PowellOptimizer: double DEFAULT_LS_RELATIVE_TOLERANCE> = 1.0E-7;

        return;
    }
}
