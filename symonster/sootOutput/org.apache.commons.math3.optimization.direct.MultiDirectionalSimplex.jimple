public class org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex extends org.apache.commons.math3.optimization.direct.AbstractSimplex
{
    private static final double DEFAULT_KHI;
    private static final double DEFAULT_GAMMA;
    private final double khi;
    private final double gamma;

    public void <init>(int)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void <init>(int,double)>(i0, 1.0);

        return;
    }

    public void <init>(int, double)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void <init>(int,double,double,double)>(i0, d0, 2.0, 0.5);

        return;
    }

    public void <init>(int, double, double)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        int i0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void <init>(int,double,double,double)>(i0, 1.0, d0, d1);

        return;
    }

    public void <init>(int, double, double, double)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        int i0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(int,double)>(i0, d0);

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double khi> = d1;

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double gamma> = d2;

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void <init>(double[],double,double)>(r1, 2.0, 0.5);

        return;
    }

    public void <init>(double[], double, double)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        double[] r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(double[])>(r1);

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double khi> = d0;

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double gamma> = d1;

        return;
    }

    public void <init>(double[][])
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void <init>(double[][],double,double)>(r1, 2.0, 0.5);

        return;
    }

    public void <init>(double[][], double, double)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        double[][] r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(double[][])>(r1);

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double khi> = d0;

        r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double gamma> = d1;

        return;
    }

    public void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        java.util.Comparator r2;
        org.apache.commons.math3.optimization.PointValuePair[] r3, r6;
        org.apache.commons.math3.optimization.PointValuePair r4, r5, r7;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair[] getPoints()>();

        r4 = r3[0];

        r5 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.PointValuePair[],double,java.util.Comparator)>(r1, r3, 1.0, r2);

        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r4);

        if $i0 >= 0 goto label2;

        r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair[] getPoints()>();

        $d1 = r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double khi>;

        r7 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.PointValuePair[],double,java.util.Comparator)>(r1, r3, $d1, r2);

        $i1 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r7);

        if $i1 > 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void setPoints(org.apache.commons.math3.optimization.PointValuePair[])>(r6);

     label1:
        return;

     label2:
        $d0 = r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double gamma>;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.PointValuePair[],double,java.util.Comparator)>(r1, r3, $d0, r2);

        return;
    }

    private org.apache.commons.math3.optimization.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.PointValuePair[], double, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.PointValuePair[] r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.Comparator r3;
        double[] r4, r5, r6;
        int i0, $i1, i2, i3;
        org.apache.commons.math3.optimization.PointValuePair $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: org.apache.commons.math3.optimization.PointValuePair[];

        d0 := @parameter2: double;

        r3 := @parameter3: java.util.Comparator;

        $r7 = r2[0];

        r4 = virtualinvoke $r7.<org.apache.commons.math3.optimization.PointValuePair: double[] getPointRef()>();

        $r8 = r2[0];

        virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void setPoint(int,org.apache.commons.math3.optimization.PointValuePair)>(0, $r8);

        i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: int getDimension()>();

        i2 = 1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: int getSize()>();

        if i2 >= $i1 goto label4;

        $r10 = r2[i2];

        r5 = virtualinvoke $r10.<org.apache.commons.math3.optimization.PointValuePair: double[] getPointRef()>();

        r6 = newarray (double)[i0];

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $d5 = r4[i3];

        $d2 = r4[i3];

        $d1 = r5[i3];

        $d3 = $d2 - $d1;

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r6[i3] = $d6;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r11 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r11.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double,boolean)>(r6, #NaN, 0);

        virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void setPoint(int,org.apache.commons.math3.optimization.PointValuePair)>(i2, $r11);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r1, r3);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: org.apache.commons.math3.optimization.PointValuePair getPoint(int)>(0);

        return $r9;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double DEFAULT_GAMMA> = 0.5;

        <org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex: double DEFAULT_KHI> = 2.0;

        return;
    }
}
