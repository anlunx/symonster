public abstract class org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic extends java.lang.Object implements org.apache.commons.math3.stat.descriptive.UnivariateStatistic
{
    private double[] storedData;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setData(double[])
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r2;

     label2:
        r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData> = $r4;

        return;
    }

    public double[] getData()
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    protected double[] getDataRef()
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        return $r1;
    }

    public void setData(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r9, $r12, $r16;
        java.lang.Integer $r6, $r7, $r10, $r13;
        org.apache.commons.math3.exception.NotPositiveException $r8, $r11;
        org.apache.commons.math3.exception.NullArgumentException $r14;
        java.lang.Object[] $r15;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r14 = new org.apache.commons.math3.exception.NullArgumentException;

        $r16 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r15 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label1:
        if i0 >= 0 goto label2;

        $r11 = new org.apache.commons.math3.exception.NotPositiveException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats START_POSITION>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r11.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r12, $r13);

        throw $r11;

     label2:
        if i1 >= 0 goto label3;

        $r8 = new org.apache.commons.math3.exception.NotPositiveException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r8.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r9, $r10);

        throw $r8;

     label3:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label4;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SUBARRAY_ENDS_AFTER_ARRAY_END>;

        $i4 = i0 + i1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = lengthof r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r5, $r6, $r7, 1);

        throw $r4;

     label4:
        $r2 = newarray (double)[i1];

        r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData> = $r2;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, 0, i1);

        return;
    }

    public double evaluate() throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double evaluate(double[])>($r1);

        return $d0;
    }

    public double evaluate(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: boolean test(double[],int,int)>(r1, 0, 0);

        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic: double evaluate(double[],int,int)>(r1, 0, $i0);

        return $d0;
    }

    public abstract double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException;

    public abstract org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy();

    protected boolean test(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>(r1, i0, i1, 0);

        return $z0;
    }

    protected boolean test(double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1;
        int i0, i1;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>(r1, i0, i1, z0);

        return $z1;
    }

    protected boolean test(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],double[],int,int,boolean)>(r1, r2, i0, i1, 0);

        return $z0;
    }

    protected boolean test(double[], double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, r2;
        int i0, i1;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],double[],int,int,boolean)>(r1, r2, i0, i1, z0);

        return $z1;
    }
}
