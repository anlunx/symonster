public class org.apache.commons.math3.random.SobolSequenceGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomVectorGenerator
{
    private static final int BITS;
    private static final double SCALE;
    private static final int MAX_DIMENSION;
    private static final java.lang.String RESOURCE_NAME;
    private static final java.lang.String FILE_CHARSET;
    private final int dimension;
    private int count;
    private final long[][] direction;
    private final long[] x;

    public void <init>(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int i0;
        java.io.InputStream r1;
        org.apache.commons.math3.exception.OutOfRangeException $r4;
        java.lang.Integer $r5, $r6, $r7;
        java.lang.Class $r8;
        long[][] $r9;
        long[] $r10;
        org.apache.commons.math3.exception.MathInternalError $r11, $r13, $r15;
        org.apache.commons.math3.exception.MathParseException $r12;
        java.io.IOException $r14, $r17, $r18;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = 0;

        if i0 < 1 goto label01;

        if i0 <= 1000 goto label02;

     label01:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;

     label02:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000");

        if r1 != null goto label03;

        $r11 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r11.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r11;

     label03:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension> = i0;

        $r9 = newmultiarray (long)[i0][53];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction> = $r9;

        $r10 = newarray (long)[i0];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x> = $r10;

     label04:
        specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int initFromStream(java.io.InputStream)>(r1);

     label05:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label06:
        goto label15;

     label07:
        $r18 := @caughtexception;

        goto label15;

     label08:
        $r14 := @caughtexception;

        $r15 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r15.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r15;

     label09:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r13.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r13;

     label10:
        $r16 := @caughtexception;

     label11:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        throw $r16;

     label15:
        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label04 to label05 with label08;
        catch org.apache.commons.math3.exception.MathParseException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label11 with label10;
    }

    public void <init>(int, java.io.InputStream) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.MathParseException, java.io.IOException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int i0, i1;
        java.io.InputStream r1;
        long[][] $r2;
        long[] $r3;
        org.apache.commons.math3.exception.OutOfRangeException $r4;
        java.lang.Integer $r5, $r6, $r7, $r9;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r8;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = 0;

        if i0 >= 1 goto label1;

        $r8 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r8.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r9);

        throw $r8;

     label1:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension> = i0;

        $r2 = newmultiarray (long)[i0][53];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction> = $r2;

        $r3 = newarray (long)[i0];

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x> = $r3;

        i1 = specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int initFromStream(java.io.InputStream)>(r1);

        if i1 >= i0 goto label2;

        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;

     label2:
        return;
    }

    private int initFromStream(java.io.InputStream) throws org.apache.commons.math3.exception.MathParseException, java.io.IOException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        java.io.InputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9, i10, i11, i12, $i13;
        int[] r4;
        java.io.BufferedReader $r6;
        java.io.InputStreamReader $r7;
        java.lang.String $r8, $r10, $r11, $r12, $r13;
        java.util.StringTokenizer $r9;
        long[][] $r14;
        long $l6;
        long[] $r15;
        java.lang.NumberFormatException $r16;
        org.apache.commons.math3.exception.MathParseException $r17, $r20;
        java.lang.Throwable $r18;
        java.util.NoSuchElementException $r19;
        java.nio.charset.Charset r21;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        r1 := @parameter0: java.io.InputStream;

        i7 = 1;

     label01:
        if i7 > 52 goto label02;

        $r14 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r15 = $r14[0];

        $i5 = 52 - i7;

        $l6 = 1L << $i5;

        $r15[i7] = $l6;

        i7 = i7 + 1;

        goto label01;

     label02:
        r21 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r1, r21);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

        i8 = -1;

     label03:
        virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

        i9 = 2;

        i10 = 1;

     label04:
        $r8 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r8 == null goto label14;

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r8, " ");

     label05:
        $r10 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        if i8 < 2 goto label08;

        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if i8 > $i1 goto label08;

        $r11 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        $r12 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        $i2 = i11 + 1;

        r4 = newarray (int)[$i2];

        i12 = 1;

     label06:
        if i12 > i11 goto label07;

        $r13 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        r4[i12] = $i4;

        i12 = i12 + 1;

        goto label06;

     label07:
        $i3 = i10;

        i10 = i10 + 1;

        specialinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: void initDirectionVector(int,int,int[])>($i3, i0, r4);

     label08:
        $i13 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if i8 <= $i13 goto label10;

     label09:
        virtualinvoke $r6.<java.io.BufferedReader: void close()>();

        return i8;

     label10:
        goto label13;

     label11:
        $r19 := @caughtexception;

        $r20 = new org.apache.commons.math3.exception.MathParseException;

        specialinvoke $r20.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int)>($r8, i9);

        throw $r20;

     label12:
        $r16 := @caughtexception;

        $r17 = new org.apache.commons.math3.exception.MathParseException;

        specialinvoke $r17.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int)>($r8, i9);

        throw $r17;

     label13:
        i9 = i9 + 1;

        goto label04;

     label14:
        virtualinvoke $r6.<java.io.BufferedReader: void close()>();

        goto label17;

     label15:
        $r18 := @caughtexception;

     label16:
        virtualinvoke $r6.<java.io.BufferedReader: void close()>();

        throw $r18;

     label17:
        return i8;

        catch java.util.NoSuchElementException from label05 to label09 with label11;
        catch java.lang.NumberFormatException from label05 to label09 with label12;
        catch java.lang.Throwable from label03 to label09 with label15;
        catch java.lang.Throwable from label10 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void initDirectionVector(int, int, int[])
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int i0, i1, i2, $i3, $i4, $i5, $i10, $i11, $i12, $i13, $i14, $i15, $i21, $i22, i25, i26, i27;
        int[] r1;
        long[][] $r2, $r3, $r5, $r8, $r10, $r12;
        long[] $r4, $r6, $r7, $r9, $r11, $r13;
        long $l6, $l7, $l8, $l9, $l16, $l17, $l18, $l19, $l20, $l23, $l24;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $i3 = lengthof r1;

        i2 = $i3 - 1;

        i25 = 1;

     label1:
        if i25 > i2 goto label2;

        $r12 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r13 = $r12[i0];

        $i21 = r1[i25];

        $l23 = (long) $i21;

        $i22 = 52 - i25;

        $l24 = $l23 << $i22;

        $r13[i25] = $l24;

        i25 = i25 + 1;

        goto label1;

     label2:
        i26 = i2 + 1;

     label3:
        if i26 > 52 goto label6;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r7 = $r2[i0];

        $r3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r3[i0];

        $i4 = i26 - i2;

        $l8 = $r4[$i4];

        $r5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r6 = $r5[i0];

        $i5 = i26 - i2;

        $l6 = $r6[$i5];

        $l7 = $l6 >> i2;

        $l9 = $l8 ^ $l7;

        $r7[i26] = $l9;

        i27 = 1;

     label4:
        $i10 = i2 - 1;

        if i27 > $i10 goto label5;

        $r8 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r9 = $r8[i0];

        $l19 = $r9[i26];

        $i11 = i2 - 1;

        $i12 = $i11 - i27;

        $i13 = i1 >> $i12;

        $i14 = $i13 & 1;

        $l17 = (long) $i14;

        $r10 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r11 = $r10[i0];

        $i15 = i26 - i27;

        $l16 = $r11[$i15];

        $l18 = $l17 * $l16;

        $l20 = $l19 ^ $l18;

        $r9[i26] = $l20;

        i27 = i27 + 1;

        goto label4;

     label5:
        i26 = i26 + 1;

        goto label3;

     label6:
        return;
    }

    public double[] nextVector()
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i11, $i12, i13, i14, i15;
        long[] $r2, $r4, $r5;
        long[][] $r3;
        long $l7, $l8, $l9, $l10;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        r1 = newarray (double)[$i0];

        $i1 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        if $i1 != 0 goto label1;

        $i11 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        $i12 = $i11 + 1;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = $i12;

        return r1;

     label1:
        i13 = 1;

        $i2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        i14 = $i2 - 1;

     label2:
        $i3 = i14 & 1;

        if $i3 != 1 goto label3;

        i14 = i14 >> 1;

        i13 = i13 + 1;

        goto label2;

     label3:
        i15 = 0;

     label4:
        $i4 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if i15 >= $i4 goto label5;

        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $l8 = $r2[i15];

        $r3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r3[i15];

        $l7 = $r4[i13];

        $l9 = $l8 ^ $l7;

        $r2[i15] = $l9;

        $r5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $l10 = $r5[i15];

        $d1 = (double) $l10;

        $d0 = <org.apache.commons.math3.random.SobolSequenceGenerator: double SCALE>;

        $d2 = $d1 / $d0;

        r1[i15] = $d2;

        i15 = i15 + 1;

        goto label4;

     label5:
        $i5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = $i6;

        return r1;
    }

    public double[] skipTo(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int i0, i1, $i5, $i6, $i7, $i8, i12, i14;
        long l2, l3, l4, $l10, $l11, l13;
        double[] $r1;
        long[] $r2, $r4, $r5;
        byte $b9;
        long[][] $r3;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r5 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r5, 0L);

        goto label6;

     label1:
        i1 = i0 - 1;

        $i5 = i1 >> 1;

        $i6 = i1 ^ $i5;

        l2 = (long) $i6;

        i12 = 0;

     label2:
        $i7 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int dimension>;

        if i12 >= $i7 goto label6;

        l13 = 0L;

        i14 = 1;

     label3:
        if i14 > 52 goto label5;

        $i8 = i14 - 1;

        l3 = l2 >> $i8;

        $b9 = l3 cmp 0L;

        if $b9 != 0 goto label4;

        goto label5;

     label4:
        l4 = l3 & 1L;

        $r3 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[][] direction>;

        $r4 = $r3[i12];

        $l10 = $r4[i14];

        $l11 = l4 * $l10;

        l13 = l13 ^ $l11;

        i14 = i14 + 1;

        goto label3;

     label5:
        $r2 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: long[] x>;

        $r2[i12] = l13;

        i12 = i12 + 1;

        goto label2;

     label6:
        r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count> = i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.SobolSequenceGenerator: double[] nextVector()>();

        return $r1;
    }

    public int getNextIndex()
    {
        org.apache.commons.math3.random.SobolSequenceGenerator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.SobolSequenceGenerator;

        $i0 = r0.<org.apache.commons.math3.random.SobolSequenceGenerator: int count>;

        return $i0;
    }

    static void <clinit>()
    {
        double $d0;

        <org.apache.commons.math3.random.SobolSequenceGenerator: java.lang.String FILE_CHARSET> = "US-ASCII";

        <org.apache.commons.math3.random.SobolSequenceGenerator: java.lang.String RESOURCE_NAME> = "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000";

        <org.apache.commons.math3.random.SobolSequenceGenerator: int MAX_DIMENSION> = 1000;

        <org.apache.commons.math3.random.SobolSequenceGenerator: int BITS> = 52;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(2.0, 52);

        <org.apache.commons.math3.random.SobolSequenceGenerator: double SCALE> = $d0;

        return;
    }
}
