class org.apache.commons.lang.time.FastDateFormat$PaddedNumberField extends java.lang.Object implements org.apache.commons.lang.time.FastDateFormat$NumberRule
{
    private final int mField;
    private final int mSize;

    void <init>(int, int)
    {
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i1 >= 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: int mField> = i0;

        r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: int mSize> = i1;

        return;
    }

    public int estimateLength()
    {
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField r0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        return 4;
    }

    public void appendTo(java.lang.StringBuffer, java.util.Calendar)
    {
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField r0;
        java.lang.StringBuffer r1;
        java.util.Calendar r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.util.Calendar;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: int mField>;

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>($i0);

        virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: void appendTo(java.lang.StringBuffer,int)>(r1, $i1);

        return;
    }

    public final void appendTo(java.lang.StringBuffer, int)
    {
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField r0;
        java.lang.StringBuffer r1;
        int i0, $i2, $i3, $i5, $i6, i8, i9, i10;
        long $l1;
        java.lang.String $r2, $r3;
        char $c4, $c7;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        if i0 >= 100 goto label03;

        i8 = r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: int mSize>;

     label01:
        i8 = i8 + -1;

        if i8 < 2 goto label02;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label01;

     label02:
        $i2 = i0 / 10;

        $i3 = $i2 + 48;

        $c4 = (char) $i3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $i5 = i0 % 10;

        $i6 = $i5 + 48;

        $c7 = (char) $i6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        goto label10;

     label03:
        if i0 >= 1000 goto label04;

        i9 = 3;

        goto label07;

     label04:
        if i0 <= -1 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        $l1 = (long) i0;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String,long)>($z0, "Negative values should not be possible", $l1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        i9 = virtualinvoke $r2.<java.lang.String: int length()>();

     label07:
        i10 = r0.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: int mSize>;

     label08:
        i10 = i10 + -1;

        if i10 < i9 goto label09;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label08;

     label09:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label10:
        return;
    }
}
