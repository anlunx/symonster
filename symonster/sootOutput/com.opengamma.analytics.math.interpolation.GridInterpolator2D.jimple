public class com.opengamma.analytics.math.interpolation.GridInterpolator2D extends com.opengamma.analytics.math.interpolation.Interpolator2D
{
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator;
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator;
    private final com.opengamma.util.tuple.FirstThenSecondPairComparator _comparator;

    public void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1, r2;
        com.opengamma.util.tuple.FirstThenSecondPairComparator $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter1: com.opengamma.analytics.math.interpolation.Interpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator2D: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x interpolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y interpolator");

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator> = r1;

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator> = r2;

        $r5 = <com.opengamma.util.tuple.FirstThenSecondPairComparator: com.opengamma.util.tuple.FirstThenSecondPairComparator INSTANCE_DOUBLES>;

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.util.tuple.FirstThenSecondPairComparator _comparator> = $r5;

        return;
    }

    public void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D, com.opengamma.analytics.math.interpolation.Interpolator1D, com.opengamma.analytics.math.interpolation.Interpolator1D, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1, r2, r3, r4;
        com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator $r9, $r10;
        com.opengamma.util.tuple.FirstThenSecondPairComparator $r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter1: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator2D: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x interpolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y interpolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x extrapolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "y extrapolator");

        $r9 = new com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator;

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator: void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D,com.opengamma.analytics.math.interpolation.Interpolator1D)>(r1, r3);

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator> = $r9;

        $r10 = new com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator: void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D,com.opengamma.analytics.math.interpolation.Interpolator1D)>(r2, r4);

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator> = $r10;

        $r11 = <com.opengamma.util.tuple.FirstThenSecondPairComparator: com.opengamma.util.tuple.FirstThenSecondPairComparator INSTANCE_DOUBLES>;

        r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.util.tuple.FirstThenSecondPairComparator _comparator> = $r11;

        return;
    }

    public java.util.Map getDataBundle(java.util.Map)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        java.util.Map r1, $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.util.Map;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $r3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: java.util.Map testData(java.util.Map)>(r1);

        return $r3;
    }

    public java.lang.Double interpolate(java.util.Map, com.opengamma.util.tuple.DoublesPair)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        java.util.Map r1;
        com.opengamma.util.tuple.DoublesPair r2;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.HashMap $r8;
        java.util.Set $r9;
        boolean $z0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r10, $r11, $r17;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r12, $r19;
        java.lang.Double $r13, $r14, $r20, $r21;
        java.lang.Object $r15, $r16, $r18;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.opengamma.util.tuple.DoublesPair;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) $r18;

        $r20 = virtualinvoke r2.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $r21 = virtualinvoke $r17.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r19, $r20);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r21);

        goto label1;

     label2:
        $r11 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator>;

        $r10 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator>;

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(java.util.Map)>($r8);

        $r13 = virtualinvoke r2.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        $r14 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r12, $r13);

        return $r14;
    }

    public java.util.Map getNodeSensitivitiesForValue(java.util.Map, com.opengamma.util.tuple.DoublesPair)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        java.util.Map r1;
        com.opengamma.util.tuple.DoublesPair r2, $r27;
        double[][] r4;
        double d0, $d1, $d2, $d3, $d4;
        java.util.Iterator r5, r43;
        java.util.Map$Entry r6, r44;
        double[] r7, $r24, $r35, r45;
        java.util.HashMap $r10, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.util.Set $r11, $r20;
        boolean $z0, $z1, $z3;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r12, $r13, $r31, $r37;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r14, $r23, $r33, $r39;
        java.lang.Double $r15, $r26, $r28, $r34, $r40, $r41;
        java.lang.Object[] $r16;
        java.lang.Integer $r17, $r18;
        java.lang.Object $r21, $r22, $r25, $r30, $r32, $r36, $r38;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.opengamma.util.tuple.DoublesPair;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        r4 = newarray (double[])[$i0];

        i7 = 0;

        $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r43 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r30 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.util.Map$Entry) $r30;

        $i6 = i7;

        i7 = i7 + 1;

        $r31 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        $r32 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r33 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) $r32;

        $r34 = virtualinvoke r2.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $r35 = virtualinvoke $r31.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r33, $r34);

        r4[$i6] = $r35;

        $r36 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        $r38 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r39 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) $r38;

        $r40 = virtualinvoke r2.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $r41 = virtualinvoke $r37.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r39, $r40);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r41);

        goto label1;

     label2:
        $r13 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator>;

        $r12 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator>;

        $r14 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(java.util.Map)>($r10);

        $r15 = virtualinvoke r2.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        r45 = virtualinvoke $r13.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r14, $r15);

        $i1 = lengthof r45;

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i1 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r16 = newarray (java.lang.Object)[2];

        $i3 = lengthof r45;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16[0] = $r17;

        $i4 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r16[1] = $r18;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "Number of x sensitivities {} must be equal to the data bundle size {}", $r16);

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        i8 = 0;

        $r20 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r21 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r21;

        $r22 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) $r22;

        r7 = interfaceinvoke $r23.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        i9 = 0;

     label6:
        $i5 = lengthof r7;

        if i9 >= $i5 goto label7;

        $d2 = r45[i8];

        $r24 = r4[i8];

        $d1 = $r24[i9];

        d0 = $d2 * $d1;

        $r25 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.Double) $r25;

        $d3 = virtualinvoke $r26.<java.lang.Double: double doubleValue()>();

        $d4 = r7[i9];

        $r27 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d3, $d4);

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        i9 = i9 + 1;

        goto label6;

     label7:
        i8 = i8 + 1;

        goto label5;

     label8:
        return $r19;
    }

    private java.util.Map testData(java.util.Map)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        java.util.Map r1;
        java.util.Iterator r4;
        java.util.Map$Entry r5, r6;
        double d0, $d1, $d2, $d3, $d4, d5;
        com.opengamma.util.tuple.FirstThenSecondPairComparator $r9;
        java.util.Set $r10;
        java.lang.Object $r11, $r12, $r15, $r18, $r20, $r21, $r23, $r26, $r28, $r31, $r40, $r43;
        com.opengamma.util.tuple.DoublesPair $r13, $r16, $r22, $r24, $r29, $r41;
        java.lang.Double $r17, $r25, $r30, $r34, $r37, $r42;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r33, $r36;
        java.util.TreeMap r45, r48, r49, r50, r51;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r46, r47;
        java.util.Comparator r52;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.util.Map;

        r48 = new java.util.TreeMap;

        specialinvoke r48.<java.util.TreeMap: void <init>()>();

        r49 = new java.util.TreeMap;

        $r9 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.util.tuple.FirstThenSecondPairComparator _comparator>;

        r52 = (java.util.Comparator) $r9;

        specialinvoke r49.<java.util.TreeMap: void <init>(java.util.Comparator)>(r52);

        virtualinvoke r49.<java.util.TreeMap: void putAll(java.util.Map)>(r1);

        $r10 = virtualinvoke r49.<java.util.TreeMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (com.opengamma.util.tuple.DoublesPair) $r12;

        d5 = $r13.<com.opengamma.util.tuple.DoublesPair: double first>;

        r50 = new java.util.TreeMap;

        specialinvoke r50.<java.util.TreeMap: void <init>()>();

        r45 = r50;

        $r15 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (com.opengamma.util.tuple.DoublesPair) $r15;

        $d1 = $r16.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r50.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r20 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r20;

        $r21 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (com.opengamma.util.tuple.DoublesPair) $r21;

        d0 = $r22.<com.opengamma.util.tuple.DoublesPair: double first>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d5);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        $r36 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        r46 = virtualinvoke $r36.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(java.util.Map)>(r45);

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r46);

        r51 = new java.util.TreeMap;

        specialinvoke r51.<java.util.TreeMap: void <init>()>();

        r45 = r51;

        $r40 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r41 = (com.opengamma.util.tuple.DoublesPair) $r40;

        $d4 = $r41.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r43 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r43);

        d5 = d0;

        goto label3;

     label2:
        $r23 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (com.opengamma.util.tuple.DoublesPair) $r23;

        $d2 = $r24.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r26 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r26);

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $r28 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = (com.opengamma.util.tuple.DoublesPair) $r28;

        $d3 = $r29.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r31 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r33 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        r47 = virtualinvoke $r33.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(java.util.Map)>(r45);

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r47);

     label4:
        goto label1;

     label5:
        return r48;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getXInterpolator()
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _xInterpolator>;

        return $r1;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getYInterpolator()
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D _yInterpolator>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r3, $r4, $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.opengamma.analytics.math.interpolation.GridInterpolator2D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getXInterpolator()>();

        $r4 = virtualinvoke r2.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getXInterpolator()>();

        $z1 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.Interpolator1D: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getYInterpolator()>();

        $r6 = virtualinvoke r2.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getYInterpolator()>();

        $z2 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        int $i0, $i1, $i2, $i3, i5, i6;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1, $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        $i0 = 1 * 31;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getXInterpolator()>();

        $i1 = virtualinvoke $r1.<com.opengamma.analytics.math.interpolation.Interpolator1D: int hashCode()>();

        i5 = $i0 + $i1;

        $i2 = i5 * 31;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: com.opengamma.analytics.math.interpolation.Interpolator1D getYInterpolator()>();

        $i3 = virtualinvoke $r2.<com.opengamma.analytics.math.interpolation.Interpolator1D: int hashCode()>();

        i6 = $i2 + $i3;

        return i6;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.GridInterpolator2D r0;
        java.lang.Object r1, r2;
        com.opengamma.util.tuple.DoublesPair $r3;
        java.util.Map $r4;
        java.lang.Double $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.GridInterpolator2D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Map) r1;

        $r3 = (com.opengamma.util.tuple.DoublesPair) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.GridInterpolator2D: java.lang.Double interpolate(java.util.Map,com.opengamma.util.tuple.DoublesPair)>($r4, $r3);

        return $r5;
    }
}
