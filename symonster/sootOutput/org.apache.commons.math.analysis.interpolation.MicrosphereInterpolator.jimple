public class org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator extends java.lang.Object implements org.apache.commons.math.analysis.interpolation.MultivariateRealInterpolator
{
    public static final int DEFAULT_MICROSPHERE_ELEMENTS;
    public static final int DEFAULT_BRIGHTNESS_EXPONENT;
    private int microsphereElements;
    private int brightnessExponent;

    public void <init>()
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator r0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator;

        specialinvoke r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: void <init>(int,int)>(2000, 2);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator r0;
        int i0, i1;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: void setMicropshereElements(int)>(i0);

        virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: void setBrightnessExponent(int)>(i1);

        return;
    }

    public org.apache.commons.math.analysis.MultivariateRealFunction interpolate(double[][], double[]) throws org.apache.commons.math.MathException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator r0;
        double[][] r1;
        double[] r2, $r5;
        org.apache.commons.math.random.UnitSphereRandomVectorGenerator $r4;
        int $i0, $i1, $i2;
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction $r6;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        $r4 = new org.apache.commons.math.random.UnitSphereRandomVectorGenerator;

        $r5 = r1[0];

        $i0 = lengthof $r5;

        specialinvoke $r4.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: void <init>(int)>($i0);

        $r6 = new org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction;

        $i2 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int brightnessExponent>;

        $i1 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int microsphereElements>;

        specialinvoke $r6.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction: void <init>(double[][],double[],int,int,org.apache.commons.math.random.UnitSphereRandomVectorGenerator)>(r1, r2, $i2, $i1, $r4);

        return $r6;
    }

    public void setBrightnessExponent(int)
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator r0;
        int i0;
        org.apache.commons.math.exception.NotPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new org.apache.commons.math.exception.NotPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math.exception.NotPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int brightnessExponent> = i0;

        return;
    }

    public void setMicropshereElements(int)
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator r0;
        int i0;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int microsphereElements> = i0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int DEFAULT_BRIGHTNESS_EXPONENT> = 2;

        <org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator: int DEFAULT_MICROSPHERE_ELEMENTS> = 2000;

        return;
    }
}
