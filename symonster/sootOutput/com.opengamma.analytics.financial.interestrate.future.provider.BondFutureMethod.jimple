public abstract class com.opengamma.analytics.financial.interestrate.future.provider.BondFutureMethod extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.interestrate.future.provider.BondFutureMethod r0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.future.provider.BondFutureMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValueFromPrice(com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture, double)
    {
        com.opengamma.analytics.financial.interestrate.future.provider.BondFutureMethod r0;
        com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture r1;
        double d0, d1, $d2, $d3, $d4;
        com.opengamma.util.money.Currency $r2;
        com.opengamma.util.money.MultipleCurrencyAmount $r3;

        r0 := @this: com.opengamma.analytics.financial.interestrate.future.provider.BondFutureMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture;

        d0 := @parameter1: double;

        $d2 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture: double getReferencePrice()>();

        $d3 = d0 - $d2;

        $d4 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture: double getNotional()>();

        d1 = $d3 * $d4;

        $r2 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.future.derivative.BondFuture: com.opengamma.util.money.Currency getCurrency()>();

        $r3 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.Currency,double)>($r2, d1);

        return $r3;
    }
}
