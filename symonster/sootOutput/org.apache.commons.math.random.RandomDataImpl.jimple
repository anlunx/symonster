public class org.apache.commons.math.random.RandomDataImpl extends java.lang.Object implements org.apache.commons.math.random.RandomData, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.commons.math.random.RandomGenerator rand;
    private java.security.SecureRandom secRand;

    public void <init>()
    {
        org.apache.commons.math.random.RandomDataImpl r0;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = null;

        return;
    }

    public void <init>(org.apache.commons.math.random.RandomGenerator)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        org.apache.commons.math.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = null;

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = r1;

        return;
    }

    public java.lang.String nextHexString(int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i8;
        org.apache.commons.math.random.RandomGenerator r1;
        byte[] r3;
        java.lang.Integer r4, $r14;
        java.lang.StringBuilder $r5, $r9, $r10, $r11;
        java.lang.String $r6, $r7, r15;
        byte $b4;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r12 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LENGTH>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r12.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r13, $r14);

        throw $r12;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i1 = i0 / 2;

        $i2 = $i1 + 1;

        r3 = newarray (byte)[$i2];

        interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: void nextBytes(byte[])>(r3);

        i8 = 0;

     label2:
        $i3 = lengthof r3;

        if i8 >= $i3 goto label4;

        $b4 = r3[i8];

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        $i5 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i6 = $i5 + 128;

        r15 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $i7 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i7 != 1 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        i8 = i8 + 1;

        goto label2;

     label4:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r7;
    }

    public int nextInt(int, int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, i1, $i2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math.random.RandomGenerator $r1;
        org.apache.commons.math.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $r2 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r2.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        d0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        $d1 = (double) i1;

        $d5 = d0 * $d1;

        $d3 = 1.0 - d0;

        $d2 = (double) i0;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        $d7 = $d6 + d0;

        $i2 = (int) $d7;

        return $i2;
    }

    public long nextLong(long, long)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        long l0, l1, $l3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b2;
        org.apache.commons.math.random.RandomGenerator $r1;
        org.apache.commons.math.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Long $r4, $r5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke $r2.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        d0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        $d1 = (double) l1;

        $d5 = d0 * $d1;

        $d3 = 1.0 - d0;

        $d2 = (double) l0;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        $d7 = $d6 + d0;

        $l3 = (long) $d7;

        return $l3;
    }

    public java.lang.String nextSecureHexString(int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10;
        java.security.SecureRandom r1;
        byte[] r3, r4;
        java.lang.Integer r5, $r14;
        java.lang.StringBuilder $r6, $r9, $r10, $r11;
        java.lang.String $r7, $r8, r19;
        byte $b4;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.security.NoSuchAlgorithmException $r15;
        org.apache.commons.math.exception.MathInternalError $r16;
        java.security.MessageDigest r17;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        if i0 > 0 goto label01;

        $r12 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LENGTH>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r12.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r13, $r14);

        throw $r12;

     label01:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom getSecRan()>();

     label02:
        r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.math.exception.MathInternalError;

        specialinvoke $r16.<org.apache.commons.math.exception.MathInternalError: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label05:
        virtualinvoke r17.<java.security.MessageDigest: void reset()>();

        $i1 = i0 / 40;

        i8 = $i1 + 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i9 = 1;

     label06:
        $i2 = i8 + 1;

        if i9 >= $i2 goto label10;

        r3 = newarray (byte)[40];

        virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r3);

        virtualinvoke r17.<java.security.MessageDigest: void update(byte[])>(r3);

        r4 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest()>();

        i10 = 0;

     label07:
        $i3 = lengthof r4;

        if i10 >= $i3 goto label09;

        $b4 = r4[i10];

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        $i5 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i6 = $i5 + 128;

        r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $i7 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i7 != 1 goto label08;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        i10 = i10 + 1;

        goto label07;

     label09:
        i9 = i9 + 1;

        goto label06;

     label10:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r8;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label04;
    }

    public int nextSecureInt(int, int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.security.SecureRandom r1;
        double $d0, $d1, $d2;
        org.apache.commons.math.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $r2 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r2.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom getSecRan()>();

        $d0 = virtualinvoke r1.<java.security.SecureRandom: double nextDouble()>();

        $i2 = i1 - i0;

        $i3 = $i2 + 1;

        $d1 = (double) $i3;

        $d2 = $d0 * $d1;

        $i4 = (int) $d2;

        $i5 = i0 + $i4;

        return $i5;
    }

    public long nextSecureLong(long, long)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        long l0, l1, $l3, $l4, $l5, $l6;
        java.security.SecureRandom r1;
        byte $b2;
        double $d0, $d1, $d2;
        org.apache.commons.math.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Long $r4, $r5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke $r2.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom getSecRan()>();

        $d0 = virtualinvoke r1.<java.security.SecureRandom: double nextDouble()>();

        $l3 = l1 - l0;

        $l4 = $l3 + 1L;

        $d1 = (double) $l4;

        $d2 = $d0 * $d1;

        $l5 = (long) $d2;

        $l6 = l0 + $l5;

        return $l6;
    }

    public long nextPoisson(double)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, d73, d74, d76, d77, d78, d79, d80, d87, $d88, d89, d90, d91, d92, d93, d94;
        org.apache.commons.math.random.RandomGenerator r1;
        long l0, l17, $l18, $l20, $l21;
        byte $b1, $b2, $b4, $b5, $b6, $b7, $b8, $b9, $b11, $b12, $b13, $b14, $b15, $b16, $b19;
        int $i3, $i10;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        boolean $z1, z2;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        $b1 = d0 cmpg 0.0;

        if $b1 > 0 goto label01;

        $r2 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MEAN>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label01:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        $b2 = d0 cmpg 40.0;

        if $b2 >= 0 goto label05;

        $d70 = neg d0;

        d73 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d70);

        l17 = 0L;

        d74 = 1.0;

     label02:
        $d72 = (double) l17;

        $d71 = 1000.0 * d0;

        $b15 = $d72 cmpg $d71;

        if $b15 >= 0 goto label04;

        d76 = interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        d74 = d74 * d76;

        $b16 = d74 cmpl d73;

        if $b16 < 0 goto label03;

        l17 = l17 + 1L;

        goto label02;

     label03:
        return l17;

     label04:
        return l17;

     label05:
        d77 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        d78 = d0 - d77;

        d79 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d77);

        $i3 = (int) d77;

        d80 = staticinvoke <org.apache.commons.math.util.MathUtils: double factorialLog(int)>($i3);

        $b4 = d78 cmpg 4.9E-324;

        if $b4 >= 0 goto label06;

        $l18 = 0L;

        goto label07;

     label06:
        $l18 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: long nextPoisson(double)>(d78);

     label07:
        l0 = $l18;

        $d14 = 32.0 * d77;

        $d15 = $d14 / 3.141592653589793;

        $d16 = $d15 + 1.0;

        $d17 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d16);

        $d18 = d77 * $d17;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d18);

        d3 = d2 / 2.0;

        $d19 = 2.0 * d77;

        d4 = $d19 + d2;

        $d20 = 3.141592653589793 * d4;

        $d21 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d20);

        $d22 = 0.0 * d77;

        $d23 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d22);

        d5 = $d21 * $d23;

        $d28 = d4 / d2;

        $d25 = neg d2;

        $d24 = 1.0 + d2;

        $d26 = $d25 * $d24;

        $d27 = $d26 / d4;

        $d29 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d27);

        d6 = $d28 * $d29;

        $d30 = d5 + d6;

        d7 = $d30 + 1.0;

        d8 = d5 / d7;

        d9 = d6 / d7;

        $d31 = 8.0 * d77;

        d10 = 1.0 / $d31;

     label08:
        d11 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextUniform(double,double)>(0.0, 1.0);

        $b19 = d11 cmpg d8;

        if $b19 > 0 goto label12;

        d12 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextGaussian(double,double)>(0.0, 1.0);

        $d62 = d77 + d3;

        $d63 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d62);

        $d64 = d12 * $d63;

        d87 = $d64 - 0.5;

        $b12 = d87 cmpl d2;

        if $b12 > 0 goto label08;

        $d65 = neg d77;

        $b13 = d87 cmpg $d65;

        if $b13 >= 0 goto label09;

        goto label08;

     label09:
        $b14 = d87 cmpg 0.0;

        if $b14 >= 0 goto label10;

        $d88 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d87);

        goto label11;

     label10:
        $d88 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d87);

     label11:
        d89 = $d88;

        d13 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextExponential(double)>(1.0);

        $d68 = neg d13;

        $d66 = d12 * d12;

        $d67 = $d66 / 2.0;

        $d69 = $d68 - $d67;

        d90 = $d69 + d10;

        goto label14;

     label12:
        $d32 = d8 + d9;

        $b5 = d11 cmpl $d32;

        if $b5 <= 0 goto label13;

        d91 = d77;

        goto label21;

     label13:
        $d33 = d4 / d2;

        $d34 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextExponential(double)>(1.0);

        $d35 = $d33 * $d34;

        d87 = d2 + $d35;

        d89 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d87);

        $d36 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextExponential(double)>(1.0);

        $d40 = neg $d36;

        $d37 = d87 + 1.0;

        $d38 = d2 * $d37;

        $d39 = $d38 / d4;

        d90 = $d40 - $d39;

     label14:
        $b6 = d87 cmpg 0.0;

        if $b6 >= 0 goto label15;

        $z1 = 1;

        goto label16;

     label15:
        $z1 = 0;

     label16:
        z2 = $z1;

        $d41 = d89 + 1.0;

        $d43 = d89 * $d41;

        $d42 = 2.0 * d77;

        d92 = $d43 / $d42;

        $d44 = neg d92;

        $b7 = d90 cmpg $d44;

        if $b7 >= 0 goto label17;

        if $z1 != 0 goto label17;

        d91 = d77 + d89;

        goto label21;

     label17:
        $d45 = 2.0 * d89;

        $d47 = $d45 + 1.0;

        $d46 = 6.0 * d77;

        $d48 = $d47 / $d46;

        $d49 = $d48 - 1.0;

        d93 = d92 * $d49;

        $d55 = d92 * d92;

        $d51 = (double) z2;

        $d50 = d89 + 1.0;

        $d52 = $d51 * $d50;

        $d53 = d77 + $d52;

        $d54 = 3.0 * $d53;

        $d56 = $d55 / $d54;

        d94 = d93 - $d56;

        $b8 = d90 cmpg d94;

        if $b8 >= 0 goto label18;

        d91 = d77 + d89;

        goto label21;

     label18:
        $b9 = d90 cmpl d93;

        if $b9 <= 0 goto label19;

        goto label08;

     label19:
        $d58 = d89 * d79;

        $d57 = d89 + d77;

        $i10 = (int) $d57;

        $d59 = staticinvoke <org.apache.commons.math.util.MathUtils: double factorialLog(int)>($i10);

        $d60 = $d58 - $d59;

        $d61 = $d60 + d80;

        $b11 = d90 cmpg $d61;

        if $b11 >= 0 goto label20;

        d91 = d77 + d89;

        goto label21;

     label20:
        goto label08;

     label21:
        $l20 = (long) d91;

        $l21 = l0 + $l20;

        return $l21;
    }

    public double nextGaussian(double, double)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math.random.RandomGenerator $r1;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats STANDARD_DEVIATION>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        $d2 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: double nextGaussian()>();

        $d3 = d1 * $d2;

        $d4 = $d3 + d0;

        return $d4;
    }

    public double nextExponential(double)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, $d1, $d2, $d3, d4;
        org.apache.commons.math.random.RandomGenerator r1;
        byte $b0, $b1;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MEAN>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        d4 = interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

     label2:
        $b1 = d4 cmpl 0.0;

        if $b1 != 0 goto label3;

        d4 = interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        goto label2;

     label3:
        $d1 = neg d0;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d4);

        $d3 = $d1 * $d2;

        return $d3;
    }

    public double nextUniform(double, double)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2, $d3, $d4, d5;
        org.apache.commons.math.random.RandomGenerator r1;
        byte $b0, $b1;
        org.apache.commons.math.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator getRan()>();

        d5 = interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

     label2:
        $b1 = d5 cmpg 0.0;

        if $b1 > 0 goto label3;

        d5 = interfaceinvoke r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        goto label2;

     label3:
        $d2 = d1 - d0;

        $d3 = d5 * $d2;

        $d4 = d0 + $d3;

        return $d4;
    }

    public double nextBeta(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.BetaDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.BetaDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.BetaDistributionImpl: void <init>(double,double)>(d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d2;
    }

    public int nextBinomial(int, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math.distribution.BinomialDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.BinomialDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.BinomialDistributionImpl: void <init>(int,double)>(i0, d0);

        $i1 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution)>($r1);

        return $i1;
    }

    public double nextCauchy(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.CauchyDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.CauchyDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.CauchyDistributionImpl: void <init>(double,double)>(d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d2;
    }

    public double nextChiSquare(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void <init>(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d1;
    }

    public double nextF(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.FDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.FDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.FDistributionImpl: void <init>(double,double)>(d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d2;
    }

    public double nextGamma(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.GammaDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.GammaDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.GammaDistributionImpl: void <init>(double,double)>(d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d2;
    }

    public int nextHypergeometric(int, int, int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, i1, i2, $i3;
        org.apache.commons.math.distribution.HypergeometricDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void <init>(int,int,int)>(i0, i1, i2);

        $i3 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution)>($r1);

        return $i3;
    }

    public int nextPascal(int, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math.distribution.PascalDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.PascalDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.PascalDistributionImpl: void <init>(int,double)>(i0, d0);

        $i1 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution)>($r1);

        return $i1;
    }

    public double nextT(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.TDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.distribution.TDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d1;
    }

    public double nextWeibull(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.WeibullDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.WeibullDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.WeibullDistributionImpl: void <init>(double,double)>(d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution)>($r1);

        return $d2;
    }

    public int nextZipf(int, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math.distribution.ZipfDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math.distribution.ZipfDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.ZipfDistributionImpl: void <init>(int,double)>(i0, d0);

        $i1 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution)>($r1);

        return $i1;
    }

    private org.apache.commons.math.random.RandomGenerator getRan()
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        org.apache.commons.math.random.RandomGenerator $r1, $r2, $r4;
        org.apache.commons.math.random.JDKRandomGenerator $r3;
        long $l0;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math.random.JDKRandomGenerator;

        specialinvoke $r3.<org.apache.commons.math.random.JDKRandomGenerator: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = $r3;

        $r4 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r4.<org.apache.commons.math.random.RandomGenerator: void setSeed(long)>($l0);

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        return $r2;
    }

    private java.security.SecureRandom getSecRan()
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        java.security.SecureRandom $r1, $r2, $r3, $r4;
        long $l0;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        if $r1 != null goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = $r3;

        $r4 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r4.<java.security.SecureRandom: void setSeed(long)>($l0);

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        return $r2;
    }

    public void reSeed(long)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        long l0;
        org.apache.commons.math.random.RandomGenerator $r1, $r2;
        org.apache.commons.math.random.JDKRandomGenerator $r3;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math.random.JDKRandomGenerator;

        specialinvoke $r3.<org.apache.commons.math.random.JDKRandomGenerator: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: void setSeed(long)>(l0);

        return;
    }

    public void reSeedSecure()
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        java.security.SecureRandom $r1, $r2, $r3;
        long $l0;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        if $r1 != null goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r2.<java.security.SecureRandom: void setSeed(long)>($l0);

        return;
    }

    public void reSeedSecure(long)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        long l0;
        java.security.SecureRandom $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        if $r1 != null goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand>;

        virtualinvoke $r2.<java.security.SecureRandom: void setSeed(long)>(l0);

        return;
    }

    public void reSeed()
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        org.apache.commons.math.random.RandomGenerator $r1, $r2;
        long $l0;
        org.apache.commons.math.random.JDKRandomGenerator $r3;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math.random.JDKRandomGenerator;

        specialinvoke $r3.<org.apache.commons.math.random.JDKRandomGenerator: void <init>()>();

        r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.random.RandomDataImpl: org.apache.commons.math.random.RandomGenerator rand>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }

    public void setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        java.lang.String r1, r2;
        java.security.SecureRandom $r3;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.apache.commons.math.random.RandomDataImpl: java.security.SecureRandom secRand> = $r3;

        return;
    }

    public int[] nextPermutation(int, int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        int[] r1, r2;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4, $r7;
        java.lang.Integer $r5, $r8, $r9;
        org.apache.commons.math.exception.NumberIsTooLargeException $r6;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= i0 goto label1;

        $r6 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats PERMUTATION_EXCEEDS_N>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r7, $r8, $r9, 1);

        throw $r6;

     label1:
        if i1 != 0 goto label2;

        $r3 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats PERMUTATION_SIZE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r3.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r4, $r5);

        throw $r3;

     label2:
        r1 = specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int[] getNatural(int)>(i0);

        $i2 = i0 - i1;

        specialinvoke r0.<org.apache.commons.math.random.RandomDataImpl: void shuffle(int[],int)>(r1, $i2);

        r2 = newarray (int)[i1];

        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $i3 = i0 - i6;

        $i4 = $i3 - 1;

        $i5 = r1[$i4];

        r2[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r2;
    }

    public java.lang.Object[] nextSample(java.util.Collection, int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        java.util.Collection r1;
        int i0, i1, $i2, i3;
        java.lang.Object[] r2, r4;
        int[] r3;
        java.lang.Object $r5;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r7, $r10;
        java.lang.Integer $r8, $r11, $r12;
        org.apache.commons.math.exception.NumberIsTooLargeException $r9;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i0 <= i1 goto label1;

        $r9 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r9.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r10, $r11, $r12, 1);

        throw $r9;

     label1:
        if i0 > 0 goto label2;

        $r6 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label2:
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        r3 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int[] nextPermutation(int,int)>(i1, i0);

        r4 = newarray (java.lang.Object)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $i2 = r3[i3];

        $r5 = r2[$i2];

        r4[i3] = $r5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r4;
    }

    public double nextInversionDeviate(org.apache.commons.math.distribution.ContinuousDistribution) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        org.apache.commons.math.distribution.ContinuousDistribution r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.ContinuousDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextUniform(double,double)>(0.0, 1.0);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.distribution.ContinuousDistribution: double inverseCumulativeProbability(double)>($d0);

        return $d1;
    }

    public int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        org.apache.commons.math.distribution.IntegerDistribution r1;
        double d0, $d1;
        int i0, $i2;
        byte $b1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.IntegerDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: double nextUniform(double,double)>(0.0, 1.0);

        i0 = interfaceinvoke r1.<org.apache.commons.math.distribution.IntegerDistribution: int inverseCumulativeProbability(double)>(d0);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.distribution.IntegerDistribution: double cumulativeProbability(int)>(i0);

        $b1 = $d1 cmpl 1.0;

        if $b1 != 0 goto label1;

        return i0;

     label1:
        $i2 = i0 + 1;

        return $i2;
    }

    private void shuffle(int[], int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int[] r1;
        int i0, i1, $i2, $i3, i4, i5;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        $i2 = lengthof r1;

        i4 = $i2 - 1;

     label1:
        if i4 < i0 goto label4;

        if i4 != 0 goto label2;

        i5 = 0;

        goto label3;

     label2:
        i5 = virtualinvoke r0.<org.apache.commons.math.random.RandomDataImpl: int nextInt(int,int)>(0, i4);

     label3:
        i1 = r1[i5];

        $i3 = r1[i4];

        r1[i5] = $i3;

        r1[i4] = i1;

        i4 = i4 + -1;

        goto label1;

     label4:
        return;
    }

    private int[] getNatural(int)
    {
        org.apache.commons.math.random.RandomDataImpl r0;
        int i0, i1;
        int[] r1;

        r0 := @this: org.apache.commons.math.random.RandomDataImpl;

        i0 := @parameter0: int;

        r1 = newarray (int)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1[i1] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.random.RandomDataImpl: long serialVersionUID> = -626730818244969716L;

        return;
    }
}
