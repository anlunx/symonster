public class com.opengamma.analytics.math.TrigonometricFunctionUtils extends java.lang.Object
{
    private static final com.opengamma.analytics.math.number.ComplexNumber NEGATIVE_I;

    public void <init>()
    {
        com.opengamma.analytics.math.TrigonometricFunctionUtils r0;

        r0 := @this: com.opengamma.analytics.math.TrigonometricFunctionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double acos(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber acos(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = <com.opengamma.analytics.math.TrigonometricFunctionUtils: com.opengamma.analytics.math.number.ComplexNumber NEGATIVE_I>;

        $r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, r0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber,double)>($r2, 1.0);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber sqrt(com.opengamma.analytics.math.number.ComplexNumber)>($r3);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, $r4);

        $r6 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r5);

        $r7 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r1, $r6);

        return $r7;
    }

    public static double acosh(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        boolean $z0;

        d0 := @parameter0: double;

        $d2 = d0 * d0;

        d1 = $d2 - 1.0;

        $b0 = d1 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "|x|>=1.0 for real solution");

        $d3 = d0 * d0;

        $d4 = $d3 - 1.0;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d6 = d0 + $d5;

        $d7 = staticinvoke <java.lang.Math: double log(double)>($d6);

        return $d7;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber acosh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, r0);

        $r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber,double)>($r1, 1.0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber sqrt(com.opengamma.analytics.math.number.ComplexNumber)>($r2);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, $r3);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r4);

        return $r5;
    }

    public static double asin(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber asin(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = <com.opengamma.analytics.math.TrigonometricFunctionUtils: com.opengamma.analytics.math.number.ComplexNumber NEGATIVE_I>;

        $r1 = <com.opengamma.analytics.math.number.ComplexNumber: com.opengamma.analytics.math.number.ComplexNumber I>;

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r1, r0);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, r0);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(double,com.opengamma.analytics.math.number.ComplexNumber)>(1.0, $r4);

        $r6 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber sqrt(com.opengamma.analytics.math.number.ComplexNumber)>($r5);

        $r7 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r3, $r6);

        $r8 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r7);

        $r9 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r2, $r8);

        return $r9;
    }

    public static double asinh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = d0 * d0;

        $d2 = $d1 + 1.0;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d4 = d0 + $d3;

        $d5 = staticinvoke <java.lang.Math: double log(double)>($d4);

        return $d5;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber asinh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, r0);

        $r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,double)>($r1, 1.0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber sqrt(com.opengamma.analytics.math.number.ComplexNumber)>($r2);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, $r3);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r4);

        return $r5;
    }

    public static double atan(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double atan(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber atan(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r3 = <com.opengamma.analytics.math.number.ComplexNumber: com.opengamma.analytics.math.number.ComplexNumber I>;

        r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r0, $r3);

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(0.0, 0.5);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(double,com.opengamma.analytics.math.number.ComplexNumber)>(1.0, r1);

        $r6 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(double,com.opengamma.analytics.math.number.ComplexNumber)>(1.0, r1);

        $r7 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r5, $r6);

        $r8 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r7);

        $r9 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r4, $r8);

        return $r9;
    }

    public static double atanh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d2 = 1.0 + d0;

        $d1 = 1.0 - d0;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $d5 = 0.5 * $d4;

        return $d5;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber atanh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(double,com.opengamma.analytics.math.number.ComplexNumber)>(1.0, r0);

        $r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(double,com.opengamma.analytics.math.number.ComplexNumber)>(1.0, r0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r1, $r2);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)>($r3);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(double,com.opengamma.analytics.math.number.ComplexNumber)>(0.5, $r4);

        return $r5;
    }

    public static double cos(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber cos(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double cosh(double)>(d1);

        $d4 = $d2 * $d3;

        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d6 = neg $d5;

        $d7 = staticinvoke <java.lang.Math: double sinh(double)>(d1);

        $d8 = $d6 * $d7;

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d8);

        return $r1;
    }

    public static double cosh(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double cosh(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber cosh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = staticinvoke <java.lang.Math: double cosh(double)>($d0);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d4 = $d1 * $d3;

        $d5 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d6 = staticinvoke <java.lang.Math: double sinh(double)>($d5);

        $d7 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        $d9 = $d6 * $d8;

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d9);

        return $r1;
    }

    public static double sin(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber sin(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double cosh(double)>(d1);

        $d4 = $d2 * $d3;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d6 = staticinvoke <java.lang.Math: double sinh(double)>(d1);

        $d7 = $d5 * $d6;

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d7);

        return $r1;
    }

    public static double sinh(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sinh(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber sinh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = staticinvoke <java.lang.Math: double sinh(double)>($d0);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d4 = $d1 * $d3;

        $d5 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d6 = staticinvoke <java.lang.Math: double cosh(double)>($d5);

        $d7 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        $d9 = $d6 * $d8;

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d9);

        return $r1;
    }

    public static double tan(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double tan(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber tan(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        $r2 = <com.opengamma.analytics.math.number.ComplexNumber: com.opengamma.analytics.math.number.ComplexNumber I>;

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,double)>($r2, 2.0);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r3, r0);

        r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber exp(com.opengamma.analytics.math.number.ComplexNumber)>($r4);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber,double)>(r1, 1.0);

        $r6 = <com.opengamma.analytics.math.number.ComplexNumber: com.opengamma.analytics.math.number.ComplexNumber I>;

        $r7 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,double)>(r1, 1.0);

        $r8 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r6, $r7);

        $r9 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r5, $r8);

        return $r9;
    }

    public static double tanh(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double tanh(double)>(d0);

        return $d1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber tanh(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber exp(com.opengamma.analytics.math.number.ComplexNumber)>(r0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,double)>(r0, -1.0);

        r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber exp(com.opengamma.analytics.math.number.ComplexNumber)>($r3);

        $r4 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r1, r2);

        $r5 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r1, r2);

        $r6 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r4, $r5);

        return $r6;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.number.ComplexNumber $r0;

        $r0 = new com.opengamma.analytics.math.number.ComplexNumber;

        specialinvoke $r0.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(0.0, -1.0);

        <com.opengamma.analytics.math.TrigonometricFunctionUtils: com.opengamma.analytics.math.number.ComplexNumber NEGATIVE_I> = $r0;

        return;
    }
}
