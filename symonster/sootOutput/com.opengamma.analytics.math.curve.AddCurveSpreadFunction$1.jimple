class com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1 extends java.lang.Object implements com.opengamma.analytics.math.function.Function
{
    final com.opengamma.analytics.math.curve.Curve[] val$curves;
    final com.opengamma.analytics.math.curve.AddCurveSpreadFunction this$0;

    void <init>(com.opengamma.analytics.math.curve.AddCurveSpreadFunction, com.opengamma.analytics.math.curve.Curve[])
    {
        com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1 r0;
        com.opengamma.analytics.math.curve.AddCurveSpreadFunction r1;
        com.opengamma.analytics.math.curve.Curve[] r2;

        r0 := @this: com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1;

        r1 := @parameter0: com.opengamma.analytics.math.curve.AddCurveSpreadFunction;

        r2 := @parameter1: com.opengamma.analytics.math.curve.Curve[];

        r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: com.opengamma.analytics.math.curve.AddCurveSpreadFunction this$0> = r1;

        r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: com.opengamma.analytics.math.curve.Curve[] val$curves> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient java.lang.Double evaluate(java.lang.Double[])
    {
        com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1 r0;
        java.lang.Double[] r1;
        double d0, $d1, d2;
        java.lang.Double $r4, $r7, $r9, $r11, $r14, $r16;
        com.opengamma.analytics.math.curve.Curve[] $r5, $r10, $r12;
        com.opengamma.analytics.math.curve.Curve $r6, $r13;
        java.lang.Object $r8, $r15;
        int $i0, i1;

        r0 := @this: com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1;

        r1 := @parameter0: java.lang.Double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r1, "x");

        $r4 = r1[0];

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: com.opengamma.analytics.math.curve.Curve[] val$curves>;

        $r6 = $r5[0];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r7);

        $r9 = (java.lang.Double) $r8;

        d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        i1 = 1;

     label1:
        $r10 = r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: com.opengamma.analytics.math.curve.Curve[] val$curves>;

        $i0 = lengthof $r10;

        if i1 >= $i0 goto label2;

        $r12 = r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: com.opengamma.analytics.math.curve.Curve[] val$curves>;

        $r13 = $r12[i1];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r14);

        $r16 = (java.lang.Double) $r15;

        $d1 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        d2 = d2 + $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        return $r11;
    }

    public volatile java.lang.Object evaluate(java.lang.Object[])
    {
        com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1 r0;
        java.lang.Object[] r1;
        java.lang.Double[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Double[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.curve.AddCurveSpreadFunction$1: java.lang.Double evaluate(java.lang.Double[])>($r2);

        return $r3;
    }
}
