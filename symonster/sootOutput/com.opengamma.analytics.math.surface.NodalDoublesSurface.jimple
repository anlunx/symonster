public class com.opengamma.analytics.math.surface.NodalDoublesSurface extends com.opengamma.analytics.math.surface.DoublesSurface
{

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[], double[], double[])
    {
        double[] r0, r1, r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(double[],double[],double[])>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.lang.Double[], java.lang.Double[], java.lang.Double[])
    {
        java.lang.Double[] r0, r1, r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: java.lang.Double[];

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: java.lang.Double[];

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[])>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List, java.util.List, java.util.List)
    {
        java.util.List r0, r1, r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List,java.util.List,java.util.List)>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(com.opengamma.util.tuple.DoublesPair[], java.lang.Double[])
    {
        com.opengamma.util.tuple.DoublesPair[] r0;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2;

        r0 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r1 := @parameter1: java.lang.Double[];

        $r2 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],java.lang.Double[])>(r0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(com.opengamma.util.tuple.DoublesPair[], double[])
    {
        com.opengamma.util.tuple.DoublesPair[] r0;
        double[] r1;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2;

        r0 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r1 := @parameter1: double[];

        $r2 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],double[])>(r0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List,java.util.List)>(r0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.Map)
    {
        java.util.Map r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List)
    {
        java.util.List r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List)>(r0);

        return $r1;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[], double[], double[], java.lang.String)
    {
        double[] r0, r1, r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(double[],double[],double[],java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.String)
    {
        java.lang.Double[] r0, r1, r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r4;

        r0 := @parameter0: java.lang.Double[];

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: java.lang.Double[];

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List, java.util.List, java.util.List, java.lang.String)
    {
        java.util.List r0, r1, r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List,java.util.List,java.util.List,java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(com.opengamma.util.tuple.DoublesPair[], double[], java.lang.String)
    {
        com.opengamma.util.tuple.DoublesPair[] r0;
        double[] r1;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r1 := @parameter1: double[];

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],double[],java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(com.opengamma.util.tuple.DoublesPair[], java.lang.Double[], java.lang.String)
    {
        com.opengamma.util.tuple.DoublesPair[] r0;
        java.lang.Double[] r1;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],java.lang.Double[],java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List, java.util.List, java.lang.String)
    {
        java.util.List r0, r1;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List,java.util.List,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.Map,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(java.util.List, java.lang.String)
    {
        java.util.List r0;
        java.lang.String r1;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.surface.NodalDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.NodalDoublesSurface: void <init>(java.util.List,java.lang.String)>(r0, r1);

        return $r2;
    }

    public void <init>(double[], double[], double[])
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        double[] r1, r2, r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(double[],double[],double[])>(r1, r2, r3);

        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], java.lang.Double[])
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.lang.Double[] r1, r2, r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: java.lang.Double[];

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[])>(r1, r2, r3);

        return;
    }

    public void <init>(java.util.List, java.util.List, java.util.List)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1, r2, r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], double[])
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        double[] r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r2 := @parameter1: double[];

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],double[])>(r1, r2);

        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], java.lang.Double[])
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        java.lang.Double[] r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r2 := @parameter1: java.lang.Double[];

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],java.lang.Double[])>(r1, r2);

        return;
    }

    public void <init>(java.util.List, java.util.List)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1, r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List,java.util.List)>(r1, r2);

        return;
    }

    public void <init>(java.util.Map)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.Map r1;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.Map)>(r1);

        return;
    }

    public void <init>(java.util.List)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List)>(r1);

        return;
    }

    public void <init>(double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        double[] r1, r2, r3;
        java.lang.String r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(double[],double[],double[],java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.lang.Double[] r1, r2, r3;
        java.lang.String r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: java.lang.Double[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(java.util.List, java.util.List, java.util.List, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1, r2, r3;
        java.lang.String r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List,java.util.List,java.util.List,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        double[] r2;
        java.lang.String r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r2 := @parameter1: double[];

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],double[],java.lang.String)>(r1, r2, r3);

        return;
    }

    public void <init>(com.opengamma.util.tuple.DoublesPair[], java.lang.Double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        java.lang.Double[] r2;
        java.lang.String r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(com.opengamma.util.tuple.DoublesPair[],java.lang.Double[],java.lang.String)>(r1, r2, r3);

        return;
    }

    public void <init>(java.util.List, java.util.List, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1, r2;
        java.lang.String r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List,java.util.List,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void <init>(java.util.Map, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.Map r1;
        java.lang.String r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.Map,java.lang.String)>(r1, r2);

        return;
    }

    public void <init>(java.util.List, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.util.List r1;
        java.lang.String r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.DoublesSurface: void <init>(java.util.List,java.lang.String)>(r1, r2);

        return;
    }

    public java.lang.Double getZValue(java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.lang.Double r1, r2, $r14;
        double[] r3, r4, $r13;
        int i0, i7;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        double $d0, $d1, $d2, $d3, $d4;
        long $l1, $l2, $l4, $l5;
        byte $b3, $b6;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getYDataAsPrimitive()>();

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: int size()>();

        i7 = 0;

     label1:
        if i7 >= i0 goto label3;

        $d0 = r3[i7];

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label2;

        $d2 = r4[i7];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label2;

        $r13 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getZDataAsPrimitive()>();

        $d4 = $r13[i7];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        return $r14;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y data in surface for (");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r5;
    }

    public java.lang.Double getZValue(com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.Pair r1;
        java.lang.Object $r2, $r4;
        java.lang.Double $r3, $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.Pair;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x-y pair");

        $r2 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r3 = (java.lang.Double) $r2;

        $r4 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $r5 = (java.lang.Double) $r4;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r3, $r5);

        return $r6;
    }

    public volatile java.lang.Object getZValue(com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        com.opengamma.util.tuple.Pair r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.Pair;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.Double getZValue(com.opengamma.util.tuple.Pair)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getZValue(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.surface.NodalDoublesSurface r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r4, $r3);

        return $r5;
    }
}
