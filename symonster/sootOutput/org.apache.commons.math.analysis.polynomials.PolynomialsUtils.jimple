public class org.apache.commons.math.analysis.polynomials.PolynomialsUtils extends java.lang.Object
{
    private static final java.util.ArrayList CHEBYSHEV_COEFFICIENTS;
    private static final java.util.ArrayList HERMITE_COEFFICIENTS;
    private static final java.util.ArrayList LAGUERRE_COEFFICIENTS;
    private static final java.util.ArrayList LEGENDRE_COEFFICIENTS;

    private void <init>()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils r0;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math.analysis.polynomials.PolynomialFunction createChebyshevPolynomial(int)
    {
        int i0;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$1 $r0;
        java.util.ArrayList $r1;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList CHEBYSHEV_COEFFICIENTS>;

        $r0 = new org.apache.commons.math.analysis.polynomials.PolynomialsUtils$1;

        specialinvoke $r0.<org.apache.commons.math.analysis.polynomials.PolynomialsUtils$1: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: org.apache.commons.math.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.ArrayList,org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>(i0, $r1, $r0);

        return $r2;
    }

    public static org.apache.commons.math.analysis.polynomials.PolynomialFunction createHermitePolynomial(int)
    {
        int i0;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$2 $r0;
        java.util.ArrayList $r1;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList HERMITE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math.analysis.polynomials.PolynomialsUtils$2;

        specialinvoke $r0.<org.apache.commons.math.analysis.polynomials.PolynomialsUtils$2: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: org.apache.commons.math.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.ArrayList,org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>(i0, $r1, $r0);

        return $r2;
    }

    public static org.apache.commons.math.analysis.polynomials.PolynomialFunction createLaguerrePolynomial(int)
    {
        int i0;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$3 $r0;
        java.util.ArrayList $r1;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LAGUERRE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math.analysis.polynomials.PolynomialsUtils$3;

        specialinvoke $r0.<org.apache.commons.math.analysis.polynomials.PolynomialsUtils$3: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: org.apache.commons.math.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.ArrayList,org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>(i0, $r1, $r0);

        return $r2;
    }

    public static org.apache.commons.math.analysis.polynomials.PolynomialFunction createLegendrePolynomial(int)
    {
        int i0;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$4 $r0;
        java.util.ArrayList $r1;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LEGENDRE_COEFFICIENTS>;

        $r0 = new org.apache.commons.math.analysis.polynomials.PolynomialsUtils$4;

        specialinvoke $r0.<org.apache.commons.math.analysis.polynomials.PolynomialsUtils$4: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: org.apache.commons.math.analysis.polynomials.PolynomialFunction buildPolynomial(int,java.util.ArrayList,org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)>(i0, $r1, $r0);

        return $r2;
    }

    private static org.apache.commons.math.analysis.polynomials.PolynomialFunction buildPolynomial(int, java.util.ArrayList, org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.util.ArrayList r0;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator r1;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;
        java.lang.Object $r3;
        org.apache.commons.math.fraction.BigFraction $r4;
        java.lang.Throwable $r5;
        double[] r8;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.ArrayList;

        r1 := @parameter2: org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator;

        $i2 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i3 = 2 * $i2;

        $d0 = (double) $i3;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d1);

        $i4 = (int) $d2;

        i1 = $i4 - 1;

        entermonitor class "org/apache/commons/math/analysis/polynomials/PolynomialsUtils";

     label1:
        if i0 <= i1 goto label2;

        staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: void computeUpToDegree(int,int,org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator,java.util.ArrayList)>(i0, i1, r1, r0);

     label2:
        exitmonitor class "org/apache/commons/math/analysis/polynomials/PolynomialsUtils";

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor class "org/apache/commons/math/analysis/polynomials/PolynomialsUtils";

     label5:
        throw $r5;

     label6:
        $i5 = i0 + 1;

        $i6 = i0 * $i5;

        i9 = $i6 / 2;

        $i7 = i0 + 1;

        r8 = newarray (double)[$i7];

        i10 = 0;

     label7:
        if i10 > i0 goto label8;

        $i8 = i9 + i10;

        $r3 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>($i8);

        $r4 = (org.apache.commons.math.fraction.BigFraction) $r3;

        $d3 = virtualinvoke $r4.<org.apache.commons.math.fraction.BigFraction: double doubleValue()>();

        r8[i10] = $d3;

        i10 = i10 + 1;

        goto label7;

     label8:
        $r2 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        specialinvoke $r2.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r8);

        return $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static void computeUpToDegree(int, int, org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator, java.util.ArrayList)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator r0;
        java.util.ArrayList r1;
        org.apache.commons.math.fraction.BigFraction[] r2;
        org.apache.commons.math.fraction.BigFraction r3, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, r29, r30, r31, r33;
        java.lang.Object $r4, $r5, $r11, $r19, $r20;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator;

        r1 := @parameter3: java.util.ArrayList;

        $i3 = i1 - 1;

        $i4 = $i3 * i1;

        i8 = $i4 / 2;

        i9 = i1;

     label1:
        if i9 >= i0 goto label4;

        i2 = i8;

        i8 = i8 + i9;

        r2 = interfaceinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator: org.apache.commons.math.fraction.BigFraction[] generate(int)>(i9);

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r29 = (org.apache.commons.math.fraction.BigFraction) $r4;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r30 = (org.apache.commons.math.fraction.BigFraction) $r5;

        $r6 = r2[0];

        $r7 = virtualinvoke r29.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r6);

        $r8 = r2[2];

        $r9 = virtualinvoke r30.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r8);

        $r10 = virtualinvoke $r7.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction subtract(org.apache.commons.math.fraction.BigFraction)>($r9);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        i10 = 1;

     label2:
        if i10 >= i9 goto label3;

        r3 = r29;

        $i6 = i8 + i10;

        $r19 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        r29 = (org.apache.commons.math.fraction.BigFraction) $r19;

        $i7 = i2 + i10;

        $r20 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        r31 = (org.apache.commons.math.fraction.BigFraction) $r20;

        $r21 = r2[0];

        $r22 = virtualinvoke r29.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r21);

        $r23 = r2[1];

        $r24 = virtualinvoke r3.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r23);

        $r25 = virtualinvoke $r22.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction add(org.apache.commons.math.fraction.BigFraction)>($r24);

        $r26 = r2[2];

        $r27 = virtualinvoke r31.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r26);

        $r28 = virtualinvoke $r25.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction subtract(org.apache.commons.math.fraction.BigFraction)>($r27);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r28);

        i10 = i10 + 1;

        goto label2;

     label3:
        $i5 = i8 + i9;

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        r33 = (org.apache.commons.math.fraction.BigFraction) $r11;

        $r12 = r2[0];

        $r13 = virtualinvoke r33.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r12);

        $r14 = r2[1];

        $r15 = virtualinvoke r29.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r14);

        $r16 = virtualinvoke $r13.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction add(org.apache.commons.math.fraction.BigFraction)>($r15);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        $r17 = r2[1];

        $r18 = virtualinvoke r33.<org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction multiply(org.apache.commons.math.fraction.BigFraction)>($r17);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        i9 = i9 + 1;

        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0, $r2, $r4, $r6, $r7, $r9, $r11, $r13, $r14, $r16, $r18, $r20, $r21, $r23, $r25, $r27;
        org.apache.commons.math.fraction.BigFraction $r1, $r3, $r5, $r8, $r10, $r12, $r15, $r17, $r19, $r22, $r24, $r26;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList CHEBYSHEV_COEFFICIENTS> = $r0;

        $r2 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList CHEBYSHEV_COEFFICIENTS>;

        $r1 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r4 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList CHEBYSHEV_COEFFICIENTS>;

        $r3 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ZERO>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r6 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList CHEBYSHEV_COEFFICIENTS>;

        $r5 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList HERMITE_COEFFICIENTS> = $r7;

        $r9 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList HERMITE_COEFFICIENTS>;

        $r8 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r11 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList HERMITE_COEFFICIENTS>;

        $r10 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ZERO>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r13 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList HERMITE_COEFFICIENTS>;

        $r12 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction TWO>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LAGUERRE_COEFFICIENTS> = $r14;

        $r16 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LAGUERRE_COEFFICIENTS>;

        $r15 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $r18 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LAGUERRE_COEFFICIENTS>;

        $r17 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        $r20 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LAGUERRE_COEFFICIENTS>;

        $r19 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction MINUS_ONE>;

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LEGENDRE_COEFFICIENTS> = $r21;

        $r23 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LEGENDRE_COEFFICIENTS>;

        $r22 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        $r25 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LEGENDRE_COEFFICIENTS>;

        $r24 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ZERO>;

        virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

        $r27 = <org.apache.commons.math.analysis.polynomials.PolynomialsUtils: java.util.ArrayList LEGENDRE_COEFFICIENTS>;

        $r26 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        return;
    }
}
