public class org.apache.commons.math3.complex.Complex extends java.lang.Object implements org.apache.commons.math3.FieldElement, java.io.Serializable
{
    public static final org.apache.commons.math3.complex.Complex I;
    public static final org.apache.commons.math3.complex.Complex NaN;
    public static final org.apache.commons.math3.complex.Complex INF;
    public static final org.apache.commons.math3.complex.Complex ONE;
    public static final org.apache.commons.math3.complex.Complex ZERO;
    private static final long serialVersionUID;
    private final double imaginary;
    private final double real;
    private final transient boolean isNaN;
    private final transient boolean isInfinite;

    public void <init>(double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(d0, 0.0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.complex.Complex r0;
        double d0, d1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.complex.Complex: double real> = d0;

        r0.<org.apache.commons.math3.complex.Complex: double imaginary> = d1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        r0.<org.apache.commons.math3.complex.Complex: boolean isNaN> = $z5;

        $z1 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 != 0 goto label5;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z2 != 0 goto label4;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z3 == 0 goto label5;

     label4:
        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite> = $z6;

        return;
    }

    public double abs()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z1 == 0 goto label2;

        return #Infinity;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b0 = $d1 cmpg $d3;

        if $b0 >= 0 goto label4;

        $d15 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b2 = $d15 cmpl 0.0;

        if $b2 != 0 goto label3;

        $d24 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d25 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d24);

        return $d25;

     label3:
        $d17 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d16 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d26 = $d17 / $d16;

        $d18 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d18);

        $d20 = d26 * d26;

        $d21 = 1.0 + $d20;

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d21);

        $d23 = $d19 * $d22;

        return $d23;

     label4:
        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b1 = $d4 cmpl 0.0;

        if $b1 != 0 goto label5;

        $d13 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d13);

        return $d14;

     label5:
        $d6 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d5 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d27 = $d6 / $d5;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $d9 = d27 * d27;

        $d10 = 1.0 + $d9;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d10);

        $d12 = $d8 * $d11;

        return $d12;
    }

    public org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, r1, $r2, $r3;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 == 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d2 = $d0 + $d1;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d5 = $d3 + $d4;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d2, $d5);

        return $r3;
    }

    public org.apache.commons.math3.complex.Complex add(double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        double d0, $d1, $d2, $d3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d3 = $d1 + d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d3, $d2);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex conjugate()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d1 = neg $d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d2, $d1);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, r1, $r2, $r3, $r4, $r5, $r6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27, d28, d29;
        boolean $z0, $z1, $z2, $z3;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 == 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label2:
        d0 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label3;

        $r6 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r6;

     label3:
        $z2 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z3 != 0 goto label4;

        $r5 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        return $r5;

     label4:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b1 = $d2 cmpg $d3;

        if $b1 >= 0 goto label5;

        d26 = d0 / d1;

        $d15 = d0 * d26;

        d27 = $d15 + d1;

        $d16 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d18 = $d16 * d26;

        $d17 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d19 = $d18 + $d17;

        $d25 = $d19 / d27;

        $d20 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d22 = $d20 * d26;

        $d21 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d23 = $d22 - $d21;

        $d24 = $d23 / d27;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d25, $d24);

        return $r4;

     label5:
        d28 = d1 / d0;

        $d4 = d1 * d28;

        d29 = $d4 + d0;

        $d5 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d7 = $d5 * d28;

        $d6 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d8 = $d7 + $d6;

        $d14 = $d8 / d29;

        $d11 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d9 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d10 = $d9 * d28;

        $d12 = $d11 - $d10;

        $d13 = $d12 / d29;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d14, $d13);

        return $r3;
    }

    public org.apache.commons.math3.complex.Complex divide(double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4;
        double d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1, $z2, $z3;
        byte $b0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $r3 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r3;

     label3:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z3 != 0 goto label4;

        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        goto label5;

     label4:
        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

     label5:
        return $r4;

     label6:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d4 = $d1 / d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = $d2 / d0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d4, $d3);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex reciprocal()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23, d24, d25;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r5 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r5;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d21 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b2 = $d21 cmpl 0.0;

        if $b2 != 0 goto label2;

        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return $r4;

     label2:
        $z1 = r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite>;

        if $z1 == 0 goto label3;

        $r3 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO>;

        return $r3;

     label3:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b1 = $d2 cmpg $d4;

        if $b1 >= 0 goto label4;

        $d14 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d13 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d22 = $d14 / $d13;

        $d15 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d17 = $d15 * d22;

        $d16 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d18 = $d17 + $d16;

        d23 = 1.0 / $d18;

        $d20 = d23 * d22;

        $d19 = neg d23;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d20, $d19);

        return $r2;

     label4:
        $d6 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d5 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d24 = $d6 / $d5;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d9 = $d7 * d24;

        $d8 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d10 = $d9 + $d8;

        d25 = 1.0 / $d10;

        $d11 = neg d25;

        $d12 = $d11 * d24;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d25, $d12);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.complex.Complex r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.complex.Complex;

        if $z0 == 0 goto label5;

        r2 = (org.apache.commons.math3.complex.Complex) r1;

        $z1 = r2.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 == 0 goto label2;

        $z4 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        return $z4;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = r2.<org.apache.commons.math3.complex.Complex: double real>;

        $z2 = staticinvoke <org.apache.commons.math3.util.MathUtils: boolean equals(double,double)>($d1, $d0);

        if $z2 == 0 goto label3;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = r2.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z3 = staticinvoke <org.apache.commons.math3.util.MathUtils: boolean equals(double,double)>($d3, $d2);

        if $z3 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;

     label5:
        return 0;
    }

    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, int)
    {
        org.apache.commons.math3.complex.Complex r0, r1;
        int i0;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        i0 := @parameter2: int;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d1, $d0, i0);

        if $z0 == 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d3, $d2, i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex)
    {
        org.apache.commons.math3.complex.Complex r0, r1;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        $z0 = staticinvoke <org.apache.commons.math3.complex.Complex: boolean equals(org.apache.commons.math3.complex.Complex,org.apache.commons.math3.complex.Complex,int)>(r0, r1, 1);

        return $z0;
    }

    public static boolean equals(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double)
    {
        org.apache.commons.math3.complex.Complex r0, r1;
        double d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        d0 := @parameter2: double;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d2, $d1, d0);

        if $z0 == 0 goto label1;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d4, $d3, d0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean equalsWithRelativeTolerance(org.apache.commons.math3.complex.Complex, org.apache.commons.math3.complex.Complex, double)
    {
        org.apache.commons.math3.complex.Complex r0, r1;
        double d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex;

        r1 := @parameter1: org.apache.commons.math3.complex.Complex;

        d0 := @parameter2: double;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsWithRelativeTolerance(double,double,double)>($d2, $d1, d0);

        if $z0 == 0 goto label1;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsWithRelativeTolerance(double,double,double)>($d4, $d3, d0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;
        double $d0, $d1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        return 7;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i1 = 17 * $i0;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $i2 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d1);

        $i3 = $i1 + $i2;

        $i4 = 37 * $i3;

        return $i4;
    }

    public double getImaginary()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        return $d0;
    }

    public double getReal()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        return $d0;
    }

    public boolean isNaN()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        return $z0;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math3.complex.Complex r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite>;

        return $z0;
    }

    public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 == 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z2 != 0 goto label3;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z3 != 0 goto label3;

        $d2 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z4 != 0 goto label3;

        $d3 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        if $z5 == 0 goto label4;

     label3:
        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return $r4;

     label4:
        $d5 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d4 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $d9 = $d5 * $d4;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d6 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d8 = $d7 * $d6;

        $d17 = $d9 - $d8;

        $d11 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d10 = r1.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d15 = $d11 * $d10;

        $d13 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d12 = r1.<org.apache.commons.math3.complex.Complex: double real>;

        $d14 = $d13 * $d12;

        $d16 = $d15 + $d14;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d17, $d16);

        return $r3;
    }

    public org.apache.commons.math3.complex.Complex multiply(int)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3;
        int i0;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r3 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r3;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 != 0 goto label2;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z2 == 0 goto label3;

     label2:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return $r1;

     label3:
        $d3 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d2 = (double) i0;

        $d7 = $d3 * $d2;

        $d5 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d4 = (double) i0;

        $d6 = $d5 * $d4;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d7, $d6);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex multiply(double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z2 != 0 goto label3;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z3 != 0 goto label3;

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z4 == 0 goto label4;

     label3:
        $r3 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        return $r3;

     label4:
        $d3 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d6 = $d3 * d0;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d5 = $d4 * d0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d6, $d5);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex negate()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d3 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = neg $d1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d3, $d2);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, r1, $r2, $r3;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = r1.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z1 == 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label2:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d2 = $d0 - $d1;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d5 = $d3 - $d4;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d2, $d5);

        return $r3;
    }

    public org.apache.commons.math3.complex.Complex subtract(double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        double d0, $d1, $d2, $d3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d3 = $d1 - d0;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d3, $d2);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex acos()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r9 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r9;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt1z()>();

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r6 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r7);

        return $r8;
    }

    public org.apache.commons.math3.complex.Complex asin()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r9 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r9;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt1z()>();

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r6 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r7);

        return $r8;
    }

    public org.apache.commons.math3.complex.Complex atan()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r11 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r11;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r1);

        $r3 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>(r0);

        $r5 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r7 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I>;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(2.0, 0.0);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r8);

        $r10 = virtualinvoke $r6.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r9);

        return $r10;
    }

    public org.apache.commons.math3.complex.Complex cos()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d2);

        $d5 = $d1 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d4);

        $d8 = neg $d6;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d7);

        $d10 = $d8 * $d9;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d5, $d10);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex cosh()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        $d5 = $d1 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d4);

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d7);

        $d9 = $d6 * $d8;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d5, $d9);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex exp()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        $d5 = d0 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d4);

        $d7 = d0 * $d6;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d5, $d7);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex log()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d3, $d2);

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d4);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex exp()>();

        return $r4;
    }

    public org.apache.commons.math3.complex.Complex pow(double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3;
        double d0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex log()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(double)>(d0);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex exp()>();

        return $r3;
    }

    public org.apache.commons.math3.complex.Complex sin()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d2);

        $d5 = $d1 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d4);

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d7);

        $d9 = $d6 * $d8;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d5, $d9);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex sinh()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r2;

     label1:
        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        $d5 = $d1 * $d3;

        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d4);

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d7);

        $d9 = $d6 * $d8;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d5, $d9);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex sqrt()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        boolean $z0;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label1;

        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r4;

     label1:
        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d18 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b2 = $d18 cmpl 0.0;

        if $b2 != 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, 0.0);

        return $r3;

     label2:
        $d2 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        $d5 = $d3 + $d4;

        $d6 = $d5 / 2.0;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b1 = $d7 cmpl 0.0;

        if $b1 < 0 goto label3;

        $d16 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d15 = 2.0 * d0;

        $d17 = $d16 / $d15;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d0, $d17);

        return $r2;

     label3:
        $d8 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $d10 = 2.0 * d0;

        $d12 = $d9 / $d10;

        $d11 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(1.0, $d11);

        $d14 = $d13 * d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d12, $d14);

        return $r1;
    }

    public org.apache.commons.math3.complex.Complex sqrt1z()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(1.0, 0.0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex sqrt()>();

        return $r4;
    }

    public org.apache.commons.math3.complex.Complex tan()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $d4 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b0 = $d4 cmpl 20.0;

        if $b0 <= 0 goto label3;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, 1.0);

        return $r4;

     label3:
        $d5 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $b1 = $d5 cmpg -20.0;

        if $b1 >= 0 goto label4;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(0.0, -1.0);

        return $r3;

     label4:
        $d6 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d0 = 2.0 * $d6;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d1 = 2.0 * $d7;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d0);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>(d1);

        d2 = $d8 + $d9;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d0);

        $d11 = $d10 / d2;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>(d1);

        $d13 = $d12 / d2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d11, $d13);

        return $r2;
    }

    public org.apache.commons.math3.complex.Complex tanh()
    {
        org.apache.commons.math3.complex.Complex r0, $r1, $r2, $r3, $r4;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 != 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label2:
        $d4 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b0 = $d4 cmpl 20.0;

        if $b0 <= 0 goto label3;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(1.0, 0.0);

        return $r4;

     label3:
        $d5 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $b1 = $d5 cmpg -20.0;

        if $b1 >= 0 goto label4;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(-1.0, 0.0);

        return $r3;

     label4:
        $d6 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        d0 = 2.0 * $d6;

        $d7 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        d1 = 2.0 * $d7;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>(d0);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        d2 = $d8 + $d9;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>(d0);

        $d11 = $d10 / d2;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        $d13 = $d12 / d2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d11, $d13);

        return $r2;
    }

    public double getArgument()
    {
        org.apache.commons.math3.complex.Complex r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d1);

        return $d2;
    }

    public java.util.List nthRoot(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.complex.Complex r0, $r3, $r4, $r5;
        int i0, i1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        java.util.ArrayList $r2;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.NotPositiveException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Integer $r8;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z0 = r0.<org.apache.commons.math3.complex.Complex: boolean isNaN>;

        if $z0 == 0 goto label2;

        $r5 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        return $r2;

     label2:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: boolean isInfinite()>();

        if $z1 == 0 goto label3;

        $r4 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r2;

     label3:
        $d5 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double abs()>();

        $d6 = (double) i0;

        $d7 = 1.0 / $d6;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d5, $d7);

        $d8 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: double getArgument()>();

        $d9 = (double) i0;

        d1 = $d8 / $d9;

        $d10 = (double) i0;

        d2 = 6.283185307179586 / $d10;

        d13 = d1;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d13);

        d3 = d0 * $d11;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d13);

        d4 = d0 * $d12;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>(d3, d4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        d13 = d13 + d2;

        i1 = i1 + 1;

        goto label4;

     label5:
        return $r2;
    }

    protected org.apache.commons.math3.complex.Complex createComplex(double, double)
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(d0, d1);

        return $r1;
    }

    public static org.apache.commons.math3.complex.Complex valueOf(double, double)
    {
        double d0, d1;
        boolean $z0, $z1;
        org.apache.commons.math3.complex.Complex $r0, $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

     label1:
        $r0 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r0;

     label2:
        $r1 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(d0, d1);

        return $r1;
    }

    public static org.apache.commons.math3.complex.Complex valueOf(double)
    {
        double d0;
        boolean $z0;
        org.apache.commons.math3.complex.Complex $r0, $r1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN>;

        return $r1;

     label1:
        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double)>(d0);

        return $r0;
    }

    protected final java.lang.Object readResolve()
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex createComplex(double,double)>($d1, $d0);

        return $r1;
    }

    public org.apache.commons.math3.complex.ComplexField getField()
    {
        org.apache.commons.math3.complex.Complex r0;
        org.apache.commons.math3.complex.ComplexField $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = staticinvoke <org.apache.commons.math3.complex.ComplexField: org.apache.commons.math3.complex.ComplexField getInstance()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.complex.Complex r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1;
        java.lang.String $r7;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $d0 = r0.<org.apache.commons.math3.complex.Complex: double real>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d1 = r0.<org.apache.commons.math3.complex.Complex: double imaginary>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.complex.Complex r0;
        org.apache.commons.math3.complex.ComplexField $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.ComplexField getField()>();

        return $r1;
    }

    public volatile java.lang.Object reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.complex.Complex r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex reciprocal()>();

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.complex.Complex r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.complex.Complex r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex multiply(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.complex.Complex r0, $r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex negate()>();

        return $r1;
    }

    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.complex.Complex r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.complex.Complex;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.complex.Complex) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.complex.Complex $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.math3.complex.Complex: long serialVersionUID> = -6195664516687396620L;

        $r0 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r0.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(0.0, 1.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex I> = $r0;

        $r1 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(#NaN, #NaN);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex NaN> = $r1;

        $r2 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r2.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(#Infinity, #Infinity);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex INF> = $r2;

        $r3 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r3.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(1.0, 0.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ONE> = $r3;

        $r4 = new org.apache.commons.math3.complex.Complex;

        specialinvoke $r4.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>(0.0, 0.0);

        <org.apache.commons.math3.complex.Complex: org.apache.commons.math3.complex.Complex ZERO> = $r4;

        return;
    }
}
