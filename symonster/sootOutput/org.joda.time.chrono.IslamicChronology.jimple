public final class org.joda.time.chrono.IslamicChronology extends org.joda.time.chrono.BasicChronology
{
    private static final long serialVersionUID;
    public static final int AH;
    private static final org.joda.time.DateTimeField ERA_FIELD;
    public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED;
    public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED;
    public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN;
    public static final org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB;
    private static final int MIN_YEAR;
    private static final int MAX_YEAR;
    private static final int MONTH_PAIR_LENGTH;
    private static final int LONG_MONTH_LENGTH;
    private static final int SHORT_MONTH_LENGTH;
    private static final long MILLIS_PER_MONTH_PAIR;
    private static final long MILLIS_PER_MONTH;
    private static final long MILLIS_PER_LONG_MONTH;
    private static final long MILLIS_PER_YEAR;
    private static final long MILLIS_PER_SHORT_YEAR;
    private static final long MILLIS_PER_LONG_YEAR;
    private static final long MILLIS_YEAR_1;
    private static final int CYCLE;
    private static final long MILLIS_PER_CYCLE;
    private static final java.util.concurrent.ConcurrentHashMap cCache;
    private static final org.joda.time.chrono.IslamicChronology INSTANCE_UTC;
    private final org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears;

    public static org.joda.time.chrono.IslamicChronology getInstanceUTC()
    {
        org.joda.time.chrono.IslamicChronology $r0;

        $r0 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.IslamicChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;
        org.joda.time.chrono.IslamicChronology $r2;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED>;

        $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r0, $r1);

        return $r2;
    }

    public static org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;
        org.joda.time.chrono.IslamicChronology $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED>;

        $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>(r0, $r1);

        return $r2;
    }

    public static org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.chrono.IslamicChronology$LeapYearPatternType)
    {
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType r0;
        java.util.concurrent.ConcurrentHashMap $r3, $r14;
        java.lang.Object $r4, $r15;
        byte $b0, $b1, $b2;
        org.joda.time.DateTimeZone $r6, $r7, r17;
        org.joda.time.chrono.IslamicChronology $r8, $r10, $r12, r20, r23;
        org.joda.time.chrono.ZonedChronology $r9;
        org.joda.time.DateTime $r11;
        org.joda.time.chrono.LimitChronology $r13;
        java.lang.Throwable $r16;
        org.joda.time.chrono.IslamicChronology[] r18, r19, r21;

        r17 := @parameter0: org.joda.time.DateTimeZone;

        r0 := @parameter1: org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        if r17 != null goto label01;

        r17 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label01:
        $r3 = <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (org.joda.time.chrono.IslamicChronology[]) $r4;

        if r18 != null goto label02;

        r18 = newarray (org.joda.time.chrono.IslamicChronology)[4];

        $r14 = <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r15 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r17, r18);

        r19 = (org.joda.time.chrono.IslamicChronology[]) $r15;

        if r19 == null goto label02;

        r18 = r19;

     label02:
        $b2 = r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        r20 = r18[$b2];

        if r20 != null goto label10;

        r21 = r18;

        entermonitor r18;

     label03:
        $b0 = r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        r20 = r18[$b0];

        if r20 != null goto label06;

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r17 != $r6 goto label04;

        $r10 = new org.joda.time.chrono.IslamicChronology;

        specialinvoke $r10.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>(null, null, r0);

        $r11 = new org.joda.time.DateTime;

        specialinvoke $r11.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r10);

        $r12 = new org.joda.time.chrono.IslamicChronology;

        $r13 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r10, $r11, null);

        specialinvoke $r12.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r13, null, r0);

        r20 = $r12;

        goto label05;

     label04:
        $r7 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        r23 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r7, r0);

        $r8 = new org.joda.time.chrono.IslamicChronology;

        $r9 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r23, r17);

        specialinvoke $r8.<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>($r9, null, r0);

        r20 = $r8;

     label05:
        $b1 = r0.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        r18[$b1] = r20;

     label06:
        exitmonitor r21;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        exitmonitor r21;

     label09:
        throw $r16;

     label10:
        return r20;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void <init>(org.joda.time.Chronology, java.lang.Object, org.joda.time.chrono.IslamicChronology$LeapYearPatternType)
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.Chronology r1;
        java.lang.Object r2;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType r3;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke r0.<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(r1, r2, 4);

        r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears> = r3;

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.IslamicChronology r0, $r3;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology getBase()>();

        if r1 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>($r2);

     label2:
        return $r3;
    }

    public org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 = r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears>;

        return $r1;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.IslamicChronology r0, $r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $r1 = <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC>;

        return $r1;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.IslamicChronology r0, $r2;
        org.joda.time.DateTimeZone $r1, r3;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.IslamicChronology r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r3, $r4;
        byte $b0, $b1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.chrono.IslamicChronology;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.chrono.IslamicChronology) r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $b0 = $r3.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        $r4 = virtualinvoke r2.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $b1 = $r4.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: byte index>;

        if $b0 != $b1 goto label2;

        $z1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        $i0 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: int hashCode()>();

        $i1 = $i0 * 13;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>();

        $i2 = virtualinvoke $r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    int getYear(long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long l0, l1, l2, $l3, $l4, l5, $l7, l8, $l10;
        boolean $z0, $z1;
        int i6;
        byte $b9;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        l0 := @parameter0: long;

        l1 = l0 - -42521587200000L;

        l2 = l1 / 918518400000L;

        l5 = l1 % 918518400000L;

        $l3 = l2 * 30L;

        $l4 = $l3 + 1L;

        i6 = (int) $l4;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i6);

        if $z0 == 0 goto label1;

        $l7 = 30672000000L;

        goto label2;

     label1:
        $l7 = 30585600000L;

     label2:
        l8 = $l7;

     label3:
        $b9 = l5 cmp l8;

        if $b9 < 0 goto label6;

        l5 = l5 - l8;

        i6 = i6 + 1;

        $z1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i6);

        if $z1 == 0 goto label4;

        $l10 = 30672000000L;

        goto label5;

     label4:
        $l10 = 30585600000L;

     label5:
        l8 = $l10;

        goto label3;

     label6:
        return i6;
    }

    long setYear(long, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int i0, i1, i2, i4;
        boolean $z0;
        long l3, l5, $l6, l7;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        l3 := @parameter0: long;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>(l3);

        i4 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getDayOfYear(long,int)>(l3, i1);

        i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getMillisOfDay(long)>(l3);

        if i4 <= 354 goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i0);

        if $z0 != 0 goto label1;

        i4 = i4 + -1;

     label1:
        l5 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMonthDayMillis(int,int,int)>(i0, 1, i4);

        $l6 = (long) i2;

        l7 = l5 + $l6;

        return l7;
    }

    long getYearDifference(long, long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long l0, l1, l4, l5, $l6, $l7, $l9;
        int i2, i3, i10;
        byte $b8;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>(l0);

        i3 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getYear(long)>(l1);

        $l6 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>(i2);

        l4 = l0 - $l6;

        $l7 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>(i3);

        l5 = l1 - $l7;

        i10 = i2 - i3;

        $b8 = l4 cmp l5;

        if $b8 >= 0 goto label1;

        i10 = i10 + -1;

     label1:
        $l9 = (long) i10;

        return $l9;
    }

    long getTotalMillisByYearMonth(int, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int i0, $i1, i7, i8, i9, i10;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        i8 = i7 + -1;

        $i1 = i8 % 2;

        if $i1 != 1 goto label1;

        i9 = i8 / 2;

        $l4 = (long) i9;

        $l5 = $l4 * 5097600000L;

        $l6 = $l5 + 2592000000L;

        return $l6;

     label1:
        i10 = i8 / 2;

        $l2 = (long) i10;

        $l3 = $l2 * 5097600000L;

        return $l3;
    }

    int getDayOfMonth(long)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        l0 := @parameter0: long;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: int getDayOfYear(long)>(l0);

        i1 = $i2 - 1;

        if i1 != 354 goto label1;

        return 30;

     label1:
        $i3 = i1 % 59;

        $i4 = $i3 % 30;

        $i5 = $i4 + 1;

        return $i5;
    }

    boolean isLeapYear(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int i0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears>;

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>(i0);

        return $z0;
    }

    int getDaysInYearMax()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 355;
    }

    int getDaysInYear(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int i0;
        boolean $z0;
        short $s1;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i0);

        if $z0 == 0 goto label1;

        $s1 = 355;

        goto label2;

     label1:
        $s1 = 354;

     label2:
        return $s1;
    }

    int getDaysInYearMonth(int, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int i0, $i1, i2, i3;
        boolean $z0;
        byte $b4;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i2 != 12 goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i0);

        if $z0 == 0 goto label1;

        return 30;

     label1:
        i3 = i2 + -1;

        $i1 = i3 % 2;

        if $i1 != 0 goto label2;

        $b4 = 30;

        goto label3;

     label2:
        $b4 = 29;

     label3:
        return $b4;
    }

    int getDaysInMonthMax()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 30;
    }

    int getDaysInMonthMax(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        int $i0, i1, i2;
        byte $b3;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i1 := @parameter0: int;

        if i1 != 12 goto label1;

        return 30;

     label1:
        i2 = i1 + -1;

        $i0 = i2 % 2;

        if $i0 != 0 goto label2;

        $b3 = 30;

        goto label3;

     label2:
        $b3 = 29;

     label3:
        return $b3;
    }

    int getMonthOfYear(long, int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long l0, $l3, $l4, $l5;
        int i1, i2, $i6, $i7, $i8;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l3 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: long getYearMillis(int)>(i1);

        $l4 = l0 - $l3;

        $l5 = $l4 / 86400000L;

        i2 = (int) $l5;

        if i2 != 354 goto label1;

        return 12;

     label1:
        $i6 = i2 * 2;

        $i7 = $i6 / 59;

        $i8 = $i7 + 1;

        return $i8;
    }

    long getAverageMillisPerYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 30617280288L;
    }

    long getAverageMillisPerYearDividedByTwo()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 15308640144L;
    }

    long getAverageMillisPerMonth()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 2551440384L;
    }

    long calculateFirstDayOfYearMillis(int)
    {
        org.joda.time.chrono.IslamicChronology r0;
        long l0, $l3, $l5, l8, $l10;
        int i1, $i2, $i4, i6, i7, i9;
        boolean $z0;
        java.lang.ArithmeticException $r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r7, $r14;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        i6 := @parameter0: int;

        if i6 <= 292271022 goto label1;

        $r8 = new java.lang.ArithmeticException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Year is too large: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(292271022);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        if i6 >= -292269337 goto label2;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Year is too small: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-292269337);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        i7 = i6 + -1;

        $i2 = i7 / 30;

        l0 = (long) $i2;

        $l3 = l0 * 918518400000L;

        l8 = -42521587200000L + $l3;

        $i4 = i7 % 30;

        i1 = $i4 + 1;

        i9 = 1;

     label3:
        if i9 >= i1 goto label6;

        $l5 = l8;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>(i9);

        if $z0 == 0 goto label4;

        $l10 = 30672000000L;

        goto label5;

     label4:
        $l10 = 30585600000L;

     label5:
        l8 = $l5 + $l10;

        i9 = i9 + 1;

        goto label3;

     label6:
        return l8;
    }

    int getMinYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 1;
    }

    int getMaxYear()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 292271022;
    }

    long getApproxMillisAtEpochDividedByTwo()
    {
        org.joda.time.chrono.IslamicChronology r0;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        return 21260793600000L;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.IslamicChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3, $r5;
        org.joda.time.chrono.BasicMonthOfYearDateTimeField $r4;
        org.joda.time.DurationField $r6;

        r0 := @this: org.joda.time.chrono.IslamicChronology;

        r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology getBase()>();

        if $r2 != null goto label1;

        specialinvoke r0.<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1);

        $r3 = <org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeField ERA_FIELD>;

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r3;

        $r4 = new org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        specialinvoke $r4.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>(r0, 12);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r4;

        $r5 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r6;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.joda.time.chrono.BasicSingleEraDateTimeField $r0;
        org.joda.time.chrono.IslamicChronology$LeapYearPatternType $r1, $r2, $r3, $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        org.joda.time.DateTimeZone $r6;
        org.joda.time.chrono.IslamicChronology $r7;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_CYCLE> = 918518400000L;

        <org.joda.time.chrono.IslamicChronology: int CYCLE> = 30;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_YEAR_1> = -42521587200000L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_LONG_YEAR> = 30672000000L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_SHORT_YEAR> = 30585600000L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_YEAR> = 30617280288L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_LONG_MONTH> = 2592000000L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_MONTH> = 2551440384L;

        <org.joda.time.chrono.IslamicChronology: long MILLIS_PER_MONTH_PAIR> = 5097600000L;

        <org.joda.time.chrono.IslamicChronology: int SHORT_MONTH_LENGTH> = 29;

        <org.joda.time.chrono.IslamicChronology: int LONG_MONTH_LENGTH> = 30;

        <org.joda.time.chrono.IslamicChronology: int MONTH_PAIR_LENGTH> = 59;

        <org.joda.time.chrono.IslamicChronology: int MAX_YEAR> = 292271022;

        <org.joda.time.chrono.IslamicChronology: int MIN_YEAR> = -292269337;

        <org.joda.time.chrono.IslamicChronology: int AH> = 1;

        <org.joda.time.chrono.IslamicChronology: long serialVersionUID> = -3663823829888L;

        $r0 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r0.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("AH");

        <org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeField ERA_FIELD> = $r0;

        $r1 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r1.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(0, 623158436);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED> = $r1;

        $r2 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r2.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(1, 623191204);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED> = $r2;

        $r3 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r3.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(2, 690562340);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN> = $r3;

        $r4 = new org.joda.time.chrono.IslamicChronology$LeapYearPatternType;

        specialinvoke $r4.<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>(3, 153692453);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.IslamicChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r5;

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r7 = staticinvoke <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>($r6);

        <org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology INSTANCE_UTC> = $r7;

        return;
    }
}
