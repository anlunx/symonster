public class org.apache.commons.math3.util.ResizableDoubleArray extends java.lang.Object implements org.apache.commons.math3.util.DoubleArray, java.io.Serializable
{
    public static final int ADDITIVE_MODE;
    public static final int MULTIPLICATIVE_MODE;
    private static final long serialVersionUID;
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final double DEFAULT_EXPANSION_FACTOR;
    private static final double DEFAULT_CONTRACTION_DELTA;
    private double contractionCriterion;
    private double expansionFactor;
    private org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode;
    private double[] internalArray;
    private int numElements;
    private int startIndex;

    public void <init>()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int)>(16);

        return;
    }

    public void <init>(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double)>(i0, 2.0);

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: double[];

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>(16, 2.0, 2.5, $r2, r1);

        return;
    }

    public void <init>(int, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;
        float f0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $d0 = (double) f0;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double)>(i0, $d0);

        return;
    }

    public void <init>(int, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $d1 = 0.5 + d0;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double)>(i0, d0, $d1);

        return;
    }

    public void <init>(int, float, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;
        float f0, f1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double)>(i0, $d1, $d0);

        return;
    }

    public void <init>(int, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;
        double d0, d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>(i0, d0, d1, $r1, null);

        return;
    }

    public void <init>(int, float, float, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, i1;
        float f0, f1;
        double $d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i1 := @parameter3: int;

        $d1 = (double) f0;

        $d0 = (double) f1;

        if i1 != 1 goto label1;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode ADDITIVE>;

        goto label2;

     label1:
        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

     label2:
        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int,double,double,org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode,double[])>(i0, $d1, $d0, $r2, null);

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(int)>(i1);

        return;
    }

    public transient void <init>(int, double, double, org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode, double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, $i1;
        double d0, d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode r1, $r3;
        double[] r2, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 := @parameter3: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode;

        r2 := @parameter4: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = 2.5;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = 2.0;

        $r3 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r3;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        if i0 > 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_CAPACITY_NOT_POSITIVE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>(d1, d0);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = d0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = d1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = r1;

        $r4 = newarray (double)[i0];

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = $r4;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        if r2 == null goto label2;

        $i1 = lengthof r2;

        if $i1 <= 1 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void addElements(double[])>(r2);

     label2:
        return;
    }

    public void <init>(org.apache.commons.math3.util.ResizableDoubleArray) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, r1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = 2.5;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = 2.0;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r2;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.ResizableDoubleArray: void copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)>(r1, r0);

        return;
    }

    public synchronized void addElement(double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double d0;
        double[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i3 = lengthof $r1;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i2 = $i1 + $i0;

        if $i3 > $i2 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expand()>();

     label1:
        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i5;

        $i7 = $i6 + $i4;

        $r2[$i7] = d0;

        return;
    }

    public synchronized void addElements(double[])
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: double[];

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        $i3 = $i2 + 1;

        r2 = newarray (double)[$i3];

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r2, 0, $i4);

        $i7 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i6 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i7, $i6);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r2;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        $i9 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i8 = lengthof r1;

        $i10 = $i9 + $i8;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i10;

        return;
    }

    public synchronized double addElementRolling(double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double d0, d1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double[] $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        d1 = $r1[$i0];

        $i3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i2 = $i1 + 1;

        $i5 = $i3 + $i2;

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i4 = lengthof $r2;

        if $i5 <= $i4 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expand()>();

     label1:
        $i6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i7;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i10 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i8 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i9 = $i8 - 1;

        $i11 = $i10 + $i9;

        $r3[$i11] = d0;

        $z0 = specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: boolean shouldContract()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void contract()>();

     label2:
        return d1;
    }

    public synchronized double substituteMostRecentElement(double) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double d0, d1;
        int i0, $i1, $i2, $i3, $i4;
        double[] $r1, $r2;
        org.apache.commons.math3.exception.MathIllegalStateException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        d0 := @parameter0: double;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i1 >= 1 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label1:
        $i4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i3 = $i2 - 1;

        i0 = $i4 + $i3;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        d1 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r2[i0] = d0;

        return d1;
    }

    protected void checkContractExpand(float, float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float f0, f1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>($d1, $d0);

        return;
    }

    protected void checkContractExpand(double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double d0, d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1, $r8, $r15;
        java.lang.Double $r2, $r7, $r9, $r14, $r16, $r21, $r22;
        java.lang.Integer $r3, $r10, $r17;
        org.apache.commons.math3.exception.util.ExceptionContext $r4, $r11, $r18;
        java.lang.Object[] $r5, $r12, $r19;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6, $r13, $r20;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label1;

        $r15 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r15.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r16, $r17, 1);

        $r18 = virtualinvoke $r15.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r20 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR>;

        $r19 = newarray (java.lang.Object)[2];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r19[1] = $r22;

        virtualinvoke $r18.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r15;

     label1:
        $b1 = d0 cmpg 1.0;

        if $b1 > 0 goto label2;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r9, $r10, 0);

        $r11 = virtualinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONTRACTION_CRITERIA_SMALLER_THAN_ONE>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12[0] = $r14;

        virtualinvoke $r11.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r8;

     label2:
        $b2 = d1 cmpg 1.0;

        if $b2 > 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPANSION_FACTOR_SMALLER_THAN_ONE>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5[0] = $r7;

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r1;

     label3:
        return;
    }

    public synchronized void clear()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = 0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        return;
    }

    public synchronized void contract()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i1 = $i0 + 1;

        r1 = newarray (double)[$i1];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, r1, 0, $i2);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = 0;

        return;
    }

    public synchronized void discardFrontElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void discardExtremeElements(int,boolean)>(i0, 1);

        return;
    }

    public synchronized void discardMostRecentElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void discardExtremeElements(int,boolean)>(i0, 0);

        return;
    }

    private synchronized void discardExtremeElements(int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1, $r5;
        java.lang.Object[] $r2, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3, $r7;
        java.lang.Integer $r4, $r8, $r9;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if i0 <= $i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        $i6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label1:
        if i0 >= 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i3 = $i2 - i0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i3;

        if z0 == 0 goto label3;

        $i4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i5 = $i4 + i0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i5;

     label3:
        $z1 = specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: boolean shouldContract()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void contract()>();

     label4:
        return;
    }

    protected synchronized void expand()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r4, $r5, $r6, $r7;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r2, $r3;
        int $i0, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        if $r3 != $r2 goto label1;

        $r7 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i5 = lengthof $r7;

        $d2 = (double) $i5;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $d3 = $d2 * $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d3);

        i6 = (int) $d4;

        goto label2;

     label1:
        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        $l3 = $l1 + $l2;

        i6 = (int) $l3;

     label2:
        r1 = newarray (double)[i6];

        $r6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i4 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 0, $i4);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

        return;
    }

    private synchronized void expandTo(int)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, $i1;
        double[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        r1 = newarray (double)[i0];

        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i1);

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = r1;

        return;
    }

    public float getContractionCriteria()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: double getContractionCriterion()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public double getContractionCriterion()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        return $d0;
    }

    public synchronized double getElement(int)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, $i1, $i2, $i3;
        java.lang.ArrayIndexOutOfBoundsException $r1, $r3;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r3;

     label1:
        if i0 < 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i3 = $i2 + i0;

        $d0 = $r2[$i3];

        return $d0;

     label2:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r1;
    }

    public synchronized double[] getElements()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        r1 = newarray (double)[$i0];

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, r1, 0, $i1);

        return r1;
    }

    public float getExpansionFactor()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $f0 = (float) $d0;

        return $f0;
    }

    public int getExpansionMode()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1;
        int[] $r2;
        int $i0, $i1;
        org.apache.commons.math3.exception.MathInternalError $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r2 = <org.apache.commons.math3.util.ResizableDoubleArray$1: int[] $SwitchMap$org$apache$commons$math3$util$ResizableDoubleArray$ExpansionMode>;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        $r3 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r3.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r3;
    }

    synchronized int getInternalLength()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getCapacity()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public synchronized int getNumElements()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        return $i0;
    }

    public synchronized double[] getInternalValues()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        return $r1;
    }

    protected double[] getArrayRef()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        return $r1;
    }

    protected int getStartIndex()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        return $i0;
    }

    public void setContractionCriteria(float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float f0, $f1;
        double $d0;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: float getExpansionFactor()>();

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(float,float)>(f0, $f1);

        entermonitor r0;

     label1:
        $d0 = (double) f0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = $d0;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public double compute(org.apache.commons.math3.util.MathArrays$Function)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.MathArrays$Function r1;
        double[] r2;
        int i0, i1;
        double $d0;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: org.apache.commons.math3.util.MathArrays$Function;

        entermonitor r0;

     label1:
        r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

     label5:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.util.MathArrays$Function: double evaluate(double[],int,int)>(r2, i0, i1);

        return $d0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public synchronized void setElement(int, double)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double d0;
        double[] $r1, $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r3;

     label1:
        $i2 = i0 + 1;

        $i1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i2 <= $i1 goto label2;

        $i11 = i0 + 1;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i11;

     label2:
        $i3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i5 = $i3 + i0;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i4 = lengthof $r1;

        if $i5 < $i4 goto label3;

        $i9 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i8 = i0 + 1;

        $i10 = $i9 + $i8;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expandTo(int)>($i10);

     label3:
        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i6 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i7 = $i6 + i0;

        $r2[$i7] = d0;

        return;
    }

    public void setExpansionFactor(float) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        float f0;
        double $d0, $d1, $d2;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        f0 := @parameter0: float;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: double getContractionCriterion()>();

        $d1 = (double) f0;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void checkContractExpand(double,double)>($d0, $d1);

        entermonitor r0;

     label1:
        $d2 = (double) f0;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = $d2;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setExpansionMode(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r4, $r5;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10, $r11;
        java.lang.Throwable $r12;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNSUPPORTED_EXPANSION_MODE>;

        $r7 = newarray (java.lang.Object)[5];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7[1] = $r10;

        $r7[2] = "MULTIPLICATIVE_MODE";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7[3] = $r11;

        $r7[4] = "ADDITIVE_MODE";

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label1:
        entermonitor r0;

     label2:
        if i0 != 0 goto label3;

        $r5 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)>($r5);

        goto label4;

     label3:
        if i0 != 1 goto label4;

        $r4 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode ADDITIVE>;

        virtualinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)>($r4);

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r12;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode r1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode;

        r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = r1;

        return;
    }

    protected void setInitialCapacity(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        return;
    }

    public synchronized void setNumElements(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int i0, i1, $i2, $i3;
        double[] $r1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX_NOT_POSITIVE>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        i1 = $i2 + i0;

        $r1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        specialinvoke r0.<org.apache.commons.math3.util.ResizableDoubleArray: void expandTo(int)>(i1);

     label2:
        r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = i0;

        return;
    }

    private synchronized boolean shouldContract()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r1, $r2;
        double[] $r3, $r4;
        int $i0, $i1, $i2, $i4, $i5;
        double $d0, $d1, $d2, $d3;
        byte $b3, $b6;
        float $f0, $f1, $f2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r1 = <org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode MULTIPLICATIVE>;

        if $r2 != $r1 goto label3;

        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i4 = lengthof $r4;

        $f1 = (float) $i4;

        $i5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $f0 = (float) $i5;

        $f2 = $f1 / $f0;

        $d3 = (double) $f2;

        $d2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $b6 = $d3 cmpl $d2;

        if $b6 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = lengthof $r3;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i2 = $i1 - $i0;

        $d1 = (double) $i2;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $b3 = $d1 cmpl $d0;

        if $b3 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public synchronized int start()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        return $i0;
    }

    public static void copy(org.apache.commons.math3.util.ResizableDoubleArray, org.apache.commons.math3.util.ResizableDoubleArray) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, r1;
        double $d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r8;
        double[] $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r14, $r15;

        r0 := @parameter0: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter1: org.apache.commons.math3.util.ResizableDoubleArray;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        entermonitor r0;

     label01:
        entermonitor r1;

     label02:
        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion> = $d0;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor> = $d1;

        $r8 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode> = $r8;

        $r9 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i0 = lengthof $r9;

        $r10 = newarray (double)[$i0];

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray> = $r10;

        $r13 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r12 = r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r11 = r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i1 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, 0, $i1);

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements> = $i2;

        $i3 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        r1.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex> = $i3;

        exitmonitor r1;

     label03:
        goto label06;

     label04:
        $r15 := @caughtexception;

        exitmonitor r1;

     label05:
        throw $r15;

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r14 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r14;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public synchronized org.apache.commons.math3.util.ResizableDoubleArray copy()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, $r2;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.ResizableDoubleArray: void copy(org.apache.commons.math3.util.ResizableDoubleArray,org.apache.commons.math3.util.ResizableDoubleArray)>(r0, $r2);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0, r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z3, $z5, $z7, $z9, $z11;
        double[] $r9, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r11, $r12;
        double $d0, $d1, $d2, $d3;
        byte $b4, $b5;
        java.lang.Throwable $r13, $r14;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.apache.commons.math3.util.ResizableDoubleArray;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        entermonitor r0;

     label03:
        entermonitor r1;

     label04:
        r4 = (org.apache.commons.math3.util.ResizableDoubleArray) r1;

        $d3 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $d2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $b5 = $d3 cmpl $d2;

        if $b5 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        if $z3 == 0 goto label07;

        $d1 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $b4 = $d1 cmpl $d0;

        if $b4 != 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        if $z5 == 0 goto label09;

        $r12 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $r11 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        if $r12 != $r11 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        if $z7 == 0 goto label11;

        $i3 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        $i2 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        if $i3 != $i2 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        if $z9 == 0 goto label13;

        $i1 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        $i0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        if $i1 != $i0 goto label13;

        $z11 = 1;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        if $z11 != 0 goto label17;

        exitmonitor r1;

     label15:
        exitmonitor r0;

     label16:
        return 0;

     label17:
        $r10 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $r9 = r4.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r10, $r9);

        exitmonitor r1;

     label18:
        exitmonitor r0;

     label19:
        return $z1;

     label20:
        $r14 := @caughtexception;

        exitmonitor r1;

     label21:
        throw $r14;

     label22:
        $r13 := @caughtexception;

        exitmonitor r0;

     label23:
        throw $r13;

        catch java.lang.Throwable from label04 to label15 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label03 to label16 with label22;
        catch java.lang.Throwable from label17 to label19 with label22;
        catch java.lang.Throwable from label20 to label23 with label22;
    }

    public synchronized int hashCode()
    {
        org.apache.commons.math3.util.ResizableDoubleArray r0;
        int[] r1;
        double $d0, $d1;
        java.lang.Double $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode $r4;
        double[] $r5;

        r0 := @this: org.apache.commons.math3.util.ResizableDoubleArray;

        r1 = newarray (int)[6];

        $d0 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double expansionFactor>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r2.<java.lang.Double: int hashCode()>();

        r1[0] = $i0;

        $d1 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double contractionCriterion>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i1 = virtualinvoke $r3.<java.lang.Double: int hashCode()>();

        r1[1] = $i1;

        $r4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode>;

        $i2 = virtualinvoke $r4.<org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode: int hashCode()>();

        r1[2] = $i2;

        $r5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: double[] internalArray>;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r5);

        r1[3] = $i3;

        $i4 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int numElements>;

        r1[4] = $i4;

        $i5 = r0.<org.apache.commons.math3.util.ResizableDoubleArray: int startIndex>;

        r1[5] = $i5;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(int[])>(r1);

        return $i6;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.util.ResizableDoubleArray: double DEFAULT_CONTRACTION_DELTA> = 0.5;

        <org.apache.commons.math3.util.ResizableDoubleArray: double DEFAULT_EXPANSION_FACTOR> = 2.0;

        <org.apache.commons.math3.util.ResizableDoubleArray: int DEFAULT_INITIAL_CAPACITY> = 16;

        <org.apache.commons.math3.util.ResizableDoubleArray: long serialVersionUID> = -3485529955529426875L;

        <org.apache.commons.math3.util.ResizableDoubleArray: int MULTIPLICATIVE_MODE> = 0;

        <org.apache.commons.math3.util.ResizableDoubleArray: int ADDITIVE_MODE> = 1;

        return;
    }
}
