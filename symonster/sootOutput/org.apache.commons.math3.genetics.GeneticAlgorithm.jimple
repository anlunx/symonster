public class org.apache.commons.math3.genetics.GeneticAlgorithm extends java.lang.Object
{
    private static org.apache.commons.math3.random.RandomGenerator randomGenerator;
    private final org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy;
    private final double crossoverRate;
    private final org.apache.commons.math3.genetics.MutationPolicy mutationPolicy;
    private final double mutationRate;
    private final org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy;
    private int generationsEvolved;

    public void <init>(org.apache.commons.math3.genetics.CrossoverPolicy, double, org.apache.commons.math3.genetics.MutationPolicy, double, org.apache.commons.math3.genetics.SelectionPolicy) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.CrossoverPolicy r1;
        double d0, d1;
        org.apache.commons.math3.genetics.MutationPolicy r2;
        org.apache.commons.math3.genetics.SelectionPolicy r3;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r4, $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r10;
        java.lang.Double $r6, $r11;
        java.lang.Integer $r7, $r8, $r12, $r13;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 := @parameter0: org.apache.commons.math3.genetics.CrossoverPolicy;

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.commons.math3.genetics.MutationPolicy;

        d1 := @parameter3: double;

        r3 := @parameter4: org.apache.commons.math3.genetics.SelectionPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = 0;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CROSSOVER_RATE>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7, $r8);

        throw $r4;

     label2:
        $b2 = d1 cmpg 0.0;

        if $b2 < 0 goto label3;

        $b3 = d1 cmpl 1.0;

        if $b3 <= 0 goto label4;

     label3:
        $r9 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MUTATION_RATE>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r9.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r10, $r11, $r12, $r13);

        throw $r9;

     label4:
        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy> = r1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double crossoverRate> = d0;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy mutationPolicy> = r2;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double mutationRate> = d1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy> = r3;

        return;
    }

    public static synchronized void setRandomGenerator(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.RandomGenerator r0;

        r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator> = r0;

        return;
    }

    public static synchronized org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.random.RandomGenerator $r0;

        $r0 = <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator>;

        return $r0;
    }

    public org.apache.commons.math3.genetics.Population evolve(org.apache.commons.math3.genetics.Population, org.apache.commons.math3.genetics.StoppingCondition)
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.Population r1, r3;
        org.apache.commons.math3.genetics.StoppingCondition r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        r2 := @parameter1: org.apache.commons.math3.genetics.StoppingCondition;

        r3 = r1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = 0;

     label1:
        $z0 = interfaceinvoke r2.<org.apache.commons.math3.genetics.StoppingCondition: boolean isSatisfied(org.apache.commons.math3.genetics.Population)>(r3);

        if $z0 != 0 goto label2;

        r3 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population)>(r3);

        $i0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved> = $i1;

        goto label1;

     label2:
        return r3;
    }

    public org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population)
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.Population r1, r2;
        org.apache.commons.math3.random.RandomGenerator r3;
        int $i0, $i1, $i4, $i5;
        org.apache.commons.math3.genetics.SelectionPolicy $r4;
        double $d0, $d1, $d2, $d3;
        byte $b2, $b3;
        org.apache.commons.math3.genetics.Chromosome $r5, $r6, $r9, $r10, $r12, $r13, $r15, $r16;
        org.apache.commons.math3.genetics.ChromosomePair $r7, r17;
        org.apache.commons.math3.genetics.MutationPolicy $r8, $r11;
        org.apache.commons.math3.genetics.CrossoverPolicy $r14;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        r2 = interfaceinvoke r1.<org.apache.commons.math3.genetics.Population: org.apache.commons.math3.genetics.Population nextGeneration()>();

        r3 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

     label1:
        $i0 = interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: int getPopulationSize()>();

        $i1 = interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: int getPopulationLimit()>();

        if $i0 >= $i1 goto label5;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy getSelectionPolicy()>();

        r17 = interfaceinvoke $r4.<org.apache.commons.math3.genetics.SelectionPolicy: org.apache.commons.math3.genetics.ChromosomePair select(org.apache.commons.math3.genetics.Population)>(r1);

        $d0 = interfaceinvoke r3.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double getCrossoverRate()>();

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label2;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy getCrossoverPolicy()>();

        $r15 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        $r16 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        r17 = interfaceinvoke $r14.<org.apache.commons.math3.genetics.CrossoverPolicy: org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r15, $r16);

     label2:
        $d2 = interfaceinvoke r3.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double getMutationRate()>();

        $b3 = $d2 cmpg $d3;

        if $b3 >= 0 goto label3;

        $r7 = new org.apache.commons.math3.genetics.ChromosomePair;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()>();

        $r9 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        $r10 = interfaceinvoke $r8.<org.apache.commons.math3.genetics.MutationPolicy: org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome)>($r9);

        $r11 = virtualinvoke r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()>();

        $r12 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        $r13 = interfaceinvoke $r11.<org.apache.commons.math3.genetics.MutationPolicy: org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome)>($r12);

        specialinvoke $r7.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r10, $r13);

        r17 = $r7;

     label3:
        $r5 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getFirst()>();

        interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: void addChromosome(org.apache.commons.math3.genetics.Chromosome)>($r5);

        $i4 = interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: int getPopulationSize()>();

        $i5 = interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: int getPopulationLimit()>();

        if $i4 >= $i5 goto label4;

        $r6 = virtualinvoke r17.<org.apache.commons.math3.genetics.ChromosomePair: org.apache.commons.math3.genetics.Chromosome getSecond()>();

        interfaceinvoke r2.<org.apache.commons.math3.genetics.Population: void addChromosome(org.apache.commons.math3.genetics.Chromosome)>($r6);

     label4:
        goto label1;

     label5:
        return r2;
    }

    public org.apache.commons.math3.genetics.CrossoverPolicy getCrossoverPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.CrossoverPolicy $r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy>;

        return $r1;
    }

    public double getCrossoverRate()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $d0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double crossoverRate>;

        return $d0;
    }

    public org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.MutationPolicy $r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.MutationPolicy mutationPolicy>;

        return $r1;
    }

    public double getMutationRate()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $d0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: double mutationRate>;

        return $d0;
    }

    public org.apache.commons.math3.genetics.SelectionPolicy getSelectionPolicy()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        org.apache.commons.math3.genetics.SelectionPolicy $r1;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $r1 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy>;

        return $r1;
    }

    public int getGenerationsEvolved()
    {
        org.apache.commons.math3.genetics.GeneticAlgorithm r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.GeneticAlgorithm;

        $i0 = r0.<org.apache.commons.math3.genetics.GeneticAlgorithm: int generationsEvolved>;

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.random.JDKRandomGenerator $r0;

        $r0 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r0.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>();

        <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator randomGenerator> = $r0;

        return;
    }
}
