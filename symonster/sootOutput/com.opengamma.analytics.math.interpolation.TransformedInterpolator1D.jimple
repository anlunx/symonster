public class com.opengamma.analytics.math.interpolation.TransformedInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private final com.opengamma.analytics.math.minimization.ParameterLimitsTransform _transform;
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _base;

    public void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D, com.opengamma.analytics.math.minimization.ParameterLimitsTransform)
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter1: com.opengamma.analytics.math.minimization.ParameterLimitsTransform;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null baseInterpolator");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "null transform");

        r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base> = r1;

        r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.minimization.ParameterLimitsTransform _transform> = r2;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5, $r6;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r3;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r4;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r4 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.minimization.ParameterLimitsTransform _transform>;

        $r3 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $r5 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d1 = interfaceinvoke $r4.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double inverseTransform(double)>($d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r6;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r3, $r6;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r4;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r4 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.minimization.ParameterLimitsTransform _transform>;

        $r3 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $r5 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d1 = interfaceinvoke $r4.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double inverseTransformGradient(double)>($d0);

        $r6 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $d2 = virtualinvoke $r6.<com.opengamma.analytics.math.interpolation.Interpolator1D: double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        $d3 = $d1 * $d2;

        return $d3;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5;
        double d0, d1, $d2, $d3;
        double[] r3;
        int i0, i1;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r4, $r7;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r6;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r4 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r6 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.minimization.ParameterLimitsTransform _transform>;

        d1 = interfaceinvoke $r6.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double inverseTransformGradient(double)>(d0);

        $r7 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d2 = r3[i1];

        $d3 = $d2 * d1;

        r3[i1] = $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[],double[])>(r1, r2);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: com.opengamma.analytics.math.interpolation.Interpolator1D _base>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[],double[])>(r1, r2);

        return $r4;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.TransformedInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.TransformedInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.TransformedInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
