public class org.apache.commons.math3.ml.clustering.DBSCANClusterer extends org.apache.commons.math3.ml.clustering.Clusterer
{
    private final double eps;
    private final int minPts;

    public void <init>(double, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        double d0;
        int i0;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: void <init>(double,int,org.apache.commons.math3.ml.distance.DistanceMeasure)>(d0, i0, $r1);

        return;
    }

    public void <init>(double, int, org.apache.commons.math3.ml.distance.DistanceMeasure) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        double d0;
        int i0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r2, $r4;
        java.lang.Integer $r3;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.Clusterer: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>(r1);

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label1:
        if i0 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: double eps> = d0;

        r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: int minPts> = i0;

        return;
    }

    public double getEps()
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        $d0 = r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: double eps>;

        return $d0;
    }

    public int getMinPts()
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: int minPts>;

        return $i0;
    }

    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        java.util.Collection r1;
        java.util.Iterator r4;
        org.apache.commons.math3.ml.clustering.Clusterable r5;
        java.util.List r6;
        java.util.ArrayList $r8;
        java.util.HashMap $r9;
        java.lang.Object $r10, $r11;
        int $i0, $i1;
        org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus $r12;
        org.apache.commons.math3.ml.clustering.Cluster $r14, $r15;
        boolean $z1;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r10;

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        if $r11 == null goto label2;

        goto label1;

     label2:
        r6 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: java.util.List getNeighbors(org.apache.commons.math3.ml.clustering.Clusterable,java.util.Collection)>(r5, r1);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: int minPts>;

        if $i0 < $i1 goto label3;

        $r14 = new org.apache.commons.math3.ml.clustering.Cluster;

        specialinvoke $r14.<org.apache.commons.math3.ml.clustering.Cluster: void <init>()>();

        $r15 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: org.apache.commons.math3.ml.clustering.Cluster expandCluster(org.apache.commons.math3.ml.clustering.Cluster,org.apache.commons.math3.ml.clustering.Clusterable,java.util.List,java.util.Collection,java.util.Map)>($r14, r5, r6, r1, $r9);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label4;

     label3:
        $r12 = <org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus NOISE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r12);

     label4:
        goto label1;

     label5:
        return $r8;
    }

    private org.apache.commons.math3.ml.clustering.Cluster expandCluster(org.apache.commons.math3.ml.clustering.Cluster, org.apache.commons.math3.ml.clustering.Clusterable, java.util.List, java.util.Collection, java.util.Map)
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        org.apache.commons.math3.ml.clustering.Cluster r1;
        org.apache.commons.math3.ml.clustering.Clusterable r2, r6;
        java.util.List r3, r8, r16;
        java.util.Collection r4;
        java.util.Map r5;
        org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus r7, $r9, $r14, $r17;
        java.util.ArrayList $r11;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r12, $r13;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.Cluster;

        r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.Collection;

        r5 := @parameter4: java.util.Map;

        virtualinvoke r1.<org.apache.commons.math3.ml.clustering.Cluster: void addPoint(org.apache.commons.math3.ml.clustering.Clusterable)>(r2);

        $r9 = <org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r9);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        r16 = $r11;

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r16.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r12 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (org.apache.commons.math3.ml.clustering.Clusterable) $r12;

        $r13 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus) $r13;

        if r7 != null goto label2;

        r8 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: java.util.List getNeighbors(org.apache.commons.math3.ml.clustering.Clusterable,java.util.Collection)>(r6, r4);

        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        $i2 = r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: int minPts>;

        if $i1 < $i2 goto label2;

        r16 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: java.util.List merge(java.util.List,java.util.List)>(r16, r8);

     label2:
        $r17 = <org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        if r7 == $r17 goto label3;

        $r14 = <org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus: org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus PART_OF_CLUSTER>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r14);

        virtualinvoke r1.<org.apache.commons.math3.ml.clustering.Cluster: void addPoint(org.apache.commons.math3.ml.clustering.Clusterable)>(r6);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return r1;
    }

    private java.util.List getNeighbors(org.apache.commons.math3.ml.clustering.Clusterable, java.util.Collection)
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        org.apache.commons.math3.ml.clustering.Clusterable r1, r5;
        java.util.Collection r2;
        java.util.Iterator r4;
        java.util.ArrayList $r6;
        boolean $z0;
        java.lang.Object $r7;
        double $d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.Clusterable;

        r2 := @parameter1: java.util.Collection;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        if r1 == r5 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r5, r1);

        $d1 = r0.<org.apache.commons.math3.ml.clustering.DBSCANClusterer: double eps>;

        $b0 = $d0 cmpg $d1;

        if $b0 > 0 goto label2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    private java.util.List merge(java.util.List, java.util.List)
    {
        org.apache.commons.math3.ml.clustering.DBSCANClusterer r0;
        java.util.List r1, r2;
        java.util.Iterator r4;
        org.apache.commons.math3.ml.clustering.Clusterable r5;
        java.util.HashSet $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.ml.clustering.DBSCANClusterer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return r1;
    }
}
