public class com.opengamma.analytics.math.function.special.IncompleteBetaFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final double _a;
    private final double _b;
    private final double _eps;
    private final int _maxIter;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.function.special.IncompleteBetaFunction r0;
        double d0, d1;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteBetaFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: void <init>(double,double,double,int)>(d0, d1, 1.0E-12, 10000);

        return;
    }

    public void <init>(double, double, double, int)
    {
        com.opengamma.analytics.math.function.special.IncompleteBetaFunction r0;
        double d0, d1, d2;
        int i0;
        byte $b1, $b2, $b3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteBetaFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "a must be > 0");

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "b must be > 0");

        $b3 = d2 cmpl 0.0;

        if $b3 < 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "eps must not be negative");

        if i0 < 1 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z3, "maximum number of iterations must be greater than zero");

        r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _a> = d0;

        r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _b> = d1;

        r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _eps> = d2;

        r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: int _maxIter> = i0;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.function.special.IncompleteBetaFunction r0;
        java.lang.Double r1, $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0, $b1;
        org.apache.commons.math.MathException $r3;
        com.opengamma.analytics.math.MathException $r4;
        boolean $z0;
        int $i2;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteBetaFunction;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b1 = $d1 cmpg 1.0;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "x must be in the range 0 to 1");

     label3:
        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d3 = r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _a>;

        $d4 = r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _b>;

        $d5 = r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: double _eps>;

        $i2 = r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: int _maxIter>;

        $d6 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double,double,int)>($d2, $d3, $d4, $d5, $i2);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

     label4:
        return $r5;

     label5:
        $r3 := @caughtexception;

        $r4 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r4.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch org.apache.commons.math.MathException from label3 to label4 with label5;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.special.IncompleteBetaFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteBetaFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
