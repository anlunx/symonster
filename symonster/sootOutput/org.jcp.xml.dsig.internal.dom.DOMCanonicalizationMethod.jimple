public class org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod extends org.jcp.xml.dsig.internal.dom.DOMTransform implements javax.xml.crypto.dsig.CanonicalizationMethod
{

    public void <init>(javax.xml.crypto.dsig.TransformService) throws java.security.InvalidAlgorithmParameterException
    {
        org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod r0;
        javax.xml.crypto.dsig.TransformService r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        java.security.InvalidAlgorithmParameterException $r3;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod;

        r1 := @parameter0: javax.xml.crypto.dsig.TransformService;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: void <init>(javax.xml.crypto.dsig.TransformService)>(r1);

        $z0 = r1 instanceof org.jcp.xml.dsig.internal.dom.ApacheCanonicalizer;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<javax.xml.crypto.dsig.TransformService: java.lang.String getAlgorithm()>();

        $z1 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: boolean isC14Nalg(java.lang.String)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Illegal CanonicalizationMethod");

        throw $r3;

     label1:
        return;
    }

    public void <init>(org.w3c.dom.Element, javax.xml.crypto.XMLCryptoContext, java.security.Provider) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod r0;
        org.w3c.dom.Element r1;
        javax.xml.crypto.XMLCryptoContext r2;
        java.security.Provider r3;
        javax.xml.crypto.dsig.TransformService $r4, $r5;
        boolean $z0, $z1;
        java.lang.String $r6;
        javax.xml.crypto.MarshalException $r7;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.security.Provider;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMTransform: void <init>(org.w3c.dom.Element,javax.xml.crypto.XMLCryptoContext,java.security.Provider)>(r1, r2, r3);

        $r4 = r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: javax.xml.crypto.dsig.TransformService spi>;

        $z0 = $r4 instanceof org.jcp.xml.dsig.internal.dom.ApacheCanonicalizer;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: javax.xml.crypto.dsig.TransformService spi>;

        $r6 = virtualinvoke $r5.<javax.xml.crypto.dsig.TransformService: java.lang.String getAlgorithm()>();

        $z1 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: boolean isC14Nalg(java.lang.String)>($r6);

        if $z1 != 0 goto label1;

        $r7 = new javax.xml.crypto.MarshalException;

        specialinvoke $r7.<javax.xml.crypto.MarshalException: void <init>(java.lang.String)>("Illegal CanonicalizationMethod");

        throw $r7;

     label1:
        return;
    }

    public javax.xml.crypto.Data canonicalize(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod r0;
        javax.xml.crypto.Data r1, $r3;
        javax.xml.crypto.XMLCryptoContext r2;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        $r3 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext)>(r1, r2);

        return $r3;
    }

    public javax.xml.crypto.Data canonicalize(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext, java.io.OutputStream) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod r0;
        javax.xml.crypto.Data r1, $r4;
        javax.xml.crypto.XMLCryptoContext r2;
        java.io.OutputStream r3;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.io.OutputStream;

        $r4 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)>(r1, r2, r3);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod r0;
        java.lang.Object r1;
        javax.xml.crypto.dsig.CanonicalizationMethod r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.security.spec.AlgorithmParameterSpec $r5, $r6;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof javax.xml.crypto.dsig.CanonicalizationMethod;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (javax.xml.crypto.dsig.CanonicalizationMethod) r1;

        $r3 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: java.lang.String getAlgorithm()>();

        $r4 = interfaceinvoke r2.<javax.xml.crypto.dsig.CanonicalizationMethod: java.lang.String getAlgorithm()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMCanonicalizationMethod: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        $r6 = interfaceinvoke r2.<javax.xml.crypto.dsig.CanonicalizationMethod: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        $z2 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: boolean paramsEqual(java.security.spec.AlgorithmParameterSpec,java.security.spec.AlgorithmParameterSpec)>($r5, $r6);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private static boolean isC14Nalg(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/TR/2001/REC-xml-c14n-20010315");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/10/xml-exc-c14n#");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2006/12/xml-c14n11");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2006/12/xml-c14n11#WithComments");

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }
}
