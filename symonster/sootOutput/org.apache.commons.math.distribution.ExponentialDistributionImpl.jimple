public class org.apache.commons.math.distribution.ExponentialDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.ExponentialDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private double mean;
    private final double solverAbsoluteAccuracy;

    public void <init>(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: void <init>(double,double)>(d0, 1.0E-9);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: void setMeanInternal(double)>(d0);

        r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double solverAbsoluteAccuracy> = d1;

        return;
    }

    public void setMean(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: void setMeanInternal(double)>(d0);

        return;
    }

    private void setMeanInternal(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_MEAN>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean> = d0;

        return;
    }

    public double getMean()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        return $d0;
    }

    public double density(java.lang.Double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        java.lang.Double r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double density(double)>($d0);

        return $d1;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d2 = neg d0;

        $d1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d3);

        $d5 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d6 = $d4 / $d5;

        return $d6;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        d5 = 0.0;

        goto label2;

     label1:
        $d2 = neg d0;

        $d1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d3);

        d5 = 1.0 - $d4;

     label2:
        return d5;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label2:
        $b2 = d0 cmpl 1.0;

        if $b2 != 0 goto label3;

        d5 = #Infinity;

        goto label4;

     label3:
        $d1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d3 = neg $d1;

        $d2 = 1.0 - d0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d2);

        d5 = $d3 * $d4;

     label4:
        return d5;
    }

    public double sample() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double $d0, $d1;
        org.apache.commons.math.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        $r1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: org.apache.commons.math.random.RandomDataImpl randomData>;

        $d0 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: double nextExponential(double)>($d0);

        return $d1;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        return 0.0;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        return $d1;

     label1:
        return 1.7976931348623157E308;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1, $d2, $d3;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d2 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        $d3 = $d2 * 0.5;

        return $d3;

     label1:
        $d1 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double mean>;

        return $d1;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double getMean()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double getMean()>();

        $d1 = d0 * d0;

        return $d1;
    }

    public volatile double density(java.lang.Object) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ExponentialDistributionImpl r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ExponentialDistributionImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ExponentialDistributionImpl: double density(java.lang.Double)>($r2);

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.ExponentialDistributionImpl: long serialVersionUID> = 2401296428283614780L;

        <org.apache.commons.math.distribution.ExponentialDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
