public class org.apache.commons.math.random.RandomAdaptor extends java.util.Random implements org.apache.commons.math.random.RandomGenerator
{
    private static final long serialVersionUID;
    private final org.apache.commons.math.random.RandomGenerator randomGenerator;

    private void <init>()
    {
        org.apache.commons.math.random.RandomAdaptor r0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        specialinvoke r0.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator> = null;

        return;
    }

    public void <init>(org.apache.commons.math.random.RandomGenerator)
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        r1 := @parameter0: org.apache.commons.math.random.RandomGenerator;

        specialinvoke r0.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator> = r1;

        return;
    }

    public static java.util.Random createAdaptor(org.apache.commons.math.random.RandomGenerator)
    {
        org.apache.commons.math.random.RandomGenerator r0;
        org.apache.commons.math.random.RandomAdaptor $r1;

        r0 := @parameter0: org.apache.commons.math.random.RandomGenerator;

        $r1 = new org.apache.commons.math.random.RandomAdaptor;

        specialinvoke $r1.<org.apache.commons.math.random.RandomAdaptor: void <init>(org.apache.commons.math.random.RandomGenerator)>(r0);

        return $r1;
    }

    public boolean nextBoolean()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: boolean nextBoolean()>();

        return $z0;
    }

    public void nextBytes(byte[])
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        byte[] r1;
        org.apache.commons.math.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: void nextBytes(byte[])>(r1);

        return;
    }

    public double nextDouble()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        return $d0;
    }

    public float nextFloat()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        float $f0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $f0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: float nextFloat()>();

        return $f0;
    }

    public double nextGaussian()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: double nextGaussian()>();

        return $d0;
    }

    public int nextInt()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: int nextInt()>();

        return $i0;
    }

    public int nextInt(int)
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        int i0, $i1;
        org.apache.commons.math.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $i1 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: int nextInt(int)>(i0);

        return $i1;
    }

    public long nextLong()
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        org.apache.commons.math.random.RandomGenerator $r1;
        long $l0;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        $l0 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomGenerator: long nextLong()>();

        return $l0;
    }

    public void setSeed(int)
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        int i0;
        org.apache.commons.math.random.RandomGenerator $r1, $r2;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: void setSeed(int)>(i0);

     label1:
        return;
    }

    public void setSeed(int[])
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        int[] r1;
        org.apache.commons.math.random.RandomGenerator $r2, $r3;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        r1 := @parameter0: int[];

        $r2 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        interfaceinvoke $r3.<org.apache.commons.math.random.RandomGenerator: void setSeed(int[])>(r1);

     label1:
        return;
    }

    public void setSeed(long)
    {
        org.apache.commons.math.random.RandomAdaptor r0;
        long l0;
        org.apache.commons.math.random.RandomGenerator $r1, $r2;

        r0 := @this: org.apache.commons.math.random.RandomAdaptor;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math.random.RandomAdaptor: org.apache.commons.math.random.RandomGenerator randomGenerator>;

        interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: void setSeed(long)>(l0);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.random.RandomAdaptor: long serialVersionUID> = 2306581345647615033L;

        return;
    }
}
