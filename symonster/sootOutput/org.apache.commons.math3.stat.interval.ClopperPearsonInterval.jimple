public class org.apache.commons.math3.stat.interval.ClopperPearsonInterval extends java.lang.Object implements org.apache.commons.math3.stat.interval.BinomialConfidenceInterval
{

    public void <init>()
    {
        org.apache.commons.math3.stat.interval.ClopperPearsonInterval r0;

        r0 := @this: org.apache.commons.math3.stat.interval.ClopperPearsonInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)
    {
        org.apache.commons.math3.stat.interval.ClopperPearsonInterval r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;
        org.apache.commons.math3.distribution.FDistribution $r3, $r4;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r5;

        r0 := @this: org.apache.commons.math3.stat.interval.ClopperPearsonInterval;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.stat.interval.IntervalUtils: void checkParameters(int,int,double)>(i0, i1, d0);

        d22 = 0.0;

        d23 = 0.0;

        $d4 = 1.0 - d0;

        d1 = $d4 / 2.0;

        $r3 = new org.apache.commons.math3.distribution.FDistribution;

        $i2 = i0 - i1;

        $i3 = $i2 + 1;

        $i4 = 2 * $i3;

        $d6 = (double) $i4;

        $i5 = 2 * i1;

        $d5 = (double) $i5;

        specialinvoke $r3.<org.apache.commons.math3.distribution.FDistribution: void <init>(double,double)>($d6, $d5);

        $d7 = 1.0 - d1;

        d2 = virtualinvoke $r3.<org.apache.commons.math3.distribution.FDistribution: double inverseCumulativeProbability(double)>($d7);

        if i1 <= 0 goto label1;

        $d21 = (double) i1;

        $d19 = (double) i1;

        $i13 = i0 - i1;

        $i14 = $i13 + 1;

        $d17 = (double) $i14;

        $d18 = $d17 * d2;

        $d20 = $d19 + $d18;

        d22 = $d21 / $d20;

     label1:
        $r4 = new org.apache.commons.math3.distribution.FDistribution;

        $i6 = i1 + 1;

        $i7 = 2 * $i6;

        $d9 = (double) $i7;

        $i8 = i0 - i1;

        $i9 = 2 * $i8;

        $d8 = (double) $i9;

        specialinvoke $r4.<org.apache.commons.math3.distribution.FDistribution: void <init>(double,double)>($d9, $d8);

        $d10 = 1.0 - d1;

        d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.FDistribution: double inverseCumulativeProbability(double)>($d10);

        if i1 <= 0 goto label2;

        $i10 = i1 + 1;

        $d11 = (double) $i10;

        $d16 = $d11 * d3;

        $i11 = i0 - i1;

        $d14 = (double) $i11;

        $i12 = i1 + 1;

        $d12 = (double) $i12;

        $d13 = $d12 * d3;

        $d15 = $d14 + $d13;

        d23 = $d16 / $d15;

     label2:
        $r5 = new org.apache.commons.math3.stat.interval.ConfidenceInterval;

        specialinvoke $r5.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void <init>(double,double,double)>(d22, d23, d0);

        return $r5;
    }
}
