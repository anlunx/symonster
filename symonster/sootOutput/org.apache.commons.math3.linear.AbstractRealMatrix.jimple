public abstract class org.apache.commons.math3.linear.AbstractRealMatrix extends org.apache.commons.math3.linear.RealLinearOperator implements org.apache.commons.math3.linear.RealMatrix
{
    private static final org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT;

    protected void <init>()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: void <init>()>();

        return;
    }

    protected void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1, $r3;
        java.lang.Integer $r2, $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: void <init>()>();

        if i0 >= 1 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label1:
        if i1 >= 1 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label2:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d0 + $d1;

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d0 - $d1;

        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math3.linear.RealMatrix scalarAdd(double)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double d0, $d1, $d2;
        int i0, i1, i2, i3;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d1 + d0;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double d0, $d1, $d2;
        int i0, i1, i2, i3;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d1 * d0;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3, i4, i5;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i2 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i3, i5);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i4);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i3, i4, d3);

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return r2;
    }

    public org.apache.commons.math3.linear.RealMatrix preMultiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix power(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        char[] r1;
        java.util.Iterator r3;
        java.lang.Integer r4, $r13, $r19;
        boolean $z0, $z1;
        java.lang.String $r5;
        java.util.ArrayList $r6;
        org.apache.commons.math3.linear.RealMatrix $r7, $r9, $r10, $r11, $r12, $r14, $r15, r21;
        java.lang.Object $r8;
        char $c7;
        org.apache.commons.math3.linear.NonSquareMatrixException $r16;
        org.apache.commons.math3.exception.NotPositiveException $r17;
        org.apache.commons.math3.exception.util.LocalizedFormats $r18;
        org.apache.commons.math3.linear.RealMatrix[] r20;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        if i0 >= 0 goto label01;

        $r17 = new org.apache.commons.math3.exception.NotPositiveException;

        $r18 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_EXPONENT>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r17.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r18, $r19);

        throw $r17;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label02;

        $r16 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i11 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i12 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        specialinvoke $r16.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i11, $i12);

        throw $r16;

     label02:
        if i0 != 0 goto label03;

        $i10 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $r15 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i10);

        return $r15;

     label03:
        if i0 != 1 goto label04;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r14;

     label04:
        i1 = i0 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i1);

        r1 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i13 = -1;

        i14 = 0;

     label05:
        $i2 = lengthof r1;

        if i14 >= $i2 goto label07;

        $c7 = r1[i14];

        if $c7 != 49 goto label06;

        $i8 = lengthof r1;

        $i9 = $i8 - i14;

        i15 = $i9 - 1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        if i13 != -1 goto label06;

        i13 = i15;

     label06:
        i14 = i14 + 1;

        goto label05;

     label07:
        $i3 = i13 + 1;

        r20 = newarray (org.apache.commons.math3.linear.RealMatrix)[$i3];

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        r20[0] = $r7;

        i16 = 1;

     label08:
        if i16 > i13 goto label09;

        $i5 = i16 - 1;

        $r11 = r20[$i5];

        $i6 = i16 - 1;

        $r10 = r20[$i6];

        $r12 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r10);

        r20[i16] = $r12;

        i16 = i16 + 1;

        goto label08;

     label09:
        r21 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        r3 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r8;

        $i4 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $r9 = r20[$i4];

        r21 = interfaceinvoke r21.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r9);

        goto label10;

     label11:
        return r21;
    }

    public double[][] getData()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double[][] r1;
        double[] r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = newmultiarray (double)[$i0][$i1];

        i4 = 0;

     label1:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label4;

        r2 = r1[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        r2[i5] = $d0;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r1;
    }

    public double getNorm()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.AbstractRealMatrix$1 $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        $r1 = new org.apache.commons.math3.linear.AbstractRealMatrix$1;

        specialinvoke $r1.<org.apache.commons.math3.linear.AbstractRealMatrix$1: void <init>(org.apache.commons.math3.linear.AbstractRealMatrix)>(r0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>($r1);

        return $d0;
    }

    public double getFrobeniusNorm()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.AbstractRealMatrix$2 $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        $r1 = new org.apache.commons.math3.linear.AbstractRealMatrix$2;

        specialinvoke $r1.<org.apache.commons.math3.linear.AbstractRealMatrix$2: void <init>(org.apache.commons.math3.linear.AbstractRealMatrix)>(r0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>($r1);

        return $d0;
    }

    public org.apache.commons.math3.linear.RealMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.apache.commons.math3.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = i1 - i0;

        $i7 = $i4 + 1;

        $i5 = i3 - i2;

        $i6 = $i5 + 1;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>($i7, $i6);

        i10 = i0;

     label1:
        if i10 > i1 goto label4;

        i11 = i2;

     label2:
        if i11 > i3 goto label3;

        $i8 = i10 - i0;

        $i9 = i11 - i2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i10, i11);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i8, $i9, $d0);

        i11 = i11 + 1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math3.linear.RealMatrix getSubMatrix(int[], int[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int[] r1, r2;
        org.apache.commons.math3.linear.RealMatrix r3;
        int $i0, $i1;
        org.apache.commons.math3.linear.AbstractRealMatrix$3 $r4;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])>(r0, r1, r2);

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        r3 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>($i1, $i0);

        $r4 = new org.apache.commons.math3.linear.AbstractRealMatrix$3;

        specialinvoke $r4.<org.apache.commons.math3.linear.AbstractRealMatrix$3: void <init>(org.apache.commons.math3.linear.AbstractRealMatrix,int[],int[])>(r0, r1, r2);

        interfaceinvoke r3.<org.apache.commons.math3.linear.RealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)>($r4);

        return r3;
    }

    public void copySubMatrix(int, int, int, int, double[][]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        double[][] r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2, $r7;
        double[] $r3, $r4, $r6, $r8;
        org.apache.commons.math3.linear.AbstractRealMatrix$4 $r5;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: double[][];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i6 = i1 + 1;

        i4 = $i6 - i0;

        $i7 = i3 + 1;

        i5 = $i7 - i2;

        $i8 = lengthof r1;

        if $i8 < i4 goto label1;

        $r4 = r1[0];

        $i11 = lengthof $r4;

        if $i11 >= i5 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i10 = lengthof r1;

        $r3 = r1[0];

        $i9 = lengthof $r3;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i10, $i9, i4, i5);

        throw $r2;

     label2:
        i15 = 1;

     label3:
        if i15 >= i4 goto label5;

        $r6 = r1[i15];

        $i12 = lengthof $r6;

        if $i12 >= i5 goto label4;

        $r7 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i14 = lengthof r1;

        $r8 = r1[i15];

        $i13 = lengthof $r8;

        specialinvoke $r7.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i14, $i13, i4, i5);

        throw $r7;

     label4:
        i15 = i15 + 1;

        goto label3;

     label5:
        $r5 = new org.apache.commons.math3.linear.AbstractRealMatrix$4;

        specialinvoke $r5.<org.apache.commons.math3.linear.AbstractRealMatrix$4: void <init>(org.apache.commons.math3.linear.AbstractRealMatrix,double[][])>(r0, r1);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)>($r5, i0, i1, i2, i3);

        return;
    }

    public void copySubMatrix(int[], int[], double[][]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int[] r1, r2;
        double[][] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double[] r4, $r6, $r7;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r5, $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        r3 := @parameter2: double[][];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int[],int[])>(r0, r1, r2);

        i0 = lengthof r2;

        $i2 = lengthof r3;

        $i1 = lengthof r1;

        if $i2 < $i1 goto label1;

        $r7 = r3[0];

        $i7 = lengthof $r7;

        if $i7 >= i0 goto label2;

     label1:
        $r5 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i6 = lengthof r3;

        $r6 = r3[0];

        $i5 = lengthof $r6;

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        specialinvoke $r5.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i6, $i5, $i4, $i3);

        throw $r5;

     label2:
        i17 = 0;

     label3:
        $i8 = lengthof r1;

        if i17 >= $i8 goto label7;

        r4 = r3[i17];

        $i9 = lengthof r4;

        if $i9 >= i0 goto label4;

        $r8 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i16 = lengthof r3;

        $i15 = lengthof r4;

        $i14 = lengthof r1;

        $i13 = lengthof r2;

        specialinvoke $r8.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i16, $i15, $i14, $i13);

        throw $r8;

     label4:
        i18 = 0;

     label5:
        $i10 = lengthof r2;

        if i18 >= $i10 goto label6;

        $i12 = r1[i17];

        $i11 = r2[i18];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>($i12, $i11);

        r4[i18] = $d0;

        i18 = i18 + 1;

        goto label5;

     label6:
        i17 = i17 + 1;

        goto label3;

     label7:
        return;
    }

    public void setSubMatrix(double[][], int, int) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double[][] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        double[] $r2, $r3, $r4, $r6;
        double $d0;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;
        org.apache.commons.math3.exception.NoDataException $r7, $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8, $r10;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: double[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i2 = lengthof r1;

        if i2 != 0 goto label1;

        $r9 = new org.apache.commons.math3.exception.NoDataException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r9.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r10);

        throw $r9;

     label1:
        $r2 = r1[0];

        i3 = lengthof $r2;

        if i3 != 0 goto label2;

        $r7 = new org.apache.commons.math3.exception.NoDataException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r7.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r8);

        throw $r7;

     label2:
        i12 = 1;

     label3:
        if i12 >= i2 goto label5;

        $r4 = r1[i12];

        $i10 = lengthof $r4;

        if $i10 == i3 goto label4;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r6 = r1[i12];

        $i11 = lengthof $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i3, $i11);

        throw $r5;

     label4:
        i12 = i12 + 1;

        goto label3;

     label5:
        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i1);

        $i4 = i2 + i0;

        $i5 = $i4 - 1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i5);

        $i6 = i3 + i1;

        $i7 = $i6 - 1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, $i7);

        i13 = 0;

     label6:
        if i13 >= i2 goto label9;

        i14 = 0;

     label7:
        if i14 >= i3 goto label8;

        $i9 = i0 + i13;

        $i8 = i1 + i14;

        $r3 = r1[i13];

        $d0 = $r3[i14];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>($i9, $i8, $d0);

        i14 = i14 + 1;

        goto label7;

     label8:
        i13 = i13 + 1;

        goto label6;

     label9:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        org.apache.commons.math3.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(1, i1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i2);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(0, i2, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setRowMatrix(int, org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.math3.linear.RealMatrix r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 != 1 goto label1;

        $i5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i5 == i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i3, $i4, 1, i1);

        throw $r2;

     label2:
        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(0, i6);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i6, $d0);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        org.apache.commons.math3.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i1, 1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i0);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, 0, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setColumnMatrix(int, org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.math3.linear.RealMatrix r1;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 != i1 goto label1;

        $i5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i5 == 1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i3, $i4, i1, 1);

        throw $r2;

     label2:
        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i6, 0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i6, i0, $d0);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public org.apache.commons.math3.linear.RealVector getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double[] getRow(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r2, 0);

        return $r1;
    }

    public void setRowVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math3.linear.RealVector r1;
        double $d0;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i3, 1, i1);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i4);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i4, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public org.apache.commons.math3.linear.RealVector getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double[] getColumn(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r2, 0);

        return $r1;
    }

    public void setColumnVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math3.linear.RealVector r1;
        double $d0;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i3, 1, i1, 1);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i4);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i0, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public double[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i2);

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setRow(int, double[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        double[] r1;
        double $d0;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i3, 1, i1);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i4, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public double[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i0);

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setColumn(int, double[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        double[] r1;
        double $d0;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i3, 1, i1, 1);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i0, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i1);

        $d2 = $d1 + d0;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i1, $d2);

        return;
    }

    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i1);

        $d2 = $d1 * d0;

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i1, $d2);

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix transpose()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix r1;
        org.apache.commons.math3.linear.AbstractRealMatrix$5 $r2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrix createMatrix(int,int)>(i1, i0);

        $r2 = new org.apache.commons.math3.linear.AbstractRealMatrix$5;

        specialinvoke $r2.<org.apache.commons.math3.linear.AbstractRealMatrix$5: void <init>(org.apache.commons.math3.linear.AbstractRealMatrix,org.apache.commons.math3.linear.RealMatrix)>(r0, r1);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>($r2);

        return r1;
    }

    public boolean isSquare()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract int getRowDimension();

    public abstract int getColumnDimension();

    public double getTrace() throws org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double $d0, d1;
        org.apache.commons.math3.linear.NonSquareMatrixException $r1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        if i0 == i1 goto label1;

        $r1 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        specialinvoke $r1.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>(i0, i1);

        throw $r1;

     label1:
        d1 = 0.0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i2);

        d1 = d1 + $d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        return d1;
    }

    public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double[] r1, r2;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i1);

        throw $r3;

     label1:
        r2 = newarray (double)[i0];

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i1 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        $d1 = r1[i5];

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r3, $r6, $r7;
        org.apache.commons.math3.linear.ArrayRealVector $r4, $r5, $r9;
        java.lang.ClassCastException $r8;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

     label1:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r5 = (org.apache.commons.math3.linear.ArrayRealVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double[] operate(double[])>($r6);

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r7, 0);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label4;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i1);

        throw $r10;

     label4:
        r3 = newarray (double)[i0];

        i4 = 0;

     label5:
        if i4 >= i0 goto label8;

        d3 = 0.0;

        i5 = 0;

     label6:
        if i5 >= i1 goto label7;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i5);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label6;

     label7:
        r3[i4] = d3;

        i4 = i4 + 1;

        goto label5;

     label8:
        $r9 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r9.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        double[] r1, r2;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r3;

     label1:
        r2 = newarray (double)[i1];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        $d1 = r1[i5];

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r3, $r6, $r7;
        org.apache.commons.math3.linear.ArrayRealVector $r4, $r5, $r9;
        java.lang.ClassCastException $r8;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

     label1:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r5 = (org.apache.commons.math3.linear.ArrayRealVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double[] preMultiply(double[])>($r6);

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r7, 0);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == i0 goto label4;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r10;

     label4:
        r3 = newarray (double)[i1];

        i4 = 0;

     label5:
        if i4 >= i1 goto label8;

        d3 = 0.0;

        i5 = 0;

     label6:
        if i5 >= i0 goto label7;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i5);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label6;

     label7:
        r3[i4] = d3;

        i4 = i4 + 1;

        goto label5;

     label8:
        $r9 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r9.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i4, i5, d0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i5, d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i4, i5, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i6, i7);

        d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i6, i7, d0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i6, i7, d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i6, i7);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i6, i7, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i5, i4, d0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i5, i4, d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i5, i4, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i7, i6);

        d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i7, i6, d0);

        virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i7, i6, d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i7, i6);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i7, i6, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor,int,int,int,int)>(r1, i0, i1, i2, i3);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor,int,int,int,int)>(r1, i0, i1, i2, i3);

        return $d0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        java.lang.String r2, r3, $r8, $r10;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        int $i0, $i1;
        org.apache.commons.math3.linear.RealMatrixFormat $r7;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = <org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT>;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String format(org.apache.commons.math3.linear.RealMatrix)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        java.lang.Object r1;
        org.apache.commons.math3.linear.RealMatrix r2;
        int i0, i1, $i2, $i3, i5, i6;
        boolean $z0;
        double $d0, $d1;
        byte $b4;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.linear.RealMatrix;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.linear.RealMatrix) r1;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i2 != i1 goto label3;

        $i3 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i3 == i0 goto label4;

     label3:
        return 0;

     label4:
        i5 = 0;

     label5:
        if i5 >= i0 goto label9;

        i6 = 0;

     label6:
        if i6 >= i1 goto label8;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i6);

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i6);

        $b4 = $d0 cmpl $d1;

        if $b4 == 0 goto label7;

        return 0;

     label7:
        i6 = i6 + 1;

        goto label6;

     label8:
        i5 = i5 + 1;

        goto label5;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.math3.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = 7 * 31;

        i13 = $i2 + i0;

        $i3 = i13 * 31;

        i14 = $i3 + i1;

        i15 = 0;

     label1:
        if i15 >= i0 goto label4;

        i16 = 0;

     label2:
        if i16 >= i1 goto label3;

        $i8 = i14 * 31;

        $i4 = i15 + 1;

        $i7 = 11 * $i4;

        $i5 = i16 + 1;

        $i6 = 17 * $i5;

        $i9 = $i7 + $i6;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i15, i16);

        $i10 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i11 = $i9 * $i10;

        i14 = $i8 + $i11;

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        return i14;
    }

    public abstract org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;

    public abstract org.apache.commons.math3.linear.RealMatrix copy();

    public abstract double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;

    public abstract void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;

    static void <clinit>()
    {
        java.util.Locale $r0;
        org.apache.commons.math3.linear.RealMatrixFormat $r1, $r2;
        java.text.NumberFormat $r3;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r1 = staticinvoke <org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale)>($r0);

        <org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT> = $r1;

        $r2 = <org.apache.commons.math3.linear.AbstractRealMatrix: org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat getFormat()>();

        virtualinvoke $r3.<java.text.NumberFormat: void setMinimumFractionDigits(int)>(1);

        return;
    }
}
