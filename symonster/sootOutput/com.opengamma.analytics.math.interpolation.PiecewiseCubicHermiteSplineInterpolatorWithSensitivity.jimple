public class com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator INTERP;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double[] r1, r2, r3, r11;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12, i13, i14, i15;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8;
        int[] $r9;
        java.lang.Double $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r12, r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r13, r14;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i5 = lengthof r1;

        $i4 = lengthof r2;

        if $i5 != $i4 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "xValues length = yValues length");

        $i6 = lengthof r1;

        if $i6 <= 1 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Data points should be more than 1");

        i0 = lengthof r1;

        i11 = 0;

     label05:
        if i11 >= i0 goto label06;

        $d3 = r1[i11];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xData containing NaN");

        $d4 = r1[i11];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing Infinity");

        $d5 = r2[i11];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yData containing NaN");

        $d6 = r2[i11];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yData containing Infinity");

        i11 = i11 + 1;

        goto label05;

     label06:
        r11 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r3 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r11, r3);

        i12 = 1;

     label07:
        if i12 >= i0 goto label10;

        $i9 = i12 - 1;

        $d2 = r11[$i9];

        $d1 = r11[i12];

        $b10 = $d2 cmpl $d1;

        if $b10 != 0 goto label08;

        $z7 = 1;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z7, "xValues should be distinct");

        i12 = i12 + 1;

        goto label07;

     label10:
        r12 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solve(double[],double[])>(r11, r3);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r12, "error in solve - some matrices are null");

        i1 = lengthof r12;

        if i1 != i0 goto label11;

        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "wrong number of matricies");

        i13 = 0;

     label13:
        if i13 >= i1 goto label18;

        r13 = r12[i13];

        i2 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i3 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i14 = 0;

     label14:
        if i14 >= i2 goto label17;

        i15 = 0;

     label15:
        if i15 >= i3 goto label16;

        $r9 = newarray (int)[2];

        $r9[0] = i14;

        $r9[1] = i15;

        $r10 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r9);

        $d0 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i15 = i15 + 1;

        goto label15;

     label16:
        i14 = i14 + 1;

        goto label14;

     label17:
        i13 = i13 + 1;

        goto label13;

     label18:
        r14 = r12[0];

        $i7 = i1 - 1;

        r15 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i7];

        $i8 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 1, r15, 0, $i8);

        $r7 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r11);

        specialinvoke $r7.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r8, r14, 4, 1, r15);

        return $r7;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double[] r1, r2, r4, r5, r7, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23;
        double[][] r3, r8, r9, r36, r37;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d51;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r11, $r12, $r18;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults r35;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r3 = newmultiarray (double)[$i1][4];

        $i2 = i0 - 1;

        r4 = newarray (double)[$i2];

        $i3 = i0 - 1;

        r5 = newarray (double)[$i3];

        r6 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        i19 = 0;

     label01:
        $i4 = i0 - 1;

        if i19 >= $i4 goto label02;

        $i17 = i19 + 1;

        $d44 = r1[$i17];

        $d43 = r1[i19];

        $d45 = $d44 - $d43;

        r4[i19] = $d45;

        $i18 = i19 + 1;

        $d47 = r2[$i18];

        $d46 = r2[i19];

        $d49 = $d47 - $d46;

        $d48 = r4[i19];

        $d50 = $d49 / $d48;

        r5[i19] = $d50;

        i19 = i19 + 1;

        goto label01;

     label02:
        if i0 != 2 goto label03;

        $r33 = r3[0];

        $d41 = r5[0];

        $r33[2] = $d41;

        $r34 = r3[0];

        $d42 = r1[0];

        $r34[3] = $d42;

        goto label11;

     label03:
        r35 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults slopeFinder(double[],double[],double[])>(r4, r5, r2);

        $r10 = virtualinvoke r35.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults: com.opengamma.analytics.math.matrix.DoubleMatrix1D getSlopes()>();

        r7 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r11 = virtualinvoke r35.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults: com.opengamma.analytics.math.matrix.DoubleMatrix2D getSlopeJacobian()>();

        r8 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i20 = 0;

     label04:
        $i5 = i0 - 1;

        if i20 >= $i5 goto label05;

        $r29 = r3[i20];

        $d22 = r7[i20];

        $d20 = r5[i20];

        $d21 = 2.0 * $d20;

        $d24 = $d22 - $d21;

        $i15 = i20 + 1;

        $d23 = r7[$i15];

        $d26 = $d24 + $d23;

        $d25 = r4[i20];

        $d28 = $d26 / $d25;

        $d27 = r4[i20];

        $d29 = $d28 / $d27;

        $r29[0] = $d29;

        $r30 = r3[i20];

        $d30 = r5[i20];

        $d33 = 3.0 * $d30;

        $d31 = r7[i20];

        $d32 = 2.0 * $d31;

        $d35 = $d33 - $d32;

        $i16 = i20 + 1;

        $d34 = r7[$i16];

        $d37 = $d35 - $d34;

        $d36 = r4[i20];

        $d38 = $d37 / $d36;

        $r30[1] = $d38;

        $r31 = r3[i20];

        $d39 = r7[i20];

        $r31[2] = $d39;

        $r32 = r3[i20];

        $d40 = r2[i20];

        $r32[3] = $d40;

        i20 = i20 + 1;

        goto label04;

     label05:
        $i6 = i0 - 1;

        r36 = newmultiarray (double)[$i6][i0];

        $i7 = i0 - 1;

        r9 = newmultiarray (double)[$i7][i0];

        i21 = 0;

     label06:
        $i8 = i0 - 1;

        if i21 >= $i8 goto label09;

        $d2 = r4[i21];

        d51 = 1.0 / $d2;

        d0 = d51 * d51;

        d1 = d51 * d0;

        $r19 = r9[i21];

        $d3 = -3.0 * d0;

        $r19[i21] = $d3;

        $r20 = r9[i21];

        $i11 = i21 + 1;

        $d4 = 3.0 * d0;

        $r20[$i11] = $d4;

        $r21 = r36[i21];

        $d5 = 2.0 * d1;

        $r21[i21] = $d5;

        $r22 = r36[i21];

        $i12 = i21 + 1;

        $d6 = -2.0 * d1;

        $r22[$i12] = $d6;

        i22 = 0;

     label07:
        if i22 >= i0 goto label08;

        $r23 = r9[i21];

        $d12 = $r23[i22];

        $r24 = r8[i21];

        $d7 = $r24[i22];

        $d9 = 2.0 * $d7;

        $i13 = i21 + 1;

        $r25 = r8[$i13];

        $d8 = $r25[i22];

        $d10 = $d9 + $d8;

        $d11 = $d10 * d51;

        $d13 = $d12 - $d11;

        $r23[i22] = $d13;

        $r26 = r36[i21];

        $d18 = $r26[i22];

        $r27 = r8[i21];

        $d15 = $r27[i22];

        $i14 = i21 + 1;

        $r28 = r8[$i14];

        $d14 = $r28[i22];

        $d16 = $d15 + $d14;

        $d17 = $d16 * d0;

        $d19 = $d18 + $d17;

        $r26[i22] = $d19;

        i22 = i22 + 1;

        goto label07;

     label08:
        i21 = i21 + 1;

        goto label06;

     label09:
        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        r6[0] = $r12;

        i23 = 0;

     label10:
        $i9 = i0 - 1;

        if i23 >= $i9 goto label11;

        r37 = newarray (double[])[4];

        $r13 = r36[i23];

        r37[0] = $r13;

        $r14 = r9[i23];

        r37[1] = $r14;

        $r15 = r8[i23];

        r37[2] = $r15;

        $r16 = newarray (double)[i0];

        r37[3] = $r16;

        $r17 = r37[3];

        $r17[i23] = 1.0;

        $i10 = i23 + 1;

        $r18 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r37);

        r6[$i10] = $r18;

        i23 = i23 + 1;

        goto label10;

     label11:
        return r6;
    }

    private com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults slopeFinder(double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double[] r1, r2, r3, r4, r5, r6, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r19, r20, r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, i41, i42;
        double[][] r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, d102, d103, d104, d105, d106, d107, d108, d109;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10;
        byte $b15, $b16, $b18;
        boolean $z0, $z1, $z2;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        i0 = lengthof r3;

        $i1 = i0 - 1;

        r4 = newarray (double)[$i1];

        $i2 = i0 - 1;

        r5 = newarray (double)[$i2];

        $i3 = i0 - 1;

        r6 = newarray (double)[$i3];

        i39 = 0;

     label01:
        $i4 = i0 - 1;

        if i39 >= $i4 goto label02;

        $d95 = r2[i39];

        $d96 = 1.0 / $d95;

        r4[i39] = $d96;

        $d98 = r4[i39];

        $d97 = r4[i39];

        $d99 = $d98 * $d97;

        r5[i39] = $d99;

        $d100 = r1[i39];

        $d101 = 1.0 / $d100;

        r6[i39] = $d101;

        i39 = i39 + 1;

        goto label01;

     label02:
        r19 = newarray (double)[i0];

        r7 = newmultiarray (double)[i0][i0];

        i40 = 1;

     label03:
        $i5 = i0 - 1;

        if i40 >= $i5 goto label10;

        $d13 = r2[i40];

        $i14 = i40 - 1;

        $d12 = r2[$i14];

        $d14 = $d13 * $d12;

        $b15 = $d14 cmpl 0.0;

        if $b15 <= 0 goto label04;

        $d59 = r1[i40];

        $d61 = 2.0 * $d59;

        $i30 = i40 - 1;

        $d60 = r1[$i30];

        d102 = $d61 + $d60;

        $d64 = r1[i40];

        $i31 = i40 - 1;

        $d62 = r1[$i31];

        $d63 = 2.0 * $d62;

        d103 = $d64 + $d63;

        d104 = d102 + d103;

        $i32 = i40 - 1;

        $d65 = r4[$i32];

        $d68 = d102 * $d65;

        $d66 = r4[i40];

        $d67 = d103 * $d66;

        $d69 = $d68 + $d67;

        $d70 = d104 / $d69;

        r19[i40] = $d70;

        $d72 = r19[i40];

        $d71 = r19[i40];

        $d73 = $d72 * $d71;

        d105 = $d73 / d104;

        $r16 = r7[i40];

        $i35 = i40 - 1;

        $d75 = neg d102;

        $i33 = i40 - 1;

        $d74 = r6[$i33];

        $d77 = $d75 * $d74;

        $i34 = i40 - 1;

        $d76 = r5[$i34];

        $d78 = $d77 * $d76;

        $d79 = $d78 * d105;

        $r16[$i35] = $d79;

        $r17 = r7[i40];

        $i36 = i40 - 1;

        $d80 = r6[$i36];

        $d82 = d102 * $d80;

        $i37 = i40 - 1;

        $d81 = r5[$i37];

        $d87 = $d82 * $d81;

        $d83 = r6[i40];

        $d85 = d103 * $d83;

        $d84 = r5[i40];

        $d86 = $d85 * $d84;

        $d88 = $d87 - $d86;

        $d89 = $d88 * d105;

        $r17[i40] = $d89;

        $r18 = r7[i40];

        $i38 = i40 + 1;

        $d90 = r6[i40];

        $d92 = d103 * $d90;

        $d91 = r5[i40];

        $d93 = $d92 * $d91;

        $d94 = $d93 * d105;

        $r18[$i38] = $d94;

        goto label09;

     label04:
        $d15 = r2[i40];

        $b16 = $d15 cmpl 0.0;

        if $b16 != 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        $i17 = i40 - 1;

        $d16 = r2[$i17];

        $b18 = $d16 cmpl 0.0;

        if $b18 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        $z2 = $z0 ^ $z1;

        if $z2 == 0 goto label09;

        $d17 = r1[i40];

        $d19 = 2.0 * $d17;

        $i19 = i40 - 1;

        $d18 = r1[$i19];

        d106 = $d19 + $d18;

        $d22 = r1[i40];

        $i20 = i40 - 1;

        $d20 = r1[$i20];

        $d21 = 2.0 * $d20;

        d107 = $d22 + $d21;

        d108 = d106 + d107;

        $d28 = 0.5 * d108;

        $d23 = r2[i40];

        $d26 = d106 * $d23;

        $i21 = i40 - 1;

        $d24 = r2[$i21];

        $d25 = d107 * $d24;

        $d27 = $d26 + $d25;

        $d29 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d27);

        d109 = $d28 / $d29;

        $r13 = r7[i40];

        $i23 = i40 - 1;

        $d31 = neg d106;

        $i22 = i40 - 1;

        $d30 = r6[$i22];

        $d33 = $d31 * $d30;

        $d32 = r2[i40];

        $d35 = $d33 * $d32;

        $d34 = r2[i40];

        $d36 = $d35 * $d34;

        $d37 = $d36 * d109;

        $r13[$i23] = $d37;

        $r14 = r7[i40];

        $i24 = i40 - 1;

        $d38 = r6[$i24];

        $d40 = d106 * $d38;

        $d39 = r2[i40];

        $d42 = $d40 * $d39;

        $d41 = r2[i40];

        $d49 = $d42 * $d41;

        $d43 = r6[i40];

        $d45 = d107 * $d43;

        $i25 = i40 - 1;

        $d44 = r2[$i25];

        $d47 = $d45 * $d44;

        $i26 = i40 - 1;

        $d46 = r2[$i26];

        $d48 = $d47 * $d46;

        $d50 = $d49 - $d48;

        $d51 = $d50 * d109;

        $r14[i40] = $d51;

        $r15 = r7[i40];

        $i29 = i40 + 1;

        $d52 = r6[i40];

        $d54 = d107 * $d52;

        $i27 = i40 - 1;

        $d53 = r2[$i27];

        $d56 = $d54 * $d53;

        $i28 = i40 - 1;

        $d55 = r2[$i28];

        $d57 = $d56 * $d55;

        $d58 = $d57 * d109;

        $r15[$i29] = $d58;

     label09:
        i40 = i40 + 1;

        goto label03;

     label10:
        $d3 = r1[0];

        $d2 = r1[1];

        $d1 = r2[0];

        $d0 = r2[1];

        r20 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: double[] endpointSlope(double,double,double,double,boolean)>($d3, $d2, $d1, $d0, 0);

        $d4 = r20[0];

        r19[0] = $d4;

        i41 = 0;

     label11:
        if i41 >= 3 goto label12;

        $r12 = r7[0];

        $i13 = i41 + 1;

        $d11 = r20[$i13];

        $r12[i41] = $d11;

        i41 = i41 + 1;

        goto label11;

     label12:
        $i6 = i0 - 2;

        $d8 = r1[$i6];

        $i7 = i0 - 3;

        $d7 = r1[$i7];

        $i8 = i0 - 2;

        $d6 = r2[$i8];

        $i9 = i0 - 3;

        $d5 = r2[$i9];

        r21 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: double[] endpointSlope(double,double,double,double,boolean)>($d8, $d7, $d6, $d5, 1);

        $i10 = i0 - 1;

        $d9 = r21[0];

        r19[$i10] = $d9;

        i42 = 1;

     label13:
        if i42 >= 4 goto label14;

        $i11 = i0 - 1;

        $r11 = r7[$i11];

        $i12 = i0 - i42;

        $d10 = r21[i42];

        $r11[$i12] = $d10;

        i42 = i42 + 1;

        goto label13;

     label14:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r19);

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r7);

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity$SlopeFinderResults: void <init>(com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r0, $r9, $r10);

        return $r8;
    }

    private double[] endpointSlope(double, double, double, double, boolean)
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68;
        boolean z0;
        double[] r1;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        int i7;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        z0 := @parameter4: boolean;

        r1 = newarray (double)[4];

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label05;

        $b5 = d3 cmpl 0.0;

        if $b5 != 0 goto label02;

        $d58 = 2.0 * d0;

        $d59 = $d58 + d1;

        $d60 = neg $d59;

        $d62 = $d60 / d0;

        $d61 = d0 + d1;

        $d63 = $d62 / $d61;

        r1[1] = $d63;

        $d64 = 2.0 * d1;

        $b6 = d0 cmpl $d64;

        if $b6 <= 0 goto label01;

        $d68 = 3.0 / d0;

        r1[2] = $d68;

        goto label03;

     label01:
        $d65 = d0 + d1;

        $d66 = $d65 / d0;

        $d67 = $d66 / d1;

        r1[2] = $d67;

        goto label03;

     label02:
        $d51 = -1.5 / d0;

        r1[1] = $d51;

        $d52 = r1[1];

        $d53 = neg $d52;

        r1[2] = $d53;

     label03:
        if z0 == 0 goto label04;

        $d54 = r1[1];

        $d55 = neg $d54;

        r1[1] = $d55;

        $d56 = r1[2];

        $d57 = neg $d56;

        r1[2] = $d57;

     label04:
        return r1;

     label05:
        $d5 = 2.0 * d0;

        $d6 = $d5 + d1;

        $d8 = $d6 * d2;

        $d7 = d0 * d3;

        $d10 = $d8 - $d7;

        $d9 = d0 + d1;

        d4 = $d10 / $d9;

        $d11 = staticinvoke <java.lang.Math: double signum(double)>(d4);

        $d12 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $b1 = $d11 cmpl $d12;

        if $b1 == 0 goto label06;

        $d37 = staticinvoke <java.lang.Math: double abs(double)>(d4);

        $b4 = $d37 cmpg 1.0E-15;

        if $b4 >= 0 goto label08;

        $d38 = 2.0 * d0;

        $d39 = $d38 + d1;

        $d40 = neg $d39;

        $d42 = $d40 / d0;

        $d41 = d0 + d1;

        $d43 = $d42 / $d41;

        r1[1] = $d43;

        $d44 = d0 + d1;

        $d45 = $d44 / d0;

        $d46 = $d45 / d1;

        r1[2] = $d46;

        $d47 = neg d0;

        $d49 = $d47 / d1;

        $d48 = d0 + d1;

        $d50 = $d49 / $d48;

        r1[3] = $d50;

        goto label08;

     label06:
        $d13 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $d14 = staticinvoke <java.lang.Math: double signum(double)>(d3);

        $b2 = $d13 cmpl $d14;

        if $b2 == 0 goto label07;

        $d30 = staticinvoke <java.lang.Math: double abs(double)>(d4);

        $d31 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $d32 = 3.0 * $d31;

        $b3 = $d30 cmpl $d32;

        if $b3 <= 0 goto label07;

        $d33 = 3.0 * d2;

        r1[0] = $d33;

        $d34 = -3.0 / d0;

        r1[1] = $d34;

        $d35 = r1[1];

        $d36 = neg $d35;

        r1[2] = $d36;

        goto label08;

     label07:
        r1[0] = d4;

        $d15 = 2.0 * d0;

        $d16 = $d15 + d1;

        $d17 = neg $d16;

        $d19 = $d17 / d0;

        $d18 = d0 + d1;

        $d20 = $d19 / $d18;

        r1[1] = $d20;

        $d21 = d0 + d1;

        $d22 = $d21 / d0;

        $d23 = $d22 / d1;

        r1[2] = $d23;

        $d24 = neg d0;

        $d26 = $d24 / d1;

        $d25 = d0 + d1;

        $d27 = $d26 / $d25;

        r1[3] = $d27;

     label08:
        if z0 == 0 goto label10;

        i7 = 1;

     label09:
        if i7 >= 4 goto label10;

        $d28 = r1[i7];

        $d29 = neg $d28;

        r1[i7] = $d29;

        i7 = i7 + 1;

        goto label09;

     label10:
        return r1;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator $r3;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = <com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator INTERP>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity r0;
        double[] r1;
        double[][] r2;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator $r3;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $r3 = <com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator INTERP>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[][])>(r1, r2);

        return $r4;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator $r0;

        $r0 = new com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        specialinvoke $r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: void <init>()>();

        <com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator INTERP> = $r0;

        return;
    }
}
