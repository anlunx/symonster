public class org.apache.commons.math3.analysis.differentiation.SparseGradient extends java.lang.Object implements org.apache.commons.math3.RealFieldElement, java.io.Serializable
{
    private static final long serialVersionUID;
    private double value;
    private final java.util.Map derivatives;

    private void <init>(double, java.util.Map)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double d0;
        java.util.Map r1, $r3;
        java.util.HashMap $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = d0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives> = $r2;

        if r1 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }

    private void <init>(double, double, java.util.Map)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double d0, d1, $d2, $d3;
        java.util.Map r1, $r7;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r9;
        java.lang.Double $r10, $r11;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = d0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives> = $r4;

        if r1 == null goto label2;

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.Double) $r9;

        $d2 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d3 = d1 * $d2;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label1;

     label2:
        return;
    }

    public static org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)
    {
        double d0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0;
        java.util.Map $r1;

        d0 := @parameter0: double;

        $r0 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>(d0, $r1);

        return $r0;
    }

    public static org.apache.commons.math3.analysis.differentiation.SparseGradient createVariable(int, double)
    {
        int i0;
        double d0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient $r0;
        java.lang.Integer $r1;
        java.lang.Double $r2;
        java.util.Map $r3;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r0 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r1, $r2);

        specialinvoke $r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>(d0, $r3);

        return $r0;
    }

    public int numVars()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public double getDerivative(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        int i0;
        java.lang.Double r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.lang.Double) $r4;

        if r1 != null goto label1;

        $d0 = 0.0;

        goto label2;

     label1:
        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

     label2:
        return $d0;
    }

    public double getValue()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        return $d0;
    }

    public double getReal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        return $d0;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r6;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int i0;
        java.lang.Double r5, $r19, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Map $r7, $r8, $r13, $r16, $r22;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11, $r15, $r18, $r24;
        java.lang.Integer $r12, $r14, $r17, $r23;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 + $d0;

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r7);

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r5 = (java.lang.Double) $r15;

        if r5 != null goto label2;

        $r22 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r24 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        goto label3;

     label2:
        $r16 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r18 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Double) $r18;

        $d4 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 + $d4;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r20);

     label3:
        goto label1;

     label4:
        return $r6;
    }

    public void addInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int i0;
        java.lang.Double r4, $r16, $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Map $r5, $r10, $r13, $r19;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r12, $r15, $r21;
        java.lang.Integer $r9, $r11, $r14, $r20;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 + $d0;

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d2;

        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r4 = (java.lang.Double) $r12;

        if r4 != null goto label2;

        $r19 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r21 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        goto label3;

     label2:
        $r13 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.lang.Double) $r15;

        $d4 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 + $d4;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r17);

     label3:
        goto label1;

     label4:
        return;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2;
        double d0, $d1, $d2;
        java.util.Map $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 + d0;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r3);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r6;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int i0;
        java.lang.Double r5, $r19, $r20, $r25, $r26;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r7, $r8, $r13, $r16, $r22;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11, $r15, $r18, $r24;
        java.lang.Integer $r12, $r14, $r17, $r23;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 - $d0;

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r7);

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r5 = (java.lang.Double) $r15;

        if r5 != null goto label2;

        $r22 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r24 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (java.lang.Double) $r24;

        $d6 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        $d7 = neg $d6;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r26);

        goto label3;

     label2:
        $r16 = $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r18 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Double) $r18;

        $d4 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r20);

     label3:
        goto label1;

     label4:
        return $r6;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 - d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r4;
        int i0;
        java.lang.Double r3, $r19, $r20, $r25, $r26, $r32, $r33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.util.Map $r5, $r6, $r8, $r13, $r16, $r22, $r29;
        java.util.Set $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object $r10, $r11, $r15, $r18, $r24, $r28, $r30, $r31;
        java.lang.Integer $r12, $r14, $r17, $r23;
        java.util.Iterator r35, r37;
        java.util.Map$Entry r36, r38;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 * $d0;

        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r5);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r35 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r28 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.util.Map$Entry) $r28;

        $r29 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r30 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getKey()>();

        $d11 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r31 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r32 = (java.lang.Double) $r31;

        $d12 = virtualinvoke $r32.<java.lang.Double: double doubleValue()>();

        $d13 = $d11 * $d12;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r33);

        goto label1;

     label2:
        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r37 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r3 = (java.lang.Double) $r15;

        if r3 != null goto label4;

        $r22 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d8 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r24 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (java.lang.Double) $r24;

        $d9 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        $d10 = $d8 * $d9;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r26);

        goto label5;

     label4:
        $r16 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d4 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r18 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Double) $r18;

        $d5 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d6 = $d4 * $d5;

        $d7 = $d3 + $d6;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r20);

     label5:
        goto label3;

     label6:
        return $r4;
    }

    public void multiplyInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1;
        int i0;
        java.lang.Double r2, $r16, $r17, $r22, $r23, $r29, $r30;
        java.util.Map $r3, $r5, $r10, $r13, $r19, $r26;
        java.util.Set $r4, $r6;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.lang.Object $r7, $r8, $r12, $r15, $r21, $r25, $r27, $r28;
        java.lang.Integer $r9, $r11, $r14, $r20;
        java.util.Iterator r32, r34;
        java.util.Map$Entry r33, r35;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r32 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r25 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r25;

        $r26 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r27 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        $d11 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r28 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r29 = (java.lang.Double) $r28;

        $d12 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        $d13 = $d11 * $d12;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r30);

        goto label1;

     label2:
        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r34 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r2 = (java.lang.Double) $r12;

        if r2 != null goto label4;

        $r19 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d8 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r21 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (java.lang.Double) $r21;

        $d9 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $d10 = $d8 * $d9;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r23);

        goto label5;

     label4:
        $r13 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $r15 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.lang.Double) $r15;

        $d5 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $d6 = $d4 * $d5;

        $d7 = $d3 + $d6;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r17);

     label5:
        goto label3;

     label6:
        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 * $d0;

        r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d2;

        return;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 * d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d2, d0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = (double) i0;

        $d3 = $d1 * $d0;

        $d2 = (double) i0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d3, $d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r4;
        int i0;
        java.lang.Double r3, $r19, $r20, $r25, $r26, $r32, $r33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        java.util.Map $r5, $r6, $r8, $r13, $r16, $r22, $r29;
        java.util.Set $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object $r10, $r11, $r15, $r18, $r24, $r28, $r30, $r31;
        java.lang.Integer $r12, $r14, $r17, $r23;
        java.util.Iterator r35, r37;
        java.util.Map$Entry r36, r38;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = $d1 / $d0;

        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r5);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r35 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r28 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.util.Map$Entry) $r28;

        $r29 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r30 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r31 = interfaceinvoke r36.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r32 = (java.lang.Double) $r31;

        $d16 = virtualinvoke $r32.<java.lang.Double: double doubleValue()>();

        $d17 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d18 = $d16 / $d17;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r33);

        goto label1;

     label2:
        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r37 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r3 = (java.lang.Double) $r15;

        if r3 != null goto label4;

        $r22 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d10 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d12 = neg $d10;

        $d11 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d13 = $d12 / $d11;

        $r24 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (java.lang.Double) $r24;

        $d14 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        $d15 = $d13 * $d14;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r26);

        goto label5;

     label4:
        $r16 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d3 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d5 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = $d5 / $d4;

        $r18 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Double) $r18;

        $d7 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 * $d7;

        $d9 = $d3 - $d8;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r20);

     label5:
        goto label3;

     label6:
        return $r4;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $d1 / d0;

        $d2 = 1.0 / d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d3, $d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient negate()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = neg $d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, -1.0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        org.apache.commons.math3.analysis.differentiation.SparseGradient$1 $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient$1;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient$1: void <init>(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r0);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d1, d0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r2, $r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d3, $d2);

        $d4 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = $d4 - d0;

        $d5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d7 = $d6 / $d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d7);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient abs()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

        return $r1;

     label1:
        return r0;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient ceil()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        $r1 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient floor()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $r1 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient rint()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        $r1 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d1);

        return $r1;
    }

    public long round()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        return $l0;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient signum()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d0);

        $r1 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r2;
        long l0, l1;
        double $d0, $d1;
        byte $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label2;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label3;

        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

     label2:
        return r0;

     label3:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1;
        long l0, l1;
        byte $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label2;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label3;

        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

     label2:
        return r0;

     label3:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r4;
        int i0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r5, $r6, $r9;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r10, $r11;
        java.lang.Double $r12, $r13;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r4 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, i0);

        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,java.util.Map)>($d1, $r5);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.Double) $r11;

        $d2 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d2, i0);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r13);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $d1 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 == 0 goto label2;

     label1:
        $r5 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>(#Infinity);

        return $r5;

     label2:
        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z2 != 0 goto label3;

        $d3 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        if $z3 == 0 goto label4;

     label3:
        $r6 = staticinvoke <org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double)>(#NaN);

        return $r6;

     label4:
        $d4 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d4);

        $d5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d5);

        $i3 = i1 + 27;

        if i0 <= $i3 goto label5;

        $r12 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return $r12;

     label5:
        $i4 = i0 + 27;

        if i1 <= $i4 goto label6;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return $r11;

     label6:
        $i5 = i0 + i1;

        i2 = $i5 / 2;

        $i6 = neg i2;

        r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>($i6);

        $i7 = neg i2;

        r3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>($i7);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r2);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r3);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8);

        r4 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        $r10 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>(i2);

        return $r10;
    }

    public static org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = 1.0 / $d0;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = $d2 * $d1;

        $d4 = -1.0 / $d3;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d5, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 = 0.5 / d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, $d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2, $d3, $d4;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 = 3.0 * d0;

        $d3 = $d2 * d0;

        $d4 = 1.0 / $d3;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r3, $r4;
        int i0, $i1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        return $r4;

     label1:
        if i0 != 3 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()>();

        return $r3;

     label2:
        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = (double) i0;

        $d2 = 1.0 / $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d2);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d4 = (double) i0;

        $i1 = i0 - 1;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d0, $i1);

        $d6 = $d4 * $d5;

        $d7 = 1.0 / $d6;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, $d7, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, d0);

        $d4 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = d0 - 1.0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, $d3);

        $d6 = d0 * $d5;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d2, $d6, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r5;
        int i0, $i1;
        double d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Map $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        return $r5;

     label1:
        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $i1 = i0 - 1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = $d2 * d0;

        $d3 = (double) i0;

        $d4 = $d3 * d0;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d5, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient exp()>();

        return $r4;
    }

    public static org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1, $r5, $r6, $r7;
        byte $b0, $b1, $b2;
        java.util.Map $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label3;

        $d5 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b1 = $d5 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double,double)>(1.0, #-Infinity);

        return $r7;

     label1:
        $d6 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b2 = $d6 cmpg 0.0;

        if $b2 >= 0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double,double)>(#NaN, #NaN);

        return $r6;

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r4;

        return $r5;

     label3:
        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d2);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d4 = d1 * $d3;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d1, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient exp()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, d0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient expm1()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d2);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient log()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = 1.0 / $d2;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient log10()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(10.0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d2 * $d3;

        $d5 = 1.0 / $d4;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d5, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient log1p()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = 1.0 + $d2;

        $d4 = 1.0 / $d3;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient cos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $d4 = neg $d3;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d4, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient sin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient tan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 = d0 * d0;

        $d3 = 1.0 + $d2;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient acos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = -1.0 / $d6;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d7, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient asin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = 1.0 - $d4;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = 1.0 / $d6;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d7, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient atan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = 1.0 + $d4;

        $d6 = 1.0 / $d5;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d6, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, r14;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r0);

        $r5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        r2 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        $d0 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $r11 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        $r12 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r11);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        r14 = virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>(2);

        goto label4;

     label1:
        $r7 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        $r8 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7);

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        r3 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>(-2);

        $d1 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $b1 = $d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $d2 = -3.141592653589793;

        goto label3;

     label2:
        $d2 = 3.141592653589793;

     label3:
        r14 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)>($d2);

     label4:
        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d3, $d4);

        r14.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d5;

        return r14;
    }

    public static org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient cosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d2);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient sinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d2);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient tanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, $d1, $d2, $d3;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d1);

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d2 = d0 * d0;

        $d3 = 1.0 - $d2;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, $d3, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient acosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double acosh(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = $d4 - 1.0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = 1.0 / $d6;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d7, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient asinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double asinh(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = $d4 + 1.0;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = 1.0 / $d6;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d7, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient atanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atanh(double)>($d0);

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = $d3 * $d2;

        $d5 = 1.0 - $d4;

        $d6 = 1.0 / $d5;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d6, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient toDegrees()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toDegrees(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double toDegrees(double)>(1.0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d2, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient toRadians()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double $d0, $d1, $d2;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toRadians(double)>($d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double toRadians(double)>(1.0);

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>($d1, $d2, $r2);

        return $r1;
    }

    public transient double taylor(double[])
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double[] r1;
        int $i0, i1;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: double[];

        d3 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d0 = r1[i1];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getDerivative(int)>(i1);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d3;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double, double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0, d1;
        java.util.Map $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: void <init>(double,double,java.util.Map)>(d0, d1, $r2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient[], org.apache.commons.math3.analysis.differentiation.SparseGradient[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r3, $r6, $r7, $r8, $r9, $r10, r11;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] r1, r2;
        org.apache.commons.math3.Field $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        double $d0, $d1, $d2;
        double[] r12, r13;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        $r3 = r1[0];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r11 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r5;

        i5 = 0;

     label1:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label2;

        $r9 = r1[i5];

        $r8 = r2[i5];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8);

        r11 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r10);

        i5 = i5 + 1;

        goto label1;

     label2:
        $i1 = lengthof r1;

        r12 = newarray (double)[$i1];

        i6 = 0;

     label3:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label4;

        $r7 = r1[i6];

        $d2 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r12[i6] = $d2;

        i6 = i6 + 1;

        goto label3;

     label4:
        $i3 = lengthof r2;

        r13 = newarray (double)[$i3];

        i7 = 0;

     label5:
        $i4 = lengthof r2;

        if i7 >= $i4 goto label6;

        $r6 = r2[i7];

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r13[i7] = $d1;

        i7 = i7 + 1;

        goto label5;

     label6:
        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r12, r13);

        r11.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r11;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double[], org.apache.commons.math3.analysis.differentiation.SparseGradient[])
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r3, $r6, $r7, $r8, r9;
        double[] r1, r10;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] r2;
        org.apache.commons.math3.Field $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, i3, i4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient[];

        $r3 = r2[0];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.Field getField()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r9 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) $r5;

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label2;

        $r7 = r2[i3];

        $d2 = r1[i3];

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>($d2);

        r9 = virtualinvoke r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i1 = lengthof r2;

        r10 = newarray (double)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r2;

        if i4 >= $i2 goto label4;

        $r6 = r2[i4];

        $d1 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double getValue()>();

        r10[i4] = $d1;

        i4 = i4 + 1;

        goto label3;

     label4:
        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r1, r10);

        r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d0;

        return r9;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, r5, $r6, $r7;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r2);

        $r7 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r4);

        r5 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7);

        $d3 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, $d2, $d1, $d0);

        r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d4;

        return r5;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, $r4, $r5;
        double d0, d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d0);

        $r5 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d1);

        r3 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r5);

        $d3 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, $d3, d1, $d2);

        r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d4;

        return r3;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, r5, r6, r7, $r8, $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r2);

        $r9 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r4);

        $r10 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9);

        $r11 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r6);

        r7 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r11);

        $d5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d5, $d4, $d3, $d2, $d1, $d0);

        r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d6;

        return r7;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, $r5, $r6, $r7, $r8;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d0);

        $r6 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d1);

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r6);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d2);

        r4 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8);

        $d5 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>(d0, $d5, d1, $d4, d2, $d3);

        r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d6;

        return r4;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, $r10, $r11, $r12, $r13, $r14, $r15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r7 := @parameter6: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r8 := @parameter7: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r2);

        $r11 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r4);

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r11);

        $r13 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r6);

        $r14 = virtualinvoke $r12.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r13);

        $r15 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>(r8);

        r9 = virtualinvoke $r14.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r15);

        $d7 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d3 = r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d2 = r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d1 = r7.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d8 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d7, $d6, $d5, $d4, $d3, $d2, $d1, $d0);

        r9.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d8;

        return r9;
    }

    public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient, double, org.apache.commons.math3.analysis.differentiation.SparseGradient)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r1, r2, r3, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d0);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d1);

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r7);

        $r9 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d2);

        $r10 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r9);

        $r11 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d3);

        r5 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r11);

        $d7 = r1.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d6 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d5 = r3.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d4 = r4.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d8 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>(d0, $d7, d1, $d6, d2, $d5, d3, $d4);

        r5.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value> = $d8;

        return r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, r2;
        java.lang.Object r1, $r9, $r11, $r12, $r15, $r16;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        double $d0, $d1, $d2, $d3;
        java.util.Map $r5, $r6, $r7, $r10, $r14;
        int $i0, $i1;
        java.util.Set $r8;
        java.lang.Double $r13, $r17;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.analysis.differentiation.SparseGradient;

        if $z0 == 0 goto label8;

        r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $d1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $d0 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d1, $d0, 1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        $r10 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z3 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.Double) $r12;

        $d2 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $r14 = r2.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r17 = (java.lang.Double) $r16;

        $d3 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $z4 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d2, $d3, 1);

        if $z4 != 0 goto label6;

        return 0;

     label6:
        goto label4;

     label7:
        return 1;

     label8:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0;
        double $d0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: double value>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i1 = 809 * $i0;

        $i2 = 743 + $i1;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: java.util.Map derivatives>;

        $i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i4 = 167 * $i3;

        $i5 = $i2 + $i4;

        return $i5;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5, $r6, $r7, $r8, $r9;
        double d0, d1, d2, d3;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        d3 := @parameter6: double;

        r4 := @parameter7: java.lang.Object;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r3;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>(d0, $r8, d1, $r7, d2, $r6, d3, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $r16 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r15 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r14 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r3;

        $r13 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r4;

        $r12 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r5;

        $r11 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r6;

        $r10 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r7;

        $r9 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r8;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9);

        return $r17;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r4, $r5, $r6, $r7;
        double d0, d1, d2;
        java.lang.Object r1, r2, r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r3;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>(d0, $r6, d1, $r5, d2, $r4);

        return $r7;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Object r1, r2, r3, r4, r5, r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $r12 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r11 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r10 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r3;

        $r9 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r4;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r5;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r6;

        $r13 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r12, $r11, $r10, $r9, $r8, $r7);

        return $r13;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r3, $r4, $r5;
        double d0, d1;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double,org.apache.commons.math3.analysis.differentiation.SparseGradient,double,org.apache.commons.math3.analysis.differentiation.SparseGradient)>(d0, $r4, d1, $r3);

        return $r5;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r7 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r2;

        $r6 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r3;

        $r5 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient,org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r8, $r7, $r6, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(double[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r4;
        double[] r1;
        java.lang.Object[] r2;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double[],org.apache.commons.math3.analysis.differentiation.SparseGradient[])>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r5;
        java.lang.Object[] r1, r2;
        org.apache.commons.math3.analysis.differentiation.SparseGradient[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r4 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) r1;

        $r3 = (org.apache.commons.math3.analysis.differentiation.SparseGradient[]) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient[],org.apache.commons.math3.analysis.differentiation.SparseGradient[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object atanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atanh()>();

        return $r1;
    }

    public volatile java.lang.Object asinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient asinh()>();

        return $r1;
    }

    public volatile java.lang.Object acosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient acosh()>();

        return $r1;
    }

    public volatile java.lang.Object tanh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient tanh()>();

        return $r1;
    }

    public volatile java.lang.Object sinh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sinh()>();

        return $r1;
    }

    public volatile java.lang.Object cosh()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cosh()>();

        return $r1;
    }

    public volatile java.lang.Object atan2(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object atan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient atan()>();

        return $r1;
    }

    public volatile java.lang.Object asin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient asin()>();

        return $r1;
    }

    public volatile java.lang.Object acos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient acos()>();

        return $r1;
    }

    public volatile java.lang.Object tan()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient tan()>();

        return $r1;
    }

    public volatile java.lang.Object sin()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sin()>();

        return $r1;
    }

    public volatile java.lang.Object cos()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cos()>();

        return $r1;
    }

    public volatile java.lang.Object log1p()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log1p()>();

        return $r1;
    }

    public volatile java.lang.Object log()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient log()>();

        return $r1;
    }

    public volatile java.lang.Object expm1()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient expm1()>();

        return $r1;
    }

    public volatile java.lang.Object exp()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient exp()>();

        return $r1;
    }

    public volatile java.lang.Object pow(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient rootN(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()>();

        return $r1;
    }

    public volatile java.lang.Object sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()>();

        return $r1;
    }

    public volatile java.lang.Object reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient reciprocal()>();

        return $r1;
    }

    public volatile java.lang.Object hypot(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object copySign(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object copySign(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object signum()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient signum()>();

        return $r1;
    }

    public volatile java.lang.Object rint()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient rint()>();

        return $r1;
    }

    public volatile java.lang.Object floor()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient floor()>();

        return $r1;
    }

    public volatile java.lang.Object ceil()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient ceil()>();

        return $r1;
    }

    public volatile java.lang.Object abs()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient abs()>();

        return $r1;
    }

    public volatile java.lang.Object remainder(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object add(double)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient negate()>();

        return $r1;
    }

    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.SparseGradient r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.SparseGradient;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.SparseGradient) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.SparseGradient: org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.differentiation.SparseGradient: long serialVersionUID> = 20131025L;

        return;
    }
}
