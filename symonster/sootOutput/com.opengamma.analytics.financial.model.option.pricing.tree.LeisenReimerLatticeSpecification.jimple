public class com.opengamma.analytics.financial.model.option.pricing.tree.LeisenReimerLatticeSpecification extends com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LeisenReimerLatticeSpecification r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LeisenReimerLatticeSpecification;

        specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: void <init>()>();

        return;
    }

    public double[] getParameters(double, double, double, double, double, int, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LeisenReimerLatticeSpecification r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d11, d12, d13, d14, d15, d16, d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64;
        int i0, $i1;
        byte $b2, $b3;
        double[] $r1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LeisenReimerLatticeSpecification;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        i0 := @parameter5: int;

        d5 := @parameter6: double;

        $i1 = i0 % 2;

        if $i1 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "The number of steps should be odd");

        $d18 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d6 = d3 * $d18;

        $d19 = d0 / d1;

        $d20 = staticinvoke <java.lang.Math: double log(double)>($d19);

        $d21 = d4 * d2;

        $d22 = $d20 + $d21;

        $d24 = $d22 / d6;

        $d23 = 0.5 * d6;

        d7 = $d24 + $d23;

        d8 = d7 - d6;

        $b2 = d7 cmpl 0.0;

        if $b2 < 0 goto label3;

        $d63 = 1.0;

        goto label4;

     label3:
        $d63 = -1.0;

     label4:
        d9 = $d63;

        $b3 = d8 cmpl 0.0;

        if $b3 < 0 goto label5;

        $d64 = 1.0;

        goto label6;

     label5:
        $d64 = -1.0;

     label6:
        $d25 = (double) i0;

        $d29 = $d25 + 0.3333333333333333;

        $d26 = (double) i0;

        $d27 = $d26 + 1.0;

        $d28 = 0.1 / $d27;

        $d30 = $d29 + $d28;

        d11 = d7 / $d30;

        $d31 = (double) i0;

        $d35 = $d31 + 0.3333333333333333;

        $d32 = (double) i0;

        $d33 = $d32 + 1.0;

        $d34 = 0.1 / $d33;

        $d36 = $d35 + $d34;

        d12 = d8 / $d36;

        $d42 = d9 * 0.5;

        $d37 = neg d11;

        $d40 = $d37 * d11;

        $d38 = (double) i0;

        $d39 = $d38 + 0.16666666666666666;

        $d41 = $d40 * $d39;

        $d43 = staticinvoke <java.lang.Math: double exp(double)>($d41);

        $d44 = 1.0 - $d43;

        $d45 = staticinvoke <java.lang.Math: double sqrt(double)>($d44);

        $d46 = $d42 * $d45;

        d13 = 0.5 + $d46;

        $d52 = $d64 * 0.5;

        $d47 = neg d12;

        $d50 = $d47 * d12;

        $d48 = (double) i0;

        $d49 = $d48 + 0.16666666666666666;

        $d51 = $d50 * $d49;

        $d53 = staticinvoke <java.lang.Math: double exp(double)>($d51);

        $d54 = 1.0 - $d53;

        $d55 = staticinvoke <java.lang.Math: double sqrt(double)>($d54);

        $d56 = $d52 * $d55;

        d14 = 0.5 + $d56;

        $d57 = d4 * d5;

        d15 = staticinvoke <java.lang.Math: double exp(double)>($d57);

        $d58 = d15 * d13;

        d16 = $d58 / d14;

        $d59 = d14 * d16;

        $d61 = d15 - $d59;

        $d60 = 1.0 - d14;

        d17 = $d61 / $d60;

        $r1 = newarray (double)[4];

        $r1[0] = d16;

        $r1[1] = d17;

        $r1[2] = d14;

        $d62 = 1.0 - d14;

        $r1[3] = $d62;

        return $r1;
    }
}
