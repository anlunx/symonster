public class org.apache.commons.math3.distribution.CauchyDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private final double median;
    private final double scale;
    private final double solverAbsoluteAccuracy;

    public void <init>()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        specialinvoke r0.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double d0, d1, d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, d0, d1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>(r1, d0, d1, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SCALE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale> = d1;

        r0.<org.apache.commons.math3.distribution.CauchyDistribution: double median> = d0;

        r0.<org.apache.commons.math3.distribution.CauchyDistribution: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double median>;

        $d3 = d0 - $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>($d4);

        $d6 = $d5 / 3.141592653589793;

        $d7 = 0.5 + $d6;

        return $d7;
    }

    public double getMedian()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double median>;

        return $d0;
    }

    public double getScale()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double median>;

        d1 = d0 - $d2;

        $d8 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        $d6 = d1 * d1;

        $d4 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        $d3 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        $d5 = $d4 * $d3;

        $d7 = $d6 + $d5;

        $d9 = $d8 / $d7;

        $d10 = 0.3183098861837907 * $d9;

        return $d10;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        d7 = #-Infinity;

        goto label5;

     label3:
        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label4;

        d7 = #Infinity;

        goto label5;

     label4:
        $d3 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double median>;

        $d4 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double scale>;

        $d1 = d0 - 0.5;

        $d2 = 3.141592653589793 * $d1;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d2);

        $d6 = $d4 * $d5;

        d7 = $d3 + $d6;

     label5:
        return d7;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.CauchyDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return #NaN;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return #NaN;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return 0;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.CauchyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.CauchyDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.CauchyDistribution: long serialVersionUID> = 8589540077390120676L;

        <org.apache.commons.math3.distribution.CauchyDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
