class org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
{
    private double cXX;
    private double cXY;
    private double cX1;
    private double cYX;
    private double cYY;
    private double cY1;
    private double c1Y;
    private double c1X;
    private double c11;

    public void <init>(java.awt.geom.AffineTransform) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        java.awt.geom.AffineTransform r1;
        double[] r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = newarray (double)[6];

        virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r2);

        $d0 = r2[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX> = $d0;

        $d1 = r2[2];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY> = $d1;

        $d2 = r2[4];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1> = $d2;

        $d3 = r2[1];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX> = $d3;

        $d4 = r2[3];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY> = $d4;

        $d5 = r2[5];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1> = $d5;

        $d10 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1>;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d8 = neg $d6;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1>;

        $d11 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d10, $d9, $d8, $d7);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1Y> = $d11;

        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d15 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1>;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        $d14 = neg $d12;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1>;

        $d17 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d16, $d15, $d14, $d13);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1X> = $d17;

        $d22 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d21 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d18 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        $d20 = neg $d18;

        $d19 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d23 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d22, $d21, $d20, $d19);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11> = $d23;

        $d24 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11>;

        $d25 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d24);

        $b0 = $d25 cmpg 1.0E-20;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NON_INVERTIBLE_TRANSFORM>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label1:
        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, $r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cX1>;

        $d5 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d4, d0, $d3, d1, $d2, 1.0);

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cY1>;

        $d9 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d8, d0, $d7, d1, $d6, 1.0);

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d5, $d9);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Line apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line r2, $r3;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1X>;

        $d5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c1Y>;

        $d7 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double c11>;

        $d9 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d4, $d5, $d6, $d7, $d8, $d9);

        $d10 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXX>;

        $d11 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cXY>;

        $d13 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        d1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d10, $d11, $d12, $d13);

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYX>;

        $d15 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: double cYY>;

        $d17 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d14, $d15, $d16, $d17);

        $d19 = d2 * d2;

        $d18 = d1 * d1;

        $d20 = $d19 + $d18;

        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d20);

        d3 = 1.0 / $d21;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d23 = neg d2;

        $d22 = neg d1;

        $d24 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d23, $d22);

        $d25 = 3.141592653589793 + $d24;

        $d26 = d3 * d1;

        $d27 = d3 * d2;

        $d28 = d3 * d0;

        $d29 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(double,double,double,double,double,org.apache.commons.math3.geometry.euclidean.twod.Line$1)>($d25, $d26, $d27, $d28, $d29, null);

        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, r3, $r8;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r4, $r12;
        org.apache.commons.math3.geometry.euclidean.twod.Line r5, r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r7, $r9;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r10, $r11;
        boolean $z0;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint $r13;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r8;

        r5 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r2;

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r3;

        $r9 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        $r10 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector)>($r9);

        $r11 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)>($r10);

        r7 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)>($r11);

        $r12 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $z0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r5);

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>(r7, $z0, $d0);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        return $r13;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Line apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform: org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
}
