public class org.apache.commons.math3.linear.BlockFieldMatrix extends org.apache.commons.math3.linear.AbstractFieldMatrix implements java.io.Serializable
{
    public static final int BLOCK_SIZE;
    private static final long serialVersionUID;
    private final org.apache.commons.math3.FieldElement[][] blocks;
    private final int rows;
    private final int columns;
    private final int blockRows;
    private final int blockColumns;

    public void <init>(org.apache.commons.math3.Field, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.Field r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.FieldElement[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r1, i0, i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows> = i0;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns> = i1;

        $i2 = i0 + 36;

        $i3 = $i2 - 1;

        $i4 = $i3 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows> = $i4;

        $i5 = i1 + 36;

        $i6 = $i5 - 1;

        $i7 = $i6 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns> = $i7;

        $r2 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] createBlocksLayout(org.apache.commons.math3.Field,int,int)>(r1, i0, i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = $r2;

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1, $r3;
        org.apache.commons.math3.FieldElement[] $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        $i0 = lengthof r1;

        $r2 = r1[0];

        $i1 = lengthof $r2;

        $r3 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] toBlocksLayout(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(int,int,org.apache.commons.math3.FieldElement[][],boolean)>($i0, $i1, $r3, 0);

        return;
    }

    public void <init>(int, int, org.apache.commons.math3.FieldElement[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i21, i22;
        org.apache.commons.math3.FieldElement[][] r1, $r5, $r12;
        boolean z0;
        org.apache.commons.math3.Field $r2, $r10;
        org.apache.commons.math3.FieldElement[] $r3, $r4, $r7, $r9;
        java.lang.Object $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;
        java.lang.Object[][] $r11;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement[][];

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, i0, i1);

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows> = i0;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns> = i1;

        $i3 = i0 + 36;

        $i4 = $i3 - 1;

        $i5 = $i4 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows> = $i5;

        $i6 = i1 + 36;

        $i7 = $i6 - 1;

        $i8 = $i7 / 36;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns> = $i8;

        if z0 == 0 goto label1;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i17 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        $i16 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i18 = $i17 * $i16;

        $r11 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r10, $i18, -1);

        $r12 = (org.apache.commons.math3.FieldElement[][]) $r11;

        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = $r12;

        goto label2;

     label1:
        r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks> = r1;

     label2:
        i19 = 0;

        i20 = 0;

     label3:
        $i21 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i20 >= $i21 goto label8;

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i20);

        i22 = 0;

     label4:
        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i22 >= $i9 goto label7;

        $r3 = r1[i19];

        $i10 = lengthof $r3;

        $i11 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i22);

        $i12 = i2 * $i11;

        if $i10 == $i12 goto label5;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r9 = r1[i19];

        $i13 = lengthof $r9;

        $i14 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i22);

        $i15 = i2 * $i14;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i13, $i15);

        throw $r8;

     label5:
        if z0 == 0 goto label6;

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r4 = r1[i19];

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (org.apache.commons.math3.FieldElement[]) $r6;

        $r5[i19] = $r7;

     label6:
        i22 = i22 + 1;

        i19 = i19 + 1;

        goto label4;

     label7:
        i20 = i20 + 1;

        goto label3;

     label8:
        return;
    }

    public static org.apache.commons.math3.FieldElement[][] toBlocksLayout(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.FieldElement[][] r0, r9;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24, i25;
        org.apache.commons.math3.FieldElement[] r1, $r2, $r5, $r6;
        java.lang.Object[][] $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;
        org.apache.commons.math3.Field r8;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[][];

        i0 = lengthof r0;

        $r2 = r0[0];

        i1 = lengthof $r2;

        $i10 = i0 + 36;

        $i11 = $i10 - 1;

        i2 = $i11 / 36;

        $i12 = i1 + 36;

        $i13 = $i12 - 1;

        i3 = $i13 / 36;

        i19 = 0;

     label1:
        $i14 = lengthof r0;

        if i19 >= $i14 goto label3;

        $r6 = r0[i19];

        i20 = lengthof $r6;

        if i20 == i1 goto label2;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i20);

        throw $r7;

     label2:
        i19 = i19 + 1;

        goto label1;

     label3:
        r8 = staticinvoke <org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][])>(r0);

        $i15 = i2 * i3;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r8, $i15, -1);

        r9 = (org.apache.commons.math3.FieldElement[][]) $r3;

        i21 = 0;

        i22 = 0;

     label4:
        if i22 >= i2 goto label9;

        i4 = i22 * 36;

        $i16 = i4 + 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i16, i0);

        i6 = i5 - i4;

        i23 = 0;

     label5:
        if i23 >= i3 goto label8;

        i7 = i23 * 36;

        $i17 = i7 + 36;

        i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i17, i1);

        i9 = i8 - i7;

        $i18 = i6 * i9;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r8, $i18);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        r9[i21] = r1;

        i24 = 0;

        i25 = i4;

     label6:
        if i25 >= i5 goto label7;

        $r5 = r0[i25];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i7, r1, i24, i9);

        i24 = i24 + i9;

        i25 = i25 + 1;

        goto label6;

     label7:
        i21 = i21 + 1;

        i23 = i23 + 1;

        goto label5;

     label8:
        i22 = i22 + 1;

        goto label4;

     label9:
        return r9;
    }

    public static org.apache.commons.math3.FieldElement[][] createBlocksLayout(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        org.apache.commons.math3.FieldElement[][] r1;
        java.lang.Object[][] $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.FieldElement[] $r4;

        r0 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i10 = i0 + 36;

        $i11 = $i10 - 1;

        i2 = $i11 / 36;

        $i12 = i1 + 36;

        $i13 = $i12 - 1;

        i3 = $i13 / 36;

        $i14 = i2 * i3;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r0, $i14, -1);

        r1 = (org.apache.commons.math3.FieldElement[][]) $r2;

        i18 = 0;

        i19 = 0;

     label1:
        if i19 >= i2 goto label4;

        i4 = i19 * 36;

        $i15 = i4 + 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i15, i0);

        i6 = i5 - i4;

        i20 = 0;

     label2:
        if i20 >= i3 goto label3;

        i7 = i20 * 36;

        $i16 = i7 + 36;

        i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i16, i1);

        i9 = i8 - i7;

        $i17 = i6 * i9;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r0, $i17);

        $r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        r1[i18] = $r4;

        i18 = i18 + 1;

        i20 = i20 + 1;

        goto label2;

     label3:
        i19 = i19 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r1;
        int i0, i1;
        org.apache.commons.math3.Field $r2;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r2, i0, i1);

        return $r1;
    }

    public org.apache.commons.math3.linear.FieldMatrix copy()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r2;
        org.apache.commons.math3.Field $r3;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.commons.math3.FieldElement[][] $r4, $r5, $r6, $r7;
        org.apache.commons.math3.FieldElement[] $r8, $r9, $r10;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $r2 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r3, $i1, $i0);

        i4 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i2 = lengthof $r4;

        if i4 >= $i2 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r10 = $r5[i4];

        $r6 = $r2.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r9 = $r6[i4];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r8 = $r7[i4];

        $i3 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r6, $r7, $r9;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement[] r4, r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        java.lang.ClassCastException $r8;
        org.apache.commons.math3.Field $r10;
        org.apache.commons.math3.FieldElement[][] $r11, $r12;
        org.apache.commons.math3.FieldElement $r13, $r14, $r16;
        java.lang.Object $r15;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r6 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix add(org.apache.commons.math3.linear.BlockFieldMatrix)>($r6);

     label02:
        return $r7;

     label03:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r9 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r10, $i5, $i4);

        i12 = 0;

        i13 = 0;

     label04:
        $i6 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i13 >= $i6 goto label11;

        i14 = 0;

     label05:
        $i7 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i14 >= $i7 goto label10;

        $r11 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r11[i12];

        $r12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r12[i12];

        i0 = i13 * 36;

        $i9 = i0 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i8);

        i2 = i14 * 36;

        $i11 = i2 + 36;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i11, $i10);

        i15 = 0;

        i16 = i0;

     label06:
        if i16 >= i1 goto label09;

        i17 = i2;

     label07:
        if i17 >= i3 goto label08;

        $r13 = r5[i15];

        $r14 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i16, i17);

        $r15 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r14);

        $r16 = (org.apache.commons.math3.FieldElement) $r15;

        r4[i15] = $r16;

        i15 = i15 + 1;

        i17 = i17 + 1;

        goto label07;

     label08:
        i16 = i16 + 1;

        goto label06;

     label09:
        i12 = i12 + 1;

        i14 = i14 + 1;

        goto label05;

     label10:
        i13 = i13 + 1;

        goto label04;

     label11:
        return $r9;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }

    public org.apache.commons.math3.linear.BlockFieldMatrix add(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, $r6;
        org.apache.commons.math3.FieldElement[] r3, r4, r5;
        org.apache.commons.math3.Field $r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.FieldElement[][] $r8, $r9, $r10, $r11;
        org.apache.commons.math3.FieldElement $r12, $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r6 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r7, $i1, $i0);

        i4 = 0;

     label1:
        $r8 = $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i2 = lengthof $r8;

        if i4 >= $i2 goto label4;

        $r9 = $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r9[i4];

        $r10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r10[i4];

        $r11 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r11[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r3;

        if i5 >= $i3 goto label3;

        $r13 = r4[i5];

        $r12 = r5[i5];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r12);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r3[i5] = $r15;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r6;
    }

    public org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r6, $r7, $r9;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement[] r4, r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        java.lang.ClassCastException $r8;
        org.apache.commons.math3.Field $r10;
        org.apache.commons.math3.FieldElement[][] $r11, $r12;
        org.apache.commons.math3.FieldElement $r13, $r14, $r16;
        java.lang.Object $r15;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r6 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix subtract(org.apache.commons.math3.linear.BlockFieldMatrix)>($r6);

     label02:
        return $r7;

     label03:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r9 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r10, $i5, $i4);

        i12 = 0;

        i13 = 0;

     label04:
        $i6 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i13 >= $i6 goto label11;

        i14 = 0;

     label05:
        $i7 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i14 >= $i7 goto label10;

        $r11 = $r9.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r11[i12];

        $r12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r12[i12];

        i0 = i13 * 36;

        $i9 = i0 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i8);

        i2 = i14 * 36;

        $i11 = i2 + 36;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i11, $i10);

        i15 = 0;

        i16 = i0;

     label06:
        if i16 >= i1 goto label09;

        i17 = i2;

     label07:
        if i17 >= i3 goto label08;

        $r13 = r5[i15];

        $r14 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i16, i17);

        $r15 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r14);

        $r16 = (org.apache.commons.math3.FieldElement) $r15;

        r4[i15] = $r16;

        i15 = i15 + 1;

        i17 = i17 + 1;

        goto label07;

     label08:
        i16 = i16 + 1;

        goto label06;

     label09:
        i12 = i12 + 1;

        i14 = i14 + 1;

        goto label05;

     label10:
        i13 = i13 + 1;

        goto label04;

     label11:
        return $r9;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }

    public org.apache.commons.math3.linear.BlockFieldMatrix subtract(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, $r6;
        org.apache.commons.math3.FieldElement[] r3, r4, r5;
        org.apache.commons.math3.Field $r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.FieldElement[][] $r8, $r9, $r10, $r11;
        org.apache.commons.math3.FieldElement $r12, $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r6 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r7, $i1, $i0);

        i4 = 0;

     label1:
        $r8 = $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i2 = lengthof $r8;

        if i4 >= $i2 goto label4;

        $r9 = $r6.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r9[i4];

        $r10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r10[i4];

        $r11 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r11[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r3;

        if i5 >= $i3 goto label3;

        $r13 = r4[i5];

        $r12 = r5[i5];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r12);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r3[i5] = $r15;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r6;
    }

    public org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r5;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r3, r4;
        org.apache.commons.math3.Field $r6;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.FieldElement[][] $r7, $r8, $r9;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r5 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i1, $i0);

        i4 = 0;

     label1:
        $r7 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i2 = lengthof $r7;

        if i4 >= $i2 goto label4;

        $r8 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r8[i4];

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r9[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r3;

        if i5 >= $i3 goto label3;

        $r10 = r4[i5];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r3[i5] = $r12;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r5;
    }

    public org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r5;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r3, r4;
        org.apache.commons.math3.Field $r6;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.FieldElement[][] $r7, $r8, $r9;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r5 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i1, $i0);

        i4 = 0;

     label1:
        $r7 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i2 = lengthof $r7;

        if i4 >= $i2 goto label4;

        $r8 = $r5.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r3 = $r8[i4];

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r9[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r3;

        if i5 >= $i3 goto label3;

        $r10 = r4[i5];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r3[i5] = $r12;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r5;
    }

    public org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r7, $r8, $r10;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement r4, $r16, $r18, $r19, $r20, r23;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28, i29;
        org.apache.commons.math3.FieldElement[] r5, r6;
        java.lang.ClassCastException $r9;
        org.apache.commons.math3.Field $r11, $r12;
        java.lang.Object $r13, $r17, $r21, $r22;
        org.apache.commons.math3.FieldElement[][] $r14, $r15;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

     label01:
        $r7 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.linear.BlockFieldMatrix multiply(org.apache.commons.math3.linear.BlockFieldMatrix)>($r7);

     label02:
        return $r8;

     label03:
        $r9 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r10 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i9 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        specialinvoke $r10.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r11, $i8, $i9);

        $r12 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r4 = (org.apache.commons.math3.FieldElement) $r13;

        i21 = 0;

        i22 = 0;

     label04:
        $i10 = $r10.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i22 >= $i10 goto label15;

        i0 = i22 * 36;

        $i12 = i0 + 36;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i11);

        i23 = 0;

     label05:
        $i13 = $r10.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i23 >= $i13 goto label14;

        i2 = i23 * 36;

        $i14 = i2 + 36;

        $i15 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: int getColumnDimension()>();

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i14, $i15);

        $r14 = $r10.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r5 = $r14[i21];

        i24 = 0;

     label06:
        $i16 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i24 >= $i16 goto label13;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i24);

        $r15 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i17 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i18 = i22 * $i17;

        $i19 = $i18 + i24;

        r6 = $r15[$i19];

        i5 = i24 * 36;

        i25 = 0;

        i26 = i0;

     label07:
        if i26 >= i1 goto label12;

        $i20 = i26 - i0;

        i6 = $i20 * i4;

        i7 = i6 + i4;

        i27 = i2;

     label08:
        if i27 >= i3 goto label11;

        r23 = r4;

        i28 = i5;

        i29 = i6;

     label09:
        if i29 >= i7 goto label10;

        $r19 = r6[i29];

        $r20 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>(i28, i27);

        $r21 = interfaceinvoke $r19.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r20);

        $r22 = interfaceinvoke r23.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r21);

        r23 = (org.apache.commons.math3.FieldElement) $r22;

        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label09;

     label10:
        $r16 = r5[i25];

        $r17 = interfaceinvoke $r16.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r23);

        $r18 = (org.apache.commons.math3.FieldElement) $r17;

        r5[i25] = $r18;

        i25 = i25 + 1;

        i27 = i27 + 1;

        goto label08;

     label11:
        i26 = i26 + 1;

        goto label07;

     label12:
        i24 = i24 + 1;

        goto label06;

     label13:
        i21 = i21 + 1;

        i23 = i23 + 1;

        goto label05;

     label14:
        i22 = i22 + 1;

        goto label04;

     label15:
        return $r10;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }

    public org.apache.commons.math3.linear.BlockFieldMatrix multiply(org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1, $r7;
        org.apache.commons.math3.FieldElement r3, $r14, $r16, $r17, $r18, $r21, $r22, $r25, $r26, $r27, $r30, $r31, $r32, $r35, $r36, $r37, r40;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39;
        org.apache.commons.math3.FieldElement[] r4, r5, r6;
        org.apache.commons.math3.Field $r8, $r9;
        java.lang.Object $r10, $r15, $r19, $r20, $r23, $r24, $r28, $r29, $r33, $r34, $r38, $r39;
        org.apache.commons.math3.FieldElement[][] $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix)>(r1);

        $r7 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i9 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r7.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r8, $i10, $i9);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r3 = (org.apache.commons.math3.FieldElement) $r10;

        i31 = 0;

        i32 = 0;

     label01:
        $i11 = $r7.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i32 >= $i11 goto label13;

        i0 = i32 * 36;

        $i13 = i0 + 36;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i13, $i12);

        i33 = 0;

     label02:
        $i14 = $r7.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i33 >= $i14 goto label12;

        i2 = specialinvoke $r7.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i33);

        i3 = i2 + i2;

        i4 = i3 + i2;

        i5 = i4 + i2;

        $r11 = $r7.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r4 = $r11[i31];

        i34 = 0;

     label03:
        $i15 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i34 >= $i15 goto label11;

        i6 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i34);

        $r12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i16 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i17 = i32 * $i16;

        $i18 = $i17 + i34;

        r5 = $r12[$i18];

        $r13 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i19 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i20 = i34 * $i19;

        $i21 = $i20 + i33;

        r6 = $r13[$i21];

        i35 = 0;

        i36 = i0;

     label04:
        if i36 >= i1 goto label10;

        $i22 = i36 - i0;

        i7 = $i22 * i6;

        i8 = i7 + i6;

        i37 = 0;

     label05:
        if i37 >= i2 goto label09;

        r40 = r3;

        i38 = i7;

        i39 = i37;

     label06:
        $i23 = i8 - 3;

        if i38 >= $i23 goto label07;

        $r22 = r5[i38];

        $r21 = r6[i39];

        $r23 = interfaceinvoke $r22.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r21);

        $r24 = interfaceinvoke r40.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r23);

        $r27 = (org.apache.commons.math3.FieldElement) $r24;

        $i25 = i38 + 1;

        $r26 = r5[$i25];

        $i26 = i39 + i2;

        $r25 = r6[$i26];

        $r28 = interfaceinvoke $r26.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r25);

        $r29 = interfaceinvoke $r27.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r28);

        $r32 = (org.apache.commons.math3.FieldElement) $r29;

        $i27 = i38 + 2;

        $r31 = r5[$i27];

        $i28 = i39 + i3;

        $r30 = r6[$i28];

        $r33 = interfaceinvoke $r31.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r30);

        $r34 = interfaceinvoke $r32.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r33);

        $r37 = (org.apache.commons.math3.FieldElement) $r34;

        $i29 = i38 + 3;

        $r36 = r5[$i29];

        $i30 = i39 + i4;

        $r35 = r6[$i30];

        $r38 = interfaceinvoke $r36.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r35);

        $r39 = interfaceinvoke $r37.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r38);

        r40 = (org.apache.commons.math3.FieldElement) $r39;

        i38 = i38 + 4;

        i39 = i39 + i5;

        goto label06;

     label07:
        if i38 >= i8 goto label08;

        $i24 = i38;

        i38 = i38 + 1;

        $r18 = r5[$i24];

        $r17 = r6[i39];

        $r19 = interfaceinvoke $r18.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r17);

        $r20 = interfaceinvoke r40.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r19);

        r40 = (org.apache.commons.math3.FieldElement) $r20;

        i39 = i39 + i2;

        goto label07;

     label08:
        $r14 = r4[i35];

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r40);

        $r16 = (org.apache.commons.math3.FieldElement) $r15;

        r4[i35] = $r16;

        i35 = i35 + 1;

        i37 = i37 + 1;

        goto label05;

     label09:
        i36 = i36 + 1;

        goto label04;

     label10:
        i34 = i34 + 1;

        goto label03;

     label11:
        i31 = i31 + 1;

        i33 = i33 + 1;

        goto label02;

     label12:
        i32 = i32 + 1;

        goto label01;

     label13:
        return $r7;
    }

    public org.apache.commons.math3.FieldElement[][] getData()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1, $r5, $r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22;
        org.apache.commons.math3.FieldElement[] r2, $r6, $r8;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>($r3, $i3, $i4);

        r1 = (org.apache.commons.math3.FieldElement[][]) $r4;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i6 = $i5 - 1;

        $i7 = $i6 * 36;

        i0 = $i8 - $i7;

        i16 = 0;

     label1:
        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i16 >= $i9 goto label6;

        i1 = i16 * 36;

        $i11 = i1 + 36;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i11, $i10);

        i17 = 0;

        i18 = 0;

        i19 = i1;

     label2:
        if i19 >= i2 goto label5;

        r2 = r1[i19];

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        i20 = i16 * $i12;

        i21 = 0;

        i22 = 0;

     label3:
        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i14 = $i13 - 1;

        if i22 >= $i14 goto label4;

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i15 = i20;

        i20 = i20 + 1;

        $r8 = $r7[$i15];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, i17, r2, i21, 36);

        i21 = i21 + 36;

        i22 = i22 + 1;

        goto label3;

     label4:
        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r6 = $r5[i20];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i18, r2, i21, i0);

        i17 = i17 + 36;

        i18 = i18 + i0;

        i19 = i19 + 1;

        goto label2;

     label5:
        i16 = i16 + 1;

        goto label1;

     label6:
        return r1;
    }

    public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, i50, i51, i52, i53, i54, i55;
        org.apache.commons.math3.FieldElement[] r2, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement[][] $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i15 = i1 - i0;

        $i18 = $i15 + 1;

        $i16 = i3 - i2;

        $i17 = $i16 + 1;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r4, $i18, $i17);

        i4 = i0 / 36;

        i5 = i0 % 36;

        i6 = i2 / 36;

        i7 = i2 % 36;

        i50 = i4;

        i51 = 0;

     label1:
        $i19 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i51 >= $i19 goto label8;

        i8 = specialinvoke $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i51);

        i52 = i6;

        i53 = 0;

     label2:
        $i20 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i53 >= $i20 goto label7;

        i9 = specialinvoke $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i53);

        $i21 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i22 = i51 * $i21;

        i10 = $i22 + i53;

        $r5 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r5[i10];

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i50 * $i23;

        i11 = $i24 + i52;

        i12 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i52);

        $i25 = i8 + i5;

        i13 = $i25 - 36;

        $i26 = i9 + i7;

        i14 = $i26 - 36;

        if i13 <= 0 goto label4;

        if i14 <= 0 goto label3;

        $i39 = i52 + 1;

        i54 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i39);

        $r16 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r17 = $r16[i11];

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r17, i12, i5, 36, i7, 36, r2, i9, 0, 0);

        $r18 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i40 = i11 + 1;

        $r19 = $r18[$i40];

        $i41 = i9 - i14;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r19, i54, i5, 36, 0, i14, r2, i9, 0, $i41);

        $r20 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i42 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i43 = i11 + $i42;

        $r21 = $r20[$i43];

        $i44 = i8 - i13;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r21, i12, 0, i13, i7, 36, r2, i9, $i44, 0);

        $r22 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i45 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i46 = i11 + $i45;

        $i47 = $i46 + 1;

        $r23 = $r22[$i47];

        $i49 = i8 - i13;

        $i48 = i9 - i14;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r23, i54, 0, i13, 0, i14, r2, i9, $i49, $i48);

        goto label6;

     label3:
        $r12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r13 = $r12[i11];

        $i34 = i9 + i7;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r13, i12, i5, 36, i7, $i34, r2, i9, 0, 0);

        $r14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i35 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i36 = i11 + $i35;

        $r15 = $r14[$i36];

        $i38 = i9 + i7;

        $i37 = i8 - i13;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r15, i12, 0, i13, i7, $i38, r2, i9, $i37, 0);

        goto label6;

     label4:
        if i14 <= 0 goto label5;

        $i29 = i52 + 1;

        i55 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>($i29);

        $r8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r9 = $r8[i11];

        $i30 = i8 + i5;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r9, i12, i5, $i30, i7, 36, r2, i9, 0, 0);

        $r10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i31 = i11 + 1;

        $r11 = $r10[$i31];

        $i33 = i8 + i5;

        $i32 = i9 - i14;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r11, i55, i5, $i33, 0, i14, r2, i9, 0, $i32);

        goto label6;

     label5:
        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $r7 = $r6[i11];

        $i28 = i8 + i5;

        $i27 = i9 + i7;

        specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void copyBlockPart(org.apache.commons.math3.FieldElement[],int,int,int,int,int,org.apache.commons.math3.FieldElement[],int,int,int)>($r7, i12, i5, $i28, i7, $i27, r2, i9, 0, 0);

     label6:
        i52 = i52 + 1;

        i53 = i53 + 1;

        goto label2;

     label7:
        i50 = i50 + 1;

        i51 = i51 + 1;

        goto label1;

     label8:
        return $r3;
    }

    private void copyBlockPart(org.apache.commons.math3.FieldElement[], int, int, int, int, int, org.apache.commons.math3.FieldElement[], int, int, int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, i11, i12, i13;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: org.apache.commons.math3.FieldElement[];

        i5 := @parameter7: int;

        i6 := @parameter8: int;

        i7 := @parameter9: int;

        i8 = i4 - i3;

        $i9 = i1 * i0;

        i11 = $i9 + i3;

        $i10 = i6 * i5;

        i12 = $i10 + i7;

        i13 = i1;

     label1:
        if i13 >= i2 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i11, r2, i12, i8);

        i11 = i11 + i0;

        i12 = i12 + i5;

        i13 = i13 + 1;

        goto label1;

     label2:
        return;
    }

    public void setSubMatrix(org.apache.commons.math3.FieldElement[][], int, int) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[][] r1, $r4;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40, i41, i42;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r5, r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;
        org.apache.commons.math3.exception.NoDataException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r3 = r1[0];

        i2 = lengthof $r3;

        if i2 != 0 goto label01;

        $r7 = new org.apache.commons.math3.exception.NoDataException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r7.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r8);

        throw $r7;

     label01:
        $i14 = lengthof r1;

        $i15 = i0 + $i14;

        i3 = $i15 - 1;

        $i16 = i1 + i2;

        i4 = $i16 - 1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i3, i1, i4);

        i34 = lengthof r1;

        i35 = 0;

     label02:
        if i35 >= i34 goto label04;

        r10 = r1[i35];

        $i32 = lengthof r10;

        if $i32 == i2 goto label03;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i33 = lengthof r10;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i2, $i33);

        throw $r6;

     label03:
        i35 = i35 + 1;

        goto label02;

     label04:
        i36 = i0 / 36;

        $i17 = i3 + 36;

        i37 = $i17 / 36;

        i38 = i1 / 36;

        $i18 = i4 + 36;

        i39 = $i18 / 36;

        i40 = i36;

     label05:
        if i40 >= i37 goto label10;

        i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i40);

        i6 = i40 * 36;

        i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, i6);

        $i20 = i3 + 1;

        $i19 = i6 + i5;

        i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i20, $i19);

        i41 = i38;

     label06:
        if i41 >= i39 goto label09;

        i9 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i41);

        i10 = i41 * 36;

        i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i1, i10);

        $i22 = i4 + 1;

        $i21 = i10 + i9;

        i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i21);

        i13 = i12 - i11;

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i40 * $i23;

        $i25 = $i24 + i41;

        r2 = $r4[$i25];

        i42 = i7;

     label07:
        if i42 >= i8 goto label08;

        $i26 = i42 - i0;

        $r5 = r1[$i26];

        $i31 = i11 - i1;

        $i27 = i42 - i6;

        $i29 = $i27 * i9;

        $i28 = i11 - i10;

        $i30 = $i29 + $i28;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i31, r2, $i30, i13);

        i42 = i42 + 1;

        goto label07;

     label08:
        i41 = i41 + 1;

        goto label06;

     label09:
        i40 = i40 + 1;

        goto label05;

     label10:
        return;
    }

    public org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        org.apache.commons.math3.FieldElement[] r2, r8;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement[][] $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        $r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r4, 1, $i5);

        i1 = i0 / 36;

        $i6 = i1 * 36;

        i2 = i0 - $i6;

        i16 = 0;

        i17 = 0;

        $r5 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r8 = $r5[0];

        i18 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i18 >= $i7 goto label4;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i18);

        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i9 = i1 * $i8;

        $i10 = $i9 + i18;

        r2 = $r6[$i10];

        $i11 = lengthof r8;

        i4 = $i11 - i17;

        if i3 <= i4 goto label2;

        $i13 = i2 * i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i13, r8, i17, i4);

        $r7 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i16 = i16 + 1;

        r8 = $r7[i16];

        $i15 = i2 * i3;

        $i14 = i3 - i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i15, r8, 0, $i14);

        i17 = i3 - i4;

        goto label3;

     label2:
        $i12 = i2 * i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i12, r8, i17, i3);

        i17 = i17 + i3;

     label3:
        i18 = i18 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int i0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)>(i0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setRowMatrix(int,org.apache.commons.math3.linear.FieldMatrix)>(i0, r1);

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void setRowMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22;
        org.apache.commons.math3.FieldElement[] r2, r7;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $i6 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        if $i6 != 1 goto label1;

        $i9 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        if $i9 == i1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i7 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i8 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i7, $i8, 1, i1);

        throw $r3;

     label2:
        i2 = i0 / 36;

        $i10 = i2 * 36;

        i3 = i0 - $i10;

        i20 = 0;

        i21 = 0;

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r7 = $r4[0];

        i22 = 0;

     label3:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i22 >= $i11 goto label6;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i22);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = i2 * $i12;

        $i14 = $i13 + i22;

        r2 = $r5[$i14];

        $i15 = lengthof r7;

        i5 = $i15 - i21;

        if i4 <= i5 goto label4;

        $i17 = i3 * i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, i21, r2, $i17, i5);

        $r6 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i20 = i20 + 1;

        r7 = $r6[i20];

        $i19 = i3 * i4;

        $i18 = i4 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r2, $i19, $i18);

        i21 = i4 - i5;

        goto label5;

     label4:
        $i16 = i3 * i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, i21, r2, $i16, i4);

        i21 = i21 + i4;

     label5:
        i22 = i22 + 1;

        goto label3;

     label6:
        return;
    }

    public org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        org.apache.commons.math3.FieldElement[] r2, r9;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement[][] $r5, $r6, $r8;
        org.apache.commons.math3.FieldElement $r7;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i0);

        $r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r4, $i5, 1);

        i1 = i0 / 36;

        $i6 = i1 * 36;

        i2 = i0 - $i6;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i15 = 0;

        i16 = 0;

        $r5 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r9 = $r5[0];

        i17 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i17 >= $i7 goto label5;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i17);

        $r6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i9 = i17 * $i8;

        $i10 = $i9 + i1;

        r2 = $r6[$i10];

        i18 = 0;

     label2:
        if i18 >= i4 goto label4;

        $i11 = lengthof r9;

        if i16 < $i11 goto label3;

        $r8 = $r3.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i15 = i15 + 1;

        r9 = $r8[i15];

        i16 = 0;

     label3:
        $i12 = i16;

        i16 = i16 + 1;

        $i13 = i18 * i3;

        $i14 = $i13 + i2;

        $r7 = r2[$i14];

        r9[$i12] = $r7;

        i18 = i18 + 1;

        goto label2;

     label4:
        i17 = i17 + 1;

        goto label1;

     label5:
        return $r3;
    }

    public void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r3;
        int i0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        java.lang.ClassCastException $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math3.linear.BlockFieldMatrix) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.BlockFieldMatrix)>(i0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setColumnMatrix(int,org.apache.commons.math3.linear.FieldMatrix)>(i0, r1);

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    void setColumnMatrix(int, org.apache.commons.math3.linear.BlockFieldMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22;
        org.apache.commons.math3.FieldElement[] r2, r8;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r3;
        org.apache.commons.math3.FieldElement[][] $r4, $r5, $r7;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.BlockFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i6 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        if $i6 != i1 goto label1;

        $i9 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        if $i9 == 1 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i7 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i8 = virtualinvoke r1.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i7, $i8, i1, 1);

        throw $r3;

     label2:
        i2 = i0 / 36;

        $i10 = i2 * 36;

        i3 = i0 - $i10;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i2);

        i19 = 0;

        i20 = 0;

        $r4 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r8 = $r4[0];

        i21 = 0;

     label3:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i21 >= $i11 goto label7;

        i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i21);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i13 = i21 * $i12;

        $i14 = $i13 + i2;

        r2 = $r5[$i14];

        i22 = 0;

     label4:
        if i22 >= i5 goto label6;

        $i15 = lengthof r8;

        if i20 < $i15 goto label5;

        $r7 = r1.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        i19 = i19 + 1;

        r8 = $r7[i19];

        i20 = 0;

     label5:
        $i16 = i22 * i4;

        $i18 = $i16 + i3;

        $i17 = i20;

        i20 = i20 + 1;

        $r6 = r8[$i17];

        r2[$i18] = $r6;

        i22 = i22 + 1;

        goto label4;

     label6:
        i21 = i21 + 1;

        goto label3;

     label7:
        return;
    }

    public org.apache.commons.math3.linear.FieldVector getRowVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.Field $r3, $r6;
        java.lang.Object[] $r4;
        org.apache.commons.math3.linear.ArrayFieldVector $r5;
        org.apache.commons.math3.FieldElement[][] $r7;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i4);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        i1 = i0 / 36;

        $i5 = i1 * 36;

        i2 = i0 - $i5;

        i11 = 0;

        i12 = 0;

     label1:
        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i12 >= $i6 goto label2;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i12);

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = i1 * $i7;

        $i9 = $i8 + i12;

        r2 = $r7[$i9];

        $i10 = i2 * i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i10, r1, i11, i3);

        i11 = i11 + i3;

        i12 = i12 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r6, r1, 0);

        return $r5;
    }

    public void setRowVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.linear.ArrayFieldVector $r3;
        org.apache.commons.math3.FieldElement[] $r4;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r3 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setRow(int,org.apache.commons.math3.FieldElement[])>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setRowVector(int,org.apache.commons.math3.linear.FieldVector)>(i0, r1);

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.FieldVector getColumnVector(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.Field $r3, $r6;
        java.lang.Object[] $r4;
        org.apache.commons.math3.linear.ArrayFieldVector $r5;
        org.apache.commons.math3.FieldElement[][] $r7;
        org.apache.commons.math3.FieldElement $r8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i5);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        i1 = i0 / 36;

        $i6 = i1 * 36;

        i2 = i0 - $i6;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i14 = 0;

        i15 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i15 >= $i7 goto label4;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i15);

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i9 = i15 * $i8;

        $i10 = $i9 + i1;

        r2 = $r7[$i10];

        i16 = 0;

     label2:
        if i16 >= i4 goto label3;

        $i11 = i14;

        i14 = i14 + 1;

        $i12 = i16 * i3;

        $i13 = $i12 + i2;

        $r8 = r2[$i13];

        r1[$i11] = $r8;

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        $r5 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r6, r1, 0);

        return $r5;
    }

    public void setColumnVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.linear.ArrayFieldVector $r3;
        org.apache.commons.math3.FieldElement[] $r4;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r3 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] getDataRef()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void setColumn(int,org.apache.commons.math3.FieldElement[])>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractFieldMatrix: void setColumnVector(int,org.apache.commons.math3.linear.FieldVector)>(i0, r1);

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.FieldElement[] getRow(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.FieldElement[][] $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i4);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        i1 = i0 / 36;

        $i5 = i1 * 36;

        i2 = i0 - $i5;

        i11 = 0;

        i12 = 0;

     label1:
        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i12 >= $i6 goto label2;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i12);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i8 = i1 * $i7;

        $i9 = $i8 + i12;

        r2 = $r5[$i9];

        $i10 = i2 * i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i10, r1, i11, i3);

        i11 = i11 + i3;

        i12 = i12 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setRow(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $i5 = lengthof r1;

        if $i5 == i1 goto label1;

        $r4 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i12 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>(1, $i12, 1, i1);

        throw $r4;

     label1:
        i2 = i0 / 36;

        $i6 = i2 * 36;

        i3 = i0 - $i6;

        i13 = 0;

        i14 = 0;

     label2:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i14 >= $i7 goto label3;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i14);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i9 = i2 * $i8;

        $i10 = $i9 + i14;

        r2 = $r3[$i10];

        $i11 = i3 * i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i13, r2, $i11, i4);

        i13 = i13 + i4;

        i14 = i14 + 1;

        goto label2;

     label3:
        return;
    }

    public org.apache.commons.math3.FieldElement[] getColumn(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.FieldElement[][] $r5;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i5);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        i1 = i0 / 36;

        $i6 = i1 * 36;

        i2 = i0 - $i6;

        i3 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i1);

        i14 = 0;

        i15 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i15 >= $i7 goto label4;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i15);

        $r5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i9 = i15 * $i8;

        $i10 = $i9 + i1;

        r2 = $r5[$i10];

        i16 = 0;

     label2:
        if i16 >= i4 goto label3;

        $i11 = i14;

        i14 = i14 + 1;

        $i12 = i16 * i3;

        $i13 = $i12 + i2;

        $r6 = r2[$i13];

        r1[$i11] = $r6;

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        return r1;
    }

    public void setColumn(int, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        org.apache.commons.math3.FieldElement[] r1, r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        org.apache.commons.math3.FieldElement $r4;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement[];

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        $i6 = lengthof r1;

        if $i6 == i1 goto label1;

        $r5 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i15 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i15, 1, i1, 1);

        throw $r5;

     label1:
        i2 = i0 / 36;

        $i7 = i2 * 36;

        i3 = i0 - $i7;

        i4 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i2);

        i16 = 0;

        i17 = 0;

     label2:
        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i17 >= $i8 goto label5;

        i5 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockHeight(int)>(i17);

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i10 = i17 * $i9;

        $i11 = $i10 + i2;

        r2 = $r3[$i11];

        i18 = 0;

     label3:
        if i18 >= i5 goto label4;

        $i12 = i18 * i4;

        $i14 = $i12 + i3;

        $i13 = i16;

        i16 = i16 + 1;

        $r4 = r1[$i13];

        r2[$i14] = $r4;

        i18 = i18 + 1;

        goto label3;

     label4:
        i17 = i17 + 1;

        goto label2;

     label5:
        return;
    }

    public org.apache.commons.math3.FieldElement getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement[][] $r1;
        org.apache.commons.math3.FieldElement[] $r2;
        org.apache.commons.math3.FieldElement $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i1);

        i2 = i0 / 36;

        i3 = i1 / 36;

        $i5 = i2 * 36;

        $i6 = i0 - $i5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i10 = $i6 * $i7;

        $i8 = i3 * 36;

        $i9 = i1 - $i8;

        i4 = $i10 + $i9;

        $r1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i12 = i2 * $i11;

        $i13 = $i12 + i3;

        $r2 = $r1[$i13];

        $r3 = $r2[i4];

        return $r3;
    }

    public void setEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[][] $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i1);

        i2 = i0 / 36;

        i3 = i1 / 36;

        $i5 = i2 * 36;

        $i6 = i0 - $i5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i10 = $i6 * $i7;

        $i8 = i3 * 36;

        $i9 = i1 - $i8;

        i4 = $i10 + $i9;

        $r2 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i12 = i2 * $i11;

        $i13 = $i12 + i3;

        $r3 = $r2[$i13];

        $r3[i4] = r1;

        return;
    }

    public void addToEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement r1, $r4, $r6;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i1);

        i2 = i0 / 36;

        i3 = i1 / 36;

        $i5 = i2 * 36;

        $i6 = i0 - $i5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i10 = $i6 * $i7;

        $i8 = i3 * 36;

        $i9 = i1 - $i8;

        i4 = $i10 + $i9;

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i12 = i2 * $i11;

        $i13 = $i12 + i3;

        r2 = $r3[$i13];

        $r4 = r2[i4];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r6 = (org.apache.commons.math3.FieldElement) $r5;

        r2[i4] = $r6;

        return;
    }

    public void multiplyEntry(int, int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.commons.math3.FieldElement r1, $r4, $r6;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement[][] $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkRowIndex(int)>(i0);

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkColumnIndex(int)>(i1);

        i2 = i0 / 36;

        i3 = i1 / 36;

        $i5 = i2 * 36;

        $i6 = i0 - $i5;

        $i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i3);

        $i10 = $i6 * $i7;

        $i8 = i3 * 36;

        $i9 = i1 - $i8;

        i4 = $i10 + $i9;

        $r3 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i12 = i2 * $i11;

        $i13 = $i12 + i3;

        r2 = $r3[$i13];

        $r4 = r2[i4];

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r6 = (org.apache.commons.math3.FieldElement) $r5;

        r2[i4] = $r6;

        return;
    }

    public org.apache.commons.math3.linear.FieldMatrix transpose()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0, $r4;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22;
        org.apache.commons.math3.FieldElement[] r2, r3;
        org.apache.commons.math3.Field $r5;
        org.apache.commons.math3.FieldElement[][] $r6, $r7;
        org.apache.commons.math3.FieldElement $r8;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int getColumnDimension()>();

        $r4 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r5, i1, i0);

        i16 = 0;

        i17 = 0;

     label1:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i17 >= $i7 goto label8;

        i18 = 0;

     label2:
        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i18 >= $i8 goto label7;

        $r6 = $r4.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r6[i16];

        $r7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i10 = i18 * $i9;

        $i11 = $i10 + i17;

        r3 = $r7[$i11];

        i2 = i17 * 36;

        $i13 = i2 + 36;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i13, $i12);

        i4 = i18 * 36;

        $i15 = i4 + 36;

        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i15, $i14);

        i19 = 0;

        i20 = i2;

     label3:
        if i20 >= i3 goto label6;

        i6 = i3 - i2;

        i21 = i20 - i2;

        i22 = i4;

     label4:
        if i22 >= i5 goto label5;

        $r8 = r3[i21];

        r2[i19] = $r8;

        i19 = i19 + 1;

        i21 = i21 + i6;

        i22 = i22 + 1;

        goto label4;

     label5:
        i20 = i20 + 1;

        goto label3;

     label6:
        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label2;

     label7:
        i17 = i17 + 1;

        goto label1;

     label8:
        return $r4;
    }

    public int getRowDimension()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        return $i0;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        $i0 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        return $i0;
    }

    public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2, r4;
        org.apache.commons.math3.FieldElement r3, $r10, $r12, $r13, $r14, $r17, $r18, $r21, $r22, $r23, $r26, $r27, $r28, $r31, $r32, $r33, r37;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31;
        org.apache.commons.math3.Field $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.Object $r8, $r11, $r15, $r16, $r19, $r20, $r24, $r25, $r29, $r30, $r34, $r35;
        org.apache.commons.math3.FieldElement[][] $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r36;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i5 = lengthof r1;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        if $i5 == $i4 goto label01;

        $r36 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i26 = lengthof r1;

        $i25 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        specialinvoke $r36.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i26, $i25);

        throw $r36;

     label01:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i6);

        r2 = (org.apache.commons.math3.FieldElement[]) $r6;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r3 = (org.apache.commons.math3.FieldElement) $r8;

        i27 = 0;

     label02:
        $i7 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i27 >= $i7 goto label10;

        i0 = i27 * 36;

        $i9 = i0 + 36;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i9, $i8);

        i28 = 0;

     label03:
        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i28 >= $i10 goto label09;

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i12 = i27 * $i11;

        $i13 = $i12 + i28;

        r4 = $r9[$i13];

        i2 = i28 * 36;

        $i15 = i2 + 36;

        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i15, $i14);

        i29 = 0;

        i30 = i0;

     label04:
        if i30 >= i1 goto label08;

        r37 = r3;

        i31 = i2;

     label05:
        $i16 = i3 - 3;

        if i31 >= $i16 goto label06;

        $r18 = r4[i29];

        $r17 = r1[i31];

        $r19 = interfaceinvoke $r18.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r17);

        $r20 = interfaceinvoke r37.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r19);

        $r23 = (org.apache.commons.math3.FieldElement) $r20;

        $i19 = i29 + 1;

        $r22 = r4[$i19];

        $i20 = i31 + 1;

        $r21 = r1[$i20];

        $r24 = interfaceinvoke $r22.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r21);

        $r25 = interfaceinvoke $r23.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r24);

        $r28 = (org.apache.commons.math3.FieldElement) $r25;

        $i21 = i29 + 2;

        $r27 = r4[$i21];

        $i22 = i31 + 2;

        $r26 = r1[$i22];

        $r29 = interfaceinvoke $r27.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r26);

        $r30 = interfaceinvoke $r28.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r29);

        $r33 = (org.apache.commons.math3.FieldElement) $r30;

        $i23 = i29 + 3;

        $r32 = r4[$i23];

        $i24 = i31 + 3;

        $r31 = r1[$i24];

        $r34 = interfaceinvoke $r32.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r31);

        $r35 = interfaceinvoke $r33.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r34);

        r37 = (org.apache.commons.math3.FieldElement) $r35;

        i29 = i29 + 4;

        i31 = i31 + 4;

        goto label05;

     label06:
        if i31 >= i3 goto label07;

        $i17 = i29;

        i29 = i29 + 1;

        $r14 = r4[$i17];

        $i18 = i31;

        i31 = i31 + 1;

        $r13 = r1[$i18];

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r13);

        $r16 = interfaceinvoke r37.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r15);

        r37 = (org.apache.commons.math3.FieldElement) $r16;

        goto label06;

     label07:
        $r10 = r2[i30];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r37);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i30] = $r12;

        i30 = i30 + 1;

        goto label04;

     label08:
        i28 = i28 + 1;

        goto label03;

     label09:
        i27 = i27 + 1;

        goto label02;

     label10:
        return r2;
    }

    public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.FieldElement[] r1, r2, r4;
        org.apache.commons.math3.FieldElement r3, $r10, $r12, $r13, $r14, $r17, $r18, $r21, $r22, $r23, $r26, $r27, $r28, $r31, $r32, $r33, r37;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, i34;
        org.apache.commons.math3.Field $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.Object $r8, $r11, $r15, $r16, $r19, $r20, $r24, $r25, $r29, $r30, $r34, $r35;
        org.apache.commons.math3.FieldElement[][] $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r36;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        $i9 = lengthof r1;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        if $i9 == $i8 goto label01;

        $r36 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i29 = lengthof r1;

        $i28 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        specialinvoke $r36.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i29, $i28);

        throw $r36;

     label01:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i10);

        r2 = (org.apache.commons.math3.FieldElement[]) $r6;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.Field getField()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r3 = (org.apache.commons.math3.FieldElement) $r8;

        i30 = 0;

     label02:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i30 >= $i11 goto label10;

        i0 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i30);

        i1 = i0 + i0;

        i2 = i1 + i0;

        i3 = i2 + i0;

        i4 = i30 * 36;

        $i13 = i4 + 36;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i13, $i12);

        i31 = 0;

     label03:
        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i31 >= $i14 goto label09;

        $r9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i15 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i16 = i31 * $i15;

        $i17 = $i16 + i30;

        r4 = $r9[$i17];

        i6 = i31 * 36;

        $i19 = i6 + 36;

        $i18 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i19, $i18);

        i32 = i4;

     label04:
        if i32 >= i5 goto label08;

        i33 = i32 - i4;

        r37 = r3;

        i34 = i6;

     label05:
        $i20 = i7 - 3;

        if i34 >= $i20 goto label06;

        $r18 = r4[i33];

        $r17 = r1[i34];

        $r19 = interfaceinvoke $r18.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r17);

        $r20 = interfaceinvoke r37.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r19);

        $r23 = (org.apache.commons.math3.FieldElement) $r20;

        $i22 = i33 + i0;

        $r22 = r4[$i22];

        $i23 = i34 + 1;

        $r21 = r1[$i23];

        $r24 = interfaceinvoke $r22.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r21);

        $r25 = interfaceinvoke $r23.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r24);

        $r28 = (org.apache.commons.math3.FieldElement) $r25;

        $i24 = i33 + i1;

        $r27 = r4[$i24];

        $i25 = i34 + 2;

        $r26 = r1[$i25];

        $r29 = interfaceinvoke $r27.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r26);

        $r30 = interfaceinvoke $r28.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r29);

        $r33 = (org.apache.commons.math3.FieldElement) $r30;

        $i26 = i33 + i2;

        $r32 = r4[$i26];

        $i27 = i34 + 3;

        $r31 = r1[$i27];

        $r34 = interfaceinvoke $r32.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r31);

        $r35 = interfaceinvoke $r33.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r34);

        r37 = (org.apache.commons.math3.FieldElement) $r35;

        i33 = i33 + i3;

        i34 = i34 + 4;

        goto label05;

     label06:
        if i34 >= i7 goto label07;

        $r14 = r4[i33];

        $i21 = i34;

        i34 = i34 + 1;

        $r13 = r1[$i21];

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r13);

        $r16 = interfaceinvoke r37.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r15);

        r37 = (org.apache.commons.math3.FieldElement) $r16;

        i33 = i33 + i0;

        goto label06;

     label07:
        $r10 = r2[i32];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r37);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i32] = $r12;

        i32 = i32 + 1;

        goto label04;

     label08:
        i31 = i31 + 1;

        goto label03;

     label09:
        i30 = i30 + 1;

        goto label02;

     label10:
        return r2;
    }

    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5, $r6;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i8 = $i5 - 1;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i7 = $i6 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i10, $i9, 0, $i8, 0, $i7);

        i21 = 0;

     label1:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i21 >= $i11 goto label8;

        i0 = i21 * 36;

        $i13 = i0 + 36;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i13, $i12);

        i22 = i0;

     label2:
        if i22 >= i1 goto label7;

        i23 = 0;

     label3:
        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i23 >= $i14 goto label6;

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i23);

        i3 = i23 * 36;

        $i16 = i3 + 36;

        $i15 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i16, $i15);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i17 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i18 = i21 * $i17;

        $i19 = $i18 + i23;

        r2 = $r4[$i19];

        $i20 = i22 - i0;

        i24 = $i20 * i2;

        i25 = i3;

     label4:
        if i25 >= i4 goto label5;

        $r5 = r2[i24];

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>(i22, i25, $r5);

        r2[i24] = $r6;

        i24 = i24 + 1;

        i25 = i25 + 1;

        goto label4;

     label5:
        i23 = i23 + 1;

        goto label3;

     label6:
        i22 = i22 + 1;

        goto label2;

     label7:
        i21 = i21 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i8 = $i5 - 1;

        $i6 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i7 = $i6 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i10, $i9, 0, $i8, 0, $i7);

        i21 = 0;

     label1:
        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i21 >= $i11 goto label8;

        i0 = i21 * 36;

        $i13 = i0 + 36;

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i13, $i12);

        i22 = i0;

     label2:
        if i22 >= i1 goto label7;

        i23 = 0;

     label3:
        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i23 >= $i14 goto label6;

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i23);

        i3 = i23 * 36;

        $i16 = i3 + 36;

        $i15 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i16, $i15);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i17 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i18 = i21 * $i17;

        $i19 = $i18 + i23;

        r2 = $r4[$i19];

        $i20 = i22 - i0;

        i24 = $i20 * i2;

        i25 = i3;

     label4:
        if i25 >= i4 goto label5;

        $r5 = r2[i24];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>(i22, i25, $r5);

        i24 = i24 + 1;

        i25 = i25 + 1;

        goto label4;

     label5:
        i23 = i23 + 1;

        goto label3;

     label6:
        i22 = i22 + 1;

        goto label2;

     label7:
        i21 = i21 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5, $r6;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i12, $i11, i0, i1, i2, i3);

        i29 = i0 / 36;

     label1:
        $i13 = i1 / 36;

        $i14 = 1 + $i13;

        if i29 >= $i14 goto label8;

        i4 = i29 * 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, i4);

        $i15 = i29 + 1;

        $i17 = $i15 * 36;

        $i16 = 1 + i1;

        i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i17, $i16);

        i30 = i5;

     label2:
        if i30 >= i6 goto label7;

        i31 = i2 / 36;

     label3:
        $i18 = i3 / 36;

        $i19 = 1 + $i18;

        if i31 >= $i19 goto label6;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i31);

        i8 = i31 * 36;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i2, i8);

        $i20 = i31 + 1;

        $i22 = $i20 * 36;

        $i21 = 1 + i3;

        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i21);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i29 * $i23;

        $i25 = $i24 + i31;

        r2 = $r4[$i25];

        $i26 = i30 - i4;

        $i27 = $i26 * i7;

        $i28 = $i27 + i9;

        i32 = $i28 - i8;

        i33 = i9;

     label4:
        if i33 >= i10 goto label5;

        $r5 = r2[i32];

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>(i30, i33, $r5);

        r2[i32] = $r6;

        i32 = i32 + 1;

        i33 = i33 + 1;

        goto label4;

     label5:
        i31 = i31 + 1;

        goto label3;

     label6:
        i30 = i30 + 1;

        goto label2;

     label7:
        i29 = i29 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i12, $i11, i0, i1, i2, i3);

        i29 = i0 / 36;

     label1:
        $i13 = i1 / 36;

        $i14 = 1 + $i13;

        if i29 >= $i14 goto label8;

        i4 = i29 * 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, i4);

        $i15 = i29 + 1;

        $i17 = $i15 * 36;

        $i16 = 1 + i1;

        i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i17, $i16);

        i30 = i5;

     label2:
        if i30 >= i6 goto label7;

        i31 = i2 / 36;

     label3:
        $i18 = i3 / 36;

        $i19 = 1 + $i18;

        if i31 >= $i19 goto label6;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i31);

        i8 = i31 * 36;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i2, i8);

        $i20 = i31 + 1;

        $i22 = $i20 * 36;

        $i21 = 1 + i3;

        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i21);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i29 * $i23;

        $i25 = $i24 + i31;

        r2 = $r4[$i25];

        $i26 = i30 - i4;

        $i27 = $i26 * i7;

        $i28 = $i27 + i9;

        i32 = $i28 - i8;

        i33 = i9;

     label4:
        if i33 >= i10 goto label5;

        $r5 = r2[i32];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>(i30, i33, $r5);

        i32 = i32 + 1;

        i33 = i33 + 1;

        goto label4;

     label5:
        i31 = i31 + 1;

        goto label3;

     label6:
        i30 = i30 + 1;

        goto label2;

     label7:
        i29 = i29 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5, $r6;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i7 = $i4 - 1;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = $i5 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i9, $i8, 0, $i7, 0, $i6);

        i16 = 0;

        i17 = 0;

     label1:
        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i17 >= $i10 goto label8;

        i0 = i17 * 36;

        $i12 = i0 + 36;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i11);

        i18 = 0;

     label2:
        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i18 >= $i13 goto label7;

        i2 = i18 * 36;

        $i15 = i2 + 36;

        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i15, $i14);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r4[i16];

        i19 = 0;

        i20 = i0;

     label3:
        if i20 >= i1 goto label6;

        i21 = i2;

     label4:
        if i21 >= i3 goto label5;

        $r5 = r2[i19];

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>(i20, i21, $r5);

        r2[i19] = $r6;

        i19 = i19 + 1;

        i21 = i21 + 1;

        goto label4;

     label5:
        i20 = i20 + 1;

        goto label3;

     label6:
        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label2;

     label7:
        i17 = i17 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        $i9 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i8 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i7 = $i4 - 1;

        $i5 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i6 = $i5 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i9, $i8, 0, $i7, 0, $i6);

        i16 = 0;

        i17 = 0;

     label1:
        $i10 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        if i17 >= $i10 goto label8;

        i0 = i17 * 36;

        $i12 = i0 + 36;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i12, $i11);

        i18 = 0;

     label2:
        $i13 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        if i18 >= $i13 goto label7;

        i2 = i18 * 36;

        $i15 = i2 + 36;

        $i14 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i15, $i14);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        r2 = $r4[i16];

        i19 = 0;

        i20 = i0;

     label3:
        if i20 >= i1 goto label6;

        i21 = i2;

     label4:
        if i21 >= i3 goto label5;

        $r5 = r2[i19];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>(i20, i21, $r5);

        i19 = i19 + 1;

        i21 = i21 + 1;

        goto label4;

     label5:
        i20 = i20 + 1;

        goto label3;

     label6:
        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label2;

     label7:
        i17 = i17 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5, $r6;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i12, $i11, i0, i1, i2, i3);

        i29 = i0 / 36;

     label1:
        $i13 = i1 / 36;

        $i14 = 1 + $i13;

        if i29 >= $i14 goto label8;

        i4 = i29 * 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, i4);

        $i15 = i29 + 1;

        $i17 = $i15 * 36;

        $i16 = 1 + i1;

        i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i17, $i16);

        i30 = i2 / 36;

     label2:
        $i18 = i3 / 36;

        $i19 = 1 + $i18;

        if i30 >= $i19 goto label7;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i30);

        i8 = i30 * 36;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i2, i8);

        $i20 = i30 + 1;

        $i22 = $i20 * 36;

        $i21 = 1 + i3;

        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i21);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i29 * $i23;

        $i25 = $i24 + i30;

        r2 = $r4[$i25];

        i31 = i5;

     label3:
        if i31 >= i6 goto label6;

        $i26 = i31 - i4;

        $i27 = $i26 * i7;

        $i28 = $i27 + i9;

        i32 = $i28 - i8;

        i33 = i9;

     label4:
        if i33 >= i10 goto label5;

        $r5 = r2[i32];

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement visit(int,int,org.apache.commons.math3.FieldElement)>(i31, i33, $r5);

        r2[i32] = $r6;

        i32 = i32 + 1;

        i33 = i33 + 1;

        goto label4;

     label5:
        i31 = i31 + 1;

        goto label3;

     label6:
        i30 = i30 + 1;

        goto label2;

     label7:
        i29 = i29 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        org.apache.commons.math3.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement $r3, $r5;
        org.apache.commons.math3.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i12 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i11 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i12, $i11, i0, i1, i2, i3);

        i29 = i0 / 36;

     label1:
        $i13 = i1 / 36;

        $i14 = 1 + $i13;

        if i29 >= $i14 goto label8;

        i4 = i29 * 36;

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, i4);

        $i15 = i29 + 1;

        $i17 = $i15 * 36;

        $i16 = 1 + i1;

        i6 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i17, $i16);

        i30 = i2 / 36;

     label2:
        $i18 = i3 / 36;

        $i19 = 1 + $i18;

        if i30 >= $i19 goto label7;

        i7 = specialinvoke r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockWidth(int)>(i30);

        i8 = i30 * 36;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i2, i8);

        $i20 = i30 + 1;

        $i22 = $i20 * 36;

        $i21 = 1 + i3;

        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i21);

        $r4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: org.apache.commons.math3.FieldElement[][] blocks>;

        $i23 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i24 = i29 * $i23;

        $i25 = $i24 + i30;

        r2 = $r4[$i25];

        i31 = i5;

     label3:
        if i31 >= i6 goto label6;

        $i26 = i31 - i4;

        $i27 = $i26 * i7;

        $i28 = $i27 + i9;

        i32 = $i28 - i8;

        i33 = i9;

     label4:
        if i33 >= i10 goto label5;

        $r5 = r2[i32];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math3.FieldElement)>(i31, i33, $r5);

        i32 = i32 + 1;

        i33 = i33 + 1;

        goto label4;

     label5:
        i31 = i31 + 1;

        goto label3;

     label6:
        i30 = i30 + 1;

        goto label2;

     label7:
        i29 = i29 + 1;

        goto label1;

     label8:
        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrixPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r3;
    }

    private int blockHeight(int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockRows>;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int rows>;

        $i3 = i0 * 36;

        $i5 = $i4 - $i3;

        goto label2;

     label1:
        $i5 = 36;

     label2:
        return $i5;
    }

    private int blockWidth(int)
    {
        org.apache.commons.math3.linear.BlockFieldMatrix r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.linear.BlockFieldMatrix;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int blockColumns>;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $i4 = r0.<org.apache.commons.math3.linear.BlockFieldMatrix: int columns>;

        $i3 = i0 * 36;

        $i5 = $i4 - $i3;

        goto label2;

     label1:
        $i5 = 36;

     label2:
        return $i5;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.BlockFieldMatrix: long serialVersionUID> = -4602336630143123183L;

        <org.apache.commons.math3.linear.BlockFieldMatrix: int BLOCK_SIZE> = 36;

        return;
    }
}
