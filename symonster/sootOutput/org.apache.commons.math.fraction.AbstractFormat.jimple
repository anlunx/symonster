public abstract class org.apache.commons.math.fraction.AbstractFormat extends java.text.NumberFormat implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected java.text.NumberFormat denominatorFormat;
    protected java.text.NumberFormat numeratorFormat;

    protected void <init>()
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        $r1 = staticinvoke <org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat getDefaultNumberFormat()>();

        specialinvoke r0.<org.apache.commons.math.fraction.AbstractFormat: void <init>(java.text.NumberFormat)>($r1);

        return;
    }

    protected void <init>(java.text.NumberFormat)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        r1 := @parameter0: java.text.NumberFormat;

        $r2 = virtualinvoke r1.<java.text.NumberFormat: java.lang.Object clone()>();

        $r3 = (java.text.NumberFormat) $r2;

        specialinvoke r0.<org.apache.commons.math.fraction.AbstractFormat: void <init>(java.text.NumberFormat,java.text.NumberFormat)>(r1, $r3);

        return;
    }

    protected void <init>(java.text.NumberFormat, java.text.NumberFormat)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat r1, r2;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        r1 := @parameter0: java.text.NumberFormat;

        r2 := @parameter1: java.text.NumberFormat;

        specialinvoke r0.<java.text.NumberFormat: void <init>()>();

        r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat numeratorFormat> = r1;

        r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat denominatorFormat> = r2;

        return;
    }

    protected static java.text.NumberFormat getDefaultNumberFormat()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)>($r0);

        return $r1;
    }

    protected static java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat r1;

        r0 := @parameter0: java.util.Locale;

        r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>(r0);

        virtualinvoke r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(0);

        virtualinvoke r1.<java.text.NumberFormat: void setParseIntegerOnly(boolean)>(1);

        return r1;
    }

    public java.text.NumberFormat getDenominatorFormat()
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        $r1 = r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat denominatorFormat>;

        return $r1;
    }

    public java.text.NumberFormat getNumeratorFormat()
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        $r1 = r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat numeratorFormat>;

        return $r1;
    }

    public void setDenominatorFormat(java.text.NumberFormat)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat r1;
        org.apache.commons.math.exception.NullArgumentException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        r1 := @parameter0: java.text.NumberFormat;

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math.exception.NullArgumentException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DENOMINATOR_FORMAT>;

        specialinvoke $r2.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat denominatorFormat> = r1;

        return;
    }

    public void setNumeratorFormat(java.text.NumberFormat)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        java.text.NumberFormat r1;
        org.apache.commons.math.exception.NullArgumentException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        r1 := @parameter0: java.text.NumberFormat;

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math.exception.NullArgumentException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NUMERATOR_FORMAT>;

        specialinvoke $r2.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        r0.<org.apache.commons.math.fraction.AbstractFormat: java.text.NumberFormat numeratorFormat> = r1;

        return;
    }

    protected static void parseAndIgnoreWhitespace(java.lang.String, java.text.ParsePosition)
    {
        java.lang.String r0;
        java.text.ParsePosition r1;
        int $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.text.ParsePosition;

        staticinvoke <org.apache.commons.math.fraction.AbstractFormat: char parseNextCharacter(java.lang.String,java.text.ParsePosition)>(r0, r1);

        $i1 = virtualinvoke r1.<java.text.ParsePosition: int getIndex()>();

        $i2 = $i1 - 1;

        virtualinvoke r1.<java.text.ParsePosition: void setIndex(int)>($i2);

        return;
    }

    protected static char parseNextCharacter(java.lang.String, java.text.ParsePosition)
    {
        java.lang.String r0;
        java.text.ParsePosition r1;
        int i0, $i2, i3;
        char c1, c4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.text.ParsePosition;

        i3 = virtualinvoke r1.<java.text.ParsePosition: int getIndex()>();

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        c4 = 0;

        if i3 >= i0 goto label3;

     label1:
        $i2 = i3;

        i3 = i3 + 1;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c1);

        if $z0 == 0 goto label2;

        if i3 < i0 goto label1;

     label2:
        virtualinvoke r1.<java.text.ParsePosition: void setIndex(int)>(i3);

        if i3 >= i0 goto label3;

        c4 = c1;

     label3:
        return c4;
    }

    public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        double d0;
        java.lang.StringBuffer r1, $r4;
        java.text.FieldPosition r2;
        java.lang.Double $r3;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.text.FieldPosition;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.fraction.AbstractFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>($r3, r1, r2);

        return $r4;
    }

    public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.math.fraction.AbstractFormat r0;
        long l0;
        java.lang.StringBuffer r1, $r4;
        java.text.FieldPosition r2;
        java.lang.Long $r3;

        r0 := @this: org.apache.commons.math.fraction.AbstractFormat;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.StringBuffer;

        r2 := @parameter2: java.text.FieldPosition;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.fraction.AbstractFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>($r3, r1, r2);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.fraction.AbstractFormat: long serialVersionUID> = -6981118387974191891L;

        return;
    }
}
