public final class org.apache.commons.math.stat.StatUtils extends java.lang.Object
{
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_SQUARES;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic PRODUCT;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_LOGS;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic MIN;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic MAX;
    private static final org.apache.commons.math.stat.descriptive.UnivariateStatistic MEAN;
    private static final org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE;
    private static final org.apache.commons.math.stat.descriptive.rank.Percentile PERCENTILE;
    private static final org.apache.commons.math.stat.descriptive.moment.GeometricMean GEOMETRIC_MEAN;

    private void <init>()
    {
        org.apache.commons.math.stat.StatUtils r0;

        r0 := @this: org.apache.commons.math.stat.StatUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double sum(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double sum(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double sumSq(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_SQUARES>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double sumSq(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_SQUARES>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double product(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic PRODUCT>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double product(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic PRODUCT>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double sumLog(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_LOGS>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double sumLog(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_LOGS>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double mean(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MEAN>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double mean(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MEAN>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double geometricMean(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.moment.GeometricMean $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.GeometricMean GEOMETRIC_MEAN>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.GeometricMean: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double geometricMean(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.moment.GeometricMean $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.GeometricMean GEOMETRIC_MEAN>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.GeometricMean: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double variance(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.moment.Variance $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.Variance: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double variance(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.moment.Variance $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.Variance: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double variance(double[], double, int, int)
    {
        double[] r0;
        double d0, $d1;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.moment.Variance $r1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.Variance: double evaluate(double[],double,int,int)>(r0, d0, i0, i1);

        return $d1;
    }

    public static double variance(double[], double)
    {
        double[] r0;
        double d0, $d1;
        org.apache.commons.math.stat.descriptive.moment.Variance $r1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.Variance: double evaluate(double[],double)>(r0, d0);

        return $d1;
    }

    public static double max(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MAX>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double max(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MAX>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double min(double[])
    {
        double[] r0;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MIN>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[])>(r0);

        return $d0;
    }

    public static double min(double[], int, int)
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MIN>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.stat.descriptive.UnivariateStatistic: double evaluate(double[],int,int)>(r0, i0, i1);

        return $d0;
    }

    public static double percentile(double[], double)
    {
        double[] r0;
        double d0, $d1;
        org.apache.commons.math.stat.descriptive.rank.Percentile $r1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.rank.Percentile PERCENTILE>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.rank.Percentile: double evaluate(double[],double)>(r0, d0);

        return $d1;
    }

    public static double percentile(double[], int, int, double)
    {
        double[] r0;
        int i0, i1;
        double d0, $d1;
        org.apache.commons.math.stat.descriptive.rank.Percentile $r1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        $r1 = <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.rank.Percentile PERCENTILE>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.rank.Percentile: double evaluate(double[],int,int,double)>(r0, i0, i1, d0);

        return $d1;
    }

    public static double sumDifference(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        int i0, $i1, $i2, $i3, i4;
        double $d0, $d1, $d2, d3;
        java.lang.Object[] $r2, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r8;
        java.lang.Integer $r4, $r5, $r9, $r10;
        java.lang.IllegalArgumentException $r6, $r11;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 == $i1 goto label1;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $i3 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r11;

     label1:
        if i0 >= 1 goto label2;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r2 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        d3 = 0.0;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        $d1 = r0[i4];

        $d0 = r1[i4];

        $d2 = $d1 - $d0;

        d3 = d3 + $d2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return d3;
    }

    public static double meanDifference(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $d0 = staticinvoke <org.apache.commons.math.stat.StatUtils: double sumDifference(double[],double[])>(r0, r1);

        $i0 = lengthof r0;

        $d1 = (double) $i0;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public static double varianceDifference(double[], double[], double) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d16;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object[] $r2, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r8;
        java.lang.Integer $r4, $r5, $r9, $r10;
        java.lang.IllegalArgumentException $r6, $r11;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        d13 = 0.0;

        d14 = 0.0;

        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 == $i1 goto label1;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $i3 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r11;

     label1:
        if i0 >= 2 goto label2;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        $d8 = r0[i4];

        $d7 = r1[i4];

        d16 = $d8 - $d7;

        $d10 = d16 - d0;

        $d9 = d16 - d0;

        $d11 = $d10 * $d9;

        d13 = d13 + $d11;

        $d12 = d16 - d0;

        d14 = d14 + $d12;

        i4 = i4 + 1;

        goto label3;

     label4:
        $d2 = d14 * d14;

        $d1 = (double) i0;

        $d3 = $d2 / $d1;

        $d5 = d13 - $d3;

        $i2 = i0 - 1;

        $d4 = (double) $i2;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public static double[] normalize(double[])
    {
        double[] r0, r2;
        double d0, $d1, $d2, $d3, $d4, d5;
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics $r3;
        int $i0, $i1, $i2, i3, i4;

        r0 := @parameter0: double[];

        $r3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics;

        specialinvoke $r3.<org.apache.commons.math.stat.descriptive.DescriptiveStatistics: void <init>()>();

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label2;

        $d4 = r0[i3];

        virtualinvoke $r3.<org.apache.commons.math.stat.descriptive.DescriptiveStatistics: void addValue(double)>($d4);

        i3 = i3 + 1;

        goto label1;

     label2:
        d5 = virtualinvoke $r3.<org.apache.commons.math.stat.descriptive.DescriptiveStatistics: double getMean()>();

        d0 = virtualinvoke $r3.<org.apache.commons.math.stat.descriptive.DescriptiveStatistics: double getStandardDeviation()>();

        $i1 = lengthof r0;

        r2 = newarray (double)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $d1 = r0[i4];

        $d2 = $d1 - d5;

        $d3 = $d2 / d0;

        r2[i4] = $d3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r2;
    }

    static void <clinit>()
    {
        org.apache.commons.math.stat.descriptive.summary.Sum $r0;
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares $r1;
        org.apache.commons.math.stat.descriptive.summary.Product $r2;
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs $r3;
        org.apache.commons.math.stat.descriptive.rank.Min $r4;
        org.apache.commons.math.stat.descriptive.rank.Max $r5;
        org.apache.commons.math.stat.descriptive.moment.Mean $r6;
        org.apache.commons.math.stat.descriptive.moment.Variance $r7;
        org.apache.commons.math.stat.descriptive.rank.Percentile $r8;
        org.apache.commons.math.stat.descriptive.moment.GeometricMean $r9;

        $r0 = new org.apache.commons.math.stat.descriptive.summary.Sum;

        specialinvoke $r0.<org.apache.commons.math.stat.descriptive.summary.Sum: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM> = $r0;

        $r1 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r1.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_SQUARES> = $r1;

        $r2 = new org.apache.commons.math.stat.descriptive.summary.Product;

        specialinvoke $r2.<org.apache.commons.math.stat.descriptive.summary.Product: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic PRODUCT> = $r2;

        $r3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs;

        specialinvoke $r3.<org.apache.commons.math.stat.descriptive.summary.SumOfLogs: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic SUM_OF_LOGS> = $r3;

        $r4 = new org.apache.commons.math.stat.descriptive.rank.Min;

        specialinvoke $r4.<org.apache.commons.math.stat.descriptive.rank.Min: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MIN> = $r4;

        $r5 = new org.apache.commons.math.stat.descriptive.rank.Max;

        specialinvoke $r5.<org.apache.commons.math.stat.descriptive.rank.Max: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MAX> = $r5;

        $r6 = new org.apache.commons.math.stat.descriptive.moment.Mean;

        specialinvoke $r6.<org.apache.commons.math.stat.descriptive.moment.Mean: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.UnivariateStatistic MEAN> = $r6;

        $r7 = new org.apache.commons.math.stat.descriptive.moment.Variance;

        specialinvoke $r7.<org.apache.commons.math.stat.descriptive.moment.Variance: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.Variance VARIANCE> = $r7;

        $r8 = new org.apache.commons.math.stat.descriptive.rank.Percentile;

        specialinvoke $r8.<org.apache.commons.math.stat.descriptive.rank.Percentile: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.rank.Percentile PERCENTILE> = $r8;

        $r9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean;

        specialinvoke $r9.<org.apache.commons.math.stat.descriptive.moment.GeometricMean: void <init>()>();

        <org.apache.commons.math.stat.StatUtils: org.apache.commons.math.stat.descriptive.moment.GeometricMean GEOMETRIC_MEAN> = $r9;

        return;
    }
}
