public class org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple extends java.lang.Object implements java.lang.Comparable
{
    private static final long SIGN_MASK;
    private static final long EXPONENT_MASK;
    private static final long MANTISSA_MASK;
    private static final long IMPLICIT_ONE;
    private double[] components;
    private int offset;
    private int lsb;
    private long[] encoding;
    private boolean posInf;
    private boolean negInf;
    private boolean nan;

    public transient void <init>(double[])
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        double[] r1, $r3;
        long l0, l1;
        int i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, $i15;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2, $z3;
        long[] $r4;
        double $d0, $d1, $d2, $d3;
        byte $b5, $b12;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components> = $r3;

        i13 = -2147483648;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb> = 2147483647;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 0;

        i14 = 0;

     label1:
        $i3 = lengthof r1;

        if i14 >= $i3 goto label6;

        $d0 = r1[i14];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z2 == 0 goto label3;

        $d3 = r1[i14];

        $b12 = $d3 cmpg 0.0;

        if $b12 >= 0 goto label2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 1;

        goto label5;

     label2:
        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 1;

        goto label5;

     label3:
        $d1 = r1[i14];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z3 == 0 goto label4;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 1;

        goto label5;

     label4:
        $d2 = r1[i14];

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        l1 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>(l0);

        $b5 = l1 cmp 0L;

        if $b5 == 0 goto label5;

        i2 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int exponent(long)>(l0);

        $i6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int computeMSB(long)>(l1);

        $i7 = i2 + $i6;

        i13 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i13, $i7);

        $i8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        $i9 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int computeLSB(long)>(l1);

        $i10 = i2 + $i9;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, $i10);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb> = $i11;

     label5:
        i14 = i14 + 1;

        goto label1;

     label6:
        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 == 0 goto label7;

        $z1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z1 == 0 goto label7;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan> = 1;

     label7:
        $i15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        if $i15 > i13 goto label8;

        $i4 = i13 + 16;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>($i4);

        goto label9;

     label8:
        $r4 = newarray (long)[1];

        $r4[0] = 0L;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding> = $r4;

     label9:
        return;
    }

    private void encode(int)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i25, $i26, i27;
        long[] $r1, $r3, $r4, $r5, $r7, $r8;
        double[] $r2, $r6;
        long $l12, $l14, l24;
        byte $b15;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        i0 := @parameter0: int;

        $i3 = i0 + 31;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset> = $i3;

        $i6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i5 = $i4 % 32;

        $i7 = $i6 - $i5;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset> = $i7;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i13 = lengthof $r4;

        if $i13 != 1 goto label1;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l14 = $r5[0];

        $b15 = $l14 cmp 0L;

        if $b15 != 0 goto label1;

        return;

     label1:
        $i16 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i17 = $i16 + 1;

        $i18 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        i1 = $i17 - $i18;

        $i19 = i1 + 62;

        i2 = $i19 / 63;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i20 = lengthof $r6;

        $i21 = $i20 * i2;

        $r7 = newarray (long)[$i21];

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding> = $r7;

        i22 = 0;

        i23 = 62;

        l24 = 0L;

        i25 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

     label2:
        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i26 = lengthof $r8;

        if i22 >= $i26 goto label7;

        i27 = 0;

     label3:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i8 = lengthof $r2;

        if i27 >= $i8 goto label6;

        $i9 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int getBit(int,int)>(i27, i25);

        if $i9 == 0 goto label4;

        $l12 = 1L << i23;

        l24 = l24 | $l12;

     label4:
        $i10 = i23;

        i23 = i23 + -1;

        if $i10 != 0 goto label5;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i11 = i22;

        i22 = i22 + 1;

        $r3[$i11] = l24;

        l24 = 0L;

        i23 = 62;

     label5:
        i27 = i27 + 1;

        goto label3;

     label6:
        i25 = i25 + -1;

        goto label2;

     label7:
        return;
    }

    public int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i20, $i21, $i22, $i23, i24;
        double[] $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        long[] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        long $l14, $l15, $l17, $l18;
        byte $b16, $b19;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i2 = lengthof $r2;

        $r3 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i1 = lengthof $r3;

        if $i2 != $i1 goto label15;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z1 == 0 goto label02;

        return -1;

     label02:
        $z2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z2 != 0 goto label03;

        $z3 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z3 == 0 goto label04;

     label03:
        return -1;

     label04:
        $z4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z4 != 0 goto label05;

        $z5 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z5 == 0 goto label06;

     label05:
        return 1;

     label06:
        $i7 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i6 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i7 >= $i6 goto label07;

        $i21 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>($i21);

        goto label08;

     label07:
        $i9 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        $i8 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if $i9 <= $i8 goto label08;

        $i20 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        specialinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: void encode(int)>($i20);

     label08:
        $r14 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i22 = lengthof $r14;

        $r15 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i23 = lengthof $r15;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i22, $i23);

        i24 = 0;

     label09:
        if i24 >= i0 goto label12;

        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l15 = $r10[i24];

        $r11 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l14 = $r11[i24];

        $b16 = $l15 cmp $l14;

        if $b16 >= 0 goto label10;

        return -1;

     label10:
        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l18 = $r12[i24];

        $r13 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $l17 = $r13[i24];

        $b19 = $l18 cmp $l17;

        if $b19 <= 0 goto label11;

        return 1;

     label11:
        i24 = i24 + 1;

        goto label09;

     label12:
        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i11 = lengthof $r6;

        $r7 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i10 = lengthof $r7;

        if $i11 >= $i10 goto label13;

        return -1;

     label13:
        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i13 = lengthof $r8;

        $r9 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long[] encoding>;

        $i12 = lengthof $r9;

        if $i13 <= $i12 goto label14;

        return 1;

     label14:
        return 0;

     label15:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i4 = lengthof $r4;

        $r5 = r1.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $i3 = lengthof $r5;

        $i5 = $i4 - $i3;

        return $i5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        if $z0 == 0 goto label4;

        $r2 = (org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)>($r2);

        if $i0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        double[] $r1;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i14, i16, i18;
        boolean $z0, $z1, $z2;
        byte $b13, $b15, $b17;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        i10 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        $i4 = i10 * 37;

        $i3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        i11 = $i4 + $i3;

        $i6 = i11 * 37;

        $i5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int lsb>;

        i12 = $i6 + $i5;

        $i7 = i12 * 37;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean posInf>;

        if $z0 == 0 goto label1;

        $b13 = 97;

        goto label2;

     label1:
        $b13 = 71;

     label2:
        i14 = $i7 + $b13;

        $i8 = i14 * 37;

        $z1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean negInf>;

        if $z1 == 0 goto label3;

        $b15 = 97;

        goto label4;

     label3:
        $b15 = 71;

     label4:
        i16 = $i8 + $b15;

        $i9 = i16 * 37;

        $z2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: boolean nan>;

        if $z2 == 0 goto label5;

        $b17 = 97;

        goto label6;

     label5:
        $b17 = 71;

     label6:
        i18 = $i9 + $b17;

        return i18;
    }

    public double[] getComponents()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    private static long sign(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = l0 & -9223372036854775808L;

        return $l1;
    }

    private static int exponent(long)
    {
        long l0, $l1, $l2;
        int $i3, $i4;

        l0 := @parameter0: long;

        $l1 = l0 & 9218868437227405312L;

        $l2 = $l1 >> 52;

        $i3 = (int) $l2;

        $i4 = $i3 - 1075;

        return $i4;
    }

    private static long mantissa(long)
    {
        long l0, $l1, $l3, $l4, $l5;
        byte $b2;

        l0 := @parameter0: long;

        $l1 = l0 & 9218868437227405312L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $l4 = l0 & 4503599627370495L;

        $l5 = $l4 << 1;

        goto label2;

     label1:
        $l3 = l0 & 4503599627370495L;

        $l5 = 4503599627370496L | $l3;

     label2:
        return $l5;
    }

    private static int computeMSB(long)
    {
        long l0, $l1, l3, l4;
        byte $b2, b5, b6;

        l0 := @parameter0: long;

        l3 = l0;

        l4 = 4294967295L;

        b5 = 32;

        b6 = 0;

     label1:
        if b5 == 0 goto label3;

        $l1 = l3 & l4;

        $b2 = $l1 cmp l3;

        if $b2 == 0 goto label2;

        b6 = b6 | b5;

        l3 = l3 >> b5;

     label2:
        b5 = b5 >> 1;

        l4 = l4 >> b5;

        goto label1;

     label3:
        return b6;
    }

    private static int computeLSB(long)
    {
        long l0, $l1, l3, l4;
        byte $b2, b5, b6;

        l0 := @parameter0: long;

        l3 = l0;

        l4 = -4294967296L;

        b5 = 32;

        b6 = 0;

     label1:
        if b5 == 0 goto label3;

        $l1 = l3 & l4;

        $b2 = $l1 cmp l3;

        if $b2 != 0 goto label2;

        b6 = b6 | b5;

        l3 = l3 >> b5;

     label2:
        b5 = b5 >> 1;

        l4 = l4 >> b5;

        goto label1;

     label3:
        return b6;
    }

    private int getBit(int, int)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0;
        int i0, i1, i3, $i5, $i6, $i7, $i11, $i14;
        long l2, $l8, $l10, $l12, $l13, $l15, $l17, $l21;
        double[] $r1;
        double $d0;
        byte $b9, $b16, $b18, $b19, $b20;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: double[] components>;

        $d0 = $r1[i0];

        l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        i3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int exponent(long)>(l2);

        if i1 < i3 goto label01;

        $i5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if i1 <= $i5 goto label02;

     label01:
        return 0;

     label02:
        $i6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int offset>;

        if i1 != $i6 goto label05;

        $l17 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>(l2);

        $b18 = $l17 cmp 0L;

        if $b18 != 0 goto label03;

        $b19 = 1;

        goto label04;

     label03:
        $b19 = 0;

     label04:
        return $b19;

     label05:
        $i7 = i3 + 52;

        if i1 <= $i7 goto label08;

        $l15 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>(l2);

        $b16 = $l15 cmp 0L;

        if $b16 != 0 goto label06;

        $b20 = 0;

        goto label07;

     label06:
        $b20 = 1;

     label07:
        return $b20;

     label08:
        $l8 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long sign(long)>(l2);

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label09;

        $l21 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>(l2);

        goto label10;

     label09:
        $l10 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long mantissa(long)>(l2);

        $l21 = neg $l10;

     label10:
        $i11 = i1 - i3;

        $l12 = $l21 >> $i11;

        $l13 = $l12 & 1L;

        $i14 = (int) $l13;

        return $i14;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long IMPLICIT_ONE> = 4503599627370496L;

        <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long MANTISSA_MASK> = 4503599627370495L;

        <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long EXPONENT_MASK> = 9218868437227405312L;

        <org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple: long SIGN_MASK> = -9223372036854775808L;

        return;
    }
}
