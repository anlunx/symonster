public class org.apache.commons.math.dfp.Dfp extends java.lang.Object implements org.apache.commons.math.FieldElement
{
    public static final int RADIX;
    public static final int MIN_EXP;
    public static final int MAX_EXP;
    public static final int ERR_SCALE;
    public static final byte FINITE;
    public static final byte INFINITE;
    public static final byte SNAN;
    public static final byte QNAN;
    private static final java.lang.String NAN_STRING;
    private static final java.lang.String POS_INFINITY_STRING;
    private static final java.lang.String NEG_INFINITY_STRING;
    private static final java.lang.String ADD_TRAP;
    private static final java.lang.String MULTIPLY_TRAP;
    private static final java.lang.String DIVIDE_TRAP;
    private static final java.lang.String SQRT_TRAP;
    private static final java.lang.String ALIGN_TRAP;
    private static final java.lang.String TRUNC_TRAP;
    private static final java.lang.String NEXT_AFTER_TRAP;
    private static final java.lang.String LESS_THAN_TRAP;
    private static final java.lang.String GREATER_THAN_TRAP;
    private static final java.lang.String NEW_INSTANCE_TRAP;
    protected int[] mant;
    protected byte sign;
    protected int exp;
    protected byte nans;
    private final org.apache.commons.math.dfp.DfpField field;

    protected void <init>(org.apache.commons.math.dfp.DfpField)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = r1;

        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, byte)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        byte b0;
        long $l1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        b0 := @parameter1: byte;

        $l1 = (long) b0;

        specialinvoke r0.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>(r1, $l1);

        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, int)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        int i0;
        long $l1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter1: int;

        $l1 = (long) i0;

        specialinvoke r0.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>(r1, $l1);

        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, long)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, i24;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b1, $b2, $b23;
        long $l17, l22;
        boolean z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        l22 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = r1;

        z0 = 0;

        $b1 = l22 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        z0 = 1;

        l22 = l22 + 1L;

     label1:
        $b2 = l22 cmp 0L;

        if $b2 >= 0 goto label2;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = -1;

        l22 = neg l22;

        goto label3;

     label2:
        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

     label3:
        r0.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

     label4:
        $b23 = l22 cmp 0L;

        if $b23 == 0 goto label5;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r6;

        $i8 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i15 = $i9 - $i8;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i10 = lengthof $r7;

        $i12 = $i10 - 1;

        $i11 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i14 = $i12 - $i11;

        $i13 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i15, $r8, $i14, $i13);

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i16 = lengthof $r10;

        $i19 = $i16 - 1;

        $l17 = l22 % 10000L;

        $i18 = (int) $l17;

        $r11[$i19] = $i18;

        l22 = l22 / 10000L;

        $i20 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i21 = $i20 + 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i21;

        goto label4;

     label5:
        if z0 == 0 goto label8;

        i24 = 0;

     label6:
        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r3;

        $i4 = $i3 - 1;

        if i24 >= $i4 goto label8;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = $r4[i24];

        if $i5 == 0 goto label7;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = $r5[i24];

        $i7 = $i6 + 1;

        $r5[i24] = $i7;

        goto label8;

     label7:
        i24 = i24 + 1;

        goto label6;

     label8:
        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, double)
    {
        org.apache.commons.math.dfp.Dfp r0, $r3, $r4, $r5, $r6, $r7, $r8, r13, r14;
        org.apache.commons.math.dfp.DfpField r1;
        double d0;
        long l0, $l2, $l3, $l5, $l14, l16;
        int $i1, $i4, $i7, $i9, i17;
        int[] $r2, $r9, $r10, $r11;
        byte $b6, $b8, $b10, $b11, $b12, $b13, $b15;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i1];

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = r1;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        l16 = l0 & 4503599627370495L;

        $l2 = l0 & 9218868437227405312L;

        $l3 = $l2 >> 52;

        $i4 = (int) $l3;

        i17 = $i4 - 1023;

        if i17 != -1023 goto label4;

        $b13 = d0 cmpl 0.0;

        if $b13 != 0 goto label1;

        return;

     label1:
        i17 = i17 + 1;

     label2:
        $l14 = l16 & 4503599627370496L;

        $b15 = $l14 cmp 0L;

        if $b15 != 0 goto label3;

        i17 = i17 + -1;

        l16 = l16 << 1;

        goto label2;

     label3:
        l16 = l16 & 4503599627370495L;

     label4:
        if i17 != 1024 goto label8;

        $b11 = d0 cmpl d0;

        if $b11 == 0 goto label5;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        goto label7;

     label5:
        $b12 = d0 cmpg 0.0;

        if $b12 >= 0 goto label6;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = -1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        goto label7;

     label6:
        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

     label7:
        return;

     label8:
        $r3 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>(r1, l16);

        $r4 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r4.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>(r1, 4503599627370496L);

        $r5 = virtualinvoke $r3.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>($r4);

        $r6 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getOne()>();

        r13 = virtualinvoke $r5.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r6);

        $r7 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getTwo()>();

        $r8 = staticinvoke <org.apache.commons.math.dfp.DfpMath: org.apache.commons.math.dfp.Dfp pow(org.apache.commons.math.dfp.Dfp,int)>($r7, i17);

        r14 = virtualinvoke r13.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r8);

        $l5 = l0 & -9223372036854775808L;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label9;

        r14 = virtualinvoke r14.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp negate()>();

     label9:
        $r11 = r14.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r10, 0, $i7);

        $b8 = r14.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = $b8;

        $i9 = r14.<org.apache.commons.math.dfp.Dfp: int exp>;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i9;

        $b10 = r14.<org.apache.commons.math.dfp.Dfp: byte nans>;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = $b10;

        return;
    }

    public void <init>(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1;
        int[] $r2, $r4;
        java.lang.Object $r3;
        byte $b0, $b2;
        int $i1;
        org.apache.commons.math.dfp.DfpField $r5;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (int[]) $r3;

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r4;

        $b0 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = $b0;

        $i1 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i1;

        $b2 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = $b2;

        $r5 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = $r5;

        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, java.lang.String)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        java.lang.String r2, r8, r9;
        char[] r3;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i29, $i30, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i49, $i50, $i54, $i56, i57, i58, i59, i60, i61, i64, i65, $i66, i68, i70, i71, i72, $i73, $i74, $i75, i76, i77;
        int[] $r4, $r5, $r6, $r7, $r10;
        boolean $z0, $z1, $z2, z3, z4;
        char $c12, $c13, $c14, $c15, $c24, $c28, $c31, $c36, $c41, $c45, $c46, $c47, $c48, $c51, $c52, $c53, $c55, $c62, $c63;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = newarray (int)[$i2];

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r4;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = r1;

        z3 = 0;

        $i3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: int getRadixDigits()>();

        $i4 = $i3 * 4;

        $i5 = $i4 + 8;

        r3 = newarray (char)[$i5];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("Infinity");

        if $z0 == 0 goto label01;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        return;

     label01:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("-Infinity");

        if $z1 == 0 goto label02;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = -1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        return;

     label02:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z2 == 0 goto label03;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        return;

     label03:
        i57 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("e");

        if i57 != -1 goto label04;

        i57 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("E");

     label04:
        i58 = 0;

        if i57 == -1 goto label10;

        r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i57);

        $i49 = i57 + 1;

        r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i49);

        z4 = 0;

        i59 = 0;

     label05:
        $i50 = virtualinvoke r9.<java.lang.String: int length()>();

        if i59 >= $i50 goto label08;

        $c51 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i59);

        if $c51 != 45 goto label06;

        z4 = 1;

        goto label07;

     label06:
        $c52 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i59);

        if $c52 < 48 goto label07;

        $c53 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i59);

        if $c53 > 57 goto label07;

        $i54 = i58 * 10;

        $c55 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i59);

        $i56 = $i54 + $c55;

        i58 = $i56 - 48;

     label07:
        i59 = i59 + 1;

        goto label05;

     label08:
        if z4 == 0 goto label09;

        i58 = neg i58;

     label09:
        goto label11;

     label10:
        r8 = r2;

     label11:
        $i6 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("-");

        if $i6 == -1 goto label12;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = -1;

     label12:
        i60 = 0;

        i61 = 0;

     label13:
        $c62 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c62 < 49 goto label14;

        $c48 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c48 > 57 goto label14;

        goto label17;

     label14:
        if z3 == 0 goto label15;

        $c47 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c47 != 48 goto label15;

        i61 = i61 + -1;

     label15:
        $c63 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c63 != 46 goto label16;

        z3 = 1;

     label16:
        i60 = i60 + 1;

        $i7 = virtualinvoke r8.<java.lang.String: int length()>();

        if i60 != $i7 goto label13;

        goto label17;

     label17:
        i64 = 4;

        r3[0] = 48;

        r3[1] = 48;

        r3[2] = 48;

        r3[3] = 48;

        i65 = 0;

     label18:
        $i66 = virtualinvoke r8.<java.lang.String: int length()>();

        if i60 != $i66 goto label19;

        goto label24;

     label19:
        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = lengthof $r5;

        $i9 = $i8 * 4;

        $i10 = $i9 + 4;

        $i11 = $i10 + 1;

        if i64 != $i11 goto label20;

        goto label24;

     label20:
        $c12 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c12 != 46 goto label21;

        z3 = 1;

        i61 = i65;

        i60 = i60 + 1;

        goto label18;

     label21:
        $c13 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c13 < 48 goto label22;

        $c14 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        if $c14 <= 57 goto label23;

     label22:
        i60 = i60 + 1;

        goto label18;

     label23:
        $c15 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i60);

        r3[i64] = $c15;

        i64 = i64 + 1;

        i60 = i60 + 1;

        i65 = i65 + 1;

        goto label18;

     label24:
        if z3 == 0 goto label27;

        if i64 == 4 goto label27;

     label25:
        i64 = i64 + -1;

        if i64 != 4 goto label26;

        goto label27;

     label26:
        $c46 = r3[i64];

        if $c46 != 48 goto label27;

        i65 = i65 + -1;

        goto label25;

     label27:
        if z3 == 0 goto label28;

        if i65 != 0 goto label28;

        i61 = 0;

     label28:
        if z3 != 0 goto label29;

        i61 = i64 - 4;

     label29:
        $i16 = i65 - 1;

        i68 = $i16 + 4;

     label30:
        if i68 <= 4 goto label32;

        $c45 = r3[i68];

        if $c45 == 48 goto label31;

        goto label32;

     label31:
        i68 = i68 + -1;

        goto label30;

     label32:
        $i18 = 400 - i61;

        $i17 = i58 % 4;

        $i19 = $i18 - $i17;

        i70 = $i19 % 4;

        i71 = 4 - i70;

        i72 = i61 + i70;

     label33:
        $i73 = i68 - i71;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i74 = lengthof $r10;

        $i75 = $i74 * 4;

        if $i73 >= $i75 goto label35;

        i76 = 0;

     label34:
        if i76 >= 4 goto label33;

        i68 = i68 + 1;

        r3[i68] = 48;

        i76 = i76 + 1;

        goto label34;

     label35:
        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i20 = lengthof $r6;

        i77 = $i20 - 1;

     label36:
        if i77 < 0 goto label37;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $c28 = r3[i71];

        $i29 = $c28 - 48;

        $i34 = $i29 * 1000;

        $i30 = i71 + 1;

        $c31 = r3[$i30];

        $i32 = $c31 - 48;

        $i33 = $i32 * 100;

        $i39 = $i34 + $i33;

        $i35 = i71 + 2;

        $c36 = r3[$i35];

        $i37 = $c36 - 48;

        $i38 = $i37 * 10;

        $i43 = $i39 + $i38;

        $i40 = i71 + 3;

        $c41 = r3[$i40];

        $i42 = $c41 - 48;

        $i44 = $i43 + $i42;

        $r7[i77] = $i44;

        i71 = i71 + 4;

        i77 = i77 + -1;

        goto label36;

     label37:
        $i21 = i72 + i58;

        $i22 = $i21 / 4;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i22;

        $i23 = lengthof r3;

        if i71 >= $i23 goto label38;

        $c24 = r3[i71];

        $i25 = $c24 - 48;

        $i26 = $i25 * 1000;

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: int round(int)>($i26);

     label38:
        return;
    }

    protected void <init>(org.apache.commons.math.dfp.DfpField, byte, byte)
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField r1;
        byte b0, b1;
        int $i2;
        int[] $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field> = r1;

        $i2 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r2 = newarray (int)[$i2];

        r0.<org.apache.commons.math.dfp.Dfp: int[] mant> = $r2;

        r0.<org.apache.commons.math.dfp.Dfp: byte sign> = b0;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

        r0.<org.apache.commons.math.dfp.Dfp: byte nans> = b1;

        return;
    }

    public org.apache.commons.math.dfp.Dfp newInstance()
    {
        org.apache.commons.math.dfp.Dfp r0, $r1;
        org.apache.commons.math.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField)>($r2);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(byte)
    {
        org.apache.commons.math.dfp.Dfp r0, $r1;
        byte b0;
        org.apache.commons.math.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        b0 := @parameter0: byte;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,byte)>($r2, b0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(int)
    {
        org.apache.commons.math.dfp.Dfp r0, $r1;
        int i0;
        org.apache.commons.math.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r2, i0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(long)
    {
        org.apache.commons.math.dfp.Dfp r0, $r1;
        long l0;
        org.apache.commons.math.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        l0 := @parameter0: long;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>($r2, l0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(double)
    {
        org.apache.commons.math.dfp.Dfp r0, $r1;
        double d0;
        org.apache.commons.math.dfp.DfpField $r2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,double)>($r2, d0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, $r5, $r7, $r8;
        org.apache.commons.math.dfp.DfpField $r3, $r4, $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r6.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r7);

        r2.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "newInstance", r1, r2);

        return $r8;

     label1:
        $r5 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        return $r5;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(java.lang.String)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        java.lang.String r1;
        org.apache.commons.math.dfp.DfpField $r3;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        specialinvoke $r2.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>($r3, r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp newInstance(byte, byte)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        byte b0, b1;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp newDfp(byte,byte)>(b0, b1);

        return $r2;
    }

    public org.apache.commons.math.dfp.DfpField getField()
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        return $r1;
    }

    public int getRadixDigits()
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        return $i0;
    }

    public org.apache.commons.math.dfp.Dfp getZero()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getZero()>();

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp getOne()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getOne()>();

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp getTwo()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getTwo()>();

        return $r2;
    }

    protected void shiftLeft()
    {
        org.apache.commons.math.dfp.Dfp r0;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r1;

        i5 = $i0 - 1;

     label1:
        if i5 <= 0 goto label2;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = i5 - 1;

        $i4 = $r3[$i3];

        $r4[i5] = $i4;

        i5 = i5 + -1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r2[0] = 0;

        $i1 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i2;

        return;
    }

    protected void shiftRight()
    {
        org.apache.commons.math.dfp.Dfp r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i8 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        if i8 >= $i1 goto label2;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = i8 + 1;

        $i7 = $r4[$i6];

        $r5[i8] = $i7;

        i8 = i8 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r2;

        $i3 = $i2 - 1;

        $r3[$i3] = 0;

        $i4 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = $i5;

        return;
    }

    protected int align(int)
    {
        org.apache.commons.math.dfp.Dfp r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;
        int[] $r1, $r4, $r5;
        org.apache.commons.math.dfp.DfpField $r2, $r6;
        boolean z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        i5 = 0;

        z0 = 0;

        $i2 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        i1 = $i2 - i0;

        i6 = i1;

        if i1 >= 0 goto label1;

        i6 = neg i1;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r1;

        $i4 = $i3 + 1;

        if i6 <= $i4 goto label3;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r5, 0);

        r0.<org.apache.commons.math.dfp.Dfp: int exp> = i0;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r6.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "align", r0, r0);

        return 0;

     label3:
        i7 = 0;

     label4:
        if i7 >= i6 goto label8;

        if i1 >= 0 goto label6;

        if i5 == 0 goto label5;

        z0 = 1;

     label5:
        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        i5 = $r4[0];

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: void shiftRight()>();

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: void shiftLeft()>();

     label7:
        i7 = i7 + 1;

        goto label4;

     label8:
        if z0 == 0 goto label9;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r2.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "align", r0, r0);

     label9:
        return i5;
    }

    public boolean lessThan(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, $r6, $r7, $r10;
        org.apache.commons.math.dfp.DfpField $r3, $r4, $r5, $r9;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r9.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r10 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r10);

        r2.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "lessThan", r1, r2);

        return 0;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label3;

     label2:
        $r5 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r5.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r6 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r6);

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "lessThan", r1, $r7);

        return 0;

     label3:
        $i2 = staticinvoke <org.apache.commons.math.dfp.Dfp: int compare(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(r0, r1);

        if $i2 >= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public boolean greaterThan(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, $r6, $r7, $r10;
        org.apache.commons.math.dfp.DfpField $r3, $r4, $r5, $r9;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label1;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r9.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r10 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r10);

        r2.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "greaterThan", r1, r2);

        return 0;

     label1:
        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label3;

     label2:
        $r5 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r5.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r6 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r6);

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "greaterThan", r1, $r7);

        return 0;

     label3:
        $i2 = staticinvoke <org.apache.commons.math.dfp.Dfp: int compare(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(r0, r1);

        if $i2 <= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math.dfp.Dfp r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNaN()
    {
        org.apache.commons.math.dfp.Dfp r0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b0 == 3 goto label1;

        $b1 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.dfp.Dfp r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math.dfp.DfpField $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.commons.math.dfp.Dfp;

        if $z0 == 0 goto label5;

        r2 = (org.apache.commons.math.dfp.Dfp) r1;

        $z1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z2 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r2.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label2;

     label1:
        return 0;

     label2:
        $i2 = staticinvoke <org.apache.commons.math.dfp.Dfp: int compare(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(r0, r2);

        if $i2 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math.dfp.Dfp r0;
        byte $b0, $b2;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i1 = $b0 << 8;

        $i4 = 17 + $i1;

        $b2 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        $i3 = $b2 << 16;

        $i6 = $i4 + $i3;

        $i5 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i7 = $i6 + $i5;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r1);

        $i9 = $i7 + $i8;

        return $i9;
    }

    public boolean unequal(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.math.dfp.DfpField $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r3 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label2;

     label1:
        return 0;

     label2:
        $z2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean greaterThan(org.apache.commons.math.dfp.Dfp)>(r1);

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>(r1);

        if $z3 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    private static int compare(org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i33, $i34, $i35, $i40, i41;
        byte $b3, $b4, $b5, $b13, $b14, $b15, $b23, $b24, $b25, $b26, $b27, $b28, $b29, $b30, $b31, $b32, $b36, $b37, $b38, $b39;

        r0 := @parameter0: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter1: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        $i2 = $r3[$i1];

        if $i2 != 0 goto label01;

        $r13 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r12 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i33 = lengthof $r12;

        $i34 = $i33 - 1;

        $i35 = $r13[$i34];

        if $i35 != 0 goto label01;

        $b36 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b36 != 0 goto label01;

        $b37 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b37 != 0 goto label01;

        return 0;

     label01:
        $b38 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b39 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b38 == $b39 goto label03;

        $b32 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b32 != -1 goto label02;

        return -1;

     label02:
        return 1;

     label03:
        $b3 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label04;

        $b30 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b30 != 0 goto label04;

        $b31 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        return $b31;

     label04:
        $b4 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b4 != 0 goto label05;

        $b27 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b27 != 1 goto label05;

        $b28 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b29 = neg $b28;

        return $b29;

     label05:
        $b5 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b5 != 1 goto label06;

        $b26 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b26 != 1 goto label06;

        return 0;

     label06:
        $r5 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r4;

        $i7 = $i6 - 1;

        $i8 = $r5[$i7];

        if $i8 == 0 goto label08;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r10 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i16 = lengthof $r10;

        $i17 = $i16 - 1;

        $i18 = $r11[$i17];

        if $i18 == 0 goto label08;

        $i20 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i19 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i20 >= $i19 goto label07;

        $b24 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b25 = neg $b24;

        return $b25;

     label07:
        $i22 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i21 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i22 <= $i21 goto label08;

        $b23 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        return $b23;

     label08:
        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i40 = lengthof $r14;

        i41 = $i40 - 1;

     label09:
        if i41 < 0 goto label12;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i10 = $r6[i41];

        $r7 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i9 = $r7[i41];

        if $i10 <= $i9 goto label10;

        $b15 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        return $b15;

     label10:
        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i12 = $r8[i41];

        $r9 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i11 = $r9[i41];

        if $i12 >= $i11 goto label11;

        $b13 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b14 = neg $b13;

        return $b14;

     label11:
        i41 = i41 + -1;

        goto label09;

     label12:
        return 0;
    }

    public org.apache.commons.math.dfp.Dfp rint()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = <org.apache.commons.math.dfp.DfpField$RoundingMode: org.apache.commons.math.dfp.DfpField$RoundingMode ROUND_HALF_EVEN>;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp trunc(org.apache.commons.math.dfp.DfpField$RoundingMode)>($r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp floor()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = <org.apache.commons.math.dfp.DfpField$RoundingMode: org.apache.commons.math.dfp.DfpField$RoundingMode ROUND_FLOOR>;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp trunc(org.apache.commons.math.dfp.DfpField$RoundingMode)>($r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp ceil()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = <org.apache.commons.math.dfp.DfpField$RoundingMode: org.apache.commons.math.dfp.DfpField$RoundingMode ROUND_CEIL>;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp trunc(org.apache.commons.math.dfp.DfpField$RoundingMode)>($r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp remainder(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, $r3, $r4, $r5;
        int[] $r6, $r7;
        int $i0, $i1, $i2;
        byte $b3;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp rint()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r1);

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r5);

        $r7 = r2.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r6;

        $i1 = $i0 - 1;

        $i2 = $r7[$i1];

        if $i2 != 0 goto label1;

        $b3 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r2.<org.apache.commons.math.dfp.Dfp: byte sign> = $b3;

     label1:
        return r2;
    }

    protected org.apache.commons.math.dfp.Dfp trunc(org.apache.commons.math.dfp.DfpField$RoundingMode)
    {
        org.apache.commons.math.dfp.Dfp r0, $r7, $r8, $r11, $r12, $r15, $r17, $r18, $r19, $r20, r21, r22, r23, r24, r25, r26, r28;
        org.apache.commons.math.dfp.DfpField$RoundingMode r1;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        byte $b0, $b12, $b13, $b20, $b21;
        int[] $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r13, $r14;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i22, i23;
        org.apache.commons.math.dfp.DfpField $r16, $r27;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField$RoundingMode;

        z4 = 0;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label01;

        $r20 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r20;

     label01:
        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b0 != 1 goto label02;

        $r19 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r19;

     label02:
        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        $i3 = $r3[$i2];

        if $i3 != 0 goto label03;

        $r18 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r18;

     label03:
        $i4 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i4 >= 0 goto label04;

        $r16 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r16.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        $r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r21 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r17);

        r22 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "trunc", r0, r21);

        return r22;

     label04:
        $i6 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = lengthof $r4;

        if $i6 < $i5 goto label05;

        $r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r15;

     label05:
        r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        i23 = 0;

     label06:
        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = lengthof $r5;

        $i7 = r23.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i9 = $i8 - $i7;

        if i23 >= $i9 goto label09;

        $z3 = z4;

        $r13 = r23.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i22 = $r13[i23];

        if $i22 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        z4 = $z3 | $z5;

        $r14 = r23.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r14[i23] = 0;

        i23 = i23 + 1;

        goto label06;

     label09:
        if z4 == 0 goto label15;

        $r6 = <org.apache.commons.math.dfp.Dfp$1: int[] $SwitchMap$org$apache$commons$math$dfp$DfpField$RoundingMode>;

        $i10 = virtualinvoke r1.<org.apache.commons.math.dfp.DfpField$RoundingMode: int ordinal()>();

        $i11 = $r6[$i10];

        tableswitch($i11)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            default: goto label12;
        };

     label10:
        $b12 = r23.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b12 != -1 goto label14;

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(int)>(-1);

        r23 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r7);

        goto label14;

     label11:
        $b13 = r23.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b13 != 1 goto label14;

        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r23 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r8);

        goto label14;

     label12:
        r24 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(java.lang.String)>("0.5");

        r25 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>(r23);

        r25.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        $z1 = virtualinvoke r25.<org.apache.commons.math.dfp.Dfp: boolean greaterThan(org.apache.commons.math.dfp.Dfp)>(r24);

        if $z1 == 0 goto label13;

        $r12 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r25 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r12);

        $b21 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r25.<org.apache.commons.math.dfp.Dfp: byte sign> = $b21;

        r23 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r25);

     label13:
        $z2 = virtualinvoke r25.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r24);

        if $z2 == 0 goto label14;

        $i14 = r23.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i14 <= 0 goto label14;

        $r10 = r23.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i16 = lengthof $r9;

        $i15 = r23.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i17 = $i16 - $i15;

        $i18 = $r10[$i17];

        $i19 = $i18 & 1;

        if $i19 == 0 goto label14;

        $r11 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r26 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r11);

        $b20 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r26.<org.apache.commons.math.dfp.Dfp: byte sign> = $b20;

        r23 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r26);

     label14:
        $r27 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r27.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        r28 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "trunc", r0, r23);

        return r28;

     label15:
        return r23;
    }

    public int intValue()
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r2, $r3;
        boolean $z0, $z1;
        int[] $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, i8;
        byte $b4;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i7 = 0;

        r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp rint()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(int)>(2147483647);

        $z0 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean greaterThan(org.apache.commons.math.dfp.Dfp)>($r2);

        if $z0 == 0 goto label1;

        return 2147483647;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(int)>(-2147483648);

        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>($r3);

        if $z1 == 0 goto label2;

        return -2147483648;

     label2:
        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r4;

        i8 = $i0 - 1;

     label3:
        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r5;

        $i1 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i3 = $i2 - $i1;

        if i8 < $i3 goto label4;

        $i6 = i7 * 10000;

        $r6 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = $r6[i8];

        i7 = $i6 + $i5;

        i8 = i8 + -1;

        goto label3;

     label4:
        $b4 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b4 != -1 goto label5;

        i7 = neg i7;

     label5:
        return i7;
    }

    public int log10K()
    {
        org.apache.commons.math.dfp.Dfp r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $i0 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public org.apache.commons.math.dfp.Dfp power10K(int)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r2;
        int i0, $i1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r2);

        $i1 = i0 + 1;

        r1.<org.apache.commons.math.dfp.Dfp: int exp> = $i1;

        return r1;
    }

    public int log10()
    {
        org.apache.commons.math.dfp.Dfp r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

        if $i2 <= 1000 goto label1;

        $i18 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i19 = $i18 * 4;

        $i20 = $i19 - 1;

        return $i20;

     label1:
        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r3;

        $i4 = $i3 - 1;

        $i5 = $r4[$i4];

        if $i5 <= 100 goto label2;

        $i15 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i16 = $i15 * 4;

        $i17 = $i16 - 2;

        return $i17;

     label2:
        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r5;

        $i7 = $i6 - 1;

        $i8 = $r6[$i7];

        if $i8 <= 10 goto label3;

        $i12 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i13 = $i12 * 4;

        $i14 = $i13 - 3;

        return $i14;

     label3:
        $i9 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i10 = $i9 * 4;

        $i11 = $i10 - 4;

        return $i11;
    }

    public org.apache.commons.math.dfp.Dfp power10(int)
    {
        org.apache.commons.math.dfp.Dfp r0, $r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r1);

        if i0 < 0 goto label1;

        $i6 = i0 / 4;

        $i7 = $i6 + 1;

        r2.<org.apache.commons.math.dfp.Dfp: int exp> = $i7;

        goto label2;

     label1:
        $i1 = i0 + 1;

        $i2 = $i1 / 4;

        r2.<org.apache.commons.math.dfp.Dfp: int exp> = $i2;

     label2:
        $i3 = i0 % 4;

        $i4 = $i3 + 4;

        $i5 = $i4 % 4;

        tableswitch($i5)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            default: goto label6;
        };

     label3:
        goto label7;

     label4:
        r2 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(int)>(10);

        goto label7;

     label5:
        r2 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(int)>(100);

        goto label7;

     label6:
        r2 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(int)>(1000);

     label7:
        return r2;
    }

    protected int complement(int)
    {
        org.apache.commons.math.dfp.Dfp r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i10 := @parameter0: int;

        i11 = 10000 - i10;

        i12 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r1;

        if i12 >= $i1 goto label2;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i7 = $r5[i12];

        $i8 = 10000 - $i7;

        $i9 = $i8 - 1;

        $r6[i12] = $i9;

        i12 = i12 + 1;

        goto label1;

     label2:
        i13 = i11 / 10000;

        $i2 = i13 * 10000;

        i14 = i11 - $i2;

        i15 = 0;

     label3:
        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r2;

        if i15 >= $i3 goto label4;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i4 = $r3[i15];

        i0 = $i4 + i13;

        i13 = i0 / 10000;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = i13 * 10000;

        $i6 = i0 - $i5;

        $r4[i15] = $i6;

        i15 = i15 + 1;

        goto label3;

     label4:
        return i14;
    }

    public org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, $r21, $r23, $r24, r25, r26, r27, r28, $r29, r30;
        byte b0, b1, $b4, $b5, $b6, $b7, $b35, $b36, $b37, $b38, $b39, $b40, $b41, $b42, $b43, $b44, b45;
        org.apache.commons.math.dfp.DfpField $r3, $r4, $r20, $r22;
        int $i2, $i3, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i46, i47, i48, i49, i50, $i51, i52, i53, i54, i55, $i56, $i57, i58;
        boolean $z0, $z1;
        int[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r31, $r32;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i2 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i3 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i2 == $i3 goto label01;

        $r22 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r22.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r25 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r23);

        r25.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r24 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "add", r1, r25);

        return $r24;

     label01:
        $b4 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b4 != 0 goto label02;

        $b43 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b43 == 0 goto label08;

     label02:
        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return r0;

     label03:
        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label04;

        return r1;

     label04:
        $b5 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b5 != 1 goto label05;

        $b42 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b42 != 0 goto label05;

        return r0;

     label05:
        $b6 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b6 != 1 goto label06;

        $b41 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b41 != 0 goto label06;

        return r1;

     label06:
        $b7 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b7 != 1 goto label07;

        $b38 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b38 != 1 goto label07;

        $b40 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b39 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b40 != $b39 goto label07;

        return r1;

     label07:
        $b44 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b44 != 1 goto label08;

        $b35 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b35 != 1 goto label08;

        $b37 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b36 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b37 == $b36 goto label08;

        $r20 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r20.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r21 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r26 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r21);

        r26.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r27 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "add", r1, r26);

        return r27;

     label08:
        r28 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r1);

        $r29 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r30 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r29);

        b0 = r28.<org.apache.commons.math.dfp.Dfp: byte sign>;

        b1 = r2.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r28.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        r2.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

        b45 = b1;

        $i46 = staticinvoke <org.apache.commons.math.dfp.Dfp: int compare(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(r28, r2);

        if $i46 <= 0 goto label09;

        b45 = b0;

     label09:
        $r6 = r2.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = lengthof $r5;

        $i9 = $i8 - 1;

        $i10 = $r6[$i9];

        if $i10 != 0 goto label10;

        $i34 = r28.<org.apache.commons.math.dfp.Dfp: int exp>;

        r2.<org.apache.commons.math.dfp.Dfp: int exp> = $i34;

     label10:
        $r8 = r28.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i11 = lengthof $r7;

        $i12 = $i11 - 1;

        $i13 = $r8[$i12];

        if $i13 != 0 goto label11;

        $i33 = r2.<org.apache.commons.math.dfp.Dfp: int exp>;

        r28.<org.apache.commons.math.dfp.Dfp: int exp> = $i33;

     label11:
        i47 = 0;

        i48 = 0;

        $i15 = r28.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i14 = r2.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i15 >= $i14 goto label12;

        $i32 = r2.<org.apache.commons.math.dfp.Dfp: int exp>;

        i47 = virtualinvoke r28.<org.apache.commons.math.dfp.Dfp: int align(int)>($i32);

        goto label13;

     label12:
        $i16 = r28.<org.apache.commons.math.dfp.Dfp: int exp>;

        i48 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: int align(int)>($i16);

     label13:
        if b0 == b1 goto label15;

        if b0 != b45 goto label14;

        i48 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: int complement(int)>(i48);

        goto label15;

     label14:
        i47 = virtualinvoke r28.<org.apache.commons.math.dfp.Dfp: int complement(int)>(i47);

     label15:
        i49 = 0;

        i50 = 0;

     label16:
        $r31 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i51 = lengthof $r31;

        if i50 >= $i51 goto label17;

        $r17 = r28.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i28 = $r17[i50];

        $r18 = r2.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i27 = $r18[i50];

        $i29 = $i28 + $i27;

        i52 = $i29 + i49;

        i49 = i52 / 10000;

        $r19 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i30 = i49 * 10000;

        $i31 = i52 - $i30;

        $r19[i50] = $i31;

        i50 = i50 + 1;

        goto label16;

     label17:
        $i17 = r28.<org.apache.commons.math.dfp.Dfp: int exp>;

        r30.<org.apache.commons.math.dfp.Dfp: int exp> = $i17;

        r30.<org.apache.commons.math.dfp.Dfp: byte sign> = b45;

        if i49 == 0 goto label18;

        if b0 != b1 goto label18;

        $r14 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        i53 = $r14[0];

        virtualinvoke r30.<org.apache.commons.math.dfp.Dfp: void shiftRight()>();

        $r16 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r15 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i25 = lengthof $r15;

        $i26 = $i25 - 1;

        $r16[$i26] = i49;

        i54 = virtualinvoke r30.<org.apache.commons.math.dfp.Dfp: int round(int)>(i53);

        if i54 == 0 goto label18;

        r30 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i54, "add", r1, r30);

     label18:
        i55 = 0;

     label19:
        $r32 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i56 = lengthof $r32;

        if i55 >= $i56 goto label22;

        $r12 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i21 = lengthof $r11;

        $i22 = $i21 - 1;

        $i23 = $r12[$i22];

        if $i23 == 0 goto label20;

        goto label22;

     label20:
        virtualinvoke r30.<org.apache.commons.math.dfp.Dfp: void shiftLeft()>();

        if i55 != 0 goto label21;

        $r13 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i24 = i47 + i48;

        $r13[0] = $i24;

        i47 = 0;

        i48 = 0;

     label21:
        i55 = i55 + 1;

        goto label19;

     label22:
        $r10 = r30.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i18 = lengthof $r9;

        $i19 = $i18 - 1;

        $i20 = $r10[$i19];

        if $i20 != 0 goto label23;

        r30.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

        if b0 == b1 goto label23;

        r30.<org.apache.commons.math.dfp.Dfp: byte sign> = 1;

     label23:
        $i57 = i47 + i48;

        i58 = virtualinvoke r30.<org.apache.commons.math.dfp.Dfp: int round(int)>($i57);

        if i58 == 0 goto label24;

        r30 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i58, "add", r1, r30);

     label24:
        return r30;
    }

    public org.apache.commons.math.dfp.Dfp negate()
    {
        org.apache.commons.math.dfp.Dfp r0, r1;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b0 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b1 = neg $b0;

        $b2 = (byte) $b1;

        r1.<org.apache.commons.math.dfp.Dfp: byte sign> = $b2;

        return r1;
    }

    public org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r2 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp negate()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r2);

        return $r3;
    }

    protected int round(int)
    {
        org.apache.commons.math.dfp.Dfp r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i17, i18, $i19;
        org.apache.commons.math.dfp.DfpField $r1, $r4, $r5, $r6;
        int[] $r2, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r3;
        byte $b15, $b16;
        boolean z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        $r2 = <org.apache.commons.math.dfp.Dfp$1: int[] $SwitchMap$org$apache$commons$math$dfp$DfpField$RoundingMode>;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.DfpField$RoundingMode getRoundingMode()>();

        $i2 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField$RoundingMode: int ordinal()>();

        $i3 = $r2[$i2];

        tableswitch($i3)
        {
            case 1: goto label22;
            case 2: goto label19;
            case 3: goto label11;
            case 4: goto label01;
            case 5: goto label02;
            case 6: goto label05;
            case 7: goto label08;
            case 8: goto label15;
            default: goto label22;
        };

     label01:
        z1 = 0;

        goto label25;

     label02:
        if i0 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z1 = $z2;

        goto label25;

     label05:
        if i0 < 5000 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z1 = $z3;

        goto label25;

     label08:
        if i0 <= 5000 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        z1 = $z4;

        goto label25;

     label11:
        if i0 > 5000 goto label12;

        if i0 != 5000 goto label13;

        $r13 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i13 = $r13[0];

        $i14 = $i13 & 1;

        if $i14 != 1 goto label13;

     label12:
        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        z1 = $z5;

        goto label25;

     label15:
        if i0 > 5000 goto label16;

        if i0 != 5000 goto label17;

        $r12 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i11 = $r12[0];

        $i12 = $i11 & 1;

        if $i12 != 0 goto label17;

     label16:
        $z6 = 1;

        goto label18;

     label17:
        $z6 = 0;

     label18:
        z1 = $z6;

        goto label25;

     label19:
        $b15 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b15 != 1 goto label20;

        if i0 == 0 goto label20;

        $z7 = 1;

        goto label21;

     label20:
        $z7 = 0;

     label21:
        z1 = $z7;

        goto label25;

     label22:
        $b16 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b16 != -1 goto label23;

        if i0 == 0 goto label23;

        $z8 = 1;

        goto label24;

     label23:
        $z8 = 0;

     label24:
        z1 = $z8;

     label25:
        if z1 == 0 goto label28;

        i17 = 1;

        i18 = 0;

     label26:
        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = lengthof $r7;

        if i18 >= $i5 goto label27;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = $r10[i18];

        i1 = $i8 + i17;

        i17 = i1 / 10000;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i9 = i17 * 10000;

        $i10 = i1 - $i9;

        $r11[i18] = $i10;

        i18 = i18 + 1;

        goto label26;

     label27:
        if i17 == 0 goto label28;

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: void shiftRight()>();

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r8;

        $i7 = $i6 - 1;

        $r9[$i7] = i17;

     label28:
        $i19 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i19 >= -32767 goto label29;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r6.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(8);

        return 8;

     label29:
        $i4 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i4 <= 32768 goto label30;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r5.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(4);

        return 4;

     label30:
        if i0 == 0 goto label31;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        return 16;

     label31:
        return 0;
    }

    public org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r5, $r13, $r23, $r31, $r32, r33, r34, r35, r36, r37, r38, r39;
        int[] r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r40, $r41, $r42;
        org.apache.commons.math.dfp.DfpField $r3, $r4, $r22, $r30;
        int $i0, $i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i47, $i48, $i50, $i51, $i52, $i56, $i59, $i60, $i61, $i64, $i67, $i68, $i69, $i72, $i78, $i79, i80, $i81, i82, i83, i84, i85, i86, i87, i88, $i89, i91;
        byte $b2, $b3, $b4, $b17, $b18, $b19, $b45, $b49, $b53, $b54, $b55, $b57, $b58, $b62, $b63, $b65, $b66, $b70, $b71, $b73, $b74, $b75, $b76, $b77, $b90;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r4 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label01;

        $r30 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r30.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r31 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r33 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r31);

        r33.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r32 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "multiply", r1, r33);

        return $r32;

     label01:
        $r5 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r34 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r5);

        $b2 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b2 != 0 goto label02;

        $b74 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b74 == 0 goto label10;

     label02:
        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return r0;

     label03:
        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label04;

        return r1;

     label04:
        $b3 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b3 != 1 goto label05;

        $b66 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b66 != 0 goto label05;

        $r29 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r28 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i67 = lengthof $r28;

        $i68 = $i67 - 1;

        $i69 = $r29[$i68];

        if $i69 == 0 goto label05;

        r35 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b71 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b70 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i72 = $b71 * $b70;

        $b73 = (byte) $i72;

        r35.<org.apache.commons.math.dfp.Dfp: byte sign> = $b73;

        return r35;

     label05:
        $b75 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b75 != 1 goto label06;

        $b58 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b58 != 0 goto label06;

        $r27 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r26 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i59 = lengthof $r26;

        $i60 = $i59 - 1;

        $i61 = $r27[$i60];

        if $i61 == 0 goto label06;

        r36 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r1);

        $b63 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b62 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i64 = $b63 * $b62;

        $b65 = (byte) $i64;

        r36.<org.apache.commons.math.dfp.Dfp: byte sign> = $b65;

        return r36;

     label06:
        $b76 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b76 != 1 goto label07;

        $b53 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b53 != 1 goto label07;

        r37 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b55 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b54 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i56 = $b55 * $b54;

        $b57 = (byte) $i56;

        r37.<org.apache.commons.math.dfp.Dfp: byte sign> = $b57;

        return r37;

     label07:
        $b4 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label08;

        $b49 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b49 != 0 goto label08;

        $r25 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r24 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i50 = lengthof $r24;

        $i51 = $i50 - 1;

        $i52 = $r25[$i51];

        if $i52 == 0 goto label09;

     label08:
        $b77 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b77 != 1 goto label10;

        $b45 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b45 != 0 goto label10;

        $r21 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r20 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i46 = lengthof $r20;

        $i47 = $i46 - 1;

        $i48 = $r21[$i47];

        if $i48 != 0 goto label10;

     label09:
        $r22 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r22.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r38 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r23);

        r38.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r39 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "multiply", r1, r38);

        return r39;

     label10:
        $r40 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i78 = lengthof $r40;

        $i79 = $i78 * 2;

        r2 = newarray (int)[$i79];

        i80 = 0;

     label11:
        $r41 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i81 = lengthof $r41;

        if i80 >= $i81 goto label14;

        i82 = 0;

        i83 = 0;

     label12:
        $r16 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i34 = lengthof $r16;

        if i83 >= $i34 goto label13;

        $r18 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i38 = $r18[i80];

        $r19 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i37 = $r19[i83];

        i84 = $i38 * $i37;

        $i39 = i80 + i83;

        $i40 = r2[$i39];

        $i41 = i84 + $i40;

        i85 = $i41 + i82;

        i82 = i85 / 10000;

        $i44 = i80 + i83;

        $i42 = i82 * 10000;

        $i43 = i85 - $i42;

        r2[$i44] = $i43;

        i83 = i83 + 1;

        goto label12;

     label13:
        $r17 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i35 = lengthof $r17;

        $i36 = i80 + $i35;

        r2[$i36] = i82;

        i80 = i80 + 1;

        goto label11;

     label14:
        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = lengthof $r6;

        $i6 = $i5 * 2;

        i86 = $i6 - 1;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r7;

        $i8 = $i7 * 2;

        i87 = $i8 - 1;

     label15:
        if i87 < 0 goto label17;

        $i33 = r2[i87];

        if $i33 == 0 goto label16;

        i86 = i87;

        goto label17;

     label16:
        i87 = i87 + -1;

        goto label15;

     label17:
        i88 = 0;

     label18:
        $r42 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i89 = lengthof $r42;

        if i88 >= $i89 goto label19;

        $r15 = r34.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i28 = lengthof $r14;

        $i29 = $i28 - i88;

        $i32 = $i29 - 1;

        $i30 = i86 - i88;

        $i31 = r2[$i30];

        $r15[$i32] = $i31;

        i88 = i88 + 1;

        goto label18;

     label19:
        $i10 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i9 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i11 = $i10 + $i9;

        $i14 = $i11 + i86;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i12 = lengthof $r8;

        $i13 = 2 * $i12;

        $i15 = $i14 - $i13;

        $i16 = $i15 + 1;

        r34.<org.apache.commons.math.dfp.Dfp: int exp> = $i16;

        $r13 = r34;

        $b18 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b17 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b18 != $b17 goto label20;

        $b90 = 1;

        goto label21;

     label20:
        $b90 = -1;

     label21:
        $b19 = (byte) $b90;

        $r13.<org.apache.commons.math.dfp.Dfp: byte sign> = $b19;

        $r10 = r34.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i20 = lengthof $r9;

        $i21 = $i20 - 1;

        $i22 = $r10[$i21];

        if $i22 != 0 goto label22;

        r34.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

     label22:
        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i23 = lengthof $r11;

        $i24 = $i23 - 1;

        if i86 <= $i24 goto label23;

        $r12 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i25 = lengthof $r12;

        $i26 = i86 - $i25;

        $i27 = r2[$i26];

        i91 = virtualinvoke r34.<org.apache.commons.math.dfp.Dfp: int round(int)>($i27);

        goto label24;

     label23:
        i91 = virtualinvoke r34.<org.apache.commons.math.dfp.Dfp: int round(int)>(0);

     label24:
        if i91 == 0 goto label25;

        r34 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i91, "multiply", r1, r34);

     label25:
        return r34;
    }

    public org.apache.commons.math.dfp.Dfp multiply(int)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r12, $r13, $r14, r15, r16, r17, r18, r19, r20;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i14, i15, i16, i17, i18;
        byte $b1, $b12, $b13;
        org.apache.commons.math.dfp.DfpField $r1, $r11;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b1 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b1 == 0 goto label03;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label01;

        return r0;

     label01:
        $b12 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b12 != 1 goto label02;

        if i0 == 0 goto label02;

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return r16;

     label02:
        $b13 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b13 != 1 goto label03;

        if i0 != 0 goto label03;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r11.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r12 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r12);

        r17.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r13 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $r14 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r13);

        r18 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "multiply", $r14, r17);

        return r18;

     label03:
        if i0 < 0 goto label04;

        if i0 < 10000 goto label05;

     label04:
        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r19 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r2);

        r19.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r20 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "multiply", r19, r19);

        return r20;

     label05:
        i14 = 0;

        i15 = 0;

     label06:
        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r3;

        if i15 >= $i2 goto label07;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = $r9[i15];

        $i9 = $i8 * i0;

        i16 = $i9 + i14;

        i14 = i16 / 10000;

        $r10 = r15.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i10 = i14 * 10000;

        $i11 = i16 - $i10;

        $r10[i15] = $i11;

        i15 = i15 + 1;

        goto label06;

     label07:
        i17 = 0;

        if i14 == 0 goto label08;

        $r6 = r15.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        i17 = $r6[0];

        virtualinvoke r15.<org.apache.commons.math.dfp.Dfp: void shiftRight()>();

        $r8 = r15.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r7;

        $i7 = $i6 - 1;

        $r8[$i7] = i14;

     label08:
        $r5 = r15.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r4;

        $i4 = $i3 - 1;

        $i5 = $r5[$i4];

        if $i5 != 0 goto label09;

        r15.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

     label09:
        i18 = virtualinvoke r15.<org.apache.commons.math.dfp.Dfp: int round(int)>(i17);

        if i18 == 0 goto label10;

        r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i18, "multiply", r15, r15);

     label10:
        return r15;
    }

    public org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r7, $r22, $r48, $r50, $r51, $r53, $r54, r55, r56, r57, r58, r59, r60, r63, r64;
        int[] r2, r3, r4, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r61, $r62, $r68, $r69, $r70;
        int i0, $i1, $i2, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i97, $i103, $i108, i111, $i112, $i113, $i114, i115, i116, i117, i118, i119, i120, i121, i122, $i123, i125, i126, i127, i128, i129, i130, i131, i132, $i133, i134, i135, $i136, i138;
        org.apache.commons.math.dfp.DfpField $r5, $r6, $r47, $r49, $r52, $r65;
        byte $b3, $b4, $b5, $b6, $b26, $b27, $b28, $b95, $b96, $b98, $b99, $b100, $b101, $b102, $b104, $b105, $b106, $b107, $b109, $b110, $b137;
        boolean $z0, $z1, z3;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r66, $r67;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        i111 = 0;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r5.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r6 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i2 = virtualinvoke $r6.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i1 == $i2 goto label01;

        $r52 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r52.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r53 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r55 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r53);

        r55.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r54 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "divide", r1, r55);

        return $r54;

     label01:
        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r56 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r7);

        $b3 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b3 != 0 goto label02;

        $b110 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b110 == 0 goto label07;

     label02:
        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label03;

        return r0;

     label03:
        $z1 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label04;

        return r1;

     label04:
        $b4 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label05;

        $b105 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b105 != 0 goto label05;

        r57 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b107 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b106 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i108 = $b107 * $b106;

        $b109 = (byte) $i108;

        r57.<org.apache.commons.math.dfp.Dfp: byte sign> = $b109;

        return r57;

     label05:
        $b5 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b5 != 1 goto label06;

        $b100 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b100 != 0 goto label06;

        $r51 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r58 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r51);

        $b102 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b101 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i103 = $b102 * $b101;

        $b104 = (byte) $i103;

        r58.<org.apache.commons.math.dfp.Dfp: byte sign> = $b104;

        return r58;

     label06:
        $b6 = r1.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b6 != 1 goto label07;

        $b99 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b99 != 1 goto label07;

        $r49 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r49.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r50 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r59 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r50);

        r59.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r60 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "divide", r1, r59);

        return r60;

     label07:
        $r61 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r62 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i112 = lengthof $r62;

        $i113 = $i112 - 1;

        $i114 = $r61[$i113];

        if $i114 != 0 goto label08;

        $r47 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r47.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(2);

        $r48 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r63 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r48);

        $b96 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b95 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i97 = $b96 * $b95;

        $b98 = (byte) $i97;

        r63.<org.apache.commons.math.dfp.Dfp: byte sign> = $b98;

        r63.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        r64 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(2, "divide", r1, r63);

        return r64;

     label08:
        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r8;

        $i8 = $i7 + 1;

        r2 = newarray (int)[$i8];

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r9;

        $i10 = $i9 + 2;

        r3 = newarray (int)[$i10];

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i11 = lengthof $r10;

        $i12 = $i11 + 1;

        r4 = newarray (int)[$i12];

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i13 = lengthof $r11;

        r2[$i13] = 0;

        $r12 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i14 = lengthof $r12;

        r3[$i14] = 0;

        $r13 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i15 = lengthof $r13;

        $i16 = $i15 + 1;

        r3[$i16] = 0;

        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i17 = lengthof $r14;

        r4[$i17] = 0;

        i115 = 0;

     label09:
        $r15 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i18 = lengthof $r15;

        if i115 >= $i18 goto label10;

        $r46 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i94 = $r46[i115];

        r2[i115] = $i94;

        r3[i115] = 0;

        r4[i115] = 0;

        i115 = i115 + 1;

        goto label09;

     label10:
        i116 = 0;

        $r16 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i19 = lengthof $r16;

        i117 = $i19 + 1;

     label11:
        if i117 < 0 goto label34;

        $r25 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i43 = lengthof $r25;

        $i44 = r2[$i43];

        $i48 = $i44 * 10000;

        $r26 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i45 = lengthof $r26;

        $i46 = $i45 - 1;

        $i47 = r2[$i46];

        i118 = $i48 + $i47;

        $r28 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r27 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i49 = lengthof $r27;

        $i50 = $i49 - 1;

        $i51 = $r28[$i50];

        $i52 = $i51 + 1;

        i119 = i118 / $i52;

        $i56 = i118 + 1;

        $r30 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r29 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i53 = lengthof $r29;

        $i54 = $i53 - 1;

        $i55 = $r30[$i54];

        i120 = $i56 / $i55;

        z3 = 0;

     label12:
        if z3 != 0 goto label27;

        $i62 = i119 + i120;

        i111 = $i62 / 2;

        i121 = 0;

        i122 = 0;

     label13:
        $r34 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i63 = lengthof $r34;

        $i64 = $i63 + 1;

        if i122 >= $i64 goto label16;

        $r44 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i90 = lengthof $r44;

        if i122 >= $i90 goto label14;

        $r45 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i123 = $r45[i122];

        goto label15;

     label14:
        $i123 = 0;

     label15:
        $i91 = $i123 * i111;

        i0 = $i91 + i121;

        i121 = i0 / 10000;

        $i92 = i121 * 10000;

        $i93 = i0 - $i92;

        r4[i122] = $i93;

        i122 = i122 + 1;

        goto label13;

     label16:
        i125 = 1;

        i126 = 0;

     label17:
        $r35 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i65 = lengthof $r35;

        $i66 = $i65 + 1;

        if i126 >= $i66 goto label18;

        $i84 = r4[i126];

        $i86 = 9999 - $i84;

        $i85 = r2[i126];

        $i87 = $i86 + $i85;

        i127 = $i87 + i125;

        i125 = i127 / 10000;

        $i88 = i125 * 10000;

        $i89 = i127 - $i88;

        r4[i126] = $i89;

        i126 = i126 + 1;

        goto label17;

     label18:
        if i125 != 0 goto label19;

        i120 = i111 - 1;

        goto label12;

     label19:
        $r36 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i67 = lengthof $r36;

        $i68 = r4[$i67];

        $i72 = $i68 * 10000;

        $r37 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i69 = lengthof $r37;

        $i70 = $i69 - 1;

        $i71 = r4[$i70];

        i128 = $i72 + $i71;

        $r39 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r38 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i73 = lengthof $r38;

        $i74 = $i73 - 1;

        $i75 = $r39[$i74];

        $i76 = $i75 + 1;

        i129 = i128 / $i76;

        if i129 < 2 goto label20;

        i119 = i111 + i129;

        goto label12;

     label20:
        z3 = 0;

        $r40 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i77 = lengthof $r40;

        i130 = $i77 - 1;

     label21:
        if i130 < 0 goto label24;

        $r42 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i81 = $r42[i130];

        $i80 = r4[i130];

        if $i81 <= $i80 goto label22;

        z3 = 1;

     label22:
        $r43 = r1.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i83 = $r43[i130];

        $i82 = r4[i130];

        if $i83 >= $i82 goto label23;

        goto label24;

     label23:
        i130 = i130 + -1;

        goto label21;

     label24:
        $r41 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i78 = lengthof $r41;

        $i79 = r4[$i78];

        if $i79 == 0 goto label25;

        z3 = 0;

     label25:
        if z3 != 0 goto label26;

        i119 = i111 + 1;

     label26:
        goto label12;

     label27:
        r3[i117] = i111;

        if i111 != 0 goto label28;

        if i116 == 0 goto label29;

     label28:
        i116 = i116 + 1;

     label29:
        $r65 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $r66 = virtualinvoke $r65.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.DfpField$RoundingMode getRoundingMode()>();

        $r67 = <org.apache.commons.math.dfp.DfpField$RoundingMode: org.apache.commons.math.dfp.DfpField$RoundingMode ROUND_DOWN>;

        if $r66 != $r67 goto label30;

        $r33 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i61 = lengthof $r33;

        if i116 != $i61 goto label30;

        goto label34;

     label30:
        $r31 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i57 = lengthof $r31;

        if i116 <= $i57 goto label31;

        goto label34;

     label31:
        r2[0] = 0;

        i131 = 0;

     label32:
        $r32 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i58 = lengthof $r32;

        if i131 >= $i58 goto label33;

        $i60 = i131 + 1;

        $i59 = r4[i131];

        r2[$i60] = $i59;

        i131 = i131 + 1;

        goto label32;

     label33:
        i117 = i117 + -1;

        goto label11;

     label34:
        $r68 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        i132 = lengthof $r68;

        $r69 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i133 = lengthof $r69;

        i134 = $i133 + 1;

     label35:
        if i134 < 0 goto label37;

        $i42 = r3[i134];

        if $i42 == 0 goto label36;

        i132 = i134;

        goto label37;

     label36:
        i134 = i134 + -1;

        goto label35;

     label37:
        i135 = 0;

     label38:
        $r70 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i136 = lengthof $r70;

        if i135 >= $i136 goto label39;

        $r24 = r56.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r23 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i37 = lengthof $r23;

        $i38 = $i37 - i135;

        $i41 = $i38 - 1;

        $i39 = i132 - i135;

        $i40 = r3[$i39];

        $r24[$i41] = $i40;

        i135 = i135 + 1;

        goto label38;

     label39:
        $i21 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i20 = r1.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i22 = $i21 - $i20;

        $i24 = $i22 + i132;

        $r17 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i23 = lengthof $r17;

        $i25 = $i24 - $i23;

        r56.<org.apache.commons.math.dfp.Dfp: int exp> = $i25;

        $r22 = r56;

        $b27 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b26 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b27 != $b26 goto label40;

        $b137 = 1;

        goto label41;

     label40:
        $b137 = -1;

     label41:
        $b28 = (byte) $b137;

        $r22.<org.apache.commons.math.dfp.Dfp: byte sign> = $b28;

        $r19 = r56.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r18 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i29 = lengthof $r18;

        $i30 = $i29 - 1;

        $i31 = $r19[$i30];

        if $i31 != 0 goto label42;

        r56.<org.apache.commons.math.dfp.Dfp: int exp> = 0;

     label42:
        $r20 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i32 = lengthof $r20;

        $i33 = $i32 - 1;

        if i132 <= $i33 goto label43;

        $r21 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i34 = lengthof $r21;

        $i35 = i132 - $i34;

        $i36 = r3[$i35];

        i138 = virtualinvoke r56.<org.apache.commons.math.dfp.Dfp: int round(int)>($i36);

        goto label44;

     label43:
        i138 = virtualinvoke r56.<org.apache.commons.math.dfp.Dfp: int round(int)>(0);

     label44:
        if i138 == 0 goto label45;

        r56 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i138, "divide", r1, r56);

     label45:
        return r56;
    }

    public org.apache.commons.math.dfp.Dfp divide(int)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r10, $r11, $r12, r13, r14, r15, r16, r17;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i15, i16, i17, i18, i19, i20;
        byte $b2, $b13, $b14;
        org.apache.commons.math.dfp.DfpField $r1, $r9;
        int[] $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        $b2 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b2 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $b14 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b14 != 1 goto label2;

        $r12 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r12;

     label2:
        if i0 != 0 goto label3;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r9.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(2);

        $r10 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r13 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r10);

        $b13 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r13.<org.apache.commons.math.dfp.Dfp: byte sign> = $b13;

        r13.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        $r11 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r14 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(2, "divide", $r11, r13);

        return r14;

     label3:
        if i0 < 0 goto label4;

        if i0 < 10000 goto label5;

     label4:
        $r1 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r1.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r2);

        r15.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "divide", r15, r15);

        return r16;

     label5:
        r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        i15 = 0;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r3;

        i16 = $i3 - 1;

     label6:
        if i16 < 0 goto label7;

        $i11 = i15 * 10000;

        $r7 = r17.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i10 = $r7[i16];

        i17 = $i11 + $i10;

        i1 = i17 / i0;

        $i12 = i1 * i0;

        i15 = i17 - $i12;

        $r8 = r17.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r8[i16] = i1;

        i16 = i16 + -1;

        goto label6;

     label7:
        $r5 = r17.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r4;

        $i5 = $i4 - 1;

        $i6 = $r5[$i5];

        if $i6 != 0 goto label8;

        virtualinvoke r17.<org.apache.commons.math.dfp.Dfp: void shiftLeft()>();

        i18 = i15 * 10000;

        i19 = i18 / i0;

        $i9 = i19 * i0;

        i15 = i18 - $i9;

        $r6 = r17.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r6[0] = i19;

     label8:
        $i7 = i15 * 10000;

        $i8 = $i7 / i0;

        i20 = virtualinvoke r17.<org.apache.commons.math.dfp.Dfp: int round(int)>($i8);

        if i20 == 0 goto label9;

        r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i20, "divide", r17, r17);

     label9:
        return r17;
    }

    public org.apache.commons.math.dfp.Dfp sqrt()
    {
        org.apache.commons.math.dfp.Dfp r0, $r1, $r12, $r13, $r16, r17, r18, r19, r20, r21, r29, r31, r32, r33, r34;
        byte $b0, $b1, $b2, $b16, $b17, $b18, $b19;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        boolean $z0, $z1;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r22, $r23, $r24, $r25, $r26, $r27;
        org.apache.commons.math.dfp.DfpField $r10, $r11;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b0 != 0 goto label01;

        $r15 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i20 = lengthof $r14;

        $i21 = $i20 - 1;

        $i22 = $r15[$i21];

        if $i22 != 0 goto label01;

        $r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r16;

     label01:
        $b1 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b1 == 0 goto label04;

        $b16 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b16 != 1 goto label02;

        $b19 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b19 != 1 goto label02;

        $r13 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r13;

     label02:
        $b17 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b17 != 3 goto label03;

        $r12 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        return $r12;

     label03:
        $b18 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b18 != 2 goto label04;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r11.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        r18 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "sqrt", null, r17);

        return r18;

     label04:
        $b2 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b2 != -1 goto label05;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r10.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        r19 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        r19.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        r20 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "sqrt", null, r19);

        return r20;

     label05:
        r21 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $i3 = r21.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i3 < -1 goto label06;

        $i15 = r21.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i15 <= 1 goto label07;

     label06:
        $i4 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i5 = $i4 / 2;

        r21.<org.apache.commons.math.dfp.Dfp: int exp> = $i5;

     label07:
        $r22 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r23 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i23 = lengthof $r23;

        $i24 = $i23 - 1;

        $i25 = $r22[$i24];

        $i26 = $i25 / 2000;

        tableswitch($i26)
        {
            case 0: goto label08;
            case 1: goto label11;
            case 2: goto label09;
            case 3: goto label10;
            default: goto label11;
        };

     label08:
        $r24 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r25 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i27 = lengthof $r25;

        $i28 = $i27 - 1;

        $r26 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r27 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i29 = lengthof $r27;

        $i30 = $i29 - 1;

        $i31 = $r26[$i30];

        $i32 = $i31 / 2;

        $i33 = $i32 + 1;

        $r24[$i28] = $i33;

        goto label12;

     label09:
        $r7 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i11 = lengthof $r6;

        $i12 = $i11 - 1;

        $r7[$i12] = 1500;

        goto label12;

     label10:
        $r5 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i9 = lengthof $r4;

        $i10 = $i9 - 1;

        $r5[$i10] = 2200;

        goto label12;

     label11:
        $r9 = r21.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i13 = lengthof $r8;

        $i14 = $i13 - 1;

        $r9[$i14] = 3000;

     label12:
        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r21);

        r29 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

     label13:
        $z1 = virtualinvoke r21.<org.apache.commons.math.dfp.Dfp: boolean unequal(org.apache.commons.math.dfp.Dfp)>(r29);

        if $z1 == 0 goto label15;

        r31 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r21);

        r31.<org.apache.commons.math.dfp.Dfp: byte sign> = -1;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r21);

        r32 = virtualinvoke r31.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r1);

        r33 = virtualinvoke r32.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(int)>(2);

        r34 = r29;

        r29 = r21;

        r21 = virtualinvoke r21.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r33);

        $z0 = virtualinvoke r21.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r34);

        if $z0 == 0 goto label14;

        goto label15;

     label14:
        $r3 = r33.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i6 = lengthof $r2;

        $i7 = $i6 - 1;

        $i8 = $r3[$i7];

        if $i8 != 0 goto label13;

        goto label15;

     label15:
        return r21;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.dfp.Dfp r0;
        byte $b0, $b4, $b5;
        int[] $r1;
        int $i1, $i2, $i3;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b0 == 0 goto label4;

        $b4 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b4 != 1 goto label3;

        $b5 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b5 >= 0 goto label1;

        $r4 = "-Infinity";

        goto label2;

     label1:
        $r4 = "Infinity";

     label2:
        return $r4;

     label3:
        return "NaN";

     label4:
        $i2 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r1 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i1 = lengthof $r1;

        if $i2 > $i1 goto label5;

        $i3 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        if $i3 >= -1 goto label6;

     label5:
        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: java.lang.String dfp2sci()>();

        return $r2;

     label6:
        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: java.lang.String dfp2string()>();

        return $r3;
    }

    protected java.lang.String dfp2sci()
    {
        org.apache.commons.math.dfp.Dfp r0;
        char[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i40, $i41, $i42, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i59, i60, i61;
        int[] $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        byte $b9;
        java.lang.String $r6, $r7;
        char $c11, $c19, $c23, $c25, $c29, $c34, $c39, $c43;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r3;

        $i3 = $i2 * 4;

        r1 = newarray (char)[$i3];

        $r4 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i4 = lengthof $r4;

        $i5 = $i4 * 4;

        $i6 = $i5 + 20;

        r2 = newarray (char)[$i6];

        i44 = 0;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i7 = lengthof $r5;

        i45 = $i7 - 1;

     label01:
        if i45 < 0 goto label02;

        i46 = i44 + 1;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i26 = $r8[i45];

        $i27 = $i26 / 1000;

        $i28 = $i27 + 48;

        $c29 = (char) $i28;

        r1[i44] = $c29;

        i47 = i46 + 1;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i30 = $r9[i45];

        $i31 = $i30 / 100;

        $i32 = $i31 % 10;

        $i33 = $i32 + 48;

        $c34 = (char) $i33;

        r1[i46] = $c34;

        i48 = i47 + 1;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i35 = $r10[i45];

        $i36 = $i35 / 10;

        $i37 = $i36 % 10;

        $i38 = $i37 + 48;

        $c39 = (char) $i38;

        r1[i47] = $c39;

        i44 = i48 + 1;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i40 = $r11[i45];

        $i41 = $i40 % 10;

        $i42 = $i41 + 48;

        $c43 = (char) $i42;

        r1[i48] = $c43;

        i45 = i45 + -1;

        goto label01;

     label02:
        i49 = 0;

     label03:
        $i8 = lengthof r1;

        if i49 >= $i8 goto label05;

        $c25 = r1[i49];

        if $c25 == 48 goto label04;

        goto label05;

     label04:
        i49 = i49 + 1;

        goto label03;

     label05:
        i1 = i49;

        i50 = 0;

        $b9 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b9 != -1 goto label06;

        i50 = 0 + 1;

        r2[0] = 45;

     label06:
        $i10 = lengthof r1;

        if i49 == $i10 goto label08;

        i51 = i50 + 1;

        i52 = i49 + 1;

        $c11 = r1[i49];

        r2[i50] = $c11;

        i53 = i51 + 1;

        r2[i51] = 46;

     label07:
        $i12 = lengthof r1;

        if i52 >= $i12 goto label09;

        $i21 = i53;

        i53 = i53 + 1;

        $i22 = i52;

        i52 = i52 + 1;

        $c23 = r1[$i22];

        r2[$i21] = $c23;

        goto label07;

     label08:
        i54 = i50 + 1;

        r2[i50] = 48;

        i55 = i54 + 1;

        r2[i54] = 46;

        i56 = i55 + 1;

        r2[i55] = 48;

        i57 = i56 + 1;

        r2[i56] = 101;

        r2[i57] = 48;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[],int,int)>(r2, 0, 5);

        return $r6;

     label09:
        i59 = i53 + 1;

        r2[i53] = 101;

        $i13 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i14 = $i13 * 4;

        $i15 = $i14 - i1;

        i0 = $i15 - 1;

        i60 = i0;

        if i0 >= 0 goto label10;

        i60 = neg i0;

     label10:
        i61 = 1000000000;

     label11:
        if i61 <= i60 goto label12;

        i61 = i61 / 10;

        goto label11;

     label12:
        if i0 >= 0 goto label13;

        $i20 = i59;

        i59 = i59 + 1;

        r2[$i20] = 45;

     label13:
        if i61 <= 0 goto label14;

        $i16 = i59;

        i59 = i59 + 1;

        $i17 = i60 / i61;

        $i18 = $i17 + 48;

        $c19 = (char) $i18;

        r2[$i16] = $c19;

        i60 = i60 % i61;

        i61 = i61 / 10;

        goto label13;

     label14:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i59);

        return $r7;
    }

    protected java.lang.String dfp2string()
    {
        org.apache.commons.math.dfp.Dfp r0;
        char[] r1;
        int[] $r2, $r3, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, $i42;
        char $c4, $c11, $c16, $c21, $c25, $c41, $c43;
        byte $b5;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i0 = lengthof $r2;

        $i1 = $i0 * 4;

        $i2 = $i1 + 20;

        r1 = newarray (char)[$i2];

        i27 = 1;

        i28 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        z0 = 0;

        r1[0] = 32;

        if i28 > 0 goto label01;

        i29 = 1 + 1;

        r1[1] = 48;

        i27 = i29 + 1;

        r1[i29] = 46;

        z0 = 1;

     label01:
        if i28 >= 0 goto label02;

        i30 = i27 + 1;

        r1[i27] = 48;

        i31 = i30 + 1;

        r1[i30] = 48;

        i32 = i31 + 1;

        r1[i31] = 48;

        i27 = i32 + 1;

        r1[i32] = 48;

        i28 = i28 + 1;

        goto label01;

     label02:
        $r3 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i3 = lengthof $r3;

        i33 = $i3 - 1;

     label03:
        if i33 < 0 goto label05;

        i34 = i27 + 1;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i8 = $r5[i33];

        $i9 = $i8 / 1000;

        $i10 = $i9 + 48;

        $c11 = (char) $i10;

        r1[i27] = $c11;

        i35 = i34 + 1;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i12 = $r6[i33];

        $i13 = $i12 / 100;

        $i14 = $i13 % 10;

        $i15 = $i14 + 48;

        $c16 = (char) $i15;

        r1[i34] = $c16;

        i36 = i35 + 1;

        $r7 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i17 = $r7[i33];

        $i18 = $i17 / 10;

        $i19 = $i18 % 10;

        $i20 = $i19 + 48;

        $c21 = (char) $i20;

        r1[i35] = $c21;

        i27 = i36 + 1;

        $r8 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i22 = $r8[i33];

        $i23 = $i22 % 10;

        $i24 = $i23 + 48;

        $c25 = (char) $i24;

        r1[i36] = $c25;

        i28 = i28 + -1;

        if i28 != 0 goto label04;

        $i26 = i27;

        i27 = i27 + 1;

        r1[$i26] = 46;

        z0 = 1;

     label04:
        i33 = i33 + -1;

        goto label03;

     label05:
        if i28 <= 0 goto label06;

        i37 = i27 + 1;

        r1[i27] = 48;

        i38 = i37 + 1;

        r1[i37] = 48;

        i39 = i38 + 1;

        r1[i38] = 48;

        i27 = i39 + 1;

        r1[i39] = 48;

        i28 = i28 + -1;

        goto label05;

     label06:
        if z0 != 0 goto label07;

        $i7 = i27;

        i27 = i27 + 1;

        r1[$i7] = 46;

     label07:
        i40 = 1;

     label08:
        $c41 = r1[i40];

        if $c41 != 48 goto label09;

        i40 = i40 + 1;

        goto label08;

     label09:
        $c4 = r1[i40];

        if $c4 != 46 goto label10;

        i40 = i40 + -1;

     label10:
        $i42 = i27 - 1;

        $c43 = r1[$i42];

        if $c43 != 48 goto label11;

        i27 = i27 + -1;

        goto label10;

     label11:
        $b5 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        if $b5 >= 0 goto label12;

        i40 = i40 + -1;

        r1[i40] = 45;

     label12:
        $r4 = new java.lang.String;

        $i6 = i27 - i40;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, i40, $i6);

        return $r4;
    }

    public org.apache.commons.math.dfp.Dfp dotrap(int, java.lang.String, org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r2, r3, $r4, $r6, $r7, $r8, $r9, $r12, $r15, r16, $r17;
        int i0, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $i19, $i22;
        java.lang.String r1;
        byte $b1, $b7, $b10, $b11, $b12, $b13, $b20, $b21, $b23, $b24, $b25, $b26;
        int[] $r5, $r10, $r11, $r13, $r14;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.commons.math.dfp.Dfp;

        r3 := @parameter3: org.apache.commons.math.dfp.Dfp;

        r16 = r3;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label12;
            case 4: goto label11;
            case 5: goto label12;
            case 6: goto label12;
            case 7: goto label12;
            case 8: goto label08;
            default: goto label12;
        };

     label01:
        $r4 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r4);

        $b1 = r3.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r16.<org.apache.commons.math.dfp.Dfp: byte sign> = $b1;

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        goto label13;

     label02:
        $b11 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b11 != 0 goto label03;

        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r13 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i17 = lengthof $r13;

        $i18 = $i17 - 1;

        $i19 = $r14[$i18];

        if $i19 == 0 goto label03;

        $r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r15);

        $b21 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $b20 = r2.<org.apache.commons.math.dfp.Dfp: byte sign>;

        $i22 = $b21 * $b20;

        $b23 = (byte) $i22;

        r16.<org.apache.commons.math.dfp.Dfp: byte sign> = $b23;

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

     label03:
        $b24 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b24 != 0 goto label04;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i14 = lengthof $r10;

        $i15 = $i14 - 1;

        $i16 = $r11[$i15];

        if $i16 != 0 goto label04;

        $r12 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r12);

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

     label04:
        $b25 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b25 == 1 goto label05;

        $b13 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b13 != 3 goto label06;

     label05:
        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r8);

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

     label06:
        $b26 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b26 == 1 goto label07;

        $b12 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        if $b12 != 2 goto label13;

     label07:
        $r9 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r9);

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        goto label13;

     label08:
        $i3 = r3.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r5 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i2 = lengthof $r5;

        $i4 = $i3 + $i2;

        if $i4 >= -32767 goto label09;

        $r6 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r6);

        $b7 = r3.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r16.<org.apache.commons.math.dfp.Dfp: byte sign> = $b7;

        goto label10;

     label09:
        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r3);

     label10:
        $i5 = r3.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i6 = $i5 + 32760;

        r3.<org.apache.commons.math.dfp.Dfp: int exp> = $i6;

        goto label13;

     label11:
        $i8 = r3.<org.apache.commons.math.dfp.Dfp: int exp>;

        $i9 = $i8 - 32760;

        r3.<org.apache.commons.math.dfp.Dfp: int exp> = $i9;

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r7);

        $b10 = r3.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r16.<org.apache.commons.math.dfp.Dfp: byte sign> = $b10;

        r16.<org.apache.commons.math.dfp.Dfp: byte nans> = 1;

        goto label13;

     label12:
        r16 = r3;

     label13:
        $r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp trap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(i0, r1, r2, r16, r3);

        return $r17;
    }

    protected org.apache.commons.math.dfp.Dfp trap(int, java.lang.String, org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r2, r3, r4;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.commons.math.dfp.Dfp;

        r3 := @parameter3: org.apache.commons.math.dfp.Dfp;

        r4 := @parameter4: org.apache.commons.math.dfp.Dfp;

        return r3;
    }

    public int classify()
    {
        org.apache.commons.math.dfp.Dfp r0;
        byte $b0;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $b0 = r0.<org.apache.commons.math.dfp.Dfp: byte nans>;

        return $b0;
    }

    public static org.apache.commons.math.dfp.Dfp copysign(org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2;
        byte $b0;

        r0 := @parameter0: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter1: org.apache.commons.math.dfp.Dfp;

        r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r0);

        $b0 = r1.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r2.<org.apache.commons.math.dfp.Dfp: byte sign> = $b0;

        return r2;
    }

    public org.apache.commons.math.dfp.Dfp nextAfter(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r4, $r5, $r7, $r8, $r13, $r15, $r17, $r19, $r20, r21, r22, r23, r24, $r25;
        org.apache.commons.math.dfp.DfpField $r2, $r3, $r9, $r10, $r18;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8;
        byte $b4, $b19;
        int[] $r6, $r11, $r12, $r14, $r16;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r2 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        $r3 = r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math.dfp.DfpField: int getRadixDigits()>();

        if $i0 == $i1 goto label01;

        $r18 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r18.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r19 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        r21 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r19);

        r21.<org.apache.commons.math.dfp.Dfp: byte nans> = 3;

        $r20 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(1, "nextAfter", r1, r21);

        return $r20;

     label01:
        z6 = 0;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>(r1);

        if $z0 == 0 goto label02;

        z6 = 1;

     label02:
        $i2 = staticinvoke <org.apache.commons.math.dfp.Dfp: int compare(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(r0, r1);

        if $i2 != 0 goto label03;

        $r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>(r1);

        return $r17;

     label03:
        $r4 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>($r4);

        if $z1 == 0 goto label06;

        if z6 != 0 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        z6 = $z7;

     label06:
        if z6 == 0 goto label08;

        $r13 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r22 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r13);

        $i16 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r14 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i15 = lengthof $r14;

        $i17 = $i16 - $i15;

        $i18 = $i17 + 1;

        r22.<org.apache.commons.math.dfp.Dfp: int exp> = $i18;

        $b19 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r22.<org.apache.commons.math.dfp.Dfp: byte sign> = $b19;

        $r15 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z5 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>($r15);

        if $z5 == 0 goto label07;

        $r16 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i20 = lengthof $r16;

        $i21 = -32767 - $i20;

        r22.<org.apache.commons.math.dfp.Dfp: int exp> = $i21;

     label07:
        r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r22);

        goto label12;

     label08:
        $r5 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r24 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(org.apache.commons.math.dfp.Dfp)>($r5);

        $i3 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        r24.<org.apache.commons.math.dfp.Dfp: int exp> = $i3;

        $b4 = r0.<org.apache.commons.math.dfp.Dfp: byte sign>;

        r24.<org.apache.commons.math.dfp.Dfp: byte sign> = $b4;

        $z2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r24);

        if $z2 == 0 goto label09;

        $i13 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r12 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i12 = lengthof $r12;

        $i14 = $i13 - $i12;

        r24.<org.apache.commons.math.dfp.Dfp: int exp> = $i14;

        goto label10;

     label09:
        $i6 = r0.<org.apache.commons.math.dfp.Dfp: int exp>;

        $r6 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i5 = lengthof $r6;

        $i7 = $i6 - $i5;

        $i8 = $i7 + 1;

        r24.<org.apache.commons.math.dfp.Dfp: int exp> = $i8;

     label10:
        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label11;

        $r11 = r0.<org.apache.commons.math.dfp.Dfp: int[] mant>;

        $i10 = lengthof $r11;

        $i11 = -32767 - $i10;

        r24.<org.apache.commons.math.dfp.Dfp: int exp> = $i11;

     label11:
        r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>(r24);

     label12:
        $i22 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: int classify()>();

        if $i22 != 1 goto label13;

        $i9 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: int classify()>();

        if $i9 == 1 goto label13;

        $r10 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r10.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "nextAfter", r1, r23);

     label13:
        $r25 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z8 = virtualinvoke r23.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>($r25);

        if $z8 == 0 goto label14;

        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z4 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>($r8);

        if $z4 != 0 goto label14;

        $r9 = r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField field>;

        virtualinvoke $r9.<org.apache.commons.math.dfp.DfpField: void setIEEEFlagsBits(int)>(16);

        r23 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>(16, "nextAfter", r1, r23);

     label14:
        return r23;
    }

    public double toDouble()
    {
        org.apache.commons.math.dfp.Dfp r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9, r10, r11, r12;
        long l0, $l5, $l6, $l7, l10;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        int $i1, $i2, $i3, i8, i9;
        double $d0, $d1, $d2, d3;
        byte $b4;
        java.lang.String r13, r14;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $z0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isInfinite()>();

        if $z0 == 0 goto label02;

        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z4 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>($r8);

        if $z4 == 0 goto label01;

        return #-Infinity;

     label01:
        return #Infinity;

     label02:
        $z1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean isNaN()>();

        if $z1 == 0 goto label03;

        return #NaN;

     label03:
        r9 = r0;

        z5 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getZero()>();

        $z2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>($r1);

        if $z2 == 0 goto label04;

        r9 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp negate()>();

        z5 = 1;

     label04:
        $i1 = virtualinvoke r9.<org.apache.commons.math.dfp.Dfp: int log10()>();

        $d0 = (double) $i1;

        $d1 = $d0 * 3.32;

        i8 = (int) $d1;

        if i8 >= 0 goto label05;

        i8 = i8 + -1;

     label05:
        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getTwo()>();

        r10 = staticinvoke <org.apache.commons.math.dfp.DfpMath: org.apache.commons.math.dfp.Dfp pow(org.apache.commons.math.dfp.Dfp,int)>($r2, i8);

     label06:
        $z6 = virtualinvoke r10.<org.apache.commons.math.dfp.Dfp: boolean lessThan(org.apache.commons.math.dfp.Dfp)>(r9);

        if $z6 != 0 goto label07;

        $z3 = virtualinvoke r10.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r9);

        if $z3 == 0 goto label08;

     label07:
        r10 = virtualinvoke r10.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(int)>(2);

        i8 = i8 + 1;

        goto label06;

     label08:
        i9 = i8 + -1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getTwo()>();

        $r4 = staticinvoke <org.apache.commons.math.dfp.DfpMath: org.apache.commons.math.dfp.Dfp pow(org.apache.commons.math.dfp.Dfp,int)>($r3, i9);

        r11 = virtualinvoke r9.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>($r4);

        if i9 <= -1023 goto label09;

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp getOne()>();

        r11 = virtualinvoke r11.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r7);

     label09:
        if i9 >= -1074 goto label10;

        return 0.0;

     label10:
        if i9 <= 1023 goto label13;

        if z5 == 0 goto label11;

        $d2 = #-Infinity;

        goto label12;

     label11:
        $d2 = #Infinity;

     label12:
        return $d2;

     label13:
        $r5 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(long)>(4503599627370496L);

        $r6 = virtualinvoke r11.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r5);

        r12 = virtualinvoke $r6.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp rint()>();

        r13 = virtualinvoke r12.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        $i2 = virtualinvoke r13.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r14 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r14);

        $b4 = l10 cmp 4503599627370496L;

        if $b4 != 0 goto label14;

        l10 = 0L;

        i9 = i9 + 1;

     label14:
        if i9 > -1023 goto label15;

        i9 = i9 + -1;

     label15:
        if i9 >= -1023 goto label16;

        i9 = i9 + 1;

        l10 = l10 >>> 1;

        goto label15;

     label16:
        $l5 = (long) i9;

        $l6 = $l5 + 1023L;

        $l7 = $l6 << 52;

        l0 = l10 | $l7;

        d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        if z5 == 0 goto label17;

        d3 = neg d3;

     label17:
        return d3;
    }

    public double[] toSplitDouble()
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r3;
        double[] r1;
        double $d0, $d1, $d2, $d3;
        long $l1, $l2;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 = newarray (double)[2];

        $d0 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: double toDouble()>();

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l2 = $l1 & -1073741824L;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);

        r1[0] = $d1;

        $d2 = r1[0];

        $r2 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp newInstance(double)>($d2);

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r2);

        $d3 = virtualinvoke $r3.<org.apache.commons.math.dfp.Dfp: double toDouble()>();

        r1[1] = $d3;

        return r1;
    }

    public volatile org.apache.commons.math.Field getField()
    {
        org.apache.commons.math.dfp.Dfp r0;
        org.apache.commons.math.dfp.DfpField $r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws java.lang.ArithmeticException
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.dfp.Dfp) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.dfp.Dfp) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r2);

        return $r3;
    }

    public volatile java.lang.Object subtract(java.lang.Object)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.dfp.Dfp) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object)
    {
        org.apache.commons.math.dfp.Dfp r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.dfp.Dfp) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.dfp.Dfp: java.lang.String NEW_INSTANCE_TRAP> = "newInstance";

        <org.apache.commons.math.dfp.Dfp: java.lang.String GREATER_THAN_TRAP> = "greaterThan";

        <org.apache.commons.math.dfp.Dfp: java.lang.String LESS_THAN_TRAP> = "lessThan";

        <org.apache.commons.math.dfp.Dfp: java.lang.String NEXT_AFTER_TRAP> = "nextAfter";

        <org.apache.commons.math.dfp.Dfp: java.lang.String TRUNC_TRAP> = "trunc";

        <org.apache.commons.math.dfp.Dfp: java.lang.String ALIGN_TRAP> = "align";

        <org.apache.commons.math.dfp.Dfp: java.lang.String SQRT_TRAP> = "sqrt";

        <org.apache.commons.math.dfp.Dfp: java.lang.String DIVIDE_TRAP> = "divide";

        <org.apache.commons.math.dfp.Dfp: java.lang.String MULTIPLY_TRAP> = "multiply";

        <org.apache.commons.math.dfp.Dfp: java.lang.String ADD_TRAP> = "add";

        <org.apache.commons.math.dfp.Dfp: java.lang.String NEG_INFINITY_STRING> = "-Infinity";

        <org.apache.commons.math.dfp.Dfp: java.lang.String POS_INFINITY_STRING> = "Infinity";

        <org.apache.commons.math.dfp.Dfp: java.lang.String NAN_STRING> = "NaN";

        <org.apache.commons.math.dfp.Dfp: byte QNAN> = 3;

        <org.apache.commons.math.dfp.Dfp: byte SNAN> = 2;

        <org.apache.commons.math.dfp.Dfp: byte INFINITE> = 1;

        <org.apache.commons.math.dfp.Dfp: byte FINITE> = 0;

        <org.apache.commons.math.dfp.Dfp: int ERR_SCALE> = 32760;

        <org.apache.commons.math.dfp.Dfp: int MAX_EXP> = 32768;

        <org.apache.commons.math.dfp.Dfp: int MIN_EXP> = -32767;

        <org.apache.commons.math.dfp.Dfp: int RADIX> = 10000;

        return;
    }
}
