public class com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private final com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver;
    private final com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function;
    private com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method;
    private static final double EPS;
    private static final double SMALL;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r2;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r2 = new com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver> = $r2;

        $r3 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function> = $r3;

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method> = r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r5, r6, $r20, $r21, r22, r23, r24, r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, i13, i14, i15, $i16, i17;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r4, $r17;
        double[][] r7, $r15;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r10, $r11, $r16;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r12;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r19;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        byte $b10;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i11 = lengthof r1;

        if $i11 <= 4 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 4");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i12 = 0;

     label07:
        if i12 >= i0 goto label08;

        $d6 = r1[i12];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i12];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i12 = i12 + 1;

        goto label07;

     label08:
        i13 = 0;

     label09:
        if i13 >= i1 goto label10;

        $d4 = r2[i13];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing NaN");

        $d5 = r2[i13];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing Infinity");

        i13 = i13 + 1;

        goto label09;

     label10:
        r22 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r23 = newarray (double)[i0];

        if i0 != i1 goto label11;

        r24 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label12;

     label11:
        $i7 = i0 + 1;

        r24 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i7);

     label12:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r22, r24);

        i14 = 1;

     label13:
        if i14 >= i0 goto label16;

        $i9 = i14 - 1;

        $d3 = r22[$i9];

        $d2 = r22[i14];

        $b10 = $d3 cmpl $d2;

        if $b10 != 0 goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i14 = i14 + 1;

        goto label13;

     label16:
        $r10 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r25 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r22);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r24, r25);

        $r12 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r4 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i8 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i8 != 4 goto label17;

        $z11 = 1;

        goto label18;

     label17:
        $z11 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r13 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r4, r22);

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r5 = $r15[0];

        r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[])>(r25, r3, r5);

        $r16 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r7 = virtualinvoke $r16.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r24, r25, r3, r6);

        i15 = 0;

     label19:
        $i16 = i0 - 1;

        if i15 >= $i16 goto label22;

        i17 = 0;

     label20:
        if i17 >= 4 goto label21;

        $r20 = r7[i15];

        $d0 = $r20[i17];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r21 = r7[i15];

        $d1 = $r21[i17];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i17 = i17 + 1;

        goto label20;

     label21:
        i15 = i15 + 1;

        goto label19;

     label22:
        $r17 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r18 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r22);

        $r19 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r7);

        specialinvoke $r17.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r18, $r19, 4, 1);

        return $r17;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r3, r4, $r7, $r8, $r9, $r15, $r16, $r19, $r20, $r23, $r31, $r32, $r33, r34, r36, r37, r38, r39;
        double[][] r2, $r27, $r30, r41;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10, $r11, $r14, $r17, $r26, $r28;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r12, r40;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r21, $r22, $r29;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r24;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r25;
        byte $b14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r35;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r7 = r2[0];

        $i3 = lengthof $r7;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $r8 = r2[0];

        $i6 = lengthof $r8;

        if $i7 != $i6 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValuesMatrix\'s row vector length) or (xValues length + 2 = yValuesMatrix\'s row vector length)");

        $i15 = lengthof r1;

        if $i15 <= 4 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 4");

        i0 = lengthof r1;

        $r9 = r2[0];

        i1 = lengthof $r9;

        i2 = lengthof r2;

        i16 = 0;

     label07:
        if i16 >= i0 goto label08;

        $d6 = r1[i16];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i16];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i16 = i16 + 1;

        goto label07;

     label08:
        i17 = 0;

     label09:
        if i17 >= i1 goto label12;

        i18 = 0;

     label10:
        if i18 >= i2 goto label11;

        $r32 = r2[i18];

        $d4 = $r32[i17];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValuesMatrix containing NaN");

        $r33 = r2[i18];

        $d5 = $r33[i17];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing Infinity");

        i18 = i18 + 1;

        goto label10;

     label11:
        i17 = i17 + 1;

        goto label09;

     label12:
        i19 = 0;

     label13:
        if i19 >= i0 goto label18;

        i20 = i19 + 1;

     label14:
        if i20 >= i0 goto label17;

        $d3 = r1[i19];

        $d2 = r1[i20];

        $b14 = $d3 cmpl $d2;

        if $b14 != 0 goto label15;

        $z10 = 1;

        goto label16;

     label15:
        $z10 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i20 = i20 + 1;

        goto label14;

     label17:
        i19 = i19 + 1;

        goto label13;

     label18:
        r34 = newarray (double)[i0];

        r35 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i21 = 0;

     label19:
        if i21 >= i2 goto label24;

        r34 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r36 = newarray (double)[i0];

        if i0 != i1 goto label20;

        $r31 = r2[i21];

        r37 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r31, i0);

        goto label21;

     label20:
        $r20 = r2[i21];

        $i12 = i0 + 1;

        r37 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r20, 1, $i12);

     label21:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r34, r37);

        $r21 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r38 = virtualinvoke $r21.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r34);

        $r22 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r39 = virtualinvoke $r22.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r37, r38);

        $r24 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r23 = r2[i21];

        r40 = virtualinvoke $r24.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, $r23);

        $i13 = virtualinvoke r40.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i13 != 4 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r25 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r40, r34);

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = $r27[0];

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[])>(r38, r39, r3);

        $r28 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r29 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r37, r38, r39, r4);

        specialinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r30);

        r35[i21] = $r28;

        i21 = i21 + 1;

        goto label19;

     label24:
        $r10 = r35[0];

        i22 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r11 = r35[0];

        i23 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i8 = i2 * i22;

        r41 = newmultiarray (double)[$i8][i23];

        i24 = 0;

     label25:
        if i24 >= i22 goto label28;

        i25 = 0;

     label26:
        if i25 >= i2 goto label27;

        $i10 = i2 * i24;

        $i11 = $i10 + i25;

        $r17 = r35[i25];

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i24);

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r41[$i11] = $r19;

        i25 = i25 + 1;

        goto label26;

     label27:
        i24 = i24 + 1;

        goto label25;

     label28:
        i26 = 0;

     label29:
        $i9 = i22 * i2;

        if i26 >= $i9 goto label32;

        i27 = 0;

     label30:
        if i27 >= i23 goto label31;

        $r15 = r41[i26];

        $d0 = $r15[i27];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r16 = r41[i26];

        $d1 = $r16[i27];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i27 = i27 + 1;

        goto label30;

     label31:
        i26 = i26 + 1;

        goto label29;

     label32:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r34);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r41);

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r13, $r14, i23, i2);

        return $r12;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r7, r8, r9, r10, r11, r12, r13, r14, $r35, $r37, $r50, r53, r54, r55, r58, r59, r60, r63;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i22, $i23, $i24, $i25, $i26, $i28, i29, i30, i31, i34, $i35, i36, i37, i38, i39, i40, i41, i42, i43;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r4, r66, r69;
        double[][] r5, r6, $r24, $r33, $r44, $r49, r61;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r17, $r18, $r38, $r39, $r65;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r19, $r20, $r23, $r32, $r43, $r48, r67, r68;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r21, $r30, $r40, $r45;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r22, $r25, $r31, $r41, $r46;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r26, r62;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r27, $r34, $r36;
        int[] $r28;
        java.lang.Double $r29;
        byte $b18, $b19, $b20, $b27, $b32, b33;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r42, $r47, r57;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r56, r64;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i28 = lengthof r1;

        if $i28 <= 4 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 4");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i29 = 0;

     label07:
        if i29 >= i0 goto label08;

        $d22 = r1[i29];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d22);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d23 = r1[i29];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d23);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i29 = i29 + 1;

        goto label07;

     label08:
        i30 = 0;

     label09:
        if i30 >= i1 goto label10;

        $d20 = r2[i30];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d20);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing NaN");

        $d21 = r2[i30];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d21);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing Infinity");

        i30 = i30 + 1;

        goto label09;

     label10:
        r53 = newarray (double)[i0];

        if i0 != i1 goto label11;

        r54 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label12;

     label11:
        $i7 = i0 + 1;

        r54 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i7);

     label12:
        i31 = 1;

     label13:
        if i31 >= i0 goto label16;

        $i26 = i31 - 1;

        $d19 = r1[$i26];

        $d18 = r1[i31];

        $b27 = $d19 cmpl $d18;

        if $b27 != 0 goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i31 = i31 + 1;

        goto label13;

     label16:
        $r17 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r55 = virtualinvoke $r17.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r1);

        $r18 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r18.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r54, r55);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] slopesSensitivityWithAbsCalculator(double[],double[])>(r55, r3);

        $r19 = r4[0];

        r5 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r20 = r4[1];

        r6 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i8 = i0 + 1;

        r56 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i8];

        z0 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: boolean checkSymm(double[])>(r3);

        if z0 != 1 goto label33;

        $r30 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r57 = virtualinvoke $r30.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i12 = virtualinvoke r57.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i12 != 4 goto label17;

        $z11 = 1;

        goto label18;

     label17:
        $z11 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r31 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r57, r1);

        $r33 = virtualinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r58 = $r33[0];

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r35 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[])>(r55, r3, r58);

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r35);

        r56[0] = $r34;

        if i0 != i1 goto label19;

        $b32 = 0;

        goto label20;

     label19:
        $b32 = 1;

     label20:
        b33 = $b32;

        $i13 = 2 * $b32;

        $i14 = i0 + $i13;

        r59 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i14);

        $i15 = 2 * $b32;

        $i16 = i0 + $i15;

        r60 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i16);

        r61 = newmultiarray (double)[i0][i0];

        i34 = $b32;

     label21:
        $i35 = i0 + b33;

        if i34 >= $i35 goto label30;

        $d2 = r2[i34];

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b18 = $d3 cmpg 1.0E-14;

        if $b18 >= 0 goto label22;

        $d24 = 1.0E-7;

        goto label23;

     label22:
        $d4 = r2[i34];

        $d24 = $d4 * 1.0E-7;

     label23:
        d0 = $d24;

        $i25 = i34;

        $d5 = r2[i34];

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b19 = $d6 cmpg 1.0E-14;

        if $b19 >= 0 goto label24;

        $d25 = 1.0E-7;

        goto label25;

     label24:
        $d7 = r2[i34];

        $d25 = $d7 * 1.0000001;

     label25:
        r59[$i25] = $d25;

        $i24 = i34;

        $d8 = r2[i34];

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        $b20 = $d9 cmpg 1.0E-14;

        if $b20 >= 0 goto label26;

        $d26 = -1.0E-7;

        goto label27;

     label26:
        $d10 = r2[i34];

        $d26 = $d10 * 0.9999999;

     label27:
        r60[$i24] = $d26;

        $i21 = i0 + b33;

        r7 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r59, b33, $i21);

        $i22 = i0 + b33;

        r8 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r60, b33, $i22);

        $r38 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r9 = virtualinvoke $r38.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r7, r55);

        $r39 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r10 = virtualinvoke $r39.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r8, r55);

        $r41 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r40 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r42 = virtualinvoke $r40.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r59);

        $r43 = virtualinvoke $r41.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>($r42, r1);

        $r44 = virtualinvoke $r43.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r11 = $r44[0];

        $r46 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r45 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r47 = virtualinvoke $r45.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r60);

        $r48 = virtualinvoke $r46.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>($r47, r1);

        $r49 = virtualinvoke $r48.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r12 = $r49[0];

        r13 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[])>(r55, r9, r11);

        r14 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[])>(r55, r10, r12);

        i36 = 0;

     label28:
        if i36 >= i0 goto label29;

        $r50 = r61[i36];

        $i23 = i34 - b33;

        $d14 = r13[i36];

        $d13 = r14[i36];

        $d15 = $d14 - $d13;

        $d16 = 0.5 * $d15;

        $d17 = $d16 / d0;

        $r50[$i23] = $d17;

        i36 = i36 + 1;

        goto label28;

     label29:
        $d11 = r2[i34];

        r59[i34] = $d11;

        $d12 = r2[i34];

        r60[i34] = $d12;

        i34 = i34 + 1;

        goto label21;

     label30:
        i37 = 0;

     label31:
        if i37 >= i0 goto label32;

        $i17 = i37 + 1;

        $r36 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r37 = r61[i37];

        specialinvoke $r36.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r37);

        r56[$i17] = $r36;

        i37 = i37 + 1;

        goto label31;

     label32:
        goto label36;

     label33:
        $r21 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r62 = virtualinvoke $r21.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>(r1, r2);

        $i9 = virtualinvoke r62.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if $i9 != 4 goto label34;

        $z12 = 1;

        goto label35;

     label34:
        $z12 = 0;

     label35:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "Primary interpolant is not cubic");

        $r22 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r62, r1);

        $r24 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r63 = $r24[0];

        $r25 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        r64 = virtualinvoke $r25.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>(r62, r1);

        r56 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[],double[],double[][],double[][],double[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r55, r3, r5, r6, r63, r64);

     label36:
        $r65 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r66 = virtualinvoke $r65.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[],double[],double[][],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r54, r55, r3, r5, r56);

        i38 = 0;

     label37:
        if i38 >= i0 goto label42;

        r67 = r66[i38];

        i39 = virtualinvoke r67.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i40 = virtualinvoke r67.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i41 = 0;

     label38:
        if i41 >= i39 goto label41;

        i42 = 0;

     label39:
        if i42 >= i40 goto label40;

        $r28 = newarray (int)[2];

        $r28[0] = i41;

        $r28[1] = i42;

        $r29 = virtualinvoke r67.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r28);

        $d1 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Matrix contains a NaN or infinite");

        i42 = i42 + 1;

        goto label39;

     label40:
        i41 = i41 + 1;

        goto label38;

     label41:
        i38 = i38 + 1;

        goto label37;

     label42:
        r68 = r66[0];

        $i10 = i0 - 1;

        r69 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i10];

        $i11 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r66, 1, r69, 0, $i11);

        i43 = virtualinvoke r68.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r26 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r27 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        specialinvoke $r26.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r27, r68, i43, 1, r69);

        return $r26;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getPrimaryMethod()
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        return $r1;
    }

    private double[] firstDerivativeCalculator(double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r4, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        int i0, $i1, $i2, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i32, $i33, i34, $i35, $i36;
        double[][] r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, d79, d80, d81, d82, d83, d84, d85, d86, d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94;
        byte $b4, $b8, $b19, $b20, $b21, $b29, $b30, $b31, $b37;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r4 = newarray (double)[i0];

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[][] parabolaSlopesCalculator(double[],double[])>(r1, r2);

        i34 = 1;

     label01:
        $i2 = i0 - 1;

        if i34 >= $i2 goto label06;

        $i12 = i34 - 1;

        $d24 = r2[$i12];

        $d25 = staticinvoke <java.lang.Math: double abs(double)>($d24);

        $d26 = r2[i34];

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $i13 = i34 - 1;

        $r8 = r5[$i13];

        $d28 = $r8[1];

        $d29 = staticinvoke <java.lang.Math: double abs(double)>($d28);

        $d30 = staticinvoke <java.lang.Math: double min(double,double)>($d27, $d29);

        $d31 = staticinvoke <java.lang.Math: double min(double,double)>($d25, $d30);

        d79 = 3.0 * $d31;

        if i34 <= 1 goto label02;

        $i24 = i34 - 1;

        $r14 = r5[$i24];

        $d59 = $r14[1];

        d80 = staticinvoke <java.lang.Math: double signum(double)>($d59);

        $i25 = i34 - 1;

        $r15 = r5[$i25];

        $d60 = $r15[0];

        d81 = staticinvoke <java.lang.Math: double signum(double)>($d60);

        $i26 = i34 - 1;

        $d62 = r2[$i26];

        $i27 = i34 - 2;

        $d61 = r2[$i27];

        $d63 = $d62 - $d61;

        d82 = staticinvoke <java.lang.Math: double signum(double)>($d63);

        $d65 = r2[i34];

        $i28 = i34 - 1;

        $d64 = r2[$i28];

        $d66 = $d65 - $d64;

        d83 = staticinvoke <java.lang.Math: double signum(double)>($d66);

        $d67 = d80 - d81;

        $d68 = staticinvoke <java.lang.Math: double abs(double)>($d67);

        $b29 = $d68 cmpg 0.0;

        if $b29 > 0 goto label02;

        $d69 = d81 - d82;

        $d70 = staticinvoke <java.lang.Math: double abs(double)>($d69);

        $b30 = $d70 cmpg 0.0;

        if $b30 > 0 goto label02;

        $d71 = d82 - d83;

        $d72 = staticinvoke <java.lang.Math: double abs(double)>($d71);

        $b31 = $d72 cmpg 0.0;

        if $b31 > 0 goto label02;

        $i32 = i34 - 1;

        $r16 = r5[$i32];

        $d73 = $r16[0];

        $d74 = staticinvoke <java.lang.Math: double abs(double)>($d73);

        $i33 = i34 - 1;

        $r17 = r5[$i33];

        $d75 = $r17[1];

        $d76 = staticinvoke <java.lang.Math: double abs(double)>($d75);

        $d77 = staticinvoke <java.lang.Math: double min(double,double)>($d74, $d76);

        $d78 = 1.5 * $d77;

        d79 = staticinvoke <java.lang.Math: double max(double,double)>(d79, $d78);

     label02:
        $i35 = i0 - 2;

        if i34 >= $i35 goto label03;

        $i15 = i34 - 1;

        $r10 = r5[$i15];

        $d37 = $r10[1];

        $d38 = neg $d37;

        d84 = staticinvoke <java.lang.Math: double signum(double)>($d38);

        $i16 = i34 - 1;

        $r11 = r5[$i16];

        $d39 = $r11[2];

        $d40 = neg $d39;

        d85 = staticinvoke <java.lang.Math: double signum(double)>($d40);

        $i17 = i34 + 1;

        $d42 = r2[$i17];

        $d41 = r2[i34];

        $d43 = $d42 - $d41;

        d86 = staticinvoke <java.lang.Math: double signum(double)>($d43);

        $d45 = r2[i34];

        $i18 = i34 - 1;

        $d44 = r2[$i18];

        $d46 = $d45 - $d44;

        d87 = staticinvoke <java.lang.Math: double signum(double)>($d46);

        $d47 = d84 - d85;

        $d48 = staticinvoke <java.lang.Math: double abs(double)>($d47);

        $b19 = $d48 cmpg 0.0;

        if $b19 > 0 goto label03;

        $d49 = d85 - d86;

        $d50 = staticinvoke <java.lang.Math: double abs(double)>($d49);

        $b20 = $d50 cmpg 0.0;

        if $b20 > 0 goto label03;

        $d51 = d86 - d87;

        $d52 = staticinvoke <java.lang.Math: double abs(double)>($d51);

        $b21 = $d52 cmpg 0.0;

        if $b21 > 0 goto label03;

        $i22 = i34 - 1;

        $r12 = r5[$i22];

        $d53 = $r12[2];

        $d54 = staticinvoke <java.lang.Math: double abs(double)>($d53);

        $i23 = i34 - 1;

        $r13 = r5[$i23];

        $d55 = $r13[1];

        $d56 = staticinvoke <java.lang.Math: double abs(double)>($d55);

        $d57 = staticinvoke <java.lang.Math: double min(double,double)>($d54, $d56);

        $d58 = 1.5 * $d57;

        d79 = staticinvoke <java.lang.Math: double max(double,double)>(d79, $d58);

     label03:
        $i14 = i34;

        $d88 = r3[i34];

        $d89 = staticinvoke <java.lang.Math: double signum(double)>($d88);

        $i36 = i34 - 1;

        $r18 = r5[$i36];

        $d90 = $r18[1];

        $d91 = staticinvoke <java.lang.Math: double signum(double)>($d90);

        $b37 = $d89 cmpl $d91;

        if $b37 == 0 goto label04;

        $d92 = 0.0;

        goto label05;

     label04:
        $d32 = r3[i34];

        $d33 = staticinvoke <java.lang.Math: double signum(double)>($d32);

        $d34 = r3[i34];

        $d35 = staticinvoke <java.lang.Math: double abs(double)>($d34);

        $d36 = staticinvoke <java.lang.Math: double min(double,double)>($d35, d79);

        $d92 = $d33 * $d36;

     label05:
        r4[$i14] = $d92;

        i34 = i34 + 1;

        goto label01;

     label06:
        $d0 = r3[0];

        $d1 = staticinvoke <java.lang.Math: double signum(double)>($d0);

        $d2 = r2[0];

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $b4 = $d1 cmpl $d3;

        if $b4 == 0 goto label07;

        $d93 = 0.0;

        goto label08;

     label07:
        $d4 = r3[0];

        $d5 = staticinvoke <java.lang.Math: double signum(double)>($d4);

        $d6 = r3[0];

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = r2[0];

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        $d10 = 3.0 * $d9;

        $d11 = staticinvoke <java.lang.Math: double min(double,double)>($d7, $d10);

        $d93 = $d5 * $d11;

     label08:
        r4[0] = $d93;

        $i6 = i0 - 1;

        $i5 = i0 - 1;

        $d12 = r3[$i5];

        $d13 = staticinvoke <java.lang.Math: double signum(double)>($d12);

        $i7 = i0 - 2;

        $d14 = r2[$i7];

        $d15 = staticinvoke <java.lang.Math: double signum(double)>($d14);

        $b8 = $d13 cmpl $d15;

        if $b8 == 0 goto label09;

        $d94 = 0.0;

        goto label10;

     label09:
        $i9 = i0 - 1;

        $d16 = r3[$i9];

        $d17 = staticinvoke <java.lang.Math: double signum(double)>($d16);

        $i10 = i0 - 1;

        $d18 = r3[$i10];

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $i11 = i0 - 2;

        $d20 = r2[$i11];

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $d22 = 3.0 * $d21;

        $d23 = staticinvoke <java.lang.Math: double min(double,double)>($d19, $d22);

        $d94 = $d17 * $d23;

     label10:
        r4[$i6] = $d94;

        return r4;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[], double[], double[][], double[][], double[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r5, r8, $r11, $r13, $r15, $r16, $r18, $r20, $r22, $r23, $r25, $r26, $r27, $r28, $r31, $r33, $r35, $r37, $r38, $r39, $r42, $r43, $r46, $r47, $r48, $r49, $r52, $r53, $r56, r57, r58, r59, r61, r63;
        double[][] r3, r4, r9, $r30, $r41, $r45, $r51, $r55;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r6, r7;
        int i0, $i1, $i2, $i3, $i8, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i38, $i40, $i41, $i42, $i43, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i68, $i69, $i70, $i71, i72, $i73, i75, i76, $i77, i78, i79, i80, $i81, $i82, i84, i85, i86;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r10;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, d124, d125, d126, d127, d128, d129, d130, d131, $d132, d133, $d134, $d135, $d136, $d137, d138, d139, d140, $d141, $d142, d143, $d144, d145, $d146, $d147, $d148, d149, d150, $d151, $d152, d153;
        byte $b4, $b5, $b6, $b7, $b9, $b12, $b13, $b19, $b21, $b27, $b34, $b35, $b37, $b39, $b44, $b46, $b53, $b54, $b55, $b65, $b66, $b67, $b74, $b83;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r12, $r14, $r19, $r21, $r32, $r34, $r60, $r62, $r64, $r65;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r29, $r40, $r44, $r50, $r54;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        r4 := @parameter3: double[][];

        r5 := @parameter4: double[];

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 + 1;

        r7 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i2];

        r8 = newarray (double)[i0];

        r9 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[][] parabolaSlopesCalculator(double[],double[])>(r1, r2);

        r10 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] parabolaSlopesAbstSensitivityCalculator(double[],double[][],double[][])>(r1, r3, r9);

        i72 = 1;

     label01:
        $i3 = i0 - 1;

        if i72 >= $i3 goto label13;

        r57 = newarray (double)[i0];

        $d61 = r5[i72];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d61);

        $i38 = i72 - 1;

        $r25 = r9[$i38];

        $d62 = $r25[1];

        $d63 = staticinvoke <java.lang.Math: double signum(double)>($d62);

        $d64 = d0 * $d63;

        $b39 = $d64 cmpg 0.0;

        if $b39 >= 0 goto label02;

        r8[i72] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r57, 0.0);

        goto label12;

     label02:
        $i40 = i72 - 1;

        $d65 = r2[$i40];

        $d66 = staticinvoke <java.lang.Math: double abs(double)>($d65);

        $i41 = i72 - 1;

        $r26 = r4[$i41];

        $d67 = r2[i72];

        $d68 = staticinvoke <java.lang.Math: double abs(double)>($d67);

        $r28 = r4[i72];

        $i42 = i72 - 1;

        $r27 = r9[$i42];

        $d69 = $r27[1];

        $d70 = staticinvoke <java.lang.Math: double abs(double)>($d69);

        $r29 = r10[1];

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i43 = i72 - 1;

        $r31 = $r30[$i43];

        r58 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] factoredMinWithSensitivityFinder(double,double[],double,double[],double,double[])>($d66, $r26, $d68, $r28, $d70, $r31);

        r59 = newarray (double)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r58, 1, r59, 0, i0);

        if i72 <= 1 goto label03;

        $i60 = i72 - 1;

        $r47 = r9[$i60];

        $d105 = $r47[1];

        d124 = staticinvoke <java.lang.Math: double signum(double)>($d105);

        $i61 = i72 - 1;

        $r48 = r9[$i61];

        $d106 = $r48[0];

        d125 = staticinvoke <java.lang.Math: double signum(double)>($d106);

        $i62 = i72 - 1;

        $d108 = r2[$i62];

        $i63 = i72 - 2;

        $d107 = r2[$i63];

        $d109 = $d108 - $d107;

        d126 = staticinvoke <java.lang.Math: double signum(double)>($d109);

        $d111 = r2[i72];

        $i64 = i72 - 1;

        $d110 = r2[$i64];

        $d112 = $d111 - $d110;

        d127 = staticinvoke <java.lang.Math: double signum(double)>($d112);

        $d113 = d124 - d125;

        $d114 = staticinvoke <java.lang.Math: double abs(double)>($d113);

        $b65 = $d114 cmpg 0.0;

        if $b65 > 0 goto label03;

        $d115 = d125 - d126;

        $d116 = staticinvoke <java.lang.Math: double abs(double)>($d115);

        $b66 = $d116 cmpg 0.0;

        if $b66 > 0 goto label03;

        $d117 = d126 - d127;

        $d118 = staticinvoke <java.lang.Math: double abs(double)>($d117);

        $b67 = $d118 cmpg 0.0;

        if $b67 > 0 goto label03;

        $d120 = r58[0];

        $i68 = i72 - 1;

        $r49 = r9[$i68];

        $d119 = $r49[0];

        $d121 = staticinvoke <java.lang.Math: double abs(double)>($d119);

        $r50 = r10[0];

        $r51 = virtualinvoke $r50.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i69 = i72 - 2;

        $r53 = $r51[$i69];

        $i70 = i72 - 1;

        $r52 = r9[$i70];

        $d122 = $r52[1];

        $d123 = staticinvoke <java.lang.Math: double abs(double)>($d122);

        $r54 = r10[1];

        $r55 = virtualinvoke $r54.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i71 = i72 - 1;

        $r56 = $r55[$i71];

        r58 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] modifyRefValueWithSensitivity(double,double[],double,double[],double,double[])>($d120, r59, $d121, $r53, $d123, $r56);

     label03:
        $i73 = i0 - 2;

        if i72 >= $i73 goto label04;

        $i49 = i72 - 1;

        $r37 = r9[$i49];

        $d84 = $r37[1];

        $d85 = neg $d84;

        d128 = staticinvoke <java.lang.Math: double signum(double)>($d85);

        $i50 = i72 - 1;

        $r38 = r9[$i50];

        $d86 = $r38[2];

        $d87 = neg $d86;

        d129 = staticinvoke <java.lang.Math: double signum(double)>($d87);

        $i51 = i72 + 1;

        $d89 = r2[$i51];

        $d88 = r2[i72];

        $d90 = $d89 - $d88;

        d130 = staticinvoke <java.lang.Math: double signum(double)>($d90);

        $d92 = r2[i72];

        $i52 = i72 - 1;

        $d91 = r2[$i52];

        $d93 = $d92 - $d91;

        d131 = staticinvoke <java.lang.Math: double signum(double)>($d93);

        $d94 = d128 - d129;

        $d95 = staticinvoke <java.lang.Math: double abs(double)>($d94);

        $b53 = $d95 cmpg 0.0;

        if $b53 > 0 goto label04;

        $d96 = d129 - d130;

        $d97 = staticinvoke <java.lang.Math: double abs(double)>($d96);

        $b54 = $d97 cmpg 0.0;

        if $b54 > 0 goto label04;

        $d98 = d130 - d131;

        $d99 = staticinvoke <java.lang.Math: double abs(double)>($d98);

        $b55 = $d99 cmpg 0.0;

        if $b55 > 0 goto label04;

        $d101 = r58[0];

        $i56 = i72 - 1;

        $r39 = r9[$i56];

        $d100 = $r39[2];

        $d102 = staticinvoke <java.lang.Math: double abs(double)>($d100);

        $r40 = r10[2];

        $r41 = virtualinvoke $r40.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i57 = i72 - 1;

        $r43 = $r41[$i57];

        $i58 = i72 - 1;

        $r42 = r9[$i58];

        $d103 = $r42[1];

        $d104 = staticinvoke <java.lang.Math: double abs(double)>($d103);

        $r44 = r10[1];

        $r45 = virtualinvoke $r44.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i59 = i72 - 1;

        $r46 = $r45[$i59];

        r58 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double[] modifyRefValueWithSensitivity(double,double[],double,double[],double,double[])>($d101, r59, $d102, $r43, $d104, $r46);

     label04:
        $d132 = r5[i72];

        d133 = staticinvoke <java.lang.Math: double abs(double)>($d132);

        $d134 = r58[0];

        $d135 = d133 - $d134;

        $d136 = staticinvoke <java.lang.Math: double abs(double)>($d135);

        $b74 = $d136 cmpg 1.0E-14;

        if $b74 >= 0 goto label09;

        $i48 = i72;

        $d77 = r58[0];

        $b46 = d133 cmpg $d77;

        if $b46 > 0 goto label05;

        $d137 = r5[i72];

        goto label06;

     label05:
        $d78 = r58[0];

        $d137 = d0 * $d78;

     label06:
        r8[$i48] = $d137;

        i75 = 0;

     label07:
        if i75 >= i0 goto label08;

        $r34 = r6[i72];

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d81 = $r35[i75];

        $i47 = i75 + 1;

        $d79 = r58[$i47];

        $d80 = d0 * $d79;

        $d82 = $d81 + $d80;

        $d83 = 0.5 * $d82;

        r57[i75] = $d83;

        i75 = i75 + 1;

        goto label07;

     label08:
        goto label12;

     label09:
        $d71 = r58[0];

        $b44 = d133 cmpg $d71;

        if $b44 >= 0 goto label10;

        $d76 = r5[i72];

        r8[i72] = $d76;

        $r32 = r6[i72];

        $r33 = virtualinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r33, 0, r57, 0, i0);

        goto label12;

     label10:
        $d72 = r58[0];

        $d73 = d0 * $d72;

        r8[i72] = $d73;

        i76 = 0;

     label11:
        if i76 >= i0 goto label12;

        $i45 = i76 + 1;

        $d74 = r58[$i45];

        $d75 = d0 * $d74;

        r57[i76] = $d75;

        i76 = i76 + 1;

        goto label11;

     label12:
        $i77 = i72 + 1;

        $r60 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r60.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r57);

        r7[$i77] = $r60;

        i72 = i72 + 1;

        goto label01;

     label13:
        r61 = newarray (double)[i0];

        $d1 = r5[0];

        d138 = staticinvoke <java.lang.Math: double signum(double)>($d1);

        $d2 = r2[0];

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $d4 = d138 * $d3;

        $b4 = $d4 cmpg 0.0;

        if $b4 >= 0 goto label14;

        r8[0] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r61, 0.0);

        goto label27;

     label14:
        $d5 = r5[0];

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b5 = $d6 cmpl 1.0E-14;

        if $b5 <= 0 goto label15;

        $d55 = r2[0];

        $d56 = staticinvoke <java.lang.Math: double abs(double)>($d55);

        $b37 = $d56 cmpg 1.0E-14;

        if $b37 >= 0 goto label15;

        r8[0] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r61, 0.0);

        $d57 = r1[0];

        $d58 = -1.5 / $d57;

        r61[0] = $d58;

        $d59 = r1[0];

        $d60 = 1.5 / $d59;

        r61[1] = $d60;

        goto label27;

     label15:
        $d7 = r5[0];

        d139 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $d8 = r2[0];

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        d140 = 3.0 * $d9;

        $d10 = d139 - d140;

        $d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $b6 = $d11 cmpg 1.0E-14;

        if $b6 >= 0 goto label20;

        $b35 = d139 cmpg d140;

        if $b35 > 0 goto label16;

        $d141 = r5[0];

        goto label17;

     label16:
        $d141 = d138 * d140;

     label17:
        r8[0] = $d141;

        i78 = 0;

     label18:
        if i78 >= i0 goto label19;

        $r21 = r6[0];

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d52 = $r22[i78];

        $d50 = 3.0 * d138;

        $r23 = r4[0];

        $d49 = $r23[i78];

        $d51 = $d50 * $d49;

        $d53 = $d52 + $d51;

        $d54 = 0.5 * $d53;

        r61[i78] = $d54;

        i78 = i78 + 1;

        goto label18;

     label19:
        goto label27;

     label20:
        $b7 = d139 cmpg d140;

        if $b7 >= 0 goto label25;

        $d44 = r5[0];

        r8[0] = $d44;

        $d45 = r5[0];

        $d46 = staticinvoke <java.lang.Math: double abs(double)>($d45);

        $b34 = $d46 cmpg 1.0E-14;

        if $b34 >= 0 goto label21;

        $d142 = 0.5;

        goto label22;

     label21:
        $d142 = 1.0;

     label22:
        d143 = $d142;

        i79 = 0;

     label23:
        if i79 >= i0 goto label24;

        $r19 = r6[0];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d47 = $r20[i79];

        $d48 = d143 * $d47;

        r61[i79] = $d48;

        i79 = i79 + 1;

        goto label23;

     label24:
        goto label27;

     label25:
        $d12 = d138 * d140;

        r8[0] = $d12;

        i80 = 0;

     label26:
        if i80 >= i0 goto label27;

        $d42 = 3.0 * d138;

        $r18 = r4[0];

        $d41 = $r18[i80];

        $d43 = $d42 * $d41;

        r61[i80] = $d43;

        i80 = i80 + 1;

        goto label26;

     label27:
        $r62 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r62.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r61);

        r7[1] = $r62;

        r63 = newarray (double)[i0];

        $i81 = i0 - 1;

        $d144 = r5[$i81];

        d145 = staticinvoke <java.lang.Math: double signum(double)>($d144);

        $i82 = i0 - 2;

        $d146 = r2[$i82];

        $d147 = staticinvoke <java.lang.Math: double signum(double)>($d146);

        $d148 = d145 * $d147;

        $b83 = $d148 cmpg 0.0;

        if $b83 >= 0 goto label28;

        $i33 = i0 - 1;

        r8[$i33] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r63, 0.0);

        goto label41;

     label28:
        $i8 = i0 - 1;

        $d13 = r5[$i8];

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $b9 = $d14 cmpl 1.0E-14;

        if $b9 <= 0 goto label29;

        $i26 = i0 - 2;

        $d35 = r2[$i26];

        $d36 = staticinvoke <java.lang.Math: double abs(double)>($d35);

        $b27 = $d36 cmpg 1.0E-14;

        if $b27 >= 0 goto label29;

        $i28 = i0 - 1;

        r8[$i28] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r63, 0.0);

        $i30 = i0 - 2;

        $i29 = i0 - 2;

        $d37 = r1[$i29];

        $d38 = -1.5 / $d37;

        r63[$i30] = $d38;

        $i32 = i0 - 1;

        $i31 = i0 - 2;

        $d39 = r1[$i31];

        $d40 = 1.5 / $d39;

        r63[$i32] = $d40;

        goto label41;

     label29:
        $i10 = i0 - 1;

        $d15 = r5[$i10];

        d149 = staticinvoke <java.lang.Math: double abs(double)>($d15);

        $i11 = i0 - 2;

        $d16 = r2[$i11];

        $d17 = staticinvoke <java.lang.Math: double abs(double)>($d16);

        d150 = 3.0 * $d17;

        $d18 = d149 - d150;

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $b12 = $d19 cmpg 1.0E-14;

        if $b12 >= 0 goto label34;

        $i22 = i0 - 1;

        $b21 = d149 cmpg d150;

        if $b21 > 0 goto label30;

        $i25 = i0 - 1;

        $d151 = r5[$i25];

        goto label31;

     label30:
        $d151 = d145 * d150;

     label31:
        r8[$i22] = $d151;

        i84 = 0;

     label32:
        if i84 >= i0 goto label33;

        $i23 = i0 - 1;

        $r14 = r6[$i23];

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d32 = $r15[i84];

        $d30 = 3.0 * d145;

        $i24 = i0 - 2;

        $r16 = r4[$i24];

        $d29 = $r16[i84];

        $d31 = $d30 * $d29;

        $d33 = $d32 + $d31;

        $d34 = 0.5 * $d33;

        r63[i84] = $d34;

        i84 = i84 + 1;

        goto label32;

     label33:
        goto label41;

     label34:
        $b13 = d149 cmpg d150;

        if $b13 >= 0 goto label39;

        $i17 = i0 - 1;

        $i16 = i0 - 1;

        $d24 = r5[$i16];

        r8[$i17] = $d24;

        $i18 = i0 - 1;

        $d25 = r5[$i18];

        $d26 = staticinvoke <java.lang.Math: double abs(double)>($d25);

        $b19 = $d26 cmpg 1.0E-14;

        if $b19 >= 0 goto label35;

        $d152 = 0.5;

        goto label36;

     label35:
        $d152 = 1.0;

     label36:
        d153 = $d152;

        i85 = 0;

     label37:
        if i85 >= i0 goto label38;

        $i20 = i0 - 1;

        $r12 = r6[$i20];

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d27 = $r13[i85];

        $d28 = d153 * $d27;

        r63[i85] = $d28;

        i85 = i85 + 1;

        goto label37;

     label38:
        goto label41;

     label39:
        $i14 = i0 - 1;

        $d20 = d145 * d150;

        r8[$i14] = $d20;

        i86 = 0;

     label40:
        if i86 >= i0 goto label41;

        $d22 = 3.0 * d145;

        $i15 = i0 - 2;

        $r11 = r4[$i15];

        $d21 = $r11[i86];

        $d23 = $d22 * $d21;

        r63[i86] = $d23;

        i86 = i86 + 1;

        goto label40;

     label41:
        $r64 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r64.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r63);

        r7[i0] = $r64;

        $r65 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r65.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r8);

        r7[0] = $r65;

        return r7;
    }

    private double[][] parabolaSlopesCalculator(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33;
        double[][] r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 2;

        r3 = newmultiarray (double)[$i2][3];

        $r4 = r3[0];

        $r4[0] = #Infinity;

        $r5 = r3[0];

        $d1 = r2[0];

        $d0 = r1[1];

        $d5 = $d1 * $d0;

        $d3 = r2[1];

        $d2 = r1[0];

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r1[0];

        $d6 = r1[1];

        $d8 = $d7 + $d6;

        $d10 = $d9 / $d8;

        $r5[1] = $d10;

        $r6 = r3[0];

        $d15 = r2[1];

        $d11 = r1[1];

        $d13 = 2.0 * $d11;

        $d12 = r1[2];

        $d14 = $d13 + $d12;

        $d19 = $d15 * $d14;

        $d17 = r2[2];

        $d16 = r1[1];

        $d18 = $d17 * $d16;

        $d23 = $d19 - $d18;

        $d21 = r1[1];

        $d20 = r1[2];

        $d22 = $d21 + $d20;

        $d24 = $d23 / $d22;

        $r6[2] = $d24;

        i33 = 1;

     label1:
        $i3 = i0 - 3;

        if i33 >= $i3 goto label2;

        $r10 = r3[i33];

        $d54 = r2[i33];

        $d50 = r1[i33];

        $d52 = 2.0 * $d50;

        $i20 = i33 - 1;

        $d51 = r1[$i20];

        $d53 = $d52 + $d51;

        $d58 = $d54 * $d53;

        $i21 = i33 - 1;

        $d56 = r2[$i21];

        $d55 = r1[i33];

        $d57 = $d56 * $d55;

        $d62 = $d58 - $d57;

        $i22 = i33 - 1;

        $d60 = r1[$i22];

        $d59 = r1[i33];

        $d61 = $d60 + $d59;

        $d63 = $d62 / $d61;

        $r10[0] = $d63;

        $r11 = r3[i33];

        $d65 = r2[i33];

        $i23 = i33 + 1;

        $d64 = r1[$i23];

        $d69 = $d65 * $d64;

        $i24 = i33 + 1;

        $d67 = r2[$i24];

        $d66 = r1[i33];

        $d68 = $d67 * $d66;

        $d73 = $d69 + $d68;

        $d71 = r1[i33];

        $i25 = i33 + 1;

        $d70 = r1[$i25];

        $d72 = $d71 + $d70;

        $d74 = $d73 / $d72;

        $r11[1] = $d74;

        $r12 = r3[i33];

        $i26 = i33 + 1;

        $d79 = r2[$i26];

        $i27 = i33 + 1;

        $d75 = r1[$i27];

        $d77 = 2.0 * $d75;

        $i28 = i33 + 2;

        $d76 = r1[$i28];

        $d78 = $d77 + $d76;

        $d83 = $d79 * $d78;

        $i29 = i33 + 2;

        $d81 = r2[$i29];

        $i30 = i33 + 1;

        $d80 = r1[$i30];

        $d82 = $d81 * $d80;

        $d87 = $d83 - $d82;

        $i31 = i33 + 1;

        $d85 = r1[$i31];

        $i32 = i33 + 2;

        $d84 = r1[$i32];

        $d86 = $d85 + $d84;

        $d88 = $d87 / $d86;

        $r12[2] = $d88;

        i33 = i33 + 1;

        goto label1;

     label2:
        $i4 = i0 - 3;

        $r7 = r3[$i4];

        $i5 = i0 - 3;

        $d29 = r2[$i5];

        $i6 = i0 - 3;

        $d25 = r1[$i6];

        $d27 = 2.0 * $d25;

        $i7 = i0 - 4;

        $d26 = r1[$i7];

        $d28 = $d27 + $d26;

        $d33 = $d29 * $d28;

        $i8 = i0 - 4;

        $d31 = r2[$i8];

        $i9 = i0 - 3;

        $d30 = r1[$i9];

        $d32 = $d31 * $d30;

        $d37 = $d33 - $d32;

        $i10 = i0 - 4;

        $d35 = r1[$i10];

        $i11 = i0 - 3;

        $d34 = r1[$i11];

        $d36 = $d35 + $d34;

        $d38 = $d37 / $d36;

        $r7[0] = $d38;

        $i12 = i0 - 3;

        $r8 = r3[$i12];

        $i13 = i0 - 3;

        $d40 = r2[$i13];

        $i14 = i0 - 2;

        $d39 = r1[$i14];

        $d44 = $d40 * $d39;

        $i15 = i0 - 2;

        $d42 = r2[$i15];

        $i16 = i0 - 3;

        $d41 = r1[$i16];

        $d43 = $d42 * $d41;

        $d48 = $d44 + $d43;

        $i17 = i0 - 3;

        $d46 = r1[$i17];

        $i18 = i0 - 2;

        $d45 = r1[$i18];

        $d47 = $d46 + $d45;

        $d49 = $d48 / $d47;

        $r8[1] = $d49;

        $i19 = i0 - 3;

        $r9 = r3[$i19];

        $r9[2] = #Infinity;

        return r3;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D[] parabolaSlopesAbstSensitivityCalculator(double[], double[][], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, $r8, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        double[][] r2, r3, r5, r6, r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, d61;
        byte $b7, $b17, $b18, $b19;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9, $r10, $r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[][];

        r4 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[3];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 3;

        r5 = newmultiarray (double)[$i2][i0];

        $i3 = i0 - 2;

        r6 = newmultiarray (double)[$i3][i0];

        $i4 = i0 - 3;

        r7 = newmultiarray (double)[$i4][i0];

        i34 = 0;

     label01:
        $i5 = i0 - 3;

        if i34 >= $i5 goto label07;

        $i16 = i34 + 1;

        $r16 = r3[$i16];

        $d16 = $r16[0];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d16);

        $r17 = r3[i34];

        $d17 = $r17[1];

        d1 = staticinvoke <java.lang.Math: double signum(double)>($d17);

        $r18 = r3[i34];

        $d18 = $r18[2];

        d2 = staticinvoke <java.lang.Math: double signum(double)>($d18);

        $b17 = d0 cmpl 0.0;

        if $b17 != 0 goto label02;

        $r30 = r5[i34];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r30, 0.0);

     label02:
        $b18 = d1 cmpl 0.0;

        if $b18 != 0 goto label03;

        $r29 = r6[i34];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r29, 0.0);

     label03:
        $b19 = d2 cmpl 0.0;

        if $b19 != 0 goto label04;

        $r28 = r7[i34];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r28, 0.0);

     label04:
        i35 = 0;

     label05:
        if i35 >= i0 goto label06;

        $r21 = r5[i34];

        $i20 = i34 + 1;

        $r19 = r2[$i20];

        $d23 = $r19[i35];

        $i21 = i34 + 1;

        $d19 = r1[$i21];

        $d21 = 2.0 * $d19;

        $d20 = r1[i34];

        $d22 = $d21 + $d20;

        $d27 = $d23 * $d22;

        $r20 = r2[i34];

        $d25 = $r20[i35];

        $i22 = i34 + 1;

        $d24 = r1[$i22];

        $d26 = $d25 * $d24;

        $d28 = $d27 - $d26;

        $d32 = d0 * $d28;

        $d30 = r1[i34];

        $i23 = i34 + 1;

        $d29 = r1[$i23];

        $d31 = $d30 + $d29;

        $d33 = $d32 / $d31;

        $r21[i35] = $d33;

        $r24 = r6[i34];

        $r22 = r2[i34];

        $d35 = $r22[i35];

        $i24 = i34 + 1;

        $d34 = r1[$i24];

        $d39 = $d35 * $d34;

        $i25 = i34 + 1;

        $r23 = r2[$i25];

        $d37 = $r23[i35];

        $d36 = r1[i34];

        $d38 = $d37 * $d36;

        $d40 = $d39 + $d38;

        $d44 = d1 * $d40;

        $d42 = r1[i34];

        $i26 = i34 + 1;

        $d41 = r1[$i26];

        $d43 = $d42 + $d41;

        $d45 = $d44 / $d43;

        $r24[i35] = $d45;

        $r27 = r7[i34];

        $i27 = i34 + 1;

        $r25 = r2[$i27];

        $d50 = $r25[i35];

        $i28 = i34 + 1;

        $d46 = r1[$i28];

        $d48 = 2.0 * $d46;

        $i29 = i34 + 2;

        $d47 = r1[$i29];

        $d49 = $d48 + $d47;

        $d54 = $d50 * $d49;

        $i30 = i34 + 2;

        $r26 = r2[$i30];

        $d52 = $r26[i35];

        $i31 = i34 + 1;

        $d51 = r1[$i31];

        $d53 = $d52 * $d51;

        $d55 = $d54 - $d53;

        $d59 = d2 * $d55;

        $i32 = i34 + 1;

        $d57 = r1[$i32];

        $i33 = i34 + 2;

        $d56 = r1[$i33];

        $d58 = $d57 + $d56;

        $d60 = $d59 / $d58;

        $r27[i35] = $d60;

        i35 = i35 + 1;

        goto label05;

     label06:
        i34 = i34 + 1;

        goto label01;

     label07:
        $i6 = i0 - 3;

        $r8 = r3[$i6];

        $d3 = $r8[1];

        d61 = staticinvoke <java.lang.Math: double signum(double)>($d3);

        $b7 = d61 cmpl 0.0;

        if $b7 != 0 goto label08;

        $i15 = i0 - 3;

        $r15 = r6[$i15];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r15, 0.0);

     label08:
        i36 = 0;

     label09:
        if i36 >= i0 goto label10;

        $i8 = i0 - 3;

        $r14 = r6[$i8];

        $i9 = i0 - 3;

        $r12 = r2[$i9];

        $d5 = $r12[i36];

        $i10 = i0 - 2;

        $d4 = r1[$i10];

        $d9 = $d5 * $d4;

        $i11 = i0 - 2;

        $r13 = r2[$i11];

        $d7 = $r13[i36];

        $i12 = i0 - 3;

        $d6 = r1[$i12];

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        $d14 = d61 * $d10;

        $i13 = i0 - 3;

        $d12 = r1[$i13];

        $i14 = i0 - 2;

        $d11 = r1[$i14];

        $d13 = $d12 + $d11;

        $d15 = $d14 / $d13;

        $r14[i36] = $d15;

        i36 = i36 + 1;

        goto label09;

     label10:
        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        r4[0] = $r9;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        r4[1] = $r10;

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r7);

        r4[2] = $r11;

        return r4;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D[] slopesSensitivityWithAbsCalculator(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, i12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3;
        double[][] r4, r5;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6, $r7;
        byte $b6, $b7;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[2];

        $i2 = i0 - 1;

        r4 = newmultiarray (double)[$i2][i0];

        $i3 = i0 - 1;

        r5 = newmultiarray (double)[$i3][i0];

        i12 = 0;

     label1:
        $i4 = i0 - 1;

        if i12 >= $i4 goto label4;

        $d1 = r2[i12];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d1);

        $r8 = r4[i12];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r8, 0.0);

        $r9 = r5[i12];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r9, 0.0);

        $r10 = r4[i12];

        $d2 = r1[i12];

        $d3 = -1.0 / $d2;

        $r10[i12] = $d3;

        $r11 = r4[i12];

        $i5 = i12 + 1;

        $d4 = r1[i12];

        $d5 = 1.0 / $d4;

        $r11[$i5] = $d5;

        $b6 = d0 cmpl 0.0;

        if $b6 <= 0 goto label2;

        $r17 = r5[i12];

        $r16 = r4[i12];

        $d10 = $r16[i12];

        $r17[i12] = $d10;

        $r19 = r5[i12];

        $i11 = i12 + 1;

        $r18 = r4[i12];

        $i10 = i12 + 1;

        $d11 = $r18[$i10];

        $r19[$i11] = $d11;

     label2:
        $b7 = d0 cmpg 0.0;

        if $b7 >= 0 goto label3;

        $r13 = r5[i12];

        $r12 = r4[i12];

        $d6 = $r12[i12];

        $d7 = neg $d6;

        $r13[i12] = $d7;

        $r15 = r5[i12];

        $i9 = i12 + 1;

        $r14 = r4[i12];

        $i8 = i12 + 1;

        $d8 = $r14[$i8];

        $d9 = neg $d8;

        $r15[$i9] = $d9;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        r3[0] = $r6;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        r3[1] = $r7;

        return r3;
    }

    private double[] factoredMinWithSensitivityFinder(double, double[], double, double[], double, double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d17;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        byte $b2, $b3, $b4;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        d2 := @parameter4: double;

        r3 := @parameter5: double[];

        i0 = lengthof r1;

        $i1 = i0 + 1;

        r4 = newarray (double)[$i1];

        r5 = newarray (double)[i0];

        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label03;

        d17 = d0;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $d15 = r1[i8];

        r5[i8] = $d15;

        i8 = i8 + 1;

        goto label01;

     label02:
        goto label05;

     label03:
        d17 = d1;

        i9 = 0;

     label04:
        if i9 >= i0 goto label05;

        $d14 = r2[i9];

        r5[i9] = $d14;

        i9 = i9 + 1;

        goto label04;

     label05:
        $b3 = d2 cmpl d17;

        if $b3 != 0 goto label08;

        $d9 = 3.0 * d2;

        r4[0] = $d9;

        i10 = 0;

     label06:
        if i10 >= i0 goto label07;

        $i7 = i10 + 1;

        $d11 = r3[i10];

        $d10 = r5[i10];

        $d12 = $d11 + $d10;

        $d13 = 1.5 * $d12;

        r4[$i7] = $d13;

        i10 = i10 + 1;

        goto label06;

     label07:
        goto label13;

     label08:
        $b4 = d2 cmpg d17;

        if $b4 >= 0 goto label11;

        $d6 = 3.0 * d2;

        r4[0] = $d6;

        i11 = 0;

     label09:
        if i11 >= i0 goto label10;

        $i6 = i11 + 1;

        $d7 = r3[i11];

        $d8 = 3.0 * $d7;

        r4[$i6] = $d8;

        i11 = i11 + 1;

        goto label09;

     label10:
        goto label13;

     label11:
        $d3 = 3.0 * d17;

        r4[0] = $d3;

        i12 = 0;

     label12:
        if i12 >= i0 goto label13;

        $i5 = i12 + 1;

        $d4 = r5[i12];

        $d5 = 3.0 * $d4;

        r4[$i5] = $d5;

        i12 = i12 + 1;

        goto label12;

     label13:
        return r4;
    }

    private double[] modifyRefValueWithSensitivity(double, double[], double, double[], double, double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d20;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i5, $i6, $i7, i8, i9, i10, i12, i13, i14;
        byte $b2, $b3, $b4, $b11;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        d2 := @parameter4: double;

        r3 := @parameter5: double[];

        i0 = lengthof r1;

        d3 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        d4 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $i1 = i0 + 1;

        r4 = newarray (double)[$i1];

        r5 = newarray (double)[i0];

        $b2 = d3 cmpl d4;

        if $b2 != 0 goto label03;

        d20 = 1.5 * d3;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $d16 = r2[i8];

        $d15 = r3[i8];

        $d17 = $d16 + $d15;

        $d18 = 0.75 * $d17;

        r5[i8] = $d18;

        i8 = i8 + 1;

        goto label01;

     label02:
        goto label08;

     label03:
        $b3 = d3 cmpg d4;

        if $b3 >= 0 goto label06;

        d20 = 1.5 * d3;

        i9 = 0;

     label04:
        if i9 >= i0 goto label05;

        $d13 = r2[i9];

        $d14 = 1.5 * $d13;

        r5[i9] = $d14;

        i9 = i9 + 1;

        goto label04;

     label05:
        goto label08;

     label06:
        d20 = 1.5 * d4;

        i10 = 0;

     label07:
        if i10 >= i0 goto label08;

        $d11 = r3[i10];

        $d12 = 1.5 * $d11;

        r5[i10] = $d12;

        i10 = i10 + 1;

        goto label07;

     label08:
        $b11 = d0 cmpl d20;

        if $b11 != 0 goto label11;

        r4[0] = d0;

        i12 = 0;

     label09:
        if i12 >= i0 goto label10;

        $i7 = i12 + 1;

        $d8 = r1[i12];

        $d7 = r5[i12];

        $d9 = $d8 + $d7;

        $d10 = 0.5 * $d9;

        r4[$i7] = $d10;

        i12 = i12 + 1;

        goto label09;

     label10:
        goto label16;

     label11:
        $b4 = d0 cmpl d20;

        if $b4 <= 0 goto label14;

        r4[0] = d0;

        i13 = 0;

     label12:
        if i13 >= i0 goto label13;

        $i6 = i13 + 1;

        $d6 = r1[i13];

        r4[$i6] = $d6;

        i13 = i13 + 1;

        goto label12;

     label13:
        goto label16;

     label14:
        r4[0] = d20;

        i14 = 0;

     label15:
        if i14 >= i0 goto label16;

        $i5 = i14 + 1;

        $d5 = r5[i14];

        r4[$i5] = $d5;

        i14 = i14 + 1;

        goto label15;

     label16:
        return r4;
    }

    private boolean checkSymm(double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator r0;
        double[] r1;
        int i0, $i1, $i2, i4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b3;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 - 1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $d0 = r1[i4];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $i2 = i4 + 1;

        $d2 = r1[$i2];

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = $d1 - $d3;

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $b3 = $d5 cmpg 1.0E-14;

        if $b3 >= 0 goto label2;

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double SMALL> = 1.0E-14;

        <com.opengamma.analytics.math.interpolation.MonotonicityPreservingCubicSplineInterpolator: double EPS> = 1.0E-7;

        return;
    }
}
