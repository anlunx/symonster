public class org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer extends java.lang.Object implements org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer
{
    private static final double TWO_EPS;
    private final double initialStepBoundFactor;
    private final double costRelativeTolerance;
    private final double parRelativeTolerance;
    private final double orthoTolerance;
    private final double qrRankingThreshold;

    public void <init>()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }

    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double d0, d1, d2, d3, d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = d0;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance> = d1;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance> = d2;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance> = d3;

        r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold> = d4;

        return;
    }

    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withInitialStepBoundFactor(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(d0, $d4, $d3, $d2, $d1);

        return $r1;
    }

    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withCostRelativeTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d4, d0, $d3, $d2, $d1);

        return $r1;
    }

    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withParameterRelativeTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d4, $d3, d0, $d2, $d1);

        return $r1;
    }

    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withOrthoTolerance(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d4, $d3, $d2, d0, $d1);

        return $r1;
    }

    public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withRankingThreshold(double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d4 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d3 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d1 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>($d4, $d3, $d2, $d1, d0);

        return $r1;
    }

    public double getInitialStepBoundFactor()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        return $d0;
    }

    public double getCostRelativeTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        return $d0;
    }

    public double getParameterRelativeTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        return $d0;
    }

    public double getOrthoTolerance()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        return $d0;
    }

    public double getRankingThreshold()
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        $d0 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        return $d0;
    }

    public org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem r1;
        int i0, i1, i2, i3, i4, i5, $i16, $i17, $i20, $i21, $i22, $i27, $i28, i32, i33, i34, i35, i37, i38, i39, i40, i41, i42, i43, i44, i45, i47, i48, i49;
        org.apache.commons.math3.util.Incrementor r2, r3;
        org.apache.commons.math3.optim.ConvergenceChecker r4;
        double[] r5, r6, r7, r8, r9, r10, r11, r16, r17, $r39, $r41, $r42, r43, r45, r46, r47;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation r12, r44;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData r13;
        double[][] r14;
        int[] r15;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, d55, d56, d57, d58, d59, d60, d61, $d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, $d78, $d79, d80, $d81, $d82, d83, d84, $d85, $d86, $d87, $d88, $d89, $d90;
        org.apache.commons.math3.linear.RealVector $r18, $r19, $r20, $r23, $r24;
        org.apache.commons.math3.linear.RealMatrix $r21;
        byte $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b18, $b19, $b23, $b24, $b25, $b26, $b29, $b30, $b31, $b36, $b46, $b50, $b51, $b52;
        org.apache.commons.math3.linear.ArrayRealVector $r22;
        org.apache.commons.math3.exception.ConvergenceException $r25, $r29, $r33;
        java.lang.Object[] $r26, $r30, $r34;
        org.apache.commons.math3.exception.util.LocalizedFormats $r27, $r31, $r35;
        java.lang.Double $r28, $r32, $r36;
        org.apache.commons.math3.fitting.leastsquares.OptimumImpl $r37, $r38, $r40;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: int getObservationSize()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: int getParameterSize()>();

        r2 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getIterationCounter()>();

        r3 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.util.Incrementor getEvaluationCounter()>();

        r4 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        r5 = newarray (double)[i1];

        d55 = 0.0;

        d56 = 0.0;

        d57 = 0.0;

        r6 = newarray (double)[i1];

        r7 = newarray (double)[i1];

        r43 = newarray (double)[i0];

        r8 = newarray (double)[i0];

        r9 = newarray (double)[i1];

        r10 = newarray (double)[i1];

        r11 = newarray (double)[i1];

        virtualinvoke r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r18 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.linear.RealVector getStart()>();

        r44 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)>($r18);

        $r19 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        r45 = virtualinvoke $r19.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        d58 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getCost()>();

        $r20 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getPoint()>();

        r46 = virtualinvoke $r20.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        z1 = 1;

     label01:
        virtualinvoke r2.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        r12 = r44;

        $r21 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealMatrix getJacobian()>();

        r13 = specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData qrDecomposition(org.apache.commons.math3.linear.RealMatrix,int)>($r21, i2);

        r14 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r13);

        r15 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r13);

        r16 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r13);

        r17 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$300(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r13);

        r47 = r45;

        i32 = 0;

     label02:
        if i32 >= i0 goto label03;

        $d54 = r47[i32];

        r8[i32] = $d54;

        i32 = i32 + 1;

        goto label02;

     label03:
        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void qTy(double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r8, r13);

        i33 = 0;

     label04:
        if i33 >= i2 goto label05;

        i34 = r15[i33];

        $r42 = r14[i33];

        $d53 = r16[i34];

        $r42[i34] = $d53;

        i33 = i33 + 1;

        goto label04;

     label05:
        if z1 == 0 goto label11;

        d59 = 0.0;

        i35 = 0;

     label06:
        if i35 >= i1 goto label08;

        d60 = r17[i35];

        $b31 = d60 cmpl 0.0;

        if $b31 != 0 goto label07;

        d60 = 1.0;

     label07:
        $d51 = r46[i35];

        d61 = d60 * $d51;

        $d52 = d61 * d61;

        d59 = d59 + $d52;

        r6[i35] = d60;

        i35 = i35 + 1;

        goto label06;

     label08:
        d57 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d59);

        $b30 = d57 cmpl 0.0;

        if $b30 != 0 goto label09;

        $d62 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        goto label10;

     label09:
        $d50 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d62 = $d50 * d57;

     label10:
        d56 = $d62;

     label11:
        d63 = 0.0;

        $b36 = d58 cmpl 0.0;

        if $b36 == 0 goto label16;

        i37 = 0;

     label12:
        if i37 >= i2 goto label16;

        i38 = r15[i37];

        d64 = r17[i38];

        $b29 = d64 cmpl 0.0;

        if $b29 == 0 goto label15;

        d65 = 0.0;

        i39 = 0;

     label13:
        if i39 > i37 goto label14;

        $r41 = r14[i39];

        $d48 = $r41[i38];

        $d47 = r8[i39];

        $d49 = $d48 * $d47;

        d65 = d65 + $d49;

        i39 = i39 + 1;

        goto label13;

     label14:
        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d65);

        $d45 = d64 * d58;

        $d46 = $d44 / $d45;

        d63 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d63, $d46);

     label15:
        i37 = i37 + 1;

        goto label12;

     label16:
        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $b6 = d63 cmpg $d2;

        if $b6 > 0 goto label17;

        $r40 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i27 = virtualinvoke r3.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i28 = virtualinvoke r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r40.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>(r44, $i27, $i28);

        return $r40;

     label17:
        i40 = 0;

     label18:
        if i40 >= i1 goto label19;

        $d42 = r6[i40];

        $d41 = r17[i40];

        $d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d42, $d41);

        r6[i40] = $d43;

        i40 = i40 + 1;

        goto label18;

     label19:
        d66 = 0.0;

     label20:
        $b7 = d66 cmpg 1.0E-4;

        if $b7 >= 0 goto label54;

        i41 = 0;

     label21:
        if i41 >= i2 goto label22;

        i3 = r15[i41];

        $d40 = r46[i3];

        r7[i3] = $d40;

        i41 = i41 + 1;

        goto label21;

     label22:
        d67 = d58;

        d55 = specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double determineLMParameter(double[],double,double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData,int,double[],double[],double[],double[],double)>(r8, d56, r6, r13, i2, r9, r10, r11, r5, d55);

        d68 = 0.0;

        i42 = 0;

     label23:
        if i42 >= i2 goto label24;

        i4 = r15[i42];

        $d32 = r5[i4];

        $d33 = neg $d32;

        r5[i4] = $d33;

        $d35 = r7[i4];

        $d34 = r5[i4];

        $d36 = $d35 + $d34;

        r46[i4] = $d36;

        $d38 = r6[i4];

        $d37 = r5[i4];

        d69 = $d38 * $d37;

        $d39 = d69 * d69;

        d68 = d68 + $d39;

        i42 = i42 + 1;

        goto label23;

     label24:
        d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d68);

        if z1 == 0 goto label25;

        d56 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d56, d70);

     label25:
        virtualinvoke r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r22 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r22.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r46);

        r44 = interfaceinvoke r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)>($r22);

        $r23 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        r45 = virtualinvoke $r23.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        d58 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: double getCost()>();

        $r24 = interfaceinvoke r44.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation: org.apache.commons.math3.linear.RealVector getPoint()>();

        r46 = virtualinvoke $r24.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        d71 = -1.0;

        $d3 = 0.1 * d58;

        $b8 = $d3 cmpg d67;

        if $b8 >= 0 goto label26;

        d72 = d58 / d67;

        $d31 = d72 * d72;

        d71 = 1.0 - $d31;

     label26:
        i43 = 0;

     label27:
        if i43 >= i2 goto label30;

        i5 = r15[i43];

        d73 = r5[i5];

        r9[i43] = 0.0;

        i44 = 0;

     label28:
        if i44 > i43 goto label29;

        $d29 = r9[i44];

        $r39 = r14[i44];

        $d27 = $r39[i5];

        $d28 = $d27 * d73;

        $d30 = $d29 + $d28;

        r9[i44] = $d30;

        i44 = i44 + 1;

        goto label28;

     label29:
        i43 = i43 + 1;

        goto label27;

     label30:
        d74 = 0.0;

        i45 = 0;

     label31:
        if i45 >= i2 goto label32;

        $d25 = r9[i45];

        $d24 = r9[i45];

        $d26 = $d25 * $d24;

        d74 = d74 + $d26;

        i45 = i45 + 1;

        goto label31;

     label32:
        d75 = d67 * d67;

        d76 = d74 / d75;

        $d4 = d55 * d70;

        $d5 = $d4 * d70;

        d77 = $d5 / d75;

        $d6 = 2.0 * d77;

        d0 = d76 + $d6;

        $d7 = d76 + d77;

        d1 = neg $d7;

        $b9 = d0 cmpl 0.0;

        if $b9 != 0 goto label33;

        $d78 = 0.0;

        goto label34;

     label33:
        $d78 = d71 / d0;

     label34:
        d66 = $d78;

        $b10 = $d78 cmpg 0.25;

        if $b10 > 0 goto label39;

        $b24 = d71 cmpg 0.0;

        if $b24 >= 0 goto label35;

        $d23 = 0.5 * d1;

        $d21 = 0.5 * d71;

        $d22 = d1 + $d21;

        $d79 = $d23 / $d22;

        goto label36;

     label35:
        $d79 = 0.5;

     label36:
        d80 = $d79;

        $d20 = 0.1 * d58;

        $b25 = $d20 cmpl d67;

        if $b25 >= 0 goto label37;

        $b26 = $d79 cmpg 0.1;

        if $b26 >= 0 goto label38;

     label37:
        d80 = 0.1;

     label38:
        $d81 = 10.0 * d70;

        $d82 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d56, $d81);

        d56 = d80 * $d82;

        d55 = d55 / d80;

        goto label41;

     label39:
        $b11 = d55 cmpl 0.0;

        if $b11 == 0 goto label40;

        $b23 = $d78 cmpl 0.75;

        if $b23 < 0 goto label41;

     label40:
        d56 = 2.0 * d70;

        d55 = d55 * 0.5;

     label41:
        $b46 = d66 cmpl 1.0E-4;

        if $b46 < 0 goto label44;

        z1 = 0;

        d83 = 0.0;

        i47 = 0;

     label42:
        if i47 >= i1 goto label43;

        $d18 = r6[i47];

        $d17 = r46[i47];

        d84 = $d18 * $d17;

        $d19 = d84 * d84;

        d83 = d83 + $d19;

        i47 = i47 + 1;

        goto label42;

     label43:
        d57 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d83);

        if r4 == null goto label47;

        $i20 = virtualinvoke r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $z0 = interfaceinvoke r4.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i20, r12, r44);

        if $z0 == 0 goto label47;

        $r38 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i21 = virtualinvoke r3.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i22 = virtualinvoke r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r38.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>(r44, $i21, $i22);

        return $r38;

     label44:
        d58 = d67;

        i48 = 0;

     label45:
        if i48 >= i2 goto label46;

        i49 = r15[i48];

        $d16 = r7[i49];

        r46[i49] = $d16;

        i48 = i48 + 1;

        goto label45;

     label46:
        r44 = r12;

     label47:
        $d85 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d71);

        $d86 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b50 = $d85 cmpg $d86;

        if $b50 > 0 goto label48;

        $d15 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b18 = d0 cmpg $d15;

        if $b18 > 0 goto label48;

        $b19 = d66 cmpg 2.0;

        if $b19 <= 0 goto label49;

     label48:
        $d87 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d88 = $d87 * d57;

        $b51 = d56 cmpg $d88;

        if $b51 > 0 goto label50;

     label49:
        $r37 = new org.apache.commons.math3.fitting.leastsquares.OptimumImpl;

        $i16 = virtualinvoke r3.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i17 = virtualinvoke r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        specialinvoke $r37.<org.apache.commons.math3.fitting.leastsquares.OptimumImpl: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation,int,int)>(r44, $i16, $i17);

        return $r37;

     label50:
        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d71);

        $d9 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b12 = $d8 cmpg $d9;

        if $b12 > 0 goto label51;

        $d13 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b14 = d0 cmpg $d13;

        if $b14 > 0 goto label51;

        $b15 = d66 cmpg 2.0;

        if $b15 > 0 goto label51;

        $r33 = new org.apache.commons.math3.exception.ConvergenceException;

        $r35 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE>;

        $r34 = newarray (java.lang.Object)[1];

        $d14 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        $r34[0] = $r36;

        specialinvoke $r33.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r35, $r34);

        throw $r33;

     label51:
        $d89 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $d90 = $d89 * d57;

        $b52 = d56 cmpg $d90;

        if $b52 > 0 goto label52;

        $r29 = new org.apache.commons.math3.exception.ConvergenceException;

        $r31 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE>;

        $r30 = newarray (java.lang.Object)[1];

        $d12 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $r30[0] = $r32;

        specialinvoke $r29.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r31, $r30);

        throw $r29;

     label52:
        $d10 = <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS>;

        $b13 = d63 cmpg $d10;

        if $b13 > 0 goto label53;

        $r25 = new org.apache.commons.math3.exception.ConvergenceException;

        $r27 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE>;

        $r26 = newarray (java.lang.Object)[1];

        $d11 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r26[0] = $r28;

        specialinvoke $r25.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r27, $r26);

        throw $r25;

     label53:
        goto label20;

     label54:
        goto label01;
    }

    private double determineLMParameter(double[], double, double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData, int, double[], double[], double[], double[], double)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r4, r5, r6, r7, r10, $r11, $r12, $r13, $r14, $r15;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, d56, d57, d58, d59, d60, d61, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, $d80;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData r3;
        int i0, i1, i2, i3, i4, $i13, $i14, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44;
        double[][] r8;
        int[] r9;
        byte $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b15, $b16;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        i0 := @parameter4: int;

        r4 := @parameter5: double[];

        r5 := @parameter6: double[];

        r6 := @parameter7: double[];

        r7 := @parameter8: double[];

        d56 := @parameter9: double;

        r8 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r3);

        r9 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r3);

        i1 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int access$400(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r3);

        r10 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r3);

        $r11 = r8[0];

        i2 = lengthof $r11;

        i21 = 0;

     label01:
        if i21 >= i1 goto label02;

        $i20 = r9[i21];

        $d55 = r1[i21];

        r7[$i20] = $d55;

        i21 = i21 + 1;

        goto label01;

     label02:
        i22 = i1;

     label03:
        if i22 >= i2 goto label04;

        $i19 = r9[i22];

        r7[$i19] = 0.0;

        i22 = i22 + 1;

        goto label03;

     label04:
        i23 = i1 - 1;

     label05:
        if i23 < 0 goto label08;

        i3 = r9[i23];

        $d50 = r7[i3];

        $d49 = r10[i3];

        d57 = $d50 / $d49;

        i24 = 0;

     label06:
        if i24 >= i23 goto label07;

        $i18 = r9[i24];

        $d53 = r7[$i18];

        $r15 = r8[i24];

        $d51 = $r15[i3];

        $d52 = d57 * $d51;

        $d54 = $d53 - $d52;

        r7[$i18] = $d54;

        i24 = i24 + 1;

        goto label06;

     label07:
        r7[i3] = d57;

        i23 = i23 + -1;

        goto label05;

     label08:
        d58 = 0.0;

        i25 = 0;

     label09:
        if i25 >= i0 goto label10;

        i4 = r9[i25];

        $d47 = r2[i4];

        $d46 = r7[i4];

        d59 = $d47 * $d46;

        r4[i4] = d59;

        $d48 = d59 * d59;

        d58 = d58 + $d48;

        i25 = i25 + 1;

        goto label09;

     label10:
        d60 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d58);

        d61 = d60 - d0;

        $d3 = 0.1 * d0;

        $b5 = d61 cmpg $d3;

        if $b5 > 0 goto label11;

        return 0.0;

     label11:
        d63 = 0.0;

        if i1 != i0 goto label18;

        i26 = 0;

     label12:
        if i26 >= i0 goto label13;

        i27 = r9[i26];

        $d44 = r4[i27];

        $d42 = r2[i27];

        $d43 = $d42 / d60;

        $d45 = $d44 * $d43;

        r4[i27] = $d45;

        i26 = i26 + 1;

        goto label12;

     label13:
        d64 = 0.0;

        i28 = 0;

     label14:
        if i28 >= i0 goto label17;

        i29 = r9[i28];

        d65 = 0.0;

        i30 = 0;

     label15:
        if i30 >= i28 goto label16;

        $r14 = r8[i30];

        $d40 = $r14[i29];

        $i17 = r9[i30];

        $d39 = r4[$i17];

        $d41 = $d40 * $d39;

        d65 = d65 + $d41;

        i30 = i30 + 1;

        goto label15;

     label16:
        $d35 = r4[i29];

        $d37 = $d35 - d65;

        $d36 = r10[i29];

        d66 = $d37 / $d36;

        r4[i29] = d66;

        $d38 = d66 * d66;

        d64 = d64 + $d38;

        i28 = i28 + 1;

        goto label14;

     label17:
        $d34 = d0 * d64;

        d63 = d61 / $d34;

     label18:
        d67 = 0.0;

        i31 = 0;

     label19:
        if i31 >= i0 goto label22;

        i32 = r9[i31];

        d68 = 0.0;

        i33 = 0;

     label20:
        if i33 > i31 goto label21;

        $r13 = r8[i33];

        $d32 = $r13[i32];

        $d31 = r1[i33];

        $d33 = $d32 * $d31;

        d68 = d68 + $d33;

        i33 = i33 + 1;

        goto label20;

     label21:
        $d29 = r2[i32];

        d69 = d68 / $d29;

        $d30 = d69 * d69;

        d67 = d67 + $d30;

        i31 = i31 + 1;

        goto label19;

     label22:
        d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d67);

        d71 = d70 / d0;

        $b6 = d71 cmpl 0.0;

        if $b6 != 0 goto label23;

        $d27 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d0, 0.1);

        d71 = $d27 / $d28;

     label23:
        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d56, d63);

        d72 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d71, $d4);

        $b7 = d72 cmpl 0.0;

        if $b7 != 0 goto label24;

        d72 = d70 / d60;

     label24:
        i34 = 10;

     label25:
        if i34 < 0 goto label43;

        $b8 = d72 cmpl 0.0;

        if $b8 != 0 goto label26;

        $d26 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d25 = 0.001 * d71;

        d72 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d26, $d25);

     label26:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d72);

        i35 = 0;

     label27:
        if i35 >= i0 goto label28;

        i36 = r9[i35];

        $d23 = r2[i36];

        $d24 = d1 * $d23;

        r4[i36] = $d24;

        i35 = i35 + 1;

        goto label27;

     label28:
        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: void determineLMDirection(double[],double[],double[],org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData,int,double[],double[])>(r1, r4, r5, r3, i0, r6, r7);

        d73 = 0.0;

        i37 = 0;

     label29:
        if i37 >= i0 goto label30;

        i38 = r9[i37];

        $d21 = r2[i38];

        $d20 = r7[i38];

        d74 = $d21 * $d20;

        r6[i38] = d74;

        $d22 = d74 * d74;

        d73 = d73 + $d22;

        i37 = i37 + 1;

        goto label29;

     label30:
        d75 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d73);

        d76 = d61;

        d61 = d75 - d0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d61);

        $d6 = 0.1 * d0;

        $b9 = $d5 cmpg $d6;

        if $b9 <= 0 goto label31;

        $b10 = d63 cmpl 0.0;

        if $b10 != 0 goto label32;

        $b15 = d61 cmpg d76;

        if $b15 > 0 goto label32;

        $b16 = d76 cmpg 0.0;

        if $b16 >= 0 goto label32;

     label31:
        return d72;

     label32:
        i39 = 0;

     label33:
        if i39 >= i0 goto label34;

        i40 = r9[i39];

        $d17 = r6[i40];

        $d16 = r2[i40];

        $d18 = $d17 * $d16;

        $d19 = $d18 / d75;

        r4[i40] = $d19;

        i39 = i39 + 1;

        goto label33;

     label34:
        i41 = 0;

     label35:
        if i41 >= i0 goto label38;

        i42 = r9[i41];

        $d10 = r4[i42];

        $d9 = r5[i41];

        $d11 = $d10 / $d9;

        r4[i42] = $d11;

        d2 = r4[i42];

        i43 = i41 + 1;

     label36:
        if i43 >= i0 goto label37;

        $i14 = r9[i43];

        $d14 = r4[$i14];

        $r12 = r8[i43];

        $d12 = $r12[i42];

        $d13 = $d12 * d2;

        $d15 = $d14 - $d13;

        r4[$i14] = $d15;

        i43 = i43 + 1;

        goto label36;

     label37:
        i41 = i41 + 1;

        goto label35;

     label38:
        d77 = 0.0;

        i44 = 0;

     label39:
        if i44 >= i0 goto label40;

        $i13 = r9[i44];

        d78 = r4[$i13];

        $d8 = d78 * d78;

        d77 = d77 + $d8;

        i44 = i44 + 1;

        goto label39;

     label40:
        $d7 = d0 * d77;

        d79 = d61 / $d7;

        $b11 = d61 cmpl 0.0;

        if $b11 <= 0 goto label41;

        d63 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d63, d72);

        goto label42;

     label41:
        $b12 = d61 cmpg 0.0;

        if $b12 >= 0 goto label42;

        d71 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d71, d72);

     label42:
        $d80 = d72 + d79;

        d72 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d63, $d80);

        i34 = i34 + -1;

        goto label25;

     label43:
        return d72;
    }

    private void determineLMDirection(double[], double[], double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData, int, double[], double[])
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r5, r6, r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData r4;
        int i0, i1, $i2, $i5, $i6, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, $i25;
        int[] r7;
        double[][] r8;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, d49, d50, d51, d52, d53, d54, d55;
        byte $b3, $b4, $b7, $b8;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        i0 := @parameter4: int;

        r5 := @parameter5: double[];

        r6 := @parameter6: double[];

        r7 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r4);

        r8 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r4);

        r9 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r4);

        i12 = 0;

     label01:
        if i12 >= i0 goto label04;

        i13 = r7[i12];

        i14 = i12 + 1;

     label02:
        if i14 >= i0 goto label03;

        $r18 = r8[i14];

        $r17 = r8[i12];

        $i11 = r7[i14];

        $d47 = $r17[$i11];

        $r18[i13] = $d47;

        i14 = i14 + 1;

        goto label02;

     label03:
        $d45 = r9[i13];

        r6[i12] = $d45;

        $d46 = r1[i12];

        r5[i12] = $d46;

        i12 = i12 + 1;

        goto label01;

     label04:
        i15 = 0;

     label05:
        if i15 >= i0 goto label13;

        i16 = r7[i15];

        d48 = r2[i16];

        $b4 = d48 cmpl 0.0;

        if $b4 == 0 goto label06;

        $i10 = i15 + 1;

        $i9 = lengthof r3;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r3, $i10, $i9, 0.0);

     label06:
        r3[i15] = d48;

        d49 = 0.0;

        i17 = i15;

     label07:
        if i17 >= i0 goto label12;

        i1 = r7[i17];

        $d14 = r3[i17];

        $b7 = $d14 cmpl 0.0;

        if $b7 == 0 goto label11;

        $r13 = r8[i17];

        d0 = $r13[i1];

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d16 = r3[i17];

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d16);

        $b8 = $d15 cmpg $d17;

        if $b8 >= 0 goto label08;

        $d41 = r3[i17];

        d50 = d0 / $d41;

        $d42 = d50 * d50;

        $d43 = 1.0 + $d42;

        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d43);

        d51 = 1.0 / $d44;

        d52 = d51 * d50;

        goto label09;

     label08:
        $d18 = r3[i17];

        d53 = $d18 / d0;

        $d19 = d53 * d53;

        $d20 = 1.0 + $d19;

        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d20);

        d52 = 1.0 / $d21;

        d51 = d52 * d53;

     label09:
        $r14 = r8[i17];

        $d24 = d52 * d0;

        $d22 = r3[i17];

        $d23 = d51 * $d22;

        $d25 = $d24 + $d23;

        $r14[i1] = $d25;

        $d26 = r5[i17];

        $d28 = d52 * $d26;

        $d27 = d51 * d49;

        d54 = $d28 + $d27;

        $d30 = neg d51;

        $d29 = r5[i17];

        $d32 = $d30 * $d29;

        $d31 = d52 * d49;

        d49 = $d32 + $d31;

        r5[i17] = d54;

        i18 = i17 + 1;

     label10:
        if i18 >= i0 goto label11;

        $r15 = r8[i18];

        d1 = $r15[i1];

        $d35 = d52 * d1;

        $d33 = r3[i18];

        $d34 = d51 * $d33;

        d2 = $d35 + $d34;

        $d36 = neg d51;

        $d39 = $d36 * d1;

        $d37 = r3[i18];

        $d38 = d52 * $d37;

        $d40 = $d39 + $d38;

        r3[i18] = $d40;

        $r16 = r8[i18];

        $r16[i1] = d2;

        i18 = i18 + 1;

        goto label10;

     label11:
        i17 = i17 + 1;

        goto label07;

     label12:
        $r11 = r8[i15];

        $i5 = r7[i15];

        $d12 = $r11[$i5];

        r3[i15] = $d12;

        $r12 = r8[i15];

        $i6 = r7[i15];

        $d13 = r6[i15];

        $r12[$i6] = $d13;

        i15 = i15 + 1;

        goto label05;

     label13:
        i19 = i0;

        i20 = 0;

     label14:
        if i20 >= i0 goto label17;

        $d11 = r3[i20];

        $b3 = $d11 cmpl 0.0;

        if $b3 != 0 goto label15;

        if i19 != i0 goto label15;

        i19 = i20;

     label15:
        if i19 >= i0 goto label16;

        r5[i20] = 0.0;

     label16:
        i20 = i20 + 1;

        goto label14;

     label17:
        if i19 <= 0 goto label21;

        i21 = i19 - 1;

     label18:
        if i21 < 0 goto label21;

        i22 = r7[i21];

        d55 = 0.0;

        i23 = i21 + 1;

     label19:
        if i23 >= i19 goto label20;

        $r10 = r8[i23];

        $d9 = $r10[i22];

        $d8 = r5[i23];

        $d10 = $d9 * $d8;

        d55 = d55 + $d10;

        i23 = i23 + 1;

        goto label19;

     label20:
        $d4 = r5[i21];

        $d6 = $d4 - d55;

        $d5 = r3[i21];

        $d7 = $d6 / $d5;

        r5[i21] = $d7;

        i21 = i21 + -1;

        goto label18;

     label21:
        i24 = 0;

     label22:
        $i25 = lengthof r6;

        if i24 >= $i25 goto label23;

        $i2 = r7[i24];

        $d3 = r5[i24];

        r6[$i2] = $d3;

        i24 = i24 + 1;

        goto label22;

     label23:
        return;
    }

    private org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData qrDecomposition(org.apache.commons.math3.linear.RealMatrix, int) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r7;
        int i0, i1, i2, $i4, $i6, $i7, $i8, $i9, $i10, $i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        double[][] r2;
        int[] r3;
        double[] r4, r5, r6, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r22, $r23;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d21, d22, $d23, d25, d26;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData $r9, $r16;
        byte $b3, $b5, $b12;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.ConvergenceException $r17;
        java.lang.Object[] $r18;
        org.apache.commons.math3.exception.util.LocalizedFormats $r19;
        java.lang.Integer $r20, $r21;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 := @parameter1: int;

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        r2 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        i1 = lengthof r2;

        $r8 = r2[0];

        i2 = lengthof $r8;

        r3 = newarray (int)[i2];

        r4 = newarray (double)[i2];

        r5 = newarray (double)[i2];

        r6 = newarray (double)[i2];

        i14 = 0;

     label01:
        if i14 >= i2 goto label04;

        r3[i14] = i14;

        d18 = 0.0;

        i15 = 0;

     label02:
        if i15 >= i1 goto label03;

        $r23 = r2[i15];

        d19 = $r23[i14];

        $d17 = d19 * d19;

        d18 = d18 + $d17;

        i15 = i15 + 1;

        goto label02;

     label03:
        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d18);

        r5[i14] = $d16;

        i14 = i14 + 1;

        goto label01;

     label04:
        i16 = 0;

     label05:
        if i16 >= i2 goto label22;

        i17 = -1;

        d20 = #-Infinity;

        i18 = i16;

     label06:
        if i18 >= i2 goto label12;

        d21 = 0.0;

        i19 = i16;

     label07:
        if i19 >= i1 goto label08;

        $r22 = r2[i19];

        $i13 = r3[i18];

        d0 = $r22[$i13];

        $d15 = d0 * d0;

        d21 = d21 + $d15;

        i19 = i19 + 1;

        goto label07;

     label08:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d21);

        if $z0 != 0 goto label09;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d21);

        if $z1 == 0 goto label10;

     label09:
        $r17 = new org.apache.commons.math3.exception.ConvergenceException;

        $r19 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN>;

        $r18 = newarray (java.lang.Object)[2];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r18[0] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r18[1] = $r21;

        specialinvoke $r17.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r19, $r18);

        throw $r17;

     label10:
        $b12 = d21 cmpl d20;

        if $b12 <= 0 goto label11;

        i17 = i18;

        d20 = d21;

     label11:
        i18 = i18 + 1;

        goto label06;

     label12:
        $d2 = r0.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        $b3 = d20 cmpg $d2;

        if $b3 > 0 goto label13;

        $r16 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        specialinvoke $r16.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: void <init>(double[][],int[],int,double[],double[],double[])>(r2, r3, i16, r4, r5, r6);

        return $r16;

     label13:
        i20 = r3[i17];

        $i4 = r3[i16];

        r3[i17] = $i4;

        r3[i16] = i20;

        $r10 = r2[i16];

        d22 = $r10[i20];

        $b5 = d22 cmpl 0.0;

        if $b5 <= 0 goto label14;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d20);

        $d23 = neg $d14;

        goto label15;

     label14:
        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d20);

     label15:
        $d3 = d22 * $d23;

        $d4 = d20 - $d3;

        d1 = 1.0 / $d4;

        r6[i20] = d1;

        r4[i20] = $d23;

        $r11 = r2[i16];

        $d5 = $r11[i20];

        $d6 = $d5 - $d23;

        $r11[i20] = $d6;

        $i6 = i2 - 1;

        i21 = $i6 - i16;

     label16:
        if i21 <= 0 goto label21;

        d25 = 0.0;

        i22 = i16;

     label17:
        if i22 >= i1 goto label18;

        $r14 = r2[i22];

        $d12 = $r14[i20];

        $r15 = r2[i22];

        $i9 = i16 + i21;

        $i10 = r3[$i9];

        $d11 = $r15[$i10];

        $d13 = $d12 * $d11;

        d25 = d25 + $d13;

        i22 = i22 + 1;

        goto label17;

     label18:
        d26 = d25 * d1;

        i23 = i16;

     label19:
        if i23 >= i1 goto label20;

        $r12 = r2[i23];

        $i7 = i16 + i21;

        $i8 = r3[$i7];

        $d9 = $r12[$i8];

        $r13 = r2[i23];

        $d7 = $r13[i20];

        $d8 = d26 * $d7;

        $d10 = $d9 - $d8;

        $r12[$i8] = $d10;

        i23 = i23 + 1;

        goto label19;

     label20:
        i21 = i21 + -1;

        goto label16;

     label21:
        i16 = i16 + 1;

        goto label05;

     label22:
        $r9 = new org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        specialinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: void <init>(double[][],int[],int,double[],double[],double[])>(r2, r3, i0, r4, r5, r6);

        return $r9;
    }

    private void qTy(double[], org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)
    {
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer r0;
        double[] r1, r5, $r6, $r7, $r8;
        org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData r2;
        double[][] r3;
        int[] r4;
        int i0, i1, i2, i3, i4, i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData;

        r3 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r2);

        r4 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r2);

        r5 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData: double[] access$500(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData)>(r2);

        i0 = lengthof r3;

        $r6 = r3[0];

        i1 = lengthof $r6;

        i3 = 0;

     label1:
        if i3 >= i1 goto label6;

        i2 = r4[i3];

        d8 = 0.0;

        i4 = i3;

     label2:
        if i4 >= i0 goto label3;

        $r8 = r3[i4];

        $d6 = $r8[i2];

        $d5 = r1[i4];

        $d7 = $d6 * $d5;

        d8 = d8 + $d7;

        i4 = i4 + 1;

        goto label2;

     label3:
        $d0 = r5[i2];

        d9 = d8 * $d0;

        i5 = i3;

     label4:
        if i5 >= i0 goto label5;

        $d3 = r1[i5];

        $r7 = r3[i5];

        $d1 = $r7[i2];

        $d2 = d9 * $d1;

        $d4 = $d3 - $d2;

        r1[i5] = $d4;

        i5 = i5 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    static void <clinit>()
    {
        double $d0, $d1;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d1 = 2.0 * $d0;

        <org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer: double TWO_EPS> = $d1;

        return;
    }
}
