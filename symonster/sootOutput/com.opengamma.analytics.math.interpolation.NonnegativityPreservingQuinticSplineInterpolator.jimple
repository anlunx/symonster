public class com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final double EPS;
    private static final double SMALL;
    private final com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver;
    private final com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function;
    private com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r2;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r2 = new com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver> = $r2;

        $r3 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function> = $r3;

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method> = r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, r6, r7, r8, r9, $r26, $r27, r28, r29, r30;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, i13, i14, i15, i16, $i17, i18;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r5, $r23;
        double[][] r10, $r18, $r21;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r13, $r14, $r22;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r15;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r16, $r19;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r17, $r20, $r25;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r24;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        byte $b10;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i11 = lengthof r1;

        if $i11 <= 2 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i12 = 0;

     label07:
        if i12 >= i0 goto label08;

        $d6 = r1[i12];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i12];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i12 = i12 + 1;

        goto label07;

     label08:
        i13 = 0;

     label09:
        if i13 >= i1 goto label10;

        $d4 = r2[i13];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing NaN");

        $d5 = r2[i13];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing Infinity");

        i13 = i13 + 1;

        goto label09;

     label10:
        i14 = 0;

     label11:
        $i7 = i0 - 1;

        if i14 >= $i7 goto label16;

        i15 = i14 + 1;

     label12:
        if i15 >= i0 goto label15;

        $d3 = r1[i14];

        $d2 = r1[i15];

        $b10 = $d3 cmpl $d2;

        if $b10 != 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i15 = i15 + 1;

        goto label12;

     label15:
        i14 = i14 + 1;

        goto label11;

     label16:
        r28 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r29 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r30 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i8 = i0 + 1;

        r30 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i8);

     label18:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r28, r30);

        $r13 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r13.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r28);

        $r14 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r4 = virtualinvoke $r14.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r30, r3);

        $r15 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r5 = virtualinvoke $r15.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i9 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i9 < 3 goto label19;

        $z11 = 1;

        goto label20;

     label19:
        $z11 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant should be degree >= 2");

        $r16 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r5, r28);

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r6 = $r18[0];

        $r19 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r5, r28);

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r7 = $r21[0];

        r8 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r30, r3, r4, r6);

        r9 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[],double[],double[])>(r30, r3, r8, r7);

        $r22 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r10 = virtualinvoke $r22.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[],double[])>(r30, r3, r4, r8, r9);

        i16 = 0;

     label21:
        $i17 = i0 - 1;

        if i16 >= $i17 goto label24;

        i18 = 0;

     label22:
        if i18 >= 6 goto label23;

        $r26 = r10[i16];

        $d0 = $r26[i18];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r27 = r10[i16];

        $d1 = $r27[i18];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i18 = i18 + 1;

        goto label22;

     label23:
        i16 = i16 + 1;

        goto label21;

     label24:
        $r23 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r24 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r28);

        $r25 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r10);

        specialinvoke $r23.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r24, $r25, 6, 1);

        return $r23;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r3, r4, r5, r6, $r9, $r10, $r11, $r17, $r18, $r21, $r22, $r25, $r36, $r37, $r38, r39, r41, r42, r43, r44;
        double[][] r2, $r29, $r32, $r35, r46;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r13, $r16, $r19, $r28, $r31, $r33;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r14, r45;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r15, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r23, $r24, $r34;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r26;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r27, $r30;
        byte $b14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r40;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r9 = r2[0];

        $i3 = lengthof $r9;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $r10 = r2[0];

        $i6 = lengthof $r10;

        if $i7 != $i6 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValuesMatrix\'s row vector length) or (xValues length + 2 = yValuesMatrix\'s row vector length)");

        $i15 = lengthof r1;

        if $i15 <= 2 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 2");

        i0 = lengthof r1;

        $r11 = r2[0];

        i1 = lengthof $r11;

        i2 = lengthof r2;

        i16 = 0;

     label07:
        if i16 >= i0 goto label08;

        $d6 = r1[i16];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i16];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i16 = i16 + 1;

        goto label07;

     label08:
        i17 = 0;

     label09:
        if i17 >= i1 goto label12;

        i18 = 0;

     label10:
        if i18 >= i2 goto label11;

        $r37 = r2[i18];

        $d4 = $r37[i17];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValuesMatrix containing NaN");

        $r38 = r2[i18];

        $d5 = $r38[i17];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing Infinity");

        i18 = i18 + 1;

        goto label10;

     label11:
        i17 = i17 + 1;

        goto label09;

     label12:
        i19 = 0;

     label13:
        if i19 >= i0 goto label18;

        i20 = i19 + 1;

     label14:
        if i20 >= i0 goto label17;

        $d3 = r1[i19];

        $d2 = r1[i20];

        $b14 = $d3 cmpl $d2;

        if $b14 != 0 goto label15;

        $z10 = 1;

        goto label16;

     label15:
        $z10 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i20 = i20 + 1;

        goto label14;

     label17:
        i19 = i19 + 1;

        goto label13;

     label18:
        r39 = newarray (double)[i0];

        r40 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i21 = 0;

     label19:
        if i21 >= i2 goto label24;

        r39 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r41 = newarray (double)[i0];

        if i0 != i1 goto label20;

        $r36 = r2[i21];

        r42 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r36, i0);

        goto label21;

     label20:
        $r22 = r2[i21];

        $i12 = i0 + 1;

        r42 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r22, 1, $i12);

     label21:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r39, r42);

        $r23 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r43 = virtualinvoke $r23.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r39);

        $r24 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r44 = virtualinvoke $r24.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r42, r43);

        $r26 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r25 = r2[i21];

        r45 = virtualinvoke $r26.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, $r25);

        $i13 = virtualinvoke r45.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i13 < 3 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant should be degree >= 2");

        $r27 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r45, r39);

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = $r29[0];

        $r30 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r45, r39);

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = $r32[0];

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r42, r43, r44, r3);

        r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[],double[],double[])>(r42, r43, r5, r4);

        $r33 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r34 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[],double[])>(r42, r43, r44, r5, r6);

        specialinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r35);

        r40[i21] = $r33;

        i21 = i21 + 1;

        goto label19;

     label24:
        $r12 = r40[0];

        i22 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r13 = r40[0];

        i23 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i8 = i2 * i22;

        r46 = newmultiarray (double)[$i8][i23];

        i24 = 0;

     label25:
        if i24 >= i22 goto label28;

        i25 = 0;

     label26:
        if i25 >= i2 goto label27;

        $i10 = i2 * i24;

        $i11 = $i10 + i25;

        $r19 = r40[i25];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i24);

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r46[$i11] = $r21;

        i25 = i25 + 1;

        goto label26;

     label27:
        i24 = i24 + 1;

        goto label25;

     label28:
        i26 = 0;

     label29:
        $i9 = i22 * i2;

        if i26 >= $i9 goto label32;

        i27 = 0;

     label30:
        if i27 >= i23 goto label31;

        $r17 = r46[i26];

        $d0 = $r17[i27];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r18 = r46[i26];

        $d1 = $r18[i27];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i27 = i27 + 1;

        goto label30;

     label31:
        i26 = i26 + 1;

        goto label29;

     label32:
        $r14 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r39);

        $r16 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r46);

        specialinvoke $r14.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r15, $r16, i23, i2);

        return $r14;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r5, r6, r8, r9, r10, r11, r14, r15, r16, r17, r18, r19, r20, r21, $r43, $r46, $r47, $r49, $r51, $r68, $r69, r72, r73, r74, r78, r79;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i31, i32, i33, i34, i35, i38, $i39, i40, i41, i42, i43, i44, i45, i46, i47;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r4, $r37;
        double[][] r7, $r29, $r32, $r58, $r61, $r64, $r67, r80, r81;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r12, r13, r77;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r24, $r25, $r33, $r36, $r52, $r53;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r26, $r41, $r54, $r55;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r27, $r30, $r34, $r35, $r56, $r59, $r62, $r65;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r28, $r31, $r57, $r60, $r63, $r66, r85, r86;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r38, $r42, $r44, $r45, $r48, $r50;
        int[] $r39;
        java.lang.Double $r40;
        byte $b21, $b22, $b23, $b30, $b36, b37;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r75, r76, r82, r83;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r84, r87;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i31 = lengthof r1;

        if $i31 <= 2 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i32 = 0;

     label07:
        if i32 >= i0 goto label08;

        $d27 = r1[i32];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d27);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d28 = r1[i32];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d28);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i32 = i32 + 1;

        goto label07;

     label08:
        i33 = 0;

     label09:
        if i33 >= i1 goto label10;

        $d25 = r2[i33];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d25);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing NaN");

        $d26 = r2[i33];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d26);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing Infinity");

        i33 = i33 + 1;

        goto label09;

     label10:
        i34 = 0;

     label11:
        $i7 = i0 - 1;

        if i34 >= $i7 goto label16;

        i35 = i34 + 1;

     label12:
        if i35 >= i0 goto label15;

        $d24 = r1[i34];

        $d23 = r1[i35];

        $b30 = $d24 cmpl $d23;

        if $b30 != 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i35 = i35 + 1;

        goto label12;

     label15:
        i34 = i34 + 1;

        goto label11;

     label16:
        r72 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r73 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i8 = i0 + 1;

        r73 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i8);

     label18:
        $r24 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r74 = virtualinvoke $r24.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r1);

        $r25 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r25.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r73, r74);

        $r26 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r4 = virtualinvoke $r26.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>(r1, r2);

        $i9 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if $i9 != 4 goto label19;

        $z11 = 1;

        goto label20;

     label19:
        $z11 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r27 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r4, r1);

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r5 = $r29[0];

        $r30 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r4, r1);

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r6 = $r32[0];

        $r33 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r7 = virtualinvoke $r33.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] slopeSensitivityCalculator(double[])>(r74);

        $i10 = i0 + 1;

        r75 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i10];

        $i11 = i0 + 1;

        r76 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i11];

        z0 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: boolean checkZero(double[])>(r73);

        if z0 == 0 goto label37;

        $r41 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r77 = virtualinvoke $r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i14 = virtualinvoke r77.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i14 != 4 goto label21;

        $z12 = 1;

        goto label22;

     label21:
        $z12 = 0;

     label22:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "Primary interpolant is not cubic");

        $r42 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r43 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r73, r74, r3, r5);

        specialinvoke $r42.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r43);

        r75[0] = $r42;

        $r44 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r45 = r75[0];

        $r46 = virtualinvoke $r45.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r47 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[],double[],double[])>(r73, r74, $r46, r6);

        specialinvoke $r44.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r47);

        r76[0] = $r44;

        if i0 != i1 goto label23;

        $b36 = 0;

        goto label24;

     label23:
        $b36 = 1;

     label24:
        b37 = $b36;

        $i15 = 2 * $b36;

        $i16 = i0 + $i15;

        r78 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i16);

        $i17 = 2 * $b36;

        $i18 = i0 + $i17;

        r79 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i18);

        r80 = newmultiarray (double)[i0][i0];

        r81 = newmultiarray (double)[i0][i0];

        i38 = $b36;

     label25:
        $i39 = i0 + b37;

        if i38 >= $i39 goto label34;

        $d2 = r2[i38];

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b21 = $d3 cmpg 1.0E-14;

        if $b21 >= 0 goto label26;

        $d29 = 1.0E-6;

        goto label27;

     label26:
        $d4 = r2[i38];

        $d29 = $d4 * 1.0E-6;

     label27:
        d0 = $d29;

        $i29 = i38;

        $d5 = r2[i38];

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b22 = $d6 cmpg 1.0E-14;

        if $b22 >= 0 goto label28;

        $d30 = 1.0E-6;

        goto label29;

     label28:
        $d7 = r2[i38];

        $d30 = $d7 * 1.000001;

     label29:
        r78[$i29] = $d30;

        $i28 = i38;

        $d8 = r2[i38];

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        $b23 = $d9 cmpg 1.0E-14;

        if $b23 >= 0 goto label30;

        $d31 = -1.0E-6;

        goto label31;

     label30:
        $d10 = r2[i38];

        $d31 = $d10 * 0.999999;

     label31:
        r79[$i28] = $d31;

        $i24 = i0 + b37;

        r8 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r78, b37, $i24);

        $i25 = i0 + b37;

        r9 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r79, b37, $i25);

        $r52 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r10 = virtualinvoke $r52.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r8, r74);

        $r53 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r11 = virtualinvoke $r53.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r9, r74);

        $r54 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r12 = virtualinvoke $r54.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r78);

        $r55 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r13 = virtualinvoke $r55.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r79);

        $r56 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r57 = virtualinvoke $r56.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r12, r1);

        $r58 = virtualinvoke $r57.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r14 = $r58[0];

        $r59 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r60 = virtualinvoke $r59.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r13, r1);

        $r61 = virtualinvoke $r60.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r15 = $r61[0];

        $r62 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r63 = virtualinvoke $r62.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r12, r1);

        $r64 = virtualinvoke $r63.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r16 = $r64[0];

        $r65 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r66 = virtualinvoke $r65.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r13, r1);

        $r67 = virtualinvoke $r66.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r17 = $r67[0];

        r18 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r8, r74, r10, r14);

        r19 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r9, r74, r11, r15);

        r20 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[],double[],double[])>(r8, r74, r18, r16);

        r21 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[],double[],double[])>(r9, r74, r19, r17);

        i40 = 0;

     label32:
        if i40 >= i0 goto label33;

        $r68 = r80[i40];

        $i26 = i38 - b37;

        $d14 = r18[i40];

        $d13 = r19[i40];

        $d15 = $d14 - $d13;

        $d16 = 0.5 * $d15;

        $d17 = $d16 / d0;

        $r68[$i26] = $d17;

        $r69 = r81[i40];

        $i27 = i38 - b37;

        $d19 = r20[i40];

        $d18 = r21[i40];

        $d20 = $d19 - $d18;

        $d21 = 0.5 * $d20;

        $d22 = $d21 / d0;

        $r69[$i27] = $d22;

        i40 = i40 + 1;

        goto label32;

     label33:
        $d11 = r2[i38];

        r78[i38] = $d11;

        $d12 = r2[i38];

        r79[i38] = $d12;

        i38 = i38 + 1;

        goto label25;

     label34:
        i41 = 0;

     label35:
        if i41 >= i0 goto label36;

        $i19 = i41 + 1;

        $r48 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r49 = r80[i41];

        specialinvoke $r48.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r49);

        r75[$i19] = $r48;

        $i20 = i41 + 1;

        $r50 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r51 = r81[i41];

        specialinvoke $r50.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r51);

        r76[$i20] = $r50;

        i41 = i41 + 1;

        goto label35;

     label36:
        goto label38;

     label37:
        $r34 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        r82 = virtualinvoke $r34.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>(r4, r1);

        $r35 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        r83 = virtualinvoke $r35.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateTwiceNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>(r4, r1);

        r75 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[],double[],double[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r73, r74, r5, r82);

        r76 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] secondDerivativeWithSensitivityCalculator(double[],double[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[],double[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r73, r74, r75, r6, r83);

     label38:
        $r36 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r84 = virtualinvoke $r36.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[],double[],double[][],com.opengamma.analytics.math.matrix.DoubleMatrix1D[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r73, r74, r3, r7, r75, r76);

        i42 = 0;

     label39:
        if i42 >= i0 goto label44;

        r85 = r84[i42];

        i43 = virtualinvoke r85.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i44 = virtualinvoke r85.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i45 = 0;

     label40:
        if i45 >= i43 goto label43;

        i46 = 0;

     label41:
        if i46 >= i44 goto label42;

        $r39 = newarray (int)[2];

        $r39[0] = i45;

        $r39[1] = i46;

        $r40 = virtualinvoke r85.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r39);

        $d1 = virtualinvoke $r40.<java.lang.Double: double doubleValue()>();

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Matrix contains a NaN or infinite");

        i46 = i46 + 1;

        goto label41;

     label42:
        i45 = i45 + 1;

        goto label40;

     label43:
        i42 = i42 + 1;

        goto label39;

     label44:
        r86 = r84[0];

        $i12 = i0 - 1;

        r87 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i12];

        $i13 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r84, 1, r87, 0, $i13);

        i47 = virtualinvoke r86.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r37 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r38 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r38.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        specialinvoke $r37.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r38, r86, i47, 1, r87);

        return $r37;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getPrimaryMethod()
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        return $r1;
    }

    private double[] firstDerivativeCalculator(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, i16;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, $d49, $d50;
        byte $b3, $b5, $b13;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        r5 = newarray (double)[i0];

        i16 = 1;

     label1:
        $i1 = i0 - 1;

        if i16 >= $i1 goto label4;

        $d32 = r1[i16];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d32);

        $i15 = i16;

        $b13 = d0 cmpl 0.0;

        if $b13 != 0 goto label2;

        $d47 = r4[i16];

        goto label3;

     label2:
        $d34 = 5.0 * d0;

        $d33 = r1[i16];

        $d36 = $d34 * $d33;

        $i14 = i16 - 1;

        $d35 = r2[$i14];

        $d44 = $d36 / $d35;

        $d38 = -5.0 * d0;

        $d37 = r1[i16];

        $d40 = $d38 * $d37;

        $d39 = r2[i16];

        $d43 = $d40 / $d39;

        $d41 = r4[i16];

        $d42 = d0 * $d41;

        $d45 = staticinvoke <java.lang.Math: double max(double,double)>($d43, $d42);

        $d46 = staticinvoke <java.lang.Math: double min(double,double)>($d44, $d45);

        $d47 = $d46 / d0;

     label3:
        r5[$i15] = $d47;

        i16 = i16 + 1;

        goto label1;

     label4:
        $d2 = r1[0];

        d48 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $i2 = i0 - 1;

        $d3 = r1[$i2];

        d1 = staticinvoke <java.lang.Math: double signum(double)>($d3);

        $b3 = d48 cmpl 0.0;

        if $b3 != 0 goto label5;

        $d49 = r4[0];

        goto label6;

     label5:
        $d5 = 5.0 * d48;

        $d4 = r1[0];

        $d7 = $d5 * $d4;

        $d6 = r2[0];

        $d15 = $d7 / $d6;

        $d9 = -5.0 * d48;

        $d8 = r1[0];

        $d11 = $d9 * $d8;

        $d10 = r2[0];

        $d14 = $d11 / $d10;

        $d12 = r4[0];

        $d13 = d48 * $d12;

        $d16 = staticinvoke <java.lang.Math: double max(double,double)>($d14, $d13);

        $d17 = staticinvoke <java.lang.Math: double min(double,double)>($d15, $d16);

        $d49 = $d17 / d48;

     label6:
        r5[0] = $d49;

        $i11 = i0 - 1;

        $b5 = d1 cmpl 0.0;

        if $b5 != 0 goto label7;

        $i12 = i0 - 1;

        $d50 = r4[$i12];

        goto label8;

     label7:
        $d19 = 5.0 * d1;

        $i6 = i0 - 1;

        $d18 = r1[$i6];

        $d21 = $d19 * $d18;

        $i7 = i0 - 2;

        $d20 = r2[$i7];

        $d29 = $d21 / $d20;

        $d23 = -5.0 * d1;

        $i8 = i0 - 1;

        $d22 = r1[$i8];

        $d25 = $d23 * $d22;

        $i9 = i0 - 2;

        $d24 = r2[$i9];

        $d28 = $d25 / $d24;

        $i10 = i0 - 1;

        $d26 = r4[$i10];

        $d27 = d1 * $d26;

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>($d28, $d27);

        $d31 = staticinvoke <java.lang.Math: double min(double,double)>($d29, $d30);

        $d50 = $d31 / d1;

     label8:
        r5[$i11] = $d50;

        return r5;
    }

    private double[] secondDerivativeCalculator(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, i24;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, d87, $d88, $d89;
        byte $b3, $b5, $b19;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        r5 = newarray (double)[i0];

        i24 = 1;

     label1:
        $i1 = i0 - 1;

        if i24 >= $i1 goto label4;

        $d58 = r1[i24];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d58);

        $i23 = i24;

        $b19 = d0 cmpl 0.0;

        if $b19 != 0 goto label2;

        $d86 = r4[i24];

        goto label3;

     label2:
        $d59 = r4[i24];

        $d82 = $d59 * d0;

        $d60 = r3[i24];

        $d62 = 8.0 * $d60;

        $i20 = i24 - 1;

        $d61 = r2[$i20];

        $d69 = $d62 / $d61;

        $d63 = r1[i24];

        $d65 = 20.0 * $d63;

        $i21 = i24 - 1;

        $d64 = r2[$i21];

        $d67 = $d65 / $d64;

        $i22 = i24 - 1;

        $d66 = r2[$i22];

        $d68 = $d67 / $d66;

        $d81 = $d69 - $d68;

        $d70 = r3[i24];

        $d72 = -8.0 * $d70;

        $d71 = r2[i24];

        $d79 = $d72 / $d71;

        $d73 = r1[i24];

        $d75 = 20.0 * $d73;

        $d74 = r2[i24];

        $d77 = $d75 / $d74;

        $d76 = r2[i24];

        $d78 = $d77 / $d76;

        $d80 = $d79 - $d78;

        $d83 = staticinvoke <java.lang.Math: double max(double,double)>($d81, $d80);

        $d84 = d0 * $d83;

        $d85 = staticinvoke <java.lang.Math: double max(double,double)>($d82, $d84);

        $d86 = $d85 / d0;

     label3:
        r5[$i23] = $d86;

        i24 = i24 + 1;

        goto label1;

     label4:
        $d2 = r1[0];

        d87 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $i2 = i0 - 1;

        $d3 = r1[$i2];

        d1 = staticinvoke <java.lang.Math: double signum(double)>($d3);

        $b3 = d87 cmpl 0.0;

        if $b3 != 0 goto label5;

        $d88 = r4[0];

        goto label6;

     label5:
        $d4 = r4[0];

        $d27 = $d4 * d87;

        $d5 = r3[0];

        $d7 = 8.0 * $d5;

        $d6 = r2[0];

        $d14 = $d7 / $d6;

        $d8 = r1[0];

        $d10 = 20.0 * $d8;

        $d9 = r2[0];

        $d12 = $d10 / $d9;

        $d11 = r2[0];

        $d13 = $d12 / $d11;

        $d26 = $d14 - $d13;

        $d15 = r3[0];

        $d17 = -8.0 * $d15;

        $d16 = r2[0];

        $d24 = $d17 / $d16;

        $d18 = r1[0];

        $d20 = 20.0 * $d18;

        $d19 = r2[0];

        $d22 = $d20 / $d19;

        $d21 = r2[0];

        $d23 = $d22 / $d21;

        $d25 = $d24 - $d23;

        $d28 = staticinvoke <java.lang.Math: double max(double,double)>($d26, $d25);

        $d29 = d87 * $d28;

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>($d27, $d29);

        $d88 = $d30 / d87;

     label6:
        r5[0] = $d88;

        $i17 = i0 - 1;

        $b5 = d1 cmpl 0.0;

        if $b5 != 0 goto label7;

        $i18 = i0 - 1;

        $d89 = r4[$i18];

        goto label8;

     label7:
        $i6 = i0 - 1;

        $d31 = r4[$i6];

        $d54 = $d31 * d1;

        $i7 = i0 - 1;

        $d32 = r3[$i7];

        $d34 = 8.0 * $d32;

        $i8 = i0 - 2;

        $d33 = r2[$i8];

        $d41 = $d34 / $d33;

        $i9 = i0 - 1;

        $d35 = r1[$i9];

        $d37 = 20.0 * $d35;

        $i10 = i0 - 2;

        $d36 = r2[$i10];

        $d39 = $d37 / $d36;

        $i11 = i0 - 2;

        $d38 = r2[$i11];

        $d40 = $d39 / $d38;

        $d53 = $d41 - $d40;

        $i12 = i0 - 1;

        $d42 = r3[$i12];

        $d44 = -8.0 * $d42;

        $i13 = i0 - 2;

        $d43 = r2[$i13];

        $d51 = $d44 / $d43;

        $i14 = i0 - 1;

        $d45 = r1[$i14];

        $d47 = 20.0 * $d45;

        $i15 = i0 - 2;

        $d46 = r2[$i15];

        $d49 = $d47 / $d46;

        $i16 = i0 - 2;

        $d48 = r2[$i16];

        $d50 = $d49 / $d48;

        $d52 = $d51 - $d50;

        $d55 = staticinvoke <java.lang.Math: double max(double,double)>($d53, $d52);

        $d56 = d1 * $d55;

        $d57 = staticinvoke <java.lang.Math: double max(double,double)>($d54, $d56);

        $d89 = $d57 / d1;

     label8:
        r5[$i17] = $d89;

        return r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[], double[], double[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r6, r7, r8, $r10, $r12, $r14, $r17, $r20, $r23, $r26, $r28, $r31, r33;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r4, r5;
        int i0, $i1, $i2, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i35, $i40, $i42, $i43, $i45, i46, i47, i48, $i49, i50, i51, $i52, $i53, $i54, $i55, $i56, $i57, i59, i60;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, d99, $d100, $d101, $d102, d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b16, $b25, $b31, $b33, $b36, $b37, $b38, $b39, $b41, $b44, $b58;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r11, $r13, $r16, $r19, $r22, $r25, $r27, $r30, $r34, $r35, $r36, $r37;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        i0 = lengthof r1;

        $i1 = i0 + 1;

        r5 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i1];

        r6 = newarray (double)[i0];

        i46 = 1;

     label01:
        $i2 = i0 - 1;

        if i46 >= $i2 goto label15;

        $d64 = r1[i46];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d64);

        $d66 = -5.0 * d0;

        $d65 = r1[i46];

        $d68 = $d66 * $d65;

        $d67 = r2[i46];

        d2 = $d68 / $d67;

        $d70 = 5.0 * d0;

        $d69 = r1[i46];

        $d72 = $d70 * $d69;

        $i35 = i46 - 1;

        $d71 = r2[$i35];

        d4 = $d72 / $d71;

        $d73 = r3[i46];

        d6 = d0 * $d73;

        r33 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r33, 0.0);

        $d74 = d6 - d2;

        $d75 = staticinvoke <java.lang.Math: double abs(double)>($d74);

        $b36 = $d75 cmpg 1.0E-14;

        if $b36 >= 0 goto label06;

        $i45 = i46;

        $b44 = d6 cmpl d2;

        if $b44 < 0 goto label02;

        $d97 = r3[i46];

        goto label03;

     label02:
        $d97 = d2 / d0;

     label03:
        r6[$i45] = $d97;

        i47 = 0;

     label04:
        if i47 >= i0 goto label05;

        $r30 = r4[i46];

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d95 = $r31[i47];

        $d96 = 0.5 * $d95;

        r33[i47] = $d96;

        i47 = i47 + 1;

        goto label04;

     label05:
        $d93 = r33[i46];

        $d91 = r2[i46];

        $d92 = 2.5 / $d91;

        $d94 = $d93 - $d92;

        r33[i46] = $d94;

        goto label14;

     label06:
        $b37 = d6 cmpg d2;

        if $b37 >= 0 goto label07;

        $d88 = d2 / d0;

        r6[i46] = $d88;

        $d89 = r2[i46];

        $d90 = -5.0 / $d89;

        r33[i46] = $d90;

        goto label14;

     label07:
        $d76 = d6 - d4;

        $d77 = staticinvoke <java.lang.Math: double abs(double)>($d76);

        $b38 = $d77 cmpg 1.0E-14;

        if $b38 >= 0 goto label12;

        $i43 = i46;

        $b41 = d6 cmpg d4;

        if $b41 > 0 goto label08;

        $d98 = r3[i46];

        goto label09;

     label08:
        $d98 = d4 / d0;

     label09:
        r6[$i43] = $d98;

        i48 = 0;

     label10:
        if i48 >= i0 goto label11;

        $r27 = r4[i46];

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d86 = $r28[i48];

        $d87 = 0.5 * $d86;

        r33[i48] = $d87;

        i48 = i48 + 1;

        goto label10;

     label11:
        $d84 = r33[i46];

        $i42 = i46 - 1;

        $d82 = r2[$i42];

        $d83 = 2.5 / $d82;

        $d85 = $d84 + $d83;

        r33[i46] = $d85;

        goto label14;

     label12:
        $b39 = d6 cmpl d4;

        if $b39 <= 0 goto label13;

        $d79 = d4 / d0;

        r6[i46] = $d79;

        $i40 = i46 - 1;

        $d80 = r2[$i40];

        $d81 = 5.0 / $d80;

        r33[i46] = $d81;

        goto label14;

     label13:
        $d78 = r3[i46];

        r6[i46] = $d78;

        $r25 = r4[i46];

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r33, 0, i0);

     label14:
        $i49 = i46 + 1;

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r33);

        r5[$i49] = $r34;

        i46 = i46 + 1;

        goto label01;

     label15:
        $d10 = r1[0];

        d99 = staticinvoke <java.lang.Math: double signum(double)>($d10);

        $d12 = -5.0 * d99;

        $d11 = r1[0];

        $d14 = $d12 * $d11;

        $d13 = r2[0];

        d1 = $d14 / $d13;

        $d16 = 5.0 * d99;

        $d15 = r1[0];

        $d18 = $d16 * $d15;

        $d17 = r2[0];

        d3 = $d18 / $d17;

        $d19 = r3[0];

        d5 = d99 * $d19;

        r7 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r7, 0.0);

        $d20 = d5 - d1;

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $b3 = $d21 cmpg 1.0E-14;

        if $b3 >= 0 goto label20;

        $b33 = d5 cmpl d1;

        if $b33 < 0 goto label16;

        $d100 = r3[0];

        goto label17;

     label16:
        $d100 = d1 / d99;

     label17:
        r6[0] = $d100;

        i50 = 0;

     label18:
        if i50 >= i0 goto label19;

        $r22 = r4[0];

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d62 = $r23[i50];

        $d63 = 0.5 * $d62;

        r7[i50] = $d63;

        i50 = i50 + 1;

        goto label18;

     label19:
        $d60 = r7[0];

        $d58 = r2[0];

        $d59 = 2.5 / $d58;

        $d61 = $d60 - $d59;

        r7[0] = $d61;

        goto label28;

     label20:
        $b4 = d5 cmpg d1;

        if $b4 >= 0 goto label21;

        $d55 = d1 / d99;

        r6[0] = $d55;

        $d56 = r2[0];

        $d57 = -5.0 / $d56;

        r7[0] = $d57;

        goto label28;

     label21:
        $d22 = d5 - d3;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $b5 = $d23 cmpg 1.0E-14;

        if $b5 >= 0 goto label26;

        $b31 = d5 cmpg d3;

        if $b31 > 0 goto label22;

        $d101 = r3[0];

        goto label23;

     label22:
        $d101 = d3 / d99;

     label23:
        r6[0] = $d101;

        i51 = 0;

     label24:
        if i51 >= i0 goto label25;

        $r19 = r4[0];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d53 = $r20[i51];

        $d54 = 0.5 * $d53;

        r7[i51] = $d54;

        i51 = i51 + 1;

        goto label24;

     label25:
        $d51 = r7[0];

        $d49 = r2[0];

        $d50 = 2.5 / $d49;

        $d52 = $d51 + $d50;

        r7[0] = $d52;

        goto label28;

     label26:
        $b6 = d5 cmpl d3;

        if $b6 <= 0 goto label27;

        $d46 = d3 / d99;

        r6[0] = $d46;

        $d47 = r2[0];

        $d48 = 5.0 / $d47;

        r7[0] = $d48;

        goto label28;

     label27:
        $d24 = r3[0];

        r6[0] = $d24;

        $r9 = r4[0];

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r7, 0, i0);

     label28:
        $r35 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r7);

        r5[1] = $r35;

        $i52 = i0 - 1;

        $d102 = r1[$i52];

        d103 = staticinvoke <java.lang.Math: double signum(double)>($d102);

        $d104 = -5.0 * d103;

        $i53 = i0 - 1;

        $d105 = r1[$i53];

        $d106 = $d104 * $d105;

        $i54 = i0 - 2;

        $d107 = r2[$i54];

        d7 = $d106 / $d107;

        $d108 = 5.0 * d103;

        $i55 = i0 - 1;

        $d109 = r1[$i55];

        $d110 = $d108 * $d109;

        $i56 = i0 - 2;

        $d111 = r2[$i56];

        d8 = $d110 / $d111;

        $i57 = i0 - 1;

        $d112 = r3[$i57];

        d9 = d103 * $d112;

        r8 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r8, 0.0);

        $d113 = d9 - d7;

        $d114 = staticinvoke <java.lang.Math: double abs(double)>($d113);

        $b58 = $d114 cmpg 1.0E-14;

        if $b58 >= 0 goto label33;

        $i26 = i0 - 1;

        $b25 = d9 cmpl d7;

        if $b25 < 0 goto label29;

        $i30 = i0 - 1;

        $d115 = r3[$i30];

        goto label30;

     label29:
        $d115 = d7 / d103;

     label30:
        r6[$i26] = $d115;

        i59 = 0;

     label31:
        if i59 >= i0 goto label32;

        $i29 = i0 - 1;

        $r16 = r4[$i29];

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d44 = $r17[i59];

        $d45 = 0.5 * $d44;

        r8[i59] = $d45;

        i59 = i59 + 1;

        goto label31;

     label32:
        $i27 = i0 - 1;

        $d42 = r8[$i27];

        $i28 = i0 - 2;

        $d40 = r2[$i28];

        $d41 = 2.5 / $d40;

        $d43 = $d42 - $d41;

        r8[$i27] = $d43;

        goto label41;

     label33:
        $b7 = d9 cmpg d7;

        if $b7 >= 0 goto label34;

        $i22 = i0 - 1;

        $d37 = d7 / d103;

        r6[$i22] = $d37;

        $i24 = i0 - 1;

        $i23 = i0 - 2;

        $d38 = r2[$i23];

        $d39 = -5.0 / $d38;

        r8[$i24] = $d39;

        goto label41;

     label34:
        $d25 = d9 - d8;

        $d26 = staticinvoke <java.lang.Math: double abs(double)>($d25);

        $b8 = $d26 cmpg 1.0E-14;

        if $b8 >= 0 goto label39;

        $i17 = i0 - 1;

        $b16 = d9 cmpg d8;

        if $b16 > 0 goto label35;

        $i21 = i0 - 1;

        $d116 = r3[$i21];

        goto label36;

     label35:
        $d116 = d8 / d103;

     label36:
        r6[$i17] = $d116;

        i60 = 0;

     label37:
        if i60 >= i0 goto label38;

        $i20 = i0 - 1;

        $r13 = r4[$i20];

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d35 = $r14[i60];

        $d36 = 0.5 * $d35;

        r8[i60] = $d36;

        i60 = i60 + 1;

        goto label37;

     label38:
        $i18 = i0 - 1;

        $d33 = r8[$i18];

        $i19 = i0 - 2;

        $d31 = r2[$i19];

        $d32 = 2.5 / $d31;

        $d34 = $d33 + $d32;

        r8[$i18] = $d34;

        goto label41;

     label39:
        $b9 = d9 cmpl d8;

        if $b9 <= 0 goto label40;

        $i13 = i0 - 1;

        $d28 = d8 / d103;

        r6[$i13] = $d28;

        $i15 = i0 - 1;

        $i14 = i0 - 2;

        $d29 = r2[$i14];

        $d30 = 5.0 / $d29;

        r8[$i15] = $d30;

        goto label41;

     label40:
        $i11 = i0 - 1;

        $i10 = i0 - 1;

        $d27 = r3[$i10];

        r6[$i11] = $d27;

        $i12 = i0 - 1;

        $r11 = r4[$i12];

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r8, 0, i0);

     label41:
        $r36 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r36.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r8);

        r5[i0] = $r36;

        $r37 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r37.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        r5[0] = $r37;

        return r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] secondDerivativeWithSensitivityCalculator(double[], double[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[], double[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r4, r6, r8, r9, r10, $r13, $r15, $r29, r40;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r3, r5, r7;
        int i0, $i1, $i2, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i34, $i35, $i36, $i41, $i43, $i44, $i45, $i46, $i49, $i50, $i51, $i52, $i53, i54, i55, i56, i57, $i58, i59, i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, i73, i74;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, d175, d176, $d177, d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r11, $r12, $r14, $r17, $r20, $r23, $r26, $r28, $r31, $r34, $r37, $r41, $r42, $r43, $r44;
        byte $b3, $b4, $b5, $b6, $b7, $b12, $b19, $b26, $b31, $b32, $b33, $b37, $b38, $b39, $b40, $b42, $b47, $b48, $b72;
        int[] $r16, $r19, $r22, $r25, $r30, $r33, $r36;
        java.lang.Double $r18, $r21, $r24, $r27, $r32, $r35, $r38;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        r4 := @parameter3: double[];

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        i0 = lengthof r1;

        $r11 = r3[0];

        r6 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i1 = i0 + 1;

        r7 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i1];

        r8 = newarray (double)[i0];

        i54 = 1;

     label01:
        $i2 = i0 - 1;

        if i54 >= $i2 goto label14;

        $d101 = r1[i54];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d101);

        r40 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r40, 0.0);

        $d102 = r6[i54];

        $d104 = 8.0 * $d102;

        $i34 = i54 - 1;

        $d103 = r2[$i34];

        $d111 = $d104 / $d103;

        $d105 = r1[i54];

        $d107 = 20.0 * $d105;

        $i35 = i54 - 1;

        $d106 = r2[$i35];

        $d109 = $d107 / $d106;

        $i36 = i54 - 1;

        $d108 = r2[$i36];

        $d110 = $d109 / $d108;

        d1 = $d111 - $d110;

        $d112 = r6[i54];

        $d114 = -8.0 * $d112;

        $d113 = r2[i54];

        $d121 = $d114 / $d113;

        $d115 = r1[i54];

        $d117 = 20.0 * $d115;

        $d116 = r2[i54];

        $d119 = $d117 / $d116;

        $d118 = r2[i54];

        $d120 = $d119 / $d118;

        d3 = $d121 - $d120;

        $d122 = d1 - d3;

        $d123 = staticinvoke <java.lang.Math: double abs(double)>($d122);

        $b37 = $d123 cmpg 1.0E-14;

        if $b37 >= 0 goto label06;

        $d153 = d1 * d0;

        $d151 = r4[i54];

        $d152 = d0 * $d151;

        $b47 = $d153 cmpl $d152;

        if $b47 <= 0 goto label06;

        $i53 = i54;

        $b48 = d1 cmpl d3;

        if $b48 < 0 goto label02;

        $d174 = d1;

        goto label03;

     label02:
        $d174 = d3;

     label03:
        r8[$i53] = $d174;

        i55 = 0;

     label04:
        if i55 >= i0 goto label05;

        $i51 = i54 + 1;

        $r37 = r3[$i51];

        $r36 = newarray (int)[1];

        $r36[0] = i55;

        $r38 = virtualinvoke $r37.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r36);

        $d166 = virtualinvoke $r38.<java.lang.Double: double doubleValue()>();

        $d172 = 4.0 * $d166;

        $i52 = i54 - 1;

        $d167 = r2[$i52];

        $d170 = 1.0 / $d167;

        $d168 = r2[i54];

        $d169 = 1.0 / $d168;

        $d171 = $d170 - $d169;

        $d173 = $d172 * $d171;

        r40[i55] = $d173;

        i55 = i55 + 1;

        goto label04;

     label05:
        $d164 = r40[i54];

        $i49 = i54 - 1;

        $d154 = r2[$i49];

        $d156 = 1.0 / $d154;

        $i50 = i54 - 1;

        $d155 = r2[$i50];

        $d161 = $d156 / $d155;

        $d157 = r2[i54];

        $d159 = 1.0 / $d157;

        $d158 = r2[i54];

        $d160 = $d159 / $d158;

        $d162 = $d161 + $d160;

        $d163 = 10.0 * $d162;

        $d165 = $d164 - $d163;

        r40[i54] = $d165;

        goto label13;

     label06:
        $b38 = d1 cmpl d3;

        if $b38 <= 0 goto label09;

        $d140 = d1 * d0;

        $d138 = r4[i54];

        $d139 = d0 * $d138;

        $b42 = $d140 cmpl $d139;

        if $b42 <= 0 goto label09;

        r8[i54] = d1;

        i56 = 0;

     label07:
        if i56 >= i0 goto label08;

        $i45 = i54 + 1;

        $r34 = r3[$i45];

        $r33 = newarray (int)[1];

        $r33[0] = i56;

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r33);

        $d147 = virtualinvoke $r35.<java.lang.Double: double doubleValue()>();

        $d149 = 8.0 * $d147;

        $i46 = i54 - 1;

        $d148 = r2[$i46];

        $d150 = $d149 / $d148;

        r40[i56] = $d150;

        i56 = i56 + 1;

        goto label07;

     label08:
        $d145 = r40[i54];

        $i43 = i54 - 1;

        $d141 = r2[$i43];

        $d143 = 20.0 / $d141;

        $i44 = i54 - 1;

        $d142 = r2[$i44];

        $d144 = $d143 / $d142;

        $d146 = $d145 - $d144;

        r40[i54] = $d146;

        goto label13;

     label09:
        $b39 = d1 cmpg d3;

        if $b39 >= 0 goto label12;

        $d127 = d3 * d0;

        $d125 = r4[i54];

        $d126 = d0 * $d125;

        $b40 = $d127 cmpl $d126;

        if $b40 <= 0 goto label12;

        r8[i54] = d3;

        i57 = 0;

     label10:
        if i57 >= i0 goto label11;

        $i41 = i54 + 1;

        $r31 = r3[$i41];

        $r30 = newarray (int)[1];

        $r30[0] = i57;

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r30);

        $d134 = virtualinvoke $r32.<java.lang.Double: double doubleValue()>();

        $d136 = -8.0 * $d134;

        $d135 = r2[i54];

        $d137 = $d136 / $d135;

        r40[i57] = $d137;

        i57 = i57 + 1;

        goto label10;

     label11:
        $d132 = r40[i54];

        $d128 = r2[i54];

        $d130 = 20.0 / $d128;

        $d129 = r2[i54];

        $d131 = $d130 / $d129;

        $d133 = $d132 - $d131;

        r40[i54] = $d133;

        goto label13;

     label12:
        $d124 = r4[i54];

        r8[i54] = $d124;

        $r28 = r5[i54];

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r29, 0, r40, 0, i0);

     label13:
        $i58 = i54 + 1;

        $r41 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r41.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r40);

        r7[$i58] = $r41;

        i54 = i54 + 1;

        goto label01;

     label14:
        $d6 = r1[0];

        d175 = staticinvoke <java.lang.Math: double signum(double)>($d6);

        r9 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r9, 0.0);

        $d7 = r6[0];

        $d9 = 8.0 * $d7;

        $d8 = r2[0];

        $d16 = $d9 / $d8;

        $d10 = r1[0];

        $d12 = 20.0 * $d10;

        $d11 = r2[0];

        $d14 = $d12 / $d11;

        $d13 = r2[0];

        $d15 = $d14 / $d13;

        d176 = $d16 - $d15;

        $d17 = r6[0];

        $d19 = -8.0 * $d17;

        $d18 = r2[0];

        $d26 = $d19 / $d18;

        $d20 = r1[0];

        $d22 = 20.0 * $d20;

        $d21 = r2[0];

        $d24 = $d22 / $d21;

        $d23 = r2[0];

        $d25 = $d24 / $d23;

        d2 = $d26 - $d25;

        $d27 = d176 - d2;

        $d28 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $b3 = $d28 cmpg 1.0E-14;

        if $b3 >= 0 goto label15;

        $d94 = d176 * d175;

        $d92 = r4[0];

        $d93 = d175 * $d92;

        $b33 = $d94 cmpl $d93;

        if $b33 <= 0 goto label15;

        r8[0] = d176;

        $d99 = r9[0];

        $d95 = r2[0];

        $d97 = 20.0 / $d95;

        $d96 = r2[0];

        $d98 = $d97 / $d96;

        $d100 = $d99 - $d98;

        r9[0] = $d100;

        goto label22;

     label15:
        $b4 = d176 cmpl d2;

        if $b4 <= 0 goto label18;

        $d81 = d176 * d175;

        $d79 = r4[0];

        $d80 = d175 * $d79;

        $b32 = $d81 cmpl $d80;

        if $b32 <= 0 goto label18;

        r8[0] = d176;

        i59 = 0;

     label16:
        if i59 >= i0 goto label17;

        $r26 = r3[1];

        $r25 = newarray (int)[1];

        $r25[0] = i59;

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r25);

        $d88 = virtualinvoke $r27.<java.lang.Double: double doubleValue()>();

        $d90 = 8.0 * $d88;

        $d89 = r2[0];

        $d91 = $d90 / $d89;

        r9[i59] = $d91;

        i59 = i59 + 1;

        goto label16;

     label17:
        $d86 = r9[0];

        $d82 = r2[0];

        $d84 = 20.0 / $d82;

        $d83 = r2[0];

        $d85 = $d84 / $d83;

        $d87 = $d86 - $d85;

        r9[0] = $d87;

        goto label22;

     label18:
        $b5 = d176 cmpg d2;

        if $b5 >= 0 goto label21;

        $d68 = d2 * d175;

        $d66 = r4[0];

        $d67 = d175 * $d66;

        $b31 = $d68 cmpl $d67;

        if $b31 <= 0 goto label21;

        r8[0] = d2;

        i60 = 0;

     label19:
        if i60 >= i0 goto label20;

        $r23 = r3[1];

        $r22 = newarray (int)[1];

        $r22[0] = i60;

        $r24 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r22);

        $d75 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $d77 = -8.0 * $d75;

        $d76 = r2[0];

        $d78 = $d77 / $d76;

        r9[i60] = $d78;

        i60 = i60 + 1;

        goto label19;

     label20:
        $d73 = r9[0];

        $d69 = r2[0];

        $d71 = 20.0 / $d69;

        $d70 = r2[0];

        $d72 = $d71 / $d70;

        $d74 = $d73 - $d72;

        r9[0] = $d74;

        goto label22;

     label21:
        $d29 = r4[0];

        r8[0] = $d29;

        $r12 = r5[0];

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r9, 0, i0);

     label22:
        $r42 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r42.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r9);

        r7[1] = $r42;

        $i61 = i0 - 1;

        $d177 = r1[$i61];

        d178 = staticinvoke <java.lang.Math: double signum(double)>($d177);

        r10 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r10, 0.0);

        $i62 = i0 - 1;

        $d179 = r6[$i62];

        $d180 = 8.0 * $d179;

        $i63 = i0 - 2;

        $d181 = r2[$i63];

        $d182 = $d180 / $d181;

        $i64 = i0 - 1;

        $d183 = r1[$i64];

        $d184 = 20.0 * $d183;

        $i65 = i0 - 2;

        $d185 = r2[$i65];

        $d186 = $d184 / $d185;

        $i66 = i0 - 2;

        $d187 = r2[$i66];

        $d188 = $d186 / $d187;

        d4 = $d182 - $d188;

        $i67 = i0 - 1;

        $d189 = r6[$i67];

        $d190 = -8.0 * $d189;

        $i68 = i0 - 2;

        $d191 = r2[$i68];

        $d192 = $d190 / $d191;

        $i69 = i0 - 1;

        $d193 = r1[$i69];

        $d194 = 20.0 * $d193;

        $i70 = i0 - 2;

        $d195 = r2[$i70];

        $d196 = $d194 / $d195;

        $i71 = i0 - 2;

        $d197 = r2[$i71];

        $d198 = $d196 / $d197;

        d5 = $d192 - $d198;

        $d199 = d4 - d5;

        $d200 = staticinvoke <java.lang.Math: double abs(double)>($d199);

        $b72 = $d200 cmpg 1.0E-14;

        if $b72 >= 0 goto label23;

        $d59 = d4 * d178;

        $i25 = i0 - 1;

        $d57 = r4[$i25];

        $d58 = d178 * $d57;

        $b26 = $d59 cmpl $d58;

        if $b26 <= 0 goto label23;

        $i27 = i0 - 1;

        r8[$i27] = d4;

        $i28 = i0 - 1;

        $d64 = r10[$i28];

        $i29 = i0 - 2;

        $d60 = r2[$i29];

        $d62 = 20.0 / $d60;

        $i30 = i0 - 2;

        $d61 = r2[$i30];

        $d63 = $d62 / $d61;

        $d65 = $d64 - $d63;

        r10[$i28] = $d65;

        goto label30;

     label23:
        $b6 = d4 cmpl d5;

        if $b6 <= 0 goto label26;

        $d46 = d4 * d178;

        $i18 = i0 - 1;

        $d44 = r4[$i18];

        $d45 = d178 * $d44;

        $b19 = $d46 cmpl $d45;

        if $b19 <= 0 goto label26;

        $i20 = i0 - 1;

        r8[$i20] = d4;

        i73 = 0;

     label24:
        if i73 >= i0 goto label25;

        $r20 = r3[i0];

        $r19 = newarray (int)[1];

        $r19[0] = i73;

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r19);

        $d53 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $d55 = 8.0 * $d53;

        $i24 = i0 - 2;

        $d54 = r2[$i24];

        $d56 = $d55 / $d54;

        r10[i73] = $d56;

        i73 = i73 + 1;

        goto label24;

     label25:
        $i21 = i0 - 1;

        $d51 = r10[$i21];

        $i22 = i0 - 2;

        $d47 = r2[$i22];

        $d49 = 20.0 / $d47;

        $i23 = i0 - 2;

        $d48 = r2[$i23];

        $d50 = $d49 / $d48;

        $d52 = $d51 - $d50;

        r10[$i21] = $d52;

        goto label30;

     label26:
        $b7 = d4 cmpg d5;

        if $b7 >= 0 goto label29;

        $d33 = d5 * d178;

        $i11 = i0 - 1;

        $d31 = r4[$i11];

        $d32 = d178 * $d31;

        $b12 = $d33 cmpl $d32;

        if $b12 <= 0 goto label29;

        $i13 = i0 - 1;

        r8[$i13] = d5;

        i74 = 0;

     label27:
        if i74 >= i0 goto label28;

        $r17 = r3[i0];

        $r16 = newarray (int)[1];

        $r16[0] = i74;

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r16);

        $d40 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        $d42 = -8.0 * $d40;

        $i17 = i0 - 2;

        $d41 = r2[$i17];

        $d43 = $d42 / $d41;

        r10[i74] = $d43;

        i74 = i74 + 1;

        goto label27;

     label28:
        $i14 = i0 - 1;

        $d38 = r10[$i14];

        $i15 = i0 - 2;

        $d34 = r2[$i15];

        $d36 = 20.0 / $d34;

        $i16 = i0 - 2;

        $d35 = r2[$i16];

        $d37 = $d36 / $d35;

        $d39 = $d38 - $d37;

        r10[$i14] = $d39;

        goto label30;

     label29:
        $i9 = i0 - 1;

        $i8 = i0 - 1;

        $d30 = r4[$i8];

        r8[$i9] = $d30;

        $i10 = i0 - 1;

        $r14 = r5[$i10];

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r10, 0, i0);

     label30:
        $r43 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r43.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r10);

        r7[i0] = $r43;

        $r44 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r44.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r8);

        r7[0] = $r44;

        return r7;
    }

    private boolean checkZero(double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator r0;
        double[] r1;
        int i0, i2;
        double $d0, $d1;
        byte $b1;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $d0 = r1[i2];

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $b1 = $d1 cmpg 1.0E-14;

        if $b1 >= 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double SMALL> = 1.0E-14;

        <com.opengamma.analytics.math.interpolation.NonnegativityPreservingQuinticSplineInterpolator: double EPS> = 1.0E-6;

        return;
    }
}
