public class com.opengamma.analytics.math.fft.JTransformsWrapper extends java.lang.Object
{
    private static final java.util.Map CACHE_1D;

    public void <init>()
    {
        com.opengamma.analytics.math.fft.JTransformsWrapper r0;

        r0 := @this: com.opengamma.analytics.math.fft.JTransformsWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] transform1DComplex(com.opengamma.analytics.math.number.ComplexNumber[])
    {
        com.opengamma.analytics.math.number.ComplexNumber[] r0, $r6;
        int i0;
        double[] r1;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "array of complex number");

        i0 = lengthof r0;

        r1 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: double[] packFull(com.opengamma.analytics.math.number.ComplexNumber[])>(r0);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void complexForward(double[])>(r1);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpackFull(double[])>(r1);

        return $r6;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] inverseTransform1DComplex(com.opengamma.analytics.math.number.ComplexNumber[], boolean)
    {
        com.opengamma.analytics.math.number.ComplexNumber[] r0, $r6;
        boolean z0;
        int i0;
        double[] r1;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber[];

        z0 := @parameter1: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "array of complex number");

        i0 = lengthof r0;

        r1 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: double[] packFull(com.opengamma.analytics.math.number.ComplexNumber[])>(r0);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void complexInverse(double[],boolean)>(r1, z0);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpackFull(double[])>(r1);

        return $r6;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] fullTransform1DReal(double[])
    {
        double[] r0, r1;
        int i0, $i1;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        com.opengamma.analytics.math.number.ComplexNumber[] $r6;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "array of doubles");

        i0 = lengthof r0;

        $i1 = 2 * i0;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r0, $i1);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void realForwardFull(double[])>(r1);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpackFull(double[])>(r1);

        return $r6;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] fullInverseTransform1DReal(double[], boolean)
    {
        double[] r0, r1;
        boolean z0;
        int i0, $i1;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        com.opengamma.analytics.math.number.ComplexNumber[] $r6;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: double[];

        z0 := @parameter1: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "array of doubles");

        i0 = lengthof r0;

        $i1 = 2 * i0;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r0, $i1);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void realInverseFull(double[],boolean)>(r1, z0);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpackFull(double[])>(r1);

        return $r6;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] transform1DReal(double[])
    {
        double[] r0, r1;
        int i0;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        com.opengamma.analytics.math.number.ComplexNumber[] $r6;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "array of doubles");

        i0 = lengthof r0;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r0, i0);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void realForward(double[])>(r1);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpack(double[])>(r1);

        return $r6;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber[] inverseTransform1DReal(double[], boolean)
    {
        double[] r0, r1;
        boolean z0;
        int i0;
        java.util.Map $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        com.opengamma.analytics.math.number.ComplexNumber[] $r6;
        edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D $r7, r11;

        r0 := @parameter0: double[];

        z0 := @parameter1: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "array of doubles");

        i0 = lengthof r0;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r0, i0);

        $r3 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r11 = (edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D) $r5;

        if r11 != null goto label1;

        $r7 = new edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D;

        specialinvoke $r7.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void <init>(int)>(i0);

        r11 = $r7;

        $r8 = <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label1:
        virtualinvoke r11.<edu.emory.mathcs.jtransforms.fft.DoubleFFT_1D: void realInverse(double[],boolean)>(r1, z0);

        $r6 = staticinvoke <com.opengamma.analytics.math.fft.JTransformsWrapper: com.opengamma.analytics.math.number.ComplexNumber[] unpack(double[])>(r1);

        return $r6;
    }

    private static double[] packFull(com.opengamma.analytics.math.number.ComplexNumber[])
    {
        com.opengamma.analytics.math.number.ComplexNumber[] r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        double[] r1;
        com.opengamma.analytics.math.number.ComplexNumber $r2, $r3;
        double $d0, $d1;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber[];

        i0 = lengthof r0;

        $i1 = 2 * i0;

        r1 = newarray (double)[$i1];

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i2 = 2 * i5;

        $r2 = r0[i5];

        $d0 = virtualinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        r1[$i2] = $d0;

        $i3 = 2 * i5;

        $i4 = $i3 + 1;

        $r3 = r0[i5];

        $d1 = virtualinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        r1[$i4] = $d1;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static com.opengamma.analytics.math.number.ComplexNumber[] unpackFull(double[])
    {
        double[] r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        com.opengamma.analytics.math.number.ComplexNumber[] r1;
        com.opengamma.analytics.math.number.ComplexNumber $r2;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        $i1 = i0 % 2;

        if $i1 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Had an odd number of entries: should be impossible");

        throw $r3;

     label1:
        $i2 = i0 / 2;

        r1 = newarray (com.opengamma.analytics.math.number.ComplexNumber)[$i2];

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $i4 = i5 / 2;

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = r0[i5];

        $i3 = i5 + 1;

        $d0 = r0[$i3];

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d1, $d0);

        r1[$i4] = $r2;

        i5 = i5 + 2;

        goto label2;

     label3:
        return r1;
    }

    private static com.opengamma.analytics.math.number.ComplexNumber[] unpack(double[])
    {
        double[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        com.opengamma.analytics.math.number.ComplexNumber $r1, $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        com.opengamma.analytics.math.number.ComplexNumber[] r7, r8;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        $i1 = i0 % 2;

        if $i1 != 0 goto label3;

        $i10 = i0 / 2;

        i16 = $i10 + 1;

        r7 = newarray (com.opengamma.analytics.math.number.ComplexNumber)[i16];

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d5 = r0[0];

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double)>($d5);

        r7[0] = $r4;

        $i11 = i0 / 2;

        $r5 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d6 = r0[1];

        specialinvoke $r5.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double)>($d6);

        r7[$i11] = $r5;

        i17 = 1;

     label1:
        $i12 = i0 / 2;

        if i17 >= $i12 goto label2;

        $r6 = new com.opengamma.analytics.math.number.ComplexNumber;

        $i13 = i17 * 2;

        $d8 = r0[$i13];

        $i14 = i17 * 2;

        $i15 = $i14 + 1;

        $d7 = r0[$i15];

        specialinvoke $r6.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d8, $d7);

        r7[i17] = $r6;

        i17 = i17 + 1;

        goto label1;

     label2:
        return r7;

     label3:
        $i2 = i0 - 1;

        $i3 = $i2 / 2;

        i18 = $i3 + 1;

        r8 = newarray (com.opengamma.analytics.math.number.ComplexNumber)[i18];

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = r0[0];

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double)>($d0);

        r8[0] = $r1;

        $i5 = i18 - 1;

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $i4 = i0 - 1;

        $d2 = r0[$i4];

        $d1 = r0[1];

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d1);

        r8[$i5] = $r2;

        i19 = 1;

     label4:
        $i6 = i18 - 2;

        if i19 >= $i6 goto label5;

        $r3 = new com.opengamma.analytics.math.number.ComplexNumber;

        $i7 = i19 * 2;

        $d4 = r0[$i7];

        $i8 = i19 * 2;

        $i9 = $i8 + 1;

        $d3 = r0[$i9];

        specialinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d3);

        r8[i19] = $r3;

        i19 = i19 + 1;

        goto label4;

     label5:
        return r8;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.opengamma.analytics.math.fft.JTransformsWrapper: java.util.Map CACHE_1D> = $r0;

        return;
    }
}
