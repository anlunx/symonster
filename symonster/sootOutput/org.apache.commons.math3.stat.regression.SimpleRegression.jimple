public class org.apache.commons.math3.stat.regression.SimpleRegression extends java.lang.Object implements java.io.Serializable, org.apache.commons.math3.stat.regression.UpdatingMultipleLinearRegression
{
    private static final long serialVersionUID;
    private double sumX;
    private double sumXX;
    private double sumY;
    private double sumYY;
    private double sumXY;
    private long n;
    private double xbar;
    private double ybar;
    private final boolean hasIntercept;

    public void <init>()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = 0L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept> = z0;

        return;
    }

    public void addData(double, double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42;
        long $l0, $l2, $l3, $l4, $l5, $l6;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = d1;

        goto label2;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label2;

        $l4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d19 = (double) $l4;

        d2 = 1.0 + $d19;

        $l5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d22 = (double) $l5;

        $l6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d20 = (double) $l6;

        $d21 = 1.0 + $d20;

        d3 = $d22 / $d21;

        $d23 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d4 = d0 - $d23;

        $d24 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d5 = d1 - $d24;

        $d27 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d25 = d4 * d4;

        $d26 = $d25 * d3;

        $d28 = $d27 + $d26;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d28;

        $d31 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d29 = d5 * d5;

        $d30 = $d29 * d3;

        $d32 = $d31 + $d30;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d32;

        $d35 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d33 = d4 * d5;

        $d34 = $d33 * d3;

        $d36 = $d35 + $d34;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d36;

        $d38 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d37 = d4 / d2;

        $d39 = $d38 + $d37;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d39;

        $d41 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d40 = d5 / d2;

        $d42 = $d41 + $d40;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d42;

     label2:
        $z1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z1 != 0 goto label3;

        $d11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d10 = d0 * d0;

        $d12 = $d11 + $d10;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d12;

        $d14 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d13 = d1 * d1;

        $d15 = $d14 + $d13;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d15;

        $d17 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d16 = d0 * d1;

        $d18 = $d17 + $d16;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d18;

     label3:
        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d7 = $d6 + d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = $d7;

        $d8 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d9 = $d8 + d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = $d9;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l3 = $l2 + 1L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l3;

        return;
    }

    public void append(org.apache.commons.math3.stat.regression.SimpleRegression)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0, r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $d45 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d45;

        $d46 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d46;

        $d47 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d47;

        $d48 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d48;

        $d49 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d49;

        goto label3;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label2;

        $l2 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d14 = (double) $l2;

        $l4 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l5 = $l4 + $l3;

        $d13 = (double) $l5;

        d0 = $d14 / $d13;

        $l7 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l6 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l8 = $l7 * $l6;

        $d16 = (double) $l8;

        $l10 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l9 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l11 = $l10 + $l9;

        $d15 = (double) $l11;

        d1 = $d16 / $d15;

        $d18 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d17 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d2 = $d18 - $d17;

        $d20 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d19 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d3 = $d20 - $d19;

        $d25 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d23 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d21 = d2 * d2;

        $d22 = $d21 * d1;

        $d24 = $d23 + $d22;

        $d26 = $d25 + $d24;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d26;

        $d31 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d29 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d27 = d3 * d3;

        $d28 = $d27 * d1;

        $d30 = $d29 + $d28;

        $d32 = $d31 + $d30;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d32;

        $d37 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d35 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d33 = d2 * d3;

        $d34 = $d33 * d1;

        $d36 = $d35 + $d34;

        $d38 = $d37 + $d36;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d38;

        $d40 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d39 = d2 * d0;

        $d41 = $d40 + $d39;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d41;

        $d43 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d42 = d3 * d0;

        $d44 = $d43 + $d42;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d44;

        goto label3;

     label2:
        $d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d4 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d6 = $d5 + $d4;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d6;

        $d8 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d7 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d9 = $d8 + $d7;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d9;

        $d11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d10 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d12 = $d11 + $d10;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d12;

     label3:
        $d50 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d51 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d52 = $d50 + $d51;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = $d52;

        $d53 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d54 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d55 = $d53 + $d54;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = $d55;

        $l12 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l13 = r1.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l14 = $l12 + $l13;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l14;

        return;
    }

    public void removeData(double, double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, d49, d50;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $l5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d25 = (double) $l5;

        d49 = $d25 - 1.0;

        $l6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d28 = (double) $l6;

        $l7 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d26 = (double) $l7;

        $d27 = $d26 - 1.0;

        d2 = $d28 / $d27;

        $d29 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        d3 = d0 - $d29;

        $d30 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        d4 = d1 - $d30;

        $d33 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d31 = d3 * d3;

        $d32 = $d31 * d2;

        $d34 = $d33 - $d32;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d34;

        $d37 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d35 = d4 * d4;

        $d36 = $d35 * d2;

        $d38 = $d37 - $d36;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d38;

        $d41 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d39 = d3 * d4;

        $d40 = $d39 * d2;

        $d42 = $d41 - $d40;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d42;

        $d44 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d43 = d3 / d49;

        $d45 = $d44 - $d43;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d45;

        $d47 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d46 = d4 / d49;

        $d48 = $d47 - $d46;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d48;

        goto label2;

     label1:
        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d5 = (double) $l2;

        d50 = $d5 - 1.0;

        $d7 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d6 = d0 * d0;

        $d8 = $d7 - $d6;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = $d8;

        $d10 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d9 = d1 * d1;

        $d11 = $d10 - $d9;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = $d11;

        $d13 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d12 = d0 * d1;

        $d14 = $d13 - $d12;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = $d14;

        $d16 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d15 = d0 / d50;

        $d17 = $d16 - $d15;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar> = $d17;

        $d19 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $d18 = d1 / d50;

        $d20 = $d19 - $d18;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar> = $d20;

     label2:
        $d21 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d22 = $d21 - d0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = $d22;

        $d23 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d24 = $d23 - d1;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = $d24;

        $l3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l4 = $l3 - 1L;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = $l4;

     label3:
        return;
    }

    public void addData(double[][]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] r1;
        int $i0, $i1, $i2, i3;
        double[] $r2, $r3, $r4, $r7;
        double $d0, $d1;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: double[][];

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r2 = r1[i3];

        $i1 = lengthof $r2;

        if $i1 >= 2 goto label2;

        $r5 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION>;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r1[i3];

        $i2 = lengthof $r7;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r10;

        specialinvoke $r5.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r6);

        throw $r5;

     label2:
        $r3 = r1[i3];

        $d1 = $r3[0];

        $r4 = r1[i3];

        $d0 = $r4[1];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d1, $d0);

        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void addObservation(double[], double) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[] r1;
        double d0, $d1;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        int $i1, $i2;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label4;

     label1:
        $r2 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_REGRESSION_OBSERVATION>;

        $r3 = newarray (java.lang.Object)[2];

        if r1 == null goto label2;

        $i2 = lengthof r1;

        goto label3;

     label2:
        $i2 = 0;

     label3:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[1] = $r6;

        specialinvoke $r2.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label4:
        $d1 = r1[0];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d1, d0);

        return;
    }

    public void addObservations(double[][], double[]) throws org.apache.commons.math3.stat.regression.ModelSpecificationException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] r1;
        double[] r2, $r8, $r14, $r15;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r3, $r9;
        java.lang.Object[] $r4, $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r11;
        java.lang.Integer $r6, $r7, $r12, $r13;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        double $d0, $d1;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        if r1 == null goto label01;

        if r2 == null goto label01;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label06;

     label01:
        $r3 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r4 = newarray (java.lang.Object)[2];

        if r1 != null goto label02;

        $i7 = 0;

        goto label03;

     label02:
        $i7 = lengthof r1;

     label03:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r4[0] = $r6;

        if r2 != null goto label04;

        $i8 = 0;

        goto label05;

     label04:
        $i8 = lengthof r2;

     label05:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r4[1] = $r7;

        specialinvoke $r3.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label06:
        z0 = 1;

        i9 = 0;

     label07:
        $i4 = lengthof r1;

        if i9 >= $i4 goto label10;

        $r14 = r1[i9];

        if $r14 == null goto label08;

        $r15 = r1[i9];

        $i6 = lengthof $r15;

        if $i6 != 0 goto label09;

     label08:
        z0 = 0;

     label09:
        i9 = i9 + 1;

        goto label07;

     label10:
        if z0 != 0 goto label11;

        $r9 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS>;

        $r10 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10[1] = $r13;

        specialinvoke $r9.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label11:
        i10 = 0;

     label12:
        $i5 = lengthof r1;

        if i10 >= $i5 goto label13;

        $r8 = r1[i10];

        $d1 = $r8[0];

        $d0 = r2[i10];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d1, $d0);

        i10 = i10 + 1;

        goto label12;

     label13:
        return;
    }

    public void removeData(double[][])
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double[][] r1;
        int $i0, i3;
        long $l1;
        byte $b2;
        double[] $r2, $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: double[][];

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label2;

        $l1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $r2 = r1[i3];

        $d1 = $r2[0];

        $r3 = r1[i3];

        $d0 = $r3[1];

        virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: void removeData(double,double)>($d1, $d0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n> = 0L;

        return;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        return $l0;
    }

    public double predict(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d3 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept(double)>(d1);

        $d4 = d1 * d0;

        $d5 = $d3 + $d4;

        return $d5;

     label1:
        $d2 = d1 * d0;

        return $d2;
    }

    public double getIntercept()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept(double)>($d0);

        goto label2;

     label1:
        $d1 = 0.0;

     label2:
        return $d1;
    }

    public boolean hasIntercept()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        return $z0;
    }

    public double getSlope()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1, $b2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b2 = $d1 cmpg 4.9E-323;

        if $b2 >= 0 goto label2;

        return #NaN;

     label2:
        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double getSumSquaredErrors()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d3 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d4 = $d3 / $d2;

        $d6 = $d5 - $d4;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.0, $d6);

        return $d7;
    }

    public double getTotalSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        return $d0;
    }

    public double getXSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        return $d0;
    }

    public double getSumOfCrossProducts()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        return $d0;
    }

    public double getRegressionSumSquares()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = specialinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getRegressionSumSquares(double)>($d0);

        return $d1;
    }

    public double getMeanSquareError()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0, $l2, $l3, $l4, $l5;
        byte $b1;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label2;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $l4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l5 = $l4 - 2L;

        $d3 = (double) $l5;

        $d4 = $d2 / $d3;

        goto label3;

     label2:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l3 = $l2 - 1L;

        $d1 = (double) $l3;

        $d4 = $d0 / $d1;

     label3:
        return $d4;
    }

    public double getR()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getRSquare()>();

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        d2 = neg d2;

     label1:
        return d2;
    }

    public double getRSquare()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getTotalSumSquares()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $d2 = d0 - $d1;

        $d3 = $d2 / d0;

        return $d3;
    }

    public double getInterceptStdErr()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d1 = (double) $l0;

        $d7 = 1.0 / $d1;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d5 = $d3 * $d2;

        $d4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d6 = $d5 / $d4;

        $d8 = $d7 + $d6;

        $d9 = $d0 * $d8;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d9);

        return $d10;
    }

    public double getSlopeStdErr()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        return $d3;
    }

    public double getSlopeConfidenceInterval() throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeConfidenceInterval(double)>(0.05);

        return $d0;
    }

    public double getSlopeConfidenceInterval(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l4, $l5;
        byte $b1, $b2, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.distribution.TDistribution $r7;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $b2 = d0 cmpl 1.0;

        if $b2 >= 0 goto label2;

        $b3 = d0 cmpg 0.0;

        if $b3 > 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIGNIFICANCE_LEVEL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label3:
        $r7 = new org.apache.commons.math3.distribution.TDistribution;

        $l4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l5 = $l4 - 2L;

        $d1 = (double) $l5;

        specialinvoke $r7.<org.apache.commons.math3.distribution.TDistribution: void <init>(double)>($d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $d3 = d0 / 2.0;

        $d4 = 1.0 - $d3;

        $d5 = virtualinvoke $r7.<org.apache.commons.math3.distribution.TDistribution: double inverseCumulativeProbability(double)>($d4);

        $d6 = $d2 * $d5;

        return $d6;
    }

    public double getSignificance()
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        long $l0, $l2, $l3;
        byte $b1;
        org.apache.commons.math3.distribution.TDistribution $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $r2 = new org.apache.commons.math3.distribution.TDistribution;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l3 = $l2 - 2L;

        $d0 = (double) $l3;

        specialinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: void <init>(double)>($d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $d4 = $d2 / $d3;

        $d5 = virtualinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d4);

        $d6 = 1.0 - $d5;

        $d7 = 2.0 * $d6;

        return $d7;
    }

    private double getIntercept(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d2 = d0 * $d1;

        $d5 = $d3 - $d2;

        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d4 = (double) $l0;

        $d6 = $d5 / $d4;

        return $d6;

     label1:
        return 0.0;
    }

    private double getRegressionSumSquares(double)
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $d2 = d0 * d0;

        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d3 = $d2 * $d1;

        return $d3;
    }

    public org.apache.commons.math3.stat.regression.RegressionResults regress() throws org.apache.commons.math3.stat.regression.ModelSpecificationException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, d50;
        boolean $z0, $z1;
        long $l0, $l2, $l3, $l4, $l7, $l8, $l9, $l10, $l11, $l12;
        byte $b1, $b5, $b6;
        double[] $r2, $r3, $r6, $r7, $r12, $r13, $r16, $r17;
        org.apache.commons.math3.stat.regression.RegressionResults $r4, $r8, $r14, $r18;
        double[][] $r5, $r9, $r15, $r19;
        org.apache.commons.math3.exception.NoDataException $r10, $r20;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11, $r21;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 == 0 goto label3;

        $l4 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b5 = $l4 cmp 3L;

        if $b5 >= 0 goto label1;

        $r20 = new org.apache.commons.math3.exception.NoDataException;

        $r21 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_REGRESSION>;

        specialinvoke $r20.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r21);

        throw $r20;

     label1:
        $d11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        $d13 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b6 = $d12 cmpl $d13;

        if $b6 <= 0 goto label2;

        $r16 = newarray (double)[2];

        $d24 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getIntercept()>();

        $r16[0] = $d24;

        $d25 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSlope()>();

        $r16[1] = $d25;

        d50 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $d31 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d27 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d26 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d29 = $d27 * $d26;

        $l10 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d28 = (double) $l10;

        $d30 = $d29 / $d28;

        d0 = $d31 + $d30;

        $r17 = newarray (double)[3];

        $d33 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d32 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d35 = $d33 * $d32;

        $d34 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d38 = $d35 / $d34;

        $l11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d36 = (double) $l11;

        $d37 = 1.0 / $d36;

        $d39 = $d38 + $d37;

        $d40 = d50 * $d39;

        $r17[0] = $d40;

        $d41 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double xbar>;

        $d42 = neg $d41;

        $d44 = $d42 * d50;

        $d43 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d45 = $d44 / $d43;

        $r17[1] = $d45;

        $d46 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d47 = d50 / $d46;

        $r17[2] = $d47;

        $r18 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r19 = newarray (double[])[1];

        $r19[0] = $r17;

        $l12 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d48 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d49 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r18.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r16, $r19, 1, $l12, 2, $d48, d0, $d49, 1, 0);

        return $r18;

     label2:
        $r12 = newarray (double)[2];

        $d15 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $l7 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d14 = (double) $l7;

        $d16 = $d15 / $d14;

        $r12[0] = $d16;

        $r12[1] = #NaN;

        $r13 = newarray (double)[3];

        $d19 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $l8 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d17 = (double) $l8;

        $d18 = $d17 - 1.0;

        $d20 = $d19 / $d18;

        $r13[0] = $d20;

        $r13[1] = #NaN;

        $r13[2] = #NaN;

        $r14 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r15 = newarray (double[])[1];

        $r15[0] = $r13;

        $l9 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d21 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d22 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d23 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r14.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r12, $r15, 1, $l9, 1, $d21, $d22, $d23, 1, 0);

        return $r14;

     label3:
        $l0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label4;

        $r10 = new org.apache.commons.math3.exception.NoDataException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_DATA_REGRESSION>;

        specialinvoke $r10.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r11);

        throw $r10;

     label4:
        $d1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 != 0 goto label5;

        $r6 = newarray (double)[1];

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $d3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d4 = $d2 / $d3;

        $r6[0] = $d4;

        $r7 = newarray (double)[1];

        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d7 = $d6 / $d5;

        $r7[0] = $d7;

        $r8 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r9 = newarray (double[])[1];

        $r9[0] = $r6;

        $l3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d8 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d9 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $d10 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        specialinvoke $r8.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r7, $r9, 1, $l3, 1, $d8, $d9, $d10, 0, 0);

        return $r8;

     label5:
        $r2 = newarray (double)[1];

        $r2[0] = #NaN;

        $r3 = newarray (double)[1];

        $r3[0] = #NaN;

        $r4 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r5 = newarray (double[])[1];

        $r5[0] = $r2;

        $l2 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r3, $r5, 1, $l2, 1, #NaN, #NaN, #NaN, 0, 0);

        return $r4;
    }

    public org.apache.commons.math3.stat.regression.RegressionResults regress(int[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.regression.SimpleRegression r0;
        int[] r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, d36;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4, $r37, $r41;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r38, $r40;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math3.stat.regression.RegressionResults $r6, $r13, $r17, $r21, $r27;
        org.apache.commons.math3.exception.OutOfRangeException $r7, $r23, $r28, $r32;
        java.lang.Integer $r8, $r9, $r10, $r24, $r25, $r26, $r29, $r30, $r31, $r33, $r34, $r35, $r42;
        long $l8, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21;
        double[] $r11, $r12, $r15, $r16, $r19, $r20;
        double[][] $r14, $r18, $r22;
        org.apache.commons.math3.stat.regression.ModelSpecificationException $r36, $r39;
        byte $b30;

        r0 := @this: org.apache.commons.math3.stat.regression.SimpleRegression;

        r1 := @parameter0: int[];

        if r1 == null goto label01;

        $i0 = lengthof r1;

        if $i0 != 0 goto label02;

     label01:
        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label02:
        $i1 = lengthof r1;

        if $i1 > 2 goto label03;

        $i3 = lengthof r1;

        if $i3 <= 1 goto label06;

        $z3 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z3 != 0 goto label06;

     label03:
        $r39 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r40 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SIZE_EXCEEDS_MAX_VARIABLES>;

        $r41 = newarray (java.lang.Object)[1];

        $i2 = lengthof r1;

        if $i2 <= 1 goto label04;

        $z0 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z0 != 0 goto label04;

        $b30 = 1;

        goto label05;

     label04:
        $b30 = 2;

     label05:
        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b30);

        $r41[0] = $r42;

        specialinvoke $r39.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r40, $r41);

        throw $r39;

     label06:
        $z1 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: boolean hasIntercept>;

        if $z1 == 0 goto label15;

        $i6 = lengthof r1;

        if $i6 != 2 goto label10;

        $i24 = r1[0];

        if $i24 != 1 goto label07;

        $r36 = new org.apache.commons.math3.stat.regression.ModelSpecificationException;

        $r38 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_INCREASING_SEQUENCE>;

        $r37 = newarray (java.lang.Object)[0];

        specialinvoke $r36.<org.apache.commons.math3.stat.regression.ModelSpecificationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r38, $r37);

        throw $r36;

     label07:
        $i25 = r1[0];

        if $i25 == 0 goto label08;

        $r32 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i28 = r1[0];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r32.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r33, $r34, $r35);

        throw $r32;

     label08:
        $i26 = r1[1];

        if $i26 == 1 goto label09;

        $r28 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i27 = r1[0];

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i27);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r28.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r29, $r30, $r31);

        throw $r28;

     label09:
        $r27 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: org.apache.commons.math3.stat.regression.RegressionResults regress()>();

        return $r27;

     label10:
        $i7 = r1[0];

        if $i7 == 1 goto label11;

        $i22 = r1[0];

        if $i22 == 0 goto label11;

        $r23 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i23 = r1[0];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r23.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r24, $r25, $r26);

        throw $r23;

     label11:
        $d6 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d5 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d8 = $d6 * $d5;

        $l8 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d7 = (double) $l8;

        d0 = $d8 / $d7;

        $d9 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        d1 = $d9 + d0;

        $i9 = r1[0];

        if $i9 != 0 goto label12;

        $r19 = newarray (double)[1];

        $d30 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        $l17 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l19 = $l17 - 1L;

        $l18 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l20 = $l19 * $l18;

        $d29 = (double) $l20;

        $d31 = $d30 / $d29;

        $r19[0] = $d31;

        $r20 = newarray (double)[1];

        $d32 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double ybar>;

        $r20[0] = $d32;

        $r21 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r22 = newarray (double[])[1];

        $r22[0] = $r19;

        $l21 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d35 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d34 = d1 + d0;

        $d33 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumYY>;

        specialinvoke $r21.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r20, $r22, 1, $l21, 1, $d35, $d34, $d33, 1, 0);

        return $r21;

     label12:
        $i10 = r1[0];

        if $i10 != 1 goto label14;

        $d15 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXX>;

        $d11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d10 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d13 = $d11 * $d10;

        $l11 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d12 = (double) $l11;

        $d14 = $d13 / $d12;

        d36 = $d15 + $d14;

        $d21 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumXY>;

        $d17 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumX>;

        $d16 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        $d19 = $d17 * $d16;

        $l12 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d18 = (double) $l12;

        $d20 = $d19 / $d18;

        d2 = $d21 + $d20;

        $d22 = d2 * d2;

        $d23 = $d22 / d36;

        $d24 = d1 - $d23;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(0.0, $d24);

        $l13 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $l14 = $l13 - 1L;

        $d25 = (double) $l14;

        d4 = d3 / $d25;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d36);

        if $z2 != 0 goto label13;

        $r15 = newarray (double)[1];

        $d26 = d4 / d36;

        $r15[0] = $d26;

        $r16 = newarray (double)[1];

        $d27 = d2 / d36;

        $r16[0] = $d27;

        $r17 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r18 = newarray (double[])[1];

        $r18[0] = $r15;

        $l16 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        $d28 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: double sumY>;

        specialinvoke $r17.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r16, $r18, 1, $l16, 1, $d28, d1, d3, 0, 0);

        return $r17;

     label13:
        $r11 = newarray (double)[1];

        $r11[0] = #NaN;

        $r12 = newarray (double)[1];

        $r12[0] = #NaN;

        $r13 = new org.apache.commons.math3.stat.regression.RegressionResults;

        $r14 = newarray (double[])[1];

        $r14[0] = $r11;

        $l15 = r0.<org.apache.commons.math3.stat.regression.SimpleRegression: long n>;

        specialinvoke $r13.<org.apache.commons.math3.stat.regression.RegressionResults: void <init>(double[],double[][],boolean,long,int,double,double,double,boolean,boolean)>($r12, $r14, 1, $l15, 1, #NaN, #NaN, #NaN, 0, 0);

        return $r13;

     label14:
        goto label17;

     label15:
        $i4 = r1[0];

        if $i4 == 0 goto label16;

        $r7 = new org.apache.commons.math3.exception.OutOfRangeException;

        $i5 = r1[0];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r7.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r8, $r9, $r10);

        throw $r7;

     label16:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.stat.regression.SimpleRegression: org.apache.commons.math3.stat.regression.RegressionResults regress()>();

        return $r6;

     label17:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.regression.SimpleRegression: long serialVersionUID> = -3004689053607543335L;

        return;
    }
}
