public class org.apache.commons.math3.linear.SparseFieldVector extends java.lang.Object implements org.apache.commons.math3.linear.FieldVector, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.math3.Field field;
    private final org.apache.commons.math3.util.OpenIntToFieldHashMap entries;
    private final int virtualSize;

    public void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.Field r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.Field,int)>(r1, 0);

        return;
    }

    public void <init>(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.Field r1;
        int i0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field> = r1;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize> = i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field)>(r1);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r2;

        return;
    }

    protected void <init>(org.apache.commons.math3.linear.SparseFieldVector, int)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1;
        int i0, $i1, $i2;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field> = $r2;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        $i2 = $i1 + i0;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize> = $i2;

        $r3 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r4 = r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.util.OpenIntToFieldHashMap)>($r4);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r3;

        return;
    }

    public void <init>(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.Field r1;
        int i0, i1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field> = r1;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize> = i0;

        $r2 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field,int)>(r1, i1);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r2;

        return;
    }

    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2;
        org.apache.commons.math3.FieldElement r3;
        int $i0, $i1, i2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field> = r1;

        $i0 = lengthof r2;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize> = $i0;

        $r4 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        specialinvoke $r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.Field)>(r1);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r4;

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        r3 = r2[i2];

        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>(i2, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.commons.math3.linear.SparseFieldVector)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1;
        org.apache.commons.math3.Field $r2;
        int $i0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field> = $r2;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize> = $i0;

        $r3 = new org.apache.commons.math3.util.OpenIntToFieldHashMap;

        $r4 = specialinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()>();

        specialinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: void <init>(org.apache.commons.math3.util.OpenIntToFieldHashMap)>($r4);

        r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries> = $r3;

        return;
    }

    private org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        return $r1;
    }

    public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.SparseFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1, r2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        int i0, $i1;
        org.apache.commons.math3.FieldElement r4, $r9, $r11;
        org.apache.commons.math3.linear.FieldVector $r5;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r6, $r7, $r8;
        boolean $z0, $z1;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i1);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        r2 = (org.apache.commons.math3.linear.SparseFieldVector) $r5;

        $r6 = specialinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()>();

        r3 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        r4 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r7 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $z1 = virtualinvoke $r7.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int)>(i0);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>(i0);

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r4);

        $r11 = (org.apache.commons.math3.FieldElement) $r10;

        virtualinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i0, $r11);

        goto label3;

     label2:
        virtualinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i0, r4);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.SparseFieldVector)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1, $r4;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        $r4 = new org.apache.commons.math3.linear.SparseFieldVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector,int)>(r0, $i0);

        $r5 = r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $i2 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        $i3 = $i1 + $i2;

        $r6 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        virtualinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i3, $r6);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.FieldVector)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r3, $r5;
        org.apache.commons.math3.linear.FieldVector r1, $r6;
        int i0, $i1, $i2, i3;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseFieldVector;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.commons.math3.linear.SparseFieldVector) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.SparseFieldVector)>($r5);

        return $r6;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $r3 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector,int)>(r0, i0);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $i1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        $i2 = i3 + $i1;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.FieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i2, $r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r3;
        org.apache.commons.math3.FieldElement r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r3 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector,int)>(r0, 1);

        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        interfaceinvoke $r3.<org.apache.commons.math3.linear.FieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i0, r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector copy()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r1 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r1.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector)>(r0);

        return $r1;
    }

    public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r2;
        int $i0, $i1;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4, $r8, $r9;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6, $r7, r10;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r10 = (org.apache.commons.math3.FieldElement) $r4;

        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r2 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i1);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r8 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r7);

        $r9 = interfaceinvoke r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r8);

        r10 = (org.apache.commons.math3.FieldElement) $r9;

        goto label1;

     label2:
        return r10;
    }

    public org.apache.commons.math3.linear.FieldVector ebeDivide(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r4;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6, $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector)>(r0);

        $r5 = $r4.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r6 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i2);

        $r8 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r7);

        $r9 = (org.apache.commons.math3.FieldElement) $r8;

        virtualinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i1, $r9);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math3.linear.FieldVector ebeMultiply(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r4;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6, $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector)>(r0);

        $r5 = $r4.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r6 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i2);

        $r8 = interfaceinvoke $r6.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r7);

        $r9 = (org.apache.commons.math3.FieldElement) $r8;

        virtualinvoke $r4.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i1, $r9);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math3.FieldElement[] getData()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement[] $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

        return $r1;
    }

    public int getDimension()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        return $i0;
    }

    public org.apache.commons.math3.FieldElement getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>(i0);

        $r1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>(i0);

        return $r2;
    }

    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.Field $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        return $r1;
    }

    public org.apache.commons.math3.linear.FieldVector getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r2;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6;
        org.apache.commons.math3.exception.NotPositiveException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        $r7 = new org.apache.commons.math3.exception.NotPositiveException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r7.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r8, $r9);

        throw $r7;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>(i0);

        $i4 = i0 + i1;

        $i5 = $i4 - 1;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>($i5);

        $r3 = new org.apache.commons.math3.linear.SparseFieldVector;

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.Field,int)>($r4, i1);

        i2 = i0 + i1;

        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r2 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label2:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        i3 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        if i3 < i0 goto label3;

        if i3 >= i2 goto label3;

        $i6 = i3 - i0;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        virtualinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i6, $r6);

     label3:
        goto label2;

     label4:
        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector mapAdd(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.linear.FieldVector $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r2, $r4;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i1);

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.math3.FieldElement) $r3;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i1, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapDivide(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.linear.FieldVector $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r5, $r7;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3, $r4;
        boolean $z0;
        int $i0;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r2 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $i0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r5 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>($i0, $r7);

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapInv() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapInvToSelf()>();

        return $r2;
    }

    public org.apache.commons.math3.linear.FieldVector mapInvToSelf() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int $i0, i1;
        org.apache.commons.math3.Field $r1;
        java.lang.Object $r2, $r5;
        org.apache.commons.math3.FieldElement $r3, $r4, $r6;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        $r3 = (org.apache.commons.math3.FieldElement) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i1);

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r4);

        $r6 = (org.apache.commons.math3.FieldElement) $r5;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i1, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.linear.FieldVector $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r5, $r7;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r3, $r4;
        boolean $z0;
        int $i0;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r2 = virtualinvoke $r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $i0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r5 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>($i0, $r7);

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapSubtract(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.linear.FieldVector $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r4, $r6;
        org.apache.commons.math3.Field $r2;
        java.lang.Object $r3, $r5;
        org.apache.commons.math3.linear.FieldVector $r7;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r4 = (org.apache.commons.math3.FieldElement) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>(r1);

        $r6 = (org.apache.commons.math3.FieldElement) $r5;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement)>($r6);

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.SparseFieldVector)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3, r4;
        org.apache.commons.math3.linear.SparseFieldMatrix $r5;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r7, $r8;
        boolean $z0, $z1;
        org.apache.commons.math3.FieldElement $r9, $r10, $r12;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        i0 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        $r5 = new org.apache.commons.math3.linear.SparseFieldMatrix;

        $r6 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $i1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        specialinvoke $r5.<org.apache.commons.math3.linear.SparseFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i1, i0);

        $r7 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r3 = virtualinvoke $r7.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $r8 = r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r4 = virtualinvoke $r8.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label2:
        $z1 = virtualinvoke r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $i3 = virtualinvoke r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r9 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r10 = virtualinvoke r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r10);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        virtualinvoke $r5.<org.apache.commons.math3.linear.SparseFieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>($i2, $i3, $r12);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r5;
    }

    public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.FieldVector)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r11;
        org.apache.commons.math3.linear.FieldVector r1;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        org.apache.commons.math3.FieldElement r4, $r8, $r10;
        boolean $z0, $z1;
        org.apache.commons.math3.linear.SparseFieldMatrix $r5;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r7;
        java.lang.Object $r9;
        org.apache.commons.math3.linear.FieldMatrix $r12;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseFieldVector;

        if $z0 == 0 goto label1;

        $r11 = (org.apache.commons.math3.linear.SparseFieldVector) r1;

        $r12 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.SparseFieldVector)>($r11);

        return $r12;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $r5 = new org.apache.commons.math3.linear.SparseFieldMatrix;

        $r6 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $i2 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        specialinvoke $r5.<org.apache.commons.math3.linear.SparseFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, $i2, i0);

        $r7 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r3 = virtualinvoke $r7.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label2:
        $z1 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        i1 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        r4 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r9 = interfaceinvoke r4.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r8);

        $r10 = (org.apache.commons.math3.FieldElement) $r9;

        interfaceinvoke $r5.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i1, i3, $r10);

        i3 = i3 + 1;

        goto label3;

     label4:
        goto label2;

     label5:
        return $r5;
    }

    public org.apache.commons.math3.linear.FieldVector projection(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVector r1, $r6;
        int $i0;
        org.apache.commons.math3.FieldElement $r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r3);

        $r5 = (org.apache.commons.math3.FieldElement) $r4;

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement)>($r5);

        return $r6;
    }

    public void set(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setEntry(int, org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>(i0);

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement put(int,org.apache.commons.math3.FieldElement)>(i0, r1);

        return;
    }

    public void setSubVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>(i0);

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $i3 = i0 + $i2;

        $i4 = $i3 - 1;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndex(int)>($i4);

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        $i5 = i6 + i0;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i6);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>($i5, $r2);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math3.linear.SparseFieldVector subtract(org.apache.commons.math3.linear.SparseFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r1, r2;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r3;
        int i0, $i1;
        org.apache.commons.math3.linear.FieldVector $r4;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5, $r6, $r13;
        boolean $z0, $z1;
        org.apache.commons.math3.Field $r7;
        java.lang.Object $r8, $r11, $r16;
        org.apache.commons.math3.FieldElement $r9, $r10, $r12, $r14, $r15, $r17;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.SparseFieldVector;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>($i1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector copy()>();

        r2 = (org.apache.commons.math3.linear.SparseFieldVector) $r4;

        $r5 = specialinvoke r1.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()>();

        r3 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r6 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $z1 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int)>(i0);

        if $z1 == 0 goto label2;

        $r13 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>(i0);

        $r15 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r16 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r15);

        $r17 = (org.apache.commons.math3.FieldElement) $r16;

        virtualinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i0, $r17);

        goto label3;

     label2:
        $r7 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r9 = (org.apache.commons.math3.FieldElement) $r8;

        $r10 = virtualinvoke r3.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r10);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        virtualinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i0, $r12);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math3.linear.FieldVector subtract(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r3, $r16, $r17;
        org.apache.commons.math3.linear.FieldVector r1;
        int i0, i1;
        boolean $z0, $z1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r4, $r11;
        org.apache.commons.math3.Field $r5;
        java.lang.Object $r6, $r9, $r14;
        org.apache.commons.math3.FieldElement $r7, $r8, $r10, $r12, $r13, $r15;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseFieldVector;

        if $z0 == 0 goto label1;

        $r16 = (org.apache.commons.math3.linear.SparseFieldVector) r1;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.SparseFieldVector subtract(org.apache.commons.math3.linear.SparseFieldVector)>($r16);

        return $r17;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>(i0);

        $r3 = new org.apache.commons.math3.linear.SparseFieldVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.linear.SparseFieldVector)>(r0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $z1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap: boolean containsKey(int)>(i1);

        if $z1 == 0 goto label3;

        $r11 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.FieldElement get(int)>(i1);

        $r13 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i1);

        $r14 = interfaceinvoke $r12.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r13);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        virtualinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i1, $r15);

        goto label4;

     label3:
        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i1);

        $r9 = interfaceinvoke $r7.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r8);

        $r10 = (org.apache.commons.math3.FieldElement) $r9;

        virtualinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i1, $r10);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return $r3;
    }

    public org.apache.commons.math3.FieldElement[] toArray()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r2;
        int $i0, $i1;
        org.apache.commons.math3.Field $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r5;
        boolean $z0;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $i0 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i0);

        r1 = (org.apache.commons.math3.FieldElement[]) $r4;

        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r2 = virtualinvoke $r5.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        r1[$i1] = $r6;

        goto label1;

     label2:
        return r1;
    }

    private void checkIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        $i2 = $i1 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        return;
    }

    private void checkIndices(int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.OutOfRangeException $r1, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r7, $r12;
        java.lang.Integer $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r11;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        if i0 < 0 goto label1;

        if i0 < i2 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i3 = i2 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        if i1 < 0 goto label3;

        if i1 < i2 goto label4;

     label3:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i4 = i2 - 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r7, $r8, $r9, $r10);

        throw $r6;

     label4:
        if i1 >= i0 goto label5;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r12, $r13, $r14, 0);

        throw $r11;

     label5:
        return;
    }

    protected void checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        int i0, $i1, $i2;
        org.apache.commons.math3.exception.DimensionMismatchException $r1;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        if $i1 == i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        specialinvoke $r1.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r1;

     label1:
        return;
    }

    public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, $r3, $r9;
        org.apache.commons.math3.linear.FieldVector r1, $r10;
        int i0, $i1, i2;
        boolean $z0;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement $r5, $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseFieldVector;

        if $z0 == 0 goto label1;

        $r9 = (org.apache.commons.math3.linear.SparseFieldVector) r1;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.SparseFieldVector)>($r9);

        return $r10;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkVectorDimensions(int)>(i0);

        $r3 = new org.apache.commons.math3.linear.SparseFieldVector;

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void <init>(org.apache.commons.math3.Field,int)>($r4, $i1);

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r7 = interfaceinvoke $r5.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r6);

        $r8 = (org.apache.commons.math3.FieldElement) $r7;

        virtualinvoke $r3.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i2, $r8);

        i2 = i2 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, $i1, i2;
        org.apache.commons.math3.FieldElement $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void visit(int,org.apache.commons.math3.FieldElement)>(i2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void visit(int,org.apache.commons.math3.FieldElement)>(i3, $r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, i1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor,int,int)>(r1, i0, i1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, $i1, i2;
        org.apache.commons.math3.FieldElement $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement visit(int,org.apache.commons.math3.FieldElement)>(i2, $r3);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i2, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement visit(int,org.apache.commons.math3.FieldElement)>(i3, $r3);

        virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, i1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor,int,int)>(r1, i0, i1);

        return $r2;
    }

    public int hashCode()
    {
        org.apache.commons.math3.linear.SparseFieldVector r0;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r1;
        int i1, $i2, $i3, $i4, $i5, $i7, i8, i9;
        org.apache.commons.math3.Field $r2, $r3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r4;
        org.apache.commons.math3.FieldElement $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        $i2 = 31 * 1;

        $r2 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        if $r2 != null goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $i7 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

     label2:
        i8 = $i2 + $i7;

        $i4 = 31 * i8;

        $i3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        i9 = $i4 + $i3;

        $r4 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r1 = virtualinvoke $r4.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label3:
        $z0 = virtualinvoke r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $r5 = virtualinvoke r1.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        i1 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i5 = 31 * i9;

        i9 = $i5 + i1;

        goto label3;

     label4:
        return i9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.SparseFieldVector r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.math3.Field $r3, $r4, $r5, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.OpenIntToFieldHashMap $r6, $r7;
        org.apache.commons.math3.FieldElement $r8, $r9, r12, r14;
        org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator r11, r13;

        r0 := @this: org.apache.commons.math3.linear.SparseFieldVector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseFieldVector;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (org.apache.commons.math3.linear.SparseFieldVector) r1;

        $r3 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        if $r3 != null goto label03;

        $r10 = r2.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        if $r10 == null goto label04;

        return 0;

     label03:
        $r5 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $r4 = r2.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.Field field>;

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label04;

        return 0;

     label04:
        $i1 = r0.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        $i0 = r2.<org.apache.commons.math3.linear.SparseFieldVector: int virtualSize>;

        if $i1 == $i0 goto label05;

        return 0;

     label05:
        $r6 = r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap entries>;

        r11 = virtualinvoke $r6.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label06:
        $z2 = virtualinvoke r11.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        virtualinvoke r11.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        $i3 = virtualinvoke r11.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        r12 = virtualinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i3);

        $r9 = virtualinvoke r11.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $z5 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z5 != 0 goto label07;

        return 0;

     label07:
        goto label06;

     label08:
        $r7 = specialinvoke r2.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()>();

        r13 = virtualinvoke $r7.<org.apache.commons.math3.util.OpenIntToFieldHashMap: org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()>();

     label09:
        $z3 = virtualinvoke r13.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        virtualinvoke r13.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: void advance()>();

        r14 = virtualinvoke r13.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: org.apache.commons.math3.FieldElement value()>();

        $i2 = virtualinvoke r13.<org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator: int key()>();

        $r8 = virtualinvoke r0.<org.apache.commons.math3.linear.SparseFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i2);

        $z4 = virtualinvoke r14.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 != 0 goto label10;

        return 0;

     label10:
        goto label09;

     label11:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.SparseFieldVector: long serialVersionUID> = 7841233292190413362L;

        return;
    }
}
