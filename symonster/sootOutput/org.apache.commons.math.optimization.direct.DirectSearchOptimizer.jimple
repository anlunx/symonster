public abstract class org.apache.commons.math.optimization.direct.DirectSearchOptimizer extends java.lang.Object implements org.apache.commons.math.optimization.MultivariateRealOptimizer
{
    protected org.apache.commons.math.optimization.RealPointValuePair[] simplex;
    private org.apache.commons.math.analysis.MultivariateRealFunction f;
    private org.apache.commons.math.optimization.RealConvergenceChecker checker;
    private int maxIterations;
    private int iterations;
    private int maxEvaluations;
    private int evaluations;
    private double[][] startConfiguration;

    protected void <init>()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        org.apache.commons.math.optimization.SimpleScalarValueChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math.optimization.SimpleScalarValueChecker;

        specialinvoke $r1.<org.apache.commons.math.optimization.SimpleScalarValueChecker: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)>($r1);

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void setMaxIterations(int)>(2147483647);

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void setMaxEvaluations(int)>(2147483647);

        return;
    }

    public void setStartConfiguration(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        double[] r1, r2;
        int i0, $i1, $i3, $i4, i5, i6;
        double[][] $r3, $r4;
        double $d0;
        byte $b2;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        $r3 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration> = $r3;

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        $r4 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        r2 = $r4[i5];

        i6 = 0;

     label2:
        $i1 = i5 + 1;

        if i6 >= $i1 goto label4;

        $d0 = r1[i6];

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r5[0] = $r7;

        $i4 = i6 + 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label3:
        $i3 = i6 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i3);

        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    public void setStartConfiguration(double[][]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        double[][] r1, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, i8, i9, i10;
        double[] r2, r3, r19, r20;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Object[] $r6, $r11, $r16;
        org.apache.commons.math.exception.util.LocalizedFormats $r7, $r12, $r17;
        java.lang.Integer $r8, $r9, $r13, $r14;
        java.lang.IllegalArgumentException $r10, $r15, $r18;
        byte $b5;
        boolean z0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: double[][];

        $i1 = lengthof r1;

        i0 = $i1 - 1;

        if i0 >= 0 goto label01;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats SIMPLEX_NEED_ONE_POINT>;

        $r16 = newarray (java.lang.Object)[0];

        $r18 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r18;

     label01:
        $r4 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration> = $r4;

        r2 = r1[0];

        i7 = 0;

     label02:
        $i2 = i0 + 1;

        if i7 >= $i2 goto label12;

        r3 = r1[i7];

        $i3 = lengthof r3;

        if $i3 == i0 goto label03;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r11 = newarray (java.lang.Object)[2];

        $i6 = lengthof r3;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r14;

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r15;

     label03:
        i8 = 0;

     label04:
        if i8 >= i7 goto label09;

        r19 = r1[i8];

        z0 = 1;

        i9 = 0;

     label05:
        if i9 >= i0 goto label07;

        $d4 = r3[i9];

        $d3 = r19[i9];

        $b5 = $d4 cmpl $d3;

        if $b5 == 0 goto label06;

        z0 = 0;

        goto label07;

     label06:
        i9 = i9 + 1;

        goto label05;

     label07:
        if z0 == 0 goto label08;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r6[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r10;

     label08:
        i8 = i8 + 1;

        goto label04;

     label09:
        if i7 <= 0 goto label11;

        $r5 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        $i4 = i7 - 1;

        r20 = $r5[$i4];

        i10 = 0;

     label10:
        if i10 >= i0 goto label11;

        $d1 = r3[i10];

        $d0 = r2[i10];

        $d2 = $d1 - $d0;

        r20[i10] = $d2;

        i10 = i10 + 1;

        goto label10;

     label11:
        i7 = i7 + 1;

        goto label02;

     label12:
        return;
    }

    public void setMaxIterations(int)
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxIterations> = i0;

        return;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxIterations>;

        return $i0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxEvaluations> = i0;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxEvaluations>;

        return $i0;
    }

    public int getIterations()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int evaluations>;

        return $i0;
    }

    public void setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        org.apache.commons.math.optimization.RealConvergenceChecker r1;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: org.apache.commons.math.optimization.RealConvergenceChecker;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker checker> = r1;

        return;
    }

    public org.apache.commons.math.optimization.RealConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        org.apache.commons.math.optimization.RealConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker checker>;

        return $r1;
    }

    public org.apache.commons.math.optimization.RealPointValuePair optimize(org.apache.commons.math.analysis.MultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[]) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        org.apache.commons.math.analysis.MultivariateRealFunction r1;
        org.apache.commons.math.optimization.GoalType r2;
        double[] r3, r16;
        org.apache.commons.math.optimization.RealPointValuePair[] r4, $r6, $r7, $r8, $r9, $r11, $r19;
        double[][] $r5, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.commons.math.optimization.RealPointValuePair $r10, $r12, $r13;
        org.apache.commons.math.optimization.RealConvergenceChecker $r14;
        boolean $z0, z1;
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1 $r17;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.MultivariateRealFunction;

        r2 := @parameter1: org.apache.commons.math.optimization.GoalType;

        r3 := @parameter2: double[];

        $r5 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        if $r5 == null goto label1;

        $r15 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        $i5 = lengthof $r15;

        $i4 = lengthof r3;

        if $i5 == $i4 goto label2;

     label1:
        $i0 = lengthof r3;

        r16 = newarray (double)[$i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r16, 1.0);

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void setStartConfiguration(double[])>(r16);

     label2:
        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.analysis.MultivariateRealFunction f> = r1;

        $r17 = new org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1;

        specialinvoke $r17.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1: void <init>(org.apache.commons.math.optimization.direct.DirectSearchOptimizer,org.apache.commons.math.optimization.GoalType)>(r0, r2);

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations> = 0;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int evaluations> = 0;

        specialinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void buildSimplex(double[])>(r3);

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void evaluateSimplex(java.util.Comparator)>($r17);

        $r19 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i6 = lengthof $r19;

        r4 = newarray (org.apache.commons.math.optimization.RealPointValuePair)[$i6];

     label3:
        $i7 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations>;

        if $i7 <= 0 goto label6;

        z1 = 1;

        i8 = 0;

     label4:
        $r8 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i2 = lengthof $r8;

        if i8 >= $i2 goto label5;

        $r14 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker checker>;

        $i3 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations>;

        $r13 = r4[i8];

        $r11 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r12 = $r11[i8];

        $z0 = interfaceinvoke $r14.<org.apache.commons.math.optimization.RealConvergenceChecker: boolean converged(int,org.apache.commons.math.optimization.RealPointValuePair,org.apache.commons.math.optimization.RealPointValuePair)>($i3, $r13, $r12);

        z1 = z1 & $z0;

        i8 = i8 + 1;

        goto label4;

     label5:
        if z1 == 0 goto label6;

        $r9 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r10 = $r9[0];

        return $r10;

     label6:
        $r7 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r6 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 0, $i1);

        virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void iterateSimplex(java.util.Comparator)>($r17);

        goto label3;
    }

    protected void incrementIterationsCounter() throws org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.optimization.OptimizationException $r1;
        org.apache.commons.math.MaxIterationsExceededException $r2;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int iterations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxIterations>;

        if $i1 <= $i2 goto label1;

        $r1 = new org.apache.commons.math.optimization.OptimizationException;

        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxIterations>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math.optimization.OptimizationException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;

     label1:
        return;
    }

    protected abstract void iterateSimplex(java.util.Comparator) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;

    protected double evaluate(double[]) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        double[] r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.analysis.MultivariateRealFunction $r2;
        double $d0;
        org.apache.commons.math.FunctionEvaluationException $r3;
        org.apache.commons.math.MaxEvaluationsExceededException $r4;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int evaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        $r3 = new org.apache.commons.math.FunctionEvaluationException;

        $r4 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: int maxEvaluations>;

        specialinvoke $r4.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i3);

        specialinvoke $r3.<org.apache.commons.math.FunctionEvaluationException: void <init>(java.lang.Throwable,double[])>($r4, r1);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.analysis.MultivariateRealFunction f>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.analysis.MultivariateRealFunction: double value(double[])>(r1);

        return $d0;
    }

    private void buildSimplex(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        double[][] $r4, $r8, $r14;
        org.apache.commons.math.optimization.RealPointValuePair[] $r5, $r7, $r10;
        org.apache.commons.math.optimization.RealPointValuePair $r6, $r9;
        double $d0, $d1, $d2;
        java.lang.Object[] $r11;
        org.apache.commons.math.exception.util.LocalizedFormats $r12;
        java.lang.Integer $r13, $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        $r4 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        $i1 = lengthof $r4;

        if i0 == $i1 goto label1;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[0] = $r13;

        $r14 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        $i4 = lengthof $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r11[1] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r16;

     label1:
        $i2 = i0 + 1;

        $r5 = newarray (org.apache.commons.math.optimization.RealPointValuePair)[$i2];

        r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex> = $r5;

        $r7 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r6 = new org.apache.commons.math.optimization.RealPointValuePair;

        specialinvoke $r6.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double)>(r1, #NaN);

        $r7[0] = $r6;

        i5 = 0;

     label2:
        if i5 >= i0 goto label5;

        $r8 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double[][] startConfiguration>;

        r2 = $r8[i5];

        r3 = newarray (double)[i0];

        i6 = 0;

     label3:
        if i6 >= i0 goto label4;

        $d1 = r1[i6];

        $d0 = r2[i6];

        $d2 = $d1 + $d0;

        r3[i6] = $d2;

        i6 = i6 + 1;

        goto label3;

     label4:
        $r10 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i3 = i5 + 1;

        $r9 = new org.apache.commons.math.optimization.RealPointValuePair;

        specialinvoke $r9.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double)>(r3, #NaN);

        $r10[$i3] = $r9;

        i5 = i5 + 1;

        goto label2;

     label5:
        return;
    }

    protected void evaluateSimplex(java.util.Comparator) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        java.util.Comparator r1;
        org.apache.commons.math.optimization.RealPointValuePair r2, $r7;
        double[] r3;
        org.apache.commons.math.optimization.RealPointValuePair[] $r4, $r5, $r6, $r8;
        int $i0, i1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r1 := @parameter0: java.util.Comparator;

        i1 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label3;

        $r6 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        r2 = $r6[i1];

        r3 = virtualinvoke r2.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPointRef()>();

        $d0 = virtualinvoke r2.<org.apache.commons.math.optimization.RealPointValuePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r7 = new org.apache.commons.math.optimization.RealPointValuePair;

        $d1 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: double evaluate(double[])>(r3);

        specialinvoke $r7.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double,boolean)>(r3, $d1, 0);

        $r8[i1] = $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r5, r1);

        return;
    }

    protected void replaceWorstPoint(org.apache.commons.math.optimization.RealPointValuePair, java.util.Comparator)
    {
        org.apache.commons.math.optimization.direct.DirectSearchOptimizer r0;
        java.util.Comparator r1;
        int i0, $i1, $i2, i3;
        org.apache.commons.math.optimization.RealPointValuePair r2, $r6, r9;
        org.apache.commons.math.optimization.RealPointValuePair[] $r3, $r4, $r5, $r7, $r8;

        r0 := @this: org.apache.commons.math.optimization.direct.DirectSearchOptimizer;

        r9 := @parameter0: org.apache.commons.math.optimization.RealPointValuePair;

        r1 := @parameter1: java.util.Comparator;

        $r3 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i1 = lengthof $r3;

        i0 = $i1 - 1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r5 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r6 = $r5[i3];

        $i2 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r6, r9);

        if $i2 <= 0 goto label2;

        $r7 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        r2 = $r7[i3];

        $r8 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r8[i3] = r9;

        r9 = r2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r4[i0] = r9;

        return;
    }
}
