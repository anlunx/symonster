class org.apache.commons.math.ode.nonstiff.EulerStepInterpolator extends org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.math.ode.nonstiff.EulerStepInterpolator r0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: void <init>()>();

        return;
    }

    public void <init>(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator)
    {
        org.apache.commons.math.ode.nonstiff.EulerStepInterpolator r0, r1;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        r1 := @parameter0: org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: void <init>(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator)>(r1);

        return;
    }

    protected org.apache.commons.math.ode.sampling.StepInterpolator doCopy()
    {
        org.apache.commons.math.ode.nonstiff.EulerStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        $r1 = new org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: void <init>(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator)>(r0);

        return $r1;
    }

    protected void computeInterpolatedStateAndDerivatives(double, double) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.nonstiff.EulerStepInterpolator r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        double[] $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        int $i0, $i1, i2;
        double[][] $r2, $r7;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EulerStepInterpolator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r9 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[] interpolatedState>;

        $r6 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[] currentState>;

        $d4 = $r6[i2];

        $r7 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r8 = $r7[0];

        $d2 = $r8[i2];

        $d3 = d1 * $d2;

        $d5 = $d4 - $d3;

        $r9[i2] = $d5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[][] yDotK>;

        $r5 = $r2[0];

        $r4 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        $r3 = r0.<org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: double[] interpolatedDerivatives>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.ode.nonstiff.EulerStepInterpolator: long serialVersionUID> = -7179861704951334960L;

        return;
    }
}
