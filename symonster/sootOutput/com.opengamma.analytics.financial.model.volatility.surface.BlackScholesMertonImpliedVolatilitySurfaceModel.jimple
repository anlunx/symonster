public class com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel extends java.lang.Object implements com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurfaceModel
{
    private static final org.slf4j.Logger s_logger;
    private final com.opengamma.analytics.financial.model.option.pricing.analytic.AnalyticOptionModel _bsm;
    private com.opengamma.analytics.math.rootfinding.SingleRootFinder _rootFinder;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.BlackScholesMertonModel $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.opengamma.analytics.financial.model.option.pricing.analytic.BlackScholesMertonModel;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.BlackScholesMertonModel: void <init>()>();

        r0.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: com.opengamma.analytics.financial.model.option.pricing.analytic.AnalyticOptionModel _bsm> = $r1;

        return;
    }

    public com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface getSurface(java.util.Map, com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle)
    {
        com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel r0;
        java.util.Map r1;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle r2, $r19, $r22, $r24;
        java.util.Map$Entry r3;
        java.lang.Double r4;
        com.opengamma.analytics.math.function.Function1D r5;
        int $i0;
        java.util.Set $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9, $r10, $r12, $r23;
        com.opengamma.analytics.financial.model.option.pricing.analytic.AnalyticOptionModel $r11;
        com.opengamma.analytics.financial.model.option.definition.OptionDefinition $r13;
        com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel$MyBisectionSingleRootFinder $r14;
        double $d0;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle[] $r15;
        com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface $r16, $r20, $r25;
        com.opengamma.analytics.math.rootfinding.SingleRootFinder $r17;
        com.opengamma.analytics.math.surface.ConstantDoublesSurface $r18, $r21;
        org.slf4j.Logger $r26;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Map notEmpty(java.util.Map,java.lang.String)>(r1, "option prices");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r2);

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 <= 1 goto label1;

        $r26 = <com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: org.slf4j.Logger s_logger>;

        interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>("Option price map had more than one entry: using the first pair to imply volatility");

     label1:
        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.lang.Double) $r10;

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: com.opengamma.analytics.financial.model.option.pricing.analytic.AnalyticOptionModel _bsm>;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (com.opengamma.analytics.financial.model.option.definition.OptionDefinition) $r12;

        r5 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.option.pricing.analytic.AnalyticOptionModel: com.opengamma.analytics.math.function.Function1D getPricingFunction(com.opengamma.analytics.financial.model.option.definition.OptionDefinition)>($r13);

        $r14 = new com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel$MyBisectionSingleRootFinder;

        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        specialinvoke $r14.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel$MyBisectionSingleRootFinder: void <init>(com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle,double)>(r2, $d0);

        r0.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: com.opengamma.analytics.math.rootfinding.SingleRootFinder _rootFinder> = $r14;

        $r17 = r0.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: com.opengamma.analytics.math.rootfinding.SingleRootFinder _rootFinder>;

        $r15 = newarray (com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle)[2];

        $r16 = new com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface;

        $r18 = staticinvoke <com.opengamma.analytics.math.surface.ConstantDoublesSurface: com.opengamma.analytics.math.surface.ConstantDoublesSurface 'from'(double)>(0.0);

        specialinvoke $r16.<com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface: void <init>(com.opengamma.analytics.math.surface.Surface)>($r18);

        $r19 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle withVolatilitySurface(com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface)>($r16);

        $r15[0] = $r19;

        $r20 = new com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface;

        $r21 = staticinvoke <com.opengamma.analytics.math.surface.ConstantDoublesSurface: com.opengamma.analytics.math.surface.ConstantDoublesSurface 'from'(double)>(10.0);

        specialinvoke $r20.<com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface: void <init>(com.opengamma.analytics.math.surface.Surface)>($r21);

        $r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle withVolatilitySurface(com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface)>($r20);

        $r15[1] = $r22;

        $r23 = interfaceinvoke $r17.<com.opengamma.analytics.math.rootfinding.SingleRootFinder: java.lang.Object getRoot(com.opengamma.analytics.math.function.Function1D,java.lang.Object[])>(r5, $r15);

        $r24 = (com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle) $r23;

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface getVolatilitySurface()>();

        return $r25;
    }

    public volatile com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface getSurface(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel r0;
        java.lang.Object r1, r2;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle $r3;
        java.util.Map $r4;
        com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface $r5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Map) r1;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurface getSurface(java.util.Map,com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/model/volatility/surface/BlackScholesMertonImpliedVolatilitySurfaceModel");

        <com.opengamma.analytics.financial.model.volatility.surface.BlackScholesMertonImpliedVolatilitySurfaceModel: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
