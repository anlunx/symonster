public class com.opengamma.analytics.math.statistics.distribution.GammaDistribution extends java.lang.Object implements com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution
{
    private final cern.jet.random.Gamma _gamma;
    private final double _k;
    private final double _theta;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        double d0, d1;
        cern.jet.random.engine.MersenneTwister $r1;
        java.util.Date $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new cern.jet.random.engine.MersenneTwister;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        specialinvoke $r1.<cern.jet.random.engine.MersenneTwister: void <init>(java.util.Date)>($r2);

        specialinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: void <init>(double,double,cern.jet.random.engine.RandomEngine)>(d0, d1, $r1);

        return;
    }

    public void <init>(double, double, cern.jet.random.engine.RandomEngine)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        double d0, d1, $d2;
        cern.jet.random.engine.RandomEngine r1;
        byte $b0, $b1;
        cern.jet.random.Gamma $r2;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: cern.jet.random.engine.RandomEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "k must be > 0");

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "theta must be > 0");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = new cern.jet.random.Gamma;

        $d2 = 1.0 / d1;

        specialinvoke $r2.<cern.jet.random.Gamma: void <init>(double,double,cern.jet.random.engine.RandomEngine)>(d0, $d2, r1);

        r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: cern.jet.random.Gamma _gamma> = $r2;

        r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _k> = d0;

        r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _theta> = d1;

        return;
    }

    public double getCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Double r1;
        cern.jet.random.Gamma $r2;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: cern.jet.random.Gamma _gamma>;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke $r2.<cern.jet.random.Gamma: double cdf(double)>($d0);

        return $d1;
    }

    public double getInverseCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Double r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getPDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Double r1;
        cern.jet.random.Gamma $r2;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: cern.jet.random.Gamma _gamma>;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke $r2.<cern.jet.random.Gamma: double pdf(double)>($d0);

        return $d1;
    }

    public double nextRandom()
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        cern.jet.random.Gamma $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        $r1 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: cern.jet.random.Gamma _gamma>;

        $d0 = virtualinvoke $r1.<cern.jet.random.Gamma: double nextDouble()>();

        return $d0;
    }

    public double getK()
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _k>;

        return $d0;
    }

    public double getTheta()
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _theta>;

        return $d0;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        double $d0, $d1;
        long $l1, $l2, $l5, $l6, l10, l12;
        int $i3, $i4, $i7, $i8, i11, i13;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _k>;

        l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i4 = 31 * 1;

        $l1 = l10 >>> 32;

        $l2 = l10 ^ $l1;

        $i3 = (int) $l2;

        i11 = $i4 + $i3;

        $d1 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _theta>;

        l12 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i8 = 31 * i11;

        $l5 = l12 >>> 32;

        $l6 = l12 ^ $l5;

        $i7 = (int) $l6;

        i13 = $i8 + $i7;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1, $d2, $d3;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.statistics.distribution.GammaDistribution) r1;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _k>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _k>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label4;

        return 0;

     label4:
        $d2 = r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _theta>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r2.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double _theta>;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public volatile double getInverseCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double getInverseCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double getCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getPDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.GammaDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.GammaDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.GammaDistribution: double getPDF(java.lang.Double)>($r2);

        return $d0;
    }
}
