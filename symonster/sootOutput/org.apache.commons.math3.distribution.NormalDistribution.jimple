public class org.apache.commons.math3.distribution.NormalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private static final double SQRT2;
    private final double mean;
    private final double standardDeviation;
    private final double logStandardDeviationPlusHalfLog2Pi;
    private final double solverAbsoluteAccuracy;

    public void <init>()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1, d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, d0, d1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>(r1, d0, d1, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats STANDARD_DEVIATION>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean> = d0;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation> = d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d5 = 0.5 * $d4;

        $d6 = $d3 + $d5;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double logStandardDeviationPlusHalfLog2Pi> = $d6;

        r0.<org.apache.commons.math3.distribution.NormalDistribution: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double getMean()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        return $d0;
    }

    public double getStandardDeviation()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double logDensity(double)>(d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        return $d2;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        $d3 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        d1 = d0 - $d3;

        $d4 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        d2 = d1 / $d4;

        $d5 = -0.5 * d2;

        $d7 = $d5 * d2;

        $d6 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double logStandardDeviationPlusHalfLog2Pi>;

        $d8 = $d7 - $d6;

        return $d8;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        d1 = d0 - $d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d4 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d5 = 40.0 * $d4;

        $b0 = $d3 cmpl $d5;

        if $b0 <= 0 goto label3;

        $b1 = d1 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $d13 = 0.0;

        goto label2;

     label1:
        $d13 = 1.0;

     label2:
        return $d13;

     label3:
        $d7 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d6 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        $d8 = $d7 * $d6;

        $d9 = d1 / $d8;

        $d10 = staticinvoke <org.apache.commons.math3.special.Erf: double erf(double)>($d9);

        $d11 = 1.0 + $d10;

        $d12 = 0.5 * $d11;

        return $d12;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $d5 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d1 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        $d6 = $d2 * $d1;

        $d3 = 2.0 * d0;

        $d4 = $d3 - 1.0;

        $d7 = staticinvoke <org.apache.commons.math3.special.Erf: double erfInv(double)>($d4);

        $d8 = $d6 * $d7;

        $d9 = $d5 + $d8;

        return $d9;
    }

    public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double probability(double,double)>(d0, d1);

        return $d2;
    }

    public double probability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label1:
        $d6 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $d5 = <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2>;

        d2 = $d6 * $d5;

        $d7 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d8 = d0 - $d7;

        d3 = $d8 / d2;

        $d9 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d10 = d1 - $d9;

        d4 = $d10 / d2;

        $d11 = staticinvoke <org.apache.commons.math3.special.Erf: double erf(double,double)>(d3, d4);

        $d12 = 0.5 * $d11;

        return $d12;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double getMean()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.NormalDistribution: double getStandardDeviation()>();

        $d1 = d0 * d0;

        return $d1;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 0;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        return 1;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.NormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.distribution.NormalDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double standardDeviation>;

        $r1 = r0.<org.apache.commons.math3.distribution.NormalDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d3 = $d0 * $d1;

        $d2 = r0.<org.apache.commons.math3.distribution.NormalDistribution: double mean>;

        $d4 = $d3 + $d2;

        return $d4;
    }

    static void <clinit>()
    {
        double $d0;

        <org.apache.commons.math3.distribution.NormalDistribution: long serialVersionUID> = 8589540077390120676L;

        <org.apache.commons.math3.distribution.NormalDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(2.0);

        <org.apache.commons.math3.distribution.NormalDistribution: double SQRT2> = $d0;

        return;
    }
}
