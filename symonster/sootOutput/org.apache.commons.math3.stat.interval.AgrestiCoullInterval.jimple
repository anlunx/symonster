public class org.apache.commons.math3.stat.interval.AgrestiCoullInterval extends java.lang.Object implements org.apache.commons.math3.stat.interval.BinomialConfidenceInterval
{

    public void <init>()
    {
        org.apache.commons.math3.stat.interval.AgrestiCoullInterval r0;

        r0 := @this: org.apache.commons.math3.stat.interval.AgrestiCoullInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)
    {
        org.apache.commons.math3.stat.interval.AgrestiCoullInterval r0;
        int i0, i1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        org.apache.commons.math3.distribution.NormalDistribution $r2;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r3;

        r0 := @this: org.apache.commons.math3.stat.interval.AgrestiCoullInterval;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.stat.interval.IntervalUtils: void checkParameters(int,int,double)>(i0, i1, d0);

        $d7 = 1.0 - d0;

        d1 = $d7 / 2.0;

        $r2 = new org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: void <init>()>();

        $d8 = 1.0 - d1;

        d2 = virtualinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: double inverseCumulativeProbability(double)>($d8);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d2, 2);

        $d9 = (double) i0;

        d4 = $d9 + d3;

        $d13 = 1.0 / d4;

        $d11 = (double) i1;

        $d10 = 0.5 * d3;

        $d12 = $d11 + $d10;

        d5 = $d13 * $d12;

        $d14 = 1.0 / d4;

        $d16 = $d14 * d5;

        $d15 = 1.0 - d5;

        $d17 = $d16 * $d15;

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d17);

        d6 = d2 * $d18;

        $r3 = new org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d20 = d5 - d6;

        $d19 = d5 + d6;

        specialinvoke $r3.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void <init>(double,double,double)>($d20, $d19, d0);

        return $r3;
    }
}
