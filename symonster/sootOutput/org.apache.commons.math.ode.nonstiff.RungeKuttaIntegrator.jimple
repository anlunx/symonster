public abstract class org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator extends org.apache.commons.math.ode.AbstractIntegrator
{
    private final double[] c;
    private final double[][] a;
    private final double[] b;
    private final org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype;
    private final double step;

    protected void <init>(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double)
    {
        org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator r0;
        java.lang.String r1;
        double[] r2, r4;
        double[][] r3;
        org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator r5;
        double d0, $d1;

        r0 := @this: org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        r4 := @parameter3: double[];

        r5 := @parameter4: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator;

        d0 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] c> = r2;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[][] a> = r3;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] b> = r4;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype> = r5;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double step> = $d1;

        return;
    }

    public double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, d37, d38, d39, d40;
        double[] r2, r3, r5, $r6, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r28, r29;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23;
        double[][] r4, $r18, $r21;
        byte $b1, $b10, $b11;
        org.apache.commons.math.ode.sampling.DummyStepInterpolator $r7;
        java.util.Collection $r9;
        java.lang.Object $r24;
        org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator $r26, r30;
        org.apache.commons.math.ode.sampling.StepInterpolator $r27;
        org.apache.commons.math.ode.sampling.AbstractStepInterpolator r31;
        java.util.Iterator r32;
        org.apache.commons.math.ode.sampling.StepHandler r33;

        r0 := @this: org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>(r1, d0, r2, d1, r3);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)>(r1);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void resetEvaluations()>();

        $b1 = d1 cmpl d0;

        if $b1 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z0 = $z3;

        $r6 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        $i2 = lengthof $r6;

        i0 = $i2 + 1;

        if r3 == r2 goto label03;

        $i17 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i17);

     label03:
        r4 = newarray (double[])[i0];

        i18 = 0;

     label04:
        if i18 >= i0 goto label05;

        $i16 = lengthof r2;

        $r28 = newarray (double)[$i16];

        r4[i18] = $r28;

        i18 = i18 + 1;

        goto label04;

     label05:
        $i3 = lengthof r2;

        r29 = newarray (double)[$i3];

        $i4 = lengthof r2;

        r5 = newarray (double)[$i4];

        $z1 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: boolean requiresDenseOutput()>();

        if $z1 == 0 goto label06;

        $r26 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype>;

        $r27 = virtualinvoke $r26.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: org.apache.commons.math.ode.sampling.StepInterpolator copy()>();

        r30 = (org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator) $r27;

        virtualinvoke r30.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: void reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean)>(r0, r29, r4, z0);

        r31 = r30;

        goto label07;

     label06:
        $r7 = new org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        $i5 = i0 - 1;

        $r8 = r4[$i5];

        specialinvoke $r7.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: void <init>(double[],double[],boolean)>(r29, $r8, z0);

        r31 = $r7;

     label07:
        virtualinvoke r31.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>(d0);

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = d0;

        if z0 == 0 goto label08;

        $d36 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double step>;

        goto label09;

     label08:
        $d2 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double step>;

        $d36 = neg $d2;

     label09:
        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = $d36;

        $r9 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: java.util.Collection stepHandlers>;

        r32 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r24 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.commons.math.ode.sampling.StepHandler) $r24;

        interfaceinvoke r33.<org.apache.commons.math.ode.sampling.StepHandler: void reset()>();

        goto label10;

     label11:
        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void setStateInitialized(boolean)>(0);

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep> = 0;

     label12:
        virtualinvoke r31.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void shift()>();

        $d3 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $r10 = r4[0];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>($d3, r3, $r10);

        i19 = 1;

     label13:
        if i19 >= i0 goto label18;

        i20 = 0;

     label14:
        $i12 = lengthof r2;

        if i20 >= $i12 goto label17;

        $r18 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i14 = i19 - 1;

        $r19 = $r18[$i14];

        $d28 = $r19[0];

        $r20 = r4[0];

        $d27 = $r20[i20];

        d37 = $d28 * $d27;

        i21 = 1;

     label15:
        if i21 >= i19 goto label16;

        $r21 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[][] a>;

        $i15 = i19 - 1;

        $r22 = $r21[$i15];

        $d34 = $r22[i21];

        $r23 = r4[i21];

        $d33 = $r23[i20];

        $d35 = $d34 * $d33;

        d37 = d37 + $d35;

        i21 = i21 + 1;

        goto label15;

     label16:
        $d31 = r3[i20];

        $d29 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        $d30 = $d29 * d37;

        $d32 = $d31 + $d30;

        r29[i20] = $d32;

        i20 = i20 + 1;

        goto label14;

     label17:
        $d25 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $r16 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] c>;

        $i13 = i19 - 1;

        $d23 = $r16[$i13];

        $d22 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        $d24 = $d23 * $d22;

        $d26 = $d25 + $d24;

        $r17 = r4[i19];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>($d26, r29, $r17);

        i19 = i19 + 1;

        goto label13;

     label18:
        i22 = 0;

     label19:
        $i6 = lengthof r2;

        if i22 >= $i6 goto label22;

        $r12 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        $d14 = $r12[0];

        $r13 = r4[0];

        $d13 = $r13[i22];

        d38 = $d14 * $d13;

        i23 = 1;

     label20:
        if i23 >= i0 goto label21;

        $r14 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double[] b>;

        $d20 = $r14[i23];

        $r15 = r4[i23];

        $d19 = $r15[i22];

        $d21 = $d20 * $d19;

        d38 = d38 + $d21;

        i23 = i23 + 1;

        goto label20;

     label21:
        $d17 = r3[i22];

        $d15 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        $d16 = $d15 * d38;

        $d18 = $d17 + $d16;

        r29[i22] = $d18;

        i22 = i22 + 1;

        goto label19;

     label22:
        $d5 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d4 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        $d6 = $d5 + $d4;

        virtualinvoke r31.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>($d6);

        $i7 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r29, 0, r3, 0, $i7);

        $i8 = i0 - 1;

        $r11 = r4[$i8];

        $i9 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r5, 0, $i9);

        $d7 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)>(r31, r3, r5, d1);

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = $d7;

        $z2 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep>;

        if $z2 != 0 goto label27;

        $d8 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        virtualinvoke r31.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>($d8);

        $d10 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d9 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize>;

        d39 = $d10 + $d9;

        if z0 == 0 goto label24;

        $b11 = d39 cmpl d1;

        if $b11 < 0 goto label23;

        $z5 = 1;

        goto label26;

     label23:
        $z5 = 0;

        goto label26;

     label24:
        $b10 = d39 cmpg d1;

        if $b10 > 0 goto label25;

        $z5 = 1;

        goto label26;

     label25:
        $z5 = 0;

     label26:
        if $z5 == 0 goto label27;

        $d11 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        $d12 = d1 - $d11;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = $d12;

     label27:
        $z7 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: boolean isLastStep>;

        if $z7 == 0 goto label12;

        d40 = r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart>;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepStart> = #NaN;

        r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: double stepSize> = #NaN;

        return d40;
    }
}
