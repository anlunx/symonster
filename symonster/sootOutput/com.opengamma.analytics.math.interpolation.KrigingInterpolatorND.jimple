public class com.opengamma.analytics.math.interpolation.KrigingInterpolatorND extends com.opengamma.analytics.math.interpolation.InterpolatorND
{
    private final double _beta;

    public void <init>(double)
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        double d0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.InterpolatorND: void <init>()>();

        $b0 = d0 cmpl 1.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpg 2.0;

        if $b1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Beta was not in acceptable range (1 <= beta < 2");

        r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta> = d0;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[])
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle r1;
        double[] r2, r6, $r11;
        com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle r3;
        java.util.List r4;
        com.opengamma.analytics.math.function.Function1D r5;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4, d5, d6;
        boolean $z0;
        java.lang.Double $r7, $r12, $r14;
        java.lang.Object $r8, $r10, $r13;
        com.opengamma.util.tuple.Pair $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle;

        r2 := @parameter1: double[];

        virtualinvoke r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: void validateInput(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle,double[])>(r1, r2);

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "KriginInterpolatorND needs a KriginInterpolatorDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle) r1;

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle: java.util.List getData()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle: com.opengamma.analytics.math.function.Function1D getVariogram()>();

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle: double[] getWeights()>();

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        d5 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (com.opengamma.util.tuple.Pair) $r8;

        $r10 = virtualinvoke $r9.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r11 = (double[]) $r10;

        d0 = staticinvoke <com.opengamma.analytics.math.interpolation.DistanceCalculator: double getDistance(double[],double[])>(r2, $r11);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r13 = virtualinvoke r5.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r12);

        $r14 = (java.lang.Double) $r13;

        $d2 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $d3 = r6[i1];

        $d4 = $d2 * $d3;

        d5 = d5 + $d4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = r6[i0];

        d6 = d5 + $d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        return $r7;
    }

    public com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle getDataBundle(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        double[] r1, r2, r3, r4;
        com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle $r5;
        java.util.List $r6;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = new com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: java.util.List transformData(double[],double[],double[],double[])>(r1, r2, r3, r4);

        $d0 = r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta>;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle: void <init>(java.util.List,double)>($r6, $d0);

        return $r5;
    }

    public com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle getDataBundle(java.util.List)
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        java.util.List r1;
        com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: java.util.List;

        $r2 = new com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle;

        $d0 = r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta>;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle: void <init>(java.util.List,double)>(r1, $d0);

        return $r2;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        long l1, $l2, $l3;
        double $d0;
        int $i4, $i5, i7;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        $d0 = r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta>;

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i5 = 31 * 1;

        $l2 = l1 >>> 32;

        $l3 = l1 ^ $l2;

        $i4 = (int) $l3;

        i7 = $i5 + $i4;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.interpolation.KrigingInterpolatorND) r1;

        $d0 = r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: double _beta>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(java.util.List)
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        java.util.List r1;
        com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle getDataBundle(java.util.List)>(r1);

        return $r2;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        double[] r1, r2, r3, r4;
        com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: com.opengamma.analytics.math.interpolation.data.KrigingInterpolatorDataBundle getDataBundle(double[],double[],double[],double[])>(r1, r2, r3, r4);

        return $r5;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.KrigingInterpolatorND r0;
        java.lang.Object r1, r2;
        double[] $r3;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle $r4;
        java.lang.Double $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.KrigingInterpolatorND;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle) r1;

        $r3 = (double[]) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.KrigingInterpolatorND: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle,double[])>($r4, $r3);

        return $r5;
    }
}
