public abstract class org.apache.commons.math.distribution.AbstractDistribution extends java.lang.Object implements org.apache.commons.math.distribution.Distribution, java.io.Serializable
{
    private static final long serialVersionUID;

    protected void <init>()
    {
        org.apache.commons.math.distribution.AbstractDistribution r0;

        r0 := @this: org.apache.commons.math.distribution.AbstractDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double cumulativeProbability(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractDistribution r0;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.distribution.AbstractDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label1:
        $d2 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractDistribution: double cumulativeProbability(double)>(d1);

        $d3 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractDistribution: double cumulativeProbability(double)>(d0);

        $d4 = $d2 - $d3;

        return $d4;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.AbstractDistribution: long serialVersionUID> = -38038050983108802L;

        return;
    }
}
