public class com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository extends java.lang.Object
{
    private final double _toleranceAbs;
    private final double _toleranceRel;
    private final int _stepMaximum;
    private final com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder _rootFinder;
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MATRIX_ALGEBRA;

    public void <init>(double, double, int)
    {
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository r0;
        double d0, d1, $d2, $d3;
        int i0, $i1;
        com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder $r1;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: double _toleranceAbs> = d0;

        r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: double _toleranceRel> = d1;

        r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: int _stepMaximum> = i0;

        $r1 = new com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder;

        $d2 = r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: double _toleranceAbs>;

        $d3 = r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: double _toleranceRel>;

        $i1 = r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: int _stepMaximum>;

        $r2 = staticinvoke <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition getDecomposition(java.lang.String)>("SV_COLT");

        specialinvoke $r1.<com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder: void <init>(double,double,int,com.opengamma.analytics.math.linearalgebra.Decomposition)>($d2, $d3, $i1, $r2);

        r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder _rootFinder> = $r1;

        return;
    }

    private com.opengamma.util.tuple.Pair makeUnit(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[], double[], com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)
    {
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] r1;
        double[] r2, r14;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r3, r15;
        java.util.LinkedHashMap r4, r5, r6, r7;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r8, r9;
        com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward $r16, $r24;
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData $r17;
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderFunction $r18;
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian $r19;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator $r20;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r21, $r23, $r25;
        com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder $r22;
        java.lang.Double[] $r26;
        com.opengamma.util.tuple.Pair $r27;

        r0 := @this: com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[];

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: java.util.LinkedHashMap;

        r6 := @parameter5: java.util.LinkedHashMap;

        r7 := @parameter6: java.util.LinkedHashMap;

        r8 := @parameter7: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        r9 := @parameter8: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        $r16 = new com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward;

        specialinvoke $r16.<com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward: void <init>(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>(r3, r4, r5, r6, r7);

        $r17 = new com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData;

        specialinvoke $r17.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData: void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[],com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward)>(r1, $r16);

        $r18 = new com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderFunction;

        specialinvoke $r18.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderFunction: void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData)>(r8, $r17);

        $r19 = new com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian;

        $r20 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator;

        specialinvoke $r20.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator: void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)>(r9);

        specialinvoke $r19.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian: void <init>(com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixAbstractCalculator,com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData)>($r20, $r17);

        $r22 = r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder _rootFinder>;

        $r21 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.rootfinding.newton.BroydenVectorRootFinder: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRoot(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r18, $r19, $r21);

        r14 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r24 = virtualinvoke $r17.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData: com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward getGeneratorMarket()>();

        $r25 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r14);

        r15 = virtualinvoke $r24.<com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r25);

        $r26 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Double[] toObject(double[])>(r14);

        $r27 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>(r15, $r26);

        return $r27;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D[] makeCurveMatrix(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[], int, int[], java.lang.Double[], com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)
    {
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        int[] r2;
        java.lang.Double[] r3;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r4;
        java.util.LinkedHashMap r5, r6, r7, r8;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r13, r14, $r25;
        double[][] r15, r17;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r16;
        com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward $r18;
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData $r19;
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian $r20;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator $r21;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r22;
        java.lang.Object $r23, $r27;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r24;
        double[] $r26, $r28;

        r0 := @this: com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[];

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.Double[];

        r4 := @parameter4: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r5 := @parameter5: java.util.LinkedHashMap;

        r6 := @parameter6: java.util.LinkedHashMap;

        r7 := @parameter7: java.util.LinkedHashMap;

        r8 := @parameter8: java.util.LinkedHashMap;

        r9 := @parameter9: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        $r18 = new com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward;

        specialinvoke $r18.<com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward: void <init>(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>(r4, r5, r6, r7, r8);

        $r19 = new com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData;

        specialinvoke $r19.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData: void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[],com.opengamma.analytics.financial.provider.curve.multicurve.GeneratorMulticurveProviderForward)>(r1, $r18);

        $r20 = new com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian;

        $r21 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator;

        specialinvoke $r21.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixCalculator: void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)>(r9);

        specialinvoke $r20.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardFinderJacobian: void <init>(com.opengamma.analytics.financial.provider.sensitivity.multicurve.ParameterSensitivityMulticurveMatrixAbstractCalculator,com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingData)>($r21, $r19);

        $r22 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(java.lang.Double[])>(r3);

        $r23 = virtualinvoke $r20.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r22);

        r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r23;

        $r24 = <com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.analytics.math.matrix.MatrixAlgebra MATRIX_ALGEBRA>;

        r14 = virtualinvoke $r24.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix)>(r13);

        r15 = virtualinvoke r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i1 = lengthof r2;

        r16 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i1];

        i9 = 0;

        i10 = 0;

     label1:
        $i2 = lengthof r2;

        if i10 >= $i2 goto label4;

        $i4 = r2[i10];

        $i3 = lengthof r15;

        r17 = newmultiarray (double)[$i4][$i3];

        i11 = 0;

     label2:
        $i5 = r2[i10];

        if i11 >= $i5 goto label3;

        $i7 = i0 + i9;

        $i8 = $i7 + i11;

        $r26 = r15[$i8];

        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();

        $r28 = (double[]) $r27;

        r17[i11] = $r28;

        i11 = i11 + 1;

        goto label2;

     label3:
        $r25 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r17);

        r16[i10] = $r25;

        $i6 = r2[i10];

        i9 = i9 + $i6;

        i10 = i10 + 1;

        goto label1;

     label4:
        return r16;
    }

    public com.opengamma.util.tuple.Pair makeCurvesFromDerivatives(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[][][], com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve[][], java.lang.String[][], double[][], com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)
    {
        com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[][][] r1;
        com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve[][] r2;
        java.lang.String[][] r3;
        double[][] r4;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r5, r11, $r42;
        java.util.LinkedHashMap r6, r7, r8, $r22, $r23, $r25, $r29;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r9, r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19;
        int[] r17, r19;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] r20, $r31, $r51, $r64, $r66, $r68, r70;
        java.util.ArrayList $r21, $r24;
        com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle $r26;
        com.opengamma.util.tuple.Pair $r27, $r47, $r61, r72;
        com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve[] $r28, $r30, $r40, $r49;
        java.lang.Object[] $r32, $r35, $r38;
        double[] $r33;
        java.lang.Object $r34, $r41;
        java.util.List $r36, $r69;
        java.lang.Double[] $r37, $r39;
        java.lang.String[] $r43, $r53, $r56, $r59;
        com.opengamma.analytics.financial.provider.curve.CurveBuildingBlock $r44;
        java.lang.String $r45, $r54, $r57, $r60;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r46;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[][] $r50, $r63, $r65, $r67;
        com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve $r52, r71;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r73;

        r0 := @this: com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[][][];

        r2 := @parameter1: com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve[][];

        r3 := @parameter2: java.lang.String[][];

        r4 := @parameter3: double[][];

        r5 := @parameter4: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r6 := @parameter5: java.util.LinkedHashMap;

        r7 := @parameter6: java.util.LinkedHashMap;

        r8 := @parameter7: java.util.LinkedHashMap;

        r9 := @parameter8: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        r10 := @parameter9: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        i0 = lengthof r2;

        r11 = virtualinvoke r5.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward copy()>();

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        $r22 = new java.util.LinkedHashMap;

        specialinvoke $r22.<java.util.LinkedHashMap: void <init>()>();

        $r23 = new java.util.LinkedHashMap;

        specialinvoke $r23.<java.util.LinkedHashMap: void <init>()>();

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        $r25 = new java.util.LinkedHashMap;

        specialinvoke $r25.<java.util.LinkedHashMap: void <init>()>();

        i13 = 0;

        i14 = 0;

     label01:
        if i14 >= i0 goto label10;

        $r28 = r2[i14];

        i1 = lengthof $r28;

        r17 = newarray (int)[i1];

        $r29 = new java.util.LinkedHashMap;

        specialinvoke $r29.<java.util.LinkedHashMap: void <init>()>();

        $r30 = r2[i14];

        $i2 = lengthof $r30;

        r19 = newarray (int)[$i2];

        i15 = 0;

        i16 = 0;

     label02:
        if i16 >= i1 goto label03;

        r17[i16] = i15;

        $r65 = r1[i14];

        $r66 = $r65[i16];

        $i11 = lengthof $r66;

        r19[i16] = $i11;

        $i12 = r19[i16];

        i15 = i15 + $i12;

        $r67 = r1[i14];

        $r68 = $r67[i16];

        $r69 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r68);

        interfaceinvoke $r21.<java.util.List: boolean addAll(java.util.Collection)>($r69);

        i16 = i16 + 1;

        goto label02;

     label03:
        r70 = newarray (com.opengamma.analytics.financial.interestrate.InstrumentDerivative)[i15];

        $i3 = interfaceinvoke $r21.<java.util.List: int size()>();

        $r31 = newarray (com.opengamma.analytics.financial.interestrate.InstrumentDerivative)[$i3];

        $r32 = interfaceinvoke $r21.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r31);

        r20 = (com.opengamma.analytics.financial.interestrate.InstrumentDerivative[]) $r32;

        i17 = 0;

     label04:
        if i17 >= i1 goto label05;

        $r63 = r1[i14];

        $r64 = $r63[i17];

        $i10 = r17[i17];

        $i9 = r19[i17];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r64, 0, r70, $i10, $i9);

        i17 = i17 + 1;

        goto label04;

     label05:
        i18 = 0;

     label06:
        if i18 >= i1 goto label07;

        $r49 = r2[i14];

        $r52 = $r49[i18];

        $r50 = r1[i14];

        $r51 = $r50[i18];

        r71 = virtualinvoke $r52.<com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve: com.opengamma.analytics.financial.curve.interestrate.generator.GeneratorYDCurve finalGenerator(java.lang.Object)>($r51);

        $r53 = r3[i14];

        $r54 = $r53[i18];

        virtualinvoke $r29.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, r71);

        $r56 = r3[i14];

        $r57 = $r56[i18];

        virtualinvoke $r22.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, r71);

        $r59 = r3[i14];

        $r60 = $r59[i18];

        $i6 = r17[i18];

        $i8 = i13 + $i6;

        $i7 = r19[i18];

        $r61 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(int,int)>($i8, $i7);

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r61);

        i18 = i18 + 1;

        goto label06;

     label07:
        $r33 = r4[i14];

        r72 = specialinvoke r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.util.tuple.Pair makeUnit(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[],double[],com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)>(r70, $r33, r11, r6, r7, r8, $r29, r9, r10);

        $r34 = virtualinvoke r72.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $r35 = (java.lang.Object[]) $r34;

        $r36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r35);

        interfaceinvoke $r24.<java.util.List: boolean addAll(java.util.Collection)>($r36);

        $i4 = interfaceinvoke $r24.<java.util.List: int size()>();

        $r37 = newarray (java.lang.Double)[$i4];

        $r38 = interfaceinvoke $r24.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r37);

        $r39 = (java.lang.Double[]) $r38;

        r73 = specialinvoke r0.<com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] makeCurveMatrix(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[],int,int[],java.lang.Double[],com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap,com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)>(r20, i13, r19, $r39, r5, r6, r7, r8, $r22, r10);

        i19 = 0;

     label08:
        $r40 = r2[i14];

        $i5 = lengthof $r40;

        if i19 >= $i5 goto label09;

        $r43 = r3[i14];

        $r45 = $r43[i19];

        $r44 = new com.opengamma.analytics.financial.provider.curve.CurveBuildingBlock;

        specialinvoke $r44.<com.opengamma.analytics.financial.provider.curve.CurveBuildingBlock: void <init>(java.util.LinkedHashMap)>($r25);

        $r46 = r73[i19];

        $r47 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>($r44, $r46);

        virtualinvoke $r23.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, $r47);

        i19 = i19 + 1;

        goto label08;

     label09:
        $r41 = virtualinvoke r72.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r42 = (com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward) $r41;

        virtualinvoke r11.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAll(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward)>($r42);

        i13 = i13 + i15;

        i14 = i14 + 1;

        goto label01;

     label10:
        $r26 = new com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle;

        specialinvoke $r26.<com.opengamma.analytics.financial.provider.curve.CurveBuildingBlockBundle: void <init>(java.util.LinkedHashMap)>($r23);

        $r27 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>(r11, $r26);

        return $r27;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra $r0;

        $r0 = new com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.financial.provider.curve.multicurve.MulticurveProviderForwardBuildingRepository: com.opengamma.analytics.math.matrix.MatrixAlgebra MATRIX_ALGEBRA> = $r0;

        return;
    }
}
