final class org.apache.commons.math3.linear.RealVector$2 extends org.apache.commons.math3.linear.RealVector
{
    final org.apache.commons.math3.linear.RealVector val$v;

    void <init>(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v> = r1;

        specialinvoke r0.<org.apache.commons.math3.linear.RealVector: void <init>()>();

        return;
    }

    public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        org.apache.commons.math3.linear.RealVector $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction)>(r1);

        return $r3;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector $r2;
        org.apache.commons.math3.linear.RealVector$2$1 $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

        $r3 = new org.apache.commons.math3.linear.RealVector$2$1;

        specialinvoke $r3.<org.apache.commons.math3.linear.RealVector$2$1: void <init>(org.apache.commons.math3.linear.RealVector$2,java.util.Iterator)>(r0, r1);

        return $r3;
    }

    public java.util.Iterator sparseIterator()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector $r2;
        org.apache.commons.math3.linear.RealVector$2$2 $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: java.util.Iterator sparseIterator()>();

        $r3 = new org.apache.commons.math3.linear.RealVector$2$2;

        specialinvoke $r3.<org.apache.commons.math3.linear.RealVector$2$2: void <init>(org.apache.commons.math3.linear.RealVector$2,java.util.Iterator)>(r0, r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector copy()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector mapAdd(double)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapAdd(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.commons.math3.linear.RealVector mapSubtract(double)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapSubtract(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.commons.math3.linear.RealVector mapMultiply(double)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.commons.math3.linear.RealVector mapDivide(double)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapDivide(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public double dotProduct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }

    public double cosine(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double cosine(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }

    public double getNorm()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        return $d0;
    }

    public double getL1Norm()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getL1Norm()>();

        return $d0;
    }

    public double getLInfNorm()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getLInfNorm()>();

        return $d0;
    }

    public double getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getDistance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }

    public double getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getL1Distance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }

    public double getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: double getLInfDistance(org.apache.commons.math3.linear.RealVector)>(r1);

        return $d0;
    }

    public org.apache.commons.math3.linear.RealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector unitVector()>();

        return $r2;
    }

    public void unitize() throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public double getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        int i0;
        org.apache.commons.math3.linear.RealVector $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        return $d0;
    }

    public void setEntry(int, double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        int i0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void addToEntry(int, double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        int i0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getDimension()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }

    public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector append(double)
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector append(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector getSubVector(int,int)>(i0, i1);

        return $r2;
    }

    public void setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        int i0;
        org.apache.commons.math3.linear.RealVector r1;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void set(double) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public double[] toArray()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r2;
    }

    public boolean isNaN()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: boolean isNaN()>();

        return $z0;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        org.apache.commons.math3.linear.RealVector $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        $r1 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: boolean isInfinite()>();

        return $z0;
    }

    public org.apache.commons.math3.linear.RealVector combine(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0, d1;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.RealVector$2: org.apache.commons.math3.linear.RealVector val$v>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combine(double,double,org.apache.commons.math3.linear.RealVector)>(d0, d1, r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector combineToSelf(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector$2 r0;
        double d0, d1;
        org.apache.commons.math3.linear.RealVector r1;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector$2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;
    }
}
