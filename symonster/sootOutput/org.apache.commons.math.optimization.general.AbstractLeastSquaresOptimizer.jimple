public abstract class org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer extends java.lang.Object implements org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer
{
    public static final int DEFAULT_MAX_ITERATIONS;
    protected org.apache.commons.math.optimization.VectorialConvergenceChecker checker;
    protected double[][] jacobian;
    protected int cols;
    protected int rows;
    protected double[] targetValues;
    protected double[] residualsWeights;
    protected double[] point;
    protected double[] objective;
    protected double[] residuals;
    protected double[][] wjacobian;
    protected double[] wresiduals;
    protected double cost;
    private int maxIterations;
    private int iterations;
    private int maxEvaluations;
    private int objectiveEvaluations;
    private int jacobianEvaluations;
    private org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction function;
    private org.apache.commons.math.analysis.MultivariateMatrixFunction jF;

    protected void <init>()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math.optimization.SimpleVectorialValueChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math.optimization.SimpleVectorialValueChecker;

        specialinvoke $r1.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void setConvergenceChecker(org.apache.commons.math.optimization.VectorialConvergenceChecker)>($r1);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void setMaxIterations(int)>(100);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void setMaxEvaluations(int)>(2147483647);

        return;
    }

    public void setMaxIterations(int)
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxIterations> = i0;

        return;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxIterations>;

        return $i0;
    }

    public int getIterations()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int iterations>;

        return $i0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxEvaluations> = i0;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int objectiveEvaluations>;

        return $i0;
    }

    public int getJacobianEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations>;

        return $i0;
    }

    public void setConvergenceChecker(org.apache.commons.math.optimization.VectorialConvergenceChecker)
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math.optimization.VectorialConvergenceChecker r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: org.apache.commons.math.optimization.VectorialConvergenceChecker;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker> = r1;

        return;
    }

    public org.apache.commons.math.optimization.VectorialConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math.optimization.VectorialConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker>;

        return $r1;
    }

    protected void incrementIterationsCounter() throws org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.optimization.OptimizationException $r1;
        org.apache.commons.math.MaxIterationsExceededException $r2;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int iterations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int iterations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxIterations>;

        if $i1 <= $i2 goto label1;

        $r1 = new org.apache.commons.math.optimization.OptimizationException;

        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxIterations>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math.optimization.OptimizationException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;

     label1:
        return;
    }

    protected void updateJacobian() throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, $r2, $r7, $r9, $r13;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.math.analysis.MultivariateMatrixFunction $r3;
        double[][] $r4, $r5, $r6, $r8, $r12;
        org.apache.commons.math.FunctionEvaluationException $r10;
        java.lang.Object[] $r11;
        org.apache.commons.math.exception.util.LocalizedFormats $r14;
        java.lang.Integer $r15, $r16;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations> = $i1;

        $r3 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.analysis.MultivariateMatrixFunction jF>;

        $r2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math.analysis.MultivariateMatrixFunction: double[][] value(double[])>($r2);

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] jacobian> = $r4;

        $r5 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] jacobian>;

        $i3 = lengthof $r5;

        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        if $i3 == $i2 goto label1;

        $r10 = new org.apache.commons.math.FunctionEvaluationException;

        $r13 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] jacobian>;

        $i6 = lengthof $r12;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r11[0] = $r15;

        $i7 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r11[1] = $r16;

        specialinvoke $r10.<org.apache.commons.math.FunctionEvaluationException: void <init>(double[],org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r14, $r11);

        throw $r10;

     label1:
        i8 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        if i8 >= $i4 goto label5;

        $r6 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] jacobian>;

        r1 = $r6[i8];

        $r7 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residualsWeights>;

        $d1 = $r7[i8];

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        i9 = 0;

     label3:
        $i5 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        if i9 >= $i5 goto label4;

        $d2 = r1[i9];

        $d3 = $d2 * -1.0;

        r1[i9] = $d3;

        $r8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] wjacobian>;

        $r9 = $r8[i8];

        $d4 = r1[i9];

        $d5 = $d4 * d0;

        $r9[i9] = $d5;

        i9 = i9 + 1;

        goto label3;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        return;
    }

    protected void updateResidualsAndCost() throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, i11;
        double[] $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r20;
        org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction $r2;
        org.apache.commons.math.FunctionEvaluationException $r11, $r18;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r15;
        java.lang.Integer $r16, $r17;
        org.apache.commons.math.MaxEvaluationsExceededException $r19;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int objectiveEvaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int objectiveEvaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        $r18 = new org.apache.commons.math.FunctionEvaluationException;

        $r19 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i9 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int maxEvaluations>;

        specialinvoke $r19.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i9);

        $r20 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        specialinvoke $r18.<org.apache.commons.math.FunctionEvaluationException: void <init>(java.lang.Throwable,double[])>($r19, $r20);

        throw $r18;

     label1:
        $r2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction function>;

        $r1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction: double[] value(double[])>($r1);

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] objective> = $r3;

        $r4 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] objective>;

        $i4 = lengthof $r4;

        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        if $i4 == $i3 goto label2;

        $r11 = new org.apache.commons.math.FunctionEvaluationException;

        $r14 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] objective>;

        $i7 = lengthof $r13;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r12[0] = $r16;

        $i8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r12[1] = $r17;

        specialinvoke $r11.<org.apache.commons.math.FunctionEvaluationException: void <init>(double[],org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r15, $r12);

        throw $r11;

     label2:
        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost> = 0.0;

        i11 = 0;

     label3:
        $i5 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        if i11 >= $i5 goto label4;

        $r5 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] targetValues>;

        $d4 = $r5[i11];

        $r6 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] objective>;

        $d3 = $r6[i11];

        d0 = $d4 - $d3;

        $r7 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residuals>;

        $r7[i11] = d0;

        $r9 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] wresiduals>;

        $r8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residualsWeights>;

        $d5 = $r8[i11];

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d5);

        $d7 = d0 * $d6;

        $r9[i11] = $d7;

        $d11 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $r10 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residualsWeights>;

        $d8 = $r10[i11];

        $d9 = $d8 * d0;

        $d10 = $d9 * d0;

        $d12 = $d11 + $d10;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost> = $d12;

        i11 = i11 + 1;

        goto label3;

     label4:
        $d1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost> = $d2;

        return;
    }

    public double getRMS()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $d0 = virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double getChiSquare()>();

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $d1 = (double) $i0;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d2);

        return $d3;
    }

    public double getChiSquare()
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $d1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $d0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $d2 = $d1 * $d0;

        return $d2;
    }

    public double[][] getCovariances() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[][] r1, $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        org.apache.commons.math.linear.LUDecompositionImpl $r2;
        org.apache.commons.math.linear.RealMatrix $r3, r16;
        org.apache.commons.math.linear.DecompositionSolver $r4;
        double[] $r6, $r7, $r9, $r11;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math.linear.InvalidMatrixException $r12;
        org.apache.commons.math.optimization.OptimizationException $r13;
        java.lang.Object[] $r14;
        org.apache.commons.math.exception.util.LocalizedFormats $r15;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void updateJacobian()>();

        $i1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        r1 = newmultiarray (double)[$i1][$i0];

        i5 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        if i5 >= $i2 goto label6;

        i6 = i5;

     label2:
        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        if i6 >= $i3 goto label5;

        d3 = 0.0;

        i7 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        if i7 >= $i4 goto label4;

        $r8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] wjacobian>;

        $r9 = $r8[i7];

        $d1 = $r9[i5];

        $r10 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] wjacobian>;

        $r11 = $r10[i7];

        $d0 = $r11[i6];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i7 = i7 + 1;

        goto label3;

     label4:
        $r6 = r1[i5];

        $r6[i6] = d3;

        $r7 = r1[i6];

        $r7[i5] = d3;

        i6 = i6 + 1;

        goto label2;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $r2 = new org.apache.commons.math.linear.LUDecompositionImpl;

        $r3 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])>(r1);

        specialinvoke $r2.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r16 = interfaceinvoke $r4.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix getInverse()>();

        $r5 = interfaceinvoke r16.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

     label7:
        return $r5;

     label8:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.math.optimization.OptimizationException;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM>;

        $r14 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

        catch org.apache.commons.math.linear.InvalidMatrixException from label6 to label7 with label8;
    }

    public double[] guessParametersErrors() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[][] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.commons.math.optimization.OptimizationException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        $i1 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        if $i1 > $i0 goto label1;

        $r4 = new org.apache.commons.math.optimization.OptimizationException;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_DEGREES_OF_FREEDOM>;

        $r5 = newarray (java.lang.Object)[2];

        $i7 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r5[0] = $r7;

        $i8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r5[1] = $r8;

        specialinvoke $r4.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        r1 = newarray (double)[$i2];

        $d1 = virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double getChiSquare()>();

        $i4 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $i5 = $i4 - $i3;

        $d2 = (double) $i5;

        $d3 = $d1 / $d2;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d3);

        r2 = virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] getCovariances()>();

        i9 = 0;

     label2:
        $i6 = lengthof r1;

        if i9 >= $i6 goto label3;

        $r3 = r2[i9];

        $d4 = $r3[i9];

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d4);

        $d6 = $d5 * d0;

        r1[i9] = $d6;

        i9 = i9 + 1;

        goto label2;

     label3:
        return r1;
    }

    public org.apache.commons.math.optimization.VectorialPointValuePair optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[]) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction r1;
        double[] r2, r3, r4, $r7, $r9, $r11, $r12, $r13, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.commons.math.analysis.MultivariateMatrixFunction $r5;
        java.lang.Object $r6, $r8, $r10;
        double[][] $r14, $r15;
        org.apache.commons.math.optimization.VectorialPointValuePair $r17;
        org.apache.commons.math.optimization.OptimizationException $r18;
        java.lang.Object[] $r19;
        org.apache.commons.math.exception.util.LocalizedFormats $r20;
        java.lang.Integer $r21, $r22;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        $r18 = new org.apache.commons.math.optimization.OptimizationException;

        $r20 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r19 = newarray (java.lang.Object)[2];

        $i10 = lengthof r2;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r19[0] = $r21;

        $i11 = lengthof r3;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r19[1] = $r22;

        specialinvoke $r18.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r18;

     label1:
        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int iterations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int objectiveEvaluations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction function> = r1;

        $r5 = interfaceinvoke r1.<org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction: org.apache.commons.math.analysis.MultivariateMatrixFunction jacobian()>();

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.analysis.MultivariateMatrixFunction jF> = $r5;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] targetValues> = $r7;

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (double[]) $r8;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residualsWeights> = $r9;

        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (double[]) $r10;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point> = $r11;

        $i2 = lengthof r2;

        $r12 = newarray (double)[$i2];

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] residuals> = $r12;

        $i3 = lengthof r2;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows> = $i3;

        $r13 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $i4 = lengthof $r13;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols> = $i4;

        $i6 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i5 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $r14 = newmultiarray (double)[$i6][$i5];

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] jacobian> = $r14;

        $i8 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i7 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $r15 = newmultiarray (double)[$i8][$i7];

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[][] wjacobian> = $r15;

        $i9 = r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $r16 = newarray (double)[$i9];

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double[] wresiduals> = $r16;

        r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: double cost> = #Infinity;

        $r17 = virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math.optimization.VectorialPointValuePair doOptimize()>();

        return $r17;
    }

    protected abstract org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;

    public static void <clinit>()
    {
        <org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: int DEFAULT_MAX_ITERATIONS> = 100;

        return;
    }
}
