public class org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator extends java.lang.Object implements java.util.Iterator
{
    private final int dim;
    private org.apache.commons.math.linear.AbstractRealVector$EntryImpl current;
    private org.apache.commons.math.linear.AbstractRealVector$EntryImpl next;
    final org.apache.commons.math.linear.AbstractRealVector this$0;

    protected void <init>(org.apache.commons.math.linear.AbstractRealVector)
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        org.apache.commons.math.linear.AbstractRealVector r1;
        int $i0;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl $r2, $r3, $r4, $r5;
        double $d0;
        byte $b1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        r1 := @parameter0: org.apache.commons.math.linear.AbstractRealVector;

        r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: int dim> = $i0;

        $r2 = new org.apache.commons.math.linear.AbstractRealVector$EntryImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void <init>(org.apache.commons.math.linear.AbstractRealVector)>(r1);

        r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl current> = $r2;

        $r3 = new org.apache.commons.math.linear.AbstractRealVector$EntryImpl;

        specialinvoke $r3.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void <init>(org.apache.commons.math.linear.AbstractRealVector)>(r1);

        r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next> = $r3;

        $r4 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next>;

        $d0 = virtualinvoke $r4.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: double getValue()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label1;

        $r5 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next>;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: void advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)>($r5);

     label1:
        return;
    }

    protected void advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0;
        byte $b6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        r1 := @parameter0: org.apache.commons.math.linear.AbstractRealVector$EntryImpl;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: int getIndex()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void setIndex(int)>($i1);

        $i2 = virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: int getIndex()>();

        $i3 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: int dim>;

        if $i2 >= $i3 goto label2;

        $d0 = virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: double getValue()>();

        $b6 = $d0 cmpl 0.0;

        if $b6 == 0 goto label1;

     label2:
        $i4 = virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: int getIndex()>();

        $i5 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: int dim>;

        if $i4 < $i5 goto label3;

        virtualinvoke r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void setIndex(int)>(-1);

     label3:
        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: int getIndex()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.math.linear.RealVector$Entry next()
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        int i0;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl $r1, $r2, $r3, $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next>;

        i0 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: int getIndex()>();

        if i0 >= 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl current>;

        virtualinvoke $r2.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void setIndex(int)>(i0);

        $r3 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl next>;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: void advance(org.apache.commons.math.linear.AbstractRealVector$EntryImpl)>($r3);

        $r4 = r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.AbstractRealVector$EntryImpl current>;

        return $r4;
    }

    public void remove()
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        org.apache.commons.math.exception.MathUnsupportedOperationException $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        $r1 = new org.apache.commons.math.exception.MathUnsupportedOperationException;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math.exception.MathUnsupportedOperationException: void <init>(java.lang.Object[])>($r2);

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator r0;
        org.apache.commons.math.linear.RealVector$Entry $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: org.apache.commons.math.linear.RealVector$Entry next()>();

        return $r1;
    }
}
