public class org.apache.commons.math3.filter.KalmanFilter extends java.lang.Object
{
    private final org.apache.commons.math3.filter.ProcessModel processModel;
    private final org.apache.commons.math3.filter.MeasurementModel measurementModel;
    private org.apache.commons.math3.linear.RealMatrix transitionMatrix;
    private org.apache.commons.math3.linear.RealMatrix transitionMatrixT;
    private org.apache.commons.math3.linear.RealMatrix controlMatrix;
    private org.apache.commons.math3.linear.RealMatrix measurementMatrix;
    private org.apache.commons.math3.linear.RealMatrix measurementMatrixT;
    private org.apache.commons.math3.linear.RealVector stateEstimation;
    private org.apache.commons.math3.linear.RealMatrix errorCovariance;

    public void <init>(org.apache.commons.math3.filter.ProcessModel, org.apache.commons.math3.filter.MeasurementModel) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.NonSquareMatrixException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.filter.ProcessModel r1, $r5, $r10, $r12, $r19, $r21, $r23, $r27, $r29;
        org.apache.commons.math3.filter.MeasurementModel r2, $r14, $r20;
        org.apache.commons.math3.linear.RealMatrix r3, r4, $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r16, $r17, $r18, $r25, $r28, $r30, $r31, $r32, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r55, $r58, $r60, $r61, $r62;
        org.apache.commons.math3.linear.RealVector $r22, $r24, $r26, $r56;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        boolean $z0;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r34, $r36, $r45;
        org.apache.commons.math3.linear.NonSquareMatrixException $r50;
        org.apache.commons.math3.exception.DimensionMismatchException $r54;
        org.apache.commons.math3.linear.ArrayRealVector $r57;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r59;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        r1 := @parameter0: org.apache.commons.math3.filter.ProcessModel;

        r2 := @parameter1: org.apache.commons.math3.filter.MeasurementModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel> = r1;

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel> = r2;

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getStateTransitionMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix> = $r6;

        $r7 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r7);

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrixT> = $r9;

        $r10 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getControlMatrix()>();

        if $r11 != null goto label01;

        $r59 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r59.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix> = $r59;

        goto label02;

     label01:
        $r12 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getControlMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix> = $r13;

     label02:
        $r14 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementMatrix()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix> = $r15;

        $r16 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>($r16);

        $r17 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r18 = interfaceinvoke $r17.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrixT> = $r18;

        $r19 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        r3 = interfaceinvoke $r19.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getProcessNoise()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r3);

        $r20 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        r4 = interfaceinvoke $r20.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r4);

        $r21 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r22 = interfaceinvoke $r21.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealVector getInitialStateEstimate()>();

        if $r22 != null goto label03;

        $r57 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r58 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i24 = interfaceinvoke $r58.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r57.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i24);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r57;

        goto label04;

     label03:
        $r23 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r24 = interfaceinvoke $r23.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealVector getInitialStateEstimate()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r24;

     label04:
        $r25 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i0 = interfaceinvoke $r25.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r26 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i1 = virtualinvoke $r26.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i0 == $i1 goto label05;

        $r54 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r55 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i22 = interfaceinvoke $r55.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r56 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i23 = virtualinvoke $r56.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r54.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i22, $i23);

        throw $r54;

     label05:
        $r27 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r28 = interfaceinvoke $r27.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()>();

        if $r28 != null goto label06;

        $r53 = interfaceinvoke r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r53;

        goto label07;

     label06:
        $r29 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r30 = interfaceinvoke $r29.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()>();

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r30;

     label07:
        $r31 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $z0 = interfaceinvoke $r31.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label08;

        $r50 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $r51 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i20 = interfaceinvoke $r51.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r52 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i21 = interfaceinvoke $r52.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r50.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i20, $i21);

        throw $r50;

     label08:
        $r32 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        if $r32 == null goto label09;

        $r41 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i12 = interfaceinvoke $r41.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i12 <= 0 goto label09;

        $r42 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i13 = interfaceinvoke $r42.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i13 <= 0 goto label09;

        $r43 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i14 = interfaceinvoke $r43.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r44 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i15 = interfaceinvoke $r44.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i14 == $i15 goto label09;

        $r45 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $r46 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i16 = interfaceinvoke $r46.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r47 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i17 = interfaceinvoke $r47.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r48 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i18 = interfaceinvoke $r48.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r49 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i19 = interfaceinvoke $r49.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r45.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i16, $i17, $i18, $i19);

        throw $r45;

     label09:
        $r60 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>($r60, r3);

        $r61 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i25 = interfaceinvoke $r61.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r62 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i26 = interfaceinvoke $r62.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i25 == $i26 goto label10;

        $r36 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $r37 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i8 = interfaceinvoke $r37.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r38 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i9 = interfaceinvoke $r38.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r39 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i10 = interfaceinvoke $r39.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r40 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $i11 = interfaceinvoke $r40.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r36.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i8, $i9, $i10, $i11);

        throw $r36;

     label10:
        $i2 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r33 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i3 = interfaceinvoke $r33.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 == $i3 goto label11;

        $r34 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i4 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i5 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r35 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i6 = interfaceinvoke $r35.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i7 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r34.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i4, $i5, $i6, $i7);

        throw $r34;

     label11:
        return;
    }

    public int getStateDimension()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        return $i0;
    }

    public int getMeasurementDimension()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        return $i0;
    }

    public double[] getStateEstimation()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector getStateEstimationVector()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        return $r2;
    }

    public double[][] getErrorCovariance()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix getErrorCovarianceMatrix()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r2;
    }

    public void predict()
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        $r1 = (org.apache.commons.math3.linear.RealVector) null;

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void predict(org.apache.commons.math3.linear.RealVector)>($r1);

        return;
    }

    public void predict(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[] r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void predict(org.apache.commons.math3.linear.RealVector)>($r2);

        return;
    }

    public void predict(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r4, $r14, $r15, $r16;
        org.apache.commons.math3.linear.RealMatrix $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r17, $r19;
        org.apache.commons.math3.filter.ProcessModel $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r18;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r17 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i1 = interfaceinvoke $r17.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r18 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r19 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $i3 = interfaceinvoke $r19.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r18.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i3);

        throw $r18;

     label1:
        $r3 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r2 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r2);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r4;

        if r1 == null goto label2;

        $r14 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r13 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix controlMatrix>;

        $r15 = interfaceinvoke $r13.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r1);

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r15);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r16;

     label2:
        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrix>;

        $r5 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r5);

        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix transitionMatrixT>;

        $r9 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r8);

        $r10 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.ProcessModel processModel>;

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.filter.ProcessModel: org.apache.commons.math3.linear.RealMatrix getProcessNoise()>();

        $r12 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r11);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r12;

        return;
    }

    public void correct(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        double[] r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        virtualinvoke r0.<org.apache.commons.math3.filter.KalmanFilter: void correct(org.apache.commons.math3.linear.RealVector)>($r2);

        return;
    }

    public void correct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.filter.KalmanFilter r0;
        org.apache.commons.math3.linear.RealVector r1, r3, $r14, $r16, $r24, $r25, $r26;
        org.apache.commons.math3.linear.RealMatrix r2, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r19, $r20, $r21, $r22, $r23, $r27, $r28, $r29, $r30, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.filter.MeasurementModel $r12;
        org.apache.commons.math3.linear.CholeskyDecomposition $r17;
        org.apache.commons.math3.linear.DecompositionSolver $r18;
        org.apache.commons.math3.exception.DimensionMismatchException $r32;

        r0 := @this: org.apache.commons.math3.filter.KalmanFilter;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r6 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i1 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r32 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r33 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $i4 = interfaceinvoke $r33.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r32.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, $i4);

        throw $r32;

     label1:
        $r8 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r7 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r7);

        $r10 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrixT>;

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r10);

        $r12 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.filter.MeasurementModel measurementModel>;

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.filter.MeasurementModel: org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()>();

        r2 = interfaceinvoke $r11.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>($r13);

        $r15 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r14 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r16 = interfaceinvoke $r15.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r14);

        r3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r16);

        $r17 = new org.apache.commons.math3.linear.CholeskyDecomposition;

        specialinvoke $r17.<org.apache.commons.math3.linear.CholeskyDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r2);

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.linear.CholeskyDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r20 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r19 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r21 = interfaceinvoke $r19.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r22 = interfaceinvoke $r20.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r21);

        $r23 = interfaceinvoke $r18.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r22);

        r4 = interfaceinvoke $r23.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r24 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation>;

        $r25 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r3);

        $r26 = virtualinvoke $r24.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r25);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealVector stateEstimation> = $r26;

        $i2 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i2);

        $r27 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix measurementMatrix>;

        $r28 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r27);

        $r29 = interfaceinvoke r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r28);

        $r30 = r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance>;

        $r31 = interfaceinvoke $r29.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r30);

        r0.<org.apache.commons.math3.filter.KalmanFilter: org.apache.commons.math3.linear.RealMatrix errorCovariance> = $r31;

        return;
    }
}
