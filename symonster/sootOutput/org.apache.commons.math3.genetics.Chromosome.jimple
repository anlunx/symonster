public abstract class org.apache.commons.math3.genetics.Chromosome extends java.lang.Object implements java.lang.Comparable, org.apache.commons.math3.genetics.Fitness
{
    private static final double NO_FITNESS;
    private double fitness;

    public void <init>()
    {
        org.apache.commons.math3.genetics.Chromosome r0;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.genetics.Chromosome: double fitness> = #-Infinity;

        return;
    }

    public double getFitness()
    {
        org.apache.commons.math3.genetics.Chromosome r0;
        double $d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        $d0 = r0.<org.apache.commons.math3.genetics.Chromosome: double fitness>;

        $b0 = $d0 cmpl #-Infinity;

        if $b0 != 0 goto label1;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.genetics.Chromosome: double fitness()>();

        r0.<org.apache.commons.math3.genetics.Chromosome: double fitness> = $d2;

     label1:
        $d1 = r0.<org.apache.commons.math3.genetics.Chromosome: double fitness>;

        return $d1;
    }

    public int compareTo(org.apache.commons.math3.genetics.Chromosome)
    {
        org.apache.commons.math3.genetics.Chromosome r0, r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.genetics.Chromosome: double getFitness()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.genetics.Chromosome: double getFitness()>();

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;
    }

    protected boolean isSame(org.apache.commons.math3.genetics.Chromosome)
    {
        org.apache.commons.math3.genetics.Chromosome r0, r1;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        return 0;
    }

    protected org.apache.commons.math3.genetics.Chromosome findSameChromosome(org.apache.commons.math3.genetics.Population)
    {
        org.apache.commons.math3.genetics.Chromosome r0, r3;
        org.apache.commons.math3.genetics.Population r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        r2 = interfaceinvoke r1.<org.apache.commons.math3.genetics.Population: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.genetics.Chromosome) $r4;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.genetics.Chromosome: boolean isSame(org.apache.commons.math3.genetics.Chromosome)>(r3);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void searchForFitnessUpdate(org.apache.commons.math3.genetics.Population)
    {
        org.apache.commons.math3.genetics.Chromosome r0, r2;
        org.apache.commons.math3.genetics.Population r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        r1 := @parameter0: org.apache.commons.math3.genetics.Population;

        r2 = virtualinvoke r0.<org.apache.commons.math3.genetics.Chromosome: org.apache.commons.math3.genetics.Chromosome findSameChromosome(org.apache.commons.math3.genetics.Population)>(r1);

        if r2 == null goto label1;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.genetics.Chromosome: double getFitness()>();

        r0.<org.apache.commons.math3.genetics.Chromosome: double fitness> = $d0;

     label1:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.genetics.Chromosome r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.Chromosome;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.genetics.Chromosome) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.genetics.Chromosome: int compareTo(org.apache.commons.math3.genetics.Chromosome)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.genetics.Chromosome: double NO_FITNESS> = #-Infinity;

        return;
    }
}
