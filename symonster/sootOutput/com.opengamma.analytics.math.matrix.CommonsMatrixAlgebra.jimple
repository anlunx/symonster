public class com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra extends com.opengamma.analytics.math.matrix.MatrixAlgebra
{

    public void <init>()
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        specialinvoke r0.<com.opengamma.analytics.math.matrix.MatrixAlgebra: void <init>()>();

        return;
    }

    public double getCondition(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.math.linear.RealMatrix r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Class $r7;
        java.lang.String $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10;
        org.apache.commons.math.linear.SingularValueDecompositionImpl $r11;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r10);

        $r11 = new org.apache.commons.math.linear.SingularValueDecompositionImpl;

        specialinvoke $r11.<org.apache.commons.math.linear.SingularValueDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>(r2);

        $d0 = interfaceinvoke $r11.<org.apache.commons.math.linear.SingularValueDecomposition: double getConditionNumber()>();

        return $d0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find condition number of DoubleMatrix2D; have ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public double getDeterminant(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.math.linear.RealMatrix r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Class $r7;
        java.lang.String $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10;
        org.apache.commons.math.linear.LUDecompositionImpl $r11;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r10);

        $r11 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r11.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>(r2);

        $d0 = interfaceinvoke $r11.<org.apache.commons.math.linear.LUDecomposition: double getDeterminant()>();

        return $d0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find determinant of DoubleMatrix2D; have ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        org.apache.commons.math.linear.RealVector r3, r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;
        java.lang.Class $r8, $r11;
        java.lang.String $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r15;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label1;

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r3 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r14);

        $r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r4 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r15);

        $d0 = interfaceinvoke r3.<org.apache.commons.math.linear.RealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r4);

        return $d0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find inner product of DoubleMatrix1D; have ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.math.linear.RealMatrix r2, r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r8;
        java.lang.String $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r11, $r14;
        org.apache.commons.math.linear.SingularValueDecompositionImpl $r12;
        org.apache.commons.math.linear.DecompositionSolver $r13;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "matrix was null");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r11 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r11);

        $r12 = new org.apache.commons.math.linear.SingularValueDecompositionImpl;

        specialinvoke $r12.<org.apache.commons.math.linear.SingularValueDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>(r2);

        $r13 = interfaceinvoke $r12.<org.apache.commons.math.linear.SingularValueDecomposition: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r4 = interfaceinvoke $r13.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix getInverse()>();

        $r14 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)>(r4);

        return $r14;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find inverse of DoubleMatrix2D; have ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public double getNorm1(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        int $i0, i1;
        org.apache.commons.math.linear.RealVector $r9, r11;
        double $d0, $d1, d2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10;
        org.apache.commons.math.linear.RealMatrix r12;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r11 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r10);

        $d1 = interfaceinvoke r11.<org.apache.commons.math.linear.RealVector: double getL1Norm()>();

        return $d1;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label4;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r12 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r8);

        d2 = 0.0;

        $i0 = interfaceinvoke r12.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r9 = interfaceinvoke r12.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealVector getColumnVector(int)>(i1);

        $d0 = interfaceinvoke $r9.<org.apache.commons.math.linear.RealVector: double getL1Norm()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(d2, $d0);

        i1 = i1 + -1;

        goto label2;

     label3:
        return d2;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find norm1 of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double getNorm2(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9;
        org.apache.commons.math.linear.SingularValueDecompositionImpl $r10;
        double $d0, $d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r11;
        org.apache.commons.math.linear.RealVector r12;
        org.apache.commons.math.linear.RealMatrix r13;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r11 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r12 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r11);

        $d1 = interfaceinvoke r12.<org.apache.commons.math.linear.RealVector: double getNorm()>();

        return $d1;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label2;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r13 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r9);

        $r10 = new org.apache.commons.math.linear.SingularValueDecompositionImpl;

        specialinvoke $r10.<org.apache.commons.math.linear.SingularValueDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>(r13);

        $d0 = interfaceinvoke $r10.<org.apache.commons.math.linear.SingularValueDecomposition: double getNorm()>();

        return $d0;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find norm2 of DoubleMatrix2D; have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        int $i0, i1;
        org.apache.commons.math.linear.RealVector $r9, r11;
        double $d0, $d1, d2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10;
        org.apache.commons.math.linear.RealMatrix r12;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r11 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r10);

        $d1 = interfaceinvoke r11.<org.apache.commons.math.linear.RealVector: double getLInfNorm()>();

        return $d1;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label4;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r12 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r8);

        d2 = 0.0;

        $i0 = interfaceinvoke r12.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r9 = interfaceinvoke r12.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealVector getRowVector(int)>(i1);

        $d0 = interfaceinvoke $r9.<org.apache.commons.math.linear.RealVector: double getL1Norm()>();

        d2 = staticinvoke <java.lang.Math: double max(double,double)>(d2, $d0);

        i1 = i1 + -1;

        goto label2;

     label3:
        return d2;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find normInfinity of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getOuterProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        org.apache.commons.math.linear.RealVector r3, r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;
        java.lang.Class $r8, $r11;
        java.lang.String $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r15;
        org.apache.commons.math.linear.RealMatrix $r16;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r17;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label1;

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r3 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r14);

        $r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r4 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r15);

        $r16 = interfaceinvoke r3.<org.apache.commons.math.linear.RealVector: org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector)>(r4);

        $r17 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)>($r16);

        return $r17;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find outer product of DoubleMatrix1D; have ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, int)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        int i0;
        double $d0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        i0 := @parameter1: int;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $d0 = (double) i0;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix,double)>(r1, $d0);

        return $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, double)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math.linear.RealMatrix r2, $r15, $r17, $r18, r22;
        double[] r4, r5, $r20;
        int i0, i2;
        double[][] r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.Class $r10;
        java.lang.String $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r13, $r19;
        org.apache.commons.math.linear.EigenDecompositionImpl $r14;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r16;
        byte $b1;
        org.apache.commons.lang.NotImplementedException $r21;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        d0 := @parameter1: double;

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label4;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r13);

        $r14 = new org.apache.commons.math.linear.EigenDecompositionImpl;

        specialinvoke $r14.<org.apache.commons.math.linear.EigenDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r2, 0.0);

        r4 = interfaceinvoke $r14.<org.apache.commons.math.linear.EigenDecomposition: double[] getRealEigenvalues()>();

        r5 = interfaceinvoke $r14.<org.apache.commons.math.linear.EigenDecomposition: double[] getImagEigenvalues()>();

        i0 = lengthof r4;

        r6 = newmultiarray (double)[i0][i0];

        i2 = i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r20 = r6[i2];

        $d1 = r4[i2];

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, d0);

        $r20[i2] = $d2;

        $d3 = r5[i2];

        $b1 = $d3 cmpl 0.0;

        if $b1 == 0 goto label2;

        $r21 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r21.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Cannot handle complex eigenvalues in getPower");

        throw $r21;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        $r15 = interfaceinvoke $r14.<org.apache.commons.math.linear.EigenDecomposition: org.apache.commons.math.linear.RealMatrix getV()>();

        $r16 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        specialinvoke $r16.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][])>(r6);

        $r17 = interfaceinvoke $r14.<org.apache.commons.math.linear.EigenDecomposition: org.apache.commons.math.linear.RealMatrix getVT()>();

        $r18 = virtualinvoke $r16.<org.apache.commons.math.linear.Array2DRowRealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r17);

        r22 = interfaceinvoke $r15.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r18);

        $r19 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)>(r22);

        return $r19;

     label4:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find pow of DoubleMatrix2D; have ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;
    }

    public double getTrace(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.math.linear.RealMatrix r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r9);

        $d0 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: double getTrace()>();

        return $d0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find trace of DoubleMatrix2D; have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.math.linear.RealMatrix r2, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9, $r11;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r9);

        $r10 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix transpose()>();

        $r11 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)>($r10);

        return $r11;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find transpose of DoubleMatrix2D; have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        org.apache.commons.math.linear.RealMatrix r3, $r8, r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r4, $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r5, $r7, $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10;

        r0 := @this: com.opengamma.analytics.math.matrix.CommonsMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z4, "Cannot have 1D matrix as first argument");

        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label6;

        $r5 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r3 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r5);

        $z2 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z2 == 0 goto label3;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r11 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrapAsMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r10);

        goto label5;

     label3:
        $z3 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z3 == 0 goto label4;

        $r7 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        r11 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r7);

        goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only have 1D or 2D matrix as second argument");

        throw $r6;

     label5:
        $r8 = interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>(r11);

        $r9 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)>($r8);

        return $r9;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only multiply 2D and 1D matrices");

        throw $r4;
    }
}
