public class org.apache.commons.math.stat.descriptive.rank.Percentile extends org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int MIN_SELECT_SIZE;
    private static final int MAX_CACHED_LEVELS;
    private double quantile;
    private int[] cachedPivots;

    public void <init>()
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: void <init>(double)>(50.0);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile> = 0.0;

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: void setQuantile(double)>(d0);

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

        return;
    }

    public void <init>(org.apache.commons.math.stat.descriptive.rank.Percentile)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0, r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: org.apache.commons.math.stat.descriptive.rank.Percentile;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile> = 0.0;

        staticinvoke <org.apache.commons.math.stat.descriptive.rank.Percentile: void copy(org.apache.commons.math.stat.descriptive.rank.Percentile,org.apache.commons.math.stat.descriptive.rank.Percentile)>(r1, r0);

        return;
    }

    public void setData(double[])
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

        goto label2;

     label1:
        $r2 = newarray (int)[1023];

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots> = $r2;

        $r3 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, -1);

     label2:
        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: void setData(double[])>(r1);

        return;
    }

    public void setData(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int i0, i1;
        int[] $r2, $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots> = null;

        goto label2;

     label1:
        $r2 = newarray (int)[1023];

        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots> = $r2;

        $r3 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, -1);

     label2:
        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: void setData(double[],int,int)>(r1, i0, i1);

        return;
    }

    public double evaluate(double)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double d0, $d1;
        double[] $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double evaluate(double[],double)>($r1, d0);

        return $d1;
    }

    public double evaluate(double[], double)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        double d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: boolean test(double[],int,int)>(r1, 0, 0);

        $i0 = lengthof r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double evaluate(double[],int,int,double)>(r1, 0, $i0, d0);

        return $d1;
    }

    public double evaluate(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $d0 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile>;

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double evaluate(double[],int,int,double)>(r1, i0, i1, $d0);

        return $d1;
    }

    public double evaluate(double[], int, int, double)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1, $r6, r7;
        int i0, i1, i2, $i7, $i8;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        byte $b3, $b4, $b5, $b6;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.IllegalArgumentException $r5;
        int[] r8;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: boolean test(double[],int,int)>(r1, i0, i1);

        $b3 = d0 cmpl 100.0;

        if $b3 > 0 goto label1;

        $b4 = d0 cmpg 0.0;

        if $b4 > 0 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUNDS_QUANTILE_VALUE>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r5;

     label2:
        if i1 != 0 goto label3;

        return #NaN;

     label3:
        if i1 != 1 goto label4;

        $d14 = r1[i0];

        return $d14;

     label4:
        d1 = (double) i1;

        $d7 = d1 + 1.0;

        $d8 = d0 * $d7;

        d2 = $d8 / 100.0;

        d3 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d2);

        i2 = (int) d3;

        d4 = d2 - d3;

        $r6 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        if r1 != $r6 goto label5;

        r7 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        r8 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        goto label6;

     label5:
        r7 = newarray (double)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r7, 0, i1);

        r8 = newarray (int)[1023];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r8, -1);

     label6:
        $b5 = d2 cmpg 1.0;

        if $b5 >= 0 goto label7;

        $d13 = specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double select(double[],int[],int)>(r7, r8, 0);

        return $d13;

     label7:
        $b6 = d2 cmpl d1;

        if $b6 < 0 goto label8;

        $i8 = i1 - 1;

        $d12 = specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double select(double[],int[],int)>(r7, r8, $i8);

        return $d12;

     label8:
        $i7 = i2 - 1;

        d5 = specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double select(double[],int[],int)>(r7, r8, $i7);

        d6 = specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double select(double[],int[],int)>(r7, r8, i2);

        $d9 = d6 - d5;

        $d10 = d4 * $d9;

        $d11 = d5 + $d10;

        return $d11;
    }

    private double select(double[], int[], int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i12 = 0;

        i13 = lengthof r1;

        i14 = 0;

     label1:
        $i1 = i13 - i12;

        if $i1 <= 15 goto label7;

        $i2 = lengthof r2;

        if i14 >= $i2 goto label2;

        $i11 = r2[i14];

        if $i11 < 0 goto label2;

        i15 = r2[i14];

        goto label3;

     label2:
        $i3 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int medianOf3(double[],int,int)>(r1, i12, i13);

        i15 = specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int partition(double[],int,int,int)>(r1, i12, i13, $i3);

        $i4 = lengthof r2;

        if i14 >= $i4 goto label3;

        r2[i14] = i15;

     label3:
        if i0 != i15 goto label4;

        $d1 = r1[i0];

        return $d1;

     label4:
        if i0 >= i15 goto label5;

        i13 = i15;

        $i8 = 2 * i14;

        $i10 = $i8 + 1;

        $i9 = lengthof r2;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

        goto label6;

     label5:
        i12 = i15 + 1;

        $i5 = 2 * i14;

        $i7 = $i5 + 2;

        $i6 = lengthof r2;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

     label6:
        goto label1;

     label7:
        specialinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: void insertionSort(double[],int,int)>(r1, i12, i13);

        $d0 = r1[i0];

        return $d0;
    }

    int medianOf3(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i11, $i12;
        double d0, d1, d2;
        byte $b6, $b7, $b8, $b9, $b10;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 - 1;

        $i4 = i2 - i0;

        $i5 = $i4 / 2;

        i3 = i0 + $i5;

        d0 = r1[i0];

        d1 = r1[i3];

        d2 = r1[i2];

        $b6 = d0 cmpg d1;

        if $b6 >= 0 goto label4;

        $b9 = d1 cmpg d2;

        if $b9 >= 0 goto label1;

        return i3;

     label1:
        $b10 = d0 cmpg d2;

        if $b10 >= 0 goto label2;

        $i11 = i2;

        goto label3;

     label2:
        $i11 = i0;

     label3:
        return $i11;

     label4:
        $b7 = d0 cmpg d2;

        if $b7 >= 0 goto label5;

        return i0;

     label5:
        $b8 = d1 cmpg d2;

        if $b8 >= 0 goto label6;

        $i12 = i2;

        goto label7;

     label6:
        $i12 = i3;

     label7:
        return $i12;
    }

    private int partition(double[], int, int, int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int i0, i1, i2, $i4, $i5, i8, i9;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b3, $b6, $b7;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        d0 = r1[i2];

        $d2 = r1[i0];

        r1[i2] = $d2;

        i8 = i0 + 1;

        i9 = i1 - 1;

     label1:
        if i8 >= i9 goto label5;

     label2:
        if i8 >= i9 goto label3;

        $d6 = r1[i9];

        $b7 = $d6 cmpl d0;

        if $b7 < 0 goto label3;

        i9 = i9 + -1;

        goto label2;

     label3:
        if i8 >= i9 goto label4;

        $d5 = r1[i8];

        $b6 = $d5 cmpg d0;

        if $b6 > 0 goto label4;

        i8 = i8 + 1;

        goto label3;

     label4:
        if i8 >= i9 goto label1;

        d1 = r1[i8];

        $i4 = i8;

        i8 = i8 + 1;

        $d4 = r1[i9];

        r1[$i4] = $d4;

        $i5 = i9;

        i9 = i9 + -1;

        r1[$i5] = d1;

        goto label1;

     label5:
        if i8 >= i1 goto label6;

        $d3 = r1[i8];

        $b3 = $d3 cmpl d0;

        if $b3 <= 0 goto label7;

     label6:
        i8 = i8 + -1;

     label7:
        $d7 = r1[i8];

        r1[i0] = $d7;

        r1[i8] = d0;

        return i8;
    }

    private void insertionSort(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double[] r1;
        int i0, i1, $i2, $i4, i5, i6;
        double d0, $d1, $d2;
        byte $b3;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0 + 1;

     label1:
        if i5 >= i1 goto label4;

        d0 = r1[i5];

        i6 = i5 - 1;

     label2:
        if i6 < i0 goto label3;

        $d1 = r1[i6];

        $b3 = d0 cmpg $d1;

        if $b3 >= 0 goto label3;

        $i4 = i6 + 1;

        $d2 = r1[i6];

        r1[$i4] = $d2;

        i6 = i6 + -1;

        goto label2;

     label3:
        $i2 = i6 + 1;

        r1[$i2] = d0;

        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    public double getQuantile()
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        $d0 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile>;

        return $d0;
    }

    public void setQuantile(double)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0;
        double d0;
        byte $b0, $b1;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 100.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUNDS_QUANTILE_VALUE>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label2:
        r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile> = d0;

        return;
    }

    public org.apache.commons.math.stat.descriptive.rank.Percentile copy()
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0, $r2;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        $r2 = new org.apache.commons.math.stat.descriptive.rank.Percentile;

        specialinvoke $r2.<org.apache.commons.math.stat.descriptive.rank.Percentile: void <init>()>();

        staticinvoke <org.apache.commons.math.stat.descriptive.rank.Percentile: void copy(org.apache.commons.math.stat.descriptive.rank.Percentile,org.apache.commons.math.stat.descriptive.rank.Percentile)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math.stat.descriptive.rank.Percentile, org.apache.commons.math.stat.descriptive.rank.Percentile)
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0, r1;
        double[] $r2;
        int[] $r3, $r4, $r5, $r6;
        double $d0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.rank.Percentile;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.rank.Percentile;

        $r2 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math.stat.descriptive.rank.Percentile: void setData(double[])>($r2);

        $r3 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        if $r3 == null goto label1;

        $r6 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $r5 = r1.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $r4 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: int[] cachedPivots>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i0);

     label1:
        $d0 = r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile>;

        r1.<org.apache.commons.math.stat.descriptive.rank.Percentile: double quantile> = $d0;

        return;
    }

    public volatile org.apache.commons.math.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.rank.Percentile r0, $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.rank.Percentile;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.rank.Percentile: org.apache.commons.math.stat.descriptive.rank.Percentile copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.stat.descriptive.rank.Percentile: int MAX_CACHED_LEVELS> = 10;

        <org.apache.commons.math.stat.descriptive.rank.Percentile: int MIN_SELECT_SIZE> = 15;

        <org.apache.commons.math.stat.descriptive.rank.Percentile: long serialVersionUID> = -8091216485095130416L;

        return;
    }
}
