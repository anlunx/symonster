public class org.apache.commons.math3.special.Beta extends java.lang.Object
{
    private static final double DEFAULT_EPSILON;
    private static final double HALF_LOG_TWO_PI;
    private static final double[] DELTA;

    private void <init>()
    {
        org.apache.commons.math3.special.Beta r0;

        r0 := @this: org.apache.commons.math3.special.Beta;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double regularizedBeta(double, double, double)
    {
        double d0, d1, d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, 1.0E-14, 2147483647);

        return $d3;
    }

    public static double regularizedBeta(double, double, double, double)
    {
        double d0, d1, d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d4 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, d3, 2147483647);

        return $d4;
    }

    public static double regularizedBeta(double, double, double, int)
    {
        double d0, d1, d2, $d3;
        int i0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $d3 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, 1.0E-14, i0);

        return $d3;
    }

    public static double regularizedBeta(double, double, double, double, int)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, d28;
        int i0;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        org.apache.commons.math3.special.Beta$1 $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        i0 := @parameter4: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z2 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 > 0 goto label1;

        $b3 = d1 cmpg 0.0;

        if $b3 <= 0 goto label1;

        $b4 = d2 cmpg 0.0;

        if $b4 > 0 goto label2;

     label1:
        d28 = #NaN;

        goto label4;

     label2:
        $d6 = d1 + 1.0;

        $d4 = 2.0 + d2;

        $d5 = $d4 + d1;

        $d7 = $d6 / $d5;

        $b5 = d0 cmpl $d7;

        if $b5 <= 0 goto label3;

        $d25 = 1.0 - d0;

        $d23 = d2 + 1.0;

        $d21 = 2.0 + d2;

        $d22 = $d21 + d1;

        $d24 = $d23 / $d22;

        $b6 = $d25 cmpg $d24;

        if $b6 > 0 goto label3;

        $d26 = 1.0 - d0;

        $d27 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double,double,int)>($d26, d2, d1, d3, i0);

        d28 = 1.0 - $d27;

        goto label4;

     label3:
        $r1 = new org.apache.commons.math3.special.Beta$1;

        specialinvoke $r1.<org.apache.commons.math3.special.Beta$1: void <init>(double,double)>(d2, d1);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d10 = d1 * $d8;

        $d9 = neg d0;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d9);

        $d12 = d2 * $d11;

        $d13 = $d10 + $d12;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d15 = $d13 - $d14;

        $d16 = staticinvoke <org.apache.commons.math3.special.Beta: double logBeta(double,double)>(d1, d2);

        $d17 = $d15 - $d16;

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d17);

        $d19 = $d18 * 1.0;

        $d20 = virtualinvoke $r1.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>(d0, d3, i0);

        d28 = $d19 / $d20;

     label4:
        return d28;
    }

    public static double logBeta(double, double, double, int)
    {
        double d0, d1, d2, $d3;
        int i0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $d3 = staticinvoke <org.apache.commons.math3.special.Beta: double logBeta(double,double)>(d0, d1);

        return $d3;
    }

    private static double logGammaSum(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        org.apache.commons.math3.exception.OutOfRangeException $r0, $r4;
        java.lang.Double $r1, $r2, $r3, $r5, $r6, $r7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 1.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 2.0;

        if $b1 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $b2 = d1 cmpg 1.0;

        if $b2 < 0 goto label3;

        $b3 = d1 cmpl 2.0;

        if $b3 <= 0 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;

     label4:
        $d4 = d0 - 1.0;

        $d3 = d1 - 1.0;

        d2 = $d4 + $d3;

        $b4 = d2 cmpg 0.5;

        if $b4 > 0 goto label5;

        $d14 = 1.0 + d2;

        $d15 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d14);

        return $d15;

     label5:
        $b5 = d2 cmpg 1.5;

        if $b5 > 0 goto label6;

        $d11 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>(d2);

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d2);

        $d13 = $d11 + $d12;

        return $d13;

     label6:
        $d5 = d2 - 1.0;

        $d6 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d5);

        $d7 = 1.0 + d2;

        $d8 = d2 * $d7;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d8);

        $d10 = $d6 + $d9;

        return $d10;
    }

    private static double logGammaMinusLogGammaSum(double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, $d14;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r0, $r3;
        java.lang.Double $r1, $r2, $r4, $r5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label1:
        $b1 = d1 cmpg 10.0;

        if $b1 >= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label2:
        $b2 = d0 cmpg d1;

        if $b2 > 0 goto label3;

        $d11 = d0 - 0.5;

        d12 = d1 + $d11;

        d13 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>(d0, d1);

        goto label4;

     label3:
        $d4 = d1 - 0.5;

        d12 = d0 + $d4;

        d13 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>(d1, d0);

     label4:
        $d5 = d0 / d1;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d5);

        d2 = d12 * $d6;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d8 = $d7 - 1.0;

        d3 = d0 * $d8;

        $b3 = d2 cmpg d3;

        if $b3 > 0 goto label5;

        $d10 = d13 - d2;

        $d14 = $d10 - d3;

        goto label6;

     label5:
        $d9 = d13 - d3;

        $d14 = $d9 - d2;

     label6:
        return $d14;
    }

    private static double deltaMinusDeltaSum(double, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;
        double[] r0, $r5, $r6, $r7, $r8, $r9;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r4, $r11;
        java.lang.Integer $r3, $r12;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r10;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b2 = d1 cmpg 10.0;

        if $b2 >= 0 goto label3;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r11, $r12, 1);

        throw $r10;

     label3:
        d2 = d0 / d1;

        $d7 = 1.0 + d2;

        d3 = d2 / $d7;

        $d8 = 1.0 + d2;

        d4 = 1.0 / $d8;

        d5 = d4 * d4;

        $r5 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i3 = lengthof $r5;

        r0 = newarray (double)[$i3];

        r0[0] = 1.0;

        i11 = 1;

     label4:
        $i4 = lengthof r0;

        if i11 >= $i4 goto label5;

        $i10 = i11 - 1;

        $d17 = r0[$i10];

        $d18 = d5 * $d17;

        $d19 = d4 + $d18;

        $d20 = 1.0 + $d19;

        r0[i11] = $d20;

        i11 = i11 + 1;

        goto label4;

     label5:
        d21 = 10.0 / d1;

        d6 = d21 * d21;

        $r7 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $r6 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i5 = lengthof $r6;

        $i6 = $i5 - 1;

        $d10 = $r7[$i6];

        $i7 = lengthof r0;

        $i8 = $i7 - 1;

        $d9 = r0[$i8];

        d22 = $d10 * $d9;

        $r8 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i9 = lengthof $r8;

        i12 = $i9 - 2;

     label6:
        if i12 < 0 goto label7;

        $d16 = d6 * d22;

        $r9 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $d14 = $r9[i12];

        $d13 = r0[i12];

        $d15 = $d14 * $d13;

        d22 = $d16 + $d15;

        i12 = i12 + -1;

        goto label6;

     label7:
        $d11 = d22 * d3;

        $d12 = $d11 / d1;

        return $d12;
    }

    private static double sumDeltaMinusDeltaSum(double, double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, d11;
        byte $b0, $b1;
        double[] $r0, $r1, $r2, $r3;
        int $i2, $i3, $i4, i5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4, $r7;
        java.lang.Double $r5, $r6, $r8, $r9;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 10.0;

        if $b0 >= 0 goto label1;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r8, $r9, 1);

        throw $r7;

     label1:
        $b1 = d1 cmpg 10.0;

        if $b1 >= 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d0, d1);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d1);

        d4 = 10.0 / d2;

        d5 = d4 * d4;

        $r1 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $r0 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i2 = lengthof $r0;

        $i3 = $i2 - 1;

        d11 = $r1[$i3];

        $r2 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $i4 = lengthof $r2;

        i5 = $i4 - 2;

     label3:
        if i5 < 0 goto label4;

        $d10 = d5 * d11;

        $r3 = <org.apache.commons.math3.special.Beta: double[] DELTA>;

        $d9 = $r3[i5];

        d11 = $d10 + $d9;

        i5 = i5 + -1;

        goto label3;

     label4:
        $d6 = d11 / d2;

        $d7 = staticinvoke <org.apache.commons.math3.special.Beta: double deltaMinusDeltaSum(double,double)>(d2, d3);

        $d8 = $d6 + $d7;

        return $d8;
    }

    public static double logBeta(double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, d81, d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93;
        boolean $z0, $z1;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13;
        int i14, i15;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label01;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label01;

        $b1 = d1 cmpg 0.0;

        if $b1 > 0 goto label02;

     label01:
        return #NaN;

     label02:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d0, d1);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d1);

        $b2 = d2 cmpl 10.0;

        if $b2 < 0 goto label04;

        d81 = staticinvoke <org.apache.commons.math3.special.Beta: double sumDeltaMinusDeltaSum(double,double)>(d2, d3);

        d82 = d2 / d3;

        $d64 = 1.0 + d82;

        d83 = d82 / $d64;

        $d65 = d2 - 0.5;

        $d66 = neg $d65;

        $d67 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d83);

        d84 = $d66 * $d67;

        $d68 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>(d82);

        d4 = d3 * $d68;

        $b13 = d84 cmpg d4;

        if $b13 > 0 goto label03;

        $d75 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        $d76 = -0.5 * $d75;

        $d77 = $d76 + 0.9189385332046727;

        $d78 = $d77 + d81;

        $d79 = $d78 - d84;

        $d80 = $d79 - d4;

        return $d80;

     label03:
        $d69 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        $d70 = -0.5 * $d69;

        $d71 = $d70 + 0.9189385332046727;

        $d72 = $d71 + d81;

        $d73 = $d72 - d4;

        $d74 = $d73 - d84;

        return $d74;

     label04:
        $b3 = d2 cmpl 2.0;

        if $b3 <= 0 goto label13;

        $b9 = d3 cmpl 1000.0;

        if $b9 <= 0 goto label07;

        $d50 = d2 - 1.0;

        $d51 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d50);

        i14 = (int) $d51;

        d85 = 1.0;

        d86 = d2;

        i15 = 0;

     label05:
        if i15 >= i14 goto label06;

        d86 = d86 - 1.0;

        $d61 = d86 / d3;

        $d62 = 1.0 + $d61;

        $d63 = d86 / $d62;

        d85 = d85 * $d63;

        i15 = i15 + 1;

        goto label05;

     label06:
        $d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d85);

        $d53 = (double) i14;

        $d54 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d3);

        $d55 = $d53 * $d54;

        $d56 = $d52 - $d55;

        $d57 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d86);

        $d58 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d86, d3);

        $d59 = $d57 + $d58;

        $d60 = $d56 + $d59;

        return $d60;

     label07:
        d87 = 1.0;

        d88 = d2;

     label08:
        $b10 = d88 cmpl 2.0;

        if $b10 <= 0 goto label09;

        d88 = d88 - 1.0;

        d89 = d88 / d3;

        $d48 = 1.0 + d89;

        $d49 = d89 / $d48;

        d87 = d87 * $d49;

        goto label08;

     label09:
        $b11 = d3 cmpg 10.0;

        if $b11 >= 0 goto label12;

        d90 = 1.0;

        d91 = d3;

     label10:
        $b12 = d91 cmpl 2.0;

        if $b12 <= 0 goto label11;

        d91 = d91 - 1.0;

        $d46 = d88 + d91;

        $d47 = d91 / $d46;

        d90 = d90 * $d47;

        goto label10;

     label11:
        $d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d87);

        $d38 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d90);

        $d39 = $d37 + $d38;

        $d40 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d88);

        $d41 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d91);

        $d42 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>(d88, d91);

        $d43 = $d41 - $d42;

        $d44 = $d40 + $d43;

        $d45 = $d39 + $d44;

        return $d45;

     label12:
        $d32 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d87);

        $d33 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d88);

        $d34 = $d32 + $d33;

        $d35 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d88, d3);

        $d36 = $d34 + $d35;

        return $d36;

     label13:
        $b4 = d2 cmpl 1.0;

        if $b4 < 0 goto label18;

        $b6 = d3 cmpl 2.0;

        if $b6 <= 0 goto label17;

        $b7 = d3 cmpg 10.0;

        if $b7 >= 0 goto label16;

        d92 = 1.0;

        d93 = d3;

     label14:
        $b8 = d93 cmpl 2.0;

        if $b8 <= 0 goto label15;

        d93 = d93 - 1.0;

        $d30 = d2 + d93;

        $d31 = d93 / $d30;

        d92 = d92 * $d31;

        goto label14;

     label15:
        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d92);

        $d24 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d2);

        $d25 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d93);

        $d26 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>(d2, d93);

        $d27 = $d25 - $d26;

        $d28 = $d24 + $d27;

        $d29 = $d23 + $d28;

        return $d29;

     label16:
        $d20 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d2);

        $d21 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d2, d3);

        $d22 = $d20 + $d21;

        return $d22;

     label17:
        $d15 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d2);

        $d16 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        $d17 = $d15 + $d16;

        $d18 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaSum(double,double)>(d2, d3);

        $d19 = $d17 - $d18;

        return $d19;

     label18:
        $b5 = d3 cmpl 10.0;

        if $b5 < 0 goto label19;

        $d12 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d2);

        $d13 = staticinvoke <org.apache.commons.math3.special.Beta: double logGammaMinusLogGammaSum(double,double)>(d2, d3);

        $d14 = $d12 + $d13;

        return $d14;

     label19:
        $d5 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>(d2);

        $d6 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>(d3);

        $d8 = $d5 * $d6;

        $d7 = d2 + d3;

        $d9 = staticinvoke <org.apache.commons.math3.special.Gamma: double gamma(double)>($d7);

        $d10 = $d8 / $d9;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d10);

        return $d11;
    }

    static void <clinit>()
    {
        double[] $r0;

        <org.apache.commons.math3.special.Beta: double HALF_LOG_TWO_PI> = 0.9189385332046727;

        <org.apache.commons.math3.special.Beta: double DEFAULT_EPSILON> = 1.0E-14;

        $r0 = newarray (double)[15];

        $r0[0] = 0.08333333333333333;

        $r0[1] = -2.777777777777778E-5;

        $r0[2] = 7.936507936507937E-8;

        $r0[3] = -5.952380952380953E-10;

        $r0[4] = 8.417508417508329E-12;

        $r0[5] = -1.917526917518546E-13;

        $r0[6] = 6.410256405103255E-15;

        $r0[7] = -2.955065141253382E-16;

        $r0[8] = 1.7964371635940225E-17;

        $r0[9] = -1.3922896466162779E-18;

        $r0[10] = 1.338028550140209E-19;

        $r0[11] = -1.542460098679661E-20;

        $r0[12] = 1.9770199298095743E-21;

        $r0[13] = -2.3406566479399704E-22;

        $r0[14] = 1.713480149663986E-23;

        <org.apache.commons.math3.special.Beta: double[] DELTA> = $r0;

        return;
    }
}
