public class org.apache.commons.math3.util.Decimal64 extends java.lang.Number implements org.apache.commons.math3.RealFieldElement, java.lang.Comparable
{
    public static final org.apache.commons.math3.util.Decimal64 ZERO;
    public static final org.apache.commons.math3.util.Decimal64 ONE;
    public static final org.apache.commons.math3.util.Decimal64 NEGATIVE_INFINITY;
    public static final org.apache.commons.math3.util.Decimal64 POSITIVE_INFINITY;
    public static final org.apache.commons.math3.util.Decimal64 NAN;
    private static final long serialVersionUID;
    private final double value;

    public void <init>(double)
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<org.apache.commons.math3.util.Decimal64: double value> = d0;

        return;
    }

    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        org.apache.commons.math3.util.Decimal64Field $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = staticinvoke <org.apache.commons.math3.util.Decimal64Field: org.apache.commons.math3.util.Decimal64Field getInstance()>();

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 add(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 + $d0;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 subtract(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 - $d0;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 negate()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = neg $d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 multiply(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 * $d0;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 multiply(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = (double) i0;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 * $d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 divide(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 / $d0;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 reciprocal()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = 1.0 / $d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public byte byteValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $i0 = (int) $d0;

        $b1 = (byte) $i0;

        return $b1;
    }

    public short shortValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        int $i0;
        short $s1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $i0 = (int) $d0;

        $s1 = (short) $i0;

        return $s1;
    }

    public int intValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $i0 = (int) $d0;

        return $i0;
    }

    public long longValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $l0 = (long) $d0;

        return $l0;
    }

    public float floatValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $f0 = (float) $d0;

        return $f0;
    }

    public double doubleValue()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        return $d0;
    }

    public int compareTo(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.commons.math3.util.Decimal64;

        if $z0 == 0 goto label3;

        r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        long l0, $l1, $l2;
        double $d0;
        int $i3;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r1;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        return $z0;
    }

    public boolean isNaN()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        return $z0;
    }

    public double getReal()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        return $d0;
    }

    public org.apache.commons.math3.util.Decimal64 add(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 + d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 subtract(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 - d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 multiply(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 * d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 divide(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = $d1 / d0;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 remainder(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d1, d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 remainder(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d1, $d0);

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 abs()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 ceil()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 floor()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 rint()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public long round()
    {
        org.apache.commons.math3.util.Decimal64 r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        return $l0;
    }

    public org.apache.commons.math3.util.Decimal64 signum()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 copySign(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>($d1, $d0);

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 copySign(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>($d1, d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 scalb(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, i0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 hypot(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double hypot(double,double)>($d1, $d0);

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 sqrt()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 cbrt()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 rootN(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1, $r2;
        int i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d5 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d8 = neg $d5;

        $d6 = (double) i0;

        $d7 = 1.0 / $d6;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d8, $d7);

        $d10 = neg $d9;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d10);

        return $r2;

     label1:
        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d3 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = (double) i0;

        $d2 = 1.0 / $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d2);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d4);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 pow(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 pow(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, i0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 pow(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d1, $d0);

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 exp()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 expm1()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 log()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 log1p()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 log10()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 cos()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 sin()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 tan()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 acos()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 asin()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 atan()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 atan2(org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        $d1 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d1, $d0);

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math3.util.Decimal64 cosh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 sinh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 tanh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 acosh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double acosh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 asinh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double asinh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 atanh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        $d0 = r0.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atanh(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64[], org.apache.commons.math3.util.Decimal64[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r5, $r6, $r7;
        org.apache.commons.math3.util.Decimal64[] r1, r2;
        double[] r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64[];

        r2 := @parameter1: org.apache.commons.math3.util.Decimal64[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, $i5);

        throw $r8;

     label1:
        $i2 = lengthof r1;

        r3 = newarray (double)[$i2];

        $i3 = lengthof r2;

        r4 = newarray (double)[$i3];

        i7 = 0;

     label2:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label3;

        $r6 = r1[i7];

        $d1 = $r6.<org.apache.commons.math3.util.Decimal64: double value>;

        r3[i7] = $d1;

        $r7 = r2[i7];

        $d2 = $r7.<org.apache.commons.math3.util.Decimal64: double value>;

        r4[i7] = $d2;

        i7 = i7 + 1;

        goto label2;

     label3:
        $r5 = new org.apache.commons.math3.util.Decimal64;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r3, r4);

        specialinvoke $r5.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d0);

        return $r5;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(double[], org.apache.commons.math3.util.Decimal64[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r4, $r5;
        double[] r1, r3;
        org.apache.commons.math3.util.Decimal64[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.util.Decimal64[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r1;

        $i4 = lengthof r2;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r6;

     label1:
        $i2 = lengthof r2;

        r3 = newarray (double)[$i2];

        i6 = 0;

     label2:
        $i3 = lengthof r1;

        if i6 >= $i3 goto label3;

        $r5 = r2[i6];

        $d1 = $r5.<org.apache.commons.math3.util.Decimal64: double value>;

        r3[i6] = $d1;

        i6 = i6 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.commons.math3.util.Decimal64;

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r1, r3);

        specialinvoke $r4.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d0);

        return $r4;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, r3, r4, $r5;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        r2 := @parameter1: org.apache.commons.math3.util.Decimal64;

        r3 := @parameter2: org.apache.commons.math3.util.Decimal64;

        r4 := @parameter3: org.apache.commons.math3.util.Decimal64;

        $r5 = new org.apache.commons.math3.util.Decimal64;

        $d3 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = r3.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r4.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, $d2, $d1, $d0);

        specialinvoke $r5.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d4);

        return $r5;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, $r3;
        double d0, d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.util.Decimal64;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.util.Decimal64;

        $r3 = new org.apache.commons.math3.util.Decimal64;

        $d3 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, $d3, d1, $d2);

        specialinvoke $r3.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d4);

        return $r3;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, r3, r4, r5, r6, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        r2 := @parameter1: org.apache.commons.math3.util.Decimal64;

        r3 := @parameter2: org.apache.commons.math3.util.Decimal64;

        r4 := @parameter3: org.apache.commons.math3.util.Decimal64;

        r5 := @parameter4: org.apache.commons.math3.util.Decimal64;

        r6 := @parameter5: org.apache.commons.math3.util.Decimal64;

        $r7 = new org.apache.commons.math3.util.Decimal64;

        $d5 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d3 = r3.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = r4.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = r5.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r6.<org.apache.commons.math3.util.Decimal64: double value>;

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d5, $d4, $d3, $d2, $d1, $d0);

        specialinvoke $r7.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d6);

        return $r7;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, r3, $r4;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.util.Decimal64;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.util.Decimal64;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.util.Decimal64;

        $r4 = new org.apache.commons.math3.util.Decimal64;

        $d5 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d3 = r3.<org.apache.commons.math3.util.Decimal64: double value>;

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>(d0, $d5, d1, $d4, d2, $d3);

        specialinvoke $r4.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d6);

        return $r4;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, r3, r4, r5, r6, r7, r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: org.apache.commons.math3.util.Decimal64;

        r2 := @parameter1: org.apache.commons.math3.util.Decimal64;

        r3 := @parameter2: org.apache.commons.math3.util.Decimal64;

        r4 := @parameter3: org.apache.commons.math3.util.Decimal64;

        r5 := @parameter4: org.apache.commons.math3.util.Decimal64;

        r6 := @parameter5: org.apache.commons.math3.util.Decimal64;

        r7 := @parameter6: org.apache.commons.math3.util.Decimal64;

        r8 := @parameter7: org.apache.commons.math3.util.Decimal64;

        $r9 = new org.apache.commons.math3.util.Decimal64;

        $d7 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d6 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d5 = r3.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = r4.<org.apache.commons.math3.util.Decimal64: double value>;

        $d3 = r5.<org.apache.commons.math3.util.Decimal64: double value>;

        $d2 = r6.<org.apache.commons.math3.util.Decimal64: double value>;

        $d1 = r7.<org.apache.commons.math3.util.Decimal64: double value>;

        $d0 = r8.<org.apache.commons.math3.util.Decimal64: double value>;

        $d8 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d7, $d6, $d5, $d4, $d3, $d2, $d1, $d0);

        specialinvoke $r9.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d8);

        return $r9;
    }

    public org.apache.commons.math3.util.Decimal64 linearCombination(double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64, double, org.apache.commons.math3.util.Decimal64)
    {
        org.apache.commons.math3.util.Decimal64 r0, r1, r2, r3, r4, $r5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.util.Decimal64;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.util.Decimal64;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.util.Decimal64;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math3.util.Decimal64;

        $r5 = new org.apache.commons.math3.util.Decimal64;

        $d7 = r1.<org.apache.commons.math3.util.Decimal64: double value>;

        $d6 = r2.<org.apache.commons.math3.util.Decimal64: double value>;

        $d5 = r3.<org.apache.commons.math3.util.Decimal64: double value>;

        $d4 = r4.<org.apache.commons.math3.util.Decimal64: double value>;

        $d8 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>(d0, $d7, d1, $d6, d2, $d5, d3, $d4);

        specialinvoke $r5.<org.apache.commons.math3.util.Decimal64: void <init>(double)>($d8);

        return $r5;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r5, $r6, $r7, $r8, $r9;
        double d0, d1, d2, d3;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        d3 := @parameter6: double;

        r4 := @parameter7: java.lang.Object;

        $r8 = (org.apache.commons.math3.util.Decimal64) r1;

        $r7 = (org.apache.commons.math3.util.Decimal64) r2;

        $r6 = (org.apache.commons.math3.util.Decimal64) r3;

        $r5 = (org.apache.commons.math3.util.Decimal64) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64)>(d0, $r8, d1, $r7, d2, $r6, d3, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $r16 = (org.apache.commons.math3.util.Decimal64) r1;

        $r15 = (org.apache.commons.math3.util.Decimal64) r2;

        $r14 = (org.apache.commons.math3.util.Decimal64) r3;

        $r13 = (org.apache.commons.math3.util.Decimal64) r4;

        $r12 = (org.apache.commons.math3.util.Decimal64) r5;

        $r11 = (org.apache.commons.math3.util.Decimal64) r6;

        $r10 = (org.apache.commons.math3.util.Decimal64) r7;

        $r9 = (org.apache.commons.math3.util.Decimal64) r8;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64)>($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9);

        return $r17;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r4, $r5, $r6, $r7;
        double d0, d1, d2;
        java.lang.Object r1, r2, r3;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        $r6 = (org.apache.commons.math3.util.Decimal64) r1;

        $r5 = (org.apache.commons.math3.util.Decimal64) r2;

        $r4 = (org.apache.commons.math3.util.Decimal64) r3;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64)>(d0, $r6, d1, $r5, d2, $r4);

        return $r7;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Object r1, r2, r3, r4, r5, r6;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $r12 = (org.apache.commons.math3.util.Decimal64) r1;

        $r11 = (org.apache.commons.math3.util.Decimal64) r2;

        $r10 = (org.apache.commons.math3.util.Decimal64) r3;

        $r9 = (org.apache.commons.math3.util.Decimal64) r4;

        $r8 = (org.apache.commons.math3.util.Decimal64) r5;

        $r7 = (org.apache.commons.math3.util.Decimal64) r6;

        $r13 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64)>($r12, $r11, $r10, $r9, $r8, $r7);

        return $r13;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r3, $r4, $r5;
        double d0, d1;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        $r4 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = (org.apache.commons.math3.util.Decimal64) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(double,org.apache.commons.math3.util.Decimal64,double,org.apache.commons.math3.util.Decimal64)>(d0, $r4, d1, $r3);

        return $r5;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (org.apache.commons.math3.util.Decimal64) r1;

        $r7 = (org.apache.commons.math3.util.Decimal64) r2;

        $r6 = (org.apache.commons.math3.util.Decimal64) r3;

        $r5 = (org.apache.commons.math3.util.Decimal64) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64,org.apache.commons.math3.util.Decimal64)>($r8, $r7, $r6, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(double[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r4;
        double[] r1;
        java.lang.Object[] r2;
        org.apache.commons.math3.util.Decimal64[] $r3;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.util.Decimal64[]) r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(double[],org.apache.commons.math3.util.Decimal64[])>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r5;
        java.lang.Object[] r1, r2;
        org.apache.commons.math3.util.Decimal64[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r4 = (org.apache.commons.math3.util.Decimal64[]) r1;

        $r3 = (org.apache.commons.math3.util.Decimal64[]) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64[],org.apache.commons.math3.util.Decimal64[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object atanh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 atanh()>();

        return $r1;
    }

    public volatile java.lang.Object asinh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 asinh()>();

        return $r1;
    }

    public volatile java.lang.Object acosh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 acosh()>();

        return $r1;
    }

    public volatile java.lang.Object tanh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 tanh()>();

        return $r1;
    }

    public volatile java.lang.Object sinh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 sinh()>();

        return $r1;
    }

    public volatile java.lang.Object cosh()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 cosh()>();

        return $r1;
    }

    public volatile java.lang.Object atan2(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 atan2(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object atan()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 atan()>();

        return $r1;
    }

    public volatile java.lang.Object asin()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 asin()>();

        return $r1;
    }

    public volatile java.lang.Object acos()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 acos()>();

        return $r1;
    }

    public volatile java.lang.Object tan()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 tan()>();

        return $r1;
    }

    public volatile java.lang.Object sin()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 sin()>();

        return $r1;
    }

    public volatile java.lang.Object cos()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 cos()>();

        return $r1;
    }

    public volatile java.lang.Object log1p()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 log1p()>();

        return $r1;
    }

    public volatile java.lang.Object log()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 log()>();

        return $r1;
    }

    public volatile java.lang.Object expm1()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 expm1()>();

        return $r1;
    }

    public volatile java.lang.Object exp()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 exp()>();

        return $r1;
    }

    public volatile java.lang.Object pow(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 pow(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object pow(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 pow(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object pow(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 pow(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object rootN(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 rootN(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object cbrt()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 cbrt()>();

        return $r1;
    }

    public volatile java.lang.Object sqrt()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 sqrt()>();

        return $r1;
    }

    public volatile java.lang.Object reciprocal()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 reciprocal()>();

        return $r1;
    }

    public volatile java.lang.Object hypot(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 hypot(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object scalb(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 scalb(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object copySign(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 copySign(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object copySign(java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 copySign(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object signum()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 signum()>();

        return $r1;
    }

    public volatile java.lang.Object rint()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 rint()>();

        return $r1;
    }

    public volatile java.lang.Object floor()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 floor()>();

        return $r1;
    }

    public volatile java.lang.Object ceil()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 ceil()>();

        return $r1;
    }

    public volatile java.lang.Object abs()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 abs()>();

        return $r1;
    }

    public volatile java.lang.Object remainder(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 remainder(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object remainder(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 remainder(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 divide(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object multiply(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 multiply(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object subtract(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 subtract(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object add(double)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 add(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 divide(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 multiply(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 multiply(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.util.Decimal64 r0, $r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 negate()>();

        return $r1;
    }

    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 subtract(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 add(org.apache.commons.math3.util.Decimal64)>($r2);

        return $r3;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.util.Decimal64 r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Decimal64;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.util.Decimal64) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.util.Decimal64: int compareTo(org.apache.commons.math3.util.Decimal64)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.util.Decimal64 $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.math3.util.Decimal64: long serialVersionUID> = 20120227L;

        $r0 = new org.apache.commons.math3.util.Decimal64;

        specialinvoke $r0.<org.apache.commons.math3.util.Decimal64: void <init>(double)>(0.0);

        <org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 ZERO> = $r0;

        $r1 = new org.apache.commons.math3.util.Decimal64;

        specialinvoke $r1.<org.apache.commons.math3.util.Decimal64: void <init>(double)>(1.0);

        <org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 ONE> = $r1;

        $r2 = new org.apache.commons.math3.util.Decimal64;

        specialinvoke $r2.<org.apache.commons.math3.util.Decimal64: void <init>(double)>(#-Infinity);

        <org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 NEGATIVE_INFINITY> = $r2;

        $r3 = new org.apache.commons.math3.util.Decimal64;

        specialinvoke $r3.<org.apache.commons.math3.util.Decimal64: void <init>(double)>(#Infinity);

        <org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 POSITIVE_INFINITY> = $r3;

        $r4 = new org.apache.commons.math3.util.Decimal64;

        specialinvoke $r4.<org.apache.commons.math3.util.Decimal64: void <init>(double)>(#NaN);

        <org.apache.commons.math3.util.Decimal64: org.apache.commons.math3.util.Decimal64 NAN> = $r4;

        return;
    }
}
