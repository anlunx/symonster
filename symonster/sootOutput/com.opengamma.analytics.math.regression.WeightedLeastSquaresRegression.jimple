public class com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression extends com.opengamma.analytics.math.regression.LeastSquaresRegression
{
    private static final org.slf4j.Logger s_logger;
    private final cern.colt.matrix.linalg.Algebra _algebra;

    public void <init>()
    {
        com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression r0;
        cern.colt.matrix.linalg.Algebra $r1;

        r0 := @this: com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression;

        specialinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegression: void <init>()>();

        $r1 = new cern.colt.matrix.linalg.Algebra;

        specialinvoke $r1.<cern.colt.matrix.linalg.Algebra: void <init>()>();

        r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra> = $r1;

        return;
    }

    public com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][], double[][], double[], boolean)
    {
        com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression r0;
        double[][] r1, r2;
        double[] r3, r4, $r7;
        boolean z0;
        org.slf4j.Logger $r5;
        int $i0, $i1, i2;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r6;
        double $d0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[];

        z0 := @parameter3: boolean;

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot perform WLS regression without an array of weights");

        throw $r8;

     label1:
        virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: void checkData(double[][],double[][],double[])>(r1, r2, r3);

        $r5 = <com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: org.slf4j.Logger s_logger>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Have a two-dimensional array for what should be a one-dimensional array of weights. The weights used in this regression will be the diagonal elements only");

        $i0 = lengthof r2;

        r4 = newarray (double)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label3;

        $r7 = r2[i2];

        $d0 = $r7[i2];

        r4[i2] = $d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][],double[],double[],boolean)>(r1, r4, r3, z0);

        return $r6;
    }

    public com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][], double[], double[], boolean)
    {
        com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression r0;
        double[][] r1, r4, $r34, $r35;
        double[] r2, r3, r5, r6, r11, r12, $r32, $r33;
        boolean z0;
        cern.colt.matrix.DoubleMatrix1D r7, r10, $r17, $r31;
        cern.colt.matrix.DoubleMatrix2D r8, r9, $r25, $r26, $r27, $r28, $r29, r38;
        int $i0, $i1, $i2, i3;
        cern.colt.matrix.DoubleFactory2D $r13, $r16;
        cern.colt.matrix.DoubleFactory1D $r14, $r15;
        cern.colt.matrix.linalg.Algebra $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r30;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r36;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r37;

        r0 := @this: com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        z0 := @parameter3: boolean;

        if r2 != null goto label1;

        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot perform WLS regression without an array of weights");

        throw $r37;

     label1:
        virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: void checkData(double[][],double[],double[])>(r1, r2, r3);

        r4 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: double[][] addInterceptVariable(double[][],boolean)>(r1, z0);

        $i0 = lengthof r3;

        r5 = newarray (double)[$i0];

        $i1 = lengthof r2;

        r6 = newarray (double)[$i1];

        i3 = 0;

     label2:
        $i2 = lengthof r3;

        if i3 >= $i2 goto label3;

        $d0 = r3[i3];

        r5[i3] = $d0;

        $d1 = r2[i3];

        r6[i3] = $d1;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r13 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        r38 = virtualinvoke $r13.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>(r4);

        $r14 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        r7 = virtualinvoke $r14.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>(r5);

        $r16 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D sparse>;

        $r15 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r17 = virtualinvoke $r15.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>(r6);

        r8 = virtualinvoke $r16.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D diagonal(cern.colt.matrix.DoubleMatrix1D)>($r17);

        $r18 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        r9 = virtualinvoke $r18.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D transpose(cern.colt.matrix.DoubleMatrix2D)>(r38);

        $r20 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r21 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r22 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r23 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r24 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r19 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r25 = virtualinvoke $r19.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>(r8, r38);

        $r26 = virtualinvoke $r24.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>(r9, $r25);

        $r27 = virtualinvoke $r23.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D inverse(cern.colt.matrix.DoubleMatrix2D)>($r26);

        $r28 = virtualinvoke $r22.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>($r27, r9);

        $r29 = virtualinvoke $r21.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>($r28, r8);

        r10 = virtualinvoke $r20.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix1D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix1D)>($r29, r7);

        $r30 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r31 = virtualinvoke $r30.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix1D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix1D)>(r38, r10);

        $r32 = virtualinvoke $r31.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        r11 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: double[] convertArray(double[])>($r32);

        $r33 = virtualinvoke r10.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        r12 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: double[] convertArray(double[])>($r33);

        $r34 = virtualinvoke r8.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        $r35 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: double[][] convertArray(double[][])>($r34);

        $r36 = specialinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult getResultWithStatistics(double[][],double[][],double[],double[],double[],cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D,boolean)>(r1, $r35, r3, r12, r11, r9, r38, z0);

        return $r36;
    }

    private com.opengamma.analytics.math.regression.LeastSquaresRegressionResult getResultWithStatistics(double[][], double[][], double[], double[], double[], cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean)
    {
        com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression r0;
        double[][] r1, r2, r12, $r19;
        double[] r3, r4, r5, r8, r9, r10, r11, $r22, $r23, $r24;
        cern.colt.matrix.DoubleMatrix2D r6, r7, $r17, $r18;
        boolean z0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, d37, d38, d39, d40, d41;
        cern.colt.matrix.linalg.Algebra $r15, $r16;
        org.apache.commons.math.distribution.TDistributionImpl $r20;
        com.opengamma.analytics.math.regression.WeightedLeastSquaresRegressionResult $r21;
        org.apache.commons.math.MathException $r25;
        com.opengamma.analytics.math.MathException $r26;

        r0 := @this: com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        r6 := @parameter5: cern.colt.matrix.DoubleMatrix2D;

        r7 := @parameter6: cern.colt.matrix.DoubleMatrix2D;

        z0 := @parameter7: boolean;

        d37 = 0.0;

        i0 = lengthof r3;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        d0 = r3[i8];

        d37 = d37 + d0;

        i8 = i8 + 1;

        goto label01;

     label02:
        $i3 = lengthof r3;

        $d4 = (double) $i3;

        d38 = d37 / $d4;

        d39 = 0.0;

        d40 = 0.0;

        i1 = lengthof r1;

        i2 = lengthof r4;

        r8 = newarray (double)[i1];

        r9 = newarray (double)[i2];

        r10 = newarray (double)[i2];

        r11 = newarray (double)[i2];

        i9 = 0;

     label03:
        if i9 >= i1 goto label04;

        $r23 = r2[i9];

        $d24 = $r23[i9];

        $d22 = r3[i9];

        $d23 = $d22 - d38;

        $d27 = $d24 * $d23;

        $d25 = r3[i9];

        $d26 = $d25 - d38;

        $d28 = $d27 * $d26;

        d39 = d39 + $d28;

        $d30 = r3[i9];

        $d29 = r5[i9];

        $d31 = $d30 - $d29;

        r8[i9] = $d31;

        $r24 = r2[i9];

        $d33 = $r24[i9];

        $d32 = r8[i9];

        $d35 = $d33 * $d32;

        $d34 = r8[i9];

        $d36 = $d35 * $d34;

        d40 = d40 + $d36;

        i9 = i9 + 1;

        goto label03;

     label04:
        d41 = d39 - d40;

        $r16 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r15 = r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r17 = virtualinvoke $r15.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>(r6, r7);

        $r18 = virtualinvoke $r16.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D inverse(cern.colt.matrix.DoubleMatrix2D)>($r17);

        $r19 = virtualinvoke $r18.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        r12 = virtualinvoke r0.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: double[][] convertArray(double[][])>($r19);

        d1 = d41 / d39;

        $d6 = 1.0 - d1;

        $i4 = i1 - 1;

        $d5 = (double) $i4;

        $d8 = $d6 * $d5;

        $i5 = i1 - i2;

        $d7 = (double) $i5;

        $d9 = $d8 / $d7;

        d2 = 1.0 - $d9;

        $i6 = i1 - i2;

        $d10 = (double) $i6;

        d3 = d40 / $d10;

        $r20 = new org.apache.commons.math.distribution.TDistributionImpl;

        $i7 = i1 - i2;

        $d11 = (double) $i7;

        specialinvoke $r20.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double)>($d11);

        i10 = 0;

     label05:
        if i10 >= i2 goto label10;

        $r22 = r12[i10];

        $d12 = $r22[i10];

        $d13 = d3 * $d12;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>($d13);

        r9[i10] = $d14;

        $d16 = r4[i10];

        $d15 = r9[i10];

        $d17 = $d16 / $d15;

        r10[i10] = $d17;

     label06:
        $d18 = r10[i10];

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $d20 = interfaceinvoke $r20.<org.apache.commons.math.distribution.ContinuousDistribution: double cumulativeProbability(double)>($d19);

        $d21 = 1.0 - $d20;

        r11[i10] = $d21;

     label07:
        goto label09;

     label08:
        $r25 := @caughtexception;

        $r26 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r26.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r25);

        throw $r26;

     label09:
        i10 = i10 + 1;

        goto label05;

     label10:
        $r21 = new com.opengamma.analytics.math.regression.WeightedLeastSquaresRegressionResult;

        specialinvoke $r21.<com.opengamma.analytics.math.regression.WeightedLeastSquaresRegressionResult: void <init>(double[],double[],double,double[],double,double,double[],double[],boolean)>(r4, r8, d3, r9, d1, d2, r10, r11, z0);

        return $r21;

        catch org.apache.commons.math.MathException from label06 to label07 with label08;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/math/regression/WeightedLeastSquaresRegression");

        <com.opengamma.analytics.math.regression.WeightedLeastSquaresRegression: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
