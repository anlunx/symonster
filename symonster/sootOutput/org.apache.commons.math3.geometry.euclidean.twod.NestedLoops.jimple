class org.apache.commons.math3.geometry.euclidean.twod.NestedLoops extends java.lang.Object
{
    private org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop;
    private java.util.ArrayList surrounded;
    private org.apache.commons.math3.geometry.partitioning.Region polygon;
    private boolean originalIsClockwise;
    private final double tolerance;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        double d0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded> = $r1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance> = d0;

        return;
    }

    private void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r3, $r6, r22;
        java.util.ArrayList $r7, $r8;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r9;
        org.apache.commons.math3.geometry.partitioning.Region $r10, $r12, $r13;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r11;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r14;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r15;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r16, $r17;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r18;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r19;
        java.lang.Object[] $r20;
        org.apache.commons.math3.exception.util.LocalizedFormats $r21;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = r1[0];

        if $r6 != null goto label1;

        $r19 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r21 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUTLINE_BOUNDARY_LOOP_OPEN>;

        $r20 = newarray (java.lang.Object)[0];

        specialinvoke $r19.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r21, $r20);

        throw $r19;

     label1:
        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop> = r1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded> = $r7;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance> = d0;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof r1;

        $i1 = $i0 - 1;

        r22 = r1[$i1];

        i3 = 0;

     label2:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label3;

        r3 = r22;

        r22 = r1[i3];

        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r3, r22, d0);

        $r15 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r3);

        $d2 = virtualinvoke $r16.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r17 = virtualinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r22);

        $d3 = virtualinvoke $r17.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d2, $d3, d0);

        $r18 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r14, $r15);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r9 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>($r8, d0);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon> = $r9;

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $d1 = interfaceinvoke $r10.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z0 == 0 goto label4;

        $r11 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r12 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r13 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)>($r12);

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon> = $r13;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise> = 0;

        goto label5;

     label4:
        r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise> = 1;

     label5:
        return;
    }

    public void add(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)>(r1, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)>($r2);

        return;
    }

    private void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, r1, r2, r23, r25;
        java.util.ArrayList $r3, $r4, $r6, $r7, $r18;
        boolean $z0, $z1, $z2, $z4, $z5, $z7;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r5;
        java.lang.Object $r8, $r15, $r19;
        org.apache.commons.math3.geometry.partitioning.Region $r9, $r10, $r11, $r16, $r17, $r20, $r21;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r12;
        java.lang.Object[] $r13;
        org.apache.commons.math3.exception.util.LocalizedFormats $r14;
        java.util.Iterator r22, r24, r27;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        r22 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r19 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r19;

        $r21 = r23.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r20 = r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $z7 = interfaceinvoke $r21.<org.apache.commons.math3.geometry.partitioning.Region: boolean contains(org.apache.commons.math3.geometry.partitioning.Region)>($r20);

        if $z7 == 0 goto label2;

        specialinvoke r23.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)>(r1);

        return;

     label2:
        goto label1;

     label3:
        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        r24 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r15 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r15;

        $r17 = r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r16 = r25.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $z5 = interfaceinvoke $r17.<org.apache.commons.math3.geometry.partitioning.Region: boolean contains(org.apache.commons.math3.geometry.partitioning.Region)>($r16);

        if $z5 == 0 goto label5;

        $r18 = r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r25);

        interfaceinvoke r24.<java.util.Iterator: void remove()>();

     label5:
        goto label4;

     label6:
        $r5 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        r27 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r8 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r8;

        $r10 = r1.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r9 = r2.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.partitioning.Region polygon>;

        $r11 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r10, $r9);

        $z4 = interfaceinvoke $r11.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        if $z4 != 0 goto label8;

        $r12 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r14 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CROSSING_BOUNDARY_LOOPS>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r12;

     label8:
        goto label7;

     label9:
        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void correctOrientation()
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, r2;
        java.util.Iterator r1;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r4;

        specialinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void setClockWise(boolean)>(1);

        goto label1;

     label2:
        return;
    }

    private void setClockWise(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.NestedLoops r0, r12;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, $r8;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r5, $r6, $r7, $r9, $r10;
        int i0, i1;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.NestedLoops;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: boolean originalIsClockwise>;

        $z2 = $z1 ^ z0;

        if $z2 == 0 goto label2;

        i0 = -1;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        i1 = lengthof $r5;

     label1:
        i0 = i0 + 1;

        i1 = i1 + -1;

        if i0 >= i1 goto label2;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        r1 = $r6[i0];

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r8 = $r7[i1];

        $r9[i0] = $r8;

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop>;

        $r10[i1] = r1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: java.util.ArrayList surrounded>;

        r11 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r3 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) $r3;

        if z0 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        specialinvoke r12.<org.apache.commons.math3.geometry.euclidean.twod.NestedLoops: void setClockWise(boolean)>($z4);

        goto label3;

     label6:
        return;
    }
}
