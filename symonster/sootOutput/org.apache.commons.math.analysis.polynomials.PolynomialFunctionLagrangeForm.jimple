public class org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm extends java.lang.Object implements org.apache.commons.math.analysis.UnivariateRealFunction
{
    private double[] coefficients;
    private final double[] x;
    private final double[] y;
    private boolean coefficientsComputed;

    public void <init>(double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: void verifyInterpolationArray(double[],double[])>(r1, r2);

        $i0 = lengthof r1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x> = $r3;

        $i1 = lengthof r2;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y> = $r4;

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i2);

        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i3);

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 0;

        return;
    }

    public double value(double) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double d0, $d1;
        double[] $r2, $r3;
        org.apache.commons.math.DuplicateSampleAbscissaException $r4;
        org.apache.commons.math.FunctionEvaluationException $r5;
        org.apache.commons.math.exception.util.Localizable $r6, $r8;
        java.lang.Object[] $r7, $r9;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        d0 := @parameter0: double;

     label1:
        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d1 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluate(double[],double[],double)>($r3, $r2, d0);

     label2:
        return $d1;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.math.FunctionEvaluationException;

        $r6 = virtualinvoke $r4.<org.apache.commons.math.DuplicateSampleAbscissaException: org.apache.commons.math.exception.util.Localizable getSpecificPattern()>();

        $r7 = newarray (java.lang.Object)[2];

        $r8 = virtualinvoke $r4.<org.apache.commons.math.DuplicateSampleAbscissaException: org.apache.commons.math.exception.util.Localizable getGeneralPattern()>();

        $r7[0] = $r8;

        $r9 = virtualinvoke $r4.<org.apache.commons.math.DuplicateSampleAbscissaException: java.lang.Object[] getArguments()>();

        $r7[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math.FunctionEvaluationException: void <init>(double,org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>(d0, $r6, $r7);

        throw $r5;

        catch org.apache.commons.math.DuplicateSampleAbscissaException from label1 to label2 with label3;
    }

    public int degree()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        return $i1;
    }

    public double[] getInterpolatingPoints()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getInterpolatingValues()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getCoefficients()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $z0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: void computeCoefficients()>();

     label1:
        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public static double evaluate(double[], double[], double) throws org.apache.commons.math.DuplicateSampleAbscissaException, java.lang.IllegalArgumentException
    {
        double[] r0, r1, r2, r3;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, d26;
        int i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, i11, i12, i13, i14;
        byte $b4, $b7, $b10;
        org.apache.commons.math.DuplicateSampleAbscissaException $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: void verifyInterpolationArray(double[],double[])>(r0, r1);

        i11 = 0;

        i0 = lengthof r0;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        d25 = #Infinity;

        i12 = 0;

     label01:
        if i12 >= i0 goto label03;

        $d21 = r1[i12];

        r2[i12] = $d21;

        $d22 = r1[i12];

        r3[i12] = $d22;

        $d23 = r0[i12];

        $d24 = d0 - $d23;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d24);

        $b10 = d1 cmpg d25;

        if $b10 >= 0 goto label02;

        i11 = i12;

        d25 = d1;

     label02:
        i12 = i12 + 1;

        goto label01;

     label03:
        d26 = r1[i11];

        i13 = 1;

     label04:
        if i13 >= i0 goto label10;

        i14 = 0;

     label05:
        $i1 = i0 - i13;

        if i14 >= $i1 goto label07;

        $d11 = r0[i14];

        d2 = $d11 - d0;

        $i5 = i13 + i14;

        $d12 = r0[$i5];

        d3 = $d12 - d0;

        $d14 = r0[i14];

        $i6 = i13 + i14;

        $d13 = r0[$i6];

        d4 = $d14 - $d13;

        $b7 = d4 cmpl 0.0;

        if $b7 != 0 goto label06;

        $r4 = new org.apache.commons.math.DuplicateSampleAbscissaException;

        $d20 = r0[i13];

        $i9 = i13 + i14;

        specialinvoke $r4.<org.apache.commons.math.DuplicateSampleAbscissaException: void <init>(double,int,int)>($d20, i13, $i9);

        throw $r4;

     label06:
        $i8 = i14 + 1;

        $d16 = r2[$i8];

        $d15 = r3[i14];

        $d17 = $d16 - $d15;

        d5 = $d17 / d4;

        $d18 = d2 * d5;

        r2[i14] = $d18;

        $d19 = d3 * d5;

        r3[i14] = $d19;

        i14 = i14 + 1;

        goto label05;

     label07:
        $d8 = (double) i11;

        $i2 = i0 - i13;

        $i3 = $i2 + 1;

        $d6 = (double) $i3;

        $d7 = 0.5 * $d6;

        $b4 = $d8 cmpg $d7;

        if $b4 >= 0 goto label08;

        $d10 = r2[i11];

        d26 = d26 + $d10;

        goto label09;

     label08:
        i11 = i11 + -1;

        $d9 = r3[i11];

        d26 = d26 + $d9;

     label09:
        i13 = i13 + 1;

        goto label04;

     label10:
        return d26;
    }

    protected void computeCoefficients() throws java.lang.ArithmeticException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i12, i13, i14, i15, i16, i17, i18;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r12, $r15, $r16, $r17, $r18, $r19, r20, r21;
        byte $b3, $b9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31;
        java.lang.Object[] $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        java.lang.Double $r13;
        java.lang.ArithmeticException $r14;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $i1 = virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: int degree()>();

        i0 = $i1 + 1;

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients> = $r1;

        i12 = 0;

     label01:
        if i12 >= i0 goto label02;

        $r19 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $r19[i12] = 0.0;

        i12 = i12 + 1;

        goto label01;

     label02:
        $i2 = i0 + 1;

        r20 = newarray (double)[$i2];

        r20[0] = 1.0;

        i13 = 0;

     label03:
        if i13 >= i0 goto label06;

        i14 = i13;

     label04:
        if i14 <= 0 goto label05;

        $i11 = i14 - 1;

        $d28 = r20[$i11];

        $d26 = r20[i14];

        $r18 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d25 = $r18[i13];

        $d27 = $d26 * $d25;

        $d29 = $d28 - $d27;

        r20[i14] = $d29;

        i14 = i14 + -1;

        goto label04;

     label05:
        $d23 = r20[0];

        $r17 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d21 = $r17[i13];

        $d22 = neg $d21;

        $d24 = $d23 * $d22;

        r20[0] = $d24;

        $i10 = i13 + 1;

        r20[$i10] = 1.0;

        i13 = i13 + 1;

        goto label03;

     label06:
        r21 = newarray (double)[i0];

        i15 = 0;

     label07:
        if i15 >= i0 goto label16;

        d30 = 1.0;

        i16 = 0;

     label08:
        if i16 >= i0 goto label10;

        if i15 == i16 goto label09;

        $r15 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d19 = $r15[i15];

        $r16 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d18 = $r16[i16];

        $d20 = $d19 - $d18;

        d30 = d30 * $d20;

     label09:
        i16 = i16 + 1;

        goto label08;

     label10:
        $b3 = d30 cmpl 0.0;

        if $b3 != 0 goto label13;

        i17 = 0;

     label11:
        if i17 >= i0 goto label13;

        if i15 == i17 goto label12;

        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d16 = $r6[i15];

        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d15 = $r7[i17];

        $b9 = $d16 cmpl $d15;

        if $b9 != 0 goto label12;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO>;

        $r8 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r8[1] = $r11;

        $r12 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d17 = $r12[i15];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d17);

        $r8[2] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r14;

     label12:
        i17 = i17 + 1;

        goto label11;

     label13:
        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d0 = $r2[i15];

        d31 = $d0 / d30;

        $i4 = i0 - 1;

        $d1 = r20[i0];

        r21[$i4] = $d1;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i5 = i0 - 1;

        $d4 = $r3[$i5];

        $i6 = i0 - 1;

        $d2 = r21[$i6];

        $d3 = d31 * $d2;

        $d5 = $d4 + $d3;

        $r3[$i5] = $d5;

        i18 = i0 - 2;

     label14:
        if i18 < 0 goto label15;

        $i7 = i18 + 1;

        $d9 = r20[$i7];

        $i8 = i18 + 1;

        $d7 = r21[$i8];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d6 = $r4[i15];

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        r21[i18] = $d10;

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $d13 = $r5[i18];

        $d11 = r21[i18];

        $d12 = d31 * $d11;

        $d14 = $d13 + $d12;

        $r5[i18] = $d14;

        i18 = i18 + -1;

        goto label14;

     label15:
        i15 = i15 + 1;

        goto label07;

     label16:
        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 1;

        return;
    }

    public static void verifyInterpolationArray(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r8;
        java.lang.Integer $r4, $r5, $r9, $r10;
        java.lang.IllegalArgumentException $r6, $r11;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r7 = newarray (java.lang.Object)[2];

        $i4 = lengthof r0;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[0] = $r9;

        $i5 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r11;

     label1:
        $i2 = lengthof r0;

        if $i2 >= 2 goto label2;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[0] = $r4;

        $i3 = lengthof r0;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        return;
    }
}
