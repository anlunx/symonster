public class com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double getMultiplier(com.opengamma.analytics.financial.greeks.Underlying)
    {
        com.opengamma.analytics.financial.greeks.Underlying r0;
        java.util.Iterator r1;
        com.opengamma.analytics.financial.greeks.NthOrderUnderlying r2, r11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        java.util.List $r9;
        java.lang.Object $r10;
        double $d0, $d1, $d2, d3;
        long $l0;
        int i1;
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r12;

        r0 := @parameter0: com.opengamma.analytics.financial.greeks.Underlying;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "underlying");

        $z0 = r0 instanceof com.opengamma.analytics.financial.greeks.NthOrderUnderlying;

        if $z0 == 0 goto label2;

        r11 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) r0;

        i1 = virtualinvoke r11.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: int getOrder()>();

        if i1 != 0 goto label1;

        return 1.0;

     label1:
        $l0 = staticinvoke <org.apache.commons.math.util.MathUtils: long factorial(int)>(i1);

        $d1 = (double) $l0;

        $d2 = 1.0 / $d1;

        return $d2;

     label2:
        $z1 = r0 instanceof com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        if $z1 == 0 goto label5;

        r12 = (com.opengamma.analytics.financial.greeks.MixedOrderUnderlying) r0;

        d3 = 1.0;

        $r9 = virtualinvoke r12.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List getUnderlyingOrders()>();

        r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) $r10;

        $d0 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getMultiplier(com.opengamma.analytics.financial.greeks.Underlying)>(r2);

        d3 = d3 * $d0;

        goto label3;

     label4:
        return d3;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Order was neither NthOrderUnderlying nor MixedOrderUnderlying: have ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public static double getValue(java.util.Map, com.opengamma.analytics.financial.greeks.Underlying)
    {
        java.util.Map r0;
        com.opengamma.analytics.financial.greeks.Underlying r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        java.util.Iterator r2;
        com.opengamma.analytics.financial.greeks.NthOrderUnderlying r3, r16;
        java.util.Set $r4;
        java.util.Collection $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.Class $r9;
        java.lang.String $r11;
        java.util.List $r12;
        java.lang.Object $r13, $r14;
        java.lang.Double $r15, r19;
        int i0;
        com.opengamma.analytics.financial.pnl.UnderlyingType r17;
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r18;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.opengamma.analytics.financial.greeks.Underlying;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "underlying");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "underlying data");

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Map,java.lang.String)>(r0, "underlying data");

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection,java.lang.String)>($r4, "underlying data keys");

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection,java.lang.String)>($r5, "underlying data values");

        $z0 = r1 instanceof com.opengamma.analytics.financial.greeks.NthOrderUnderlying;

        if $z0 == 0 goto label2;

        r16 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) r1;

        i0 = virtualinvoke r16.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: int getOrder()>();

        if i0 != 0 goto label1;

        return 1.0;

     label1:
        r17 = virtualinvoke r16.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: com.opengamma.analytics.financial.pnl.UnderlyingType getUnderlying()>();

        $z3 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r17);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z3);

        $r14 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        $r15 = (java.lang.Double) $r14;

        $d5 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d6 = (double) i0;

        d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d5, $d6);

        $d7 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getMultiplier(com.opengamma.analytics.financial.greeks.Underlying)>(r1);

        $d8 = d0 * $d7;

        return $d8;

     label2:
        $z1 = r1 instanceof com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        if $z1 == 0 goto label7;

        r18 = (com.opengamma.analytics.financial.greeks.MixedOrderUnderlying) r1;

        r19 = null;

        $r12 = virtualinvoke r18.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List getUnderlyingOrders()>();

        r2 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) $r13;

        if r19 != null goto label4;

        $d4 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getValue(java.util.Map,com.opengamma.analytics.financial.greeks.Underlying)>(r0, r3);

        r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        goto label5;

     label4:
        d9 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getValue(java.util.Map,com.opengamma.analytics.financial.greeks.Underlying)>(r0, r3);

        $d2 = virtualinvoke r19.<java.lang.Double: double doubleValue()>();

        $d3 = $d2 * d9;

        r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

     label5:
        goto label3;

     label6:
        if r19 == null goto label7;

        $d1 = virtualinvoke r19.<java.lang.Double: double doubleValue()>();

        return $d1;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Order was neither NthOrderUnderlying nor MixedOrderUnderlying: have ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    public static com.opengamma.timeseries.DoubleTimeSeries getTimeSeries(java.util.Map, com.opengamma.analytics.financial.greeks.Underlying)
    {
        java.util.Map r0;
        com.opengamma.analytics.financial.greeks.Underlying r1;
        java.util.Iterator r2;
        com.opengamma.analytics.financial.greeks.NthOrderUnderlying r3, r19;
        java.util.Set $r4;
        java.util.Collection $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r6, $r14, $r15;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.Class $r9;
        java.lang.String $r11;
        java.util.List $r12;
        java.lang.Object $r13, $r16;
        int $i0, $i1, i2, i3;
        double $d0, $d1;
        com.opengamma.timeseries.DoubleTimeSeries $r17, r21, r22, r24, r25;
        java.lang.UnsupportedOperationException $r18;
        com.opengamma.analytics.financial.pnl.UnderlyingType r20;
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r23;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.opengamma.analytics.financial.greeks.Underlying;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "underlying");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "underlying data");

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Map,java.lang.String)>(r0, "underlying data");

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection,java.lang.String)>($r4, "underlying data keys");

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection,java.lang.String)>($r5, "underlying data values");

        $z0 = r1 instanceof com.opengamma.analytics.financial.greeks.NthOrderUnderlying;

        if $z0 == 0 goto label2;

        r19 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) r1;

        i2 = virtualinvoke r19.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: int getOrder()>();

        if i2 != 0 goto label1;

        $r18 = new java.lang.UnsupportedOperationException;

        specialinvoke $r18.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r18;

     label1:
        r20 = virtualinvoke r19.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: com.opengamma.analytics.financial.pnl.UnderlyingType getUnderlying()>();

        $z3 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r20);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z3);

        $r16 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r20);

        r21 = (com.opengamma.timeseries.DoubleTimeSeries) $r16;

        $d0 = (double) i2;

        r22 = interfaceinvoke r21.<com.opengamma.timeseries.DoubleTimeSeries: com.opengamma.timeseries.DoubleTimeSeries power(double)>($d0);

        $d1 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getMultiplier(com.opengamma.analytics.financial.greeks.Underlying)>(r1);

        $r17 = interfaceinvoke r22.<com.opengamma.timeseries.DoubleTimeSeries: com.opengamma.timeseries.DoubleTimeSeries multiply(double)>($d1);

        return $r17;

     label2:
        $z1 = r1 instanceof com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        if $z1 == 0 goto label8;

        r23 = (com.opengamma.analytics.financial.greeks.MixedOrderUnderlying) r1;

        r24 = null;

        i3 = 0;

        $r12 = virtualinvoke r23.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List getUnderlyingOrders()>();

        r2 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) $r13;

        if r24 != null goto label4;

        r24 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: com.opengamma.timeseries.DoubleTimeSeries getTimeSeries(java.util.Map,com.opengamma.analytics.financial.greeks.Underlying)>(r0, r3);

        i3 = interfaceinvoke r24.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        goto label6;

     label4:
        r25 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: com.opengamma.timeseries.DoubleTimeSeries getTimeSeries(java.util.Map,com.opengamma.analytics.financial.greeks.Underlying)>(r0, r3);

        $i0 = interfaceinvoke r25.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if $i0 == i3 goto label5;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time series in map were not the same length");

        throw $r15;

     label5:
        r24 = interfaceinvoke r24.<com.opengamma.timeseries.DoubleTimeSeries: com.opengamma.timeseries.DoubleTimeSeries multiply(com.opengamma.timeseries.DoubleTimeSeries)>(r25);

        $i1 = interfaceinvoke r24.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if $i1 == i3 goto label6;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time series in map did not contain the same times");

        throw $r14;

     label6:
        goto label3;

     label7:
        return r24;

     label8:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Order was neither NthOrderUnderlying nor MixedOrderUnderlying: have ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }
}
