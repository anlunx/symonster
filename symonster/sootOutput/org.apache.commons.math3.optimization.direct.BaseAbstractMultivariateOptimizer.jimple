public abstract class org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.BaseMultivariateOptimizer
{
    protected final org.apache.commons.math3.util.Incrementor evaluations;
    private org.apache.commons.math3.optimization.ConvergenceChecker checker;
    private org.apache.commons.math3.optimization.GoalType goal;
    private double[] start;
    private double[] lowerBound;
    private double[] upperBound;
    private org.apache.commons.math3.analysis.MultivariateFunction function;

    protected void <init>()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }

    protected void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.util.Incrementor $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker> = r1;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker>;

        return $r1;
    }

    protected double computeObjectiveValue(double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        double[] r1;
        org.apache.commons.math3.util.Incrementor $r3;
        org.apache.commons.math3.analysis.MultivariateFunction $r4;
        double $d0;
        org.apache.commons.math3.exception.MaxCountExceededException $r5;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r6;
        java.lang.Number $r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 := @parameter0: double[];

     label1:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r6.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r7);

        throw $r6;

     label4:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function>;

        $d0 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r1);

        return $d0;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        double[] r3;
        org.apache.commons.math3.optimization.OptimizationData[] $r4;
        org.apache.commons.math3.optimization.InitialGuess $r5;
        org.apache.commons.math3.optimization.PointValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        r3 := @parameter3: double[];

        $r4 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r5 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r5.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>(r3);

        $r4[0] = $r5;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>(i0, r1, r2, $r4);

        return $r6;
    }

    public transient org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        org.apache.commons.math3.optimization.OptimizationData[] r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>(i0, r1, r2, r3);

        return $r4;
    }

    protected org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        double[] r3;
        org.apache.commons.math3.optimization.OptimizationData[] $r4;
        org.apache.commons.math3.optimization.InitialGuess $r5;
        org.apache.commons.math3.optimization.PointValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        r3 := @parameter3: double[];

        $r4 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r5 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r5.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>(r3);

        $r4[0] = $r5;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>(i0, r1, r2, $r4);

        return $r6;
    }

    protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        org.apache.commons.math3.optimization.OptimizationData[] r3;
        org.apache.commons.math3.util.Incrementor $r4, $r5;
        org.apache.commons.math3.optimization.PointValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i0);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.analysis.MultivariateFunction function> = r1;

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal> = r2;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>(r3);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void checkParameters()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair doOptimize()>();

        return $r6;
    }

    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optimization.OptimizationData r3;
        org.apache.commons.math3.optimization.SimpleBounds r4;
        boolean $z0, $z1;
        double[] $r5, $r6, $r8;
        org.apache.commons.math3.optimization.InitialGuess $r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optimization.InitialGuess;

        if $z0 == 0 goto label2;

        $r7 = (org.apache.commons.math3.optimization.InitialGuess) r3;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.optimization.InitialGuess: double[] getInitialGuess()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start> = $r8;

        goto label3;

     label2:
        $z1 = r3 instanceof org.apache.commons.math3.optimization.SimpleBounds;

        if $z1 == 0 goto label3;

        r4 = (org.apache.commons.math3.optimization.SimpleBounds) r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.optimization.SimpleBounds: double[] getLower()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound> = $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.optimization.SimpleBounds: double[] getUpper()>();

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound> = $r6;

        goto label3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public org.apache.commons.math3.optimization.GoalType getGoalType()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        org.apache.commons.math3.optimization.GoalType $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal>;

        return $r1;
    }

    public double[] getStartPoint()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    public double[] getLowerBound()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    public double[] getUpperBound()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    protected abstract org.apache.commons.math3.optimization.PointValuePair doOptimize();

    private void checkParameters()
    {
        org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer r0;
        int i0, $i1, $i3, $i4, $i6, i7, i8, i9, i10;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r18, $r19, $r20, $r21, $r26;
        byte $b2, $b5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r14;
        java.lang.Double $r15, $r16, $r23, $r24;
        org.apache.commons.math3.exception.DimensionMismatchException $r17, $r25;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r22;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        if $r1 == null goto label12;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        i0 = lengthof $r2;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r3 == null goto label04;

        $r19 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $i4 = lengthof $r19;

        if $i4 == i0 goto label01;

        $r25 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r26 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $i6 = lengthof $r26;

        specialinvoke $r25.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, i0);

        throw $r25;

     label01:
        i7 = 0;

     label02:
        if i7 >= i0 goto label04;

        $r20 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        d0 = $r20[i7];

        $r21 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        d1 = $r21[i7];

        $b5 = d0 cmpg d1;

        if $b5 >= 0 goto label03;

        $r22 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r22.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r23, $r24, 1);

        throw $r22;

     label03:
        i7 = i7 + 1;

        goto label02;

     label04:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r4 == null goto label08;

        $r11 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r11;

        if $i1 == i0 goto label05;

        $r17 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r18 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $i3 = lengthof $r18;

        specialinvoke $r17.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r17;

     label05:
        i8 = 0;

     label06:
        if i8 >= i0 goto label08;

        $r12 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] start>;

        d2 = $r12[i8];

        $r13 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        d3 = $r13[i8];

        $b2 = d2 cmpl d3;

        if $b2 <= 0 goto label07;

        $r14 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        specialinvoke $r14.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r15, $r16, 1);

        throw $r14;

     label07:
        i8 = i8 + 1;

        goto label06;

     label08:
        $r5 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        if $r5 != null goto label10;

        $r9 = newarray (double)[i0];

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound> = $r9;

        i9 = 0;

     label09:
        if i9 >= i0 goto label10;

        $r10 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] lowerBound>;

        $r10[i9] = #-Infinity;

        i9 = i9 + 1;

        goto label09;

     label10:
        $r6 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        if $r6 != null goto label12;

        $r7 = newarray (double)[i0];

        r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound> = $r7;

        i10 = 0;

     label11:
        if i10 >= i0 goto label12;

        $r8 = r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: double[] upperBound>;

        $r8[i10] = #Infinity;

        i10 = i10 + 1;

        goto label11;

     label12:
        return;
    }
}
