class org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateMatrixFunction
{
    final org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction this$0;

    void <init>(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2 r0;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r1;

        r0 := @this: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2;

        r1 := @parameter0: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[][] value(double[])
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2 r0;
        double[] r1, $r4, $r8, $r9;
        int i0, i1;
        double[][] r2;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction $r3, $r5, $r7;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2;

        r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction this$0>;

        $r4 = staticinvoke <org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: double[] access$000(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)>($r3);

        i0 = lengthof $r4;

        r2 = newarray (double[])[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction this$0>;

        $r6 = staticinvoke <org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)>($r5);

        $r7 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction this$0>;

        $r8 = staticinvoke <org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: double[] access$000(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)>($r7);

        $d0 = $r8[i1];

        $r9 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.ParametricUnivariateFunction: double[] gradient(double,double[])>($d0, r1);

        r2[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }
}
