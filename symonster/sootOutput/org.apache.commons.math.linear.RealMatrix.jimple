public interface  org.apache.commons.math.linear.RealMatrix extends java.lang.Object implements org.apache.commons.math.linear.AnyMatrix
{

    public abstract org.apache.commons.math.linear.RealMatrix createMatrix(int, int);

    public abstract org.apache.commons.math.linear.RealMatrix copy();

    public abstract org.apache.commons.math.linear.RealMatrix add(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealMatrix subtract(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealMatrix scalarAdd(double);

    public abstract org.apache.commons.math.linear.RealMatrix scalarMultiply(double);

    public abstract org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealMatrix preMultiply(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException;

    public abstract double[][] getData();

    public abstract double getNorm();

    public abstract double getFrobeniusNorm();

    public abstract org.apache.commons.math.linear.RealMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract org.apache.commons.math.linear.RealMatrix getSubMatrix(int[], int[]) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void copySubMatrix(int, int, int, int, double[][]) throws org.apache.commons.math.linear.MatrixIndexException, java.lang.IllegalArgumentException;

    public abstract void copySubMatrix(int[], int[], double[][]) throws org.apache.commons.math.linear.MatrixIndexException, java.lang.IllegalArgumentException;

    public abstract void setSubMatrix(double[][], int, int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract org.apache.commons.math.linear.RealMatrix getRowMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setRowMatrix(int, org.apache.commons.math.linear.RealMatrix) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract org.apache.commons.math.linear.RealMatrix getColumnMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setColumnMatrix(int, org.apache.commons.math.linear.RealMatrix) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract org.apache.commons.math.linear.RealVector getRowVector(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setRowVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract org.apache.commons.math.linear.RealVector getColumnVector(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setColumnVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract double[] getRow(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setRow(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract double[] getColumn(int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setColumn(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract double getEntry(int, int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void addToEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void multiplyEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract org.apache.commons.math.linear.RealMatrix transpose();

    public abstract org.apache.commons.math.linear.RealMatrix inverse() throws org.apache.commons.math.linear.InvalidMatrixException;

    public abstract double getDeterminant();

    public abstract boolean isSingular();

    public abstract double getTrace() throws org.apache.commons.math.linear.NonSquareMatrixException;

    public abstract double[] operate(double[]) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealVector operate(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException;

    public abstract double[] preMultiply(double[]) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealVector preMultiply(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException;

    public abstract double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException;

    public abstract double[] solve(double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException;

    public abstract org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException;
}
