public class org.apache.commons.math.fraction.Fraction extends java.lang.Number implements org.apache.commons.math.FieldElement, java.lang.Comparable, java.io.Serializable
{
    public static final org.apache.commons.math.fraction.Fraction TWO;
    public static final org.apache.commons.math.fraction.Fraction ONE;
    public static final org.apache.commons.math.fraction.Fraction ZERO;
    public static final org.apache.commons.math.fraction.Fraction FOUR_FIFTHS;
    public static final org.apache.commons.math.fraction.Fraction ONE_FIFTH;
    public static final org.apache.commons.math.fraction.Fraction ONE_HALF;
    public static final org.apache.commons.math.fraction.Fraction ONE_QUARTER;
    public static final org.apache.commons.math.fraction.Fraction ONE_THIRD;
    public static final org.apache.commons.math.fraction.Fraction THREE_FIFTHS;
    public static final org.apache.commons.math.fraction.Fraction THREE_QUARTERS;
    public static final org.apache.commons.math.fraction.Fraction TWO_FIFTHS;
    public static final org.apache.commons.math.fraction.Fraction TWO_QUARTERS;
    public static final org.apache.commons.math.fraction.Fraction TWO_THIRDS;
    public static final org.apache.commons.math.fraction.Fraction MINUS_ONE;
    private static final long serialVersionUID;
    private final int denominator;
    private final int numerator;

    public void <init>(double) throws org.apache.commons.math.fraction.FractionConversionException
    {
        org.apache.commons.math.fraction.Fraction r0;
        double d0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.fraction.Fraction: void <init>(double,double,int)>(d0, 1.0E-5, 100);

        return;
    }

    public void <init>(double, double, int) throws org.apache.commons.math.fraction.FractionConversionException
    {
        org.apache.commons.math.fraction.Fraction r0;
        double d0, d1;
        int i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.fraction.Fraction: void <init>(double,double,int,int)>(d0, d1, 2147483647, i0);

        return;
    }

    public void <init>(double, int) throws org.apache.commons.math.fraction.FractionConversionException
    {
        org.apache.commons.math.fraction.Fraction r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.fraction.Fraction: void <init>(double,double,int,int)>(d0, 0.0, i0, 100);

        return;
    }

    private void <init>(double, double, int, int) throws org.apache.commons.math.fraction.FractionConversionException
    {
        org.apache.commons.math.fraction.Fraction r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        int i0, i1, $i12, $i13, $i14, $i15, $i19, i27;
        long l3, $l6, $l7, $l10, $l17, l20, l21, l22, l23, l24, l28, l29;
        byte $b4, $b5, $b8, $b9, $b11, $b16, $b18;
        org.apache.commons.math.fraction.FractionConversionException $r1, $r2, $r3;
        boolean z0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        d15 = d0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        l20 = (long) $d4;

        $b4 = l20 cmp 2147483647L;

        if $b4 <= 0 goto label01;

        $r3 = new org.apache.commons.math.fraction.FractionConversionException;

        specialinvoke $r3.<org.apache.commons.math.fraction.FractionConversionException: void <init>(double,long,long)>(d0, l20, 1L);

        throw $r3;

     label01:
        $d5 = (double) l20;

        $d6 = $d5 - d0;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d6);

        $b5 = $d7 cmpg d1;

        if $b5 >= 0 goto label02;

        $i19 = (int) l20;

        r0.<org.apache.commons.math.fraction.Fraction: int numerator> = $i19;

        r0.<org.apache.commons.math.fraction.Fraction: int denominator> = 1;

        return;

     label02:
        l21 = 1L;

        l22 = 0L;

        l23 = l20;

        l24 = 1L;

        i27 = 0;

        z0 = 0;

     label03:
        i27 = i27 + 1;

        $d8 = (double) l20;

        $d9 = d15 - $d8;

        d2 = 1.0 / $d9;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d2);

        l3 = (long) $d10;

        $l6 = l3 * l23;

        l28 = $l6 + l21;

        $l7 = l3 * l24;

        l29 = $l7 + l22;

        $b8 = l28 cmp 2147483647L;

        if $b8 > 0 goto label04;

        $b9 = l29 cmp 2147483647L;

        if $b9 <= 0 goto label05;

     label04:
        $r1 = new org.apache.commons.math.fraction.FractionConversionException;

        specialinvoke $r1.<org.apache.commons.math.fraction.FractionConversionException: void <init>(double,long,long)>(d0, l28, l29);

        throw $r1;

     label05:
        $d12 = (double) l28;

        $d11 = (double) l29;

        d3 = $d12 / $d11;

        if i27 >= i1 goto label06;

        $d13 = d3 - d0;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d13);

        $b16 = $d14 cmpl d1;

        if $b16 <= 0 goto label06;

        $l17 = (long) i0;

        $b18 = l29 cmp $l17;

        if $b18 >= 0 goto label06;

        l21 = l23;

        l23 = l28;

        l22 = l24;

        l24 = l29;

        l20 = l3;

        d15 = d2;

        goto label07;

     label06:
        z0 = 1;

     label07:
        if z0 == 0 goto label03;

        if i27 < i1 goto label08;

        $r2 = new org.apache.commons.math.fraction.FractionConversionException;

        specialinvoke $r2.<org.apache.commons.math.fraction.FractionConversionException: void <init>(double,int)>(d0, i1);

        throw $r2;

     label08:
        $l10 = (long) i0;

        $b11 = l29 cmp $l10;

        if $b11 >= 0 goto label09;

        $i14 = (int) l28;

        r0.<org.apache.commons.math.fraction.Fraction: int numerator> = $i14;

        $i15 = (int) l29;

        r0.<org.apache.commons.math.fraction.Fraction: int denominator> = $i15;

        goto label10;

     label09:
        $i12 = (int) l23;

        r0.<org.apache.commons.math.fraction.Fraction: int numerator> = $i12;

        $i13 = (int) l24;

        r0.<org.apache.commons.math.fraction.Fraction: int denominator> = $i13;

     label10:
        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.fraction.Fraction r0;
        int i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(i0, 1);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math.fraction.Fraction r0;
        int i0, i1, i2;
        java.lang.Object[] $r1, $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r2, $r7;
        java.lang.Integer $r3, $r4, $r8, $r9;
        java.lang.ArithmeticException $r5, $r10;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        if i2 != 0 goto label1;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_DENOMINATOR_IN_FRACTION>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r6[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r10;

     label1:
        if i2 >= 0 goto label4;

        if i1 == -2147483648 goto label2;

        if i2 != -2147483648 goto label3;

     label2:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label3:
        i1 = neg i1;

        i2 = neg i2;

     label4:
        i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i1, i2);

        if i0 <= 1 goto label5;

        i1 = i1 / i0;

        i2 = i2 / i0;

     label5:
        if i2 >= 0 goto label6;

        i1 = neg i1;

        i2 = neg i2;

     label6:
        r0.<org.apache.commons.math.fraction.Fraction: int numerator> = i1;

        r0.<org.apache.commons.math.fraction.Fraction: int denominator> = i2;

        return;
    }

    public org.apache.commons.math.fraction.Fraction abs()
    {
        org.apache.commons.math.fraction.Fraction r0, r1;
        int $i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i0 < 0 goto label1;

        r1 = r0;

        goto label2;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction negate()>();

     label2:
        return r1;
    }

    public int compareTo(org.apache.commons.math.fraction.Fraction)
    {
        org.apache.commons.math.fraction.Fraction r0, r1;
        long l0, l1, $l4, $l5, $l8, $l9;
        int $i2, $i3, $i6, $i7;
        byte $b10, $b11, $b12;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $l5 = (long) $i2;

        $i3 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $l4 = (long) $i3;

        l0 = $l5 * $l4;

        $i6 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $l9 = (long) $i6;

        $i7 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $l8 = (long) $i7;

        l1 = $l9 * $l8;

        $b10 = l0 cmp l1;

        if $b10 >= 0 goto label1;

        $b12 = -1;

        goto label3;

     label1:
        $b11 = l0 cmp l1;

        if $b11 <= 0 goto label2;

        $b12 = 1;

        goto label3;

     label2:
        $b12 = 0;

     label3:
        return $b12;
    }

    public double doubleValue()
    {
        org.apache.commons.math.fraction.Fraction r0;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $d1 = (double) $i0;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $d0 = (double) $i1;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.fraction.Fraction r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.fraction.Fraction;

        if $z0 == 0 goto label4;

        r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i0 = r2.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i1 != $i0 goto label2;

        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i2 = r2.<org.apache.commons.math.fraction.Fraction: int denominator>;

        if $i3 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public float floatValue()
    {
        org.apache.commons.math.fraction.Fraction r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: double doubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public int getDenominator()
    {
        org.apache.commons.math.fraction.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        return $i0;
    }

    public int getNumerator()
    {
        org.apache.commons.math.fraction.Fraction r0;
        int $i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        return $i0;
    }

    public int hashCode()
    {
        org.apache.commons.math.fraction.Fraction r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i1 = 629 + $i0;

        $i3 = 37 * $i1;

        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public int intValue()
    {
        org.apache.commons.math.fraction.Fraction r0;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: double doubleValue()>();

        $i0 = (int) $d0;

        return $i0;
    }

    public long longValue()
    {
        org.apache.commons.math.fraction.Fraction r0;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $d0 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: double doubleValue()>();

        $l0 = (long) $d0;

        return $l0;
    }

    public org.apache.commons.math.fraction.Fraction negate()
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;
        java.lang.ArithmeticException $r6;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i0 != -2147483648 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r2 = newarray (java.lang.Object)[2];

        $i4 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[0] = $r4;

        $i5 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label1:
        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i3 = neg $i1;

        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i3, $i2);

        return $r1;
    }

    public org.apache.commons.math.fraction.Fraction reciprocal()
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i1, $i0);

        return $r1;
    }

    public org.apache.commons.math.fraction.Fraction add(org.apache.commons.math.fraction.Fraction)
    {
        org.apache.commons.math.fraction.Fraction r0, r1, $r2;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        $r2 = specialinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction addSub(org.apache.commons.math.fraction.Fraction,boolean)>(r1, 1);

        return $r2;
    }

    public org.apache.commons.math.fraction.Fraction add(int)
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i2 = i0 * $i1;

        $i5 = $i3 + $i2;

        $i4 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i5, $i4);

        return $r1;
    }

    public org.apache.commons.math.fraction.Fraction subtract(org.apache.commons.math.fraction.Fraction)
    {
        org.apache.commons.math.fraction.Fraction r0, r1, $r2;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        $r2 = specialinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction addSub(org.apache.commons.math.fraction.Fraction,boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.commons.math.fraction.Fraction subtract(int)
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i2 = i0 * $i1;

        $i5 = $i3 - $i2;

        $i4 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i5, $i4);

        return $r1;
    }

    private org.apache.commons.math.fraction.Fraction addSub(org.apache.commons.math.fraction.Fraction, boolean)
    {
        org.apache.commons.math.fraction.Fraction r0, r1, $r11, $r15, $r18;
        boolean z0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36;
        java.math.BigInteger r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r19, r20, $r21;
        long $l8, $l11, $l13, $l16, $l17, $l18;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13, $r17;
        java.lang.ArithmeticException $r14;
        org.apache.commons.math.exception.NullArgumentException $r16;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        z0 := @parameter1: boolean;

        if r1 != null goto label01;

        $r16 = new org.apache.commons.math.exception.NullArgumentException;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FRACTION>;

        specialinvoke $r16.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r17);

        throw $r16;

     label01:
        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i3 != 0 goto label04;

        if z0 == 0 goto label02;

        $r18 = r1;

        goto label03;

     label02:
        $r18 = virtualinvoke r1.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction negate()>();

     label03:
        return $r18;

     label04:
        $i4 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i4 != 0 goto label05;

        return r0;

     label05:
        $i6 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i5 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>($i6, $i5);

        if i0 != 1 goto label08;

        $i27 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i26 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        i33 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i27, $i26);

        $i29 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i28 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        i34 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i29, $i28);

        $r15 = new org.apache.commons.math.fraction.Fraction;

        if z0 == 0 goto label06;

        $i35 = staticinvoke <org.apache.commons.math.util.MathUtils: int addAndCheck(int,int)>(i33, i34);

        goto label07;

     label06:
        $i35 = staticinvoke <org.apache.commons.math.util.MathUtils: int subAndCheck(int,int)>(i33, i34);

     label07:
        $i31 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i30 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i32 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i31, $i30);

        specialinvoke $r15.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i35, $i32);

        return $r15;

     label08:
        $i7 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $l8 = (long) $i7;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l8);

        $i9 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i10 = $i9 / i0;

        $l11 = (long) $i10;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l11);

        r19 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $i12 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $l13 = (long) $i12;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l13);

        $i14 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i15 = $i14 / i0;

        $l16 = (long) $i15;

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l16);

        r20 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        if z0 == 0 goto label09;

        $r21 = virtualinvoke r19.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r20);

        goto label10;

     label09:
        $r21 = virtualinvoke r19.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r20);

     label10:
        r2 = $r21;

        $l17 = (long) i0;

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l17);

        $r9 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        i1 = virtualinvoke $r9.<java.math.BigInteger: int intValue()>();

        if i1 != 0 goto label11;

        $i36 = i0;

        goto label12;

     label11:
        $i36 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i1, i0);

     label12:
        $l18 = (long) $i36;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l18);

        r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r10);

        $i19 = virtualinvoke r3.<java.math.BigInteger: int bitLength()>();

        if $i19 <= 31 goto label13;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NUMERATOR_OVERFLOW_AFTER_MULTIPLY>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r3;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r14;

     label13:
        $r11 = new org.apache.commons.math.fraction.Fraction;

        $i20 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        $i21 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i24 = $i21 / i0;

        $i22 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i23 = $i22 / $i36;

        $i25 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i24, $i23);

        specialinvoke $r11.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i20, $i25);

        return $r11;
    }

    public org.apache.commons.math.fraction.Fraction multiply(org.apache.commons.math.fraction.Fraction)
    {
        org.apache.commons.math.fraction.Fraction r0, r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.apache.commons.math.exception.NullArgumentException $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        if r1 != null goto label1;

        $r4 = new org.apache.commons.math.exception.NullArgumentException;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FRACTION>;

        specialinvoke $r4.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r5);

        throw $r4;

     label1:
        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i2 == 0 goto label2;

        $i3 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i3 != 0 goto label3;

     label2:
        $r2 = <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ZERO>;

        return $r2;

     label3:
        $i5 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i4 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>($i5, $i4);

        $i7 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i6 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        i1 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>($i7, $i6);

        $i8 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i11 = $i8 / i0;

        $i9 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i10 = $i9 / i1;

        $i12 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i11, $i10);

        $i13 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i16 = $i13 / i1;

        $i14 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i15 = $i14 / i0;

        $i17 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i16, $i15);

        $r3 = staticinvoke <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction getReducedFraction(int,int)>($i12, $i17);

        return $r3;
    }

    public org.apache.commons.math.fraction.Fraction multiply(int)
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i3 = $i1 * i0;

        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i3, $i2);

        return $r1;
    }

    public org.apache.commons.math.fraction.Fraction divide(org.apache.commons.math.fraction.Fraction)
    {
        org.apache.commons.math.fraction.Fraction r0, r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5, $r10;
        java.lang.Integer $r6, $r7;
        java.lang.ArithmeticException $r8;
        org.apache.commons.math.exception.NullArgumentException $r9;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: org.apache.commons.math.fraction.Fraction;

        if r1 != null goto label1;

        $r9 = new org.apache.commons.math.exception.NullArgumentException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FRACTION>;

        specialinvoke $r9.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r10);

        throw $r9;

     label1:
        $i0 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i0 != 0 goto label2;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_FRACTION_TO_DIVIDE_BY>;

        $r4 = newarray (java.lang.Object)[2];

        $i1 = r1.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r6;

        $i2 = r1.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[1] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r8;

     label2:
        $r2 = virtualinvoke r1.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction reciprocal()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction multiply(org.apache.commons.math.fraction.Fraction)>($r2);

        return $r3;
    }

    public org.apache.commons.math.fraction.Fraction divide(int)
    {
        org.apache.commons.math.fraction.Fraction r0, $r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $i2 = $i1 * i0;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>($i3, $i2);

        return $r1;
    }

    public static org.apache.commons.math.fraction.Fraction getReducedFraction(int, int)
    {
        int i0, $i1, i2, i3, i4, i5;
        org.apache.commons.math.fraction.Fraction $r0, $r6;
        java.lang.Object[] $r1, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r2, $r8;
        java.lang.Integer $r3, $r4, $r9, $r10;
        java.lang.ArithmeticException $r5, $r11;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        if i3 != 0 goto label1;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_DENOMINATOR_IN_FRACTION>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r11;

     label1:
        if i2 != 0 goto label2;

        $r6 = <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ZERO>;

        return $r6;

     label2:
        if i3 != -2147483648 goto label3;

        $i1 = i2 & 1;

        if $i1 != 0 goto label3;

        i2 = i2 / 2;

        i3 = i3 / 2;

     label3:
        if i3 >= 0 goto label6;

        if i2 == -2147483648 goto label4;

        if i3 != -2147483648 goto label5;

     label4:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_FRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label5:
        i2 = neg i2;

        i3 = neg i3;

     label6:
        i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i2, i3);

        i4 = i2 / i0;

        i5 = i3 / i0;

        $r0 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(i4, i5);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.fraction.Fraction r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String r5;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $i0 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        if $i0 != 1 goto label1;

        $i4 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        goto label3;

     label1:
        $i1 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        if $i1 != 0 goto label2;

        r5 = "0";

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i2 = r0.<org.apache.commons.math.fraction.Fraction: int numerator>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $i3 = r0.<org.apache.commons.math.fraction.Fraction: int denominator>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r5;
    }

    public org.apache.commons.math.fraction.FractionField getField()
    {
        org.apache.commons.math.fraction.Fraction r0;
        org.apache.commons.math.fraction.FractionField $r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $r1 = staticinvoke <org.apache.commons.math.fraction.FractionField: org.apache.commons.math.fraction.FractionField getInstance()>();

        return $r1;
    }

    public volatile org.apache.commons.math.Field getField()
    {
        org.apache.commons.math.fraction.Fraction r0;
        org.apache.commons.math.fraction.FractionField $r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        $r1 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.FractionField getField()>();

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws java.lang.ArithmeticException
    {
        org.apache.commons.math.fraction.Fraction r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction divide(org.apache.commons.math.fraction.Fraction)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object)
    {
        org.apache.commons.math.fraction.Fraction r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction multiply(org.apache.commons.math.fraction.Fraction)>($r2);

        return $r3;
    }

    public volatile java.lang.Object subtract(java.lang.Object)
    {
        org.apache.commons.math.fraction.Fraction r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction subtract(org.apache.commons.math.fraction.Fraction)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object)
    {
        org.apache.commons.math.fraction.Fraction r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction add(org.apache.commons.math.fraction.Fraction)>($r2);

        return $r3;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math.fraction.Fraction r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.math.fraction.Fraction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math.fraction.Fraction) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math.fraction.Fraction: int compareTo(org.apache.commons.math.fraction.Fraction)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.commons.math.fraction.Fraction $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        <org.apache.commons.math.fraction.Fraction: long serialVersionUID> = 3698073679419233275L;

        $r0 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r0.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(2, 1);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction TWO> = $r0;

        $r1 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r1.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(1, 1);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ONE> = $r1;

        $r2 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r2.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(0, 1);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ZERO> = $r2;

        $r3 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r3.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(4, 5);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction FOUR_FIFTHS> = $r3;

        $r4 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r4.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(1, 5);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ONE_FIFTH> = $r4;

        $r5 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r5.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(1, 2);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ONE_HALF> = $r5;

        $r6 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r6.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(1, 4);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ONE_QUARTER> = $r6;

        $r7 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r7.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(1, 3);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction ONE_THIRD> = $r7;

        $r8 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r8.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(3, 5);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction THREE_FIFTHS> = $r8;

        $r9 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r9.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(3, 4);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction THREE_QUARTERS> = $r9;

        $r10 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r10.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(2, 5);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction TWO_FIFTHS> = $r10;

        $r11 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r11.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(2, 4);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction TWO_QUARTERS> = $r11;

        $r12 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r12.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(2, 3);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction TWO_THIRDS> = $r12;

        $r13 = new org.apache.commons.math.fraction.Fraction;

        specialinvoke $r13.<org.apache.commons.math.fraction.Fraction: void <init>(int,int)>(-1, 1);

        <org.apache.commons.math.fraction.Fraction: org.apache.commons.math.fraction.Fraction MINUS_ONE> = $r13;

        return;
    }
}
