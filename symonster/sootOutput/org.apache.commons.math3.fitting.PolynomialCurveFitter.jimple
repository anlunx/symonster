public class org.apache.commons.math3.fitting.PolynomialCurveFitter extends org.apache.commons.math3.fitting.AbstractCurveFitter
{
    private static final org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric FUNCTION;
    private final double[] initialGuess;
    private final int maxIter;

    private void <init>(double[], int)
    {
        org.apache.commons.math3.fitting.PolynomialCurveFitter r0;
        double[] r1;
        int i0;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialCurveFitter;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.fitting.AbstractCurveFitter: void <init>()>();

        r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: double[] initialGuess> = r1;

        r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: int maxIter> = i0;

        return;
    }

    public static org.apache.commons.math3.fitting.PolynomialCurveFitter create(int)
    {
        int i0, $i1;
        org.apache.commons.math3.fitting.PolynomialCurveFitter $r0;
        double[] $r1;

        i0 := @parameter0: int;

        $r0 = new org.apache.commons.math3.fitting.PolynomialCurveFitter;

        $i1 = i0 + 1;

        $r1 = newarray (double)[$i1];

        specialinvoke $r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: void <init>(double[],int)>($r1, 2147483647);

        return $r0;
    }

    public org.apache.commons.math3.fitting.PolynomialCurveFitter withStartPoint(double[])
    {
        org.apache.commons.math3.fitting.PolynomialCurveFitter r0, $r2;
        double[] r1, $r4;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialCurveFitter;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.fitting.PolynomialCurveFitter;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        $i0 = r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: int maxIter>;

        specialinvoke $r2.<org.apache.commons.math3.fitting.PolynomialCurveFitter: void <init>(double[],int)>($r4, $i0);

        return $r2;
    }

    public org.apache.commons.math3.fitting.PolynomialCurveFitter withMaxIterations(int)
    {
        org.apache.commons.math3.fitting.PolynomialCurveFitter r0, $r1;
        int i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialCurveFitter;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fitting.PolynomialCurveFitter;

        $r2 = r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: double[] initialGuess>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.PolynomialCurveFitter: void <init>(double[],int)>($r2, i0);

        return $r1;
    }

    protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection)
    {
        org.apache.commons.math3.fitting.PolynomialCurveFitter r0;
        java.util.Collection r1;
        int i0, $i1, i2;
        double[] r2, r3, $r7, $r11;
        org.apache.commons.math3.fitting.WeightedObservedPoint r4;
        boolean $z0;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r6;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r18;
        org.apache.commons.math3.linear.DiagonalMatrix $r14;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r16;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction $r17;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r19;
        org.apache.commons.math3.exception.MathInternalError $r20;
        java.lang.Object $r21;
        double $d0, $d1;
        java.util.Iterator r22;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialCurveFitter;

        r1 := @parameter0: java.util.Collection;

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        i2 = 0;

        r22 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r21;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        r2[i2] = $d0;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getWeight()>();

        r3[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r6 = <org.apache.commons.math3.fitting.PolynomialCurveFitter: org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric FUNCTION>;

        specialinvoke $r5.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: void <init>(org.apache.commons.math3.analysis.ParametricUnivariateFunction,java.util.Collection)>($r6, r1);

        $r7 = r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: double[] initialGuess>;

        if $r7 != null goto label3;

        $r20 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r20.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r20;

     label3:
        $r8 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;

        specialinvoke $r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxEvaluations(int)>(2147483647);

        $i1 = r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: int maxIter>;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxIterations(int)>($i1);

        $r11 = r0.<org.apache.commons.math3.fitting.PolynomialCurveFitter: double[] initialGuess>;

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder start(double[])>($r11);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder target(double[])>(r2);

        $r14 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r14.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>(r3);

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder weight(org.apache.commons.math3.linear.RealMatrix)>($r14);

        $r16 = virtualinvoke $r5.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()>();

        $r17 = virtualinvoke $r5.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()>();

        $r18 = virtualinvoke $r15.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder model(org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.analysis.MultivariateMatrixFunction)>($r16, $r17);

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem build()>();

        return $r19;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r0;

        $r0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        <org.apache.commons.math3.fitting.PolynomialCurveFitter: org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric FUNCTION> = $r0;

        return;
    }
}
