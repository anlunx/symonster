public abstract class org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.SubHyperplane
{
    private final org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane;
    private final org.apache.commons.math3.geometry.partitioning.Region remainingRegion;

    protected void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion> = r2;

        return;
    }

    protected abstract org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region);

    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, $r4;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r1, $r2;
        org.apache.commons.math3.geometry.partitioning.Region $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()>();

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r2, $r3);

        return $r4;
    }

    public org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        return $r1;
    }

    public double getSize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        return $d0;
    }

    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, r2, $r8;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r4;
        org.apache.commons.math3.geometry.partitioning.Region $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r5 = r2.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r7 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r6, $r5);

        $r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r4, $r7);

        return $r8;
    }

    public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, $r18;
        org.apache.commons.math3.geometry.partitioning.Transform r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, $r11;
        org.apache.commons.math3.geometry.partitioning.BSPTree r4, r10, $r14, $r21, $r24, $r27, $r33;
        java.util.Iterator r5, r9;
        java.util.Map$Entry r6;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r7, r8;
        java.util.HashMap $r12;
        org.apache.commons.math3.geometry.partitioning.Region $r13, $r16, $r17;
        java.util.Set $r15;
        boolean $z0, $z1;
        java.lang.Object $r19, $r20, $r23, $r25, $r26, $r28, $r30, $r32;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r22;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r29, $r31;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Transform;

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        r2 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r11);

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r4 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r14, r2, r1, $r12);

        $r15 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r20;

        $r22 = virtualinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r22 == null goto label3;

        $r23 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r23;

        $r25 = virtualinvoke $r24.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r7 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r25;

        if r7 == null goto label3;

        $r26 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r26;

        $r28 = virtualinvoke $r27.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r8 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r28;

        $r29 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        r9 = virtualinvoke $r29.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r30 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r30;

        $r31 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r32 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        $r33 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r32;

        virtualinvoke $r31.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r33);

        goto label2;

     label3:
        goto label1;

     label4:
        $r16 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $r17 = interfaceinvoke $r16.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        $r18 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r2, $r17);

        return $r18;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Transform, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r18, r20, $r24, $r28, $r29, $r30, $r31;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, $r12, $r15, $r26;
        org.apache.commons.math3.geometry.partitioning.Transform r3;
        java.util.Map r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r5, $r7, $r10, $r11, $r13, $r14, $r22, $r23, $r25, $r27;
        java.lang.Object $r8, $r19;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute $r16, r21;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r17;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Transform;

        r4 := @parameter3: java.util.Map;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r7 != null goto label1;

        $r18 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r19 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r19);

        r20 = $r18;

        goto label7;

     label1:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r21 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r8;

        if r21 == null goto label6;

        $r10 = virtualinvoke r21.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r10 != null goto label2;

        $r22 = null;

        goto label3;

     label2:
        $r11 = virtualinvoke r21.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r22 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r11, $r12, r2);

     label3:
        r5 = $r22;

        $r13 = virtualinvoke r21.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r13 != null goto label4;

        $r23 = null;

        goto label5;

     label4:
        $r14 = virtualinvoke r21.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r23 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r14, $r15, r2);

     label5:
        $r16 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r17 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r17.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r5, $r23, $r17);

        r21 = $r16;

     label6:
        $r24 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r25 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r26 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane>;

        $r27 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Transform: org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r25, $r26, r2);

        $r28 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r29 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r28, r2, r3, r4);

        $r30 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r31 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r30, r2, r3, r4);

        specialinvoke $r24.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r27, $r29, $r31, r21);

        r20 = $r24;

     label7:
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20);

        return r20;
    }

    public abstract org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane);

    public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane);

    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0;
        org.apache.commons.math3.geometry.partitioning.Region $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region remainingRegion>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        return $z0;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, $r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane copySelf()>();

        return $r1;
    }
}
