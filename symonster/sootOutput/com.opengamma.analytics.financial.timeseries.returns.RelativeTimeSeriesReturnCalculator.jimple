public abstract class com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator extends com.opengamma.analytics.financial.timeseries.returns.TimeSeriesReturnCalculator
{

    public void <init>(com.opengamma.util.CalculationMode)
    {
        com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator r0;
        com.opengamma.util.CalculationMode r1;

        r0 := @this: com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator;

        r1 := @parameter0: com.opengamma.util.CalculationMode;

        specialinvoke r0.<com.opengamma.analytics.financial.timeseries.returns.TimeSeriesReturnCalculator: void <init>(com.opengamma.util.CalculationMode)>(r1);

        return;
    }

    protected transient void testInputData(com.opengamma.timeseries.DoubleTimeSeries[])
    {
        com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator r0;
        com.opengamma.timeseries.DoubleTimeSeries[] r1;
        int i0, $i1, $i2, $i3, i4, i5;
        java.util.List r2, r16;
        java.util.Iterator r3;
        java.lang.Object r4;
        com.opengamma.timeseries.DoubleTimeSeries $r6, $r7, $r10, $r11, $r12, $r14;
        com.opengamma.util.CalculationMode $r8, $r9;
        boolean $z0, $z1;
        com.opengamma.timeseries.TimeSeriesException r17, r18;
        java.lang.Throwable r19, r20;

        r0 := @this: com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator;

        r1 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r1, "x");

        $r6 = r1[0];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r6, "first time series");

        $r7 = r1[1];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r7, "second time series");

        $r8 = virtualinvoke r0.<com.opengamma.analytics.financial.timeseries.returns.RelativeTimeSeriesReturnCalculator: com.opengamma.util.CalculationMode getMode()>();

        $r9 = <com.opengamma.util.CalculationMode: com.opengamma.util.CalculationMode STRICT>;

        if $r8 != $r9 goto label8;

        $r10 = r1[0];

        i0 = interfaceinvoke $r10.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        i4 = 1;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label3;

        $r14 = r1[i4];

        $i3 = interfaceinvoke $r14.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if $i3 == i0 goto label2;

        r17 = new com.opengamma.timeseries.TimeSeriesException;

        specialinvoke r17.<com.opengamma.timeseries.TimeSeriesException: void <init>(java.lang.String)>("Time series were not all the same length");

        r19 = (java.lang.Throwable) r17;

        throw r19;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r11 = r1[0];

        r16 = interfaceinvoke $r11.<com.opengamma.timeseries.DoubleTimeSeries: java.util.List times()>();

        i5 = 1;

     label4:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label8;

        $r12 = r1[1];

        r2 = interfaceinvoke $r12.<com.opengamma.timeseries.DoubleTimeSeries: java.util.List times()>();

        r3 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z1 != 0 goto label6;

        r18 = new com.opengamma.timeseries.TimeSeriesException;

        specialinvoke r18.<com.opengamma.timeseries.TimeSeriesException: void <init>(java.lang.String)>("Time series did not contain all the same dates");

        r20 = (java.lang.Throwable) r18;

        throw r20;

     label6:
        goto label5;

     label7:
        i5 = i5 + 1;

        goto label4;

     label8:
        return;
    }
}
