public class org.apache.commons.math3.geometry.partitioning.RegionFactory extends java.lang.Object
{
    private final org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner;

    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner> = $r1;

        return;
    }

    public transient org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;
        int i0, $i1, i2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r4, $r5;
        java.lang.Boolean $r6, $r8, $r9;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r7, r10;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r5 = r1[0];

        r2 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Region wholeSpace()>();

        r10 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r6);

        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r4 = r1[i2];

        $z0 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r4);

        if $z0 == 0 goto label4;

        virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r7 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

        r10 = virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r9);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return r2;
    }

    public org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2, $r8;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger $r6;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r6);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r7);

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return $r8;
    }

    public org.apache.commons.math3.geometry.partitioning.Region intersection(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2, $r8;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger $r6;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r6);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r7);

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return $r8;
    }

    public org.apache.commons.math3.geometry.partitioning.Region xor(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2, $r8;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger $r6;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.RegionFactory$1)>(r0, null);

        r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r6);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r7);

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return $r8;
    }

    public org.apache.commons.math3.geometry.partitioning.Region difference(org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, r2, $r8;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, $r4, $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger $r6;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = new org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>(r0, r1, r2);

        r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger)>($r5, $r6);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner nodeCleaner>;

        virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r7);

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return $r8;
    }

    public org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, $r4;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r3);

        return $r4;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3, r9, $r14, $r17, $r20, $r26;
        java.util.Iterator r4, r8;
        java.util.Map$Entry r5;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r6, r7;
        java.util.HashMap $r10;
        java.util.Set $r11;
        boolean $z0, $z1;
        java.lang.Object $r12, $r13, $r16, $r18, $r19, $r21, $r23, $r25;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r15;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r22, $r24;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>(r1, $r10);

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r13;

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r15 == null goto label3;

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r16;

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r6 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r18;

        if r6 == null goto label3;

        $r19 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r19;

        $r21 = virtualinvoke $r20.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r7 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r21;

        $r22 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        r8 = virtualinvoke $r22.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r23 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r23;

        $r24 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r25 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r26 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r25;

        virtualinvoke $r24.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r26);

        goto label2;

     label3:
        goto label1;

     label4:
        return r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r14, r18, $r22, $r25, $r26, $r27, $r28;
        java.util.Map r2;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r3, $r5, $r8, $r9, $r10, $r11, $r20, $r21, $r23, $r24;
        java.lang.Object $r6, $r15;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute $r12, r19;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r13;
        java.lang.Boolean $r16, $r17;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: java.util.Map;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r5 != null goto label3;

        $r14 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r16 = (java.lang.Boolean) $r15;

        $z0 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r17 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label2;

     label1:
        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label2:
        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r17);

        r18 = $r14;

        goto label9;

     label3:
        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r19 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r6;

        if r19 == null goto label8;

        $r8 = virtualinvoke r19.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r8 != null goto label4;

        $r20 = null;

        goto label5;

     label4:
        $r9 = virtualinvoke r19.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r20 = interfaceinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

     label5:
        r3 = $r20;

        $r10 = virtualinvoke r19.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r10 != null goto label6;

        $r21 = null;

        goto label7;

     label6:
        $r11 = virtualinvoke r19.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r21 = interfaceinvoke $r11.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

     label7:
        $r12 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r13 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r3, $r21, $r13);

        r19 = $r12;

     label8:
        $r22 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r23 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r24 = interfaceinvoke $r23.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        $r25 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r26 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>($r25, r2);

        $r27 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r28 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Map)>($r27, r2);

        specialinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r24, $r26, $r28, r19);

        r18 = $r22;

     label9:
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r18);

        return r18;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$400(org.apache.commons.math3.geometry.partitioning.RegionFactory, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }
}
