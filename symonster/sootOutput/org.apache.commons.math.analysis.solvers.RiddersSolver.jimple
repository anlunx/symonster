public class org.apache.commons.math.analysis.solvers.RiddersSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
{

    public void <init>(org.apache.commons.math.analysis.UnivariateRealFunction)
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(org.apache.commons.math.analysis.UnivariateRealFunction,int,double)>(r1, 100, 1.0E-6);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(int,double)>(100, 1.0E-6);

        return;
    }

    public double solve(double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        double d0, d1, $d2;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: org.apache.commons.math.analysis.UnivariateRealFunction f>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($r1, d0, d1);

        return $d2;
    }

    public double solve(double, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        double d0, d1, d2, $d3;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: org.apache.commons.math.analysis.UnivariateRealFunction f>;

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>($r1, d0, d1, d2);

        return $d3;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void setMaximalIterationCount(int)>(i0);

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>(r1, d0, d1, d2);

        return $d3;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $d3 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        $b0 = $d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d0;

     label1:
        $d4 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $b1 = $d4 cmpl 0.0;

        if $b1 != 0 goto label2;

        return d1;

     label2:
        $d5 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d2);

        $b2 = $d5 cmpl 0.0;

        if $b2 != 0 goto label3;

        return d2;

     label3:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void verifySequence(double,double,double)>(d0, d2, d1);

        $z0 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: boolean isBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d2, r1);

        if $z0 == 0 goto label4;

        $d7 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d2);

        return $d7;

     label4:
        $d6 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d2, d1);

        return $d6;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void setMaximalIterationCount(int)>(i0);

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d1);

        return $d2;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.RiddersSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, d39, d40, d41, d42;
        byte $b0, $b1, $b4, $b5, $b6, $b7, $b8, $b9;
        int $i2, $i3, i10;
        org.apache.commons.math.MaxIterationsExceededException $r2;

        r0 := @this: org.apache.commons.math.analysis.solvers.RiddersSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d38 = d0;

        d39 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        d40 = d1;

        d41 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $b0 = d39 cmpl 0.0;

        if $b0 != 0 goto label01;

        return d0;

     label01:
        $b1 = d41 cmpl 0.0;

        if $b1 != 0 goto label02;

        return d1;

     label02:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        i10 = 1;

        d42 = #Infinity;

     label03:
        $i2 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: int maximalIterationCount>;

        if i10 > $i2 goto label11;

        $d9 = d38 + d40;

        d2 = 0.5 * $d9;

        d3 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d2);

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d3);

        $d11 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double functionValueAccuracy>;

        $b4 = $d10 cmpg $d11;

        if $b4 > 0 goto label04;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void setResult(double,int)>(d2, i10);

        $d37 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double result>;

        return $d37;

     label04:
        $d13 = d39 * d41;

        $d12 = d3 * d3;

        $d14 = $d13 / $d12;

        d4 = 1.0 - $d14;

        $d15 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d41);

        $d16 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d3);

        $d18 = $d15 * $d16;

        $d17 = d2 - d38;

        $d19 = $d18 * $d17;

        $d20 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d4);

        d5 = $d19 / $d20;

        d6 = d2 - d5;

        d7 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d6);

        $d21 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double relativeAccuracy>;

        $d22 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d6);

        $d24 = $d21 * $d22;

        $d23 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double absoluteAccuracy>;

        d8 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d24, $d23);

        $d25 = d6 - d42;

        $d26 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d25);

        $b5 = $d26 cmpg d8;

        if $b5 > 0 goto label05;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void setResult(double,int)>(d6, i10);

        $d36 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double result>;

        return $d36;

     label05:
        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d7);

        $d28 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double functionValueAccuracy>;

        $b6 = $d27 cmpg $d28;

        if $b6 > 0 goto label06;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: void setResult(double,int)>(d6, i10);

        $d35 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: double result>;

        return $d35;

     label06:
        $b7 = d5 cmpl 0.0;

        if $b7 <= 0 goto label08;

        $d32 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d39);

        $d33 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d7);

        $d34 = $d32 + $d33;

        $b9 = $d34 cmpl 0.0;

        if $b9 != 0 goto label07;

        d40 = d6;

        d41 = d7;

        goto label10;

     label07:
        d38 = d6;

        d40 = d2;

        d39 = d7;

        d41 = d3;

        goto label10;

     label08:
        $d29 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d41);

        $d30 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d7);

        $d31 = $d29 + $d30;

        $b8 = $d31 cmpl 0.0;

        if $b8 != 0 goto label09;

        d38 = d6;

        d39 = d7;

        goto label10;

     label09:
        d38 = d2;

        d40 = d6;

        d39 = d3;

        d41 = d7;

     label10:
        d42 = d6;

        i10 = i10 + 1;

        goto label03;

     label11:
        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.analysis.solvers.RiddersSolver: int maximalIterationCount>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        throw $r2;
    }
}
