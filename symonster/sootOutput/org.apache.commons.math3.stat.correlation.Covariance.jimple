public class org.apache.commons.math3.stat.correlation.Covariance extends java.lang.Object
{
    private final org.apache.commons.math3.linear.RealMatrix covarianceMatrix;
    private final int n;

    public void <init>()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix> = null;

        r0.<org.apache.commons.math3.stat.correlation.Covariance: int n> = 0;

        return;
    }

    public void <init>(double[][], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] r1;
        boolean z0;
        org.apache.commons.math3.linear.BlockRealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[][];

        z0 := @parameter1: boolean;

        $r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(org.apache.commons.math3.linear.RealMatrix,boolean)>($r2, z0);

        return;
    }

    public void <init>(double[][]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(double[][],boolean)>(r1, 1);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;
        boolean z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void checkSufficientData(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.stat.correlation.Covariance: int n> = $i0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>(r1, z0);

        r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix> = $r2;

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(org.apache.commons.math3.linear.RealMatrix,boolean)>(r1, 1);

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $r1 = r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix covarianceMatrix>;

        return $r1;
    }

    public int getN()
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        $i0 = r0.<org.apache.commons.math3.stat.correlation.Covariance: int n>;

        return $i0;
    }

    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        boolean z0;
        int i0, i1, i2;
        double d0, $d1;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r4;
        org.apache.commons.math3.linear.BlockRealMatrix $r5;
        double[] $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        z0 := @parameter1: boolean;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>(boolean)>(z0);

        $r5 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i0, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i1);

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i2);

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: double covariance(double[],double[],boolean)>($r7, $r8, z0);

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, d0);

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i1, d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i1);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[])>($r6);

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label4:
        return $r5;
    }

    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>(r1, 1);

        return $r2;
    }

    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] r1;
        boolean z0;
        org.apache.commons.math3.linear.BlockRealMatrix $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[][];

        z0 := @parameter1: boolean;

        $r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix,boolean)>($r2, z0);

        return $r3;
    }

    protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[][] r1;
        org.apache.commons.math3.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[][];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][],boolean)>(r1, 1);

        return $r2;
    }

    public double covariance(double[], double[], boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[] r1, r2;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, i5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r4;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5, $r10;
        java.lang.Object[] $r6, $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7, $r12;
        java.lang.Integer $r8, $r9, $r13, $r14;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        d13 = 0.0;

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if i0 == $i1 goto label1;

        $r10 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[0] = $r13;

        $i4 = lengthof r2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r11[1] = $r14;

        specialinvoke $r10.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label1:
        if i0 >= 2 goto label2;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label2:
        d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[])>(r1);

        d1 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[])>(r2);

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $d7 = r1[i5];

        d2 = $d7 - d0;

        $d8 = r2[i5];

        d3 = $d8 - d1;

        $d9 = d2 * d3;

        $d11 = $d9 - d13;

        $i3 = i5 + 1;

        $d10 = (double) $i3;

        $d12 = $d11 / $d10;

        d13 = d13 + $d12;

        i5 = i5 + 1;

        goto label3;

     label4:
        if z0 == 0 goto label5;

        $d5 = (double) i0;

        $i2 = i0 - 1;

        $d4 = (double) $i2;

        $d6 = $d5 / $d4;

        $d14 = d13 * $d6;

        goto label6;

     label5:
        $d14 = d13;

     label6:
        return $d14;
    }

    public double covariance(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        double[] r1, r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.Covariance: double covariance(double[],double[],boolean)>(r1, r2, 1);

        return $d0;
    }

    private void checkSufficientData(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.correlation.Covariance r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.correlation.Covariance;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i0 < 2 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_ROWS_AND_COLUMNS>;

        $r3 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r6;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        return;
    }
}
