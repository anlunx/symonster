public class org.apache.commons.math3.fitting.GaussianCurveFitter extends org.apache.commons.math3.fitting.AbstractCurveFitter
{
    private static final org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION;
    private final double[] initialGuess;
    private final int maxIter;

    private void <init>(double[], int)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0;
        double[] r1;
        int i0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.fitting.AbstractCurveFitter: void <init>()>();

        r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess> = r1;

        r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter> = i0;

        return;
    }

    public static org.apache.commons.math3.fitting.GaussianCurveFitter create()
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter $r0;

        $r0 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        specialinvoke $r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>(null, 2147483647);

        return $r0;
    }

    public org.apache.commons.math3.fitting.GaussianCurveFitter withStartPoint(double[])
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0, $r2;
        double[] r1, $r4;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        $i0 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter>;

        specialinvoke $r2.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>($r4, $i0);

        return $r2;
    }

    public org.apache.commons.math3.fitting.GaussianCurveFitter withMaxIterations(int)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0, $r1;
        int i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.fitting.GaussianCurveFitter;

        $r2 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

        specialinvoke $r1.<org.apache.commons.math3.fitting.GaussianCurveFitter: void <init>(double[],int)>($r2, i0);

        return $r1;
    }

    protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection)
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter r0;
        java.util.Collection r1;
        int i0, $i1, i2;
        double[] r2, r3, $r6, $r23;
        boolean $z0;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction $r4;
        org.apache.commons.math3.analysis.function.Gaussian$Parametric $r5;
        org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser $r7;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder $r8, $r9, $r10, $r11, $r12, $r14, $r17;
        org.apache.commons.math3.linear.DiagonalMatrix $r13;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r15;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction $r16;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r18;
        java.lang.Object $r19;
        double $d0, $d1;
        java.util.Iterator r20;
        org.apache.commons.math3.fitting.WeightedObservedPoint r21;

        r0 := @this: org.apache.commons.math3.fitting.GaussianCurveFitter;

        r1 := @parameter0: java.util.Collection;

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        i2 = 0;

        r20 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r19 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r19;

        $d0 = virtualinvoke r21.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        r2[i2] = $d0;

        $d1 = virtualinvoke r21.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getWeight()>();

        r3[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r5 = <org.apache.commons.math3.fitting.GaussianCurveFitter: org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION>;

        specialinvoke $r4.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: void <init>(org.apache.commons.math3.analysis.ParametricUnivariateFunction,java.util.Collection)>($r5, r1);

        $r6 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

        if $r6 == null goto label3;

        $r23 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: double[] initialGuess>;

        goto label4;

     label3:
        $r7 = new org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser;

        specialinvoke $r7.<org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser: void <init>(java.util.Collection)>(r1);

        $r23 = virtualinvoke $r7.<org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser: double[] guess()>();

     label4:
        $r8 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;

        specialinvoke $r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxEvaluations(int)>(2147483647);

        $i1 = r0.<org.apache.commons.math3.fitting.GaussianCurveFitter: int maxIter>;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxIterations(int)>($i1);

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder start(double[])>($r23);

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder target(double[])>(r2);

        $r13 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r13.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>(r3);

        $r14 = virtualinvoke $r12.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder weight(org.apache.commons.math3.linear.RealMatrix)>($r13);

        $r15 = virtualinvoke $r4.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()>();

        $r16 = virtualinvoke $r4.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()>();

        $r17 = virtualinvoke $r14.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder model(org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.analysis.MultivariateMatrixFunction)>($r15, $r16);

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem build()>();

        return $r18;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.fitting.GaussianCurveFitter$1 $r0;

        $r0 = new org.apache.commons.math3.fitting.GaussianCurveFitter$1;

        specialinvoke $r0.<org.apache.commons.math3.fitting.GaussianCurveFitter$1: void <init>()>();

        <org.apache.commons.math3.fitting.GaussianCurveFitter: org.apache.commons.math3.analysis.function.Gaussian$Parametric FUNCTION> = $r0;

        return;
    }
}
