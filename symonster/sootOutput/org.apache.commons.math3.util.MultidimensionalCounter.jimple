public class org.apache.commons.math3.util.MultidimensionalCounter extends java.lang.Object implements java.lang.Iterable
{
    private final int dimension;
    private final int[] uniCounterOffset;
    private final int[] size;
    private final int totalSize;
    private final int last;

    public transient void <init>(int[]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] r1, $r2, $r3, $r4, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension> = $i0;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>(r1);

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size> = $r2;

        $i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        $r3 = newarray (int)[$i1];

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset> = $r3;

        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        $i3 = $i2 - 1;

        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last> = $i3;

        $i4 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        i10 = r1[$i4];

        i11 = 0;

     label1:
        $i5 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        if i11 >= $i5 goto label4;

        i12 = 1;

        i13 = i11 + 1;

     label2:
        $i7 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if i13 >= $i7 goto label3;

        $i9 = r1[i13];

        i12 = i12 * $i9;

        i13 = i13 + 1;

        goto label2;

     label3:
        $r7 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        $r7[i11] = i12;

        $i8 = r1[i11];

        i10 = i10 * $i8;

        i11 = i11 + 1;

        goto label1;

     label4:
        $r4 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        $i6 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $r4[$i6] = 0;

        if i10 > 0 goto label5;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r6);

        throw $r5;

     label5:
        r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize> = i10;

        return;
    }

    public org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = new org.apache.commons.math3.util.MultidimensionalCounter$Iterator;

        specialinvoke $r1.<org.apache.commons.math3.util.MultidimensionalCounter$Iterator: void <init>(org.apache.commons.math3.util.MultidimensionalCounter)>(r0);

        return $r1;
    }

    public int getDimension()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        return $i0;
    }

    public int[] getCounts(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        int[] r1, $r6;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        if i0 < $i3 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i2 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        $i4 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        r1 = newarray (int)[$i4];

        i8 = 0;

        i9 = 0;

     label3:
        $i5 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        if i9 >= $i5 goto label6;

        i10 = 0;

        $r6 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        i1 = $r6[i9];

     label4:
        if i8 > i0 goto label5;

        i8 = i8 + i1;

        i10 = i10 + 1;

        goto label4;

     label5:
        i11 = i10 + -1;

        i8 = i8 - i1;

        r1[i9] = i11;

        i9 = i9 + 1;

        goto label3;

     label6:
        $i7 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $i6 = i0 - i8;

        r1[$i7] = $i6;

        return r1;
    }

    public transient int getCount(int[]) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] r1, $r5, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        r1 := @parameter0: int[];

        $i2 = lengthof r1;

        $i1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if $i2 == $i1 goto label1;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i14 = lengthof r1;

        $i13 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i14, $i13);

        throw $r9;

     label1:
        i15 = 0;

        i16 = 0;

     label2:
        $i3 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if i16 >= $i3 goto label5;

        i0 = r1[i16];

        if i0 < 0 goto label3;

        $r7 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $i9 = $r7[i16];

        if i0 < $i9 goto label4;

     label3:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $i7 = $r5[i16];

        $i8 = $i7 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label4:
        $r8 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] uniCounterOffset>;

        $i11 = $r8[i16];

        $i10 = r1[i16];

        $i12 = $i11 * $i10;

        i15 = i15 + $i12;

        i16 = i16 + 1;

        goto label2;

     label5:
        $i4 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        $i5 = r1[$i4];

        $i6 = i15 + $i5;

        return $i6;
    }

    public int getSize()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        return $i0;
    }

    public int[] getSizes()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        java.lang.StringBuilder $r2, $r4, $r6;
        int $i0, $i1, i2;
        java.lang.String $r3;
        int[] $r5;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        if i2 >= $i0 goto label2;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = newarray (int)[1];

        $r5[0] = i2;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter: int getCount(int[])>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public volatile java.util.Iterator iterator()
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        org.apache.commons.math3.util.MultidimensionalCounter$Iterator $r1;

        r0 := @this: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.util.MultidimensionalCounter: org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator()>();

        return $r1;
    }

    static int access$000(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int dimension>;

        return $i0;
    }

    static int access$100(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int totalSize>;

        return $i0;
    }

    static int access$200(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        $i0 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int last>;

        return $i0;
    }

    static int[] access$300(org.apache.commons.math3.util.MultidimensionalCounter)
    {
        org.apache.commons.math3.util.MultidimensionalCounter r0;
        int[] $r1;

        r0 := @parameter0: org.apache.commons.math3.util.MultidimensionalCounter;

        $r1 = r0.<org.apache.commons.math3.util.MultidimensionalCounter: int[] size>;

        return $r1;
    }
}
