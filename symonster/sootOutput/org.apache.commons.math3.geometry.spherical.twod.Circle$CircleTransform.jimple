class org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
{
    private final org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation> = r1;

        return;
    }

    public org.apache.commons.math3.geometry.spherical.twod.S2Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2, $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5, $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r3 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) r1;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6);

        return $r2;
    }

    public org.apache.commons.math3.geometry.spherical.twod.Circle apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.spherical.twod.Circle r2, $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r4, $r7, $r10;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r5, $r6, $r8, $r9, $r11, $r12;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.spherical.twod.Circle) r1;

        $r3 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r2);

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        $r7 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r8 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r2);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r8);

        $r10 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r11 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r2);

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $d0 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.Circle: double access$300(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r2);

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.spherical.twod.Circle$1)>($r6, $r9, $r12, $d0, null);

        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        return r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.spherical.twod.Circle apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: org.apache.commons.math3.geometry.spherical.twod.S2Point apply(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
}
