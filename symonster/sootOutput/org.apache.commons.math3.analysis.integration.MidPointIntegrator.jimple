public class org.apache.commons.math3.analysis.integration.MidPointIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
{
    public static final int MIDPOINT_MAX_ITERATIONS_COUNT;

    public void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.MidPointIntegrator r0;
        double d0, d1;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.MidPointIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(d0, d1, i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.MidPointIntegrator r0;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.MidPointIntegrator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.MidPointIntegrator r0;

        r0 := @this: org.apache.commons.math3.analysis.integration.MidPointIntegrator;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(3, 64);

        return;
    }

    private double stage(int, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.MidPointIntegrator r0;
        int i0, $i2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11;
        long l1, l4;
        byte $b3;

        r0 := @this: org.apache.commons.math3.analysis.integration.MidPointIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $i2 = i0 - 1;

        l1 = 1L << $i2;

        d10 = 0.0;

        $d4 = (double) l1;

        d3 = d2 / $d4;

        $d5 = 0.5 * d3;

        d11 = d1 + $d5;

        l4 = 0L;

     label1:
        $b3 = l4 cmp l1;

        if $b3 >= 0 goto label2;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double computeObjectiveValue(double)>(d11);

        d10 = d10 + $d9;

        d11 = d11 + d3;

        l4 = l4 + 1L;

        goto label1;

     label2:
        $d6 = d10 * d3;

        $d7 = d0 + $d6;

        $d8 = 0.5 * $d7;

        return $d8;
    }

    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.MidPointIntegrator r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16;
        int i0, $i1;
        org.apache.commons.math3.util.Incrementor $r1, $r2;
        byte $b2, $b3;

        r0 := @this: org.apache.commons.math3.analysis.integration.MidPointIntegrator;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double getMin()>();

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double getMax()>();

        d1 = $d6 - d0;

        $d7 = 0.5 * d1;

        d2 = d0 + $d7;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double computeObjectiveValue(double)>(d2);

        d16 = d1 * $d8;

     label1:
        $r1 = r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r2 = r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        i0 = virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        d3 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double stage(int,double,double,double)>(i0, d16, d0, d1);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: int getMinimalIterationCount()>();

        if i0 < $i1 goto label3;

        $d9 = d3 - d16;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

        $d10 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double getRelativeAccuracy()>();

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d16);

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d3);

        $d13 = $d11 + $d12;

        $d14 = $d10 * $d13;

        d5 = $d14 * 0.5;

        $b2 = d4 cmpg d5;

        if $b2 <= 0 goto label2;

        $d15 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.MidPointIntegrator: double getAbsoluteAccuracy()>();

        $b3 = d4 cmpg $d15;

        if $b3 > 0 goto label3;

     label2:
        return d3;

     label3:
        d16 = d3;

        goto label1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.integration.MidPointIntegrator: int MIDPOINT_MAX_ITERATIONS_COUNT> = 64;

        return;
    }
}
