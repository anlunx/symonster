public abstract class org.apache.commons.math.genetics.RandomKey extends org.apache.commons.math.genetics.AbstractListChromosome implements org.apache.commons.math.genetics.PermutationChromosome
{
    private final java.util.List sortedRepresentation;
    private final java.util.List baseSeqPermutation;

    public void <init>(java.util.List)
    {
        org.apache.commons.math.genetics.RandomKey r0;
        java.util.List r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.ArrayList $r3;
        int $i0;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: void <init>(java.util.List)>(r1);

        $r3 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: java.util.List getRepresentation()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r3);

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<org.apache.commons.math.genetics.RandomKey: java.util.List sortedRepresentation> = $r5;

        $i0 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: int getLength()>();

        $r6 = staticinvoke <org.apache.commons.math.genetics.RandomKey: java.util.List baseSequence(int)>($i0);

        $r7 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: java.util.List getRepresentation()>();

        $r8 = r0.<org.apache.commons.math.genetics.RandomKey: java.util.List sortedRepresentation>;

        $r9 = staticinvoke <org.apache.commons.math.genetics.RandomKey: java.util.List decodeGeneric(java.util.List,java.util.List,java.util.List)>($r6, $r7, $r8);

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        r0.<org.apache.commons.math.genetics.RandomKey: java.util.List baseSeqPermutation> = $r10;

        return;
    }

    public void <init>(java.lang.Double[])
    {
        org.apache.commons.math.genetics.RandomKey r0;
        java.lang.Double[] r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        r1 := @parameter0: java.lang.Double[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke r0.<org.apache.commons.math.genetics.RandomKey: void <init>(java.util.List)>($r2);

        return;
    }

    public java.util.List decode(java.util.List)
    {
        org.apache.commons.math.genetics.RandomKey r0;
        java.util.List r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: java.util.List getRepresentation()>();

        $r3 = r0.<org.apache.commons.math.genetics.RandomKey: java.util.List sortedRepresentation>;

        $r4 = staticinvoke <org.apache.commons.math.genetics.RandomKey: java.util.List decodeGeneric(java.util.List,java.util.List,java.util.List)>(r1, $r2, $r3);

        return $r4;
    }

    private static java.util.List decodeGeneric(java.util.List, java.util.List, java.util.List)
    {
        java.util.List r0, r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7, $r8;
        java.lang.IllegalArgumentException $r10, $r15;
        java.lang.Object[] $r11, $r16;
        java.lang.Integer $r12, $r13, $r17, $r18;
        java.lang.String $r14, $r19;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 == i0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r16[0] = $r17;

        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r16[1] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)", $r16);

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i3 == $i4 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = newarray (java.lang.Object)[2];

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[0] = $r12;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Representation and sortedRepr must have same sizes, %d != %d", $r11);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        i8 = 0;

     label3:
        if i8 >= i0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i8);

        i1 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>($r7);

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, null);

        i8 = i8 + 1;

        goto label3;

     label4:
        return $r6;
    }

    protected boolean isSame(org.apache.commons.math.genetics.Chromosome)
    {
        org.apache.commons.math.genetics.RandomKey r0, r2;
        org.apache.commons.math.genetics.Chromosome r1;
        java.util.List r3, r4;
        boolean $z0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5, $r6;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        r1 := @parameter0: org.apache.commons.math.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math.genetics.RandomKey;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.commons.math.genetics.RandomKey) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: int getLength()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math.genetics.RandomKey: int getLength()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        r3 = r0.<org.apache.commons.math.genetics.RandomKey: java.util.List baseSeqPermutation>;

        r4 = r2.<org.apache.commons.math.genetics.RandomKey: java.util.List baseSeqPermutation>;

        i3 = 0;

     label3:
        $i2 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: int getLength()>();

        if i3 >= $i2 goto label5;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        if $r5 == $r6 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    protected void checkValidity(java.util.List) throws org.apache.commons.math.genetics.InvalidRepresentationException
    {
        org.apache.commons.math.genetics.RandomKey r0;
        java.util.List r1;
        java.util.Iterator r2;
        double d0;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Double $r4;
        byte $b0, $b1;
        org.apache.commons.math.genetics.InvalidRepresentationException $r5;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Double) $r3;

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label2;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label3;

     label2:
        $r5 = new org.apache.commons.math.genetics.InvalidRepresentationException;

        specialinvoke $r5.<org.apache.commons.math.genetics.InvalidRepresentationException: void <init>(java.lang.String)>("Values of representation must be in [0,1] interval");

        throw $r5;

     label3:
        goto label1;

     label4:
        return;
    }

    public static final java.util.List randomPermutation(int)
    {
        int i0, i1;
        java.util.ArrayList $r1;
        org.apache.commons.math.random.RandomGenerator $r2;
        double $d0;
        java.lang.Double $r3;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = staticinvoke <org.apache.commons.math.genetics.GeneticAlgorithm: org.apache.commons.math.random.RandomGenerator getRandomGenerator()>();

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.List identityPermutation(int)
    {
        int i0, i1;
        java.util.ArrayList $r1;
        double $d0, $d1, $d2;
        java.lang.Double $r2;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = (double) i1;

        $d0 = (double) i0;

        $d2 = $d1 / $d0;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.List comparatorPermutation(java.util.List, java.util.Comparator)
    {
        java.util.List r0, $r4;
        java.util.Comparator r1;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, r1);

        $r4 = staticinvoke <org.apache.commons.math.genetics.RandomKey: java.util.List inducedPermutation(java.util.List,java.util.List)>(r0, $r3);

        return $r4;
    }

    public static java.util.List inducedPermutation(java.util.List, java.util.List) throws java.lang.IllegalArgumentException
    {
        java.util.List r0, r1, $r5;
        int i0, i1, $i2, $i3, i4;
        java.lang.Double[] r3;
        java.util.ArrayList $r4;
        java.lang.Object $r6;
        double $d0, $d1, $d2;
        java.lang.Double $r7;
        java.lang.IllegalArgumentException $r9, $r10;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 == $i3 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("originalData and permutedData must have same length");

        throw $r10;

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r3 = newarray (java.lang.Double)[i0];

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        i1 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r6);

        if i1 != -1 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("originalData and permutedData must contain the same objects.");

        throw $r9;

     label3:
        $d1 = (double) i4;

        $d0 = (double) i0;

        $d2 = $d1 / $d0;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        r3[i1] = $r7;

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, null);

        i4 = i4 + 1;

        goto label2;

     label4:
        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        return $r5;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.genetics.RandomKey r0;
        java.lang.Object[] $r1;
        double $d0;
        java.lang.Double $r2;
        java.util.List $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math.genetics.RandomKey;

        $r1 = newarray (java.lang.Object)[2];

        $d0 = virtualinvoke r0.<org.apache.commons.math.genetics.RandomKey: double getFitness()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $r3 = r0.<org.apache.commons.math.genetics.RandomKey: java.util.List baseSeqPermutation>;

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(f=%s pi=(%s))", $r1);

        return $r4;
    }

    private static java.util.List baseSequence(int)
    {
        int i0, i1;
        java.util.ArrayList $r1;
        java.lang.Integer $r2;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }
}
