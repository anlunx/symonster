public class org.apache.commons.math.random.UnitSphereRandomVectorGenerator extends java.lang.Object implements org.apache.commons.math.random.RandomVectorGenerator
{
    private final org.apache.commons.math.random.RandomGenerator rand;
    private final int dimension;

    public void <init>(int, org.apache.commons.math.random.RandomGenerator)
    {
        org.apache.commons.math.random.UnitSphereRandomVectorGenerator r0;
        int i0;
        org.apache.commons.math.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math.random.UnitSphereRandomVectorGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: int dimension> = i0;

        r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: org.apache.commons.math.random.RandomGenerator rand> = r1;

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.random.UnitSphereRandomVectorGenerator r0;
        int i0;
        org.apache.commons.math.random.MersenneTwister $r1;

        r0 := @this: org.apache.commons.math.random.UnitSphereRandomVectorGenerator;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.random.MersenneTwister;

        specialinvoke $r1.<org.apache.commons.math.random.MersenneTwister: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: void <init>(int,org.apache.commons.math.random.RandomGenerator)>(i0, $r1);

        return;
    }

    public double[] nextVector()
    {
        org.apache.commons.math.random.UnitSphereRandomVectorGenerator r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        int $i0, $i2, i3, $i4, i5;
        byte $b1;
        org.apache.commons.math.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math.random.UnitSphereRandomVectorGenerator;

        $i0 = r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: int dimension>;

        r1 = newarray (double)[$i0];

     label1:
        d7 = 0.0;

        i3 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: int dimension>;

        if i3 >= $i4 goto label3;

        $r2 = r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: org.apache.commons.math.random.RandomGenerator rand>;

        $d4 = interfaceinvoke $r2.<org.apache.commons.math.random.RandomGenerator: double nextDouble()>();

        $d5 = 2.0 * $d4;

        d0 = $d5 - 1.0;

        r1[i3] = d0;

        $d6 = d0 * d0;

        d7 = d7 + $d6;

        i3 = i3 + 1;

        goto label2;

     label3:
        $b1 = d7 cmpl 1.0;

        if $b1 > 0 goto label1;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d7);

        d8 = 1.0 / $d1;

        i5 = 0;

     label4:
        $i2 = r0.<org.apache.commons.math.random.UnitSphereRandomVectorGenerator: int dimension>;

        if i5 >= $i2 goto label5;

        $d2 = r1[i5];

        $d3 = $d2 * d8;

        r1[i5] = $d3;

        i5 = i5 + 1;

        goto label4;

     label5:
        return r1;
    }
}
