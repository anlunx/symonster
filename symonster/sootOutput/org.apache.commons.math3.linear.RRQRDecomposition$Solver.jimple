class org.apache.commons.math3.linear.RRQRDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
{
    private final org.apache.commons.math3.linear.DecompositionSolver upper;
    private org.apache.commons.math3.linear.RealMatrix p;

    private void <init>(org.apache.commons.math3.linear.DecompositionSolver, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.DecompositionSolver r1;
        org.apache.commons.math3.linear.RealMatrix r2;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.DecompositionSolver;

        r2 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.DecompositionSolver upper> = r1;

        r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix p> = r2;

        return;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.DecompositionSolver $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.DecompositionSolver upper>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        return $z0;
    }

    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector r1, $r4, $r5;
        org.apache.commons.math3.linear.DecompositionSolver $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix p>;

        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.DecompositionSolver upper>;

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)>(r1);

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r4);

        return $r5;
    }

    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r3, $r4, $r5;
        org.apache.commons.math3.linear.DecompositionSolver $r2;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r3 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix p>;

        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.DecompositionSolver upper>;

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r4);

        return $r5;
    }

    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix p>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r3;
    }

    void <init>(org.apache.commons.math3.linear.DecompositionSolver, org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RRQRDecomposition$1)
    {
        org.apache.commons.math3.linear.RRQRDecomposition$Solver r0;
        org.apache.commons.math3.linear.DecompositionSolver r1;
        org.apache.commons.math3.linear.RealMatrix r2;
        org.apache.commons.math3.linear.RRQRDecomposition$1 r3;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.DecompositionSolver;

        r2 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        r3 := @parameter2: org.apache.commons.math3.linear.RRQRDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: void <init>(org.apache.commons.math3.linear.DecompositionSolver,org.apache.commons.math3.linear.RealMatrix)>(r1, r2);

        return;
    }
}
