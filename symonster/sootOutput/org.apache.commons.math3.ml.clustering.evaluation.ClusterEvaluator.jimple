public abstract class org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator extends java.lang.Object
{
    private final org.apache.commons.math3.ml.distance.DistanceMeasure measure;

    public void <init>()
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r1);

        return;
    }

    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: org.apache.commons.math3.ml.distance.DistanceMeasure measure> = r1;

        return;
    }

    public abstract double score(java.util.List);

    public boolean isBetterScore(double, double)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        double d0, d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected double distance(org.apache.commons.math3.ml.clustering.Clusterable, org.apache.commons.math3.ml.clustering.Clusterable)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.clustering.Clusterable r1, r2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;
        double[] $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.Clusterable;

        r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: org.apache.commons.math3.ml.distance.DistanceMeasure measure>;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r4, $r5);

        return $d0;
    }

    protected org.apache.commons.math3.ml.clustering.Clusterable centroidOf(org.apache.commons.math3.ml.clustering.Cluster)
    {
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r0;
        org.apache.commons.math3.ml.clustering.Cluster r1;
        java.util.List r2;
        int i0, $i1, $i2, $i3, i4, i5;
        double[] r3, r5, $r8;
        org.apache.commons.math3.ml.clustering.Clusterable r4, $r7, $r12;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r10;
        org.apache.commons.math3.ml.clustering.DoublePoint $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.ml.clustering.CentroidCluster $r11;
        java.util.Iterator r13;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.Cluster;

        r2 = virtualinvoke r1.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z1 = r1 instanceof org.apache.commons.math3.ml.clustering.CentroidCluster;

        if $z1 == 0 goto label2;

        $r11 = (org.apache.commons.math3.ml.clustering.CentroidCluster) r1;

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        return $r12;

     label2:
        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.apache.commons.math3.ml.clustering.Clusterable) $r6;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i0 = lengthof $r8;

        r3 = newarray (double)[i0];

        r13 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.clustering.Clusterable) $r10;

        r5 = interfaceinvoke r4.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i4 = 0;

     label4:
        $i3 = lengthof r3;

        if i4 >= $i3 goto label5;

        $d4 = r3[i4];

        $d3 = r5[i4];

        $d5 = $d4 + $d3;

        r3[i4] = $d5;

        i4 = i4 + 1;

        goto label4;

     label5:
        goto label3;

     label6:
        i5 = 0;

     label7:
        $i1 = lengthof r3;

        if i5 >= $i1 goto label8;

        $d0 = r3[i5];

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $d1 = (double) $i2;

        $d2 = $d0 / $d1;

        r3[i5] = $d2;

        i5 = i5 + 1;

        goto label7;

     label8:
        $r9 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        specialinvoke $r9.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>(r3);

        return $r9;
    }
}
