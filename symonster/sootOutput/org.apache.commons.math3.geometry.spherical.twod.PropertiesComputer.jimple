class org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    private final double tolerance;
    private double summedArea;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter;
    private final java.util.List convexCellsInsidePoints;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        double d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double tolerance> = d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea> = 0.0;

        $r1 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO>;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints> = $r2;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r10;
        java.util.List r3, $r15;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r4, $r16, $r17;
        java.lang.Object $r5, $r11, $r13;
        java.lang.Boolean $r6, $r8, $r9;
        boolean $z0;
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet $r7;
        int $i0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r12, $r14;
        org.apache.commons.math3.exception.MathInternalError $r18;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r7 = new org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r9, $r8, null);

        $d1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double tolerance>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r10, $d1);

        r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getBoundaryLoops()>();

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r18 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r18.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r18;

     label1:
        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r11;

        d0 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double convexCellArea(org.apache.commons.math3.geometry.spherical.twod.Vertex)>($r12);

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r13;

        r4 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D convexCellBarycenter(org.apache.commons.math3.geometry.spherical.twod.Vertex)>($r14);

        $r15 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r4);

        $d2 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea>;

        $d3 = $d2 + d0;

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea> = $d3;

        $r16 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r17 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r17, d0, r4);

        r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter> = $r16;

     label2:
        return;
    }

    private double convexCellArea(org.apache.commons.math3.geometry.spherical.twod.Vertex)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r1, $r6, $r9, $r12, $r13;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, r3, r4, $r11;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r5, $r8;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r7, r14;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        byte $b0;
        int $i1, i2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        i2 = 0;

        d6 = 0.0;

        r14 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

     label1:
        if i2 == 0 goto label2;

        $r13 = virtualinvoke r14.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r13 == r1 goto label4;

     label2:
        $r5 = virtualinvoke r14.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        r2 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        $r6 = virtualinvoke r14.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        r3 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        $r9 = virtualinvoke r14.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        r4 = virtualinvoke $r10.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r11 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r4, r2);

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r3, $r11);

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r3, r2);

        $d2 = neg $d1;

        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d0, $d2);

        $b0 = d7 cmpg 0.0;

        if $b0 >= 0 goto label3;

        d7 = d7 + 6.283185307179586;

     label3:
        d6 = d6 + d7;

        i2 = i2 + 1;

        $r12 = virtualinvoke r14.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        r14 = virtualinvoke $r12.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        goto label1;

     label4:
        $i1 = i2 - 2;

        $d3 = (double) $i1;

        $d4 = $d3 * 3.141592653589793;

        $d5 = d6 - $d4;

        return $d5;
    }

    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D convexCellBarycenter(org.apache.commons.math3.geometry.spherical.twod.Vertex)
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r1, $r5, $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r4, $r7, r8;
        double $d0;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r3;
        int i0;
        org.apache.commons.math3.geometry.spherical.twod.Edge r9;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Vertex;

        i0 = 0;

        r8 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO>;

        r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

     label1:
        if i0 == 0 goto label2;

        $r6 = virtualinvoke r9.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r6 == r1 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r9.<org.apache.commons.math3.geometry.spherical.twod.Edge: double getLength()>();

        $r3 = virtualinvoke r9.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r8, $d0, $r4);

        r8 = $r2;

        i0 = i0 + 1;

        $r5 = virtualinvoke r9.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        r9 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        goto label1;

     label3:
        $r7 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        return $r7;
    }

    public double getArea()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double summedArea>;

        return $d0;
    }

    public org.apache.commons.math3.geometry.spherical.twod.S2Point getBarycenter()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r3;
        double $d0;
        byte $b0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2, $r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNormSq()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point NaN>;

        return $r4;

     label1:
        $r2 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.euclidean.threed.Vector3D summedBarycenter>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3);

        return $r2;
    }

    public java.util.List getConvexCellsInsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List convexCellsInsidePoints>;

        return $r1;
    }
}
