public class org.apache.commons.math3.linear.RRQRDecomposition extends org.apache.commons.math3.linear.QRDecomposition
{
    private int[] p;
    private org.apache.commons.math3.linear.RealMatrix cachedP;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r1, 0.0);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r1, d0);

        return;
    }

    protected void decompose(double[][])
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        double[][] r1;
        int $i0, $i1, i2;
        int[] $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        r1 := @parameter0: double[][];

        $i0 = lengthof r1;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p> = $r2;

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r4[i2] = i2;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void decompose(double[][])>(r1);

        return;
    }

    protected void performHouseholderReflection(int, double[][])
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        int i0, $i1, $i2, $i3, i5, i6, i7, i8;
        double[][] r1;
        double[] $r2, $r7, $r8, $r9, r10;
        int[] $r3, $r4, $r5, $r6;
        byte $b4;
        double $d0, $d1, $d2, d3, d4;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        i0 := @parameter0: int;

        r1 := @parameter1: double[][];

        d3 = 0.0;

        i5 = i0;

        i6 = i0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label5;

        d4 = 0.0;

        i7 = 0;

     label2:
        $r7 = r1[i6];

        $i3 = lengthof $r7;

        if i7 >= $i3 goto label3;

        $r8 = r1[i6];

        $d1 = $r8[i7];

        $r9 = r1[i6];

        $d0 = $r9[i7];

        $d2 = $d1 * $d0;

        d4 = d4 + $d2;

        i7 = i7 + 1;

        goto label2;

     label3:
        $b4 = d4 cmpl d3;

        if $b4 <= 0 goto label4;

        d3 = d4;

        i5 = i6;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        if i5 == i0 goto label6;

        r10 = r1[i0];

        $r2 = r1[i5];

        r1[i0] = $r2;

        r1[i5] = r10;

        $r3 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        i8 = $r3[i0];

        $r5 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r4 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i2 = $r4[i5];

        $r5[i0] = $i2;

        $r6 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $r6[i5] = i8;

     label6:
        specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: void performHouseholderReflection(int,double[][])>(i0, r1);

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        int i0, $i1, i2;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r4, $r6;
        int[] $r3, $r5;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        i0 = lengthof $r3;

        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = $r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        $r5 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: int[] p>;

        $i1 = $r5[i2];

        interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>($i1, i2, 1.0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r2;
    }

    public int getRank(double)
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        double d0, d1, d2, $d3, $d4, d5;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;
        int i0, i1, $i2, $i3, $i4, i7;
        byte $b5, $b6;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix getR()>();

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        i7 = 1;

        d5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        d1 = d5;

     label1:
        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        if i7 >= $i2 goto label3;

        $i4 = i0 - 1;

        $i3 = i1 - 1;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i7, $i4, i7, $i3);

        d2 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double getFrobeniusNorm()>();

        $b5 = d2 cmpl 0.0;

        if $b5 == 0 goto label3;

        $d3 = d2 / d5;

        $d4 = $d3 * d1;

        $b6 = $d4 cmpg d0;

        if $b6 >= 0 goto label2;

        goto label3;

     label2:
        d5 = d2;

        i7 = i7 + 1;

        goto label1;

     label3:
        return i7;
    }

    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.RRQRDecomposition r0;
        org.apache.commons.math3.linear.RRQRDecomposition$Solver $r1;
        org.apache.commons.math3.linear.DecompositionSolver $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.linear.RRQRDecomposition;

        $r1 = new org.apache.commons.math3.linear.RRQRDecomposition$Solver;

        $r2 = specialinvoke r0.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RRQRDecomposition: org.apache.commons.math3.linear.RealMatrix getP()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.RRQRDecomposition$Solver: void <init>(org.apache.commons.math3.linear.DecompositionSolver,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.linear.RRQRDecomposition$1)>($r2, $r3, null);

        return $r1;
    }
}
