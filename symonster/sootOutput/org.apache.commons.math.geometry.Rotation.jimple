public class org.apache.commons.math.geometry.Rotation extends java.lang.Object implements java.io.Serializable
{
    public static final org.apache.commons.math.geometry.Rotation IDENTITY;
    private static final long serialVersionUID;
    private final double q0;
    private final double q1;
    private final double q2;
    private final double q3;

    public void <init>(double, double, double, double, boolean)
    {
        org.apache.commons.math.geometry.Rotation r0;
        boolean z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, d11, d12;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        d9 := @parameter0: double;

        d10 := @parameter1: double;

        d11 := @parameter2: double;

        d12 := @parameter3: double;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $d2 = d9 * d9;

        $d1 = d10 * d10;

        $d4 = $d2 + $d1;

        $d3 = d11 * d11;

        $d6 = $d4 + $d3;

        $d5 = d12 * d12;

        $d7 = $d6 + $d5;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d7);

        d0 = 1.0 / $d8;

        d9 = d9 * d0;

        d10 = d10 * d0;

        d11 = d11 * d0;

        d12 = d12 * d0;

     label1:
        r0.<org.apache.commons.math.geometry.Rotation: double q0> = d9;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = d10;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = d11;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = d12;

        return;
    }

    public void <init>(org.apache.commons.math.geometry.Vector3D, double)
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.Vector3D r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        d1 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_AXIS>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label1:
        d2 = -0.5 * d0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>(d2);

        d3 = $d4 / d1;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>(d2);

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d5;

        $d6 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d7 = d3 * $d6;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d7;

        $d8 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d9 = d3 * $d8;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d9;

        $d10 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d11 = d3 * $d10;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d11;

        return;
    }

    public void <init>(double[][], double) throws org.apache.commons.math.geometry.NotARotationMatrixException
    {
        org.apache.commons.math.geometry.Rotation r0;
        double[][] r1, r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, d110, d111, d112, d113, d114, d115, d116, d117;
        int $i0, $i1, $i2, $i3, $i8, $i9;
        double[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r65;
        byte $b4, $b5, $b6, $b7;
        org.apache.commons.math.geometry.NotARotationMatrixException $r57, $r61;
        java.lang.Object[] $r58, $r63;
        org.apache.commons.math.exception.util.LocalizedFormats $r59, $r62;
        java.lang.Double $r60;
        java.lang.Integer $r64, $r66;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 3 goto label1;

        $r3 = r1[0];

        $i1 = lengthof $r3;

        if $i1 != 3 goto label1;

        $r4 = r1[1];

        $i2 = lengthof $r4;

        if $i2 != 3 goto label1;

        $r5 = r1[2];

        $i3 = lengthof $r5;

        if $i3 == 3 goto label2;

     label1:
        $r61 = new org.apache.commons.math.geometry.NotARotationMatrixException;

        $r62 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ROTATION_MATRIX_DIMENSIONS>;

        $r63 = newarray (java.lang.Object)[2];

        $i8 = lengthof r1;

        $r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r63[0] = $r64;

        $r65 = r1[0];

        $i9 = lengthof $r65;

        $r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r63[1] = $r66;

        specialinvoke $r61.<org.apache.commons.math.geometry.NotARotationMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r62, $r63);

        throw $r61;

     label2:
        r2 = specialinvoke r0.<org.apache.commons.math.geometry.Rotation: double[][] orthogonalizeMatrix(double[][],double)>(r1, d0);

        $r6 = r2[0];

        $d9 = $r6[0];

        $r7 = r2[1];

        $d3 = $r7[1];

        $r8 = r2[2];

        $d2 = $r8[2];

        $d7 = $d3 * $d2;

        $r9 = r2[2];

        $d5 = $r9[1];

        $r10 = r2[1];

        $d4 = $r10[2];

        $d6 = $d5 * $d4;

        $d8 = $d7 - $d6;

        $d19 = $d9 * $d8;

        $r11 = r2[1];

        $d17 = $r11[0];

        $r12 = r2[0];

        $d11 = $r12[1];

        $r13 = r2[2];

        $d10 = $r13[2];

        $d15 = $d11 * $d10;

        $r14 = r2[2];

        $d13 = $r14[1];

        $r15 = r2[0];

        $d12 = $r15[2];

        $d14 = $d13 * $d12;

        $d16 = $d15 - $d14;

        $d18 = $d17 * $d16;

        $d29 = $d19 - $d18;

        $r16 = r2[2];

        $d27 = $r16[0];

        $r17 = r2[0];

        $d21 = $r17[1];

        $r18 = r2[1];

        $d20 = $r18[2];

        $d25 = $d21 * $d20;

        $r19 = r2[1];

        $d23 = $r19[1];

        $r20 = r2[0];

        $d22 = $r20[2];

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        $d28 = $d27 * $d26;

        d1 = $d29 + $d28;

        $b4 = d1 cmpg 0.0;

        if $b4 >= 0 goto label3;

        $r57 = new org.apache.commons.math.geometry.NotARotationMatrixException;

        $r59 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT>;

        $r58 = newarray (java.lang.Object)[1];

        $r60 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r58[0] = $r60;

        specialinvoke $r57.<org.apache.commons.math.geometry.NotARotationMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r59, $r58);

        throw $r57;

     label3:
        $r21 = r2[0];

        $d31 = $r21[0];

        $r22 = r2[1];

        $d30 = $r22[1];

        $d33 = $d31 + $d30;

        $r23 = r2[2];

        $d32 = $r23[2];

        d110 = $d33 + $d32;

        $b5 = d110 cmpl -0.19;

        if $b5 <= 0 goto label4;

        $d94 = d110 + 1.0;

        $d95 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d94);

        $d96 = 0.5 * $d95;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d96;

        $d97 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        d111 = 0.25 / $d97;

        $r51 = r2[1];

        $d99 = $r51[2];

        $r52 = r2[2];

        $d98 = $r52[1];

        $d100 = $d99 - $d98;

        $d101 = d111 * $d100;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d101;

        $r53 = r2[2];

        $d103 = $r53[0];

        $r54 = r2[0];

        $d102 = $r54[2];

        $d104 = $d103 - $d102;

        $d105 = d111 * $d104;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d105;

        $r55 = r2[0];

        $d107 = $r55[1];

        $r56 = r2[1];

        $d106 = $r56[0];

        $d108 = $d107 - $d106;

        $d109 = d111 * $d108;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d109;

        goto label7;

     label4:
        $r24 = r2[0];

        $d35 = $r24[0];

        $r25 = r2[1];

        $d34 = $r25[1];

        $d37 = $d35 - $d34;

        $r26 = r2[2];

        $d36 = $r26[2];

        d112 = $d37 - $d36;

        $b6 = d112 cmpl -0.19;

        if $b6 <= 0 goto label5;

        $d78 = d112 + 1.0;

        $d79 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d78);

        $d80 = 0.5 * $d79;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d80;

        $d81 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        d113 = 0.25 / $d81;

        $r45 = r2[1];

        $d83 = $r45[2];

        $r46 = r2[2];

        $d82 = $r46[1];

        $d84 = $d83 - $d82;

        $d85 = d113 * $d84;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d85;

        $r47 = r2[0];

        $d87 = $r47[1];

        $r48 = r2[1];

        $d86 = $r48[0];

        $d88 = $d87 + $d86;

        $d89 = d113 * $d88;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d89;

        $r49 = r2[0];

        $d91 = $r49[2];

        $r50 = r2[2];

        $d90 = $r50[0];

        $d92 = $d91 + $d90;

        $d93 = d113 * $d92;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d93;

        goto label7;

     label5:
        $r27 = r2[1];

        $d39 = $r27[1];

        $r28 = r2[0];

        $d38 = $r28[0];

        $d41 = $d39 - $d38;

        $r29 = r2[2];

        $d40 = $r29[2];

        d114 = $d41 - $d40;

        $b7 = d114 cmpl -0.19;

        if $b7 <= 0 goto label6;

        $d62 = d114 + 1.0;

        $d63 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d62);

        $d64 = 0.5 * $d63;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d64;

        $d65 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        d115 = 0.25 / $d65;

        $r39 = r2[2];

        $d67 = $r39[0];

        $r40 = r2[0];

        $d66 = $r40[2];

        $d68 = $d67 - $d66;

        $d69 = d115 * $d68;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d69;

        $r41 = r2[0];

        $d71 = $r41[1];

        $r42 = r2[1];

        $d70 = $r42[0];

        $d72 = $d71 + $d70;

        $d73 = d115 * $d72;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d73;

        $r43 = r2[2];

        $d75 = $r43[1];

        $r44 = r2[1];

        $d74 = $r44[2];

        $d76 = $d75 + $d74;

        $d77 = d115 * $d76;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d77;

        goto label7;

     label6:
        $r30 = r2[2];

        $d43 = $r30[2];

        $r31 = r2[0];

        $d42 = $r31[0];

        $d45 = $d43 - $d42;

        $r32 = r2[1];

        $d44 = $r32[1];

        d116 = $d45 - $d44;

        $d46 = d116 + 1.0;

        $d47 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d46);

        $d48 = 0.5 * $d47;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d48;

        $d49 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        d117 = 0.25 / $d49;

        $r33 = r2[0];

        $d51 = $r33[1];

        $r34 = r2[1];

        $d50 = $r34[0];

        $d52 = $d51 - $d50;

        $d53 = d117 * $d52;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d53;

        $r35 = r2[0];

        $d55 = $r35[2];

        $r36 = r2[2];

        $d54 = $r36[0];

        $d56 = $d55 + $d54;

        $d57 = d117 * $d56;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d57;

        $r37 = r2[2];

        $d59 = $r37[1];

        $r38 = r2[1];

        $d58 = $r38[2];

        $d60 = $d59 + $d58;

        $d61 = d117 * $d60;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d61;

     label7:
        return;
    }

    public void <init>(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.Vector3D r1, r2, r3, $r4, $r5, $r6, $r7, $r8, r9, r10, r16, r17, r18, r19, $r20;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, d138, d139, $d140, d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, d169, $d170, $d171, $d172;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        org.apache.commons.math.exception.util.LocalizedFormats $r11;
        java.lang.Object[] $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r2 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        r9 := @parameter2: org.apache.commons.math.geometry.Vector3D;

        r10 := @parameter3: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        d0 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r1, r1);

        d1 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r2, r2);

        d2 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r9, r9);

        d3 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r10, r10);

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b1 = d1 cmpl 0.0;

        if $b1 == 0 goto label1;

        $b2 = d2 cmpl 0.0;

        if $b2 == 0 goto label1;

        $b3 = d3 cmpl 0.0;

        if $b3 != 0 goto label2;

     label1:
        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR>;

        $r12 = newarray (java.lang.Object)[0];

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r12);

        throw $r13;

     label2:
        d4 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d5 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d6 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d7 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d8 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d9 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d38 = d0 / d2;

        d10 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d38);

        $d39 = virtualinvoke r9.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d11 = d10 * $d39;

        $d40 = virtualinvoke r9.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d12 = d10 * $d40;

        $d41 = virtualinvoke r9.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d13 = d10 * $d41;

        $r4 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r4.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(d11, d12, d13);

        d14 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r1, r2);

        d15 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>($r4, r10);

        d16 = d14 / d0;

        d17 = d15 / d0;

        $d42 = d14 * d16;

        $d45 = d1 - $d42;

        $d43 = d15 * d17;

        $d44 = d3 - $d43;

        $d46 = $d45 / $d44;

        d18 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d46);

        $d47 = d18 * d17;

        d19 = d16 - $d47;

        $d48 = d19 * d11;

        $d49 = virtualinvoke r10.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d50 = d18 * $d49;

        d20 = $d48 + $d50;

        $d51 = d19 * d12;

        $d52 = virtualinvoke r10.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d53 = d18 * $d52;

        d21 = $d51 + $d53;

        $d54 = d19 * d13;

        $d55 = virtualinvoke r10.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d56 = d18 * $d55;

        d22 = $d54 + $d56;

        $r5 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r5.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(d20, d21, d22);

        r16 = r1;

        r17 = $r4;

        $d57 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d23 = d11 - $d57;

        $d58 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d24 = d12 - $d58;

        $d59 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d25 = d13 - $d59;

        $d60 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d26 = d20 - $d60;

        $d61 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d27 = d21 - $d61;

        $d62 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d28 = d22 - $d62;

        $r6 = new org.apache.commons.math.geometry.Vector3D;

        $d64 = d24 * d28;

        $d63 = d25 * d27;

        $d71 = $d64 - $d63;

        $d66 = d25 * d26;

        $d65 = d23 * d28;

        $d70 = $d66 - $d65;

        $d68 = d23 * d27;

        $d67 = d24 * d26;

        $d69 = $d68 - $d67;

        specialinvoke $r6.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d71, $d70, $d69);

        r18 = $r6;

        $d72 = virtualinvoke $r6.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d74 = d5 * d9;

        $d73 = d6 * d8;

        $d75 = $d74 - $d73;

        $d76 = $d72 * $d75;

        $d77 = virtualinvoke $r6.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d79 = d6 * d7;

        $d78 = d4 * d9;

        $d80 = $d79 - $d78;

        $d81 = $d77 * $d80;

        $d82 = $d76 + $d81;

        $d83 = virtualinvoke $r6.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d85 = d4 * d8;

        $d84 = d5 * d7;

        $d86 = $d85 - $d84;

        $d87 = $d83 * $d86;

        d138 = $d82 + $d87;

        $b4 = d138 cmpl 0.0;

        if $b4 != 0 goto label4;

        r19 = staticinvoke <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D crossProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r1, r2);

        r3 = staticinvoke <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D crossProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>($r4, $r5);

        d29 = virtualinvoke r19.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d30 = virtualinvoke r19.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d31 = virtualinvoke r19.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d32 = virtualinvoke r3.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d33 = virtualinvoke r3.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d34 = virtualinvoke r3.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        d35 = d32 - d29;

        d36 = d33 - d30;

        d37 = d34 - d31;

        $r7 = new org.apache.commons.math.geometry.Vector3D;

        $d89 = d24 * d37;

        $d88 = d25 * d36;

        $d96 = $d89 - $d88;

        $d91 = d25 * d35;

        $d90 = d23 * d37;

        $d95 = $d91 - $d90;

        $d93 = d23 * d36;

        $d92 = d24 * d35;

        $d94 = $d93 - $d92;

        specialinvoke $r7.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d96, $d95, $d94);

        r18 = $r7;

        $d97 = virtualinvoke $r7.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d99 = d5 * d31;

        $d98 = d6 * d30;

        $d100 = $d99 - $d98;

        $d101 = $d97 * $d100;

        $d102 = virtualinvoke $r7.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d104 = d6 * d29;

        $d103 = d4 * d31;

        $d105 = $d104 - $d103;

        $d106 = $d102 * $d105;

        $d107 = $d101 + $d106;

        $d108 = virtualinvoke $r7.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d110 = d4 * d30;

        $d109 = d5 * d29;

        $d111 = $d110 - $d109;

        $d112 = $d108 * $d111;

        d138 = $d107 + $d112;

        $b5 = d138 cmpl 0.0;

        if $b5 != 0 goto label4;

        $r8 = new org.apache.commons.math.geometry.Vector3D;

        $d114 = d27 * d37;

        $d113 = d28 * d36;

        $d121 = $d114 - $d113;

        $d116 = d28 * d35;

        $d115 = d26 * d37;

        $d120 = $d116 - $d115;

        $d118 = d26 * d36;

        $d117 = d27 * d35;

        $d119 = $d118 - $d117;

        specialinvoke $r8.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d121, $d120, $d119);

        r18 = $r8;

        $d122 = virtualinvoke $r8.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d124 = d8 * d31;

        $d123 = d9 * d30;

        $d125 = $d124 - $d123;

        $d126 = $d122 * $d125;

        $d127 = virtualinvoke $r8.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d129 = d9 * d29;

        $d128 = d7 * d31;

        $d130 = $d129 - $d128;

        $d131 = $d127 * $d130;

        $d132 = $d126 + $d131;

        $d133 = virtualinvoke $r8.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d135 = d7 * d30;

        $d134 = d8 * d29;

        $d136 = $d135 - $d134;

        $d137 = $d133 * $d136;

        d138 = $d132 + $d137;

        $b6 = d138 cmpl 0.0;

        if $b6 != 0 goto label3;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = 1.0;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = 0.0;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = 0.0;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = 0.0;

        return;

     label3:
        r16 = r2;

        r17 = $r5;

     label4:
        d139 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d138);

        $d140 = d139 + d139;

        d141 = 1.0 / $d140;

        $d142 = virtualinvoke r18.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d143 = d141 * $d142;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d143;

        $d144 = virtualinvoke r18.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d145 = d141 * $d144;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d145;

        $d146 = virtualinvoke r18.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d147 = d141 * $d146;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d147;

        $r20 = new org.apache.commons.math.geometry.Vector3D;

        $d148 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d149 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d150 = $d148 * $d149;

        $d151 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d152 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d153 = $d151 * $d152;

        $d154 = $d150 - $d153;

        $d155 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d156 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d157 = $d155 * $d156;

        $d158 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d159 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d160 = $d158 * $d159;

        $d161 = $d157 - $d160;

        $d162 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d163 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d164 = $d162 * $d163;

        $d165 = virtualinvoke r16.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d166 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d167 = $d165 * $d166;

        $d168 = $d164 - $d167;

        specialinvoke $r20.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d154, $d161, $d168);

        d169 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>($r20, $r20);

        $d170 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r17, $r20);

        $d171 = d169 + d169;

        $d172 = $d170 / $d171;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d172;

        return;
    }

    public void <init>(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.Vector3D r1, r2, r6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, d42;
        byte $b0, $b1;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r2 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $d3 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        d0 = $d2 * $d3;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR>;

        $r3 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r5;

     label1:
        d1 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r1, r2);

        $d4 = -0.999999999999998 * d0;

        $b1 = d1 cmpg $d4;

        if $b1 >= 0 goto label2;

        r6 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D orthogonal()>();

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = 0.0;

        $d36 = virtualinvoke r6.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d37 = neg $d36;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d37;

        $d38 = virtualinvoke r6.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d39 = neg $d38;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d39;

        $d40 = virtualinvoke r6.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d41 = neg $d40;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d41;

        goto label3;

     label2:
        $d5 = d1 / d0;

        $d6 = 1.0 + $d5;

        $d7 = 0.5 * $d6;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d7);

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d8;

        $d9 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d10 = 2.0 * $d9;

        $d11 = $d10 * d0;

        d42 = 1.0 / $d11;

        $d12 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d13 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d14 = $d12 * $d13;

        $d15 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d16 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d17 = $d15 * $d16;

        $d18 = $d14 - $d17;

        $d19 = d42 * $d18;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d19;

        $d20 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d21 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d22 = $d20 * $d21;

        $d23 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d24 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d25 = $d23 * $d24;

        $d26 = $d22 - $d25;

        $d27 = d42 * $d26;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d27;

        $d28 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d29 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d30 = $d28 * $d29;

        $d31 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d32 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d33 = $d31 * $d32;

        $d34 = $d30 - $d33;

        $d35 = d42 * $d34;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d35;

     label3:
        return;
    }

    public void <init>(org.apache.commons.math.geometry.RotationOrder, double, double, double)
    {
        org.apache.commons.math.geometry.Rotation r0, r5, $r6, $r8, $r10, $r12;
        org.apache.commons.math.geometry.RotationOrder r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math.geometry.Vector3D $r7, $r9, $r11;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.RotationOrder;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new org.apache.commons.math.geometry.Rotation;

        $r7 = virtualinvoke r1.<org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.Vector3D getA1()>();

        specialinvoke $r6.<org.apache.commons.math.geometry.Rotation: void <init>(org.apache.commons.math.geometry.Vector3D,double)>($r7, d0);

        $r8 = new org.apache.commons.math.geometry.Rotation;

        $r9 = virtualinvoke r1.<org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.Vector3D getA2()>();

        specialinvoke $r8.<org.apache.commons.math.geometry.Rotation: void <init>(org.apache.commons.math.geometry.Vector3D,double)>($r9, d1);

        $r10 = new org.apache.commons.math.geometry.Rotation;

        $r11 = virtualinvoke r1.<org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.Vector3D getA3()>();

        specialinvoke $r10.<org.apache.commons.math.geometry.Rotation: void <init>(org.apache.commons.math.geometry.Vector3D,double)>($r11, d2);

        $r12 = virtualinvoke $r8.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Rotation applyTo(org.apache.commons.math.geometry.Rotation)>($r10);

        r5 = virtualinvoke $r6.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Rotation applyTo(org.apache.commons.math.geometry.Rotation)>($r12);

        $d3 = r5.<org.apache.commons.math.geometry.Rotation: double q0>;

        r0.<org.apache.commons.math.geometry.Rotation: double q0> = $d3;

        $d4 = r5.<org.apache.commons.math.geometry.Rotation: double q1>;

        r0.<org.apache.commons.math.geometry.Rotation: double q1> = $d4;

        $d5 = r5.<org.apache.commons.math.geometry.Rotation: double q2>;

        r0.<org.apache.commons.math.geometry.Rotation: double q2> = $d5;

        $d6 = r5.<org.apache.commons.math.geometry.Rotation: double q3>;

        r0.<org.apache.commons.math.geometry.Rotation: double q3> = $d6;

        return;
    }

    public org.apache.commons.math.geometry.Rotation revert()
    {
        org.apache.commons.math.geometry.Rotation r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $r1 = new org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d4 = neg $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d1 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        specialinvoke $r1.<org.apache.commons.math.geometry.Rotation: void <init>(double,double,double,double,boolean)>($d4, $d3, $d2, $d1, 0);

        return $r1;
    }

    public double getQ0()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        return $d0;
    }

    public double getQ1()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        return $d0;
    }

    public double getQ2()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        return $d0;
    }

    public double getQ3()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        return $d0;
    }

    public org.apache.commons.math.geometry.Vector3D getAxis()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        byte $b0, $b1;
        org.apache.commons.math.geometry.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d2 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d6 = $d2 * $d1;

        $d4 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d5 = $d4 * $d3;

        $d10 = $d6 + $d5;

        $d8 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d7 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d9 = $d8 * $d7;

        d0 = $d10 + $d9;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r3.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(1.0, 0.0, 0.0);

        return $r3;

     label1:
        $d11 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $b1 = $d11 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $d19 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d0);

        d26 = 1.0 / $d19;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d25 = $d20 * d26;

        $d21 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d24 = $d21 * d26;

        $d22 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d23 = $d22 * d26;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d25, $d24, $d23);

        return $r2;

     label2:
        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d0);

        d27 = -1.0 / $d12;

        $r1 = new org.apache.commons.math.geometry.Vector3D;

        $d13 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d18 = $d13 * d27;

        $d14 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d17 = $d14 * d27;

        $d15 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d16 = $d15 * d27;

        specialinvoke $r1.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d18, $d17, $d16);

        return $r1;
    }

    public double getAngle()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $b0 = $d0 cmpg -0.1;

        if $b0 < 0 goto label1;

        $d15 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $b1 = $d15 cmpl 0.1;

        if $b1 <= 0 goto label2;

     label1:
        $d2 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d6 = $d2 * $d1;

        $d4 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d5 = $d4 * $d3;

        $d10 = $d6 + $d5;

        $d8 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d7 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d9 = $d8 * $d7;

        $d11 = $d10 + $d9;

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d11);

        $d13 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d12);

        $d14 = 2.0 * $d13;

        return $d14;

     label2:
        $d16 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $b2 = $d16 cmpg 0.0;

        if $b2 >= 0 goto label3;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d21 = neg $d20;

        $d22 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d21);

        $d23 = 2.0 * $d22;

        return $d23;

     label3:
        $d17 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d18 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d17);

        $d19 = 2.0 * $d18;

        return $d19;
    }

    public double[] getAngles(org.apache.commons.math.geometry.RotationOrder) throws org.apache.commons.math.geometry.CardanEulerSingularityException
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.RotationOrder r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.commons.math.geometry.Vector3D $r13, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r33, $r34, $r37, $r38, $r41, $r42, $r45, $r46, $r49, $r50, $r53, $r54, $r57, $r58, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23;
        org.apache.commons.math.geometry.CardanEulerSingularityException $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47, $r51, $r55, $r59;
        double[] $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.RotationOrder;

        $r2 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder XYZ>;

        if r1 != $r2 goto label03;

        $r57 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r61 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r57);

        $r58 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r62 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r58);

        $d123 = virtualinvoke r62.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b22 = $d123 cmpg -0.9999999999;

        if $b22 < 0 goto label01;

        $d124 = virtualinvoke r62.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b23 = $d124 cmpl 0.9999999999;

        if $b23 <= 0 goto label02;

     label01:
        $r59 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r59.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r59;

     label02:
        $r60 = newarray (double)[3];

        $d125 = virtualinvoke r61.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d126 = neg $d125;

        $d127 = virtualinvoke r61.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d128 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d126, $d127);

        $r60[0] = $d128;

        $d129 = virtualinvoke r62.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d130 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d129);

        $r60[1] = $d130;

        $d131 = virtualinvoke r62.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d132 = neg $d131;

        $d133 = virtualinvoke r62.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d134 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d132, $d133);

        $r60[2] = $d134;

        return $r60;

     label03:
        $r3 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder XZY>;

        if r1 != $r3 goto label06;

        $r53 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r63 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r53);

        $r54 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r64 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r54);

        $d112 = virtualinvoke r64.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b20 = $d112 cmpg -0.9999999999;

        if $b20 < 0 goto label04;

        $d113 = virtualinvoke r64.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b21 = $d113 cmpl 0.9999999999;

        if $b21 <= 0 goto label05;

     label04:
        $r55 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r55.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r55;

     label05:
        $r56 = newarray (double)[3];

        $d114 = virtualinvoke r63.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d115 = virtualinvoke r63.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d116 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d114, $d115);

        $r56[0] = $d116;

        $d117 = virtualinvoke r64.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d118 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d117);

        $d119 = neg $d118;

        $r56[1] = $d119;

        $d120 = virtualinvoke r64.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d121 = virtualinvoke r64.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d122 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d120, $d121);

        $r56[2] = $d122;

        return $r56;

     label06:
        $r4 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder YXZ>;

        if r1 != $r4 goto label09;

        $r49 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r65 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r49);

        $r50 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r66 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r50);

        $d101 = virtualinvoke r66.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b18 = $d101 cmpg -0.9999999999;

        if $b18 < 0 goto label07;

        $d102 = virtualinvoke r66.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b19 = $d102 cmpl 0.9999999999;

        if $b19 <= 0 goto label08;

     label07:
        $r51 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r51.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r51;

     label08:
        $r52 = newarray (double)[3];

        $d103 = virtualinvoke r65.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d104 = virtualinvoke r65.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d105 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d103, $d104);

        $r52[0] = $d105;

        $d106 = virtualinvoke r66.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d107 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d106);

        $d108 = neg $d107;

        $r52[1] = $d108;

        $d109 = virtualinvoke r66.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d110 = virtualinvoke r66.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d111 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d109, $d110);

        $r52[2] = $d111;

        return $r52;

     label09:
        $r5 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder YZX>;

        if r1 != $r5 goto label12;

        $r45 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r67 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r45);

        $r46 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r68 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r46);

        $d89 = virtualinvoke r68.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b16 = $d89 cmpg -0.9999999999;

        if $b16 < 0 goto label10;

        $d90 = virtualinvoke r68.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b17 = $d90 cmpl 0.9999999999;

        if $b17 <= 0 goto label11;

     label10:
        $r47 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r47.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r47;

     label11:
        $r48 = newarray (double)[3];

        $d91 = virtualinvoke r67.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d92 = neg $d91;

        $d93 = virtualinvoke r67.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d94 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d92, $d93);

        $r48[0] = $d94;

        $d95 = virtualinvoke r68.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d96 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d95);

        $r48[1] = $d96;

        $d97 = virtualinvoke r68.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d98 = neg $d97;

        $d99 = virtualinvoke r68.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d100 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d98, $d99);

        $r48[2] = $d100;

        return $r48;

     label12:
        $r6 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder ZXY>;

        if r1 != $r6 goto label15;

        $r41 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r69 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r41);

        $r42 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r70 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r42);

        $d77 = virtualinvoke r70.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b14 = $d77 cmpg -0.9999999999;

        if $b14 < 0 goto label13;

        $d78 = virtualinvoke r70.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b15 = $d78 cmpl 0.9999999999;

        if $b15 <= 0 goto label14;

     label13:
        $r43 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r43.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r43;

     label14:
        $r44 = newarray (double)[3];

        $d79 = virtualinvoke r69.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d80 = neg $d79;

        $d81 = virtualinvoke r69.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d82 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d80, $d81);

        $r44[0] = $d82;

        $d83 = virtualinvoke r70.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d84 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d83);

        $r44[1] = $d84;

        $d85 = virtualinvoke r70.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d86 = neg $d85;

        $d87 = virtualinvoke r70.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d88 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d86, $d87);

        $r44[2] = $d88;

        return $r44;

     label15:
        $r7 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder ZYX>;

        if r1 != $r7 goto label18;

        $r37 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r71 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r37);

        $r38 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r72 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r38);

        $d66 = virtualinvoke r72.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b12 = $d66 cmpg -0.9999999999;

        if $b12 < 0 goto label16;

        $d67 = virtualinvoke r72.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b13 = $d67 cmpl 0.9999999999;

        if $b13 <= 0 goto label17;

     label16:
        $r39 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r39.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r39;

     label17:
        $r40 = newarray (double)[3];

        $d68 = virtualinvoke r71.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d69 = virtualinvoke r71.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d70 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d68, $d69);

        $r40[0] = $d70;

        $d71 = virtualinvoke r72.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d72 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d71);

        $d73 = neg $d72;

        $r40[1] = $d73;

        $d74 = virtualinvoke r72.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d75 = virtualinvoke r72.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d76 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d74, $d75);

        $r40[2] = $d76;

        return $r40;

     label18:
        $r8 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder XYX>;

        if r1 != $r8 goto label21;

        $r33 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r73 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r33);

        $r34 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r74 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r34);

        $d55 = virtualinvoke r74.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b10 = $d55 cmpg -0.9999999999;

        if $b10 < 0 goto label19;

        $d56 = virtualinvoke r74.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b11 = $d56 cmpl 0.9999999999;

        if $b11 <= 0 goto label20;

     label19:
        $r35 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r35.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r35;

     label20:
        $r36 = newarray (double)[3];

        $d57 = virtualinvoke r73.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d58 = virtualinvoke r73.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d59 = neg $d58;

        $d60 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d57, $d59);

        $r36[0] = $d60;

        $d61 = virtualinvoke r74.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d62 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d61);

        $r36[1] = $d62;

        $d63 = virtualinvoke r74.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d64 = virtualinvoke r74.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d65 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d63, $d64);

        $r36[2] = $d65;

        return $r36;

     label21:
        $r9 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder XZX>;

        if r1 != $r9 goto label24;

        $r29 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r75 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r29);

        $r30 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I>;

        r76 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r30);

        $d44 = virtualinvoke r76.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b8 = $d44 cmpg -0.9999999999;

        if $b8 < 0 goto label22;

        $d45 = virtualinvoke r76.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $b9 = $d45 cmpl 0.9999999999;

        if $b9 <= 0 goto label23;

     label22:
        $r31 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r31.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r31;

     label23:
        $r32 = newarray (double)[3];

        $d46 = virtualinvoke r75.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d47 = virtualinvoke r75.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d48 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d46, $d47);

        $r32[0] = $d48;

        $d49 = virtualinvoke r76.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d50 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d49);

        $r32[1] = $d50;

        $d51 = virtualinvoke r76.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d52 = virtualinvoke r76.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d53 = neg $d52;

        $d54 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d51, $d53);

        $r32[2] = $d54;

        return $r32;

     label24:
        $r10 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder YXY>;

        if r1 != $r10 goto label27;

        $r25 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r77 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r25);

        $r26 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r78 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r26);

        $d33 = virtualinvoke r78.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b6 = $d33 cmpg -0.9999999999;

        if $b6 < 0 goto label25;

        $d34 = virtualinvoke r78.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b7 = $d34 cmpl 0.9999999999;

        if $b7 <= 0 goto label26;

     label25:
        $r27 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r27.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r27;

     label26:
        $r28 = newarray (double)[3];

        $d35 = virtualinvoke r77.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d36 = virtualinvoke r77.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d37 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d35, $d36);

        $r28[0] = $d37;

        $d38 = virtualinvoke r78.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d39 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d38);

        $r28[1] = $d39;

        $d40 = virtualinvoke r78.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d41 = virtualinvoke r78.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d42 = neg $d41;

        $d43 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d40, $d42);

        $r28[2] = $d43;

        return $r28;

     label27:
        $r11 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder YZY>;

        if r1 != $r11 goto label30;

        $r21 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r79 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r21);

        $r22 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J>;

        r80 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r22);

        $d22 = virtualinvoke r80.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b4 = $d22 cmpg -0.9999999999;

        if $b4 < 0 goto label28;

        $d23 = virtualinvoke r80.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $b5 = $d23 cmpl 0.9999999999;

        if $b5 <= 0 goto label29;

     label28:
        $r23 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r23.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r23;

     label29:
        $r24 = newarray (double)[3];

        $d24 = virtualinvoke r79.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d25 = virtualinvoke r79.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d26 = neg $d25;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d24, $d26);

        $r24[0] = $d27;

        $d28 = virtualinvoke r80.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d29 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d28);

        $r24[1] = $d29;

        $d30 = virtualinvoke r80.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d31 = virtualinvoke r80.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d32 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d30, $d31);

        $r24[2] = $d32;

        return $r24;

     label30:
        $r12 = <org.apache.commons.math.geometry.RotationOrder: org.apache.commons.math.geometry.RotationOrder ZXZ>;

        if r1 != $r12 goto label33;

        $r17 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r81 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r17);

        $r18 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r82 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r18);

        $d11 = virtualinvoke r82.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b2 = $d11 cmpg -0.9999999999;

        if $b2 < 0 goto label31;

        $d12 = virtualinvoke r82.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b3 = $d12 cmpl 0.9999999999;

        if $b3 <= 0 goto label32;

     label31:
        $r19 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r19.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r19;

     label32:
        $r20 = newarray (double)[3];

        $d13 = virtualinvoke r81.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d14 = virtualinvoke r81.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d15 = neg $d14;

        $d16 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d13, $d15);

        $r20[0] = $d16;

        $d17 = virtualinvoke r82.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d18 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d17);

        $r20[1] = $d18;

        $d19 = virtualinvoke r82.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d20 = virtualinvoke r82.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d21 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d19, $d20);

        $r20[2] = $d21;

        return $r20;

     label33:
        $r13 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r83 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)>($r13);

        $r14 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K>;

        r84 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)>($r14);

        $d0 = virtualinvoke r84.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label34;

        $d1 = virtualinvoke r84.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $b1 = $d1 cmpl 0.9999999999;

        if $b1 <= 0 goto label35;

     label34:
        $r15 = new org.apache.commons.math.geometry.CardanEulerSingularityException;

        specialinvoke $r15.<org.apache.commons.math.geometry.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r15;

     label35:
        $r16 = newarray (double)[3];

        $d2 = virtualinvoke r83.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d3 = virtualinvoke r83.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d2, $d3);

        $r16[0] = $d4;

        $d5 = virtualinvoke r84.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d5);

        $r16[1] = $d6;

        $d7 = virtualinvoke r84.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        $d8 = virtualinvoke r84.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        $d9 = neg $d8;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d7, $d9);

        $r16[2] = $d10;

        return $r16;
    }

    public double[][] getMatrix()
    {
        org.apache.commons.math.geometry.Rotation r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50;
        double[][] r1;
        double[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        $d11 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d10 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        d0 = $d11 * $d10;

        $d13 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d12 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        d1 = $d13 * $d12;

        $d15 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d14 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        d2 = $d15 * $d14;

        $d17 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d16 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        d3 = $d17 * $d16;

        $d19 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d18 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        d4 = $d19 * $d18;

        $d21 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        d5 = $d21 * $d20;

        $d23 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d22 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        d6 = $d23 * $d22;

        $d25 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d24 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        d7 = $d25 * $d24;

        $d27 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d26 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        d8 = $d27 * $d26;

        $d29 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d28 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        d9 = $d29 * $d28;

        r1 = newarray (double[])[3];

        $r2 = newarray (double)[3];

        r1[0] = $r2;

        $r3 = newarray (double)[3];

        r1[1] = $r3;

        $r4 = newarray (double)[3];

        r1[2] = $r4;

        $r5 = r1[0];

        $d30 = d0 + d4;

        $d31 = 2.0 * $d30;

        $d32 = $d31 - 1.0;

        $r5[0] = $d32;

        $r6 = r1[1];

        $d33 = d5 - d3;

        $d34 = 2.0 * $d33;

        $r6[0] = $d34;

        $r7 = r1[2];

        $d35 = d6 + d2;

        $d36 = 2.0 * $d35;

        $r7[0] = $d36;

        $r8 = r1[0];

        $d37 = d5 + d3;

        $d38 = 2.0 * $d37;

        $r8[1] = $d38;

        $r9 = r1[1];

        $d39 = d0 + d7;

        $d40 = 2.0 * $d39;

        $d41 = $d40 - 1.0;

        $r9[1] = $d41;

        $r10 = r1[2];

        $d42 = d8 - d1;

        $d43 = 2.0 * $d42;

        $r10[1] = $d43;

        $r11 = r1[0];

        $d44 = d6 - d2;

        $d45 = 2.0 * $d44;

        $r11[2] = $d45;

        $r12 = r1[1];

        $d46 = d8 + d1;

        $d47 = 2.0 * $d46;

        $r12[2] = $d47;

        $r13 = r1[2];

        $d48 = d0 + d9;

        $d49 = 2.0 * $d48;

        $d50 = $d49 - 1.0;

        $r13[2] = $d50;

        return r1;
    }

    public org.apache.commons.math.geometry.Vector3D applyTo(org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.Vector3D r1, $r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        d0 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d1 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d2 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d4 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d7 = $d4 * d0;

        $d5 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d6 = $d5 * d1;

        $d10 = $d7 + $d6;

        $d8 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d9 = $d8 * d2;

        d3 = $d10 + $d9;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d19 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d11 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d17 = d0 * $d11;

        $d12 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d15 = $d12 * d2;

        $d13 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d14 = $d13 * d1;

        $d16 = $d15 - $d14;

        $d18 = $d17 - $d16;

        $d22 = $d19 * $d18;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d55 = $d24 - d0;

        $d33 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d25 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d31 = d1 * $d25;

        $d26 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d29 = $d26 * d0;

        $d27 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d28 = $d27 * d2;

        $d30 = $d29 - $d28;

        $d32 = $d31 - $d30;

        $d36 = $d33 * $d32;

        $d34 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d35 = d3 * $d34;

        $d37 = $d36 + $d35;

        $d38 = 2.0 * $d37;

        $d54 = $d38 - d1;

        $d47 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d39 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d45 = d2 * $d39;

        $d40 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d43 = $d40 * d1;

        $d41 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d42 = $d41 * d0;

        $d44 = $d43 - $d42;

        $d46 = $d45 - $d44;

        $d50 = $d47 * $d46;

        $d48 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d49 = d3 * $d48;

        $d51 = $d50 + $d49;

        $d52 = 2.0 * $d51;

        $d53 = $d52 - d2;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d55, $d54, $d53);

        return $r2;
    }

    public org.apache.commons.math.geometry.Vector3D applyInverseTo(org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Rotation r0;
        org.apache.commons.math.geometry.Vector3D r1, $r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        d0 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getX()>();

        d1 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getY()>();

        d2 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getZ()>();

        $d5 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d8 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d7 = $d6 * d1;

        $d11 = $d8 + $d7;

        $d9 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d10 = $d9 * d2;

        d3 = $d11 + $d10;

        $d12 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        d4 = neg $d12;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d18 = d0 * d4;

        $d13 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d16 = $d13 * d2;

        $d14 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d15 = $d14 * d1;

        $d17 = $d16 - $d15;

        $d19 = $d18 - $d17;

        $d22 = d4 * $d19;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d51 = $d24 - d0;

        $d30 = d1 * d4;

        $d25 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d28 = $d25 * d0;

        $d26 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d27 = $d26 * d2;

        $d29 = $d28 - $d27;

        $d31 = $d30 - $d29;

        $d34 = d4 * $d31;

        $d32 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d33 = d3 * $d32;

        $d35 = $d34 + $d33;

        $d36 = 2.0 * $d35;

        $d50 = $d36 - d1;

        $d42 = d2 * d4;

        $d37 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d40 = $d37 * d1;

        $d38 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d39 = $d38 * d0;

        $d41 = $d40 - $d39;

        $d43 = $d42 - $d41;

        $d46 = d4 * $d43;

        $d44 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d45 = d3 * $d44;

        $d47 = $d46 + $d45;

        $d48 = 2.0 * $d47;

        $d49 = $d48 - d2;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d51, $d50, $d49);

        return $r2;
    }

    public org.apache.commons.math.geometry.Rotation applyTo(org.apache.commons.math.geometry.Rotation)
    {
        org.apache.commons.math.geometry.Rotation r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Rotation;

        $r2 = new org.apache.commons.math.geometry.Rotation;

        $d1 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d0 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d13 = $d1 * $d0;

        $d3 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d7 = $d3 * $d2;

        $d5 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d4 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d6 = $d5 * $d4;

        $d11 = $d7 + $d6;

        $d9 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d8 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d10 = $d9 * $d8;

        $d12 = $d11 + $d10;

        $d59 = $d13 - $d12;

        $d15 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d14 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d19 = $d15 * $d14;

        $d17 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d16 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d18 = $d17 * $d16;

        $d27 = $d19 + $d18;

        $d21 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d20 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d25 = $d21 * $d20;

        $d23 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d22 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        $d58 = $d27 + $d26;

        $d29 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d28 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d33 = $d29 * $d28;

        $d31 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d30 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d32 = $d31 * $d30;

        $d41 = $d33 + $d32;

        $d35 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d34 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d39 = $d35 * $d34;

        $d37 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d36 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d38 = $d37 * $d36;

        $d40 = $d39 - $d38;

        $d57 = $d41 + $d40;

        $d43 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d42 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d47 = $d43 * $d42;

        $d45 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d44 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d46 = $d45 * $d44;

        $d55 = $d47 + $d46;

        $d49 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d48 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d53 = $d49 * $d48;

        $d51 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d50 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d52 = $d51 * $d50;

        $d54 = $d53 - $d52;

        $d56 = $d55 + $d54;

        specialinvoke $r2.<org.apache.commons.math.geometry.Rotation: void <init>(double,double,double,double,boolean)>($d59, $d58, $d57, $d56, 0);

        return $r2;
    }

    public org.apache.commons.math.geometry.Rotation applyInverseTo(org.apache.commons.math.geometry.Rotation)
    {
        org.apache.commons.math.geometry.Rotation r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: org.apache.commons.math.geometry.Rotation;

        $r2 = new org.apache.commons.math.geometry.Rotation;

        $d0 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d2 = neg $d0;

        $d1 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d14 = $d2 * $d1;

        $d4 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d3 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d8 = $d4 * $d3;

        $d6 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d5 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d7 = $d6 * $d5;

        $d12 = $d8 + $d7;

        $d10 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d9 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        $d63 = $d14 - $d13;

        $d15 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d17 = neg $d15;

        $d16 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d21 = $d17 * $d16;

        $d19 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d18 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d20 = $d19 * $d18;

        $d29 = $d21 + $d20;

        $d23 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d22 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d27 = $d23 * $d22;

        $d25 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d24 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d26 = $d25 * $d24;

        $d28 = $d27 - $d26;

        $d62 = $d29 + $d28;

        $d30 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d32 = neg $d30;

        $d31 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d36 = $d32 * $d31;

        $d34 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d33 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d35 = $d34 * $d33;

        $d44 = $d36 + $d35;

        $d38 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d37 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d42 = $d38 * $d37;

        $d40 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d39 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d41 = $d40 * $d39;

        $d43 = $d42 - $d41;

        $d61 = $d44 + $d43;

        $d45 = r1.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d47 = neg $d45;

        $d46 = r0.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d51 = $d47 * $d46;

        $d49 = r1.<org.apache.commons.math.geometry.Rotation: double q0>;

        $d48 = r0.<org.apache.commons.math.geometry.Rotation: double q3>;

        $d50 = $d49 * $d48;

        $d59 = $d51 + $d50;

        $d53 = r1.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d52 = r0.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d57 = $d53 * $d52;

        $d55 = r1.<org.apache.commons.math.geometry.Rotation: double q2>;

        $d54 = r0.<org.apache.commons.math.geometry.Rotation: double q1>;

        $d56 = $d55 * $d54;

        $d58 = $d57 - $d56;

        $d60 = $d59 + $d58;

        specialinvoke $r2.<org.apache.commons.math.geometry.Rotation: void <init>(double,double,double,double,boolean)>($d63, $d62, $d61, $d60, 0);

        return $r2;
    }

    private double[][] orthogonalizeMatrix(double[][], double) throws org.apache.commons.math.geometry.NotARotationMatrixException
    {
        org.apache.commons.math.geometry.Rotation r0;
        double[][] r1, r5;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, d200, d201, d202, d203, d204, d205, d206, d207, d208, d209;
        double[] r2, r3, r4, r6, r7, r8;
        org.apache.commons.math.geometry.NotARotationMatrixException $r9;
        java.lang.Object[] $r10;
        int $i0, i2;
        org.apache.commons.math.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12;
        byte $b1;

        r0 := @this: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        r2 = r1[0];

        r3 = r1[1];

        r4 = r1[2];

        d200 = r2[0];

        d201 = r2[1];

        d202 = r2[2];

        d203 = r3[0];

        d204 = r3[1];

        d205 = r3[2];

        d206 = r4[0];

        d207 = r4[1];

        d208 = r4[2];

        d209 = 0.0;

        r5 = newmultiarray (double)[3][3];

        r6 = r5[0];

        r7 = r5[1];

        r8 = r5[2];

        i2 = 0;

     label1:
        i2 = i2 + 1;

        if i2 >= 11 goto label3;

        $d20 = r2[0];

        $d23 = $d20 * d200;

        $d21 = r3[0];

        $d22 = $d21 * d203;

        $d26 = $d23 + $d22;

        $d24 = r4[0];

        $d25 = $d24 * d206;

        d2 = $d26 + $d25;

        $d27 = r2[1];

        $d30 = $d27 * d200;

        $d28 = r3[1];

        $d29 = $d28 * d203;

        $d33 = $d30 + $d29;

        $d31 = r4[1];

        $d32 = $d31 * d206;

        d3 = $d33 + $d32;

        $d34 = r2[2];

        $d37 = $d34 * d200;

        $d35 = r3[2];

        $d36 = $d35 * d203;

        $d40 = $d37 + $d36;

        $d38 = r4[2];

        $d39 = $d38 * d206;

        d4 = $d40 + $d39;

        $d41 = r2[0];

        $d44 = $d41 * d201;

        $d42 = r3[0];

        $d43 = $d42 * d204;

        $d47 = $d44 + $d43;

        $d45 = r4[0];

        $d46 = $d45 * d207;

        d5 = $d47 + $d46;

        $d48 = r2[1];

        $d51 = $d48 * d201;

        $d49 = r3[1];

        $d50 = $d49 * d204;

        $d54 = $d51 + $d50;

        $d52 = r4[1];

        $d53 = $d52 * d207;

        d6 = $d54 + $d53;

        $d55 = r2[2];

        $d58 = $d55 * d201;

        $d56 = r3[2];

        $d57 = $d56 * d204;

        $d61 = $d58 + $d57;

        $d59 = r4[2];

        $d60 = $d59 * d207;

        d7 = $d61 + $d60;

        $d62 = r2[0];

        $d65 = $d62 * d202;

        $d63 = r3[0];

        $d64 = $d63 * d205;

        $d68 = $d65 + $d64;

        $d66 = r4[0];

        $d67 = $d66 * d208;

        d8 = $d68 + $d67;

        $d69 = r2[1];

        $d72 = $d69 * d202;

        $d70 = r3[1];

        $d71 = $d70 * d205;

        $d75 = $d72 + $d71;

        $d73 = r4[1];

        $d74 = $d73 * d208;

        d9 = $d75 + $d74;

        $d76 = r2[2];

        $d79 = $d76 * d202;

        $d77 = r3[2];

        $d78 = $d77 * d205;

        $d82 = $d79 + $d78;

        $d80 = r4[2];

        $d81 = $d80 * d208;

        d10 = $d82 + $d81;

        $d84 = d200 * d2;

        $d83 = d201 * d3;

        $d86 = $d84 + $d83;

        $d85 = d202 * d4;

        $d88 = $d86 + $d85;

        $d87 = r2[0];

        $d89 = $d88 - $d87;

        $d90 = 0.5 * $d89;

        $d91 = d200 - $d90;

        r6[0] = $d91;

        $d93 = d200 * d5;

        $d92 = d201 * d6;

        $d95 = $d93 + $d92;

        $d94 = d202 * d7;

        $d97 = $d95 + $d94;

        $d96 = r2[1];

        $d98 = $d97 - $d96;

        $d99 = 0.5 * $d98;

        $d100 = d201 - $d99;

        r6[1] = $d100;

        $d102 = d200 * d8;

        $d101 = d201 * d9;

        $d104 = $d102 + $d101;

        $d103 = d202 * d10;

        $d106 = $d104 + $d103;

        $d105 = r2[2];

        $d107 = $d106 - $d105;

        $d108 = 0.5 * $d107;

        $d109 = d202 - $d108;

        r6[2] = $d109;

        $d111 = d203 * d2;

        $d110 = d204 * d3;

        $d113 = $d111 + $d110;

        $d112 = d205 * d4;

        $d115 = $d113 + $d112;

        $d114 = r3[0];

        $d116 = $d115 - $d114;

        $d117 = 0.5 * $d116;

        $d118 = d203 - $d117;

        r7[0] = $d118;

        $d120 = d203 * d5;

        $d119 = d204 * d6;

        $d122 = $d120 + $d119;

        $d121 = d205 * d7;

        $d124 = $d122 + $d121;

        $d123 = r3[1];

        $d125 = $d124 - $d123;

        $d126 = 0.5 * $d125;

        $d127 = d204 - $d126;

        r7[1] = $d127;

        $d129 = d203 * d8;

        $d128 = d204 * d9;

        $d131 = $d129 + $d128;

        $d130 = d205 * d10;

        $d133 = $d131 + $d130;

        $d132 = r3[2];

        $d134 = $d133 - $d132;

        $d135 = 0.5 * $d134;

        $d136 = d205 - $d135;

        r7[2] = $d136;

        $d138 = d206 * d2;

        $d137 = d207 * d3;

        $d140 = $d138 + $d137;

        $d139 = d208 * d4;

        $d142 = $d140 + $d139;

        $d141 = r4[0];

        $d143 = $d142 - $d141;

        $d144 = 0.5 * $d143;

        $d145 = d206 - $d144;

        r8[0] = $d145;

        $d147 = d206 * d5;

        $d146 = d207 * d6;

        $d149 = $d147 + $d146;

        $d148 = d208 * d7;

        $d151 = $d149 + $d148;

        $d150 = r4[1];

        $d152 = $d151 - $d150;

        $d153 = 0.5 * $d152;

        $d154 = d207 - $d153;

        r8[1] = $d154;

        $d156 = d206 * d8;

        $d155 = d207 * d9;

        $d158 = $d156 + $d155;

        $d157 = d208 * d10;

        $d160 = $d158 + $d157;

        $d159 = r4[2];

        $d161 = $d160 - $d159;

        $d162 = 0.5 * $d161;

        $d163 = d208 - $d162;

        r8[2] = $d163;

        $d165 = r6[0];

        $d164 = r2[0];

        d11 = $d165 - $d164;

        $d167 = r6[1];

        $d166 = r2[1];

        d12 = $d167 - $d166;

        $d169 = r6[2];

        $d168 = r2[2];

        d13 = $d169 - $d168;

        $d171 = r7[0];

        $d170 = r3[0];

        d14 = $d171 - $d170;

        $d173 = r7[1];

        $d172 = r3[1];

        d15 = $d173 - $d172;

        $d175 = r7[2];

        $d174 = r3[2];

        d16 = $d175 - $d174;

        $d177 = r8[0];

        $d176 = r4[0];

        d17 = $d177 - $d176;

        $d179 = r8[1];

        $d178 = r4[1];

        d18 = $d179 - $d178;

        $d181 = r8[2];

        $d180 = r4[2];

        d19 = $d181 - $d180;

        $d183 = d11 * d11;

        $d182 = d12 * d12;

        $d185 = $d183 + $d182;

        $d184 = d13 * d13;

        $d187 = $d185 + $d184;

        $d186 = d14 * d14;

        $d189 = $d187 + $d186;

        $d188 = d15 * d15;

        $d191 = $d189 + $d188;

        $d190 = d16 * d16;

        $d193 = $d191 + $d190;

        $d192 = d17 * d17;

        $d195 = $d193 + $d192;

        $d194 = d18 * d18;

        $d197 = $d195 + $d194;

        $d196 = d19 * d19;

        d1 = $d197 + $d196;

        $d198 = d1 - d209;

        $d199 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d198);

        $b1 = $d199 cmpg d0;

        if $b1 > 0 goto label2;

        return r5;

     label2:
        d200 = r6[0];

        d201 = r6[1];

        d202 = r6[2];

        d203 = r7[0];

        d204 = r7[1];

        d205 = r7[2];

        d206 = r8[0];

        d207 = r8[1];

        d208 = r8[2];

        d209 = d1;

        goto label1;

     label3:
        $r9 = new org.apache.commons.math.geometry.NotARotationMatrixException;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNABLE_TO_ORTHOGONOLIZE_MATRIX>;

        $r10 = newarray (java.lang.Object)[1];

        $i0 = i2 - 1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10[0] = $r12;

        specialinvoke $r9.<org.apache.commons.math.geometry.NotARotationMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;
    }

    public static double distance(org.apache.commons.math.geometry.Rotation, org.apache.commons.math.geometry.Rotation)
    {
        org.apache.commons.math.geometry.Rotation r0, r1, $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.geometry.Rotation;

        r1 := @parameter1: org.apache.commons.math.geometry.Rotation;

        $r2 = virtualinvoke r0.<org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Rotation applyInverseTo(org.apache.commons.math.geometry.Rotation)>(r1);

        $d0 = virtualinvoke $r2.<org.apache.commons.math.geometry.Rotation: double getAngle()>();

        return $d0;
    }

    static void <clinit>()
    {
        org.apache.commons.math.geometry.Rotation $r0;

        <org.apache.commons.math.geometry.Rotation: long serialVersionUID> = -2153622329907944313L;

        $r0 = new org.apache.commons.math.geometry.Rotation;

        specialinvoke $r0.<org.apache.commons.math.geometry.Rotation: void <init>(double,double,double,double,boolean)>(1.0, 0.0, 0.0, 0.0, 0);

        <org.apache.commons.math.geometry.Rotation: org.apache.commons.math.geometry.Rotation IDENTITY> = $r0;

        return;
    }
}
