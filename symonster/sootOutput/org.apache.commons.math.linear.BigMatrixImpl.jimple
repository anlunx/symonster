public class org.apache.commons.math.linear.BigMatrixImpl extends java.lang.Object implements org.apache.commons.math.linear.BigMatrix, java.io.Serializable
{
    static final java.math.BigDecimal ZERO;
    static final java.math.BigDecimal ONE;
    private static final java.math.BigDecimal TOO_SMALL;
    private static final long serialVersionUID;
    protected java.math.BigDecimal[][] data;
    protected java.math.BigDecimal[][] lu;
    protected int[] permutation;
    protected int parity;
    private int roundingMode;
    private int scale;

    public void <init>()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r1, $r2;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r1;

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r2;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1;
        java.math.BigDecimal[][] $r1, $r2, $r3, $r4;
        java.lang.Object[] $r5, $r10;
        org.apache.commons.math.exception.util.LocalizedFormats $r6, $r11;
        java.lang.Integer $r7, $r8, $r12, $r13;
        java.lang.IllegalArgumentException $r9, $r14;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r1;

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r2;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        if i0 >= 1 goto label1;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r10 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10[1] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r14;

     label1:
        if i1 >= 1 goto label2;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label2:
        $r3 = newmultiarray (java.math.BigDecimal)[i0][i1];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r3;

        $r4 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r4;

        return;
    }

    public void <init>(java.math.BigDecimal[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r2;

        $r3 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r3;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void copyIn(java.math.BigDecimal[][])>(r1);

        $r4 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r4;

        return;
    }

    public void <init>(java.math.BigDecimal[][], boolean)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] r1, $r2, $r3, $r5;
        boolean z0;
        int i0, i1, $i2, $i3, i4;
        java.math.BigDecimal[] $r4, $r6, $r10;
        java.lang.Object[] $r7, $r13, $r16;
        org.apache.commons.math.exception.util.LocalizedFormats $r8, $r14, $r17;
        java.lang.Integer $r9, $r11;
        java.lang.IllegalArgumentException $r12, $r15, $r18;
        java.lang.NullPointerException $r19;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[][];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r2;

        $r3 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r3;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void copyIn(java.math.BigDecimal[][])>(r1);

        goto label8;

     label1:
        if r1 != null goto label2;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>()>();

        throw $r19;

     label2:
        i0 = lengthof r1;

        if i0 != 0 goto label3;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r16 = newarray (java.lang.Object)[0];

        $r18 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r18;

     label3:
        $r4 = r1[0];

        i1 = lengthof $r4;

        if i1 != 0 goto label4;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r13 = newarray (java.lang.Object)[0];

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r15;

     label4:
        i4 = 1;

     label5:
        if i4 >= i0 goto label7;

        $r6 = r1[i4];

        $i2 = lengthof $r6;

        if $i2 == i1 goto label6;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[0] = $r9;

        $r10 = r1[i4];

        $i3 = lengthof $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r12;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = r1;

     label8:
        $r5 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r5;

        return;
    }

    public void <init>(double[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        double[][] r1;
        int i0, i1, $i2, $i3, i4;
        java.math.BigDecimal[][] $r2, $r3, $r5;
        double[] $r4, $r6, $r10;
        java.lang.Object[] $r7, $r13, $r16;
        org.apache.commons.math.exception.util.LocalizedFormats $r8, $r14, $r17;
        java.lang.Integer $r9, $r11;
        java.lang.IllegalArgumentException $r12, $r15, $r18;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r2;

        $r3 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r3;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r16 = newarray (java.lang.Object)[0];

        $r18 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r18;

     label1:
        $r4 = r1[0];

        i1 = lengthof $r4;

        if i1 != 0 goto label2;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r13 = newarray (java.lang.Object)[0];

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r15;

     label2:
        i4 = 1;

     label3:
        if i4 >= i0 goto label5;

        $r6 = r1[i4];

        $i2 = lengthof $r6;

        if $i2 == i1 goto label4;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[0] = $r9;

        $r10 = r1[i4];

        $i3 = lengthof $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r12;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void copyIn(double[][])>(r1);

        $r5 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r5;

        return;
    }

    public void <init>(java.lang.String[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.lang.String[][] r1;
        int i0, i1, $i2, $i3, i4;
        java.math.BigDecimal[][] $r2, $r3, $r5;
        java.lang.String[] $r4, $r6, $r10;
        java.lang.Object[] $r7, $r13, $r16;
        org.apache.commons.math.exception.util.LocalizedFormats $r8, $r14, $r17;
        java.lang.Integer $r9, $r11;
        java.lang.IllegalArgumentException $r12, $r15, $r18;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.lang.String[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r2;

        $r3 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r3;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r16 = newarray (java.lang.Object)[0];

        $r18 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r18;

     label1:
        $r4 = r1[0];

        i1 = lengthof $r4;

        if i1 != 0 goto label2;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r13 = newarray (java.lang.Object)[0];

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r15;

     label2:
        i4 = 1;

     label3:
        if i4 >= i0 goto label5;

        $r6 = r1[i4];

        $i2 = lengthof $r6;

        if $i2 == i1 goto label4;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[0] = $r9;

        $r10 = r1[i4];

        $i3 = lengthof $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r12;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void copyIn(java.lang.String[][])>(r1);

        $r5 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r5;

        return;
    }

    public void <init>(java.math.BigDecimal[])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[] r1, $r7;
        int i0, i1;
        java.math.BigDecimal[][] $r2, $r3, $r4, $r5;
        java.math.BigDecimal $r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r2;

        $r3 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r3;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = 4;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = 64;

        i0 = lengthof r1;

        $r4 = newmultiarray (java.math.BigDecimal)[i0][1];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r7 = $r5[i1];

        $r6 = r1[i1];

        $r7[0] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math.linear.BigMatrix copy()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r1;
        java.math.BigDecimal[][] $r2;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = new org.apache.commons.math.linear.BigMatrixImpl;

        $r2 = specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] copyOut()>();

        specialinvoke $r1.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>($r2, 0);

        return $r1;
    }

    public org.apache.commons.math.linear.BigMatrix add(org.apache.commons.math.linear.BigMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r6, $r7, $r9;
        org.apache.commons.math.linear.BigMatrix r1;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r3, $r10;
        java.math.BigDecimal[] r4, r5;
        java.lang.ClassCastException $r8;
        java.math.BigDecimal $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrix;

     label1:
        $r6 = (org.apache.commons.math.linear.BigMatrixImpl) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: org.apache.commons.math.linear.BigMatrixImpl add(org.apache.commons.math.linear.BigMatrixImpl)>($r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r3 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        $r10 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r4 = $r10[i2];

        r5 = r3[i2];

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        $r11 = r4[i3];

        $r12 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: java.math.BigDecimal getEntry(int,int)>(i2, i3);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r12);

        r5[i3] = $r13;

        i3 = i3 + 1;

        goto label5;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        $r9 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r9.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.BigMatrixImpl add(org.apache.commons.math.linear.BigMatrixImpl) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, r1, $r6;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r2, $r7, $r8;
        java.math.BigDecimal[] r3, r4, r5;
        java.math.BigDecimal $r9, $r10, $r11;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrixImpl;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r7[i2];

        $r8 = r1.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r4 = $r8[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r10 = r3[i3];

        $r9 = r4[i3];

        $r11 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r9);

        r5[i3] = $r11;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r6.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.BigMatrix subtract(org.apache.commons.math.linear.BigMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r6, $r7, $r9;
        org.apache.commons.math.linear.BigMatrix r1;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r3, $r10;
        java.math.BigDecimal[] r4, r5;
        java.lang.ClassCastException $r8;
        java.math.BigDecimal $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrix;

     label1:
        $r6 = (org.apache.commons.math.linear.BigMatrixImpl) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: org.apache.commons.math.linear.BigMatrixImpl subtract(org.apache.commons.math.linear.BigMatrixImpl)>($r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r3 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        $r10 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r4 = $r10[i2];

        r5 = r3[i2];

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        $r11 = r4[i3];

        $r12 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal getEntry(int,int)>(i2, i3);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r12);

        r5[i3] = $r13;

        i3 = i3 + 1;

        goto label5;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        $r9 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r9.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.BigMatrixImpl subtract(org.apache.commons.math.linear.BigMatrixImpl) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, r1, $r6;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r2, $r7, $r8;
        java.math.BigDecimal[] r3, r4, r5;
        java.math.BigDecimal $r9, $r10, $r11;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrixImpl;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r7[i2];

        $r8 = r1.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r4 = $r8[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r10 = r3[i3];

        $r9 = r4[i3];

        $r11 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r9);

        r5[i3] = $r11;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r6.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.BigMatrix scalarAdd(java.math.BigDecimal)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r5;
        java.math.BigDecimal r1, $r7, $r8;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r2, $r6;
        java.math.BigDecimal[] r3, r4;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r6 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r6[i2];

        r4 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r7 = r3[i3];

        $r8 = virtualinvoke $r7.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);

        r4[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r5 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r5;
    }

    public org.apache.commons.math.linear.BigMatrix scalarMultiply(java.math.BigDecimal)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r5;
        java.math.BigDecimal r1, $r7, $r8;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r2, $r6;
        java.math.BigDecimal[] r3, r4;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r6 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r6[i2];

        r4 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r7 = r3[i3];

        $r8 = virtualinvoke $r7.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r1);

        r4[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r5 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r5;
    }

    public org.apache.commons.math.linear.BigMatrix multiply(org.apache.commons.math.linear.BigMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r6, $r7, $r9;
        org.apache.commons.math.linear.BigMatrix r1;
        int i0, i1, i2, i3, i4, i5;
        java.math.BigDecimal[][] r3, $r10;
        java.math.BigDecimal[] r4, r5;
        java.lang.ClassCastException $r8;
        java.math.BigDecimal $r11, $r12, $r13, r14;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrix;

     label1:
        $r6 = (org.apache.commons.math.linear.BigMatrixImpl) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: org.apache.commons.math.linear.BigMatrixImpl multiply(org.apache.commons.math.linear.BigMatrixImpl)>($r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r3 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i3 = 0;

     label4:
        if i3 >= i0 goto label9;

        $r10 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r4 = $r10[i3];

        r5 = r3[i3];

        i4 = 0;

     label5:
        if i4 >= i1 goto label8;

        r14 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i5 = 0;

     label6:
        if i5 >= i2 goto label7;

        $r11 = r4[i5];

        $r12 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: java.math.BigDecimal getEntry(int,int)>(i5, i4);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r12);

        r14 = virtualinvoke r14.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r13);

        i5 = i5 + 1;

        goto label6;

     label7:
        r5[i4] = r14;

        i4 = i4 + 1;

        goto label5;

     label8:
        i3 = i3 + 1;

        goto label4;

     label9:
        $r9 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r9.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.BigMatrixImpl multiply(org.apache.commons.math.linear.BigMatrixImpl) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, r1, $r5;
        int i0, i1, i2, i3, i4, i5;
        java.math.BigDecimal[][] r2, $r6, $r7;
        java.math.BigDecimal[] r3, r4, $r8;
        java.math.BigDecimal $r9, $r10, $r11, r12;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrixImpl;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r1.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i0][i1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        $r6 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r6[i3];

        r4 = r2[i3];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        r12 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i5 = 0;

     label3:
        if i5 >= i2 goto label4;

        $r10 = r3[i5];

        $r7 = r1.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r8 = $r7[i5];

        $r9 = $r8[i4];

        $r11 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r9);

        r12 = virtualinvoke r12.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r11);

        i5 = i5 + 1;

        goto label3;

     label4:
        r4[i4] = r12;

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r5 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r5;
    }

    public org.apache.commons.math.linear.BigMatrix preMultiply(org.apache.commons.math.linear.BigMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        org.apache.commons.math.linear.BigMatrix r1, $r2;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrix;

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: org.apache.commons.math.linear.BigMatrix multiply(org.apache.commons.math.linear.BigMatrix)>(r0);

        return $r2;
    }

    public java.math.BigDecimal[][] getData()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r1;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = specialinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] copyOut()>();

        return $r1;
    }

    public double[][] getDataAsDoubleArray()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, i2, i3;
        double[][] r1;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal[] $r3;
        java.math.BigDecimal $r4;
        double[] $r5;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r5 = r1[i2];

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i2];

        $r4 = $r3[i3];

        $d0 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        $r5[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public java.math.BigDecimal[][] getDataRef()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r1;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        return $r1;
    }

    public int getRoundingMode()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $i0 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode>;

        return $i0;
    }

    public void setRoundingMode(int)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode> = i0;

        return;
    }

    public int getScale()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $i0 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale>;

        return $i0;
    }

    public void setScale(int)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale> = i0;

        return;
    }

    public java.math.BigDecimal getNorm()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int $i0, $i1, i2, i3;
        java.math.BigDecimal[][] $r1;
        java.math.BigDecimal[] $r2;
        java.math.BigDecimal $r3, $r4, r5, r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r5 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        if i2 >= $i0 goto label4;

        r6 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i3 = 0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        if i3 >= $i1 goto label3;

        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r2 = $r1[i3];

        $r3 = $r2[i2];

        $r4 = virtualinvoke $r3.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        r6 = virtualinvoke r6.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        r5 = virtualinvoke r5.<java.math.BigDecimal: java.math.BigDecimal max(java.math.BigDecimal)>(r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        return r5;
    }

    public org.apache.commons.math.linear.BigMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.math.BigDecimal[][] r1, $r3;
        java.math.BigDecimal[] $r4, $r5;
        org.apache.commons.math.linear.MatrixIndexException $r6, $r11;
        java.lang.Object[] $r7, $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r8, $r13;
        java.lang.Integer $r9, $r10, $r14, $r15;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        if i0 <= i1 goto label1;

        $r11 = new org.apache.commons.math.linear.MatrixIndexException;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r12 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[1] = $r15;

        specialinvoke $r11.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r11;

     label1:
        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i2);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i3);

        if i2 <= i3 goto label2;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r7[1] = $r10;

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label2:
        $i4 = i1 - i0;

        $i7 = $i4 + 1;

        $i5 = i3 - i2;

        $i6 = $i5 + 1;

        r1 = newmultiarray (java.math.BigDecimal)[$i7][$i6];

        i11 = i0;

     label3:
        if i11 > i1 goto label4;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r5 = $r3[i11];

        $i8 = i11 - i0;

        $r4 = r1[$i8];

        $i9 = i3 - i2;

        $i10 = $i9 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i2, $r4, 0, $i10);

        i11 = i11 + 1;

        goto label3;

     label4:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.commons.math.linear.BigMatrix getSubMatrix(int[], int[]) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r4;
        int[] r1, r2;
        java.math.BigDecimal[][] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17;
        java.math.BigDecimal $r6;
        org.apache.commons.math.linear.MatrixIndexException $r7, $r10;
        java.lang.Object[] $r8, $r11;
        org.apache.commons.math.exception.util.LocalizedFormats $r9, $r12;
        java.lang.ArrayIndexOutOfBoundsException $r13;
        java.math.BigDecimal[] r14, r15;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        $i2 = $i1 * $i0;

        if $i2 != 0 goto label02;

        $i9 = lengthof r1;

        if $i9 != 0 goto label01;

        $r10 = new org.apache.commons.math.linear.MatrixIndexException;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_SELECTED_ROW_INDEX_ARRAY>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label01:
        $r7 = new org.apache.commons.math.linear.MatrixIndexException;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_SELECTED_COLUMN_INDEX_ARRAY>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r7;

     label02:
        $i4 = lengthof r1;

        $i3 = lengthof r2;

        r3 = newmultiarray (java.math.BigDecimal)[$i4][$i3];

     label03:
        i10 = 0;

     label04:
        $i5 = lengthof r1;

        if i10 >= $i5 goto label07;

        r14 = r3[i10];

        $r5 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $i6 = r1[i10];

        r15 = $r5[$i6];

        i11 = 0;

     label05:
        $i7 = lengthof r2;

        if i11 >= $i7 goto label06;

        $i8 = r2[i11];

        $r6 = r15[$i8];

        r14[i11] = $r6;

        i11 = i11 + 1;

        goto label05;

     label06:
        i10 = i10 + 1;

        goto label04;

     label07:
        goto label12;

     label08:
        $r13 := @caughtexception;

        i12 = lengthof r1;

        i13 = 0;

     label09:
        if i13 >= i12 goto label10;

        i14 = r1[i13];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i14);

        i13 = i13 + 1;

        goto label09;

     label10:
        i15 = lengthof r2;

        i16 = 0;

     label11:
        if i16 >= i15 goto label12;

        i17 = r2[i16];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i17);

        i16 = i16 + 1;

        goto label11;

     label12:
        $r4 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r4.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r3, 0);

        return $r4;

        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label07 with label08;
    }

    public void setSubMatrix(java.math.BigDecimal[][], int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] r1, $r3, $r4, $r5, $r8, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.math.BigDecimal[] $r2, $r6, $r7, $r18, $r22;
        java.lang.Object[] $r10, $r14, $r19, $r25, $r28;
        org.apache.commons.math.exception.util.LocalizedFormats $r11, $r15, $r20, $r26, $r29;
        java.lang.Integer $r12, $r16, $r21, $r23;
        java.lang.IllegalStateException $r13, $r17;
        java.lang.IllegalArgumentException $r24, $r27, $r30;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r1;

        if i2 != 0 goto label01;

        $r29 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r28 = newarray (java.lang.Object)[0];

        $r30 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r29, $r28);

        throw $r30;

     label01:
        $r2 = r1[0];

        i3 = lengthof $r2;

        if i3 != 0 goto label02;

        $r26 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r25 = newarray (java.lang.Object)[0];

        $r27 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r26, $r25);

        throw $r27;

     label02:
        i12 = 1;

     label03:
        if i12 >= i2 goto label05;

        $r18 = r1[i12];

        $i10 = lengthof $r18;

        if $i10 == i3 goto label04;

        $r20 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r19 = newarray (java.lang.Object)[2];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r19[0] = $r21;

        $r22 = r1[i12];

        $i11 = lengthof $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r19[1] = $r23;

        $r24 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r24;

     label04:
        i12 = i12 + 1;

        goto label03;

     label05:
        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        if $r3 != null goto label08;

        if i0 <= 0 goto label06;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FIRST_ROWS_NOT_INITIALIZED_YET>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[0] = $r16;

        $r17 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r17;

     label06:
        if i1 <= 0 goto label07;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FIRST_COLUMNS_NOT_INITIALIZED_YET>;

        $r10 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[0] = $r12;

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r13;

     label07:
        $r8 = newmultiarray (java.math.BigDecimal)[i2][i3];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r8;

        $r9 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $i9 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r9, 0, $i9);

        goto label09;

     label08:
        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        $i4 = i2 + i0;

        $i5 = $i4 - 1;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, $i5);

        $i6 = i3 + i1;

        $i7 = $i6 - 1;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, $i7);

     label09:
        i13 = 0;

     label10:
        if i13 >= i2 goto label11;

        $r7 = r1[i13];

        $r5 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $i8 = i0 + i13;

        $r6 = $r5[$i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, i1, i3);

        i13 = i13 + 1;

        goto label10;

     label11:
        $r4 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r4;

        return;
    }

    public org.apache.commons.math.linear.BigMatrix getRowMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r5;
        int i0, i1;
        java.math.BigDecimal[][] r1, $r2;
        java.math.BigDecimal[] $r3, $r4;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newmultiarray (java.math.BigDecimal)[1][i1];

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r2[i0];

        $r3 = r1[0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i1);

        $r5 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r5;
    }

    public org.apache.commons.math.linear.BigMatrix getColumnMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r2;
        int i0, i1, i2;
        java.math.BigDecimal[][] r1, $r3;
        java.math.BigDecimal[] $r4, $r6;
        java.math.BigDecimal $r5;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        r1 = newmultiarray (java.math.BigDecimal)[i1][1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r6 = r1[i2];

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r3[i2];

        $r5 = $r4[i0];

        $r6[0] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public java.math.BigDecimal[] getRow(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1;
        java.math.BigDecimal[] r1, $r3;
        java.math.BigDecimal[][] $r2;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newarray (java.math.BigDecimal)[i1];

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i1);

        return r1;
    }

    public double[] getRowAsDoubleArray(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, i2;
        double[] r1;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal[] $r3;
        java.math.BigDecimal $r4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i0];

        $r4 = $r3[i2];

        $d0 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.math.BigDecimal[] getColumn(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, i2;
        java.math.BigDecimal[] r1, $r3;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal $r4;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        r1 = newarray (java.math.BigDecimal)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i2];

        $r4 = $r3[i0];

        r1[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public double[] getColumnAsDoubleArray(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, i2;
        double[] r1;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal[] $r3;
        java.math.BigDecimal $r4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i2];

        $r4 = $r3[i0];

        $d0 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.math.BigDecimal getEntry(int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, $i2, $i3;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal[] $r3;
        java.math.BigDecimal $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        org.apache.commons.math.linear.MatrixIndexException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r3 = $r2[i0];

        $r4 = $r3[i1];

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY>;

        $r7 = newarray (java.lang.Object)[4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r10;

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[2] = $r11;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[3] = $r12;

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public double getEntryAsDouble(int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1;
        java.math.BigDecimal $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal getEntry(int,int)>(i0, i1);

        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }

    public org.apache.commons.math.linear.BigMatrix transpose()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r3;
        int i0, i1, i2, i3;
        java.math.BigDecimal[][] r1, $r4;
        java.math.BigDecimal[] r2, $r6;
        java.math.BigDecimal $r5;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newmultiarray (java.math.BigDecimal)[i1][i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r2 = $r4[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r6 = r1[i3];

        $r5 = r2[i3];

        $r6[i2] = $r5;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r3.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r3;
    }

    public org.apache.commons.math.linear.BigMatrix inverse() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int $i0;
        org.apache.commons.math.linear.BigMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.BigMatrix createBigIdentityMatrix(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: org.apache.commons.math.linear.BigMatrix solve(org.apache.commons.math.linear.BigMatrix)>($r1);

        return $r2;
    }

    public java.math.BigDecimal getDeterminant() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3, $i4;
        java.math.BigDecimal $r1, $r4, $r5, $r7, r8;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal[] $r3;
        org.apache.commons.math.linear.NonSquareMatrixException $r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r6 = new org.apache.commons.math.linear.NonSquareMatrixException;

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        specialinvoke $r6.<org.apache.commons.math.linear.NonSquareMatrixException: void <init>(int,int)>($i1, $i2);

        throw $r6;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: boolean isSingular()>();

        if $z1 == 0 goto label2;

        $r5 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        return $r5;

     label2:
        $i0 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity>;

        if $i0 != 1 goto label3;

        $r7 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ONE>;

        goto label4;

     label3:
        $r1 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ONE>;

        $r7 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal negate()>();

     label4:
        r8 = $r7;

        i3 = 0;

     label5:
        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        if i3 >= $i4 goto label6;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r3 = $r2[i3];

        $r4 = $r3[i3];

        r8 = virtualinvoke r8.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r4);

        i3 = i3 + 1;

        goto label5;

     label6:
        return r8;
    }

    public boolean isSquare()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSingular()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r2;
        org.apache.commons.math.linear.InvalidMatrixException $r3;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        if $r2 != null goto label4;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void luDecompose()>();

     label2:
        return 0;

     label3:
        $r3 := @caughtexception;

        return 1;

     label4:
        return 0;

        catch org.apache.commons.math.linear.InvalidMatrixException from label1 to label2 with label3;
    }

    public int getRowDimension()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] $r1;
        java.math.BigDecimal[] $r2;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r2 = $r1[0];

        $i0 = lengthof $r2;

        return $i0;
    }

    public java.math.BigDecimal getTrace() throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        boolean $z0;
        java.math.BigDecimal[][] $r1, $r3;
        java.math.BigDecimal[] $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.math.BigDecimal $r5, r7;
        org.apache.commons.math.linear.NonSquareMatrixException $r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r6 = new org.apache.commons.math.linear.NonSquareMatrixException;

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        specialinvoke $r6.<org.apache.commons.math.linear.NonSquareMatrixException: void <init>(int,int)>($i1, $i2);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r2 = $r1[0];

        r7 = $r2[0];

        i3 = 1;

     label2:
        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        if i3 >= $i0 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r3[i3];

        $r5 = $r4[i3];

        r7 = virtualinvoke r7.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r5);

        i3 = i3 + 1;

        goto label2;

     label3:
        return r7;
    }

    public java.math.BigDecimal[] operate(java.math.BigDecimal[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[] r1, r2, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.math.BigDecimal[][] $r3;
        java.math.BigDecimal $r5, $r6, $r7, r13;
        java.lang.Object[] $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[];

        $i2 = lengthof r1;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        if $i2 == $i3 goto label1;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r8 = newarray (java.lang.Object)[2];

        $i4 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r8[0] = $r10;

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r8[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r12;

     label1:
        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newarray (java.math.BigDecimal)[i0];

        i6 = 0;

     label2:
        if i6 >= i0 goto label5;

        r13 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i7 = 0;

     label3:
        if i7 >= i1 goto label4;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r3[i6];

        $r6 = $r4[i7];

        $r5 = r1[i7];

        $r7 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r5);

        r13 = virtualinvoke r13.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r7);

        i7 = i7 + 1;

        goto label3;

     label4:
        r2[i6] = r13;

        i6 = i6 + 1;

        goto label2;

     label5:
        return r2;
    }

    public java.math.BigDecimal[] operate(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        double[] r1;
        java.math.BigDecimal[] r2, $r3;
        int $i0, $i1, i2;
        java.math.BigDecimal $r4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r2 = newarray (java.math.BigDecimal)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r4 = new java.math.BigDecimal;

        $d0 = r1[i2];

        specialinvoke $r4.<java.math.BigDecimal: void <init>(double)>($d0);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[] operate(java.math.BigDecimal[])>(r2);

        return $r3;
    }

    public java.math.BigDecimal[] preMultiply(java.math.BigDecimal[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[] r1, r2, $r4;
        int i0, i1, $i2, $i3, i4, i5;
        java.math.BigDecimal[][] $r3;
        java.math.BigDecimal $r5, $r6, $r7, r13;
        java.lang.Object[] $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r8 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r12;

     label1:
        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r2 = newarray (java.math.BigDecimal)[i1];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        r13 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r3[i5];

        $r6 = $r4[i4];

        $r5 = r1[i5];

        $r7 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r5);

        r13 = virtualinvoke r13.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r7);

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = r13;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public java.math.BigDecimal[] solve(java.math.BigDecimal[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r5, $r7, $r8;
        java.math.BigDecimal[] r1, r4, $r9;
        int i0, $i1, $i2, i3;
        java.math.BigDecimal[][] r3;
        org.apache.commons.math.linear.BigMatrix $r6;
        java.math.BigDecimal $r10;
        java.lang.Object[] $r11;
        org.apache.commons.math.exception.util.LocalizedFormats $r12;
        java.lang.Integer $r13, $r14;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i1 = lengthof r1;

        if $i1 == i0 goto label1;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r11 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r14;

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r15;

     label1:
        $r5 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[])>(r1);

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: org.apache.commons.math.linear.BigMatrix solve(org.apache.commons.math.linear.BigMatrix)>($r5);

        $r7 = (org.apache.commons.math.linear.BigMatrixImpl) $r6;

        $r8 = (org.apache.commons.math.linear.BigMatrixImpl) $r7;

        r3 = virtualinvoke $r8.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] getDataRef()>();

        r4 = newarray (java.math.BigDecimal)[i0];

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r9 = r3[i3];

        $r10 = $r9[0];

        r4[i3] = $r10;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r4;
    }

    public java.math.BigDecimal[] solve(double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        double[] r1;
        java.math.BigDecimal[] r2, $r3;
        int $i0, $i1, i2;
        java.math.BigDecimal $r4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r2 = newarray (java.math.BigDecimal)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r4 = new java.math.BigDecimal;

        $d0 = r1[i2];

        specialinvoke $r4.<java.math.BigDecimal: void <init>(double)>($d0);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[] solve(java.math.BigDecimal[])>(r2);

        return $r3;
    }

    public org.apache.commons.math.linear.BigMatrix solve(org.apache.commons.math.linear.BigMatrix) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r4;
        org.apache.commons.math.linear.BigMatrix r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20, i21;
        java.math.BigDecimal[][] r2, $r5, $r7, $r16;
        java.math.BigDecimal[] r3, $r6, $r8, $r17, r33, r34, r35, r36, r38;
        boolean $z0, $z1;
        java.math.BigDecimal $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r24, r37;
        int[] $r23;
        org.apache.commons.math.linear.SingularMatrixException $r25;
        org.apache.commons.math.linear.NonSquareMatrixException $r26;
        java.lang.Object[] $r27;
        org.apache.commons.math.exception.util.LocalizedFormats $r28;
        java.lang.Integer $r29, $r30, $r31;
        java.lang.IllegalArgumentException $r32;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: org.apache.commons.math.linear.BigMatrix;

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getRowDimension()>();

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        if $i3 == $i4 goto label01;

        $r28 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r27 = newarray (java.lang.Object)[4];

        $i10 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getRowDimension()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r27[0] = $r29;

        $i11 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getColumnDimension()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r27[1] = $r30;

        $i12 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r27[2] = $r31;

        $r27[3] = "n";

        $r32 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r28, $r27);

        throw $r32;

     label01:
        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: boolean isSquare()>();

        if $z0 != 0 goto label02;

        $r26 = new org.apache.commons.math.linear.NonSquareMatrixException;

        $i8 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i9 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        specialinvoke $r26.<org.apache.commons.math.linear.NonSquareMatrixException: void <init>(int,int)>($i8, $i9);

        throw $r26;

     label02:
        $z1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: boolean isSingular()>();

        if $z1 == 0 goto label03;

        $r25 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r25.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r25;

     label03:
        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getColumnDimension()>();

        i2 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: int getRowDimension()>();

        r2 = newmultiarray (java.math.BigDecimal)[i2][i1];

        i13 = 0;

     label04:
        if i13 >= i2 goto label07;

        r33 = r2[i13];

        i14 = 0;

     label05:
        if i14 >= i1 goto label06;

        $r23 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $i7 = $r23[i13];

        $r24 = interfaceinvoke r1.<org.apache.commons.math.linear.BigMatrix: java.math.BigDecimal getEntry(int,int)>($i7, i14);

        r33[i14] = $r24;

        i14 = i14 + 1;

        goto label05;

     label06:
        i13 = i13 + 1;

        goto label04;

     label07:
        i15 = 0;

     label08:
        if i15 >= i0 goto label13;

        i16 = i15 + 1;

     label09:
        if i16 >= i0 goto label12;

        r34 = r2[i16];

        $r16 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        r35 = $r16[i16];

        i17 = 0;

     label10:
        if i17 >= i1 goto label11;

        $r20 = r34[i17];

        $r17 = r2[i15];

        $r19 = $r17[i17];

        $r18 = r35[i15];

        $r21 = virtualinvoke $r19.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r18);

        $r22 = virtualinvoke $r20.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r21);

        r34[i17] = $r22;

        i17 = i17 + 1;

        goto label10;

     label11:
        i16 = i16 + 1;

        goto label09;

     label12:
        i15 = i15 + 1;

        goto label08;

     label13:
        i18 = i0 - 1;

     label14:
        if i18 < 0 goto label21;

        r36 = r2[i18];

        $r5 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r6 = $r5[i18];

        r37 = $r6[i18];

        i19 = 0;

     label15:
        if i19 >= i1 goto label16;

        $r14 = r36[i19];

        $i6 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale>;

        $i5 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode>;

        $r15 = virtualinvoke $r14.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>(r37, $i6, $i5);

        r36[i19] = $r15;

        i19 = i19 + 1;

        goto label15;

     label16:
        i20 = 0;

     label17:
        if i20 >= i18 goto label20;

        r38 = r2[i20];

        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        r3 = $r7[i20];

        i21 = 0;

     label18:
        if i21 >= i1 goto label19;

        $r11 = r38[i21];

        $r8 = r2[i18];

        $r10 = $r8[i21];

        $r9 = r3[i18];

        $r12 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r9);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r12);

        r38[i21] = $r13;

        i21 = i21 + 1;

        goto label18;

     label19:
        i20 = i20 + 1;

        goto label17;

     label20:
        i18 = i18 + -1;

        goto label14;

     label21:
        $r4 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r4.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r2, 0);

        return $r4;
    }

    public void luDecompose() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.math.BigDecimal[][] $r1, $r3, $r8, $r10, $r17, $r19, $r20, $r24, $r26, $r28, $r30, $r35, $r36;
        int[] $r2, $r13, $r14, $r15, $r16, $r41;
        java.math.BigDecimal[] $r4, $r9, $r18, $r21, $r23, $r25, $r31, $r37, r44, r47, r52;
        java.math.BigDecimal $r5, $r6, $r7, $r11, $r12, $r22, $r29, $r32, $r33, $r34, $r38, $r39, $r40, r43, r45, r46, r48, r49, r50, r51;
        org.apache.commons.math.linear.SingularMatrixException $r27;
        org.apache.commons.math.linear.NonSquareMatrixException $r42;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        if i0 == i1 goto label01;

        $r42 = new org.apache.commons.math.linear.NonSquareMatrixException;

        $i9 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i10 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        specialinvoke $r42.<org.apache.commons.math.linear.NonSquareMatrixException: void <init>(int,int)>($i9, $i10);

        throw $r42;

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] getData()>();

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r1;

        $r2 = newarray (int)[i0];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation> = $r2;

        i11 = 0;

     label02:
        if i11 >= i0 goto label03;

        $r41 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $r41[i11] = i11;

        i11 = i11 + 1;

        goto label02;

     label03:
        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = 1;

        i12 = 0;

     label04:
        if i12 >= i1 goto label20;

        r43 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i13 = 0;

     label05:
        if i13 >= i12 goto label08;

        $r35 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        r44 = $r35[i13];

        r45 = r44[i12];

        i14 = 0;

     label06:
        if i14 >= i13 goto label07;

        $r39 = r44[i14];

        $r36 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r37 = $r36[i14];

        $r38 = $r37[i12];

        $r40 = virtualinvoke $r39.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r38);

        r45 = virtualinvoke r45.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r40);

        i14 = i14 + 1;

        goto label06;

     label07:
        r44[i12] = r45;

        i13 = i13 + 1;

        goto label05;

     label08:
        i15 = i12;

        r46 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i16 = i12;

     label09:
        if i16 >= i0 goto label13;

        $r28 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        r47 = $r28[i16];

        r48 = r47[i12];

        i17 = 0;

     label10:
        if i17 >= i12 goto label11;

        $r33 = r47[i17];

        $r30 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r31 = $r30[i17];

        $r32 = $r31[i12];

        $r34 = virtualinvoke $r33.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r32);

        r48 = virtualinvoke r48.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r34);

        i17 = i17 + 1;

        goto label10;

     label11:
        r47[i12] = r48;

        $r29 = virtualinvoke r48.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $i8 = virtualinvoke $r29.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r46);

        if $i8 != 1 goto label12;

        r46 = virtualinvoke r48.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        i15 = i16;

     label12:
        i16 = i16 + 1;

        goto label09;

     label13:
        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r4 = $r3[i15];

        $r5 = $r4[i12];

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $r7 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal TOO_SMALL>;

        $i2 = virtualinvoke $r6.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r7);

        if $i2 > 0 goto label14;

        $r26 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r26;

        $r27 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r27.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r27;

     label14:
        if i15 == i12 goto label17;

        r49 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        i18 = 0;

     label15:
        if i18 >= i1 goto label16;

        $r17 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r18 = $r17[i15];

        r50 = $r18[i18];

        $r19 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r23 = $r19[i15];

        $r20 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r21 = $r20[i12];

        $r22 = $r21[i18];

        $r23[i18] = $r22;

        $r24 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r25 = $r24[i12];

        $r25[i18] = r50;

        i18 = i18 + 1;

        goto label15;

     label16:
        $r13 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        i19 = $r13[i15];

        $r15 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $r14 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $i5 = $r14[i12];

        $r15[i15] = $i5;

        $r16 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $r16[i12] = i19;

        $i6 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity>;

        $i7 = neg $i6;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: int parity> = $i7;

     label17:
        $r8 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        $r9 = $r8[i12];

        r51 = $r9[i12];

        i20 = i12 + 1;

     label18:
        if i20 >= i0 goto label19;

        $r10 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        r52 = $r10[i20];

        $r11 = r52[i12];

        $i4 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int scale>;

        $i3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int roundingMode>;

        $r12 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>(r51, $i4, $i3);

        r52[i12] = $r12;

        i20 = i20 + 1;

        goto label18;

     label19:
        i12 = i12 + 1;

        goto label04;

     label20:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.lang.StringBuilder $r2;
        java.math.BigDecimal[][] $r4, $r7, $r10, $r16;
        java.lang.String $r6;
        int $i0, i1, i2, $i3;
        java.math.BigDecimal[] $r11, $r17;
        java.math.BigDecimal $r12;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BigMatrixImpl{");

        $r4 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        if $r4 == null goto label6;

        i1 = 0;

     label1:
        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label6;

        if i1 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        i2 = 0;

     label3:
        $r16 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r17 = $r16[0];

        $i3 = lengthof $r17;

        if i2 >= $i3 goto label5;

        if i2 <= 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        $r10 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r11 = $r10[i1];

        $r12 = $r11[i2];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        i2 = i2 + 1;

        goto label3;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        i1 = i1 + 1;

        goto label1;

     label6:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.lang.Object r1;
        org.apache.commons.math.linear.BigMatrix r2;
        int i0, i1, $i2, $i3, i4, i5;
        java.math.BigDecimal[] r3;
        boolean $z0, $z1;
        java.math.BigDecimal[][] $r4;
        java.math.BigDecimal $r5, $r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.linear.BigMatrixImpl;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math.linear.BigMatrix) r1;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.math.linear.BigMatrix: int getColumnDimension()>();

        if $i2 != i1 goto label3;

        $i3 = interfaceinvoke r2.<org.apache.commons.math.linear.BigMatrix: int getRowDimension()>();

        if $i3 == i0 goto label4;

     label3:
        return 0;

     label4:
        i4 = 0;

     label5:
        if i4 >= i0 goto label9;

        $r4 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r3 = $r4[i4];

        i5 = 0;

     label6:
        if i5 >= i1 goto label8;

        $r5 = r3[i5];

        $r6 = interfaceinvoke r2.<org.apache.commons.math.linear.BigMatrix: java.math.BigDecimal getEntry(int,int)>(i4, i5);

        $z1 = virtualinvoke $r5.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label7;

        return 0;

     label7:
        i5 = i5 + 1;

        goto label6;

     label8:
        i4 = i4 + 1;

        goto label5;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16;
        java.math.BigDecimal[] r1;
        java.math.BigDecimal[][] $r2;
        java.math.BigDecimal $r3;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        $i2 = 7 * 31;

        i13 = $i2 + i0;

        $i3 = i13 * 31;

        i14 = $i3 + i1;

        i15 = 0;

     label1:
        if i15 >= i0 goto label4;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r1 = $r2[i15];

        i16 = 0;

     label2:
        if i16 >= i1 goto label3;

        $i8 = i14 * 31;

        $i4 = i15 + 1;

        $i7 = 11 * $i4;

        $i5 = i16 + 1;

        $i6 = 17 * $i5;

        $i9 = $i7 + $i6;

        $r3 = r1[i16];

        $i10 = virtualinvoke $r3.<java.math.BigDecimal: int hashCode()>();

        $i11 = $i9 * $i10;

        i14 = $i8 + $i11;

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        return i14;
    }

    protected org.apache.commons.math.linear.BigMatrix getLUMatrix() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.BigMatrixImpl r0, $r2;
        java.math.BigDecimal[][] $r1, $r3;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r1 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void luDecompose()>();

     label1:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu>;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][])>($r3);

        return $r2;
    }

    protected int[] getPermutation()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $i0 = lengthof $r2;

        r1 = newarray (int)[$i0];

        $r4 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: int[] permutation>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    private java.math.BigDecimal[][] copyOut()
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        int i0, $i1, $i2, i3;
        java.math.BigDecimal[][] r1, $r2, $r3;
        java.math.BigDecimal[] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: int getColumnDimension()>();

        r1 = newmultiarray (java.math.BigDecimal)[i0][$i1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r6 = $r2[i3];

        $r5 = r1[i3];

        $r3 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        $r4 = $r3[i3];

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void copyIn(java.math.BigDecimal[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.math.BigDecimal[][] r1;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.math.BigDecimal[][];

        virtualinvoke r0.<org.apache.commons.math.linear.BigMatrixImpl: void setSubMatrix(java.math.BigDecimal[][],int,int)>(r1, 0, 0);

        return;
    }

    private void copyIn(double[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        double[][] r1;
        int i0, i1, i2, i3;
        java.math.BigDecimal[] r2;
        double[] r3, $r4;
        java.math.BigDecimal[][] $r5, $r6, $r7;
        java.math.BigDecimal $r8;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: double[][];

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        $r5 = newmultiarray (java.math.BigDecimal)[i0][i1];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r2 = $r7[i2];

        r3 = r1[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r8 = new java.math.BigDecimal;

        $d0 = r3[i3];

        specialinvoke $r8.<java.math.BigDecimal: void <init>(double)>($d0);

        r2[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r6;

        return;
    }

    private void copyIn(java.lang.String[][])
    {
        org.apache.commons.math.linear.BigMatrixImpl r0;
        java.lang.String[][] r1;
        int i0, i1, i2, i3;
        java.math.BigDecimal[] r2;
        java.lang.String[] r3, $r4;
        java.math.BigDecimal[][] $r5, $r6, $r7;
        java.math.BigDecimal $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.math.linear.BigMatrixImpl;

        r1 := @parameter0: java.lang.String[][];

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        $r5 = newmultiarray (java.math.BigDecimal)[i0][i1];

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data> = $r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] data>;

        r2 = $r7[i2];

        r3 = r1[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r8 = new java.math.BigDecimal;

        $r9 = r3[i3];

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>($r9);

        r2[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = (java.math.BigDecimal[][]) null;

        r0.<org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal[][] lu> = $r6;

        return;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0, $r1, $r2;

        <org.apache.commons.math.linear.BigMatrixImpl: long serialVersionUID> = -1011428905656140431L;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO> = $r0;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(int)>(1);

        <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ONE> = $r1;

        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(double)>(1.0E-11);

        <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal TOO_SMALL> = $r2;

        return;
    }
}
