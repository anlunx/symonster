public final class com.opengamma.analytics.math.interpolation.BasisFunctionKnots extends java.lang.Object
{
    private final double[] _knots;
    private final int _degree;
    private final int _nSplines;

    public static com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromUniform(double, double, int, int)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20;
        double[] r0;
        byte $b4;
        java.lang.Object[] $r1, $r4;
        java.lang.Double $r2, $r3;
        java.lang.Integer $r5, $r6, $r7;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots $r8;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $b4 = d1 cmpl d0;

        if $b4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[1] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Require xb > xa, values are xa = {}, xb = {}", $r1);

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i1, "degree");

        $i6 = i0 - i1;

        if $i6 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r4 = newarray (java.lang.Object)[3];

        $i7 = i1 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[2] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "Require at least {} knots for degree {}, only given {}", $r4);

        $i8 = 2 * i1;

        i2 = i0 + $i8;

        $i9 = i0 + i1;

        i3 = $i9 - 1;

        r0 = newarray (double)[i2];

        $d4 = d1 - d0;

        $i10 = i0 - 1;

        $d3 = (double) $i10;

        d2 = $d4 / $d3;

        i19 = 0;

     label5:
        if i19 >= i1 goto label6;

        $i15 = i19 - i1;

        $d8 = (double) $i15;

        $d9 = $d8 * d2;

        $d10 = $d9 + d0;

        r0[i19] = $d10;

        $i16 = i1 + i0;

        $i18 = $i16 + i19;

        $i17 = i19 + 1;

        $d11 = (double) $i17;

        $d12 = d2 * $d11;

        $d13 = d1 + $d12;

        r0[$i18] = $d13;

        i19 = i19 + 1;

        goto label5;

     label6:
        i20 = 0;

     label7:
        $i11 = i0 - 1;

        if i20 >= $i11 goto label8;

        $i14 = i20 + i1;

        $d5 = (double) i20;

        $d6 = $d5 * d2;

        $d7 = d0 + $d6;

        r0[$i14] = $d7;

        i20 = i20 + 1;

        goto label7;

     label8:
        $i12 = i0 + i1;

        $i13 = $i12 - 1;

        r0[$i13] = d1;

        $r8 = new com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: void <init>(double[],int,int)>(r0, i1, i3);

        return $r8;
    }

    public static com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromInternalKnots(double[], int)
    {
        double[] r0, r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i17, i18, i19;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r6;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots $r7;
        byte $b16;
        boolean $z0, $z1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "knots");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "degree");

        i1 = lengthof r0;

        $i4 = i1 - i0;

        if $i4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[3];

        $i5 = i0 + 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[2] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Require at least {} knots for degree {}, only given {}", $r3);

        i17 = 1;

     label3:
        if i17 >= i1 goto label6;

        $d15 = r0[i17];

        $i15 = i17 - 1;

        $d14 = r0[$i15];

        $d16 = $d15 - $d14;

        $b16 = $d16 cmpl 0.0;

        if $b16 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "knots are not ascending");

        i17 = i17 + 1;

        goto label3;

     label6:
        $i6 = i1 + i0;

        i18 = $i6 - 1;

        $i7 = 2 * i0;

        i2 = i1 + $i7;

        r1 = newarray (double)[i2];

        $d3 = r0[1];

        $d2 = r0[0];

        d0 = $d3 - $d2;

        $i8 = i1 - 1;

        $d5 = r0[$i8];

        $i9 = i1 - 2;

        $d4 = r0[$i9];

        d1 = $d5 - $d4;

        i19 = 0;

     label7:
        if i19 >= i0 goto label8;

        $i10 = i19 - i0;

        $d6 = (double) $i10;

        $d8 = $d6 * d0;

        $d7 = r0[0];

        $d9 = $d8 + $d7;

        r1[i19] = $d9;

        $i11 = i0 + i1;

        $i14 = $i11 + i19;

        $i12 = i1 - 1;

        $d12 = r0[$i12];

        $i13 = i19 + 1;

        $d10 = (double) $i13;

        $d11 = d1 * $d10;

        $d13 = $d12 + $d11;

        r1[$i14] = $d13;

        i19 = i19 + 1;

        goto label7;

     label8:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, i0, i1);

        $r7 = new com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        specialinvoke $r7.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: void <init>(double[],int,int)>(r1, i0, i18);

        return $r7;
    }

    public static com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromKnots(double[], int)
    {
        double[] r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4, $r5;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots $r6;
        double $d0, $d1, $d2;
        byte $b9;
        boolean $z0, $z1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "knots");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "degree");

        i1 = lengthof r0;

        $i3 = 3 * i0;

        $i4 = i1 - $i3;

        if $i4 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[3];

        $i5 = 3 * i0;

        $i6 = $i5 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[2] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Require at least {} knots for degree {}, only given {}", $r2);

        i10 = 1;

     label3:
        if i10 >= i1 goto label6;

        $d1 = r0[i10];

        $i8 = i10 - 1;

        $d0 = r0[$i8];

        $d2 = $d1 - $d0;

        $b9 = $d2 cmpl 0.0;

        if $b9 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "knots are not ascending");

        i10 = i10 + 1;

        goto label3;

     label6:
        $i7 = i1 - i0;

        i11 = $i7 - 1;

        $r6 = new com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        specialinvoke $r6.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: void <init>(double[],int,int)>(r0, i0, i11);

        return $r6;
    }

    private void <init>(double[], int, int)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r0;
        double[] r1;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: double[] _knots> = r1;

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int _degree> = i0;

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int _nSplines> = i1;

        return;
    }

    public double[] getKnots()
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: double[] _knots>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public int getNumKnots()
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r0;
        double[] $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: double[] _knots>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getDegree()
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        $i0 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int _degree>;

        return $i0;
    }

    public int getNumSplines()
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        $i0 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int _nSplines>;

        return $i0;
    }
}
