public class com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils extends java.lang.Object
{

    protected void <init>()
    {
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils r0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static final java.util.List clean(java.util.List, double, double)
    {
        java.util.List r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12, d13, d14;
        com.opengamma.util.tuple.DoublesPair[] r2, $r7;
        com.opengamma.util.tuple.DoublesPair r3, r4, $r11, $r12;
        byte $b0, $b3, $b4, $b5, $b6, $b7, $b8;
        java.util.ArrayList $r6, $r13;
        int $i1, $i2, $i9, i10;
        java.lang.Object[] $r8;
        java.util.Comparator $r9;
        java.lang.Double $r10;
        boolean $z2;

        r0 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "null list");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $b8 = d1 cmpl 0.0;

        if $b8 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Tolerances must be greater than zero");

        $i9 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i9 != 0 goto label3;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        return $r13;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $r7 = newarray (com.opengamma.util.tuple.DoublesPair)[$i1];

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r2 = (com.opengamma.util.tuple.DoublesPair[]) $r8;

        $r9 = <com.opengamma.util.tuple.FirstThenSecondDoublesPairComparator: java.util.Comparator INSTANCE>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r9);

        r3 = r2[0];

        d11 = r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r10 = virtualinvoke r3.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        d12 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        d13 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        d14 = d11;

        i10 = 1;

     label4:
        $i2 = lengthof r2;

        if i10 >= $i2 goto label8;

        r4 = r2[i10];

        d14 = r4.<com.opengamma.util.tuple.DoublesPair: double first>;

        $b5 = d14 cmpl d11;

        if $b5 <= 0 goto label6;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        $b6 = $d8 cmpl d1;

        if $b6 <= 0 goto label5;

        $d9 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        $d10 = $d9 / d13;

        $b7 = $d10 cmpl d0;

        if $b7 <= 0 goto label5;

        $r12 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d11, d12);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

     label5:
        d11 = d14;

        d12 = virtualinvoke r4.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        d13 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        goto label7;

     label6:
        $d5 = virtualinvoke r4.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        d12 = d12 + $d5;

        $d6 = virtualinvoke r4.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        d13 = d13 + $d7;

     label7:
        i10 = i10 + 1;

        goto label4;

     label8:
        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        $b3 = $d2 cmpl d1;

        if $b3 <= 0 goto label9;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        $d4 = $d3 / d13;

        $b4 = $d4 cmpl d0;

        if $b4 <= 0 goto label9;

        $r11 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d14, d12);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r11);

     label9:
        return $r6;
    }

    public static java.util.Map clean(java.util.Map, double, double)
    {
        java.util.Map r0;
        double d0, d1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.List r4, $r9;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8, $r10;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.List) $r8;

        r4 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.List clean(java.util.List,double,double)>($r9, d0, d1);

        $z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r4);

     label2:
        goto label1;

     label3:
        return $r5;
    }

    public static java.util.List addSensitivity(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $r3;
    }

    public static java.util.Map addSensitivity(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.HashMap $r5;
        java.util.Set $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r18;
        java.util.List $r17, $r19, $r20;
        java.util.Iterator r22, r25;
        java.util.Map$Entry r23, r26;
        java.lang.String r24, r27;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        r24 = (java.lang.String) $r13;

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r24);

        if $z3 == 0 goto label2;

        $r16 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r24);

        $r19 = (java.util.List) $r18;

        $r20 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.List addSensitivity(java.util.List,java.util.List)>($r17, $r19);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r20);

        goto label3;

     label2:
        $r14 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r14);

     label3:
        goto label1;

     label4:
        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        r27 = (java.lang.String) $r9;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r27);

        if $z2 != 0 goto label6;

        $r10 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r10);

     label6:
        goto label5;

     label7:
        return $r5;
    }

    public static java.util.Map addSensitivity(java.util.Map, java.lang.String, java.util.List)
    {
        java.util.Map r0;
        java.lang.String r1, r6;
        java.util.List r2, $r17, $r18;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.HashMap $r9;
        java.util.Set $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r12, $r13, $r14, $r16;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "sensitivity");

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r13;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        $r18 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.List addSensitivity(java.util.List,java.util.List)>($r17, r2);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r18);

        goto label3;

     label2:
        $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r14);

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label5:
        return $r9;
    }

    public static java.util.Map addSensitivity(java.util.Map, java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1, r2, $r3, $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Map;

        $r3 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.Map addSensitivity(java.util.Map,java.util.Map)>(r0, r1);

        $r4 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.Map addSensitivity(java.util.Map,java.util.Map)>($r3, r2);

        return $r4;
    }

    public static java.util.Map multiplySensitivity(java.util.Map, double)
    {
        java.util.Map r0;
        double d0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;
        java.util.List $r10, $r11;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.List) $r9;

        $r11 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: java.util.List multiplySensitivity(java.util.List,double)>($r10, d0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label1;

     label2:
        return $r5;
    }

    public static java.util.List multiplySensitivity(java.util.List, double)
    {
        java.util.List r0;
        double d0, $d1, $d2, $d3;
        java.util.Iterator r2;
        com.opengamma.util.tuple.DoublesPair r3, $r7;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.util.tuple.DoublesPair) $r6;

        $d3 = r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $d1 = r3.<com.opengamma.util.tuple.DoublesPair: double second>;

        $d2 = $d1 * d0;

        $r7 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d3, $d2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r5;
    }

    public static boolean compare(java.util.List, java.util.List, double)
    {
        java.util.List r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, $i1, $i2, i5;
        java.lang.Object $r2, $r4, $r6, $r8;
        com.opengamma.util.tuple.DoublesPair $r3, $r5, $r7, $r9;
        byte $b3, $b4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i2 goto label5;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r3 = (com.opengamma.util.tuple.DoublesPair) $r2;

        $d1 = $r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r5 = (com.opengamma.util.tuple.DoublesPair) $r4;

        $d2 = $r5.<com.opengamma.util.tuple.DoublesPair: double first>;

        $d3 = $d1 - $d2;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b3 = $d4 cmpl d0;

        if $b3 > 0 goto label3;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r7 = (com.opengamma.util.tuple.DoublesPair) $r6;

        $d5 = $r7.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (com.opengamma.util.tuple.DoublesPair) $r8;

        $d6 = $r9.<com.opengamma.util.tuple.DoublesPair: double second>;

        $d7 = $d5 - $d6;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b4 = $d8 cmpl d0;

        if $b4 <= 0 goto label4;

     label3:
        return 0;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return 1;
    }

    public static boolean compare(java.util.Map, java.util.Map, double)
    {
        java.util.Map r0, r1;
        double d0;
        java.util.Set $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r6, $r7, $r8, $r9, $r11, $r12;
        java.util.List $r10, $r13;
        java.util.Iterator r14, r16;
        java.util.Map$Entry r15;
        java.lang.String r17;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        d0 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity");

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r14 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z3 == 0 goto label2;

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.List) $r9;

        $r11 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r13 = (java.util.List) $r12;

        $z4 = staticinvoke <com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivityUtils: boolean compare(java.util.List,java.util.List,double)>($r10, $r13, d0);

        if $z4 != 0 goto label3;

        return 0;

     label2:
        return 0;

     label3:
        goto label1;

     label4:
        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r16 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r6;

        $z2 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r17);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        goto label5;

     label7:
        return 1;
    }
}
