class org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers extends java.lang.Object implements org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int LOW;
    private static final int HIGH;
    private final org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray;
    private transient int k;

    private void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] r1, $r2, $r3, $r7, $r11, $r12, $r16, $r20, $r21, $r25;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r4, $r5, $r6, $r8, $r9, $r13, $r14, $r15, $r17, $r18, $r22, $r23, $r24, $r26, $r27;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = -1;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray> = r1;

        i2 = 1;

     label1:
        if i2 >= 5 goto label2;

        $r20 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r23 = $r20[i2];

        $r21 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = i2 - 1;

        $r22 = $r21[$i0];

        $r24 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r23, $r22);

        $r25 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i2 + 1;

        $r26 = $r25[$i1];

        $r27 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r24, $r26);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r27, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r5 = $r2[0];

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r3[0];

        $r6 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r5, $r4);

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r8 = $r7[1];

        $r9 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r6, $r8);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r9, 0);

        $r11 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r14 = $r11[5];

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r13 = $r12[4];

        $r15 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r14, $r13);

        $r16 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r17 = $r16[5];

        $r18 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r15, $r17);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r18, 5);

        return;
    }

    private void <init>(java.util.List, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.util.List r1;
        double d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        $r2 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] createMarkerArray(java.util.List,double)>(r1, d0);

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])>($r2);

        return;
    }

    private static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] createMarkerArray(java.util.List, double)
    {
        java.util.List r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2, $r3, $r6, $r9, $r12, $r15;
        java.lang.Object $r4, $r7, $r10, $r13, $r16;
        java.lang.Double $r5, $r8, $r11, $r14, $r17;
        org.apache.commons.math3.exception.InsufficientDataException $r18;
        java.lang.Object[] $r19;
        org.apache.commons.math3.exception.util.LocalizedFormats $r20;
        java.lang.Integer $r21, $r22;
        int $i1;

        r0 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        if r0 != null goto label1;

        $i1 = -1;

        goto label2;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label2:
        if $i1 >= 5 goto label3;

        $r18 = new org.apache.commons.math3.exception.InsufficientDataException;

        $r20 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r19 = newarray (java.lang.Object)[2];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r19[1] = $r22;

        specialinvoke $r18.<org.apache.commons.math3.exception.InsufficientDataException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r18;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r0);

        $r1 = newarray (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)[6];

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(null);

        $r1[0] = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d1, 1.0, 0.0, 1.0, null);

        $r1[1] = $r3;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = (java.lang.Double) $r7;

        $d2 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d3 = 2.0 * d0;

        $d5 = 1.0 + $d3;

        $d4 = d0 / 2.0;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d2, $d5, $d4, 2.0, null);

        $r1[2] = $r6;

        $r9 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r11 = (java.lang.Double) $r10;

        $d6 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d7 = 4.0 * d0;

        $d8 = 1.0 + $d7;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d6, $d8, d0, 3.0, null);

        $r1[3] = $r9;

        $r12 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(3);

        $r14 = (java.lang.Double) $r13;

        $d9 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $d10 = 2.0 * d0;

        $d13 = 3.0 + $d10;

        $d11 = 1.0 + d0;

        $d12 = $d11 / 2.0;

        specialinvoke $r12.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d9, $d13, $d12, 4.0, null);

        $r1[4] = $r12;

        $r15 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(4);

        $r17 = (java.lang.Double) $r16;

        $d14 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        specialinvoke $r15.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>($d14, 5.0, 1.0, 5.0, null);

        $r1[5] = $r15;

        return $r1;
    }

    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0, r2;
        java.lang.Object r1;
        boolean $z0, z1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: java.lang.Object;

        z1 = 0;

        if r0 != r1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        if r1 == null goto label2;

        $z0 = r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        if $z0 == 0 goto label2;

        r2 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers) r1;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        z1 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

     label2:
        return z1;
    }

    public double processDataPoint(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double d0, $d1;
        int i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        d0 := @parameter0: double;

        i0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int findCellAndUpdateMinMax(double)>(d0);

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void incrementPositions(int,int,int)>(1, $i1, 5);

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void updateDesiredPositions()>();

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void adjustHeightsOfMarkers()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double getPercentileValue()>();

        return $d1;
    }

    public double getPercentileValue()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(3);

        return $d0;
    }

    private int findCellAndUpdateMinMax(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1, $b2, $b3, $b4;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1, $r3;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2, $r4;
        int $i5;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = -1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(1);

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r3[1];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,double)>($r4, d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 1;

        goto label6;

     label1:
        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(2);

        $b1 = d0 cmpg $d2;

        if $b1 >= 0 goto label2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 1;

        goto label6;

     label2:
        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(3);

        $b2 = d0 cmpg $d3;

        if $b2 >= 0 goto label3;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 2;

        goto label6;

     label3:
        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(4);

        $b3 = d0 cmpg $d4;

        if $b3 >= 0 goto label4;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 3;

        goto label6;

     label4:
        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double height(int)>(5);

        $b4 = d0 cmpg $d5;

        if $b4 > 0 goto label5;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 4;

        goto label6;

     label5:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[5];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,double)>($r2, d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k> = 4;

     label6:
        $i5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int k>;

        return $i5;
    }

    private void adjustHeightsOfMarkers()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 = 2;

     label1:
        if i0 > 4 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: double estimate(int)>(i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public double estimate(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r5;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 := @parameter0: int;

        if i0 < 2 goto label1;

        if i0 <= 4 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r6 = $r5[i0];

        $d0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$600(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r6);

        return $d0;
    }

    private void incrementPositions(int, int, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0, i1, i2, i3;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i1;

     label1:
        if i3 > i2 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r2 = $r1[i3];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void access$700(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r2, i0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateDesiredPositions()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1, $r2;
        int $i0, i1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i1 = 1;

     label1:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[i1];

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void access$800(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.io.ObjectInputStream r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2, $r3, $r7, $r11, $r12, $r16, $r20, $r21, $r25;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r4, $r5, $r6, $r8, $r9, $r13, $r14, $r15, $r17, $r18, $r22, $r23, $r24, $r26, $r27;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i2 = 1;

     label1:
        if i2 >= 5 goto label2;

        $r20 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r23 = $r20[i2];

        $r21 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i0 = i2 - 1;

        $r22 = $r21[$i0];

        $r24 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r23, $r22);

        $r25 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = i2 + 1;

        $r26 = $r25[$i1];

        $r27 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r24, $r26);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r27, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r5 = $r2[0];

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r4 = $r3[0];

        $r6 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r5, $r4);

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r8 = $r7[1];

        $r9 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r6, $r8);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r9, 0);

        $r11 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r14 = $r11[5];

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r13 = $r12[4];

        $r15 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r14, $r13);

        $r16 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r17 = $r16[5];

        $r18 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r15, $r17);

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker,int)>($r18, 5);

        return;
    }

    public double height(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        int i0, $i1, $i2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r1, $r5, $r7;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r6;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        if i0 > 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $i2 = lengthof $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label2:
        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r8 = $r7[i0];

        $d0 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double access$500(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>($r8);

        return $d0;
    }

    public java.lang.Object clone()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0, $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2, $r4, $r8, $r12, $r16, $r20;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        java.lang.Object $r6, $r10, $r14, $r18, $r22;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r2 = newarray (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)[6];

        $r3 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(null);

        $r2[0] = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r5 = $r4[1];

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r7 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r6;

        $r2[1] = $r7;

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r9 = $r8[2];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r11 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r10;

        $r2[2] = $r11;

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r13 = $r12[3];

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r15 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r14;

        $r2[3] = $r15;

        $r16 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r17 = $r16[4];

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r19 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r18;

        $r2[4] = $r19;

        $r20 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r21 = $r20[5];

        $r22 = virtualinvoke $r21.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.Object clone()>();

        $r23 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) $r22;

        $r2[5] = $r23;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[])>($r2);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] $r2, $r5, $r8, $r11, $r14;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker $r3, $r6, $r9, $r12, $r15;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r17;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r3 = $r2[1];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[0] = $r4;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r6 = $r5[2];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[1] = $r7;

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r9 = $r8[3];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[2] = $r10;

        $r11 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r12 = $r11[4];

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[3] = $r13;

        $r14 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] markerArray>;

        $r15 = $r14[5];

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: java.lang.String toString()>();

        $r1[4] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("m1=[%s],m2=[%s],m3=[%s],m4=[%s],m5=[%s]", $r1);

        return $r17;
    }

    void <init>(java.util.List, double, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers r0;
        java.util.List r1;
        double d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        r1 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(java.util.List,double)>(r1, d0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int HIGH> = 4;

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: int LOW> = 2;

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: long serialVersionUID> = 1L;

        return;
    }
}
