public abstract class com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator extends java.lang.Object
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MA;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getDifferenceMatrix(int, int)
    {
        int i0, i1, $i4, $i5, $i6, $i7, $i8, $i12, i14, i15, i16;
        double[][] r1;
        int[] r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6;
        double $d0;
        double[] $r7;
        long $l9, $l10, $l11;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r8;
        boolean $z0;
        byte b13;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegativeOrZero(int,java.lang.String)>(i0, "m");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i1, "k");

        if i1 >= i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Difference order too high, require m > k, but have: m = {} and k = {}", $r3);

        if i1 != 0 goto label3;

        $r8 = new com.opengamma.analytics.math.matrix.IdentityMatrix;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.IdentityMatrix: void <init>(int)>(i0);

        return $r8;

     label3:
        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i0, i0);

        r1 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i4 = i1 + 1;

        r2 = newarray (int)[$i4];

        b13 = 1;

        i14 = i1;

     label4:
        if i14 < 0 goto label5;

        $l9 = (long) b13;

        $l10 = staticinvoke <org.apache.commons.math.util.MathUtils: long binomialCoefficient(int,int)>(i1, i14);

        $l11 = $l9 * $l10;

        $i12 = (int) $l11;

        r2[i14] = $i12;

        b13 = neg b13;

        i14 = i14 + -1;

        goto label4;

     label5:
        i15 = i1;

     label6:
        if i15 >= i0 goto label9;

        i16 = 0;

     label7:
        $i5 = i1 + 1;

        if i16 >= $i5 goto label8;

        $r7 = r1[i15];

        $i6 = i16 + i15;

        $i8 = $i6 - i1;

        $i7 = r2[i16];

        $d0 = (double) $i7;

        $r7[$i8] = $d0;

        i16 = i16 + 1;

        goto label7;

     label8:
        i15 = i15 + 1;

        goto label6;

     label9:
        return $r6;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int, int)
    {
        int i0, i1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r0, r1, $r8;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r5, $r6;
        com.opengamma.analytics.math.matrix.Matrix $r7;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r9;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegativeOrZero(int,java.lang.String)>(i0, "m");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i1, "k");

        if i1 >= i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r4;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Difference order too high, require m > k, but have: m = {} and k = {}", $r2);

        if i1 != 0 goto label3;

        $r9 = new com.opengamma.analytics.math.matrix.IdentityMatrix;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.IdentityMatrix: void <init>(int)>(i0);

        return $r9;

     label3:
        r0 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getDifferenceMatrix(int,int)>(i0, i1);

        $r5 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        r1 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)>(r0);

        $r6 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r0);

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r7;

        return $r8;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3, $i4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r5;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: int[] notEmpty(int[],java.lang.String)>(r0, "size");

        if i1 < 0 goto label1;

        $i2 = lengthof r0;

        if i1 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $i3 = lengthof r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r4;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "index must be in range 0 to {}", $r3);

        $i4 = r0[i1];

        r1 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int,int)>($i4, i0);

        $r5 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getMatrixForFlattened(int[],com.opengamma.analytics.math.matrix.DoubleMatrix2D,int)>(r0, r1, i1);

        return $r5;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int[], int[], double[])
    {
        int[] r0, r1;
        double[] r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, $r8, $r11, r15;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r7, $r10, $r13;
        double $d0, $d1;
        com.opengamma.analytics.math.matrix.Matrix $r9, $r12, $r14;
        boolean $z0, $z1;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        r2 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: int[] notEmpty(int[],java.lang.String)>(r0, "size");

        staticinvoke <com.opengamma.util.ArgumentChecker: int[] notEmpty(int[],java.lang.String)>(r1, "k");

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r2, "lambda");

        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "k different length to size");

        $i2 = lengthof r2;

        if i0 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "lambda different lenght to size");

        $r7 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $i3 = r1[0];

        $r8 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int[],int,int)>(r0, $i3, 0);

        $d0 = r2[0];

        $r9 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r8, $d0);

        r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r9;

        i5 = 1;

     label5:
        if i5 >= i0 goto label6;

        $r10 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $i4 = r1[i5];

        $r11 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(int[],int,int)>(r0, $i4, i5);

        $d1 = r2[i5];

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r11, $d1);

        r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r12;

        $r13 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r15, r3);

        r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r14;

        i5 = i5 + 1;

        goto label5;

     label6:
        return r15;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getDerivativeMatrix(double[], int, boolean)
    {
        double[] r0, r1, r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, r25;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i44, $i45, i46, i47, i48;
        boolean z0, $z1, $z2, $z3;
        double[][] r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, d79;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        byte $b43;
        org.apache.commons.lang.NotImplementedException $r23;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r24;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "k");

        i1 = lengthof r0;

        if i0 >= i1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "order too high. Length of x is {}, and k is {}", $r5);

        if i0 != 0 goto label03;

        $r24 = new com.opengamma.analytics.math.matrix.IdentityMatrix;

        specialinvoke $r24.<com.opengamma.analytics.math.matrix.IdentityMatrix: void <init>(int)>(i1);

        return $r24;

     label03:
        if i0 <= 2 goto label04;

        $r23 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r23.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("cannot handle order (k) > 2");

        throw $r23;

     label04:
        if i1 <= 2 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Need at least 3 points for a three point estimate");

        $i3 = i1 - 1;

        r1 = newarray (double)[$i3];

        $i4 = i1 - 1;

        r2 = newarray (double)[$i4];

        i44 = 0;

     label07:
        $i45 = i1 - 1;

        if i44 >= $i45 goto label10;

        $i42 = i44 + 1;

        $d77 = r0[$i42];

        $d76 = r0[i44];

        d79 = $d77 - $d76;

        $b43 = d79 cmpl 0.0;

        if $b43 <= 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "x not in ascending order, or two identical points");

        r1[i44] = d79;

        $d78 = d79 * d79;

        r2[i44] = $d78;

        i44 = i44 + 1;

        goto label07;

     label10:
        $i5 = i1 - 2;

        r25 = newarray (double)[$i5];

        i46 = 0;

     label11:
        $i6 = i1 - 2;

        if i46 >= $i6 goto label12;

        $d69 = r1[i46];

        $i40 = i46 + 1;

        $d68 = r1[$i40];

        $d73 = $d69 * $d68;

        $d71 = r1[i46];

        $i41 = i46 + 1;

        $d70 = r1[$i41];

        $d72 = $d71 + $d70;

        $d74 = $d73 * $d72;

        $d75 = 1.0 / $d74;

        r25[i46] = $d75;

        i46 = i46 + 1;

        goto label11;

     label12:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i1, i1);

        r3 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        if i0 != 1 goto label16;

        i47 = 1;

     label13:
        $i15 = i1 - 1;

        if i47 >= $i15 goto label14;

        $r20 = r3[i47];

        $i34 = i47 - 1;

        $i33 = i47 - 1;

        $d56 = r25[$i33];

        $d58 = neg $d56;

        $d57 = r2[i47];

        $d59 = $d58 * $d57;

        $r20[$i34] = $d59;

        $r21 = r3[i47];

        $i35 = i47 - 1;

        $d63 = r25[$i35];

        $d61 = r2[i47];

        $i36 = i47 - 1;

        $d60 = r2[$i36];

        $d62 = $d61 - $d60;

        $d64 = $d63 * $d62;

        $r21[i47] = $d64;

        $r22 = r3[i47];

        $i39 = i47 + 1;

        $i37 = i47 - 1;

        $d66 = r25[$i37];

        $i38 = i47 - 1;

        $d65 = r2[$i38];

        $d67 = $d66 * $d65;

        $r22[$i39] = $d67;

        i47 = i47 + 1;

        goto label13;

     label14:
        if z0 == 0 goto label15;

        $r14 = r3[0];

        $d11 = r25[0];

        $d13 = neg $d11;

        $d12 = r1[1];

        $d18 = $d13 * $d12;

        $d14 = r1[0];

        $d16 = 2.0 * $d14;

        $d15 = r1[1];

        $d17 = $d16 + $d15;

        $d19 = $d18 * $d17;

        $r14[0] = $d19;

        $r15 = r3[0];

        $d28 = r25[0];

        $d21 = r2[0];

        $d20 = r2[1];

        $d26 = $d21 + $d20;

        $d22 = r1[0];

        $d24 = 2.0 * $d22;

        $d23 = r1[1];

        $d25 = $d24 * $d23;

        $d27 = $d26 + $d25;

        $d29 = $d28 * $d27;

        $r15[1] = $d29;

        $r16 = r3[0];

        $d30 = r25[0];

        $d32 = neg $d30;

        $d31 = r2[0];

        $d33 = $d32 * $d31;

        $r16[2] = $d33;

        $i16 = i1 - 1;

        $r17 = r3[$i16];

        $i19 = i1 - 3;

        $i17 = i1 - 3;

        $d35 = r25[$i17];

        $i18 = i1 - 2;

        $d34 = r2[$i18];

        $d36 = $d35 * $d34;

        $r17[$i19] = $d36;

        $i20 = i1 - 1;

        $r18 = r3[$i20];

        $i26 = i1 - 2;

        $i21 = i1 - 3;

        $d37 = r25[$i21];

        $d46 = neg $d37;

        $i22 = i1 - 3;

        $d39 = r2[$i22];

        $i23 = i1 - 2;

        $d38 = r2[$i23];

        $d44 = $d39 + $d38;

        $i24 = i1 - 2;

        $d40 = r1[$i24];

        $d42 = 2.0 * $d40;

        $i25 = i1 - 3;

        $d41 = r1[$i25];

        $d43 = $d42 * $d41;

        $d45 = $d44 + $d43;

        $d47 = $d46 * $d45;

        $r18[$i26] = $d47;

        $i27 = i1 - 1;

        $r19 = r3[$i27];

        $i32 = i1 - 1;

        $i28 = i1 - 3;

        $d49 = r25[$i28];

        $i29 = i1 - 3;

        $d48 = r1[$i29];

        $d54 = $d49 * $d48;

        $i30 = i1 - 2;

        $d50 = r1[$i30];

        $d52 = 2.0 * $d50;

        $i31 = i1 - 3;

        $d51 = r1[$i31];

        $d53 = $d52 + $d51;

        $d55 = $d54 * $d53;

        $r19[$i32] = $d55;

     label15:
        return $r8;

     label16:
        i48 = 1;

     label17:
        $i7 = i1 - 1;

        if i48 >= $i7 goto label18;

        $i10 = i48 - 1;

        $d1 = r25[$i10];

        d0 = 2.0 * $d1;

        $r11 = r3[i48];

        $i11 = i48 - 1;

        $d2 = r1[i48];

        $d3 = d0 * $d2;

        $r11[$i11] = $d3;

        $r12 = r3[i48];

        $d7 = neg d0;

        $d5 = r1[i48];

        $i12 = i48 - 1;

        $d4 = r1[$i12];

        $d6 = $d5 + $d4;

        $d8 = $d7 * $d6;

        $r12[i48] = $d8;

        $r13 = r3[i48];

        $i14 = i48 + 1;

        $i13 = i48 - 1;

        $d9 = r1[$i13];

        $d10 = d0 * $d9;

        $r13[$i14] = $d10;

        i48 = i48 + 1;

        goto label17;

     label18:
        if z0 == 0 goto label19;

        $r9 = r3[1];

        r3[0] = $r9;

        $i9 = i1 - 1;

        $i8 = i1 - 2;

        $r10 = r3[$i8];

        r3[$i9] = $r10;

     label19:
        return $r8;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[], int)
    {
        double[] r0;
        int i0, $i1, $i2, $i3;
        double d0, d1, $d2, $d3, $d5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r2, $r5, $r10;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r4, $r7, $r8;
        com.opengamma.analytics.math.matrix.Matrix $r6, $r9;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r16;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r0, "x");

        $i1 = lengthof r0;

        if $i1 != 1 goto label2;

        if i0 != 0 goto label1;

        $r16 = new com.opengamma.analytics.math.matrix.IdentityMatrix;

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.IdentityMatrix: void <init>(int)>(1);

        return $r16;

     label1:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("order too high. Length of x is 1 and k is ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label2:
        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $d3 = r0[$i3];

        $d2 = r0[0];

        d0 = $d3 - $d2;

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d0, "range of x");

        $d5 = (double) i0;

        d1 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d5);

        $r4 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r5 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getDerivativeMatrix(double[],int,boolean)>(r0, i0, 0);

        $r6 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r5, d1);

        r1 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r6;

        $r7 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        r2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)>(r1);

        $r8 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r2, r1);

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r9;

        return $r10;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[][], int, int)
    {
        double[][] r0;
        int i0, i1, i2, $i3, i4;
        int[] r1;
        double[] $r3, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r4, r6;

        r0 := @parameter0: double[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r0, "x");

        i2 = lengthof r0;

        r1 = newarray (int)[i2];

        i4 = 0;

     label1:
        if i4 >= i2 goto label2;

        $r5 = r0[i4];

        $i3 = lengthof $r5;

        r1[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r3 = r0[i1];

        r6 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[],int)>($r3, i0);

        $r4 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getMatrixForFlattened(int[],com.opengamma.analytics.math.matrix.DoubleMatrix2D,int)>(r1, r6, i1);

        return $r4;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[][], int[], double[])
    {
        double[][] r0;
        int[] r1;
        double[] r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, $r7, $r10, r14;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r6, $r9, $r12;
        double $d0, $d1;
        com.opengamma.analytics.math.matrix.Matrix $r8, $r11, $r13;
        boolean $z0, $z1;

        r0 := @parameter0: double[][];

        r1 := @parameter1: int[];

        r2 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: int[] notEmpty(int[],java.lang.String)>(r1, "k");

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r2, "lambda");

        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "k different lenght to size");

        $i2 = lengthof r2;

        if i0 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "lambda different length to size");

        $r6 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $i3 = r1[0];

        $r7 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[][],int,int)>(r0, $i3, 0);

        $d0 = r2[0];

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r7, $d0);

        r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r8;

        i5 = 1;

     label5:
        if i5 >= i0 goto label6;

        $r9 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $i4 = r1[i5];

        $r10 = staticinvoke <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.DoubleMatrix2D getPenaltyMatrix(double[][],int,int)>(r0, $i4, i5);

        $d1 = r2[i5];

        $r11 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r10, $d1);

        r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r11;

        $r12 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r14, r3);

        r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r13;

        i5 = i5 + 1;

        goto label5;

     label6:
        return r14;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix1D flattenMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r0;
        int i0, i1, i2, i3, i4;
        double[] r1, $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;
        double[][] $r3;

        r0 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfElements()>();

        r1 = newarray (double)[i0];

        i1 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i2 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i3 = 0;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r4 = $r3[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i3, i2);

        i3 = i3 + i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D getMatrixForFlattened(int[], com.opengamma.analytics.math.matrix.DoubleMatrix2D, int)
    {
        int[] r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r8, $r11, r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r7, $r10;
        com.opengamma.analytics.math.matrix.Matrix $r9, $r12;
        boolean $z0, $z1;

        r0 := @parameter0: int[];

        r1 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 := @parameter2: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: int[] notEmpty(int[],java.lang.String)>(r0, "numElements");

        i1 = lengthof r0;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "m");

        if i0 < 0 goto label01;

        if i0 >= i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "indices outside range");

        $i6 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i7 = r0[i0];

        if $i6 != $i7 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $r4 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[0] = $r5;

        $i3 = r0[i0];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "columns in m ({}) do not match numElements for index ({})", $r4);

        i8 = 1;

        i9 = 1;

        i10 = i0 + 1;

     label05:
        if i10 >= i1 goto label06;

        $i5 = r0[i10];

        i9 = i9 * $i5;

        i10 = i10 + 1;

        goto label05;

     label06:
        i11 = 0;

     label07:
        if i11 >= i0 goto label08;

        $i4 = r0[i11];

        i8 = i8 * $i4;

        i11 = i11 + 1;

        goto label07;

     label08:
        r13 = r1;

        if i9 == 1 goto label09;

        $r10 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r11 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i9);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix kroneckerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, $r11);

        r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r12;

     label09:
        if i8 == 1 goto label10;

        $r7 = <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r8 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i8);

        $r9 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix kroneckerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r8, r13);

        r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r9;

     label10:
        return r13;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.math.interpolation.PenaltyMatrixGenerator: com.opengamma.analytics.math.matrix.MatrixAlgebra MA> = $r0;

        return;
    }
}
