public class org.apache.commons.math.distribution.CauchyDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.CauchyDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private double median;
    private double scale;
    private final double solverAbsoluteAccuracy;

    public void <init>()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median> = 0.0;

        r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale> = 1.0;

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void setMedianInternal(double)>(d0);

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void setScaleInternal(double)>(d1);

        r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        $d3 = d0 - $d1;

        $d2 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double atan(double)>($d4);

        $d6 = $d5 / 3.141592653589793;

        $d7 = 0.5 + $d6;

        return $d7;
    }

    public double getMedian()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        return $d0;
    }

    public double getScale()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        d1 = d0 - $d2;

        $d8 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        $d6 = d1 * d1;

        $d4 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        $d3 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        $d5 = $d4 * $d3;

        $d7 = $d6 + $d5;

        $d9 = $d8 / $d7;

        $d10 = 0.3183098861837907 * $d9;

        return $d10;
    }

    public double inverseCumulativeProbability(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label2:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        d7 = #-Infinity;

        goto label5;

     label3:
        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label4;

        d7 = #Infinity;

        goto label5;

     label4:
        $d3 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        $d4 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        $d1 = d0 - 0.5;

        $d2 = 3.141592653589793 * $d1;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double tan(double)>($d2);

        $d6 = $d4 * $d5;

        d7 = $d3 + $d6;

     label5:
        return d7;
    }

    public void setMedian(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void setMedianInternal(double)>(d0);

        return;
    }

    private void setMedianInternal(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median> = d0;

        return;
    }

    public void setScale(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: void setScaleInternal(double)>(d0);

        return;
    }

    private void setScaleInternal(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_SCALE>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale> = d0;

        return;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        d1 = -1.7976931348623157E308;

        goto label2;

     label1:
        d1 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

     label2:
        return d1;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        d1 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        goto label2;

     label1:
        d1 = 1.7976931348623157E308;

     label2:
        return d1;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d4 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        $d3 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        d5 = $d4 - $d3;

        goto label3;

     label1:
        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

        $d2 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

        $d1 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double scale>;

        d5 = $d2 + $d1;

        goto label3;

     label2:
        d5 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double median>;

     label3:
        return d5;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.CauchyDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        return #NaN;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.CauchyDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.CauchyDistributionImpl;

        return #NaN;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.CauchyDistributionImpl: long serialVersionUID> = 8589540077390120676L;

        <org.apache.commons.math.distribution.CauchyDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
