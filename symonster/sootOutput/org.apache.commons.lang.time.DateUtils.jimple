public class org.apache.commons.lang.time.DateUtils extends java.lang.Object
{
    public static final java.util.TimeZone UTC_TIME_ZONE;
    public static final long MILLIS_PER_SECOND;
    public static final long MILLIS_PER_MINUTE;
    public static final long MILLIS_PER_HOUR;
    public static final long MILLIS_PER_DAY;
    public static final int SEMI_MONTH;
    private static final int[][] fields;
    public static final int RANGE_WEEK_SUNDAY;
    public static final int RANGE_WEEK_MONDAY;
    public static final int RANGE_WEEK_RELATIVE;
    public static final int RANGE_WEEK_CENTER;
    public static final int RANGE_MONTH_SUNDAY;
    public static final int RANGE_MONTH_MONDAY;
    private static final int MODIFY_TRUNCATE;
    private static final int MODIFY_ROUND;
    private static final int MODIFY_CEILING;
    public static final int MILLIS_IN_SECOND;
    public static final int MILLIS_IN_MINUTE;
    public static final int MILLIS_IN_HOUR;
    public static final int MILLIS_IN_DAY;

    public void <init>()
    {
        org.apache.commons.lang.time.DateUtils r0;

        r0 := @this: org.apache.commons.lang.time.DateUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isSameDay(java.util.Date, java.util.Date)
    {
        java.util.Date r0, r1;
        java.util.Calendar r2, r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r4;

     label2:
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $z0 = staticinvoke <org.apache.commons.lang.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>(r2, r3);

        return $z0;
    }

    public static boolean isSameDay(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label2:
        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(0);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(0);

        if $i0 != $i1 goto label3;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        if $i2 != $i3 goto label3;

        $i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(6);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(6);

        if $i4 != $i5 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isSameInstant(java.util.Date, java.util.Date)
    {
        java.util.Date r0, r1;
        java.lang.IllegalArgumentException $r2;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label2:
        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isSameInstant(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Date $r3, $r4;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label2:
        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r4 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isSameLocalTime(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label2:
        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        if $i0 != $i1 goto label3;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        if $i2 != $i3 goto label3;

        $i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        if $i4 != $i5 goto label3;

        $i6 = virtualinvoke r0.<java.util.Calendar: int get(int)>(10);

        $i7 = virtualinvoke r1.<java.util.Calendar: int get(int)>(10);

        if $i6 != $i7 goto label3;

        $i8 = virtualinvoke r0.<java.util.Calendar: int get(int)>(6);

        $i9 = virtualinvoke r1.<java.util.Calendar: int get(int)>(6);

        if $i8 != $i9 goto label3;

        $i10 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i11 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        if $i10 != $i11 goto label3;

        $i12 = virtualinvoke r0.<java.util.Calendar: int get(int)>(0);

        $i13 = virtualinvoke r1.<java.util.Calendar: int get(int)>(0);

        if $i12 != $i13 goto label3;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String r0;
        java.lang.String[] r1;
        java.util.Date $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date parseDateWithLeniency(java.lang.String,java.lang.String[],boolean)>(r0, r1, 1);

        return $r2;
    }

    public static java.util.Date parseDateStrictly(java.lang.String, java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String r0;
        java.lang.String[] r1;
        java.util.Date $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date parseDateWithLeniency(java.lang.String,java.lang.String[],boolean)>(r0, r1, 0);

        return $r2;
    }

    private static java.util.Date parseDateWithLeniency(java.lang.String, java.lang.String[], boolean) throws java.text.ParseException
    {
        java.lang.String r0, $r11, $r12, $r13, r14, r15;
        java.lang.String[] r1;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;
        java.text.SimpleDateFormat $r5;
        java.text.ParsePosition $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.text.ParseException $r7;
        java.lang.StringBuffer $r8, $r9, $r10;
        java.util.Date r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Date and Patterns must not be null");

        throw $r4;

     label2:
        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>()>();

        virtualinvoke $r5.<java.text.SimpleDateFormat: void setLenient(boolean)>(z0);

        $r6 = new java.text.ParsePosition;

        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);

        i5 = 0;

     label3:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label8;

        r14 = r1[i5];

        $r12 = r1[i5];

        $z1 = virtualinvoke $r12.<java.lang.String: boolean endsWith(java.lang.String)>("ZZ");

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke r14.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        r14 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label4:
        virtualinvoke $r5.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r14);

        virtualinvoke $r6.<java.text.ParsePosition: void setIndex(int)>(0);

        r15 = r0;

        $r13 = r1[i5];

        $z2 = virtualinvoke $r13.<java.lang.String: boolean endsWith(java.lang.String)>("ZZ");

        if $z2 == 0 goto label6;

        i6 = staticinvoke <org.apache.commons.lang.time.DateUtils: int indexOfSignChars(java.lang.String,int)>(r0, 0);

     label5:
        if i6 < 0 goto label6;

        r15 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.lang.String reformatTimezone(java.lang.String,int)>(r15, i6);

        i7 = i6 + 1;

        i6 = staticinvoke <org.apache.commons.lang.time.DateUtils: int indexOfSignChars(java.lang.String,int)>(r15, i7);

        goto label5;

     label6:
        r16 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r15, $r6);

        if r16 == null goto label7;

        $i1 = virtualinvoke $r6.<java.text.ParsePosition: int getIndex()>();

        $i2 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i1 != $i2 goto label7;

        return r16;

     label7:
        i5 = i5 + 1;

        goto label3;

     label8:
        $r7 = new java.text.ParseException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse the date: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.text.ParseException: void <init>(java.lang.String,int)>($r11, -1);

        throw $r7;
    }

    private static int indexOfSignChars(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOf(java.lang.String,char,int)>(r0, 43, i0);

        if i1 >= 0 goto label1;

        i1 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOf(java.lang.String,char,int)>(r0, 45, i0);

     label1:
        return i1;
    }

    private static java.lang.String reformatTimezone(java.lang.String, int)
    {
        java.lang.String r0, $r2, $r4, r6;
        int i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, $i13, $i14;
        char $c4, $c6, $c8, $c10, $c12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuffer $r1, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r6 = r0;

        if i0 < 0 goto label1;

        $i1 = i0 + 5;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label1;

        $i3 = i0 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z0 == 0 goto label1;

        $i5 = i0 + 2;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c6);

        if $z1 == 0 goto label1;

        $i7 = i0 + 3;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != 58 goto label1;

        $i9 = i0 + 4;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c10);

        if $z2 == 0 goto label1;

        $i11 = i0 + 5;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c12);

        if $z3 == 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i13 = i0 + 3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i14 = i0 + 4;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i14);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r6;
    }

    public static java.util.Date addYears(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 1, i0);

        return $r1;
    }

    public static java.util.Date addMonths(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 2, i0);

        return $r1;
    }

    public static java.util.Date addWeeks(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 3, i0);

        return $r1;
    }

    public static java.util.Date addDays(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 5, i0);

        return $r1;
    }

    public static java.util.Date addHours(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 11, i0);

        return $r1;
    }

    public static java.util.Date addMinutes(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 12, i0);

        return $r1;
    }

    public static java.util.Date addSeconds(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 13, i0);

        return $r1;
    }

    public static java.util.Date addMilliseconds(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(r0, 14, i0);

        return $r1;
    }

    public static java.util.Date add(java.util.Date, int, int)
    {
        java.util.Date r0, $r2;
        int i0, i1;
        java.util.Calendar r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        virtualinvoke r1.<java.util.Calendar: void add(int,int)>(i0, i1);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date setYears(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 1, i0);

        return $r1;
    }

    public static java.util.Date setMonths(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 2, i0);

        return $r1;
    }

    public static java.util.Date setDays(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 5, i0);

        return $r1;
    }

    public static java.util.Date setHours(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 11, i0);

        return $r1;
    }

    public static java.util.Date setMinutes(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 12, i0);

        return $r1;
    }

    public static java.util.Date setSeconds(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 13, i0);

        return $r1;
    }

    public static java.util.Date setMilliseconds(java.util.Date, int)
    {
        java.util.Date r0, $r1;
        int i0;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(r0, 14, i0);

        return $r1;
    }

    private static java.util.Date set(java.util.Date, int, int)
    {
        java.util.Date r0, $r2;
        int i0, i1;
        java.util.Calendar r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(0);

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(i0, i1);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Calendar toCalendar(java.util.Date)
    {
        java.util.Date r0;
        java.util.Calendar r1;

        r0 := @parameter0: java.util.Date;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        return r1;
    }

    public static java.util.Date round(java.util.Date, int)
    {
        java.util.Date r0, $r2;
        int i0;
        java.util.Calendar r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 1);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Calendar round(java.util.Calendar, int)
    {
        java.util.Calendar r0, r1;
        int i0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r1 = (java.util.Calendar) $r2;

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 1);

        return r1;
    }

    public static java.util.Date round(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        boolean $z0, $z1;
        java.lang.ClassCastException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.lang.String $r5;
        java.util.Calendar $r6, $r7;
        java.util.Date $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r11;

     label1:
        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $r9 = (java.util.Date) r0;

        $r10 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date round(java.util.Date,int)>($r9, i0);

        return $r10;

     label2:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label3;

        $r6 = (java.util.Calendar) r0;

        $r7 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar round(java.util.Calendar,int)>($r6, i0);

        $r8 = virtualinvoke $r7.<java.util.Calendar: java.util.Date getTime()>();

        return $r8;

     label3:
        $r1 = new java.lang.ClassCastException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not round ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.util.Date truncate(java.util.Date, int)
    {
        java.util.Date r0, $r2;
        int i0;
        java.util.Calendar r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 0);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Calendar truncate(java.util.Calendar, int)
    {
        java.util.Calendar r0, r1;
        int i0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r1 = (java.util.Calendar) $r2;

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 0);

        return r1;
    }

    public static java.util.Date truncate(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        boolean $z0, $z1;
        java.lang.ClassCastException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.lang.String $r5;
        java.util.Calendar $r6, $r7;
        java.util.Date $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r11;

     label1:
        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $r9 = (java.util.Date) r0;

        $r10 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($r9, i0);

        return $r10;

     label2:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label3;

        $r6 = (java.util.Calendar) r0;

        $r7 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($r6, i0);

        $r8 = virtualinvoke $r7.<java.util.Calendar: java.util.Date getTime()>();

        return $r8;

     label3:
        $r1 = new java.lang.ClassCastException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not truncate ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.util.Date ceiling(java.util.Date, int)
    {
        java.util.Date r0, $r2;
        int i0;
        java.util.Calendar r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 2);

        $r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Calendar ceiling(java.util.Calendar, int)
    {
        java.util.Calendar r0, r1;
        int i0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        r1 = (java.util.Calendar) $r2;

        staticinvoke <org.apache.commons.lang.time.DateUtils: void modify(java.util.Calendar,int,int)>(r1, i0, 2);

        return r1;
    }

    public static java.util.Date ceiling(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        boolean $z0, $z1;
        java.lang.ClassCastException $r1;
        java.lang.StringBuffer $r2, $r3, $r5;
        java.lang.Class $r4;
        java.lang.String $r6;
        java.util.Calendar $r7, $r8;
        java.util.Date $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r12;

     label1:
        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $r10 = (java.util.Date) r0;

        $r11 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($r10, i0);

        return $r11;

     label2:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label3;

        $r7 = (java.util.Calendar) r0;

        $r8 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>($r7, i0);

        $r9 = virtualinvoke $r8.<java.util.Calendar: java.util.Date getTime()>();

        return $r9;

     label3:
        $r1 = new java.lang.ClassCastException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find ceiling of for type: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private static void modify(java.util.Calendar, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i34, $i35, i36, i37;
        java.util.Date r1;
        long $l8, $l27, $l28, $l29, $l30, l31, $l32;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        int[][] $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r29;
        int[] $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        java.lang.ArithmeticException $r28;
        boolean z0, z1, z2, $z3, $z4, $z5;
        byte $b33;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        if $i7 <= 280000000 goto label01;

        $r28 = new java.lang.ArithmeticException;

        specialinvoke $r28.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Calendar value too large for accurate calculations");

        throw $r28;

     label01:
        if i0 != 14 goto label02;

        return;

     label02:
        r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        l31 = virtualinvoke r1.<java.util.Date: long getTime()>();

        z0 = 0;

        i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        if 0 == i1 goto label03;

        if i2 >= 500 goto label04;

     label03:
        $l8 = (long) i2;

        l31 = l31 - $l8;

     label04:
        if i0 != 13 goto label05;

        z0 = 1;

     label05:
        i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        if z0 != 0 goto label07;

        if 0 == i1 goto label06;

        if i3 >= 30 goto label07;

     label06:
        $l29 = (long) i3;

        $l30 = $l29 * 1000L;

        l31 = l31 - $l30;

     label07:
        if i0 != 12 goto label08;

        z0 = 1;

     label08:
        i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        if z0 != 0 goto label10;

        if 0 == i1 goto label09;

        if i4 >= 30 goto label10;

     label09:
        $l27 = (long) i4;

        $l28 = $l27 * 60000L;

        l31 = l31 - $l28;

     label10:
        $l32 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $b33 = $l32 cmp l31;

        if $b33 == 0 goto label11;

        virtualinvoke r1.<java.util.Date: void setTime(long)>(l31);

        virtualinvoke r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

     label11:
        z1 = 0;

        i34 = 0;

     label12:
        $r29 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $i35 = lengthof $r29;

        if i34 >= $i35 goto label35;

        i36 = 0;

     label13:
        $r8 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r9 = $r8[i34];

        $i9 = lengthof $r9;

        if i36 >= $i9 goto label21;

        $r24 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r25 = $r24[i34];

        $i23 = $r25[i36];

        if $i23 != i0 goto label20;

        if i1 == 2 goto label14;

        if i1 != 1 goto label19;

        if z1 == 0 goto label19;

     label14:
        if i0 != 1001 goto label16;

        $i26 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        if $i26 != 1 goto label15;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, 15);

        goto label19;

     label15:
        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, -15);

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(2, 1);

        goto label19;

     label16:
        if i0 != 9 goto label18;

        $i25 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        if $i25 != 0 goto label17;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(11, 12);

        goto label19;

     label17:
        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(11, -12);

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(5, 1);

        goto label19;

     label18:
        $r26 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r27 = $r26[i34];

        $i24 = $r27[0];

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>($i24, 1);

     label19:
        return;

     label20:
        i36 = i36 + 1;

        goto label13;

     label21:
        i37 = 0;

        z2 = 0;

        lookupswitch(i0)
        {
            case 9: goto label26;
            case 1001: goto label22;
            default: goto label30;
        };

     label22:
        $r10 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r11 = $r10[i34];

        $i10 = $r11[0];

        if $i10 != 5 goto label30;

        $i21 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        i37 = $i21 - 1;

        if i37 < 15 goto label23;

        i37 = i37 + -15;

     label23:
        if i37 <= 7 goto label24;

        $z3 = 1;

        goto label25;

     label24:
        $z3 = 0;

     label25:
        z1 = $z3;

        z2 = 1;

        goto label30;

     label26:
        $r22 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r23 = $r22[i34];

        $i22 = $r23[0];

        if $i22 != 11 goto label30;

        i37 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        if i37 < 12 goto label27;

        i37 = i37 + -12;

     label27:
        if i37 < 6 goto label28;

        $z4 = 1;

        goto label29;

     label28:
        $z4 = 0;

     label29:
        z1 = $z4;

        z2 = 1;

     label30:
        if z2 != 0 goto label33;

        $r16 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r17 = $r16[i34];

        $i15 = $r17[0];

        i5 = virtualinvoke r0.<java.util.Calendar: int getActualMinimum(int)>($i15);

        $r18 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r19 = $r18[i34];

        $i16 = $r19[0];

        i6 = virtualinvoke r0.<java.util.Calendar: int getActualMaximum(int)>($i16);

        $r20 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r21 = $r20[i34];

        $i17 = $r21[0];

        $i18 = virtualinvoke r0.<java.util.Calendar: int get(int)>($i17);

        i37 = $i18 - i5;

        $i19 = i6 - i5;

        $i20 = $i19 / 2;

        if i37 <= $i20 goto label31;

        $z5 = 1;

        goto label32;

     label31:
        $z5 = 0;

     label32:
        z1 = $z5;

     label33:
        if i37 == 0 goto label34;

        $r12 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r13 = $r12[i34];

        $i12 = $r13[0];

        $r14 = <org.apache.commons.lang.time.DateUtils: int[][] fields>;

        $r15 = $r14[i34];

        $i11 = $r15[0];

        $i13 = virtualinvoke r0.<java.util.Calendar: int get(int)>($i11);

        $i14 = $i13 - i37;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>($i12, $i14);

     label34:
        i34 = i34 + 1;

        goto label12;

     label35:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The field ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public static java.util.Iterator iterator(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        java.util.Calendar r1;
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r3;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        $r2 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>(r1, i0);

        return $r2;
    }

    public static java.util.Iterator iterator(java.util.Calendar, int)
    {
        java.util.Calendar r0, r10, r11;
        int i0, $i1, $i2, $i3, i4, i5, $i6;
        java.lang.Object $r1;
        org.apache.commons.lang.time.DateUtils$DateIterator $r2;
        java.lang.IllegalArgumentException $r3, $r9;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        if r0 != null goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r9;

     label01:
        i4 = 1;

        i5 = 7;

        tableswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label02;
            case 6: goto label02;
            default: goto label09;
        };

     label02:
        r10 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(r0, 2);

        $r1 = virtualinvoke r10.<java.util.Calendar: java.lang.Object clone()>();

        r11 = (java.util.Calendar) $r1;

        virtualinvoke r11.<java.util.Calendar: void add(int,int)>(2, 1);

        virtualinvoke r11.<java.util.Calendar: void add(int,int)>(5, -1);

        if i0 != 6 goto label10;

        i4 = 2;

        i5 = 1;

        goto label10;

     label03:
        r10 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(r0, 5);

        r11 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(r0, 5);

        tableswitch(i0)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            default: goto label08;
        };

     label04:
        goto label08;

     label05:
        i4 = 2;

        i5 = 1;

        goto label08;

     label06:
        i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(7);

        i5 = i4 - 1;

        goto label08;

     label07:
        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(7);

        i4 = $i2 - 3;

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(7);

        i5 = $i3 + 3;

     label08:
        goto label10;

     label09:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The range style ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not valid.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label10:
        if i4 >= 1 goto label11;

        i4 = i4 + 7;

     label11:
        if i4 <= 7 goto label12;

        i4 = i4 + -7;

     label12:
        if i5 >= 1 goto label13;

        i5 = i5 + 7;

     label13:
        if i5 <= 7 goto label14;

        i5 = i5 + -7;

     label14:
        $i6 = virtualinvoke r10.<java.util.Calendar: int get(int)>(7);

        if $i6 == i4 goto label15;

        virtualinvoke r10.<java.util.Calendar: void add(int,int)>(5, -1);

        goto label14;

     label15:
        $i1 = virtualinvoke r11.<java.util.Calendar: int get(int)>(7);

        if $i1 == i5 goto label16;

        virtualinvoke r11.<java.util.Calendar: void add(int,int)>(5, 1);

        goto label15;

     label16:
        $r2 = new org.apache.commons.lang.time.DateUtils$DateIterator;

        specialinvoke $r2.<org.apache.commons.lang.time.DateUtils$DateIterator: void <init>(java.util.Calendar,java.util.Calendar)>(r10, r11);

        return $r2;
    }

    public static java.util.Iterator iterator(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        boolean $z0, $z1;
        java.lang.ClassCastException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.lang.String $r5;
        java.util.Calendar $r6;
        java.util.Iterator $r7, $r9;
        java.util.Date $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r10;

     label1:
        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $r8 = (java.util.Date) r0;

        $r9 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>($r8, i0);

        return $r9;

     label2:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label3;

        $r6 = (java.util.Calendar) r0;

        $r7 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($r6, i0);

        return $r7;

     label3:
        $r1 = new java.lang.ClassCastException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not iterate based on ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static long getFragmentInMilliseconds(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Date,int,int)>(r0, i0, 14);

        return $l1;
    }

    public static long getFragmentInSeconds(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Date,int,int)>(r0, i0, 13);

        return $l1;
    }

    public static long getFragmentInMinutes(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Date,int,int)>(r0, i0, 12);

        return $l1;
    }

    public static long getFragmentInHours(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Date,int,int)>(r0, i0, 11);

        return $l1;
    }

    public static long getFragmentInDays(java.util.Date, int)
    {
        java.util.Date r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Date,int,int)>(r0, i0, 6);

        return $l1;
    }

    public static long getFragmentInMilliseconds(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r0, i0, 14);

        return $l1;
    }

    public static long getFragmentInSeconds(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r0, i0, 13);

        return $l1;
    }

    public static long getFragmentInMinutes(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r0, i0, 12);

        return $l1;
    }

    public static long getFragmentInHours(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r0, i0, 11);

        return $l1;
    }

    public static long getFragmentInDays(java.util.Calendar, int)
    {
        java.util.Calendar r0;
        int i0;
        long $l1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r0, i0, 6);

        return $l1;
    }

    private static long getFragment(java.util.Date, int, int)
    {
        java.util.Date r0;
        int i0, i1;
        java.util.Calendar r1;
        long $l2;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>(r0);

        $l2 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getFragment(java.util.Calendar,int,int)>(r1, i0, i1);

        return $l2;
    }

    private static long getFragment(java.util.Calendar, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, $i3, $i7, $i12, $i16, $i20, $i24, $i25;
        long l2, $l4, $l5, $l6, $l8, $l9, $l10, l11, $l13, $l14, $l15, $l17, $l18, $l19, $l21, $l22, $l23, $l26, $l27;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label01;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r7;

     label01:
        l2 = staticinvoke <org.apache.commons.lang.time.DateUtils: long getMillisPerUnit(int)>(i1);

        l11 = 0L;

        lookupswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label02:
        $i7 = virtualinvoke r0.<java.util.Calendar: int get(int)>(6);

        $l8 = (long) $i7;

        $l9 = $l8 * 86400000L;

        $l10 = $l9 / l2;

        l11 = 0L + $l10;

        goto label04;

     label03:
        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        $l4 = (long) $i3;

        $l5 = $l4 * 86400000L;

        $l6 = $l5 / l2;

        l11 = 0L + $l6;

     label04:
        tableswitch(i0)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label10;
            case 10: goto label10;
            case 11: goto label06;
            case 12: goto label07;
            case 13: goto label08;
            case 14: goto label09;
            default: goto label10;
        };

     label05:
        $i12 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $l13 = (long) $i12;

        $l14 = $l13 * 3600000L;

        $l15 = $l14 / l2;

        l11 = l11 + $l15;

     label06:
        $i16 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $l17 = (long) $i16;

        $l18 = $l17 * 60000L;

        $l19 = $l18 / l2;

        l11 = l11 + $l19;

     label07:
        $i20 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $l21 = (long) $i20;

        $l22 = $l21 * 1000L;

        $l23 = $l22 / l2;

        l11 = l11 + $l23;

     label08:
        $i24 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        $i25 = $i24 * 1;

        $l26 = (long) $i25;

        $l27 = $l26 / l2;

        l11 = l11 + $l27;

        goto label11;

     label09:
        goto label11;

     label10:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The fragment ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not supported");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label11:
        return l11;
    }

    public static boolean truncatedEquals(java.util.Calendar, java.util.Calendar, int)
    {
        java.util.Calendar r0, r1;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.time.DateUtils: int truncatedCompareTo(java.util.Calendar,java.util.Calendar,int)>(r0, r1, i0);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean truncatedEquals(java.util.Date, java.util.Date, int)
    {
        java.util.Date r0, r1;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.time.DateUtils: int truncatedCompareTo(java.util.Date,java.util.Date,int)>(r0, r1, i0);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int truncatedCompareTo(java.util.Calendar, java.util.Calendar, int)
    {
        java.util.Calendar r0, r1, r2, r3;
        int i0, $i1;
        java.util.Date $r4, $r5;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        i0 := @parameter2: int;

        r2 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(r0, i0);

        r3 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(r1, i0);

        $r4 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $r5 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        $i1 = virtualinvoke $r4.<java.util.Date: int compareTo(java.util.Date)>($r5);

        return $i1;
    }

    public static int truncatedCompareTo(java.util.Date, java.util.Date, int)
    {
        java.util.Date r0, r1, r2, r3;
        int i0, $i1;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Date;

        i0 := @parameter2: int;

        r2 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(r0, i0);

        r3 = staticinvoke <org.apache.commons.lang.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(r1, i0);

        $i1 = virtualinvoke r2.<java.util.Date: int compareTo(java.util.Date)>(r3);

        return $i1;
    }

    private static long getMillisPerUnit(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        long l2;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label2;
            case 12: goto label3;
            case 13: goto label4;
            case 14: goto label5;
            default: goto label6;
        };

     label1:
        l2 = 86400000L;

        goto label7;

     label2:
        l2 = 3600000L;

        goto label7;

     label3:
        l2 = 60000L;

        goto label7;

     label4:
        l2 = 1000L;

        goto label7;

     label5:
        l2 = 1L;

        goto label7;

     label6:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The unit ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be represented is milleseconds");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label7:
        return l2;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r0;
        int[][] $r1;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        <org.apache.commons.lang.time.DateUtils: int MILLIS_IN_DAY> = 86400000;

        <org.apache.commons.lang.time.DateUtils: int MILLIS_IN_HOUR> = 3600000;

        <org.apache.commons.lang.time.DateUtils: int MILLIS_IN_MINUTE> = 60000;

        <org.apache.commons.lang.time.DateUtils: int MILLIS_IN_SECOND> = 1000;

        <org.apache.commons.lang.time.DateUtils: int MODIFY_CEILING> = 2;

        <org.apache.commons.lang.time.DateUtils: int MODIFY_ROUND> = 1;

        <org.apache.commons.lang.time.DateUtils: int MODIFY_TRUNCATE> = 0;

        <org.apache.commons.lang.time.DateUtils: int RANGE_MONTH_MONDAY> = 6;

        <org.apache.commons.lang.time.DateUtils: int RANGE_MONTH_SUNDAY> = 5;

        <org.apache.commons.lang.time.DateUtils: int RANGE_WEEK_CENTER> = 4;

        <org.apache.commons.lang.time.DateUtils: int RANGE_WEEK_RELATIVE> = 3;

        <org.apache.commons.lang.time.DateUtils: int RANGE_WEEK_MONDAY> = 2;

        <org.apache.commons.lang.time.DateUtils: int RANGE_WEEK_SUNDAY> = 1;

        <org.apache.commons.lang.time.DateUtils: int SEMI_MONTH> = 1001;

        <org.apache.commons.lang.time.DateUtils: long MILLIS_PER_DAY> = 86400000L;

        <org.apache.commons.lang.time.DateUtils: long MILLIS_PER_HOUR> = 3600000L;

        <org.apache.commons.lang.time.DateUtils: long MILLIS_PER_MINUTE> = 60000L;

        <org.apache.commons.lang.time.DateUtils: long MILLIS_PER_SECOND> = 1000L;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.commons.lang.time.DateUtils: java.util.TimeZone UTC_TIME_ZONE> = $r0;

        $r1 = newarray (int[])[8];

        $r2 = newarray (int)[1];

        $r2[0] = 14;

        $r1[0] = $r2;

        $r3 = newarray (int)[1];

        $r3[0] = 13;

        $r1[1] = $r3;

        $r4 = newarray (int)[1];

        $r4[0] = 12;

        $r1[2] = $r4;

        $r5 = newarray (int)[2];

        $r5[0] = 11;

        $r5[1] = 10;

        $r1[3] = $r5;

        $r6 = newarray (int)[3];

        $r6[0] = 5;

        $r6[1] = 5;

        $r6[2] = 9;

        $r1[4] = $r6;

        $r7 = newarray (int)[2];

        $r7[0] = 2;

        $r7[1] = 1001;

        $r1[5] = $r7;

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        $r1[6] = $r8;

        $r9 = newarray (int)[1];

        $r9[0] = 0;

        $r1[7] = $r9;

        <org.apache.commons.lang.time.DateUtils: int[][] fields> = $r1;

        return;
    }
}
