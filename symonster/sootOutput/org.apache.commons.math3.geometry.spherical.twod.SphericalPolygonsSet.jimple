public class org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
{
    private java.util.List loops;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>(d0);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, $r5, $r7;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r3;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r4;
        java.lang.Boolean $r6, $r8;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter1: double;

        $r2 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, d0);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane()>();

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r6);

        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r8);

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>($r4, $r5, $r7, null);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, d0);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, int, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;
        double d0, d1;
        int i0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        i0 := @parameter3: int;

        d1 := @parameter4: double;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.S2Point[] createRegularPolygonVertices(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,int)>(r1, r2, d0, i0);

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(double,org.apache.commons.math3.geometry.spherical.twod.S2Point[])>(d1, $r3);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, d0);

        return;
    }

    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        java.util.Collection r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, d0);

        return;
    }

    public transient void <init>(double, org.apache.commons.math3.geometry.spherical.twod.S2Point[])
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        double d0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point[];

        $r2 = staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double,org.apache.commons.math3.geometry.spherical.twod.S2Point[])>(d0, r1);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, d0);

        return;
    }

    private static org.apache.commons.math3.geometry.spherical.twod.S2Point[] createRegularPolygonVertices(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, int)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r1, $r6, $r8, $r12, $r13;
        double d0, $d1, $d2;
        int i0, $i1, i2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] r2;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r5, $r9;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r7, $r10, $r11;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[i0];

        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r6 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r0, r1);

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r6, d0);

        $r7 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r8 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r0);

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r8);

        r2[0] = $r7;

        $r9 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d1 = (double) i0;

        $d2 = 6.283185307179586 / $d1;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r0, $d2);

        i2 = 1;

     label1:
        if i2 >= i0 goto label2;

        $r10 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $i1 = i2 - 1;

        $r11 = r2[$i1];

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r13 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r12);

        specialinvoke $r10.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r13);

        r2[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double, org.apache.commons.math3.geometry.spherical.twod.S2Point[])
    {
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] r0;
        int i0, i1, $i2, i4, i5, i6;
        org.apache.commons.math3.geometry.spherical.twod.Vertex[] r1;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r2, r4, $r16, r21;
        java.util.ArrayList $r5;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6, $r18;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r7;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r8, $r10, $r12, $r14, $r15, $r17;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r9, $r11;
        byte $b3;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r13, r22;
        java.lang.Boolean $r19;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r18 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r19 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r19);

        return $r18;

     label1:
        r1 = newarray (org.apache.commons.math3.geometry.spherical.twod.Vertex)[i0];

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $r16 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r17 = r0[i4];

        specialinvoke $r16.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r17);

        r1[i4] = $r16;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i0);

        $i2 = i0 - 1;

        r21 = r1[$i2];

        i5 = 0;

     label4:
        if i5 >= i0 goto label9;

        r2 = r21;

        r21 = r1[i5];

        r22 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Circle sharedCircleWith(org.apache.commons.math3.geometry.spherical.twod.Vertex)>(r21);

        if r22 != null goto label5;

        $r13 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r14 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r15 = virtualinvoke r21.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        specialinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point,org.apache.commons.math3.geometry.spherical.twod.S2Point,double)>($r14, $r15, d0);

        r22 = $r13;

     label5:
        $r7 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r8 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r10 = virtualinvoke r21.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r9, $r11);

        specialinvoke $r7.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>(r2, r21, $d1, r22);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = lengthof r1;

        i6 = 0;

     label6:
        if i6 >= i1 goto label8;

        r4 = r1[i6];

        if r4 == r2 goto label7;

        if r4 == r21 goto label7;

        $r12 = virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $d2 = virtualinvoke r22.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getOffset(org.apache.commons.math3.geometry.Point)>($r12);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b3 = $d3 cmpg d0;

        if $b3 > 0 goto label7;

        virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r22);

     label7:
        i6 = i6 + 1;

        goto label6;

     label8:
        i5 = i5 + 1;

        goto label4;

     label9:
        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r6, $r5);

        return $r6;
    }

    private static void insertEdges(double, org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List)
    {
        double d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r7, $r9, $r11, $r12, $r16, r21;
        java.util.List r1;
        java.util.Iterator r3;
        org.apache.commons.math3.geometry.spherical.twod.Edge r4, r20;
        java.util.ArrayList $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r8, $r10, $r15, $r17;
        java.lang.Object $r13, $r18;
        org.apache.commons.math3.geometry.spherical.twod.Circle $r14, $r19;
        int $i0, $i1, i2;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter2: java.util.List;

        i2 = 0;

        r20 = null;

     label01:
        if r20 != null goto label02;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label02;

        $i1 = i2;

        i2 = i2 + 1;

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1);

        r20 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r18;

        $r19 = virtualinvoke r20.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        $z3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r19);

        if $z3 != 0 goto label01;

        r20 = null;

        goto label01;

     label02:
        if r20 != null goto label06;

        r21 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r21 == null goto label03;

        $r16 = virtualinvoke r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        if r0 != $r16 goto label04;

     label03:
        $r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r15);

        goto label05;

     label04:
        $r17 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r17);

     label05:
        return;

     label06:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r13;

        if r4 == r20 goto label08;

        $r14 = virtualinvoke r20.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()>();

        virtualinvoke r4.<org.apache.commons.math3.geometry.spherical.twod.Edge: void split(org.apache.commons.math3.geometry.spherical.twod.Circle,java.util.List,java.util.List)>($r14, $r5, $r6);

     label08:
        goto label07;

     label09:
        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        $r12 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r12, $r5);

        goto label11;

     label10:
        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r8);

     label11:
        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label12;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        staticinvoke <org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r11, $r6);

        goto label13;

     label12:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r10);

     label13:
        return;
    }

    public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }

    protected void computeGeometricalProperties() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r3, $r6;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer $r4;
        double $d0, $d1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r5, $r7, $r10;
        java.lang.Object $r8;
        java.lang.Boolean $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r3 != null goto label2;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r6 != null goto label1;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r9 = (java.lang.Boolean) $r8;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>(12.566370614359172);

        $r10 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        specialinvoke $r10.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(double,double)>(0.0, 0.0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r10);

        goto label3;

     label1:
        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>(0.0);

        $r7 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r7);

        goto label3;

     label2:
        $r4 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r4);

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: double getArea()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setSize(double)>($d1);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: org.apache.commons.math3.geometry.spherical.twod.S2Point getBarycenter()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r5);

     label3:
        return;
    }

    public java.util.List getBoundaryLoops() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r7;
        java.util.List r3, $r6, $r12, $r16, $r18, $r19;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r4, $r13, $r14;
        java.util.Iterator r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r8;
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder $r9;
        double $d0;
        java.util.ArrayList $r10;
        boolean $z0, $z2;
        java.lang.Object $r11, $r15;
        org.apache.commons.math3.geometry.spherical.twod.Edge r17;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r6 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        if $r6 != null goto label6;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r8 != null goto label1;

        $r16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops> = $r16;

        goto label6;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r9 = new org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r9);

        r3 = virtualinvoke $r9.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.List getEdges()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops> = $r10;

     label2:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r17 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r11;

        r4 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r12 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        if $r15 != r17 goto label4;

        interfaceinvoke r5.<java.util.Iterator: void remove()>();

        goto label5;

     label5:
        $r13 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        r17 = virtualinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        $r14 = virtualinvoke r17.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        if $r14 != r4 goto label3;

        goto label2;

     label6:
        $r18 = r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List loops>;

        $r19 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r18);

        return $r19;
    }

    public org.apache.commons.math3.geometry.enclosing.EnclosingBall getEnclosingCap()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r6, $r7, $r34, $r41;
        java.util.List r2, $r22, r57;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r3, $r12, $r16, $r18, $r32, $r39, $r46;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8;
        org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator $r8;
        org.apache.commons.math3.geometry.enclosing.WelzlEncloser $r9;
        org.apache.commons.math3.geometry.Point[] $r10;
        org.apache.commons.math3.geometry.Point $r11, $r15, $r28;
        byte $b0, $b3;
        int $i1, $i2, i4, i5;
        org.apache.commons.math3.geometry.enclosing.EnclosingBall $r13, $r19, $r25, $r37, $r44, $r49, $r52, r63, r65;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r14, $r17, $r21, $r24, $r26, $r29, $r31, $r38, $r45, $r47, $r51, $r54;
        org.apache.commons.math3.geometry.spherical.twod.S2Point[] $r20, $r27, $r40, $r48, $r50, $r53, r67;
        java.lang.Object $r23, $r30;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r33;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r35, $r42;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r36, $r43;
        org.apache.commons.math3.geometry.spherical.twod.Circle r55, r56;
        java.util.Iterator r58, r66;
        org.apache.commons.math3.geometry.spherical.twod.Vertex r59, r60;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D[] r64;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r52 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r54 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r53 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke $r52.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r54, #-Infinity, $r53);

        return $r52;

     label01:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull()>();

        if $z1 == 0 goto label02;

        $r49 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r51 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r50 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke $r49.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r51, #Infinity, $r50);

        return $r49;

     label02:
        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r6);

        if $z2 == 0 goto label03;

        $r41 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z7 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r41);

        if $z7 == 0 goto label03;

        $r42 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r43 = interfaceinvoke $r42.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r55 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r43;

        $r44 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r45 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r46 = virtualinvoke r55.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke $r45.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r46);

        $r47 = virtualinvoke $r45.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point negate()>();

        $r48 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke $r44.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r47, 1.5707963267948966, $r48);

        return $r44;

     label03:
        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r7);

        if $z3 == 0 goto label04;

        $r34 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z6 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r34);

        if $z6 == 0 goto label04;

        $r35 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r36 = interfaceinvoke $r35.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r56 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r36;

        $r37 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r38 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r39 = virtualinvoke r56.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()>();

        specialinvoke $r38.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r39);

        $r40 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke $r37.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r38, 1.5707963267948966, $r40);

        return $r37;

     label04:
        r57 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getInsidePoints()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getBoundaryLoops()>();

        r58 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z8 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label09;

        $r30 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (org.apache.commons.math3.geometry.spherical.twod.Vertex) $r30;

        i4 = 0;

        r60 = r59;

     label06:
        if i4 == 0 goto label07;

        if r60 == r59 goto label08;

     label07:
        i4 = i4 + 1;

        $r31 = virtualinvoke r60.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r32 = virtualinvoke $r31.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        interfaceinvoke r57.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r33 = virtualinvoke r60.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()>();

        r60 = virtualinvoke $r33.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        goto label06;

     label08:
        goto label05;

     label09:
        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator: void <init>()>();

        $r9 = new org.apache.commons.math3.geometry.enclosing.WelzlEncloser;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r9.<org.apache.commons.math3.geometry.enclosing.WelzlEncloser: void <init>(double,org.apache.commons.math3.geometry.enclosing.SupportBallGenerator)>($d2, $r8);

        r63 = virtualinvoke $r9.<org.apache.commons.math3.geometry.enclosing.WelzlEncloser: org.apache.commons.math3.geometry.enclosing.EnclosingBall enclose(java.lang.Iterable)>(r57);

        $r10 = virtualinvoke r63.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point[] getSupport()>();

        r64 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D[]) $r10;

        d0 = virtualinvoke r63.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: double getRadius()>();

        $r11 = virtualinvoke r63.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point getCenter()>();

        $r12 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r11;

        d1 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        $b0 = d1 cmpg $d3;

        if $b0 >= 0 goto label13;

        $r19 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r21 = <org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point PLUS_K>;

        $r20 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[0];

        specialinvoke $r19.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r21, #Infinity, $r20);

        r65 = $r19;

        $r22 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: java.util.List getOutsidePoints()>();

        r66 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r23 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r23;

        $r24 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        specialinvoke $r24.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r3);

        r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)>($r24);

        $d11 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: double getOffset()>();

        $d12 = 3.141592653589793 - $d11;

        $d13 = virtualinvoke r65.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: double getRadius()>();

        $b3 = $d12 cmpg $d13;

        if $b3 >= 0 goto label11;

        $r25 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r26 = virtualinvoke $r24.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.spherical.twod.S2Point negate()>();

        $d14 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: double getOffset()>();

        $d15 = 3.141592653589793 - $d14;

        $r27 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[1];

        $r28 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        $r29 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) $r28;

        $r27[0] = $r29;

        specialinvoke $r25.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r26, $d15, $r27);

        r65 = $r25;

     label11:
        goto label10;

     label12:
        return r65;

     label13:
        $i1 = lengthof r64;

        r67 = newarray (org.apache.commons.math3.geometry.spherical.twod.S2Point)[$i1];

        i5 = 0;

     label14:
        $i2 = lengthof r64;

        if i5 >= $i2 goto label15;

        $r17 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r18 = r64[i5];

        specialinvoke $r17.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r18);

        r67[i5] = $r17;

        i5 = i5 + 1;

        goto label14;

     label15:
        $r13 = new org.apache.commons.math3.geometry.enclosing.EnclosingBall;

        $r14 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r15 = virtualinvoke r63.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: org.apache.commons.math3.geometry.Point getCenter()>();

        $r16 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r15;

        specialinvoke $r14.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r16);

        $d4 = d1 * d1;

        $d6 = 1.0 + $d4;

        $d5 = d0 * d0;

        $d8 = $d6 - $d5;

        $d7 = 2.0 * d1;

        $d9 = $d8 / $d7;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d9);

        specialinvoke $r13.<org.apache.commons.math3.geometry.enclosing.EnclosingBall: void <init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])>($r14, $d10, r67);

        return $r13;
    }

    private java.util.List getInsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer $r2;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List getConvexCellsInsidePoints()>();

        return $r4;
    }

    private java.util.List getOutsidePoints()
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, r1;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r3;
        org.apache.commons.math3.geometry.partitioning.Region $r4;
        org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer $r5;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6;
        java.util.List $r7;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $r3 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region)>(r0);

        r1 = (org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet) $r4;

        $r5 = new org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: double getTolerance()>();

        specialinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: void <init>(double)>($d0);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r5);

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer: java.util.List getConvexCellsInsidePoints()>();

        return $r7;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }
}
