public abstract class org.apache.commons.math3.ode.MultistepIntegrator extends org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator
{
    protected double[] scaled;
    protected org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck;
    private org.apache.commons.math3.ode.FirstOrderIntegrator starter;
    private final int nSteps;
    private double exp;
    private double safety;
    private double minReduction;
    private double maxGrowth;

    protected void <init>(java.lang.String, int, int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        java.lang.String r1;
        int i0, i1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator $r2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        d3 := @parameter6: double;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double,double)>(r1, d0, d1, d2, d3);

        if i0 >= 2 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label1:
        $r2 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        specialinvoke $r2.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = $r2;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps> = i0;

        $d4 = (double) i1;

        $d5 = -1.0 / $d4;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp> = $d5;

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMinReduction(double)>(0.2);

        $d6 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d7 = neg $d6;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(2.0, $d7);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMaxGrowth(double)>($d8);

        return;
    }

    protected void <init>(java.lang.String, int, int, double, double, double[], double[])
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        java.lang.String r1;
        int i0, i1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        double[] r2, r3;
        org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator $r4;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r2 := @parameter5: double[];

        r3 := @parameter6: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double[],double[])>(r1, d0, d1, r2, r3);

        $r4 = new org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;

        specialinvoke $r4.<org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator: void <init>(double,double,double[],double[])>(d0, d1, r2, r3);

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = $r4;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps> = i0;

        $d2 = (double) i1;

        $d3 = -1.0 / $d2;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp> = $d3;

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMinReduction(double)>(0.2);

        $d4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d5 = neg $d4;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(2.0, $d5);

        virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void setMaxGrowth(double)>($d6);

        return;
    }

    public org.apache.commons.math3.ode.ODEIntegrator getStarterIntegrator()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderIntegrator $r1;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        return $r1;
    }

    public void setStarterIntegrator(org.apache.commons.math3.ode.FirstOrderIntegrator)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderIntegrator r1;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderIntegrator;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter> = r1;

        return;
    }

    protected void start(double, double[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0, d1;
        double[] r1, $r10;
        org.apache.commons.math3.ode.FirstOrderIntegrator $r3, $r4, $r6, $r7, $r9, $r11, $r12, $r17;
        org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.commons.math3.ode.MultistepIntegrator$1 $r8;
        org.apache.commons.math3.ode.AbstractIntegrator $r13;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r14;
        org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException $r15;
        org.apache.commons.math3.util.Incrementor $r16;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r3.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearEventHandlers()>();

        $r4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearStepHandlers()>();

        $r6 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r5 = new org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer;

        $i1 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: int nSteps>;

        $i0 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer: void <init>(org.apache.commons.math3.ode.MultistepIntegrator,int,int)>(r0, $i1, $i0);

        interfaceinvoke $r6.<org.apache.commons.math3.ode.FirstOrderIntegrator: void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)>($r5);

     label1:
        $r7 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $z0 = $r7 instanceof org.apache.commons.math3.ode.AbstractIntegrator;

        if $z0 == 0 goto label2;

        $r12 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r13 = (org.apache.commons.math3.ode.AbstractIntegrator) $r12;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        virtualinvoke $r13.<org.apache.commons.math3.ode.AbstractIntegrator: void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r14, d1);

        goto label3;

     label2:
        $r9 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $r8 = new org.apache.commons.math3.ode.MultistepIntegrator$1;

        specialinvoke $r8.<org.apache.commons.math3.ode.MultistepIntegrator$1: void <init>(org.apache.commons.math3.ode.MultistepIntegrator)>(r0);

        $i2 = lengthof r1;

        $r10 = newarray (double)[$i2];

        interfaceinvoke $r9.<org.apache.commons.math3.ode.FirstOrderIntegrator: double integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>($r8, d0, r1, d1, $r10);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = virtualinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.util.Incrementor getEvaluationsCounter()>();

        $r17 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        $i3 = interfaceinvoke $r17.<org.apache.commons.math3.ode.FirstOrderIntegrator: int getEvaluations()>();

        virtualinvoke $r16.<org.apache.commons.math3.util.Incrementor: void incrementCount(int)>($i3);

     label5:
        $r11 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: org.apache.commons.math3.ode.FirstOrderIntegrator starter>;

        interfaceinvoke $r11.<org.apache.commons.math3.ode.FirstOrderIntegrator: void clearStepHandlers()>();

        return;

        catch org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException from label1 to label3 with label4;
    }

    protected abstract org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][]);

    public double getMinReduction()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction>;

        return $d0;
    }

    public void setMinReduction(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction> = d0;

        return;
    }

    public double getMaxGrowth()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth>;

        return $d0;
    }

    public void setMaxGrowth(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth> = d0;

        return;
    }

    public double getSafety()
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        $d0 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety>;

        return $d0;
    }

    public void setSafety(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety> = d0;

        return;
    }

    protected double computeStepGrowShrinkFactor(double)
    {
        org.apache.commons.math3.ode.MultistepIntegrator r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.ode.MultistepIntegrator;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double maxGrowth>;

        $d3 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double minReduction>;

        $d4 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double safety>;

        $d1 = r0.<org.apache.commons.math3.ode.MultistepIntegrator: double exp>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d1);

        $d6 = $d4 * $d5;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d6);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d2, $d7);

        return $d8;
    }
}
