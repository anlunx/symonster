public class org.apache.commons.math3.stat.descriptive.rank.Median extends org.apache.commons.math3.stat.descriptive.rank.Percentile implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final double FIXED_QUANTILE_50;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double)>(50.0);

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.rank.Median) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Median;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile)>(r1);

        return;
    }

    private void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType, org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.util.KthSelector) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy r2;
        org.apache.commons.math3.util.KthSelector r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType;

        r2 := @parameter1: org.apache.commons.math3.stat.ranking.NaNStrategy;

        r3 := @parameter2: org.apache.commons.math3.util.KthSelector;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>(double,org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>(50.0, r1, r2, r3);

        return;
    }

    public org.apache.commons.math3.stat.descriptive.rank.Median withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;
        org.apache.commons.math3.util.KthSelector $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Median;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.util.KthSelector getKthSelector()>();

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Median: void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>(r1, $r3, $r4);

        return $r2;
    }

    public org.apache.commons.math3.stat.descriptive.rank.Median withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r3;
        org.apache.commons.math3.util.KthSelector $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Median;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.util.KthSelector getKthSelector()>();

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Median: void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($r3, r1, $r4);

        return $r2;
    }

    public org.apache.commons.math3.stat.descriptive.rank.Median withKthSelector(org.apache.commons.math3.util.KthSelector)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.util.KthSelector r1;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType $r3;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.util.KthSelector;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Median;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy()>();

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Median: void <init>(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType,org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.util.KthSelector)>($r3, $r4, r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withKthSelector(org.apache.commons.math3.util.KthSelector)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.util.KthSelector r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.util.KthSelector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.descriptive.rank.Median withKthSelector(org.apache.commons.math3.util.KthSelector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.descriptive.rank.Median withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType)
    {
        org.apache.commons.math3.stat.descriptive.rank.Median r0, $r2;
        org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Median;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Median: org.apache.commons.math3.stat.descriptive.rank.Median withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.rank.Median: double FIXED_QUANTILE_50> = 50.0;

        <org.apache.commons.math3.stat.descriptive.rank.Median: long serialVersionUID> = -3961477041290915687L;

        return;
    }
}
