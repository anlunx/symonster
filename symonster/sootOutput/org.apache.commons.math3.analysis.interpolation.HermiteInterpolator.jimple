public class org.apache.commons.math3.analysis.interpolation.HermiteInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction
{
    private final java.util.List abscissae;
    private final java.util.List topDiagonal;
    private final java.util.List bottomDiagonal;

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal> = $r3;

        return;
    }

    public transient void addSamplePoint(double, double[][]) throws org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        double[][] r1;
        double[] r2, r3, $r4, r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, i9, i10, i11, i12, i13;
        java.lang.Object $r5, $r9, $r13, $r15;
        java.util.List $r6, $r7, $r8, $r10, $r12, $r14;
        java.lang.Double $r11, $r16, $r20;
        boolean $z2;
        org.apache.commons.math3.exception.ZeroException $r17;
        java.lang.Object[] $r18;
        org.apache.commons.math3.exception.util.LocalizedFormats $r19;
        long $l7;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[][];

        i9 = 0;

     label1:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label9;

        $r4 = r1[i9];

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r5;

        if i9 <= 1 goto label3;

        $l7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i9);

        $d8 = (double) $l7;

        d11 = 1.0 / $d8;

        i10 = 0;

     label2:
        $i8 = lengthof r2;

        if i10 >= $i8 goto label3;

        $d9 = r2[i10];

        $d10 = $d9 * d11;

        r2[i10] = $d10;

        i10 = i10 + 1;

        goto label2;

     label3:
        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        i11 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal>;

        $i1 = i11 - i9;

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>($i1, r2);

        r21 = r2;

        i12 = i9;

     label4:
        if i12 >= i11 goto label8;

        $r12 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List bottomDiagonal>;

        $i2 = i12 + 1;

        $i3 = i11 - $i2;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i3);

        r3 = (double[]) $r13;

        $r14 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $i4 = i12 + 1;

        $i5 = i11 - $i4;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i5);

        $r16 = (java.lang.Double) $r15;

        $d2 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $d3 = d0 - $d2;

        d1 = 1.0 / $d3;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z2 == 0 goto label5;

        $r17 = new org.apache.commons.math3.exception.ZeroException;

        $r19 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DUPLICATED_ABSCISSA_DIVISION_BY_ZERO>;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r18[0] = $r20;

        specialinvoke $r17.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r19, $r18);

        throw $r17;

     label5:
        i13 = 0;

     label6:
        $i6 = lengthof r2;

        if i13 >= $i6 goto label7;

        $d5 = r21[i13];

        $d4 = r3[i13];

        $d6 = $d5 - $d4;

        $d7 = d1 * $d6;

        r3[i13] = $d7;

        i13 = i13 + 1;

        goto label6;

     label7:
        r21 = r3;

        i12 = i12 + 1;

        goto label4;

     label8:
        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r9 = virtualinvoke r21.<java.lang.Object: java.lang.Object clone()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        i9 = i9 + 1;

        goto label1;

     label9:
        return;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials() throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r1, $r16, $r18, $r19, $r20, $r21, r22;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r2;
        double[] r3, $r4, $r7, $r8, $r12, $r17;
        java.util.List $r5, $r9, $r10, $r13;
        java.lang.Object $r6, $r11, $r14;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.Double $r15;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r4 = newarray (double)[1];

        $r4[0] = 0.0;

        r1 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r4);

        $r5 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (double[]) $r6;

        $i0 = lengthof $r7;

        r2 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r2;

        if i4 >= $i1 goto label2;

        r2[i4] = r1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = newarray (double)[1];

        $r8[0] = 1.0;

        r22 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r8);

        i5 = 0;

     label3:
        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i5 >= $i2 goto label6;

        $r10 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i5);

        r3 = (double[]) $r11;

        i6 = 0;

     label4:
        $i3 = lengthof r2;

        if i6 >= $i3 goto label5;

        $r18 = r2[i6];

        $r17 = newarray (double)[1];

        $d2 = r3[i6];

        $r17[0] = $d2;

        $r19 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r17);

        $r20 = virtualinvoke r22.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r19);

        $r21 = virtualinvoke $r18.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r20);

        r2[i6] = $r21;

        i6 = i6 + 1;

        goto label4;

     label5:
        $r12 = newarray (double)[2];

        $r13 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i5);

        $r15 = (java.lang.Double) $r14;

        $d0 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d1 = neg $d0;

        $r12[0] = $d1;

        $r12[1] = 1.0;

        $r16 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])>($r12);

        r22 = virtualinvoke r22.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction)>($r16);

        i5 = i5 + 1;

        goto label3;

     label6:
        return r2;
    }

    public double[] value(double) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        double[] r1, r2, $r5;
        java.util.List $r3, $r6, $r7, $r9;
        java.lang.Object $r4, $r8, $r10;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Double $r11;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (double[]) $r4;

        $i0 = lengthof $r5;

        r1 = newarray (double)[$i0];

        d6 = 1.0;

        i3 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (double[]) $r8;

        i4 = 0;

     label2:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label3;

        $d4 = r1[i4];

        $d2 = r2[i4];

        $d3 = $d2 * d6;

        $d5 = $d4 + $d3;

        r1[i4] = $d5;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

        $r11 = (java.lang.Double) $r10;

        $d1 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        d7 = d0 - $d1;

        d6 = d6 * d7;

        i3 = i3 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r17, $r18, $r19, r20, r21;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        double[] r3, $r6;
        java.util.List $r4, $r11, $r12, $r14;
        java.lang.Object $r5, $r8, $r10, $r13, $r15;
        int $i0, $i1, $i2, i3, i4;
        org.apache.commons.math3.Field $r7, $r9;
        java.lang.Double $r16;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: void checkInterpolation()>();

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (double[]) $r5;

        $i0 = lengthof $r6;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i0];

        $r7 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r2, $r8);

        $r9 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r20 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) $r10;

        i3 = 0;

     label1:
        $r11 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r12 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List topDiagonal>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (double[]) $r13;

        i4 = 0;

     label2:
        $i2 = lengthof r2;

        if i4 >= $i2 goto label3;

        $r17 = r2[i4];

        $d1 = r3[i4];

        $r18 = virtualinvoke r20.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d1);

        $r19 = virtualinvoke $r17.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r18);

        r2[i4] = $r19;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r14 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i3);

        $r16 = (java.lang.Double) $r15;

        $d0 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        r21 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>($d0);

        r20 = virtualinvoke r20.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r21);

        i3 = i3 + 1;

        goto label1;

     label4:
        return r2;
    }

    private void checkInterpolation() throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        java.util.List $r1;
        boolean $z0;
        org.apache.commons.math3.exception.NoDataException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.HermiteInterpolator: java.util.List abscissae>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NoDataException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_INTERPOLATION_SAMPLE>;

        specialinvoke $r2.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        return;
    }

    private transient org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[])
    {
        org.apache.commons.math3.analysis.interpolation.HermiteInterpolator r0;
        double[] r1;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.HermiteInterpolator;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r1);

        return $r2;
    }
}
