public class com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty extends java.lang.Object
{
    private static final int MAX_ATTEMPTS;
    private static final com.opengamma.analytics.math.linearalgebra.Decomposition DEFAULT_DECOMP;
    private static final com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA;
    private static final double EPS;
    public static final com.opengamma.analytics.math.function.Function1D UNCONSTRAINED;
    private final double _eps;
    private final com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition;
    private final com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra;

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r1;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        $r2 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition DEFAULT_DECOMP>;

        $r1 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>($r2, $r1, 1.0E-8);

        return;
    }

    public void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.linearalgebra.Decomposition r1;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.linearalgebra.Decomposition;

        $r2 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>(r1, $r2, 1.0E-8);

        return;
    }

    public void <init>(double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        double d0;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r1;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        d0 := @parameter0: double;

        $r2 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition DEFAULT_DECOMP>;

        $r1 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>($r2, $r1, d0);

        return;
    }

    public void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition, double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.linearalgebra.Decomposition r1;
        double d0;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.linearalgebra.Decomposition;

        d0 := @parameter1: double;

        $r2 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>(r1, $r2, d0);

        return;
    }

    public void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition, com.opengamma.analytics.math.matrix.MatrixAlgebra, double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.linearalgebra.Decomposition r1;
        com.opengamma.analytics.math.matrix.MatrixAlgebra r2;
        double d0;
        byte $b0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.linearalgebra.Decomposition;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "decomposition");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "algebra");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "must have positive eps");

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition> = r1;

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra> = r2;

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double _eps> = d0;

        return;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r3, $r7;
        com.opengamma.analytics.math.function.Function1D r2, $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        int i0;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r9;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r6 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r6.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int,double)>(i0, 1.0);

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r2);

        $r9 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r1, $r7, r2, $r8, r3, r4);

        return $r9;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4;
        com.opengamma.analytics.math.function.Function1D r3, $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r5;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r7;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r9;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r7 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r7.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r3);

        $r9 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r1, r2, r3, $r8, r4, r5);

        return $r9;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4;
        com.opengamma.analytics.math.function.Function1D r3, r6, $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r5;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r8;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r6 := @parameter5: com.opengamma.analytics.math.function.Function1D;

        $r8 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r8.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r3);

        $r10 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.function.Function1D)>(r1, r2, r3, $r9, r4, r5, r6);

        return $r10;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5;
        com.opengamma.analytics.math.function.Function1D r3, r4, $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.Function1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r7 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED>;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.function.Function1D)>(r1, r2, r3, r4, r5, r6, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5, r9, r10, r35, r36, r38, r39, r40, r43, r46, r47;
        com.opengamma.analytics.math.function.Function1D r3, r4, r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r6, r8, r11, r37, $r44;
        int i0, $i1, i6;
        java.lang.Object $r12, $r21, $r24, $r32;
        java.lang.Boolean $r13, $r25;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r14;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r15, $r17, $r22, $r26, $r28;
        com.opengamma.analytics.math.matrix.Matrix $r16, $r18, $r23, $r27, $r29;
        com.opengamma.analytics.math.MathException $r19, $r34;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r20, $r31;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8, d9, d10, d11, d12;
        byte $b2, $b3, $b4, $b5;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r30;
        java.lang.Exception $r33;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r41;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.Function1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r7 := @parameter6: com.opengamma.analytics.math.function.Function1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "observedValues");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, " sigma");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, " func");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, " jac");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "startPos");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if i0 != $i1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "observedValues and sigma must be same length");

        $r12 = virtualinvoke r7.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r5);

        $r13 = (java.lang.Boolean) $r12;

        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "The start position {} is not valid for this model. Please choose a valid start position", $r14);

        r35 = r5;

        d6 = 0.0;

        r36 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r5);

        r37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r4, r2, r5);

        d7 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r36);

        d8 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double getANorm(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r6, r5);

        d9 = d7 + d8;

        r38 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r36, r37);

        $r15 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r6, r5);

        r39 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r16;

        $r17 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix subtract(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r38, r39);

        r40 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r18;

        i6 = 0;

     label03:
        if i6 >= 100000 goto label15;

        r8 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r37, d6, r6);

     label04:
        $r20 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r8);

        r41 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r21;

        r10 = interfaceinvoke r41.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r40);

     label05:
        goto label07;

     label06:
        $r33 := @caughtexception;

        $r34 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r34.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r33);

        throw $r34;

     label07:
        $r22 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r35, r10);

        r43 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r23;

        $r24 = virtualinvoke r7.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r43);

        $r25 = (java.lang.Boolean) $r24;

        $z1 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label08;

        d6 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double increaseLambda(double)>(d6);

        goto label14;

     label08:
        r9 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r43);

        d10 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double getANorm(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r6, r43);

        d11 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r9);

        d12 = d11 + d10;

        $d0 = d12 - d9;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = 1.0 + d9;

        $d4 = $d1 / $d2;

        $d3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double _eps>;

        $b2 = $d4 cmpg $d3;

        if $b2 >= 0 goto label12;

        $b4 = d6 cmpl 0.0;

        if $b4 != 0 goto label09;

        $r44 = r8;

        goto label10;

     label09:
        $r44 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r37, 0.0, r6);

     label10:
        r11 = $r44;

        $b5 = d6 cmpl 0.0;

        if $b5 <= 0 goto label11;

        $r31 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>($r44);

        r41 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r32;

     label11:
        $d5 = d12 - d10;

        $r30 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.linearalgebra.DecompositionResult,double,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r11, r41, $d5, d10, r37, r43, r2);

        return $r30;

     label12:
        $b3 = d12 cmpg d9;

        if $b3 >= 0 goto label13;

        d6 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double decreaseLambda(double)>(d6);

        r35 = r43;

        r37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r4, r2, r43);

        r46 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r9, r37);

        $r26 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r6, r43);

        r47 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r27;

        $r28 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix subtract(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r46, r47);

        r40 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r29;

        d9 = d12;

        goto label14;

     label13:
        d6 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double increaseLambda(double)>(d6);

     label14:
        i6 = i6 + 1;

        goto label03;

     label15:
        $r19 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r19.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Could not converge in 100000 attempts");

        throw $r19;

        catch java.lang.Exception from label04 to label05 with label06;
    }

    private double decreaseLambda(double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        double d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        d0 := @parameter0: double;

        $d1 = d0 / 10.0;

        return $d1;
    }

    private double increaseLambda(double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        double d0, $d1;
        byte $b0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.1;

     label1:
        $d1 = d0 * 10.0;

        return $d1;
    }

    private com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.linearalgebra.DecompositionResult, double, double, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r3, r6, r7, r8, $r9;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r2;
        double d0, d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        int $i0;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults $r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.linearalgebra.DecompositionResult;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r3 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r4 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 := @parameter6: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r9 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>($i0);

        r6 = interfaceinvoke r2.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r9);

        r7 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.DoubleMatrix2D getBTranspose(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r5);

        r8 = interfaceinvoke r2.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r7);

        $r10 = new com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults;

        specialinvoke $r10.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults: void <init>(double,double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(d0, d1, r4, r6, r8);

        return $r10;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3, r4, r5, $r15;
        int i0, $i1, $i2, i3;
        double[] r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        int[] $r16, $r18, $r20;
        java.lang.Double $r17, $r19, $r21;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r4);

        r5 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r7;

        $i1 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of data points different between model (");

        $i2 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and observed (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, $r14);

        r6 = newarray (double)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r16 = newarray (int)[1];

        $r16[0] = i3;

        $r17 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r16);

        $d0 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $r18 = newarray (int)[1];

        $r18[0] = i3;

        $r19 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r18);

        $d1 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 - $d1;

        $r20 = newarray (int)[1];

        $r20[0] = i3;

        $r21 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r20);

        $d3 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 / $d3;

        r6[i3] = $d4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        return $r15;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getBTranspose(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2;
        int i0, i1, i2, i3;
        double[][] r4, r5;
        double d0, $d1, $d2, $d3;
        int[] $r7;
        java.lang.Double $r8;
        double[] $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i1, i0);

        r4 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = newarray (int)[1];

        $r7[0] = i2;

        $r8 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        d0 = 1.0 / $d1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r10 = r4[i3];

        $r9 = r5[i2];

        $d2 = $r9[i3];

        $d3 = $d2 * d0;

        $r10[i2] = $d3;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r6;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        double[][] r5;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, $d1, $d2, $d3;
        java.lang.Object $r6;
        int[] $r7;
        java.lang.Double $r8;
        double[] $r9;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r3);

        r4 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r6;

        r5 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i2 != i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Jacobian is wrong size");

        $i3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i3 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Jacobian is wrong size");

        i4 = 0;

     label5:
        if i4 >= i0 goto label8;

        $r7 = newarray (int)[1];

        $r7[0] = i4;

        $r8 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        d0 = 1.0 / $d1;

        i5 = 0;

     label6:
        if i5 >= i1 goto label7;

        $r9 = r5[i4];

        $d2 = $r9[i5];

        $d3 = $d2 * d0;

        $r9[i5] = $d3;

        i5 = i5 + 1;

        goto label6;

     label7:
        i4 = i4 + 1;

        goto label5;

     label8:
        return r4;
    }

    private double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $d0 = virtualinvoke $r2.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r1);

        return $d0;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r3;
        com.opengamma.analytics.math.matrix.Matrix $r4;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r2);

        $r5 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r4;

        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D, double, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r2, r3, $r7;
        double d0, d1, $d2, $d3;
        int i0, i1;
        double[][] r4;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r5, $r6;
        com.opengamma.analytics.math.matrix.Matrix $r8;
        double[] $r9;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        d1 = 1.0 + d0;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r6 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        $r5 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA>;

        $r7 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D matrixTransposeMultiplyMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r1);

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r7, r2);

        r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r8;

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r9 = r4[i1];

        $d2 = $r9[i1];

        $d3 = $d2 * d1;

        $r9[i1] = $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double getANorm(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2;
        double[][] r3;
        double[] r4, $r5;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r4;

        d5 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r5 = r3[i1];

        $d1 = $r5[i2];

        $d0 = r4[i1];

        $d3 = $d1 * $d0;

        $d2 = r4[i2];

        $d4 = $d3 * $d2;

        d5 = d5 + $d4;

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return d5;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.linearalgebra.Decomposition $r0;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r1;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty$1 $r2;

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: double EPS> = 1.0E-8;

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: int MAX_ATTEMPTS> = 100000;

        $r0 = <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition SV_COLT>;

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.linearalgebra.Decomposition DEFAULT_DECOMP> = $r0;

        $r1 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r1.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.matrix.OGMatrixAlgebra MA> = $r1;

        $r2 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty$1;

        specialinvoke $r2.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty$1: void <init>()>();

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquareWithPenalty: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED> = $r2;

        return;
    }
}
