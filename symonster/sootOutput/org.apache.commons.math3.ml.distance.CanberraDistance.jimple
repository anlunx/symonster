public class org.apache.commons.math3.ml.distance.CanberraDistance extends java.lang.Object implements org.apache.commons.math3.ml.distance.DistanceMeasure
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.math3.ml.distance.CanberraDistance r0;

        r0 := @this: org.apache.commons.math3.ml.distance.CanberraDistance;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double compute(double[], double[])
    {
        org.apache.commons.math3.ml.distance.CanberraDistance r0;
        double[] r1, r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, $d10, $d11;
        int $i0, i3;
        byte $b1, $b2;

        r0 := @this: org.apache.commons.math3.ml.distance.CanberraDistance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d9 = 0.0;

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label4;

        $d3 = r1[i3];

        $d2 = r2[i3];

        $d4 = $d3 - $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d5 = r1[i3];

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $d7 = r2[i3];

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        d1 = $d6 + $d8;

        $d10 = d9;

        $b1 = d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label2;

        $d11 = 0.0;

        goto label3;

     label2:
        $d11 = d0 / d1;

     label3:
        d9 = $d10 + $d11;

        i3 = i3 + 1;

        goto label1;

     label4:
        return d9;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.distance.CanberraDistance: long serialVersionUID> = -6972277381587032228L;

        return;
    }
}
