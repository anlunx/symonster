public class org.apache.commons.math.geometry.Vector3D extends java.lang.Object implements java.io.Serializable
{
    public static final org.apache.commons.math.geometry.Vector3D ZERO;
    public static final org.apache.commons.math.geometry.Vector3D PLUS_I;
    public static final org.apache.commons.math.geometry.Vector3D MINUS_I;
    public static final org.apache.commons.math.geometry.Vector3D PLUS_J;
    public static final org.apache.commons.math.geometry.Vector3D MINUS_J;
    public static final org.apache.commons.math.geometry.Vector3D PLUS_K;
    public static final org.apache.commons.math.geometry.Vector3D MINUS_K;
    public static final org.apache.commons.math.geometry.Vector3D NaN;
    public static final org.apache.commons.math.geometry.Vector3D POSITIVE_INFINITY;
    public static final org.apache.commons.math.geometry.Vector3D NEGATIVE_INFINITY;
    private static final org.apache.commons.math.geometry.Vector3DFormat DEFAULT_FORMAT;
    private static final long serialVersionUID;
    private final double x;
    private final double y;
    private final double z;

    public void <init>(double, double, double)
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = d0;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = d1;

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = d2;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>(d1);

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>(d0);

        $d4 = $d3 * d2;

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = $d4;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>(d0);

        $d6 = $d5 * d2;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = $d6;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>(d1);

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = $d7;

        return;
    }

    public void <init>(double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d2 = d0 * $d1;

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = $d2;

        $d3 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = d0 * $d3;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = $d4;

        $d5 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = d0 * $d5;

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = $d6;

        return;
    }

    public void <init>(double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = d0 * $d2;

        $d3 = r2.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d4 = d1 * $d3;

        $d6 = $d5 + $d4;

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = $d6;

        $d7 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d10 = d0 * $d7;

        $d8 = r2.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d9 = d1 * $d8;

        $d11 = $d10 + $d9;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = $d11;

        $d12 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d15 = d0 * $d12;

        $d13 = r2.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d14 = d1 * $d13;

        $d16 = $d15 + $d14;

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = $d16;

        return;
    }

    public void <init>(double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math.geometry.Vector3D;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d3 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d6 = d0 * $d3;

        $d4 = r2.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = d1 * $d4;

        $d9 = $d6 + $d5;

        $d7 = r3.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d8 = d2 * $d7;

        $d10 = $d9 + $d8;

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = $d10;

        $d11 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d14 = d0 * $d11;

        $d12 = r2.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d13 = d1 * $d12;

        $d17 = $d14 + $d13;

        $d15 = r3.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d16 = d2 * $d15;

        $d18 = $d17 + $d16;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = $d18;

        $d19 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d22 = d0 * $d19;

        $d20 = r2.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d21 = d1 * $d20;

        $d25 = $d22 + $d21;

        $d23 = r3.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d24 = d2 * $d23;

        $d26 = $d25 + $d24;

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = $d26;

        return;
    }

    public void <init>(double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D, double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, r2, r3, r4;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math.geometry.Vector3D;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math.geometry.Vector3D;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math.geometry.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d7 = d0 * $d4;

        $d5 = r2.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d6 = d1 * $d5;

        $d10 = $d7 + $d6;

        $d8 = r3.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d9 = d2 * $d8;

        $d13 = $d10 + $d9;

        $d11 = r4.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d12 = d3 * $d11;

        $d14 = $d13 + $d12;

        r0.<org.apache.commons.math.geometry.Vector3D: double x> = $d14;

        $d15 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d18 = d0 * $d15;

        $d16 = r2.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d17 = d1 * $d16;

        $d21 = $d18 + $d17;

        $d19 = r3.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d20 = d2 * $d19;

        $d24 = $d21 + $d20;

        $d22 = r4.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d23 = d3 * $d22;

        $d25 = $d24 + $d23;

        r0.<org.apache.commons.math.geometry.Vector3D: double y> = $d25;

        $d26 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d29 = d0 * $d26;

        $d27 = r2.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d28 = d1 * $d27;

        $d32 = $d29 + $d28;

        $d30 = r3.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d31 = d2 * $d30;

        $d35 = $d32 + $d31;

        $d33 = r4.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d34 = d3 * $d33;

        $d36 = $d35 + $d34;

        r0.<org.apache.commons.math.geometry.Vector3D: double z> = $d36;

        return;
    }

    public double getX()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        return $d0;
    }

    public double getY()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        return $d0;
    }

    public double getZ()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        return $d0;
    }

    public double getNorm1()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        $d5 = $d1 + $d3;

        $d4 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $d7 = $d5 + $d6;

        return $d7;
    }

    public double getNorm()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d10);

        return $d11;
    }

    public double getNormSq()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        return $d10;
    }

    public double getNormInf()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d1, $d3);

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d5);

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d4, $d6);

        return $d7;
    }

    public double getAlpha()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double atan2(double,double)>($d1, $d0);

        return $d2;
    }

    public double getDelta()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d1 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d2);

        return $d3;
    }

    public org.apache.commons.math.geometry.Vector3D add(org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d8 = $d1 + $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d7 = $d3 + $d2;

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = $d5 + $d4;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d8, $d7, $d6);

        return $r2;
    }

    public org.apache.commons.math.geometry.Vector3D add(double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, $r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d1 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d2 = d0 * $d1;

        $d12 = $d3 + $d2;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d5 = d0 * $d4;

        $d11 = $d6 + $d5;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d7 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d8 = d0 * $d7;

        $d10 = $d9 + $d8;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d12, $d11, $d10);

        return $r2;
    }

    public org.apache.commons.math.geometry.Vector3D subtract(org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d8 = $d1 - $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d7 = $d3 - $d2;

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = $d5 - $d4;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d8, $d7, $d6);

        return $r2;
    }

    public org.apache.commons.math.geometry.Vector3D subtract(double, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, $r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d1 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d2 = d0 * $d1;

        $d12 = $d3 - $d2;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d5 = d0 * $d4;

        $d11 = $d6 - $d5;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d7 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d8 = d0 * $d7;

        $d10 = $d9 - $d8;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d12, $d11, $d10);

        return $r2;
    }

    public org.apache.commons.math.geometry.Vector3D normalize()
    {
        org.apache.commons.math.geometry.Vector3D r0, $r1;
        double d0, $d1;
        byte $b0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label1:
        $d1 = 1.0 / d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D scalarMultiply(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math.geometry.Vector3D orthogonal()
    {
        org.apache.commons.math.geometry.Vector3D r0, $r1, $r2, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, d47, d48, d49;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;
        java.lang.ArithmeticException $r6;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d1 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        d0 = 0.6 * $d1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM>;

        $r4 = newarray (java.lang.Object)[0];

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r6;

     label1:
        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d2 = neg d0;

        $b1 = $d3 cmpl $d2;

        if $b1 < 0 goto label2;

        $d33 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $b4 = $d33 cmpg d0;

        if $b4 > 0 goto label2;

        $d35 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d34 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d39 = $d35 * $d34;

        $d37 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d36 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d38 = $d37 * $d36;

        $d40 = $d39 + $d38;

        $d41 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d40);

        d47 = 1.0 / $d41;

        $r3 = new org.apache.commons.math.geometry.Vector3D;

        $d42 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d46 = d47 * $d42;

        $d44 = neg d47;

        $d43 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d45 = $d44 * $d43;

        specialinvoke $r3.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, $d46, $d45);

        return $r3;

     label2:
        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = neg d0;

        $b2 = $d5 cmpl $d4;

        if $b2 < 0 goto label3;

        $d19 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $b3 = $d19 cmpg d0;

        if $b3 > 0 goto label3;

        $d21 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d20 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d25 = $d21 * $d20;

        $d23 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d22 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d24 = $d23 * $d22;

        $d26 = $d25 + $d24;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d26);

        d48 = 1.0 / $d27;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d29 = neg d48;

        $d28 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d32 = $d29 * $d28;

        $d30 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d31 = d48 * $d30;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d32, 0.0, $d31);

        return $r2;

     label3:
        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d11 = $d7 * $d6;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d8 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d10 = $d9 * $d8;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d12);

        d49 = 1.0 / $d13;

        $r1 = new org.apache.commons.math.geometry.Vector3D;

        $d14 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d18 = d49 * $d14;

        $d16 = neg d49;

        $d15 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d17 = $d16 * $d15;

        specialinvoke $r1.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d18, $d17, 0.0);

        return $r1;
    }

    public static double angle(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.ArithmeticException $r5;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d3 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        d0 = $d3 * $d4;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r5;

     label1:
        d1 = staticinvoke <org.apache.commons.math.geometry.Vector3D: double dotProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r0, r1);

        d2 = d0 * 0.9999;

        $d5 = neg d2;

        $b1 = d1 cmpg $d5;

        if $b1 < 0 goto label2;

        $b3 = d1 cmpl d2;

        if $b3 <= 0 goto label4;

     label2:
        r2 = staticinvoke <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D crossProduct(org.apache.commons.math.geometry.Vector3D,org.apache.commons.math.geometry.Vector3D)>(r0, r1);

        $b2 = d1 cmpl 0.0;

        if $b2 < 0 goto label3;

        $d10 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $d11 = $d10 / d0;

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d11);

        return $d12;

     label3:
        $d6 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: double getNorm()>();

        $d7 = $d6 / d0;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d7);

        $d9 = 3.141592653589793 - $d8;

        return $d9;

     label4:
        $d13 = d1 / d0;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d13);

        return $d14;
    }

    public org.apache.commons.math.geometry.Vector3D negate()
    {
        org.apache.commons.math.geometry.Vector3D r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $r1 = new org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = neg $d0;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = neg $d1;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d3 = neg $d2;

        specialinvoke $r1.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d5, $d4, $d3);

        return $r1;
    }

    public org.apache.commons.math.geometry.Vector3D scalarMultiply(double)
    {
        org.apache.commons.math.geometry.Vector3D r0, $r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d6 = d0 * $d1;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d5 = d0 * $d2;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d4 = d0 * $d3;

        specialinvoke $r1.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d6, $d5, $d4);

        return $r1;
    }

    public boolean isNaN()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        double $d0, $d1, $d2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 != 0 goto label1;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $z0 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 != 0 goto label1;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z2 != 0 goto label1;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.geometry.Vector3D r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.geometry.Vector3D;

        if $z0 == 0 goto label5;

        r2 = (org.apache.commons.math.geometry.Vector3D) r1;

        $z1 = virtualinvoke r2.<org.apache.commons.math.geometry.Vector3D: boolean isNaN()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: boolean isNaN()>();

        return $z2;

     label2:
        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r2.<org.apache.commons.math.geometry.Vector3D: double x>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r2.<org.apache.commons.math.geometry.Vector3D: double y>;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label3;

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d4 = r2.<org.apache.commons.math.geometry.Vector3D: double z>;

        $b2 = $d5 cmpl $d4;

        if $b2 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        boolean $z0;
        double $d0, $d1, $d2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $z0 = virtualinvoke r0.<org.apache.commons.math.geometry.Vector3D: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 8;

     label1:
        $d0 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d0);

        $i1 = 23 * $i0;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $i2 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d1);

        $i3 = 19 * $i2;

        $i4 = $i1 + $i3;

        $d2 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $i5 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d2);

        $i6 = $i4 + $i5;

        $i7 = 31 * $i6;

        return $i7;
    }

    public static double dotProduct(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d0 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d2 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        return $d10;
    }

    public static org.apache.commons.math.geometry.Vector3D crossProduct(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        $d1 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d0 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d2 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d4 = $d3 * $d2;

        $d20 = $d5 - $d4;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d6 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d11 = $d7 * $d6;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d8 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d10 = $d9 * $d8;

        $d19 = $d11 - $d10;

        $d13 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d12 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d17 = $d13 * $d12;

        $d15 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d14 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d16 = $d15 * $d14;

        $d18 = $d17 - $d16;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>($d20, $d19, $d18);

        return $r2;
    }

    public static double distance1(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = $d4 - $d3;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d5);

        $d7 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d8 = $d7 - $d6;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d8);

        $d10 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d11 = $d10 - $d9;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d11);

        $d12 = d0 + d1;

        $d13 = $d12 + d2;

        return $d13;
    }

    public static double distance(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        d0 = $d4 - $d3;

        $d6 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        d1 = $d6 - $d5;

        $d8 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        d2 = $d8 - $d7;

        $d10 = d0 * d0;

        $d9 = d1 * d1;

        $d12 = $d10 + $d9;

        $d11 = d2 * d2;

        $d13 = $d12 + $d11;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d13);

        return $d14;
    }

    public static double distanceInf(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d5 = $d4 - $d3;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d5);

        $d7 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d6 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d8 = $d7 - $d6;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d8);

        $d10 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d9 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d11 = $d10 - $d9;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d11);

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d0, d1);

        $d13 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d12, d2);

        return $d13;
    }

    public static double distanceSq(org.apache.commons.math.geometry.Vector3D, org.apache.commons.math.geometry.Vector3D)
    {
        org.apache.commons.math.geometry.Vector3D r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @parameter0: org.apache.commons.math.geometry.Vector3D;

        r1 := @parameter1: org.apache.commons.math.geometry.Vector3D;

        $d4 = r1.<org.apache.commons.math.geometry.Vector3D: double x>;

        $d3 = r0.<org.apache.commons.math.geometry.Vector3D: double x>;

        d0 = $d4 - $d3;

        $d6 = r1.<org.apache.commons.math.geometry.Vector3D: double y>;

        $d5 = r0.<org.apache.commons.math.geometry.Vector3D: double y>;

        d1 = $d6 - $d5;

        $d8 = r1.<org.apache.commons.math.geometry.Vector3D: double z>;

        $d7 = r0.<org.apache.commons.math.geometry.Vector3D: double z>;

        d2 = $d8 - $d7;

        $d10 = d0 * d0;

        $d9 = d1 * d1;

        $d12 = $d10 + $d9;

        $d11 = d2 * d2;

        $d13 = $d12 + $d11;

        return $d13;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.geometry.Vector3D r0;
        org.apache.commons.math.geometry.Vector3DFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math.geometry.Vector3D;

        $r1 = <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3DFormat DEFAULT_FORMAT>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.geometry.Vector3DFormat: java.lang.String format(java.lang.Object)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.commons.math.geometry.Vector3D $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.commons.math.geometry.Vector3DFormat $r10;

        <org.apache.commons.math.geometry.Vector3D: long serialVersionUID> = 5133268763396045979L;

        $r0 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r0.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 0.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D ZERO> = $r0;

        $r1 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r1.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(1.0, 0.0, 0.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_I> = $r1;

        $r2 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r2.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(-1.0, 0.0, 0.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D MINUS_I> = $r2;

        $r3 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r3.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, 1.0, 0.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_J> = $r3;

        $r4 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r4.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, -1.0, 0.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D MINUS_J> = $r4;

        $r5 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r5.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 1.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D PLUS_K> = $r5;

        $r6 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r6.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(0.0, 0.0, -1.0);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D MINUS_K> = $r6;

        $r7 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r7.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(#NaN, #NaN, #NaN);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D NaN> = $r7;

        $r8 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r8.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(#Infinity, #Infinity, #Infinity);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D POSITIVE_INFINITY> = $r8;

        $r9 = new org.apache.commons.math.geometry.Vector3D;

        specialinvoke $r9.<org.apache.commons.math.geometry.Vector3D: void <init>(double,double,double)>(#-Infinity, #-Infinity, #-Infinity);

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3D NEGATIVE_INFINITY> = $r9;

        $r10 = staticinvoke <org.apache.commons.math.geometry.Vector3DFormat: org.apache.commons.math.geometry.Vector3DFormat getInstance()>();

        <org.apache.commons.math.geometry.Vector3D: org.apache.commons.math.geometry.Vector3DFormat DEFAULT_FORMAT> = $r10;

        return;
    }
}
