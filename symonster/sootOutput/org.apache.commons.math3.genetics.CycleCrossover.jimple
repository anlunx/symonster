public class org.apache.commons.math3.genetics.CycleCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
{
    private final boolean randomStart;

    public void <init>()
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        specialinvoke r0.<org.apache.commons.math3.genetics.CycleCrossover: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart> = z0;

        return;
    }

    public boolean isRandomStart()
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        $z0 = r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart>;

        return $z0;
    }

    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        org.apache.commons.math3.genetics.Chromosome r1, r2;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        org.apache.commons.math3.genetics.AbstractListChromosome $r6, $r7;
        org.apache.commons.math3.genetics.ChromosomePair $r8;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z1 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) r1;

        $r6 = (org.apache.commons.math3.genetics.AbstractListChromosome) r2;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.genetics.CycleCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r6);

        return $r8;
    }

    protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.genetics.CycleCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2, $r18, $r19;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, i14;
        java.util.List r3, r4, $r12, $r14;
        java.util.Iterator r9;
        java.lang.Object r10, $r21, $r23, $r25, $r27, r33, r34;
        java.util.ArrayList $r11, $r13, $r16;
        java.util.HashSet $r15;
        boolean $z0, $z3, $z5;
        org.apache.commons.math3.genetics.ChromosomePair $r17;
        java.lang.Integer $r20, $r22, $r24, $r26, $r30, $r35;
        org.apache.commons.math3.random.RandomGenerator $r31;
        org.apache.commons.math3.exception.DimensionMismatchException $r32;

        r0 := @this: org.apache.commons.math3.genetics.CycleCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        i0 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if i0 == $i2 goto label01;

        $r32 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r32.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, i0);

        throw $r32;

     label01:
        r3 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r4 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r11 = new java.util.ArrayList;

        $r12 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        $r13 = new java.util.ArrayList;

        $r14 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r14);

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>(int)>(i0);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(i0);

        $z0 = r0.<org.apache.commons.math3.genetics.CycleCrossover: boolean randomStart>;

        if $z0 == 0 goto label02;

        $r31 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i10 = interfaceinvoke $r31.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        goto label03;

     label02:
        $i10 = 0;

     label03:
        i11 = $i10;

        i12 = 1;

     label04:
        $i13 = interfaceinvoke $r15.<java.util.Set: int size()>();

        if $i13 >= i0 goto label11;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r20);

        r33 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i11);

        i14 = interfaceinvoke r3.<java.util.List: int indexOf(java.lang.Object)>(r33);

     label05:
        $r21 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        if i14 == $i3 goto label06;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r30);

        r34 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i14);

        i14 = interfaceinvoke r3.<java.util.List: int indexOf(java.lang.Object)>(r34);

        goto label05;

     label06:
        $i4 = i12;

        i12 = i12 + 1;

        $i5 = $i4 % 2;

        if $i5 == 0 goto label08;

        r9 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (java.lang.Integer) $r25;

        i1 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        r10 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i1);

        $r27 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        interfaceinvoke $r11.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r27);

        interfaceinvoke $r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r10);

        goto label07;

     label08:
        interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r16);

        $r23 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (java.lang.Integer) $r23;

        $i6 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $i7 = $i6 + 1;

        i11 = $i7 % i0;

     label09:
        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $z5 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r35);

        if $z5 == 0 goto label10;

        $i8 = interfaceinvoke $r15.<java.util.Set: int size()>();

        if $i8 >= i0 goto label10;

        i11 = i11 + 1;

        if i11 < i0 goto label09;

        i11 = 0;

        goto label09;

     label10:
        interfaceinvoke $r16.<java.util.List: void clear()>();

        goto label04;

     label11:
        $r17 = new org.apache.commons.math3.genetics.ChromosomePair;

        $r18 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r11);

        $r19 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r13);

        specialinvoke $r17.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r18, $r19);

        return $r17;
    }
}
