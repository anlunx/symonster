public class com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private final double _eps;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: double _eps> = 1.0E-12;

        return;
    }

    public void <init>(double)
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        double d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: double _eps> = d0;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r7, $r9;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle r3;
        int i0, i1, i2, $i3, $i4;
        double[] r4, r5, r6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33;
        boolean $z0;
        byte $b5;
        com.opengamma.analytics.math.MathException $r8;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle) r1;

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i1 = i0 + 1;

        $i3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i2 = $i3 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $i4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        if $i4 != i2 goto label1;

        $d33 = r5[i2];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d33);

        return $r9;

     label1:
        $d4 = r4[i1];

        $d3 = r4[i0];

        d0 = $d4 - $d3;

        $d5 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d6 = r0.<com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: double _eps>;

        $b5 = $d5 cmpg $d6;

        if $b5 >= 0 goto label2;

        $r8 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r8.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("x data points were not distinct");

        throw $r8;

     label2:
        $d7 = r4[i1];

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d9 = $d7 - $d8;

        d1 = $d9 / d0;

        $d10 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d11 = r4[i0];

        $d12 = $d10 - $d11;

        d2 = $d12 / d0;

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: double[] getSecondDerivatives()>();

        $d13 = r5[i0];

        $d16 = d1 * $d13;

        $d14 = r5[i1];

        $d15 = d2 * $d14;

        $d31 = $d16 + $d15;

        $d17 = d1 * d1;

        $d18 = $d17 - 1.0;

        $d20 = d1 * $d18;

        $d19 = r6[i0];

        $d26 = $d20 * $d19;

        $d21 = d2 * d2;

        $d22 = $d21 - 1.0;

        $d24 = d2 * $d22;

        $d23 = r6[i1];

        $d25 = $d24 * $d23;

        $d27 = $d26 + $d25;

        $d28 = $d27 * d0;

        $d29 = $d28 * d0;

        $d30 = $d29 / 6.0;

        $d32 = $d31 + $d30;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d32);

        return $r7;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle r3;
        int i0, $i1, i3, i4;
        double[] r4, r5, r6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;
        boolean $z0;
        byte $b2;
        com.opengamma.analytics.math.MathException $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle) r1;

        i3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i4 = i3 + 1;

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i0 = $i1 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        if i3 != i0 goto label1;

        i3 = i0 - 1;

        i4 = i0;

     label1:
        $d4 = r4[i4];

        $d3 = r4[i3];

        d0 = $d4 - $d3;

        $d5 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d6 = r0.<com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: double _eps>;

        $b2 = $d5 cmpg $d6;

        if $b2 >= 0 goto label2;

        $r7 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r7.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("x data points were not distinct");

        throw $r7;

     label2:
        $d7 = r4[i4];

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d9 = $d7 - $d8;

        d1 = $d9 / d0;

        $d10 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d11 = r4[i3];

        $d12 = $d10 - $d11;

        d2 = $d12 / d0;

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: double[] getSecondDerivatives()>();

        $d14 = r5[i4];

        $d13 = r5[i3];

        $d15 = $d14 - $d13;

        $d29 = $d15 / d0;

        $d16 = -3.0 * d1;

        $d17 = $d16 * d1;

        $d19 = $d17 + 1.0;

        $d18 = r6[i3];

        $d25 = $d19 * $d18;

        $d20 = 3.0 * d2;

        $d21 = $d20 * d2;

        $d23 = $d21 - 1.0;

        $d22 = r6[i4];

        $d24 = $d23 * $d22;

        $d26 = $d25 + $d24;

        $d27 = $d26 * d0;

        $d28 = $d27 / 6.0;

        $d30 = $d29 + $d28;

        return $d30;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle r3;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        double[] r4, r5, $r7, $r8;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        double[][] r6;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle) r1;

        i0 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: int size()>();

        r4 = newarray (double)[i0];

        $i3 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i4 = i0 - 1;

        if $i3 != $i4 goto label1;

        $i5 = i0 - 1;

        r4[$i5] = 1.0;

        return r4;

     label1:
        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: double[] getKeys()>();

        i1 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i2 = i1 + 1;

        $d6 = r5[i2];

        $d5 = r5[i1];

        d0 = $d6 - $d5;

        $d7 = r5[i2];

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d9 = $d7 - $d8;

        d1 = $d9 / d0;

        $d10 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d11 = r5[i1];

        $d12 = $d10 - $d11;

        d2 = $d12 / d0;

        $d13 = d1 * d1;

        $d14 = $d13 - 1.0;

        $d15 = d1 * $d14;

        $d16 = $d15 * d0;

        $d17 = $d16 * d0;

        d3 = $d17 / 6.0;

        $d18 = d2 * d2;

        $d19 = $d18 - 1.0;

        $d20 = d2 * $d19;

        $d21 = $d20 * d0;

        $d22 = $d21 * d0;

        d4 = $d22 / 6.0;

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: double[][] getSecondDerivativesSensitivities()>();

        i6 = 0;

     label2:
        if i6 >= i0 goto label3;

        $r7 = r6[i1];

        $d27 = $r7[i6];

        $d30 = d3 * $d27;

        $r8 = r6[i2];

        $d28 = $r8[i6];

        $d29 = d4 * $d28;

        $d31 = $d30 + $d29;

        r4[i6] = $d31;

        i6 = i6 + 1;

        goto label2;

     label3:
        $d23 = r4[i1];

        $d24 = $d23 + d1;

        r4[i1] = $d24;

        $d25 = r4[i2];

        $d26 = $d25 + d2;

        r4[i2] = $d26;

        return r4;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DCubicSplineDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.NaturalCubicSplineInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
