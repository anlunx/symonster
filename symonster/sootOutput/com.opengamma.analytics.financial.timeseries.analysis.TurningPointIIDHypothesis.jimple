public class com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis extends com.opengamma.analytics.financial.timeseries.analysis.IIDHypothesis
{
    private final double _criticalValue;

    public void <init>(double)
    {
        com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis r0;
        double d0, $d1, $d2, $d3;
        boolean $z0;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r1;
        java.lang.Double $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.financial.timeseries.analysis.IIDHypothesis: void <init>()>();

        $z0 = staticinvoke <com.opengamma.util.ArgumentChecker: boolean isInRangeExcludingLow(double,double,double)>(0.0, 1.0, d0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Level must be between 0 and 1");

        throw $r3;

     label1:
        $r1 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        $d1 = d0 / 2.0;

        $d2 = 1.0 - $d1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $d3 = virtualinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: double getInverseCDF(java.lang.Double)>($r2);

        r0.<com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis: double _criticalValue> = $d3;

        return;
    }

    public boolean testIID(com.opengamma.timeseries.DoubleTimeSeries)
    {
        com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis r0;
        com.opengamma.timeseries.DoubleTimeSeries r1;
        double[] r2;
        int i0, $i1, $i2, $i4, $i5, i10, i11;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        byte $b3, $b6, $b7, $b8, $b9;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis;

        r1 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        r2 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        i0 = lengthof r2;

        i10 = 0;

        i11 = 1;

     label1:
        $i1 = i0 - 1;

        if i11 >= $i1 goto label4;

        $i4 = i11 - 1;

        d0 = r2[$i4];

        d1 = r2[i11];

        $i5 = i11 + 1;

        d2 = r2[$i5];

        $b6 = d1 cmpl d0;

        if $b6 <= 0 goto label2;

        $b9 = d1 cmpl d2;

        if $b9 <= 0 goto label2;

        i10 = i10 + 1;

        goto label3;

     label2:
        $b7 = d1 cmpg d0;

        if $b7 >= 0 goto label3;

        $b8 = d1 cmpg d2;

        if $b8 >= 0 goto label3;

        i10 = i10 + 1;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        $d4 = (double) i0;

        $d5 = $d4 - 2.0;

        $d6 = 2.0 * $d5;

        d15 = $d6 / 3.0;

        $i2 = 16 * i0;

        $d7 = (double) $i2;

        $d8 = $d7 - 29.0;

        $d9 = $d8 / 90.0;

        d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        $d10 = (double) i10;

        $d11 = $d10 - d15;

        $d12 = staticinvoke <java.lang.Math: double abs(double)>($d11);

        $d14 = $d12 / d3;

        $d13 = r0.<com.opengamma.analytics.financial.timeseries.analysis.TurningPointIIDHypothesis: double _criticalValue>;

        $b3 = $d14 cmpg $d13;

        if $b3 >= 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }
}
