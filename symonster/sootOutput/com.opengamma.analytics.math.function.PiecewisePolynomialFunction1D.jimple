public class com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double d0, $d1, $d2, $d3, $d4;
        double[] r2, r4, r5;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        boolean $z0, $z1, $z2, $z3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r8, $r9;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "xKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xKey containing Infinity");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r2;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r4 = newarray (double)[i1];

        i5 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i2 = i0 - 1;

        if i5 != $i2 goto label1;

        i5 = i5 + -1;

     label1:
        i6 = 0;

     label2:
        if i6 >= i1 goto label3;

        $i3 = i1 * i5;

        $i4 = $i3 + i6;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>($i4);

        r5 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d1 = r2[i5];

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>(r5, d0, $d1);

        r4[i6] = $d2;

        $d3 = r4[i6];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "Too large input");

        $d4 = r4[i6];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "Too large input");

        i6 = i6 + 1;

        goto label2;

     label3:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        return $r8;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double[] r2, $r10, $r11, $r12, r13, r14;
        int i0, i1, i2, $i4, $i5, $i6, i8, i9, i10, i11, i12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, $r8;
        double[][] r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b3, $b7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "xKeys");

        i0 = lengthof r2;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $d9 = r2[i8];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xKeys containing NaN");

        $d10 = r2[i8];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d10);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xKeys containing Infinity");

        i8 = i8 + 1;

        goto label01;

     label02:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r13 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = lengthof r13;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r4 = newmultiarray (double)[i2][i0];

        i9 = 0;

     label03:
        if i9 >= i2 goto label10;

        i10 = 0;

     label04:
        if i10 >= i0 goto label09;

        i11 = 0;

        $d1 = r2[i10];

        $d0 = r13[1];

        $b3 = $d1 cmpg $d0;

        if $b3 >= 0 goto label05;

        i11 = 0;

        goto label08;

     label05:
        i12 = 1;

     label06:
        $i4 = i1 - 1;

        if i12 >= $i4 goto label08;

        $d8 = r13[i12];

        $d7 = r2[i10];

        $b7 = $d8 cmpg $d7;

        if $b7 > 0 goto label07;

        i11 = i12;

     label07:
        i12 = i12 + 1;

        goto label06;

     label08:
        $i5 = i2 * i11;

        $i6 = $i5 + i9;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>($i6);

        r14 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r10 = r4[i9];

        $d3 = r2[i10];

        $d2 = r13[i11];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>(r14, $d3, $d2);

        $r10[i10] = $d4;

        $r11 = r4[i9];

        $d5 = $r11[i10];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r12 = r4[i9];

        $d6 = $r12[i10];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i10 = i10 + 1;

        goto label04;

     label09:
        i9 = i9 + 1;

        goto label03;

     label10:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        return $r8;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double[][])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double[][] r2, $r10, $r13, $r16, $r18;
        int i0, i1, i2, $i4, $i5, $i6, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, $r9;
        double[][][] r4;
        double[] $r7, $r11, $r14, $r15, $r17, $r19, $r20, $r21, $r22, r23, r24;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8, $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b3, $b7;
        boolean $z0, $z1, $z2, $z3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r25;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "xKeys");

        $r7 = r2[0];

        i0 = lengthof $r7;

        i1 = lengthof r2;

        i8 = 0;

     label01:
        if i8 >= i1 goto label04;

        i9 = 0;

     label02:
        if i9 >= i0 goto label03;

        $r21 = r2[i8];

        $d9 = $r21[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xKeys containing NaN");

        $r22 = r2[i8];

        $d10 = $r22[i9];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d10);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xKeys containing Infinity");

        i9 = i9 + 1;

        goto label02;

     label03:
        i8 = i8 + 1;

        goto label01;

     label04:
        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r23 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i10 = lengthof r23;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r4 = newmultiarray (double)[i2][i1][i0];

        i11 = 0;

     label05:
        if i11 >= i2 goto label14;

        i12 = 0;

     label06:
        if i12 >= i1 goto label13;

        i13 = 0;

     label07:
        if i13 >= i0 goto label12;

        i14 = 0;

        $r11 = r2[i12];

        $d1 = $r11[i13];

        $d0 = r23[1];

        $b3 = $d1 cmpg $d0;

        if $b3 >= 0 goto label08;

        i14 = 0;

        goto label11;

     label08:
        i15 = 1;

     label09:
        $i4 = i10 - 1;

        if i15 >= $i4 goto label11;

        $d8 = r23[i15];

        $r20 = r2[i12];

        $d7 = $r20[i13];

        $b7 = $d8 cmpg $d7;

        if $b7 > 0 goto label10;

        i14 = i15;

     label10:
        i15 = i15 + 1;

        goto label09;

     label11:
        $i5 = i2 * i14;

        $i6 = $i5 + i11;

        $r12 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>($i6);

        r24 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r13 = r4[i11];

        $r15 = $r13[i12];

        $r14 = r2[i12];

        $d3 = $r14[i13];

        $d2 = r23[i14];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>(r24, $d3, $d2);

        $r15[i13] = $d4;

        $r16 = r4[i11];

        $r17 = $r16[i12];

        $d5 = $r17[i13];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r18 = r4[i11];

        $r19 = $r18[i12];

        $d6 = $r19[i13];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i13 = i13 + 1;

        goto label07;

     label12:
        i12 = i12 + 1;

        goto label06;

     label13:
        i11 = i11 + 1;

        goto label05;

     label14:
        r25 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i16 = 0;

     label15:
        if i16 >= i2 goto label16;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r10 = r4[i16];

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r10);

        r25[i16] = $r9;

        i16 = i16 + 1;

        goto label15;

     label16:
        return r25;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r8;
        double d0, $d1, $d2, $d3;
        double[][] r2, r4;
        double[] r3, $r12, $r13, $r14;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, i18, i19;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r9, $r11;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i3 >= 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree < 1");

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r2 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i0 = $i4 + 1;

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        $i5 = i0 - 1;

        $i7 = i2 * $i5;

        $i6 = i1 - 1;

        r4 = newmultiarray (double)[$i7][$i6];

        i15 = 0;

     label3:
        $i16 = i0 - 1;

        $i17 = i2 * $i16;

        if i15 >= $i17 goto label4;

        $r14 = r4[i15];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r14, 0.0);

        i15 = i15 + 1;

        goto label3;

     label4:
        i18 = 0;

     label5:
        $i8 = i0 - 1;

        $i9 = i2 * $i8;

        if i18 >= $i9 goto label8;

        i19 = 0;

     label6:
        $i12 = i1 - 1;

        if i19 >= $i12 goto label7;

        $r13 = r4[i18];

        $r12 = r2[i18];

        $d2 = $r12[i19];

        $i13 = i1 - i19;

        $i14 = $i13 - 1;

        $d1 = (double) $i14;

        $d3 = $d2 * $d1;

        $r13[i19] = $d3;

        i19 = i19 + 1;

        goto label6;

     label7:
        i18 = i18 + 1;

        goto label5;

     label8:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        $i10 = i1 - 1;

        $i11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r9, $r10, $i10, $i11);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r8, d0);

        return $r11;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r9;
        double[] r2, r4, $r13, $r14, $r15;
        double[][] r3, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, i18, i19;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r11, $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8, $r10;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i3 >= 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree < 1");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r4 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i0 = $i4 + 1;

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        $i5 = i0 - 1;

        $i7 = i2 * $i5;

        $i6 = i1 - 1;

        r5 = newmultiarray (double)[$i7][$i6];

        i15 = 0;

     label3:
        $i16 = i0 - 1;

        $i17 = i2 * $i16;

        if i15 >= $i17 goto label4;

        $r15 = r5[i15];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r15, 0.0);

        i15 = i15 + 1;

        goto label3;

     label4:
        i18 = 0;

     label5:
        $i8 = i0 - 1;

        $i9 = i2 * $i8;

        if i18 >= $i9 goto label8;

        i19 = 0;

     label6:
        $i12 = i1 - 1;

        if i19 >= $i12 goto label7;

        $r14 = r5[i18];

        $r13 = r3[i18];

        $d1 = $r13[i19];

        $i13 = i1 - i19;

        $i14 = $i13 - 1;

        $d0 = (double) $i14;

        $d2 = $d1 * $d0;

        $r14[i19] = $d2;

        i19 = i19 + 1;

        goto label6;

     label7:
        i18 = i18 + 1;

        goto label5;

     label8:
        $r9 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        $i10 = i1 - 1;

        $i11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r10, $r11, $i10, $i11);

        $r12 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>($r9, r2);

        return $r12;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r8;
        double d0, $d1, $d2, $d3, $d4, $d5;
        double[][] r2, r4;
        double[] r3, $r12, $r13, $r14;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, i20, i21;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r9, $r11;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i3 >= 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree < 2");

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r2 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i0 = $i4 + 1;

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        $i5 = i0 - 1;

        $i7 = i2 * $i5;

        $i6 = i1 - 2;

        r4 = newmultiarray (double)[$i7][$i6];

        i17 = 0;

     label3:
        $i18 = i0 - 1;

        $i19 = i2 * $i18;

        if i17 >= $i19 goto label4;

        $r14 = r4[i17];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r14, 0.0);

        i17 = i17 + 1;

        goto label3;

     label4:
        i20 = 0;

     label5:
        $i8 = i0 - 1;

        $i9 = i2 * $i8;

        if i20 >= $i9 goto label8;

        i21 = 0;

     label6:
        $i12 = i1 - 2;

        if i21 >= $i12 goto label7;

        $r13 = r4[i20];

        $r12 = r2[i20];

        $d2 = $r12[i21];

        $i13 = i1 - i21;

        $i14 = $i13 - 1;

        $d1 = (double) $i14;

        $d4 = $d2 * $d1;

        $i15 = i1 - i21;

        $i16 = $i15 - 2;

        $d3 = (double) $i16;

        $d5 = $d4 * $d3;

        $r13[i21] = $d5;

        i21 = i21 + 1;

        goto label6;

     label7:
        i20 = i20 + 1;

        goto label5;

     label8:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        $i10 = i1 - 1;

        $i11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r9, $r10, $i10, $i11);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r8, d0);

        return $r11;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r9;
        double[] r2, r4, $r13, $r14, $r15;
        double[][] r3, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, i20, i21;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r11, $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8, $r10;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i3 >= 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree < 2");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r4 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i0 = $i4 + 1;

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        $i5 = i0 - 1;

        $i7 = i2 * $i5;

        $i6 = i1 - 2;

        r5 = newmultiarray (double)[$i7][$i6];

        i17 = 0;

     label3:
        $i18 = i0 - 1;

        $i19 = i2 * $i18;

        if i17 >= $i19 goto label4;

        $r15 = r5[i17];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r15, 0.0);

        i17 = i17 + 1;

        goto label3;

     label4:
        i20 = 0;

     label5:
        $i8 = i0 - 1;

        $i9 = i2 * $i8;

        if i20 >= $i9 goto label8;

        i21 = 0;

     label6:
        $i12 = i1 - 2;

        if i21 >= $i12 goto label7;

        $r14 = r5[i20];

        $r13 = r3[i20];

        $d1 = $r13[i21];

        $i13 = i1 - i21;

        $i14 = $i13 - 1;

        $d0 = (double) $i14;

        $d3 = $d1 * $d0;

        $i15 = i1 - i21;

        $i16 = $i15 - 2;

        $d2 = (double) $i16;

        $d4 = $d3 * $d2;

        $r14[i21] = $d4;

        i21 = i21 + 1;

        goto label6;

     label7:
        i20 = i20 + 1;

        goto label5;

     label8:
        $r9 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        $i10 = i1 - 1;

        $i11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r10, $r11, $i10, $i11);

        $r12 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>($r9, r2);

        return $r12;
    }

    public double integrate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24;
        double[] r2, $r8, $r9, $r14, $r15, $r16, $r17, $r18, $r19, $r20, r21;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, i18, $i19, i20, i21, i22, i23, i24, $i25, i26, i27;
        double[][] r3, r4;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r6, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r12;
        byte $b8, $b16;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "initialKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "initialKey containing Infinity");

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        if $i2 != 1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Dimension should be 1");

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i1 = $i3 + 1;

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i5 = i1 - 1;

        $i4 = i0 + 1;

        r4 = newmultiarray (double)[$i5][$i4];

        i18 = 0;

     label03:
        $i19 = i1 - 1;

        if i18 >= $i19 goto label04;

        $r20 = r4[i18];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r20, 0.0);

        i18 = i18 + 1;

        goto label03;

     label04:
        i20 = 0;

     label05:
        $i6 = i1 - 1;

        if i20 >= $i6 goto label08;

        i21 = 0;

     label06:
        if i21 >= i0 goto label07;

        $r19 = r4[i20];

        $r18 = r3[i20];

        $d22 = $r18[i21];

        $i17 = i0 - i21;

        $d21 = (double) $i17;

        $d23 = $d22 / $d21;

        $r19[i21] = $d23;

        i21 = i21 + 1;

        goto label06;

     label07:
        i20 = i20 + 1;

        goto label05;

     label08:
        $i7 = i1 - 1;

        r21 = newarray (double)[$i7];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r21, 0.0);

        i22 = 0;

        $d2 = r2[1];

        $b8 = d0 cmpg $d2;

        if $b8 > 0 goto label09;

        i22 = 0;

        goto label12;

     label09:
        i23 = 1;

     label10:
        $i9 = i1 - 1;

        if i23 >= $i9 goto label12;

        $d20 = r2[i23];

        $b16 = $d20 cmpg d0;

        if $b16 >= 0 goto label11;

        i22 = i23;

     label11:
        i23 = i23 + 1;

        goto label10;

     label12:
        $r8 = r4[i22];

        $d3 = r2[i22];

        d24 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r8, d0, $d3);

        i24 = i22;

     label13:
        $i25 = i1 - 2;

        if i24 >= $i25 goto label14;

        $i15 = i24 + 1;

        $d16 = r21[i24];

        $r17 = r4[i24];

        $i14 = i24 + 1;

        $d15 = r2[$i14];

        $d14 = r2[i24];

        $d17 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r17, $d15, $d14);

        $d18 = $d16 + $d17;

        $d19 = $d18 - d24;

        r21[$i15] = $d19;

        d24 = 0.0;

        i24 = i24 + 1;

        goto label13;

     label14:
        $r9 = r4[i22];

        $d4 = r2[i22];

        $d5 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r9, d0, $d4);

        $d6 = neg $d5;

        r21[i22] = $d6;

        i26 = i22 - 1;

     label15:
        if i26 <= -1 goto label16;

        $i12 = i26 + 1;

        $d11 = r21[$i12];

        $r16 = r4[i26];

        $i13 = i26 + 1;

        $d10 = r2[$i13];

        $d9 = r2[i26];

        $d12 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r16, $d10, $d9);

        $d13 = $d11 - $d12;

        r21[i26] = $d13;

        i26 = i26 + -1;

        goto label15;

     label16:
        i27 = 0;

     label17:
        $i10 = i1 - 1;

        if i27 >= $i10 goto label18;

        $r15 = r4[i27];

        $d8 = r21[i27];

        $r15[i0] = $d8;

        i27 = i27 + 1;

        goto label17;

     label18:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        $i11 = i0 + 1;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r11, $r12, $i11, 1);

        $r13 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r10, d1);

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d7 = $r14[0];

        return $d7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D integrate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r12;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22;
        double[] r2, r3, $r10, $r11, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, i18, $i19, i20, i21, i22, i23, i24, $i25, i26, i27;
        double[][] r4, r5, $r17;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8, $r13, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9, $r14, $r16;
        byte $b8, $b16;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "xKeys");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "initialKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "initialKey containing Infinity");

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        if $i2 != 1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Dimension should be 1");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r3 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i1 = $i3 + 1;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        r4 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i5 = i1 - 1;

        $i4 = i0 + 1;

        r5 = newmultiarray (double)[$i5][$i4];

        i18 = 0;

     label03:
        $i19 = i1 - 1;

        if i18 >= $i19 goto label04;

        $r24 = r5[i18];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r24, 0.0);

        i18 = i18 + 1;

        goto label03;

     label04:
        i20 = 0;

     label05:
        $i6 = i1 - 1;

        if i20 >= $i6 goto label08;

        i21 = 0;

     label06:
        if i21 >= i0 goto label07;

        $r23 = r5[i20];

        $r22 = r4[i20];

        $d20 = $r22[i21];

        $i17 = i0 - i21;

        $d19 = (double) $i17;

        $d21 = $d20 / $d19;

        $r23[i21] = $d21;

        i21 = i21 + 1;

        goto label06;

     label07:
        i20 = i20 + 1;

        goto label05;

     label08:
        $i7 = i1 - 1;

        r25 = newarray (double)[$i7];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r25, 0.0);

        i22 = 0;

        $d1 = r3[1];

        $b8 = d0 cmpg $d1;

        if $b8 > 0 goto label09;

        i22 = 0;

        goto label12;

     label09:
        i23 = 1;

     label10:
        $i9 = i1 - 1;

        if i23 >= $i9 goto label12;

        $d18 = r3[i23];

        $b16 = $d18 cmpg d0;

        if $b16 >= 0 goto label11;

        i22 = i23;

     label11:
        i23 = i23 + 1;

        goto label10;

     label12:
        $r10 = r5[i22];

        $d2 = r3[i22];

        d22 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r10, d0, $d2);

        i24 = i22;

     label13:
        $i25 = i1 - 2;

        if i24 >= $i25 goto label14;

        $i15 = i24 + 1;

        $d14 = r25[i24];

        $r21 = r5[i24];

        $i14 = i24 + 1;

        $d13 = r3[$i14];

        $d12 = r3[i24];

        $d15 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r21, $d13, $d12);

        $d16 = $d14 + $d15;

        $d17 = $d16 - d22;

        r25[$i15] = $d17;

        d22 = 0.0;

        i24 = i24 + 1;

        goto label13;

     label14:
        $r11 = r5[i22];

        $d3 = r3[i22];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r11, d0, $d3);

        $d5 = neg $d4;

        r25[i22] = $d5;

        i26 = i22 - 1;

     label15:
        if i26 <= -1 goto label16;

        $i12 = i26 + 1;

        $d9 = r25[$i12];

        $r20 = r5[i26];

        $i13 = i26 + 1;

        $d8 = r3[$i13];

        $d7 = r3[i26];

        $d10 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: double getValue(double[],double,double)>($r20, $d8, $d7);

        $d11 = $d9 - $d10;

        r25[i26] = $d11;

        i26 = i26 + -1;

        goto label15;

     label16:
        i27 = 0;

     label17:
        $i10 = i1 - 1;

        if i27 >= $i10 goto label18;

        $r19 = r5[i27];

        $d6 = r25[i27];

        $r19[i0] = $d6;

        i27 = i27 + 1;

        goto label17;

     label18:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        $i11 = i0 + 1;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r13, $r14, $i11, 1);

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r16 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>($r12, r2);

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[0];

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r18);

        return $r15;
    }

    protected double getValue(double[], double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r0;
        double[] r1;
        double d0, d1, d2, $d3, d4, d5;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 = lengthof r1;

        d2 = d0 - d1;

        d4 = r1[0];

        i1 = 1;

     label1:
        if i1 >= i0 goto label2;

        d5 = d4 * d2;

        $d3 = r1[i1];

        d4 = d5 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }
}
