class org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation extends org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation
{
    private final org.apache.commons.math3.linear.RealVector point;
    private final org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction model;
    private final org.apache.commons.math3.linear.RealVector target;

    private void <init>(org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation r0;
        org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction r1;
        org.apache.commons.math3.linear.RealVector r2, r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation;

        r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction;

        r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction model> = r1;

        r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector point> = r3;

        r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector target> = r2;

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getJacobian()
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation r0;
        org.apache.commons.math3.linear.RealVector $r1;
        org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction $r2;
        double[] $r3;
        org.apache.commons.math3.linear.RealMatrix $r4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation;

        $r2 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction model>;

        $r1 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector point>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction: org.apache.commons.math3.linear.RealMatrix computeJacobian(double[])>($r3);

        return $r4;
    }

    public org.apache.commons.math3.linear.RealVector getPoint()
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation r0;
        org.apache.commons.math3.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation;

        $r1 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector point>;

        return $r1;
    }

    public org.apache.commons.math3.linear.RealVector getResiduals()
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation r0;
        org.apache.commons.math3.linear.RealVector $r1, $r2, $r5, $r6;
        org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation;

        $r2 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector target>;

        $r3 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction model>;

        $r1 = r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: org.apache.commons.math3.linear.RealVector point>;

        $r4 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r5 = interfaceinvoke $r3.<org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction: org.apache.commons.math3.linear.RealVector computeValue(double[])>($r4);

        $r6 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r5);

        return $r6;
    }

    void <init>(org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1)
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation r0;
        org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction r1;
        org.apache.commons.math3.linear.RealVector r2, r3;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1 r4;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation;

        r1 := @parameter0: org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction;

        r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r4 := @parameter3: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1;

        specialinvoke r0.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation: void <init>(org.apache.commons.math3.fitting.leastsquares.ValueAndJacobianFunction,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>(r1, r2, r3);

        return;
    }
}
