public abstract class com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod extends com.opengamma.analytics.math.statistics.descriptive.QuantileCalculationMethod
{

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod r0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.QuantileCalculationMethod: void <init>()>();

        return;
    }

    public double quantileFromSorted(double, double[])
    {
        com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r1;
        int i0, i1, i2, $i5, $i6, $i7, $i8;
        byte $b3, $b4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $b3 = d0 cmpl 0.0;

        if $b3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Quantile should be above 0.");

        $b4 = d0 cmpg 1.0;

        if $b4 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Quantile should be below 1.");

        i0 = lengthof r1;

        $i5 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod: int sampleCorrection(int)>(i0);

        $d4 = (double) $i5;

        $d5 = d0 * $d4;

        $d6 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.InterpolationQuantileMethod: double indexCorrection()>();

        d1 = $d5 + $d6;

        $d7 = staticinvoke <java.lang.Math: double floor(double)>(d1);

        i1 = (int) $d7;

        if i1 < 1 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Quantile can not be computed below the lowest probability level.");

        $d8 = staticinvoke <java.lang.Math: double ceil(double)>(d1);

        i2 = (int) $d8;

        $i6 = lengthof r1;

        if i2 > $i6 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "Quantile can not be computed above the highest probability level.");

        $d9 = (double) i2;

        d2 = $d9 - d1;

        d3 = 1.0 - d2;

        $i7 = i1 - 1;

        $d10 = r1[$i7];

        $d13 = d2 * $d10;

        $i8 = i2 - 1;

        $d11 = r1[$i8];

        $d12 = d3 * $d11;

        $d14 = $d13 + $d12;

        return $d14;
    }

    abstract double indexCorrection();

    abstract int sampleCorrection(int);
}
