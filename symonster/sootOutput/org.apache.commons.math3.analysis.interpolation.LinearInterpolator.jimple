public class org.apache.commons.math3.analysis.interpolation.LinearInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
{

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator r0;
        double[] r1, r2, r3, r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r12;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label1;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = lengthof r1;

        $i8 = lengthof r2;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, $i8);

        throw $r11;

     label1:
        $i3 = lengthof r1;

        if $i3 >= 2 goto label2;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $i7 = lengthof r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label2:
        $i4 = lengthof r1;

        i0 = $i4 - 1;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        r3 = newarray (double)[i0];

        i10 = 0;

     label3:
        if i10 >= i0 goto label4;

        $i5 = i10 + 1;

        $d3 = r2[$i5];

        $d2 = r2[i10];

        $d7 = $d3 - $d2;

        $i6 = i10 + 1;

        $d5 = r1[$i6];

        $d4 = r1[i10];

        $d6 = $d5 - $d4;

        $d8 = $d7 / $d6;

        r3[i10] = $d8;

        i10 = i10 + 1;

        goto label3;

     label4:
        r12 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i0];

        r4 = newarray (double)[2];

        i11 = 0;

     label5:
        if i11 >= i0 goto label6;

        $d0 = r2[i11];

        r4[0] = $d0;

        $d1 = r3[i11];

        r4[1] = $d1;

        $r6 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r6.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r4);

        r12[i11] = $r6;

        i11 = i11 + 1;

        goto label5;

     label6:
        $r5 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        specialinvoke $r5.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>(r1, r12);

        return $r5;
    }

    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator r0;
        double[] r1, r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.LinearInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r1, r2);

        return $r3;
    }
}
