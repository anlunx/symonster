public abstract class org.apache.commons.math.linear.AbstractRealVector extends java.lang.Object implements org.apache.commons.math.linear.RealVector
{

    public void <init>()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(int)>($i0);

        return;
    }

    protected void checkVectorDimensions(int) throws org.apache.commons.math.exception.DimensionMismatchException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0, i1;
        org.apache.commons.math.exception.DimensionMismatchException $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        if i1 == i0 goto label1;

        $r1 = new org.apache.commons.math.exception.DimensionMismatchException;

        specialinvoke $r1.<org.apache.commons.math.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r1;

     label1:
        return;
    }

    protected void checkIndex(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math.linear.MatrixIndexException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math.linear.MatrixIndexException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INDEX_OUT_OF_RANGE>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[1] = $r5;

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r6;

        specialinvoke $r1.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        return;
    }

    public void setSubVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math.linear.RealVector r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkIndex(int)>(i0);

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $i2 = i0 + $i1;

        $i3 = $i2 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkIndex(int)>($i3);

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void setSubVector(int,double[])>(i0, $r2);

        return;
    }

    public void setSubVector(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkIndex(int)>(i0);

        $i1 = lengthof r1;

        $i2 = i0 + $i1;

        $i3 = $i2 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkIndex(int)>($i3);

        i6 = 0;

     label1:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label2;

        $i5 = i6 + i0;

        $d0 = r1[i6];

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void setEntry(int,double)>($i5, $d0);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math.linear.RealVector add(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1, r2;
        java.util.Iterator r3;
        java.lang.Object $r5, $r7;
        boolean $z0;
        org.apache.commons.math.linear.ArrayRealVector $r6;
        org.apache.commons.math.linear.RealVector$Entry $r8;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r5;

        r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math.linear.RealVector$Entry) $r7;

        if $r8 == null goto label2;

        $i0 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = r2[$i0];

        $d1 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = $d0 + $d1;

        r2[$i0] = $d2;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1, $r7, r9;
        java.util.Iterator r2;
        int i0;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2;
        org.apache.commons.math.linear.ArrayRealVector $r6;
        double[] r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r6 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        r8 = virtualinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector add(double[])>(r8);

        return $r7;

     label1:
        r9 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: org.apache.commons.math.linear.RealVector copy()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label3;

        i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = interfaceinvoke r9.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i0);

        $d2 = $d0 + $d1;

        interfaceinvoke r9.<org.apache.commons.math.linear.RealVector: void setEntry(int,double)>(i0, $d2);

        goto label2;

     label3:
        return r9;
    }

    public org.apache.commons.math.linear.RealVector subtract(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1, r2;
        java.util.Iterator r3;
        int i0;
        java.lang.Object $r5, $r7;
        boolean $z0;
        org.apache.commons.math.linear.ArrayRealVector $r6;
        org.apache.commons.math.linear.RealVector$Entry $r8;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r5;

        r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math.linear.RealVector$Entry) $r7;

        if $r8 == null goto label2;

        i0 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = r2[i0];

        $d2 = $d0 - $d1;

        r2[i0] = $d2;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1, $r7, r9;
        java.util.Iterator r2;
        int i0;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2;
        org.apache.commons.math.linear.ArrayRealVector $r6;
        double[] r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r6 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        r8 = virtualinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector add(double[])>(r8);

        return $r7;

     label1:
        r9 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: org.apache.commons.math.linear.RealVector copy()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label3;

        i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = interfaceinvoke r9.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i0);

        $d2 = $d0 - $d1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: void setEntry(int,double)>(i0, $d2);

        goto label2;

     label3:
        return r9;
    }

    public org.apache.commons.math.linear.RealVector mapAdd(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        double d0;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAddToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0;
        byte $b0;
        org.apache.commons.math.analysis.BinaryFunction $r2;
        org.apache.commons.math.analysis.ComposableFunction $r3;
        org.apache.commons.math.linear.RealVector $r4;
        org.apache.commons.math.FunctionEvaluationException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label4;

     label1:
        $r2 = <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction ADD>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.ComposableFunction fix1stArgument(double)>(d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        return r0;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public abstract org.apache.commons.math.linear.AbstractRealVector copy();

    public double dotProduct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>($r2);

        return $d0;
    }

    public double dotProduct(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2, d3;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d3 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        goto label1;

     label2:
        return d3;
    }

    public org.apache.commons.math.linear.RealVector ebeDivide(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector)>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.RealVector ebeMultiply(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector)>($r2);

        return $r3;
    }

    public double getDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2;
        double d0, $d1, $d2, $d3, $d4, d5;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d5 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d2 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i0);

        d0 = $d2 - $d3;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public double getNorm()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        java.util.Iterator r1;
        double d0, $d1, $d2, d3;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math.linear.RealVector$Entry $r4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d3 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.math.linear.RealVector$Entry) $r3;

        if $r4 == null goto label2;

        d0 = virtualinvoke $r4.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = d0 * d0;

        d3 = d3 + $d2;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d3);

        return $d1;
    }

    public double getL1Norm()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math.linear.RealVector$Entry $r4;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d2 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.math.linear.RealVector$Entry) $r3;

        if $r4 == null goto label2;

        $d0 = virtualinvoke $r4.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        d2 = d2 + $d1;

        goto label1;

     label2:
        return d2;
    }

    public double getLInfNorm()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.math.linear.RealVector$Entry $r4;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d2 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.commons.math.linear.RealVector$Entry) $r3;

        if $r4 == null goto label2;

        $d0 = virtualinvoke $r4.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d2, $d1);

        goto label1;

     label2:
        return d2;
    }

    public double getDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double getDistance(org.apache.commons.math.linear.RealVector)>($r2);

        return $d0;
    }

    public double getL1Distance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2, $d3, d4;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = d4 + $d3;

        goto label1;

     label2:
        return d4;
    }

    public double getL1Distance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        java.util.Iterator r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i1 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d1 = r1[$i1];

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = d4 + $d3;

        goto label1;

     label2:
        return d4;
    }

    public double getLInfDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2, $d3, d4;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d3, d4);

        goto label1;

     label2:
        return d4;
    }

    public double getLInfDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        java.util.Iterator r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $i1 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d1 = r1[$i1];

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d3, d4);

        goto label1;

     label2:
        return d4;
    }

    public int getMinIndex()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, d1;
        byte $b0;
        int i1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i1 = -1;

        d1 = #Infinity;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $b0 = $d0 cmpg d1;

        if $b0 > 0 goto label2;

        i1 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        d1 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

     label2:
        goto label1;

     label3:
        return i1;
    }

    public double getMinValue()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getMinIndex()>();

        if i0 >= 0 goto label1;

        $d0 = #NaN;

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double getEntry(int)>(i0);

     label2:
        return $d0;
    }

    public int getMaxIndex()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, d1;
        byte $b0;
        int i1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i1 = -1;

        d1 = #-Infinity;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $b0 = $d0 cmpl d1;

        if $b0 < 0 goto label2;

        i1 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        d1 = virtualinvoke r2.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

     label2:
        goto label1;

     label3:
        return i1;
    }

    public double getMaxValue()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getMaxIndex()>();

        if i0 >= 0 goto label1;

        $d0 = #NaN;

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double getEntry(int)>(i0);

     label2:
        return $d0;
    }

    public org.apache.commons.math.linear.RealVector mapAbs()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAbsToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapAbsToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction ABS>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapAcos()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAcosToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapAcosToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction ACOS>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapAsin()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAsinToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapAsinToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction ASIN>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapAtan()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAtanToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapAtanToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction ATAN>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapCbrt()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapCbrtToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapCbrtToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction CBRT>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapCeil()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapCeilToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapCeilToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction CEIL>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapCos()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapCosToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapCosToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction COS>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapCosh()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapCoshToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapCoshToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction COSH>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapDivide(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        double d0;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapDivideToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapDivideToSelf(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0;
        org.apache.commons.math.analysis.BinaryFunction $r2;
        org.apache.commons.math.analysis.ComposableFunction $r3;
        org.apache.commons.math.linear.RealVector $r4;
        org.apache.commons.math.FunctionEvaluationException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

     label1:
        $r2 = <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction DIVIDE>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.ComposableFunction fix2ndArgument(double)>(d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapExp()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapExpToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapExpToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction EXP>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapExpm1()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapExpm1ToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapExpm1ToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction EXPM1>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapFloor()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapFloorToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapFloorToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction FLOOR>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapInv()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapInvToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapInvToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction INVERT>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapLog()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapLogToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapLogToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction LOG>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapLog10()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapLog10ToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapLog10ToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction LOG10>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapLog1p()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapLog1pToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapLog1pToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction LOG1P>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapMultiply(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        double d0;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0;
        org.apache.commons.math.analysis.BinaryFunction $r2;
        org.apache.commons.math.analysis.ComposableFunction $r3;
        org.apache.commons.math.linear.RealVector $r4;
        org.apache.commons.math.FunctionEvaluationException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

     label1:
        $r2 = <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction MULTIPLY>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.ComposableFunction fix1stArgument(double)>(d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapPow(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        double d0;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapPowToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapPowToSelf(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0;
        org.apache.commons.math.analysis.BinaryFunction $r2;
        org.apache.commons.math.analysis.ComposableFunction $r3;
        org.apache.commons.math.linear.RealVector $r4;
        org.apache.commons.math.FunctionEvaluationException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

     label1:
        $r2 = <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction POW>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.ComposableFunction fix2ndArgument(double)>(d0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapRint()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapRintToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapRintToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction RINT>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapSignum()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapSignumToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapSignumToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction SIGNUM>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapSin()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapSinToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapSinToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction SIN>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapSinh()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapSinhToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapSinhToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction SINH>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapSqrt()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapSqrtToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapSqrtToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction SQRT>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapSubtract(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        double d0;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapSubtractToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0, $d1;
        org.apache.commons.math.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        $d1 = neg d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapAddToSelf(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math.linear.RealVector mapTan()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapTanToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapTanToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction TAN>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapTanh()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapTanhToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapTanhToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction TANH>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealVector mapUlp()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapUlpToSelf()>();

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector mapUlpToSelf()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.ComposableFunction $r2;
        org.apache.commons.math.linear.RealVector $r3;
        org.apache.commons.math.FunctionEvaluationException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

     label1:
        $r2 = <org.apache.commons.math.analysis.ComposableFunction: org.apache.commons.math.analysis.ComposableFunction ULP>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2, r3;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math.linear.OpenMapRealMatrix $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r5, $r7;
        org.apache.commons.math.linear.RealVector$Entry $r6, $r8;
        double $d0, $d1, $d2;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r9;
        org.apache.commons.math.linear.AbstractRealMatrix r10;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.SparseRealVector;

        if $z0 != 0 goto label1;

        $z2 = r0 instanceof org.apache.commons.math.linear.SparseRealVector;

        if $z2 == 0 goto label2;

     label1:
        $r4 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(int,int)>($i0, $i1);

        r10 = $r4;

        goto label3;

     label2:
        $r9 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        specialinvoke $r9.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(int,int)>($i4, $i5);

        r10 = $r9;

     label3:
        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

     label4:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.commons.math.linear.RealVector$Entry) $r5;

        if $r6 == null goto label7;

        r3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: java.util.Iterator sparseIterator()>();

     label5:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.commons.math.linear.RealVector$Entry) $r7;

        if $r8 == null goto label6;

        $i2 = virtualinvoke $r6.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $i3 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke $r6.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d1 = virtualinvoke $r8.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = $d0 * $d1;

        interfaceinvoke r10.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>($i2, $i3, $d2);

        goto label5;

     label6:
        goto label4;

     label7:
        return r10;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        org.apache.commons.math.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector)>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.RealVector projection(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector)>($r2);

        return $r3;
    }

    public void set(double)
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double d0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        org.apache.commons.math.linear.RealVector$Entry $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.apache.commons.math.linear.RealVector$Entry) $r2;

        if $r3 == null goto label2;

        virtualinvoke $r3.<org.apache.commons.math.linear.RealVector$Entry: void setValue(double)>(d0);

        goto label1;

     label2:
        return;
    }

    public double[] toArray()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0, i1;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        r1 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double getEntry(int)>(i1);

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public double[] getData()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double[] toArray()>();

        return $r1;
    }

    public org.apache.commons.math.linear.RealVector unitVector()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: void unitize()>();

        return r1;
    }

    public void unitize()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double getNorm()>();

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapDivideToSelf(double)>($d0);

        return;
    }

    public java.util.Iterator sparseIterator()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = new org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;

        specialinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator: void <init>(org.apache.commons.math.linear.AbstractRealVector)>(r0);

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        int i0;
        org.apache.commons.math.linear.AbstractRealVector$1 $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: int getDimension()>();

        $r1 = new org.apache.commons.math.linear.AbstractRealVector$1;

        specialinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector$1: void <init>(org.apache.commons.math.linear.AbstractRealVector,int)>(r0, i0);

        return $r1;
    }

    public org.apache.commons.math.linear.RealVector map(org.apache.commons.math.analysis.UnivariateRealFunction) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r2;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction)>(r1);

        return $r3;
    }

    public org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.linear.AbstractRealVector r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        java.util.Iterator r2, $r6;
        double $d0, $d1, $d2;
        byte $b0;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(0.0);

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator sparseIterator()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: java.util.Iterator iterator()>();

     label2:
        r2 = $r6;

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label4;

        $d1 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>($d1);

        virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: void setValue(double)>($d2);

        goto label3;

     label4:
        return r0;
    }

    public volatile org.apache.commons.math.linear.RealVector copy()
    {
        org.apache.commons.math.linear.AbstractRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        return $r1;
    }
}
