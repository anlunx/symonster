public final class com.opengamma.analytics.financial.schedule.ScheduleCalculator extends java.lang.Object
{
    private static final org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY;

    private void <init>()
    {
        com.opengamma.analytics.financial.schedule.ScheduleCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.schedule.ScheduleCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, int, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, r7;
        int i0, $i1, i2, i3;
        com.opengamma.financial.convention.calendar.Calendar r1;
        org.threeten.bp.LocalDate $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        i0 := @parameter1: int;

        r1 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "calendar");

        r7 = r0;

     label01:
        $r4 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z0 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r4);

        if $z0 != 0 goto label02;

        r7 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        goto label01;

     label02:
        if i0 <= 0 goto label07;

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        r7 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

     label04:
        $r6 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z2 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r6);

        if $z2 != 0 goto label05;

        r7 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        goto label04;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        goto label11;

     label07:
        i3 = 0;

     label08:
        $i1 = neg i0;

        if i3 >= $i1 goto label11;

        r7 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

     label09:
        $r5 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z1 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r5);

        if $z1 != 0 goto label10;

        r7 = virtualinvoke r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        return r7;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDate(org.threeten.bp.ZonedDateTime[], int, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime[] r0, r2;
        int i0, i1, i2;
        com.opengamma.financial.convention.calendar.Calendar r1;
        org.threeten.bp.ZonedDateTime $r3, $r4;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        i1 = lengthof r0;

        r2 = newarray (org.threeten.bp.ZonedDateTime)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r3 = r0[i2];

        $r4 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>($r3, i0, r1);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, $r4;
        org.threeten.bp.Period r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        int $i0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "shift days");

        $i0 = virtualinvoke r1.<org.threeten.bp.Period: int getDays()>();

        $r4 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r0, $i0, r2);

        return $r4;
    }

    public static org.threeten.bp.LocalDate getAdjustedDate(org.threeten.bp.LocalDate, int, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.LocalDate r0, r4;
        int i0, $i1, i2, i3;
        com.opengamma.financial.convention.calendar.Calendar r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.threeten.bp.LocalDate;

        i0 := @parameter1: int;

        r1 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "calendar");

        r4 = r0;

     label01:
        $z0 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>(r4);

        if $z0 != 0 goto label02;

        r4 = virtualinvoke r4.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusDays(long)>(1L);

        goto label01;

     label02:
        if i0 <= 0 goto label07;

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        r4 = virtualinvoke r4.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusDays(long)>(1L);

     label04:
        $z2 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>(r4);

        if $z2 != 0 goto label05;

        r4 = virtualinvoke r4.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusDays(long)>(1L);

        goto label04;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        goto label11;

     label07:
        i3 = 0;

     label08:
        $i1 = neg i0;

        if i3 >= $i1 goto label11;

        r4 = virtualinvoke r4.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minusDays(long)>(1L);

     label09:
        $z1 = interfaceinvoke r1.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>(r4);

        if $z1 != 0 goto label10;

        r4 = virtualinvoke r4.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minusDays(long)>(1L);

        goto label09;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        return r4;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, r4, $r9;
        org.threeten.bp.Period r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "calendar");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "tenor");

        r4 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        $r9 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, r4);

        return $r9;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r4, $r11, $r13, $r16, $r17;
        org.threeten.bp.Period r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.threeten.bp.Month $r10, $r12;
        int $i0;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r14;
        org.threeten.bp.temporal.TemporalAdjuster $r15;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter4: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "Start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "Calendar");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Tenor");

        r4 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        $r10 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r11 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r0, 1, r3);

        $r12 = virtualinvoke $r11.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r10 == $r12 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;

        $i0 = virtualinvoke r1.<org.threeten.bp.Period: int getDays()>();

        if $i0 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        $z2 = $z5 & z0;

        $z3 = $z2 & z1;

        if $z3 == 0 goto label5;

        $r14 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r14.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        $r15 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        $r16 = virtualinvoke r4.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r15);

        $r17 = interfaceinvoke $r14.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, $r16);

        return $r17;

     label5:
        $r13 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, r4);

        return $r13;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime r0, $r11, $r15, $r16, r17, r18, $r19;
        org.threeten.bp.Period r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r4;
        boolean $z0, $z1, $z2, $z3;
        org.threeten.bp.Month $r10, $r12;
        int $i0;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r13;
        org.threeten.bp.temporal.TemporalAdjuster $r14;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        r4 := @parameter4: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "Start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "Calendar");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Tenor");

        r17 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        $z0 = r4 instanceof com.opengamma.financial.convention.rolldate.EndOfMonthRollDateAdjuster;

        if $z0 == 0 goto label4;

        $r10 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r11 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r0, 1, r3);

        $r12 = virtualinvoke $r11.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r10 == $r12 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $i0 = virtualinvoke r1.<org.threeten.bp.Period: int getDays()>();

        if $i0 != 0 goto label3;

        if $z3 == 0 goto label3;

        $r13 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r13.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        $r14 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        $r15 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r14);

        $r16 = interfaceinvoke $r13.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, $r15);

        return $r16;

     label3:
        goto label5;

     label4:
        if r4 == null goto label5;

        r18 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>(r4);

        $z1 = virtualinvoke r1.<org.threeten.bp.Period: boolean isNegative()>();

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r18.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r17);

        if $z2 == 0 goto label5;

        r17 = r18;

     label5:
        $r19 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, r17);

        return $r19;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, com.opengamma.util.time.Tenor, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r4, $r11, $r14, $r17, $r18;
        com.opengamma.util.time.Tenor r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        org.threeten.bp.Month $r10, $r12;
        org.threeten.bp.Period $r13;
        int $i0;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r15;
        org.threeten.bp.temporal.TemporalAdjuster $r16;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: com.opengamma.util.time.Tenor;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter4: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "Start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "Calendar");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Tenor");

        r4 = staticinvoke <com.opengamma.analytics.util.time.TenorUtils: org.threeten.bp.ZonedDateTime adjustDateByTenor(org.threeten.bp.ZonedDateTime,com.opengamma.util.time.Tenor,com.opengamma.financial.convention.calendar.Calendar,int)>(r0, r1, r3, 0);

        $z2 = virtualinvoke r1.<com.opengamma.util.time.Tenor: boolean isBusinessDayTenor()>();

        if $z2 == 0 goto label1;

        return r4;

     label1:
        $r10 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r11 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r0, 1, r3);

        $r12 = virtualinvoke $r11.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r10 == $r12 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        z1 = $z5;

        $r13 = virtualinvoke r1.<com.opengamma.util.time.Tenor: org.threeten.bp.Period getPeriod()>();

        $i0 = virtualinvoke $r13.<org.threeten.bp.Period: int getDays()>();

        if $i0 != 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        $z3 = $z6 & z0;

        $z4 = $z3 & z1;

        if $z4 == 0 goto label6;

        $r15 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r15.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        $r16 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        $r17 = virtualinvoke r4.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r16);

        $r18 = interfaceinvoke $r15.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, $r17);

        return $r18;

     label6:
        $r14 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, r4);

        return $r14;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.analytics.financial.instrument.index.GeneratorDeposit)
    {
        org.threeten.bp.ZonedDateTime r0, $r6;
        org.threeten.bp.Period r1;
        com.opengamma.analytics.financial.instrument.index.GeneratorDeposit r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention $r4;
        com.opengamma.financial.convention.calendar.Calendar $r5;
        boolean $z0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.analytics.financial.instrument.index.GeneratorDeposit;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Generator");

        $r4 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.GeneratorDeposit: com.opengamma.financial.convention.businessday.BusinessDayConvention getBusinessDayConvention()>();

        $r5 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.GeneratorDeposit: com.opengamma.financial.convention.calendar.Calendar getCalendar()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.GeneratorDeposit: boolean isEndOfMonth()>();

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r0, r1, $r4, $r5, $z0);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, $r6;
        org.threeten.bp.Period r1;
        com.opengamma.analytics.financial.instrument.index.IborIndex r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention $r5;
        boolean $z0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Index");

        $r5 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.IborIndex: com.opengamma.financial.convention.businessday.BusinessDayConvention getBusinessDayConvention()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.IborIndex: boolean isEndOfMonth()>();

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r0, r1, $r5, r3, $z0);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, $r6;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        org.threeten.bp.Period $r4;
        com.opengamma.financial.convention.businessday.BusinessDayConvention $r5;
        boolean $z0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Index");

        $r4 = virtualinvoke r1.<com.opengamma.analytics.financial.instrument.index.IborIndex: org.threeten.bp.Period getTenor()>();

        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.instrument.index.IborIndex: com.opengamma.financial.convention.businessday.BusinessDayConvention getBusinessDayConvention()>();

        $z0 = virtualinvoke r1.<com.opengamma.analytics.financial.instrument.index.IborIndex: boolean isEndOfMonth()>();

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r0, $r4, $r5, r2, $z0);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDate(org.threeten.bp.ZonedDateTime[], com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime[] r0, r3;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        int i0, i1;
        org.threeten.bp.ZonedDateTime $r4, $r5;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        i0 = lengthof r0;

        r3 = newarray (org.threeten.bp.ZonedDateTime)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0[i1];

        $r5 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,com.opengamma.analytics.financial.instrument.index.IborIndex,com.opengamma.financial.convention.calendar.Calendar)>($r4, r1, r2);

        r3[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.StubType)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r17, r21;
        org.threeten.bp.Period r2, $r11, $r13;
        com.opengamma.financial.convention.StubType r3, $r8, $r14, $r15, $r16;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z7, $z9, $z11, $z12, $z13, $z14;
        java.util.ArrayList $r9;
        int $i0, $i1, $i2, i3;
        org.threeten.bp.ZonedDateTime[] $r18, $r20, $r22, $r24;
        java.lang.Object[] $r19, $r23;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.StubType;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "Start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "End date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Period tenor");

        $z2 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Start date should be strictly before end date");

        $r8 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType SHORT_END>;

        $z3 = virtualinvoke r3.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>($r8);

        if $z3 != 0 goto label01;

        $r14 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType SHORT_START>;

        $z11 = virtualinvoke r3.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>($r14);

        if $z11 != 0 goto label01;

        $r15 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType NONE>;

        $z12 = virtualinvoke r3.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>($r15);

        if $z12 != 0 goto label01;

        $r16 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType BOTH>;

        $z13 = virtualinvoke r3.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>($r16);

        if $z13 == 0 goto label02;

     label01:
        $z14 = 1;

        goto label03;

     label02:
        $z14 = 0;

     label03:
        z0 = $z14;

        z1 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isGenerateFromEnd(com.opengamma.financial.convention.StubType)>(r3);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        if z1 != 0 goto label07;

        r17 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

     label04:
        $z7 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z7 == 0 goto label05;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r17);

        i3 = i3 + 1;

        $i2 = i3 + 1;

        $r13 = virtualinvoke r2.<org.threeten.bp.Period: org.threeten.bp.Period multipliedBy(int)>($i2);

        r17 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>($r13);

        goto label04;

     label05:
        if z0 != 0 goto label06;

        $z9 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r1);

        if $z9 != 0 goto label06;

        if i3 < 1 goto label06;

        $i1 = i3 - 1;

        interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>($i1);

     label06:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r18 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r19 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (org.threeten.bp.ZonedDateTime[]) $r19;

        return $r20;

     label07:
        r21 = r1;

     label08:
        $z4 = virtualinvoke r21.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r0);

        if $z4 == 0 goto label09;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r21);

        i3 = i3 + 1;

        $r11 = virtualinvoke r2.<org.threeten.bp.Period: org.threeten.bp.Period multipliedBy(int)>(i3);

        r21 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minus(org.threeten.bp.temporal.TemporalAmount)>($r11);

        goto label08;

     label09:
        if z0 != 0 goto label10;

        $z5 = virtualinvoke r21.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r0);

        if $z5 != 0 goto label10;

        if i3 <= 1 goto label10;

        $i0 = i3 - 1;

        interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>($i0);

     label10:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r9);

        $r22 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r23 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        $r24 = (org.threeten.bp.ZonedDateTime[]) $r23;

        return $r24;
    }

    public static org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, boolean, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r13, r17;
        org.threeten.bp.Period r2, $r10, $r12;
        boolean z0, z1, $z2, $z3, $z4, $z6, $z8;
        java.lang.Object[] $r7, $r15, $r19;
        java.util.ArrayList $r8;
        int $i0, $i1, $i2, i3;
        org.threeten.bp.ZonedDateTime[] $r14, $r16, $r18, $r20;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "Start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "End date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Period tenor");

        $z2 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r0;

        $r7[1] = r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "Start date {} should be strictly before end date {}", $r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        if z1 != 0 goto label4;

        r13 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

     label1:
        $z6 = virtualinvoke r13.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z6 == 0 goto label2;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r13);

        i3 = i3 + 1;

        $i2 = i3 + 1;

        $r12 = virtualinvoke r2.<org.threeten.bp.Period: org.threeten.bp.Period multipliedBy(int)>($i2);

        r13 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>($r12);

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $z8 = virtualinvoke r13.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r1);

        if $z8 != 0 goto label3;

        if i3 < 1 goto label3;

        $i1 = i3 - 1;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>($i1);

     label3:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r14 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r15 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (org.threeten.bp.ZonedDateTime[]) $r15;

        return $r16;

     label4:
        r17 = r1;

     label5:
        $z3 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r0);

        if $z3 == 0 goto label6;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r17);

        i3 = i3 + 1;

        $r10 = virtualinvoke r2.<org.threeten.bp.Period: org.threeten.bp.Period multipliedBy(int)>(i3);

        r17 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minus(org.threeten.bp.temporal.TemporalAmount)>($r10);

        goto label5;

     label6:
        if z0 != 0 goto label7;

        $z4 = virtualinvoke r17.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r0);

        if $z4 != 0 goto label7;

        if i3 <= 1 goto label7;

        $i0 = i3 - 1;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>($i0);

     label7:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r8);

        $r18 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r19 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (org.threeten.bp.ZonedDateTime[]) $r19;

        return $r20;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime[] r0, r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        boolean z0;
        int $i0, $i1, $i2, i3, i4;
        org.threeten.bp.ZonedDateTime $r4, $r5, $r7, $r9, $r10;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r6;
        org.threeten.bp.temporal.TemporalAdjuster $r8;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter3: boolean;

        $i0 = lengthof r0;

        r3 = newarray (org.threeten.bp.ZonedDateTime)[$i0];

        if z0 == 0 goto label3;

        $r6 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r6.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $r7 = r0[i3];

        $r8 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        $r9 = virtualinvoke $r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r8);

        $r10 = interfaceinvoke $r6.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r9);

        r3[i3] = $r10;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r3;

     label3:
        i4 = 0;

     label4:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $r4 = r0[i4];

        $r5 = interfaceinvoke r1.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r4);

        r3[i4] = $r5;

        i4 = i4 + 1;

        goto label4;

     label5:
        return r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime[] r0, r4, $r7, r20;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        boolean z0, $z1;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r3;
        int $i0, $i1, $i2, i3, i4, i5, $i6;
        java.util.TreeSet $r5;
        java.util.List $r6;
        java.lang.Object[] $r8;
        org.threeten.bp.ZonedDateTime $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r18;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r14;
        org.threeten.bp.temporal.TemporalAdjuster $r16;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter3: boolean;

        r3 := @parameter4: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        $i0 = lengthof r0;

        r4 = newarray (org.threeten.bp.ZonedDateTime)[$i0];

        if z0 == 0 goto label3;

        $r14 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r14.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $r15 = r0[i3];

        $r16 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        $r17 = virtualinvoke $r15.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r16);

        $r18 = interfaceinvoke $r14.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r17);

        r4[i3] = $r18;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;

     label3:
        if r3 == null goto label6;

        $z1 = r3 instanceof com.opengamma.financial.convention.rolldate.EndOfMonthRollDateAdjuster;

        if $z1 != 0 goto label6;

        i4 = 0;

     label4:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $r11 = r0[i4];

        $r12 = virtualinvoke $r11.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>(r3);

        $r13 = interfaceinvoke r1.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r12);

        r4[i4] = $r13;

        i4 = i4 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        i5 = 0;

     label7:
        $i6 = lengthof r0;

        if i5 >= $i6 goto label8;

        $r9 = r0[i5];

        $r10 = interfaceinvoke r1.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r9);

        r4[i5] = $r10;

        i5 = i5 + 1;

        goto label7;

     label8:
        $r5 = new java.util.TreeSet;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        specialinvoke $r5.<java.util.TreeSet: void <init>(java.util.Collection)>($r6);

        $r7 = newarray (org.threeten.bp.ZonedDateTime)[0];

        $r8 = virtualinvoke $r5.<java.util.TreeSet: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r20 = (org.threeten.bp.ZonedDateTime[]) $r8;

        return r20;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, boolean, boolean, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        org.threeten.bp.Period r2;
        boolean z0, z1, z2, $z4, $z5;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        org.threeten.bp.ZonedDateTime[] r5, $r6;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r3 := @parameter5: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter6: com.opengamma.financial.convention.calendar.Calendar;

        z2 := @parameter7: boolean;

        r5 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,boolean,boolean)>(r0, r1, r2, z0, z1);

        if z2 == 0 goto label1;

        $z4 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(z1, r0, r1, r4);

        if $z4 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r5, r3, r4, $z5);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, boolean, boolean, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        org.threeten.bp.Period r2;
        boolean z0, z1, z2, $z4, $z5;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r5;
        org.threeten.bp.ZonedDateTime[] r6, $r7;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r3 := @parameter5: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter6: com.opengamma.financial.convention.calendar.Calendar;

        z2 := @parameter7: boolean;

        r5 := @parameter8: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,boolean,boolean)>(r0, r1, r2, z0, z1);

        if z2 == 0 goto label1;

        $z4 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(z1, r0, r1, r4);

        if $z4 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>(r6, r3, r4, $z5, r5);

        return $r7;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.StubType, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        org.threeten.bp.Period r2;
        com.opengamma.financial.convention.StubType r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r4;
        com.opengamma.financial.convention.calendar.Calendar r5;
        boolean z0, $z2, $z3, $z4;
        org.threeten.bp.ZonedDateTime[] r6, $r7;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.StubType;

        r4 := @parameter4: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r5 := @parameter5: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter6: boolean;

        r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.StubType)>(r0, r1, r2, r3);

        if z0 == 0 goto label1;

        $z2 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isGenerateFromEnd(com.opengamma.financial.convention.StubType)>(r3);

        $z3 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>($z2, r0, r1, r5);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r6, r4, r5, $z4);

        return $r7;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.StubType, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        org.threeten.bp.Period r2;
        com.opengamma.financial.convention.StubType r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r4;
        com.opengamma.financial.convention.calendar.Calendar r5;
        boolean z0, $z2, $z3, $z4;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r6;
        org.threeten.bp.ZonedDateTime[] r7, $r8;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.StubType;

        r4 := @parameter4: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r5 := @parameter5: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter6: boolean;

        r6 := @parameter7: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.StubType)>(r0, r1, r2, r3);

        if z0 == 0 goto label1;

        $z2 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isGenerateFromEnd(com.opengamma.financial.convention.StubType)>(r3);

        $z3 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>($z2, r0, r1, r5);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $r8 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>(r7, r4, r5, $z4, r6);

        return $r8;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.StubType, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime r0, r1, $r10, $r11;
        org.threeten.bp.Period r2;
        com.opengamma.financial.convention.StubType r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r4;
        com.opengamma.financial.convention.calendar.Calendar r5;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r6;
        org.threeten.bp.ZonedDateTime[] r7, r8, $r9, $r12;
        boolean z0, z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.StubType;

        r4 := @parameter4: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r5 := @parameter5: com.opengamma.financial.convention.calendar.Calendar;

        r6 := @parameter6: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.StubType)>(r0, r1, r2, r3);

        $z2 = r6 instanceof com.opengamma.financial.convention.rolldate.EndOfMonthRollDateAdjuster;

        if $z2 == 0 goto label3;

        z0 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isGenerateFromEnd(com.opengamma.financial.convention.StubType)>(r3);

        z1 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(z0, r0, r1, r5);

        if z0 == 0 goto label1;

        $r12 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>(r7, r4, r5, z1, r6);

        return $r12;

     label1:
        r8 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>(r7, r4, r5, z1, r6);

        $i0 = lengthof r8;

        if $i0 <= 0 goto label2;

        $i1 = lengthof r8;

        $i2 = $i1 - 1;

        $r10 = r8[$i2];

        $z3 = virtualinvoke $r10.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z3 == 0 goto label2;

        $i3 = lengthof r8;

        $i4 = $i3 - 1;

        $r11 = interfaceinvoke r4.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r5, r1);

        r8[$i4] = $r11;

     label2:
        return r8;

     label3:
        $r9 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>(r7, r4, r5, 0, r6);

        return $r9;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[], org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.rolldate.RollDateAdjuster)
    {
        org.threeten.bp.ZonedDateTime[] r0, r5;
        org.threeten.bp.Period r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        com.opengamma.financial.convention.rolldate.RollDateAdjuster r4;
        int $i0, $i1, i2;
        org.threeten.bp.ZonedDateTime $r6, $r7;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        r4 := @parameter4: com.opengamma.financial.convention.rolldate.RollDateAdjuster;

        $i0 = lengthof r0;

        r5 = newarray (org.threeten.bp.ZonedDateTime)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r6 = r0[i2];

        $r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,com.opengamma.financial.convention.rolldate.RollDateAdjuster)>($r6, r1, r2, r3, r4);

        r5[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r5;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.frequency.Frequency, boolean, boolean, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        com.opengamma.financial.convention.frequency.Frequency r2;
        boolean z0, z1, z2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        org.threeten.bp.Period r5;
        org.threeten.bp.ZonedDateTime[] $r7;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.frequency.Frequency;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r3 := @parameter5: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter6: com.opengamma.financial.convention.calendar.Calendar;

        z2 := @parameter7: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Schedule frequency");

        r5 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.Period periodFromFrequency(com.opengamma.financial.convention.frequency.Frequency)>(r2);

        $r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,boolean,boolean,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r0, r1, r5, z0, z1, r3, r4, z2);

        return $r7;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, org.threeten.bp.Period, boolean, boolean, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r5;
        org.threeten.bp.Period r1, r2;
        boolean z0, z1, z2, $z4, $z5;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        org.threeten.bp.ZonedDateTime[] r6, $r7;
        int $i0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: org.threeten.bp.Period;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r3 := @parameter5: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter6: com.opengamma.financial.convention.calendar.Calendar;

        z2 := @parameter7: boolean;

        r5 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,boolean,boolean)>(r0, r5, r2, z0, z1);

        if z2 == 0 goto label1;

        $z4 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean eomApplies(boolean,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(z1, r0, r5, r4);

        if $z4 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.threeten.bp.Period: int getDays()>();

        if $i0 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r7 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r6, r3, r4, $z5);

        return $r7;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, boolean, boolean, com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0;
        org.threeten.bp.Period r1, $r4;
        boolean z0, z1, $z2;
        com.opengamma.analytics.financial.instrument.index.IborIndex r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention $r5;
        org.threeten.bp.ZonedDateTime[] $r6;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r3 := @parameter5: com.opengamma.financial.convention.calendar.Calendar;

        $r4 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.IborIndex: org.threeten.bp.Period getTenor()>();

        $r5 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.IborIndex: com.opengamma.financial.convention.businessday.BusinessDayConvention getBusinessDayConvention()>();

        $z2 = virtualinvoke r2.<com.opengamma.analytics.financial.instrument.index.IborIndex: boolean isEndOfMonth()>();

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,org.threeten.bp.Period,boolean,boolean,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean)>(r0, r1, $r4, z0, z1, $r5, r3, $z2);

        return $r6;
    }

    private static org.threeten.bp.Period periodFromFrequency(com.opengamma.financial.convention.frequency.Frequency)
    {
        com.opengamma.financial.convention.frequency.Frequency r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        com.opengamma.financial.convention.frequency.SimpleFrequency $r2;
        org.threeten.bp.Period $r3;
        com.opengamma.financial.convention.frequency.PeriodFrequency r4;

        r0 := @parameter0: com.opengamma.financial.convention.frequency.Frequency;

        $z0 = r0 instanceof com.opengamma.financial.convention.frequency.PeriodFrequency;

        if $z0 == 0 goto label1;

        r4 = (com.opengamma.financial.convention.frequency.PeriodFrequency) r0;

        goto label3;

     label1:
        $z1 = r0 instanceof com.opengamma.financial.convention.frequency.SimpleFrequency;

        if $z1 == 0 goto label2;

        $r2 = (com.opengamma.financial.convention.frequency.SimpleFrequency) r0;

        r4 = virtualinvoke $r2.<com.opengamma.financial.convention.frequency.SimpleFrequency: com.opengamma.financial.convention.frequency.PeriodFrequency toPeriodFrequency()>();

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For the moment can only deal with PeriodFrequency and SimpleFrequency");

        throw $r1;

     label3:
        $r3 = virtualinvoke r4.<com.opengamma.financial.convention.frequency.PeriodFrequency: org.threeten.bp.Period getPeriod()>();

        return $r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.frequency.Frequency)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        com.opengamma.financial.convention.frequency.Frequency r2;
        boolean $z0;
        org.threeten.bp.ZonedDateTime[] $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.frequency.Frequency;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "effective date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "maturity date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "frequency");

        $z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Effective date was after maturity");

        throw $r7;

     label1:
        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.frequency.Frequency)>(r0, r0, r1, r2);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.frequency.Frequency)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r2, r20;
        com.opengamma.financial.convention.frequency.Frequency r3;
        org.threeten.bp.Period r4;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.IllegalArgumentException $r10, $r16, $r17;
        com.opengamma.financial.convention.frequency.SimpleFrequency $r11;
        java.util.ArrayList $r12;
        org.threeten.bp.ZonedDateTime[] $r13, $r15;
        java.lang.Object[] $r14;
        com.opengamma.financial.convention.frequency.PeriodFrequency r18;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.ZonedDateTime;

        r3 := @parameter3: com.opengamma.financial.convention.frequency.Frequency;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "effective date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "accrual date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "maturity date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "frequency");

        $z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z0 == 0 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Effective date was after maturity");

        throw $r17;

     label1:
        $z1 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z1 == 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accrual date was after maturity");

        throw $r16;

     label2:
        $z2 = r3 instanceof com.opengamma.financial.convention.frequency.PeriodFrequency;

        if $z2 == 0 goto label3;

        r18 = (com.opengamma.financial.convention.frequency.PeriodFrequency) r3;

        goto label5;

     label3:
        $z3 = r3 instanceof com.opengamma.financial.convention.frequency.SimpleFrequency;

        if $z3 == 0 goto label4;

        $r11 = (com.opengamma.financial.convention.frequency.SimpleFrequency) r3;

        r18 = virtualinvoke $r11.<com.opengamma.financial.convention.frequency.SimpleFrequency: com.opengamma.financial.convention.frequency.PeriodFrequency toPeriodFrequency()>();

        goto label5;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For the moment can only deal with PeriodFrequency and SimpleFrequency");

        throw $r10;

     label5:
        r4 = virtualinvoke r18.<com.opengamma.financial.convention.frequency.PeriodFrequency: org.threeten.bp.Period getPeriod()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r20 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r4);

     label6:
        $z5 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isWithinSwapLifetime(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r20, r2);

        if $z5 == 0 goto label7;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r20);

        r20 = virtualinvoke r20.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r4);

        goto label6;

     label7:
        $r13 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r14 = interfaceinvoke $r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (org.threeten.bp.ZonedDateTime[]) $r14;

        return $r15;
    }

    public static org.threeten.bp.ZonedDateTime[] getUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r2, r17;
        org.threeten.bp.Period r3, $r13;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r9;
        org.threeten.bp.ZonedDateTime[] $r10, $r12;
        java.lang.Object[] $r11;
        java.lang.IllegalArgumentException $r14, $r15;
        int i0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.ZonedDateTime;

        r3 := @parameter3: org.threeten.bp.Period;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "effective date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "accrual date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "maturity date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "period");

        $z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z0 == 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Effective date was after maturity");

        throw $r15;

     label1:
        $z1 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z1 == 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accrual date was after maturity");

        throw $r14;

     label2:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i0 = 1;

        r17 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r3);

     label3:
        $z2 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: boolean isWithinSwapLifetime(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r17, r2);

        if $z2 == 0 goto label4;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r17);

        i0 = i0 + 1;

        $r13 = virtualinvoke r3.<org.threeten.bp.Period: org.threeten.bp.Period multipliedBy(int)>(i0);

        r17 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>($r13);

        goto label3;

     label4:
        $r10 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (org.threeten.bp.ZonedDateTime[]) $r11;

        return $r12;
    }

    public static org.threeten.bp.ZonedDateTime[] getBackwardsUnadjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.frequency.Frequency)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r16;
        com.opengamma.financial.convention.frequency.Frequency r2;
        org.threeten.bp.Period r3;
        boolean $z0, $z1, $z2, $z4;
        java.lang.IllegalArgumentException $r8, $r14;
        com.opengamma.financial.convention.frequency.SimpleFrequency $r9;
        java.util.ArrayList $r10;
        org.threeten.bp.ZonedDateTime[] $r11, $r13;
        java.lang.Object[] $r12;
        double $d0;
        byte $b0;
        com.opengamma.financial.convention.frequency.PeriodFrequency r15;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.frequency.Frequency;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "effective date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "maturity date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "frequency");

        $z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z0 == 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Effective date was after maturity");

        throw $r14;

     label1:
        $z1 = r2 instanceof com.opengamma.financial.convention.frequency.PeriodFrequency;

        if $z1 == 0 goto label2;

        r15 = (com.opengamma.financial.convention.frequency.PeriodFrequency) r2;

        goto label4;

     label2:
        $z2 = r2 instanceof com.opengamma.financial.convention.frequency.SimpleFrequency;

        if $z2 == 0 goto label3;

        $r9 = (com.opengamma.financial.convention.frequency.SimpleFrequency) r2;

        r15 = virtualinvoke $r9.<com.opengamma.financial.convention.frequency.SimpleFrequency: com.opengamma.financial.convention.frequency.PeriodFrequency toPeriodFrequency()>();

        goto label4;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For the moment can only deal with PeriodFrequency and SimpleFrequency");

        throw $r8;

     label4:
        r3 = virtualinvoke r15.<com.opengamma.financial.convention.frequency.PeriodFrequency: org.threeten.bp.Period getPeriod()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r16 = r1;

     label5:
        $z4 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r0);

        if $z4 == 0 goto label6;

        $d0 = staticinvoke <com.opengamma.util.time.DateUtils: double getExactDaysBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r0, r16);

        $b0 = $d0 cmpl 4.0;

        if $b0 <= 0 goto label6;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r16);

        r16 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minus(org.threeten.bp.temporal.TemporalAmount)>(r3);

        goto label5;

     label6:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r10);

        $r11 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (org.threeten.bp.ZonedDateTime[]) $r12;

        return $r13;
    }

    private static boolean isWithinSwapLifetime(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        boolean $z0;
        int $i0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        $z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i0 = staticinvoke <com.opengamma.util.time.DateUtils: int getDaysBetween(org.threeten.bp.temporal.Temporal,org.threeten.bp.temporal.Temporal)>(r0, r1);

        if $i0 >= 7 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime[] r0, $r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r1;
        com.opengamma.financial.convention.calendar.Calendar r2;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        $r3 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[],com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,int)>(r0, r1, r2, 0);

        return $r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, int)
    {
        org.threeten.bp.ZonedDateTime[] r0, r3;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        int i0, i1, $i2, i3, i4, i5;
        org.threeten.bp.ZonedDateTime $r7, r10;
        org.threeten.bp.LocalDate $r8, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        i0 := @parameter3: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r0, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "calendar");

        i1 = lengthof r0;

        r3 = newarray (org.threeten.bp.ZonedDateTime)[i1];

        i3 = 0;

     label01:
        if i3 >= i1 goto label11;

        $r7 = r0[i3];

        r10 = interfaceinvoke r1.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, $r7);

        if i0 <= 0 goto label06;

        i4 = 0;

     label02:
        if i4 >= i0 goto label05;

        r10 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

     label03:
        $r9 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z1 = interfaceinvoke r2.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r9);

        if $z1 != 0 goto label04;

        r10 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        goto label03;

     label04:
        i4 = i4 + 1;

        goto label02;

     label05:
        goto label10;

     label06:
        i5 = 0;

     label07:
        $i2 = neg i0;

        if i5 >= $i2 goto label10;

        r10 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

     label08:
        $r8 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z0 = interfaceinvoke r2.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r8);

        if $z0 != 0 goto label09;

        r10 = virtualinvoke r10.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

        goto label08;

     label09:
        i5 = i5 + 1;

        goto label07;

     label10:
        r3[i3] = r10;

        i3 = i3 + 1;

        goto label01;

     label11:
        return r3;
    }

    public static org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, int)
    {
        org.threeten.bp.ZonedDateTime r0, r8;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r1;
        com.opengamma.financial.convention.calendar.Calendar r2;
        int i0, $i1, i2, i3;
        org.threeten.bp.LocalDate $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r2 := @parameter2: com.opengamma.financial.convention.calendar.Calendar;

        i0 := @parameter3: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "calendar");

        r8 = interfaceinvoke r1.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r2, r0);

        if i0 <= 0 goto label5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r8 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

     label2:
        $r7 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z1 = interfaceinvoke r2.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r7);

        if $z1 != 0 goto label3;

        r8 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        goto label9;

     label5:
        i3 = 0;

     label6:
        $i1 = neg i0;

        if i3 >= $i1 goto label9;

        r8 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

     label7:
        $r6 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.LocalDate toLocalDate()>();

        $z0 = interfaceinvoke r2.<com.opengamma.financial.convention.calendar.Calendar: boolean isWorkingDay(org.threeten.bp.LocalDate)>($r6);

        if $z0 != 0 goto label8;

        r8 = virtualinvoke r8.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>(1L);

        goto label7;

     label8:
        i3 = i3 + 1;

        goto label6;

     label9:
        return r8;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1, $r7, $r9, $r11, $r12, $r15, $r16, r23, r24, $r25;
        org.threeten.bp.Period r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3, r22;
        com.opengamma.financial.convention.calendar.Calendar r4;
        boolean z0, z1, $z2, $z5, z7, $z8;
        int $i0, $i1, $i2;
        com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention $r8;
        org.threeten.bp.temporal.TemporalAdjuster $r10, $r13;
        com.opengamma.financial.convention.businessday.FollowingBusinessDayConvention $r14;
        org.threeten.bp.Month $r17, $r18;
        java.util.ArrayList $r20;
        org.threeten.bp.ZonedDateTime[] $r26, $r28;
        java.lang.Object[] $r27;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter4: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z7 = 0;

        if z0 == 0 goto label3;

        $r14 = new com.opengamma.financial.convention.businessday.FollowingBusinessDayConvention;

        specialinvoke $r14.<com.opengamma.financial.convention.businessday.FollowingBusinessDayConvention: void <init>()>();

        $r15 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        $r16 = interfaceinvoke $r14.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r4, $r15);

        $r17 = virtualinvoke $r16.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r18 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r17 == $r18 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        z7 = $z8;

     label3:
        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        if z7 == 0 goto label5;

        $r8 = new com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention;

        specialinvoke $r8.<com.opengamma.financial.convention.businessday.PrecedingBusinessDayConvention: void <init>()>();

        r22 = $r8;

        $r9 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

        $r10 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        r23 = virtualinvoke $r9.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r10);

     label4:
        $z5 = virtualinvoke r23.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z5 == 0 goto label7;

        $r11 = interfaceinvoke $r8.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r4, r23);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r23.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

        $r13 = staticinvoke <org.threeten.bp.temporal.TemporalAdjusters: org.threeten.bp.temporal.TemporalAdjuster lastDayOfMonth()>();

        r23 = virtualinvoke $r12.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>($r13);

        goto label4;

     label5:
        r22 = r3;

        r24 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

     label6:
        $z2 = virtualinvoke r24.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z2 == 0 goto label7;

        $r7 = interfaceinvoke r3.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r4, r24);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r7);

        r24 = virtualinvoke r24.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r2);

        goto label6;

     label7:
        if z1 != 0 goto label8;

        $i0 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i0 < 1 goto label8;

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        interfaceinvoke $r20.<java.util.List: java.lang.Object remove(int)>($i2);

     label8:
        $r25 = interfaceinvoke r22.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r4, r1);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY>;

        $r27 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r26);

        $r28 = (org.threeten.bp.ZonedDateTime[]) $r27;

        return $r28;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.frequency.Frequency, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        com.opengamma.financial.convention.frequency.Frequency r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        boolean z0, $z1, $z2;
        org.threeten.bp.Period r5;
        java.lang.IllegalArgumentException $r6;
        com.opengamma.financial.convention.frequency.SimpleFrequency $r7;
        org.threeten.bp.ZonedDateTime[] $r8;
        com.opengamma.financial.convention.frequency.PeriodFrequency r9;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.frequency.Frequency;

        r3 := @parameter3: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter4: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter5: boolean;

        $z1 = r2 instanceof com.opengamma.financial.convention.frequency.PeriodFrequency;

        if $z1 == 0 goto label1;

        r9 = (com.opengamma.financial.convention.frequency.PeriodFrequency) r2;

        goto label3;

     label1:
        $z2 = r2 instanceof com.opengamma.financial.convention.frequency.SimpleFrequency;

        if $z2 == 0 goto label2;

        $r7 = (com.opengamma.financial.convention.frequency.SimpleFrequency) r2;

        r9 = virtualinvoke $r7.<com.opengamma.financial.convention.frequency.SimpleFrequency: com.opengamma.financial.convention.frequency.PeriodFrequency toPeriodFrequency()>();

        goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For the moment can only deal with PeriodFrequency and SimpleFrequency");

        throw $r6;

     label3:
        r5 = virtualinvoke r9.<com.opengamma.financial.convention.frequency.PeriodFrequency: org.threeten.bp.Period getPeriod()>();

        $r8 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,boolean)>(r0, r1, r5, r3, r4, z0, 1);

        return $r8;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        org.threeten.bp.Period r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        boolean z0;
        org.threeten.bp.ZonedDateTime[] $r5;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter4: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter5: boolean;

        $r5 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,boolean)>(r0, r1, r2, r3, r4, z0, 1);

        return $r5;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r5;
        org.threeten.bp.Period r1, r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        boolean z0, z1;
        org.threeten.bp.ZonedDateTime[] $r6;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter4: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r5 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,boolean)>(r0, r5, r2, r3, r4, z0, z1);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.Period, org.threeten.bp.Period, com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, boolean)
    {
        org.threeten.bp.ZonedDateTime r0, r5;
        org.threeten.bp.Period r1, r2;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r3;
        com.opengamma.financial.convention.calendar.Calendar r4;
        boolean z0;
        org.threeten.bp.ZonedDateTime[] $r6;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.Period;

        r2 := @parameter2: org.threeten.bp.Period;

        r3 := @parameter3: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r4 := @parameter4: com.opengamma.financial.convention.calendar.Calendar;

        z0 := @parameter5: boolean;

        r5 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r1);

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] getAdjustedDateSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,org.threeten.bp.Period,com.opengamma.financial.convention.businessday.BusinessDayConvention,com.opengamma.financial.convention.calendar.Calendar,boolean,boolean)>(r0, r5, r2, r3, r4, z0, 1);

        return $r6;
    }

    public static org.threeten.bp.ZonedDateTime[] getSettlementDateSchedule(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.businessday.BusinessDayConvention, int)
    {
        org.threeten.bp.ZonedDateTime[] r0, r3;
        com.opengamma.financial.convention.calendar.Calendar r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        int i0, i1, i2, i3;
        org.threeten.bp.ZonedDateTime $r6, $r7, $r8, r9;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.calendar.Calendar;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        i0 := @parameter3: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r0, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "calendar");

        i1 = lengthof r0;

        r3 = newarray (org.threeten.bp.ZonedDateTime)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        $r6 = r0[i2];

        $r7 = virtualinvoke $r6.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        r9 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r1, $r7);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r8 = virtualinvoke r9.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusDays(long)>(1L);

        r9 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r1, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        r3[i2] = r9;

        i2 = i2 + 1;

        goto label1;

     label4:
        return r3;
    }

    public static org.threeten.bp.LocalDate[] getSettlementDateSchedule(org.threeten.bp.LocalDate[], com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.businessday.BusinessDayConvention, int)
    {
        org.threeten.bp.LocalDate[] r0, r3;
        com.opengamma.financial.convention.calendar.Calendar r1;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        int i0, i1, i2, i3;
        org.threeten.bp.LocalDate $r6, $r7, $r8, r9;

        r0 := @parameter0: org.threeten.bp.LocalDate[];

        r1 := @parameter1: com.opengamma.financial.convention.calendar.Calendar;

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        i0 := @parameter3: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r0, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "calendar");

        i1 = lengthof r0;

        r3 = newarray (org.threeten.bp.LocalDate)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        $r6 = r0[i2];

        $r7 = virtualinvoke $r6.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusDays(long)>(1L);

        r9 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.LocalDate adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.LocalDate)>(r1, $r7);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r8 = virtualinvoke r9.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusDays(long)>(1L);

        r9 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.LocalDate adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.LocalDate)>(r1, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        r3[i2] = r9;

        i2 = i2 + 1;

        goto label1;

     label4:
        return r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedResetDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, int)
    {
        org.threeten.bp.ZonedDateTime r0, $r9, $r10, $r11;
        org.threeten.bp.ZonedDateTime[] r1, r4;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        int i0, i1, $i2, i4;
        long $l3;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime[];

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        i0 := @parameter4: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "effective date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r1, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "calendar");

        i1 = lengthof r1;

        r4 = newarray (org.threeten.bp.ZonedDateTime)[i1];

        r4[0] = r0;

        i4 = 1;

     label1:
        if i4 >= i1 goto label2;

        $i2 = i4 - 1;

        $r9 = r1[$i2];

        $l3 = (long) i0;

        $r10 = virtualinvoke $r9.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusDays(long)>($l3);

        $r11 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, $r10);

        r4[i4] = $r11;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r4;
    }

    public static org.threeten.bp.ZonedDateTime[] getAdjustedMaturityDateSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.businessday.BusinessDayConvention, com.opengamma.financial.convention.calendar.Calendar, com.opengamma.financial.convention.frequency.Frequency)
    {
        org.threeten.bp.ZonedDateTime r0, $r13, $r14, $r15, $r16;
        org.threeten.bp.ZonedDateTime[] r1, r6;
        com.opengamma.financial.convention.businessday.BusinessDayConvention r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        com.opengamma.financial.convention.frequency.Frequency r4;
        org.threeten.bp.Period r5;
        int i0, $i1, i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r11;
        com.opengamma.financial.convention.frequency.SimpleFrequency $r12;
        com.opengamma.financial.convention.frequency.PeriodFrequency r17;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime[];

        r2 := @parameter2: com.opengamma.financial.convention.businessday.BusinessDayConvention;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        r4 := @parameter4: com.opengamma.financial.convention.frequency.Frequency;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r1, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "convention");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "calendar");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "frequency");

        $z0 = r4 instanceof com.opengamma.financial.convention.frequency.PeriodFrequency;

        if $z0 == 0 goto label1;

        r17 = (com.opengamma.financial.convention.frequency.PeriodFrequency) r4;

        goto label3;

     label1:
        $z1 = r4 instanceof com.opengamma.financial.convention.frequency.SimpleFrequency;

        if $z1 == 0 goto label2;

        $r12 = (com.opengamma.financial.convention.frequency.SimpleFrequency) r4;

        r17 = virtualinvoke $r12.<com.opengamma.financial.convention.frequency.SimpleFrequency: com.opengamma.financial.convention.frequency.PeriodFrequency toPeriodFrequency()>();

        goto label3;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("For the moment can only deal with PeriodFrequency and SimpleFrequency");

        throw $r11;

     label3:
        r5 = virtualinvoke r17.<com.opengamma.financial.convention.frequency.PeriodFrequency: org.threeten.bp.Period getPeriod()>();

        i0 = lengthof r1;

        r6 = newarray (org.threeten.bp.ZonedDateTime)[i0];

        $r13 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r5);

        r6[0] = $r13;

        i2 = 1;

     label4:
        if i2 >= i0 goto label5;

        $i1 = i2 - 1;

        $r14 = r1[$i1];

        $r15 = virtualinvoke $r14.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>(r5);

        $r16 = interfaceinvoke r2.<com.opengamma.financial.convention.businessday.BusinessDayConvention: org.threeten.bp.ZonedDateTime adjustDate(com.opengamma.financial.convention.calendar.Calendar,org.threeten.bp.ZonedDateTime)>(r3, $r15);

        r6[i2] = $r16;

        i2 = i2 + 1;

        goto label4;

     label5:
        return r6;
    }

    public static double[] getTimes(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.daycount.DayCount, org.threeten.bp.ZonedDateTime)
    {
        org.threeten.bp.ZonedDateTime[] r0;
        com.opengamma.financial.convention.daycount.DayCount r1;
        org.threeten.bp.ZonedDateTime r2, $r7, $r8, $r9;
        int i0, i1;
        double[] r3;
        boolean $z0;
        double $d0, d1;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.daycount.DayCount;

        r2 := @parameter2: org.threeten.bp.ZonedDateTime;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r0, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "day count");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "from date");

        i0 = lengthof r0;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r7 = r0[i1];

        $z0 = virtualinvoke $r7.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z0 == 0 goto label2;

        $r9 = r0[i1];

        d1 = interfaceinvoke r1.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r2, $r9);

        goto label3;

     label2:
        $r8 = r0[i1];

        $d0 = interfaceinvoke r1.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>($r8, r2);

        d1 = neg $d0;

     label3:
        r3[i1] = d1;

        i1 = i1 + 1;

        goto label1;

     label4:
        return r3;
    }

    public static int numberOfNegativeValues(double[])
    {
        double[] r0;
        int i0, i2, i3;
        double d0;
        byte $b1;

        r0 := @parameter0: double[];

        i2 = 0;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        d0 = r0[i3];

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public static double[] removeFirstNValues(double[], int)
    {
        double[] r0, $r1;
        int i0, $i1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r0, i0, $i1);

        return $r1;
    }

    public static double[] getYearFractions(org.threeten.bp.ZonedDateTime[], com.opengamma.financial.convention.daycount.DayCount, org.threeten.bp.ZonedDateTime)
    {
        org.threeten.bp.ZonedDateTime[] r0;
        com.opengamma.financial.convention.daycount.DayCount r1;
        org.threeten.bp.ZonedDateTime r2, $r7, $r8, $r9;
        int i0, $i1, i2;
        double[] r3;
        double $d0, $d1;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: com.opengamma.financial.convention.daycount.DayCount;

        r2 := @parameter2: org.threeten.bp.ZonedDateTime;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r0, "dates");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "day count");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "from date");

        i0 = lengthof r0;

        r3 = newarray (double)[i0];

        $r7 = r0[0];

        $d0 = interfaceinvoke r1.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r2, $r7);

        r3[0] = $d0;

        i2 = 1;

     label1:
        if i2 >= i0 goto label2;

        $i1 = i2 - 1;

        $r9 = r0[$i1];

        $r8 = r0[i2];

        $d1 = interfaceinvoke r1.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>($r9, $r8);

        r3[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    public static org.threeten.bp.ZonedDateTime[] getStartDates(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime[])
    {
        org.threeten.bp.ZonedDateTime r0;
        org.threeten.bp.ZonedDateTime[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime[];

        $i0 = lengthof r1;

        r2 = newarray (org.threeten.bp.ZonedDateTime)[$i0];

        r2[0] = r0;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 1, $i2);

        return r2;
    }

    private static boolean isGenerateFromEnd(com.opengamma.financial.convention.StubType)
    {
        com.opengamma.financial.convention.StubType r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.opengamma.financial.convention.StubType;

        $r1 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType LONG_START>;

        $z0 = virtualinvoke $r1.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = <com.opengamma.financial.convention.StubType: com.opengamma.financial.convention.StubType SHORT_START>;

        $z1 = virtualinvoke $r2.<com.opengamma.financial.convention.StubType: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean eomApplies(boolean, org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.calendar.Calendar)
    {
        boolean z0, $z1, $z2;
        org.threeten.bp.ZonedDateTime r0, r1, $r3, $r6;
        com.opengamma.financial.convention.calendar.Calendar r2;
        org.threeten.bp.Month $r4, $r5, $r7, $r8;

        z0 := @parameter0: boolean;

        r0 := @parameter1: org.threeten.bp.ZonedDateTime;

        r1 := @parameter2: org.threeten.bp.ZonedDateTime;

        r2 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        if z0 == 0 goto label3;

        $r6 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r1, 1, r2);

        $r7 = virtualinvoke $r6.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r8 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r7 == $r8 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r3 = staticinvoke <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime getAdjustedDate(org.threeten.bp.ZonedDateTime,int,com.opengamma.financial.convention.calendar.Calendar)>(r0, 1, r2);

        $r4 = virtualinvoke $r3.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $r5 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        if $r4 == $r5 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    static void <clinit>()
    {
        org.threeten.bp.ZonedDateTime[] $r0;

        $r0 = newarray (org.threeten.bp.ZonedDateTime)[0];

        <com.opengamma.analytics.financial.schedule.ScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ARRAY> = $r0;

        return;
    }
}
