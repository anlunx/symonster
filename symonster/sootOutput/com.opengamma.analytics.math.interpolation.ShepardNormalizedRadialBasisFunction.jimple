public class com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final double _power;

    public void <init>(double)
    {
        com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction r0;
        double d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction: double _power> = d0;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction r0;
        java.lang.Double r1, $r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction: double _power>;

        $d2 = neg $d1;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d2);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        return $r2;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ShepardNormalizedRadialBasisFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
