public class com.opengamma.analytics.math.ComplexMathUtils extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.ComplexMathUtils r0;

        r0 := @this: com.opengamma.analytics.math.ComplexMathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber, com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "z2");

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d5 = $d3 + $d4;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d5);

        return $r4;
    }

    public static transient com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber[])
    {
        com.opengamma.analytics.math.number.ComplexNumber[] r0;
        int i0, i1;
        com.opengamma.analytics.math.number.ComplexNumber $r2, $r3, $r4;
        double $d0, $d1, d2, d3;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        i0 = lengthof r0;

        d2 = 0.0;

        d3 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0[i1];

        $d0 = virtualinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d2 = d2 + $d0;

        $r4 = r0[i1];

        $d1 = virtualinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        d3 = d3 + $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(d2, d3);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber add(com.opengamma.analytics.math.number.ComplexNumber, double)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, $d1, $d2, $d3;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 + d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d3);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber add(double, com.opengamma.analytics.math.number.ComplexNumber)
    {
        double d0, $d1, $d2, $d3;
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 + d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d3);

        return $r2;
    }

    public static double arg(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0;
        double $d0, $d1, $d2;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        return $d2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber conjugate(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double $d0, $d1, $d2;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d2 = neg $d1;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d0, $d2);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber, com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r4, $r5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21, d22, d23;
        byte $b0;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "z2");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $d5 = staticinvoke <java.lang.Math: double abs(double)>(d3);

        $b0 = $d4 cmpl $d5;

        if $b0 <= 0 goto label1;

        d20 = d3 / d2;

        $d13 = d3 * d20;

        d21 = d2 + $d13;

        $r5 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d14 = d1 * d20;

        $d15 = d0 + $d14;

        $d19 = $d15 / d21;

        $d16 = d0 * d20;

        $d17 = d1 - $d16;

        $d18 = $d17 / d21;

        specialinvoke $r5.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d19, $d18);

        return $r5;

     label1:
        d22 = d2 / d3;

        $d6 = d2 * d22;

        d23 = $d6 + d3;

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d7 = d0 * d22;

        $d8 = $d7 + d1;

        $d12 = $d8 / d23;

        $d9 = d1 * d22;

        $d10 = $d9 - d0;

        $d11 = $d10 / d23;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d12, $d11);

        return $r4;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber divide(com.opengamma.analytics.math.number.ComplexNumber, double)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 / d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = $d3 / d0;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d4);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber divide(double, com.opengamma.analytics.math.number.ComplexNumber)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18;
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2, $r3;
        byte $b0;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d2 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $d4 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $b0 = $d3 cmpl $d4;

        if $b0 <= 0 goto label1;

        d15 = d2 / d1;

        $d10 = d2 * d15;

        d16 = d1 + $d10;

        $r3 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d14 = d0 / d16;

        $d11 = neg d0;

        $d12 = $d11 * d15;

        $d13 = $d12 / d16;

        specialinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d14, $d13);

        return $r3;

     label1:
        d17 = d1 / d2;

        $d5 = d1 * d17;

        d18 = $d5 + d2;

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d6 = d0 * d17;

        $d9 = $d6 / d18;

        $d7 = neg d0;

        $d8 = $d7 / d18;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d9, $d8);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber exp(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d0 = staticinvoke <java.lang.Math: double exp(double)>($d1);

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d4 = d0 * $d3;

        $d5 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d7 = d0 * $d6;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d4, $d7);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber inverse(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2, $r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12, d13, d14;
        byte $b0;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $b0 = $d2 cmpl $d3;

        if $b0 <= 0 goto label1;

        d11 = d1 / d0;

        $d7 = d1 * d11;

        d12 = d0 + $d7;

        $r3 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d10 = 1.0 / d12;

        $d8 = neg d11;

        $d9 = $d8 / d12;

        specialinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d10, $d9);

        return $r3;

     label1:
        d13 = d0 / d1;

        $d4 = d0 * d13;

        d14 = $d4 + d1;

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d6 = d13 / d14;

        $d5 = -1.0 / d14;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d6, $d5);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber log(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d0, $d1);

        $d3 = staticinvoke <java.lang.Math: double log(double)>($d2);

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d5 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d6 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d5);

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d3, $d6);

        return $r2;
    }

    public static double mod(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0;
        double $d0, $d1, $d2;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d0, $d1);

        return $d2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber square(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d3 = d0 * d0;

        $d2 = d1 * d1;

        $d6 = $d3 - $d2;

        $d4 = 2.0 * d0;

        $d5 = $d4 * d1;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d6, $d5);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber, com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r4;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "z2");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d5 = d0 * d2;

        $d4 = d1 * d3;

        $d9 = $d5 - $d4;

        $d7 = d0 * d3;

        $d6 = d1 * d2;

        $d8 = $d7 + $d6;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d9, $d8);

        return $r4;
    }

    public static transient com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber[])
    {
        com.opengamma.analytics.math.number.ComplexNumber[] r0;
        int i0, i1;
        com.opengamma.analytics.math.number.ComplexNumber $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        boolean $z0;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        i0 = lengthof r0;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "nothing to multiply");

        if i0 != 1 goto label3;

        $r8 = r0[0];

        return $r8;

     label3:
        if i0 != 2 goto label4;

        $r6 = r0[0];

        $r5 = r0[1];

        $r7 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r6, $r5);

        return $r7;

     label4:
        $r3 = r0[0];

        $r2 = r0[1];

        r9 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r3, $r2);

        i1 = 2;

     label5:
        if i1 >= i0 goto label6;

        $r4 = r0[i1];

        r9 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>(r9, $r4);

        i1 = i1 + 1;

        goto label5;

     label6:
        return r9;
    }

    public static transient com.opengamma.analytics.math.number.ComplexNumber multiply(double, com.opengamma.analytics.math.number.ComplexNumber[])
    {
        double d0;
        com.opengamma.analytics.math.number.ComplexNumber[] r0;
        com.opengamma.analytics.math.number.ComplexNumber r1, $r2;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber[];

        r1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber[])>(r0);

        $r2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber multiply(double,com.opengamma.analytics.math.number.ComplexNumber)>(d0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber multiply(com.opengamma.analytics.math.number.ComplexNumber, double)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 * d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = $d3 * d0;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d4);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber multiply(double, com.opengamma.analytics.math.number.ComplexNumber)
    {
        double d0, $d1, $d2, $d3, $d4;
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 * d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = $d3 * d0;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d4);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber pow(com.opengamma.analytics.math.number.ComplexNumber, com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r4;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "z2");

        d0 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: double mod(com.opengamma.analytics.math.number.ComplexNumber)>(r0);

        d1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: double arg(com.opengamma.analytics.math.number.ComplexNumber)>(r0);

        $d4 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d4);

        $d6 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d7 = neg $d6;

        $d8 = $d7 * d1;

        $d9 = staticinvoke <java.lang.Math: double exp(double)>($d8);

        d2 = $d5 * $d9;

        $d10 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d11 = $d10 * d1;

        $d12 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d13 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d14 = $d12 * $d13;

        d3 = $d11 + $d14;

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d15 = staticinvoke <java.lang.Math: double cos(double)>(d3);

        $d16 = d2 * $d15;

        $d17 = staticinvoke <java.lang.Math: double sin(double)>(d3);

        $d18 = d2 * $d17;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d16, $d18);

        return $r4;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber pow(com.opengamma.analytics.math.number.ComplexNumber, double)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        d0 := @parameter1: double;

        d1 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: double mod(com.opengamma.analytics.math.number.ComplexNumber)>(r0);

        d2 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: double arg(com.opengamma.analytics.math.number.ComplexNumber)>(r0);

        d3 = staticinvoke <java.lang.Math: double pow(double,double)>(d1, d0);

        $r1 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d4 = d0 * d2;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        $d7 = d3 * $d5;

        $d6 = d0 * d2;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $d9 = d3 * $d8;

        specialinvoke $r1.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d7, $d9);

        return $r1;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber pow(double, com.opengamma.analytics.math.number.ComplexNumber)
    {
        double d0;
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2, $r3;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(d0, 0.0);

        $r3 = staticinvoke <com.opengamma.analytics.math.ComplexMathUtils: com.opengamma.analytics.math.number.ComplexNumber pow(com.opengamma.analytics.math.number.ComplexNumber,com.opengamma.analytics.math.number.ComplexNumber)>($r2, r0);

        return $r3;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber sqrt(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2, $r3, $r4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31;
        byte $b0, $b1, $b2, $b3, $b4;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label1;

        return r0;

     label1:
        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        d29 = d1 / d0;

        $d21 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d22 = staticinvoke <java.lang.Math: double sqrt(double)>($d21);

        $d23 = d29 * d29;

        $d24 = 1.0 + $d23;

        $d25 = staticinvoke <java.lang.Math: double sqrt(double)>($d24);

        $d26 = 1.0 + $d25;

        $d27 = $d26 / 2.0;

        $d28 = staticinvoke <java.lang.Math: double sqrt(double)>($d27);

        d30 = $d22 * $d28;

        goto label3;

     label2:
        d31 = d0 / d1;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>(d1);

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d6 = staticinvoke <java.lang.Math: double abs(double)>(d31);

        $d7 = d31 * d31;

        $d8 = 1.0 + $d7;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d10 = $d6 + $d9;

        $d11 = $d10 / 2.0;

        $d12 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        d30 = $d5 * $d12;

     label3:
        $b2 = d0 cmpl 0.0;

        if $b2 < 0 goto label4;

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d19 = d1 / 2.0;

        $d20 = $d19 / d30;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>(d30, $d20);

        return $r4;

     label4:
        $b3 = d1 cmpl 0.0;

        if $b3 < 0 goto label5;

        $r3 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d17 = d1 / 2.0;

        $d18 = $d17 / d30;

        specialinvoke $r3.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d18, d30);

        return $r3;

     label5:
        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d13 = neg d1;

        $d14 = $d13 / 2.0;

        $d16 = $d14 / d30;

        $d15 = neg d30;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d16, $d15);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber, com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, r1, $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        r1 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "z2");

        $r4 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = virtualinvoke r1.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d5 = $d3 - $d4;

        specialinvoke $r4.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d5);

        return $r4;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber subtract(com.opengamma.analytics.math.number.ComplexNumber, double)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;
        double d0, $d1, $d2, $d3;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = $d1 - d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d3);

        return $r2;
    }

    public static com.opengamma.analytics.math.number.ComplexNumber subtract(double, com.opengamma.analytics.math.number.ComplexNumber)
    {
        double d0, $d1, $d2, $d3, $d4;
        com.opengamma.analytics.math.number.ComplexNumber r0, $r2;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "z");

        $r2 = new com.opengamma.analytics.math.number.ComplexNumber;

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d2 = d0 - $d1;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        $d4 = neg $d3;

        specialinvoke $r2.<com.opengamma.analytics.math.number.ComplexNumber: void <init>(double,double)>($d2, $d4);

        return $r2;
    }
}
