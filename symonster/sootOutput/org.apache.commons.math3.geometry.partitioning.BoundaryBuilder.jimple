class org.apache.commons.math3.geometry.partitioning.BoundaryBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{

    void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_MINUS_SUB>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r4, $r9, $r15, r25;
        org.apache.commons.math3.geometry.partitioning.Characterization $r3, $r8, $r14;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5, $r6, $r10, $r16, r20, r21;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute $r7;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r11, $r12, $r13, $r17, $r18, $r19, r22;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r20 = null;

        r21 = null;

        r22 = null;

        $r3 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r4, $r6);

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchOutside()>();

        if $z0 == 0 goto label1;

        $r14 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r15 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r16 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching()>();

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r15, $r16);

        $z2 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchInside()>();

        if $z2 == 0 goto label1;

        r20 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching()>();

        $r17 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r17.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        r22 = $r17;

        $r18 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getInsideSplitters()>();

        virtualinvoke $r17.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r18);

        $r19 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getOutsideSplitters()>();

        virtualinvoke $r17.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r19);

     label1:
        $z3 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchInside()>();

        if $z3 == 0 goto label3;

        $r8 = new org.apache.commons.math3.geometry.partitioning.Characterization;

        $r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r10 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane insideTouching()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Characterization: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r9, $r10);

        $z1 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Characterization: boolean touchOutside()>();

        if $z1 == 0 goto label3;

        r21 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.SubHyperplane outsideTouching()>();

        if r22 != null goto label2;

        $r13 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        r22 = $r13;

     label2:
        $r11 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getOutsideSplitters()>();

        virtualinvoke r22.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r11);

        $r12 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Characterization: org.apache.commons.math3.geometry.partitioning.NodesSet getInsideSplitters()>();

        virtualinvoke r22.<org.apache.commons.math3.geometry.partitioning.NodesSet: void addAll(java.lang.Iterable)>($r12);

     label3:
        if r22 == null goto label5;

        r25 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label4:
        if r25 == null goto label5;

        virtualinvoke r22.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r25);

        r25 = virtualinvoke r25.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label4;

     label5:
        $r7 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r20, r21, r22);

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r7);

        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }
}
