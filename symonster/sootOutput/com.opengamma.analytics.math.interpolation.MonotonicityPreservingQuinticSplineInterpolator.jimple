public class com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final double ERROR;
    private static final double EPS;
    private static final double SMALL;
    private final com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver;
    private final com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function;
    private com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r2;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r2 = new com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver> = $r2;

        $r3 = new com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function> = $r3;

        r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method> = r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, r6, r7, r8, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, r35, r36, r37, r38, r39, r42;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23, i24, i25, i26, i27, i28, i29, i30, i31;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r5, $r22;
        double[][] r9, $r17, $r20, r40, r41;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r12, $r13, $r21;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r14;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r16, $r19, $r24;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r23;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z15, $z16, $z17;
        byte $b13, $b16, $b19, $b22;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        $z9 = $z7 | $z8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i23 = lengthof r1;

        if $i23 <= 2 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i24 = 0;

     label07:
        if i24 >= i0 goto label08;

        $d28 = r1[i24];

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d28);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing NaN");

        $d29 = r1[i24];

        $z6 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d29);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z6, "xValues containing Infinity");

        i24 = i24 + 1;

        goto label07;

     label08:
        i25 = 0;

     label09:
        if i25 >= i1 goto label10;

        $d26 = r2[i25];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d26);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing NaN");

        $d27 = r2[i25];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d27);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValues containing Infinity");

        i25 = i25 + 1;

        goto label09;

     label10:
        i26 = 0;

     label11:
        $i7 = i0 - 1;

        if i26 >= $i7 goto label16;

        i27 = i26 + 1;

     label12:
        if i27 >= i0 goto label15;

        $d25 = r1[i26];

        $d24 = r1[i27];

        $b22 = $d25 cmpl $d24;

        if $b22 != 0 goto label13;

        $z11 = 1;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z11, "xValues should be distinct");

        i27 = i27 + 1;

        goto label12;

     label15:
        i26 = i26 + 1;

        goto label11;

     label16:
        r35 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r36 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r37 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i8 = i0 + 1;

        r37 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i8);

     label18:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r35, r37);

        $r12 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r35);

        $r13 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r4 = virtualinvoke $r13.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r37, r3);

        $r14 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r5 = virtualinvoke $r14.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i9 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i9 < 3 goto label19;

        $z12 = 1;

        goto label20;

     label19:
        $z12 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "Primary interpolant should be degree >= 2");

        $r15 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r5, r35);

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r6 = $r17[0];

        $r18 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r5, r35);

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r7 = $r20[0];

        r8 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r37, r3, r4, r6);

        z13 = 0;

        r38 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r4, r8);

        r39 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r4, r8);

        r40 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r3, r4, r8, r39);

        r41 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r3, r4, r8, r38);

     label21:
        if z13 != 0 goto label30;

        i28 = 0;

        i29 = 0;

     label22:
        $i11 = i0 - 2;

        if i29 >= $i11 goto label28;

        $i12 = i29 + 1;

        $d2 = r8[$i12];

        $b13 = $d2 cmpl 0.0;

        if $b13 <= 0 goto label27;

        $i14 = i29 + 1;

        $r27 = r40[$i14];

        $d4 = $r27[1];

        $i15 = i29 + 1;

        $r28 = r40[$i15];

        $d3 = $r28[1];

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $d6 = $d5 * 1.0E-12;

        $d8 = $d4 + $d6;

        $r29 = r41[i29];

        $d9 = $r29[0];

        $r30 = r41[i29];

        $d7 = $r30[0];

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $d11 = $d10 * 1.0E-12;

        $d12 = $d9 - $d11;

        $b16 = $d8 cmpg $d12;

        if $b16 >= 0 goto label23;

        $z15 = 1;

        goto label24;

     label23:
        $z15 = 0;

     label24:
        $i17 = i29 + 1;

        $r31 = r40[$i17];

        $d14 = $r31[0];

        $i18 = i29 + 1;

        $r32 = r40[$i18];

        $d13 = $r32[0];

        $d15 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d16 = $d15 * 1.0E-12;

        $d18 = $d14 - $d16;

        $r33 = r41[i29];

        $d19 = $r33[1];

        $r34 = r41[i29];

        $d17 = $r34[1];

        $d20 = staticinvoke <java.lang.Math: double abs(double)>($d17);

        $d21 = $d20 * 1.0E-12;

        $d22 = $d19 + $d21;

        $b19 = $d18 cmpl $d22;

        if $b19 <= 0 goto label25;

        $z16 = 1;

        goto label26;

     label25:
        $z16 = 0;

     label26:
        $z17 = $z15 | $z16;

        if $z17 == 0 goto label27;

        i28 = i28 + 1;

        $i21 = i29 + 1;

        $i20 = i29 + 1;

        $d23 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double firstDerivativesRecalculator(double[],double[],double[],double[],int)>(r3, r4, r38, r39, $i20);

        r8[$i21] = $d23;

     label27:
        i29 = i29 + 1;

        goto label22;

     label28:
        if i28 != 0 goto label29;

        z13 = 1;

     label29:
        r38 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r4, r8);

        r39 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r4, r8);

        r40 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r3, r4, r8, r39);

        r41 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r3, r4, r8, r38);

        goto label21;

     label30:
        r42 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[][],double[][])>(r7, r40, r41);

        $r21 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r9 = virtualinvoke $r21.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[],double[])>(r37, r3, r4, r8, r42);

        i30 = 0;

     label31:
        $i10 = i0 - 1;

        if i30 >= $i10 goto label34;

        i31 = 0;

     label32:
        if i31 >= 6 goto label33;

        $r25 = r9[i30];

        $d0 = $r25[i31];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r26 = r9[i30];

        $d1 = $r26[i31];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i31 = i31 + 1;

        goto label32;

     label33:
        i30 = i30 + 1;

        goto label31;

     label34:
        $r22 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r23 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r35);

        $r24 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r9);

        specialinvoke $r22.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r23, $r24, 6, 1);

        return $r22;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r3, r4, r5, $r8, $r9, $r10, $r16, $r17, $r20, $r21, $r24, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, r46, r48, r49, r50, r51, r53, r54, r57;
        double[][] r2, $r28, $r31, $r34, r55, r56, r58;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r11, $r12, $r15, $r18, $r27, $r30, $r32;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r13, r52;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z15, $z16, $z17;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r22, $r23, $r33;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r25;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r26, $r29;
        byte $b16, $b19, $b22, $b25;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r47;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r8 = r2[0];

        $i3 = lengthof $r8;

        if $i4 != $i3 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $r9 = r2[0];

        $i6 = lengthof $r9;

        if $i7 != $i6 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        $z9 = $z7 | $z8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "(xValues length = yValuesMatrix\'s row vector length) or (xValues length + 2 = yValuesMatrix\'s row vector length)");

        $i26 = lengthof r1;

        if $i26 <= 2 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Data points should be more than 2");

        i0 = lengthof r1;

        $r10 = r2[0];

        i1 = lengthof $r10;

        i2 = lengthof r2;

        i27 = 0;

     label07:
        if i27 >= i0 goto label08;

        $d28 = r1[i27];

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d28);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing NaN");

        $d29 = r1[i27];

        $z6 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d29);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z6, "xValues containing Infinity");

        i27 = i27 + 1;

        goto label07;

     label08:
        i28 = 0;

     label09:
        if i28 >= i1 goto label12;

        i29 = 0;

     label10:
        if i29 >= i2 goto label11;

        $r44 = r2[i29];

        $d26 = $r44[i28];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d26);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing NaN");

        $r45 = r2[i29];

        $d27 = $r45[i28];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d27);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValuesMatrix containing Infinity");

        i29 = i29 + 1;

        goto label10;

     label11:
        i28 = i28 + 1;

        goto label09;

     label12:
        i30 = 0;

     label13:
        if i30 >= i0 goto label18;

        i31 = i30 + 1;

     label14:
        if i31 >= i0 goto label17;

        $d25 = r1[i30];

        $d24 = r1[i31];

        $b25 = $d25 cmpl $d24;

        if $b25 != 0 goto label15;

        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z11, "xValues should be distinct");

        i31 = i31 + 1;

        goto label14;

     label17:
        i30 = i30 + 1;

        goto label13;

     label18:
        r46 = newarray (double)[i0];

        r47 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i32 = 0;

     label19:
        if i32 >= i2 goto label34;

        r46 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r48 = newarray (double)[i0];

        if i0 != i1 goto label20;

        $r43 = r2[i32];

        r49 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r43, i0);

        goto label21;

     label20:
        $r21 = r2[i32];

        $i12 = i0 + 1;

        r49 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r21, 1, $i12);

     label21:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r46, r49);

        $r22 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r50 = virtualinvoke $r22.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r46);

        $r23 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r51 = virtualinvoke $r23.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r49, r50);

        $r25 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r24 = r2[i32];

        r52 = virtualinvoke $r25.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, $r24);

        $i13 = virtualinvoke r52.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i13 < 3 goto label22;

        $z12 = 1;

        goto label23;

     label22:
        $z12 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "Primary interpolant should be degree >= 2");

        $r26 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r52, r46);

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = $r28[0];

        $r29 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r52, r46);

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = $r31[0];

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r49, r50, r51, r3);

        z13 = 0;

        r53 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r51, r5);

        r54 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r51, r5);

        r55 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r50, r51, r5, r54);

        r56 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r50, r51, r5, r53);

     label24:
        if z13 != 0 goto label33;

        i33 = 0;

        i34 = 0;

     label25:
        $i14 = i0 - 2;

        if i34 >= $i14 goto label31;

        $i15 = i34 + 1;

        $d2 = r5[$i15];

        $b16 = $d2 cmpl 0.0;

        if $b16 <= 0 goto label30;

        $i17 = i34 + 1;

        $r35 = r55[$i17];

        $d4 = $r35[1];

        $i18 = i34 + 1;

        $r36 = r55[$i18];

        $d3 = $r36[1];

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $d6 = $d5 * 1.0E-12;

        $d8 = $d4 + $d6;

        $r37 = r56[i34];

        $d9 = $r37[0];

        $r38 = r56[i34];

        $d7 = $r38[0];

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $d11 = $d10 * 1.0E-12;

        $d12 = $d9 - $d11;

        $b19 = $d8 cmpg $d12;

        if $b19 >= 0 goto label26;

        $z15 = 1;

        goto label27;

     label26:
        $z15 = 0;

     label27:
        $i20 = i34 + 1;

        $r39 = r55[$i20];

        $d14 = $r39[0];

        $i21 = i34 + 1;

        $r40 = r55[$i21];

        $d13 = $r40[0];

        $d15 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d16 = $d15 * 1.0E-12;

        $d18 = $d14 - $d16;

        $r41 = r56[i34];

        $d19 = $r41[1];

        $r42 = r56[i34];

        $d17 = $r42[1];

        $d20 = staticinvoke <java.lang.Math: double abs(double)>($d17);

        $d21 = $d20 * 1.0E-12;

        $d22 = $d19 + $d21;

        $b22 = $d18 cmpl $d22;

        if $b22 <= 0 goto label28;

        $z16 = 1;

        goto label29;

     label28:
        $z16 = 0;

     label29:
        $z17 = $z15 | $z16;

        if $z17 == 0 goto label30;

        i33 = i33 + 1;

        $i24 = i34 + 1;

        $i23 = i34 + 1;

        $d23 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double firstDerivativesRecalculator(double[],double[],double[],double[],int)>(r50, r51, r53, r54, $i23);

        r5[$i24] = $d23;

     label30:
        i34 = i34 + 1;

        goto label25;

     label31:
        if i33 != 0 goto label32;

        z13 = 1;

     label32:
        r53 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r51, r5);

        r54 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r51, r5);

        r55 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r50, r51, r5, r54);

        r56 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r50, r51, r5, r53);

        goto label24;

     label33:
        r57 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[][],double[][])>(r4, r55, r56);

        $r32 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r33 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r34 = virtualinvoke $r33.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[],double[])>(r49, r50, r51, r5, r57);

        specialinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r34);

        r47[i32] = $r32;

        i32 = i32 + 1;

        goto label19;

     label34:
        $r11 = r47[0];

        i35 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r12 = r47[0];

        i36 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i8 = i2 * i35;

        r58 = newmultiarray (double)[$i8][i36];

        i37 = 0;

     label35:
        if i37 >= i35 goto label38;

        i38 = 0;

     label36:
        if i38 >= i2 goto label37;

        $i10 = i2 * i37;

        $i11 = $i10 + i38;

        $r18 = r47[i38];

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i37);

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r58[$i11] = $r20;

        i38 = i38 + 1;

        goto label36;

     label37:
        i37 = i37 + 1;

        goto label35;

     label38:
        i39 = 0;

     label39:
        $i9 = i35 * i2;

        if i39 >= $i9 goto label42;

        i40 = 0;

     label40:
        if i40 >= i36 goto label41;

        $r16 = r58[i39];

        $d0 = $r16[i40];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r17 = r58[i39];

        $d1 = $r17[i40];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i40 = i40 + 1;

        goto label40;

     label41:
        i39 = i39 + 1;

        goto label39;

     label42:
        $r13 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r46);

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r58);

        specialinvoke $r13.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r14, $r15, i36, i2);

        return $r13;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r8, r9, r10, r11, r12, r16, r18, r19, r20, $r41, $r43, $r51, $r52, $r54, $r56, $r57, $r59, $r62, $r65, $r73, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, r94, r95, r96, r97, r98, r101, r102, r103, r106, r107, r110;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i48, $i49, $i51, $i52, $i54, i55, i56, i57, i58, i59, i60, i62, $i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74;
        double[][] r4, r13, r14, $r29, $r32, $r68, $r71, r99, r100, r108, r109;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r5, r6, r15, $r44, $r47;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r7, r17;
        byte b2, $b21, $b22, $b23, $b31, $b34, $b37, $b44, $b47, $b50, $b53, $b61;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r23, $r24, $r25, $r35, $r61;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r26, $r64;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r27, $r30, $r66, $r69;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r28, $r31, $r67, $r70, r112, r113;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r33, $r34, $r37, $r40, $r42, $r45, $r46, $r48, $r49, $r50, $r53, $r55, $r58, $r60, $r63, $r72, $r74, $r75;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r36;
        int[] $r38;
        java.lang.Double $r39;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, d73, $d74, $d75;
        boolean $z0, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z15, $z16, $z17, z18, $z20, $z21, $z22;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r111, r114;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 != $i3 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $i6 = lengthof r2;

        if $i7 != $i6 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        $z9 = $z7 | $z8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i54 = lengthof r1;

        if $i54 <= 2 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i55 = 0;

     label07:
        if i55 >= i0 goto label08;

        $d70 = r1[i55];

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d70);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing NaN");

        $d71 = r1[i55];

        $z6 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d71);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z6, "xValues containing Infinity");

        i55 = i55 + 1;

        goto label07;

     label08:
        i56 = 0;

     label09:
        if i56 >= i1 goto label10;

        $d68 = r2[i56];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d68);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing NaN");

        $d69 = r2[i56];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d69);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValues containing Infinity");

        i56 = i56 + 1;

        goto label09;

     label10:
        i57 = 0;

     label11:
        $i8 = i0 - 1;

        if i57 >= $i8 goto label16;

        i58 = i57 + 1;

     label12:
        if i58 >= i0 goto label15;

        $d67 = r1[i57];

        $d66 = r1[i58];

        $b53 = $d67 cmpl $d66;

        if $b53 != 0 goto label13;

        $z11 = 1;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z11, "xValues should be distinct");

        i58 = i58 + 1;

        goto label12;

     label15:
        i57 = i57 + 1;

        goto label11;

     label16:
        r94 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r95 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i9 = i0 + 1;

        r95 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i9);

     label18:
        $r23 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r96 = virtualinvoke $r23.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r1);

        $r24 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r24.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r95, r96);

        $r25 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r4 = virtualinvoke $r25.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] slopeSensitivityCalculator(double[])>(r96);

        $i10 = i0 + 1;

        r5 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i10];

        $i11 = i0 + 1;

        r6 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i11];

        $r26 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r7 = virtualinvoke $r26.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i12 = virtualinvoke r7.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i12 < 3 goto label19;

        $z12 = 1;

        goto label20;

     label19:
        $z12 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "Primary interpolant should be degree >= 2");

        $r27 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r7, r1);

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r8 = $r29[0];

        $r30 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r7, r1);

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r9 = $r32[0];

        r10 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r95, r96, r3, r8);

        z13 = 0;

        r97 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r3, r10);

        r98 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r3, r10);

        r99 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r96, r3, r10, r98);

        r100 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r96, r3, r10, r97);

     label21:
        if z13 != 0 goto label30;

        i59 = 0;

        i60 = 0;

     label22:
        $i42 = i0 - 2;

        if i60 >= $i42 goto label28;

        $i43 = i60 + 1;

        $d44 = r10[$i43];

        $b44 = $d44 cmpl 0.0;

        if $b44 <= 0 goto label27;

        $i45 = i60 + 1;

        $r86 = r99[$i45];

        $d46 = $r86[1];

        $i46 = i60 + 1;

        $r87 = r99[$i46];

        $d45 = $r87[1];

        $d47 = staticinvoke <java.lang.Math: double abs(double)>($d45);

        $d48 = $d47 * 1.0E-12;

        $d50 = $d46 + $d48;

        $r88 = r100[i60];

        $d51 = $r88[0];

        $r89 = r100[i60];

        $d49 = $r89[0];

        $d52 = staticinvoke <java.lang.Math: double abs(double)>($d49);

        $d53 = $d52 * 1.0E-12;

        $d54 = $d51 - $d53;

        $b47 = $d50 cmpg $d54;

        if $b47 >= 0 goto label23;

        $z15 = 1;

        goto label24;

     label23:
        $z15 = 0;

     label24:
        $i48 = i60 + 1;

        $r90 = r99[$i48];

        $d56 = $r90[0];

        $i49 = i60 + 1;

        $r91 = r99[$i49];

        $d55 = $r91[0];

        $d57 = staticinvoke <java.lang.Math: double abs(double)>($d55);

        $d58 = $d57 * 1.0E-12;

        $d60 = $d56 - $d58;

        $r92 = r100[i60];

        $d61 = $r92[1];

        $r93 = r100[i60];

        $d59 = $r93[1];

        $d62 = staticinvoke <java.lang.Math: double abs(double)>($d59);

        $d63 = $d62 * 1.0E-12;

        $d64 = $d61 + $d63;

        $b50 = $d60 cmpl $d64;

        if $b50 <= 0 goto label25;

        $z16 = 1;

        goto label26;

     label25:
        $z16 = 0;

     label26:
        $z17 = $z15 | $z16;

        if $z17 == 0 goto label27;

        i59 = i59 + 1;

        $i52 = i60 + 1;

        $i51 = i60 + 1;

        $d65 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double firstDerivativesRecalculator(double[],double[],double[],double[],int)>(r96, r3, r97, r98, $i51);

        r10[$i52] = $d65;

     label27:
        i60 = i60 + 1;

        goto label22;

     label28:
        if i59 != 0 goto label29;

        z13 = 1;

     label29:
        r97 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r3, r10);

        r98 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r3, r10);

        r99 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r96, r3, r10, r98);

        r100 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r96, r3, r10, r97);

        goto label21;

     label30:
        r101 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[][],double[][])>(r9, r99, r100);

        $r33 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r10);

        r5[0] = $r33;

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r101);

        r6[0] = $r34;

        if i0 != i1 goto label31;

        $b61 = 0;

        goto label32;

     label31:
        $b61 = 1;

     label32:
        b2 = $b61;

        $i13 = 2 * $b61;

        $i14 = i0 + $i13;

        r11 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i14);

        $i15 = 2 * $b61;

        $i16 = i0 + $i15;

        r12 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i16);

        r13 = newmultiarray (double)[i0][i0];

        r14 = newmultiarray (double)[i0][i0];

        i62 = $b61;

     label33:
        $i63 = i0 + b2;

        if i62 >= $i63 goto label54;

        $d1 = r2[i62];

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b21 = $d2 cmpg 1.0E-14;

        if $b21 >= 0 goto label34;

        $d72 = 1.0E-6;

        goto label35;

     label34:
        $d3 = r2[i62];

        $d72 = $d3 * 1.0E-6;

     label35:
        d73 = $d72;

        $i41 = i62;

        $d4 = r2[i62];

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $b22 = $d5 cmpg 1.0E-14;

        if $b22 >= 0 goto label36;

        $d74 = 1.0E-6;

        goto label37;

     label36:
        $d6 = r2[i62];

        $d74 = $d6 * 1.000001;

     label37:
        r11[$i41] = $d74;

        $i40 = i62;

        $d7 = r2[i62];

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b23 = $d8 cmpg 1.0E-14;

        if $b23 >= 0 goto label38;

        $d75 = -1.0E-6;

        goto label39;

     label38:
        $d9 = r2[i62];

        $d75 = $d9 * 0.999999;

     label39:
        r12[$i40] = $d75;

        $i24 = i0 + b2;

        r102 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r11, b2, $i24);

        $i25 = i0 + b2;

        r103 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r12, b2, $i25);

        $r44 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[2];

        $r45 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r45.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r11);

        $r44[0] = $r45;

        $r46 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r46.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r12);

        $r44[1] = $r46;

        $r47 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[2];

        $r48 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r48.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r102);

        $r47[0] = $r48;

        $r49 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r49.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r103);

        $r47[1] = $r49;

        r15 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[4];

        i64 = 0;

     label40:
        if i64 >= 2 goto label51;

        $r61 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r60 = $r47[i64];

        $r62 = virtualinvoke $r60.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r16 = virtualinvoke $r61.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>($r62, r96);

        $r64 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r63 = $r44[i64];

        $r65 = virtualinvoke $r63.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r17 = virtualinvoke $r64.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, $r65);

        $r66 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r67 = virtualinvoke $r66.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r17, r1);

        $r68 = virtualinvoke $r67.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r18 = $r68[0];

        $r69 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D _function>;

        $r70 = virtualinvoke $r69.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r17, r1);

        $r71 = virtualinvoke $r70.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r19 = $r71[0];

        $r72 = $r47[i64];

        $r73 = virtualinvoke $r72.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r20 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>($r73, r96, r16, r18);

        z18 = 0;

        r106 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r16, r20);

        r107 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r16, r20);

        r108 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r96, r16, r20, r107);

        r109 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r96, r16, r20, r106);

     label41:
        if z18 != 0 goto label50;

        i65 = 0;

        i66 = 0;

     label42:
        $i29 = i0 - 2;

        if i66 >= $i29 goto label48;

        $i30 = i66 + 1;

        $d22 = r20[$i30];

        $b31 = $d22 cmpl 0.0;

        if $b31 <= 0 goto label47;

        $i32 = i66 + 1;

        $r76 = r108[$i32];

        $d24 = $r76[1];

        $i33 = i66 + 1;

        $r77 = r108[$i33];

        $d23 = $r77[1];

        $d25 = staticinvoke <java.lang.Math: double abs(double)>($d23);

        $d26 = $d25 * 1.0E-12;

        $d28 = $d24 + $d26;

        $r78 = r109[i66];

        $d29 = $r78[0];

        $r79 = r109[i66];

        $d27 = $r79[0];

        $d30 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $d31 = $d30 * 1.0E-12;

        $d32 = $d29 - $d31;

        $b34 = $d28 cmpg $d32;

        if $b34 >= 0 goto label43;

        $z20 = 1;

        goto label44;

     label43:
        $z20 = 0;

     label44:
        $i35 = i66 + 1;

        $r80 = r108[$i35];

        $d34 = $r80[0];

        $i36 = i66 + 1;

        $r81 = r108[$i36];

        $d33 = $r81[0];

        $d35 = staticinvoke <java.lang.Math: double abs(double)>($d33);

        $d36 = $d35 * 1.0E-12;

        $d38 = $d34 - $d36;

        $r82 = r109[i66];

        $d39 = $r82[1];

        $r83 = r109[i66];

        $d37 = $r83[1];

        $d40 = staticinvoke <java.lang.Math: double abs(double)>($d37);

        $d41 = $d40 * 1.0E-12;

        $d42 = $d39 + $d41;

        $b37 = $d38 cmpl $d42;

        if $b37 <= 0 goto label45;

        $z21 = 1;

        goto label46;

     label45:
        $z21 = 0;

     label46:
        $z22 = $z20 | $z21;

        if $z22 == 0 goto label47;

        i65 = i65 + 1;

        $i39 = i66 + 1;

        $i38 = i66 + 1;

        $d43 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double firstDerivativesRecalculator(double[],double[],double[],double[],int)>(r96, r16, r106, r107, $i38);

        r20[$i39] = $d43;

     label47:
        i66 = i66 + 1;

        goto label42;

     label48:
        if i65 != 0 goto label49;

        z18 = 1;

     label49:
        r106 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] aValuesCalculator(double[],double[])>(r16, r20);

        r107 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] bValuesCalculator(double[],double[])>(r16, r20);

        r108 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsA(double[],double[],double[],double[])>(r96, r16, r20, r107);

        r109 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[][] getIntervalsB(double[],double[],double[],double[])>(r96, r16, r20, r106);

        goto label41;

     label50:
        r110 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double[] secondDerivativeCalculator(double[],double[][],double[][])>(r19, r108, r109);

        $r74 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r74.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r20);

        r15[i64] = $r74;

        $i28 = 2 + i64;

        $r75 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r75.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r110);

        r15[$i28] = $r75;

        i64 = i64 + 1;

        goto label40;

     label51:
        i67 = 0;

     label52:
        if i67 >= i0 goto label53;

        $r51 = r13[i67];

        $i26 = i62 - b2;

        $r50 = r15[0];

        $r52 = virtualinvoke $r50.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d12 = $r52[i67];

        $r53 = r15[1];

        $r54 = virtualinvoke $r53.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d13 = $r54[i67];

        $d14 = $d12 - $d13;

        $d15 = 0.5 * $d14;

        $d16 = $d15 / d73;

        $r51[$i26] = $d16;

        $r56 = r14[i67];

        $i27 = i62 - b2;

        $r55 = r15[2];

        $r57 = virtualinvoke $r55.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d17 = $r57[i67];

        $r58 = r15[3];

        $r59 = virtualinvoke $r58.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d18 = $r59[i67];

        $d19 = $d17 - $d18;

        $d20 = 0.5 * $d19;

        $d21 = $d20 / d73;

        $r56[$i27] = $d21;

        i67 = i67 + 1;

        goto label52;

     label53:
        $d10 = r2[i62];

        r11[i62] = $d10;

        $d11 = r2[i62];

        r12[i62] = $d11;

        i62 = i62 + 1;

        goto label33;

     label54:
        i68 = 0;

     label55:
        if i68 >= i0 goto label56;

        $i19 = i68 + 1;

        $r40 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r41 = r13[i68];

        specialinvoke $r40.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r41);

        r5[$i19] = $r40;

        $i20 = i68 + 1;

        $r42 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r43 = r14[i68];

        specialinvoke $r42.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r43);

        r6[$i20] = $r42;

        i68 = i68 + 1;

        goto label55;

     label56:
        $r35 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r111 = virtualinvoke $r35.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[],double[],double[][],com.opengamma.analytics.math.matrix.DoubleMatrix1D[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r95, r96, r3, r4, r5, r6);

        i69 = 0;

     label57:
        if i69 >= i0 goto label62;

        r112 = r111[i69];

        i70 = virtualinvoke r112.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i71 = virtualinvoke r112.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i72 = 0;

     label58:
        if i72 >= i70 goto label61;

        i73 = 0;

     label59:
        if i73 >= i71 goto label60;

        $r38 = newarray (int)[2];

        $r38[0] = i72;

        $r38[1] = i73;

        $r39 = virtualinvoke r112.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r38);

        $d0 = virtualinvoke $r39.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i73 = i73 + 1;

        goto label59;

     label60:
        i72 = i72 + 1;

        goto label58;

     label61:
        i69 = i69 + 1;

        goto label57;

     label62:
        r113 = r111[0];

        $i17 = i0 - 1;

        r114 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i17];

        $i18 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r111, 1, r114, 0, $i18);

        i74 = virtualinvoke r113.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r36 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r37 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r37.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        specialinvoke $r36.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r37, r113, i74, 1, r114);

        return $r36;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getPrimaryMethod()
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        return $r1;
    }

    private double[] firstDerivativeCalculator(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, i11;
        double $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43;
        byte $b7, $b8;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        r5 = newarray (double)[i0];

        $d1 = r4[0];

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d1);

        $d3 = r3[0];

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $d5 = 5.0 * $d4;

        $d6 = staticinvoke <java.lang.Math: double min(double,double)>($d2, $d5);

        $d7 = r3[0];

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $d9 = -5.0 * $d8;

        $d10 = staticinvoke <java.lang.Math: double max(double,double)>($d6, $d9);

        r5[0] = $d10;

        $i2 = i0 - 1;

        $i1 = i0 - 2;

        $d11 = r4[$i1];

        $d12 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d11);

        $i3 = i0 - 2;

        $d13 = r3[$i3];

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d15 = 5.0 * $d14;

        $d16 = staticinvoke <java.lang.Math: double min(double,double)>($d12, $d15);

        $i4 = i0 - 2;

        $d17 = r3[$i4];

        $d18 = staticinvoke <java.lang.Math: double abs(double)>($d17);

        $d19 = -5.0 * $d18;

        $d20 = staticinvoke <java.lang.Math: double max(double,double)>($d16, $d19);

        r5[$i2] = $d20;

        i11 = 1;

     label1:
        $i5 = i0 - 1;

        if i11 >= $i5 goto label6;

        $i6 = i11 - 1;

        $d22 = r3[$i6];

        $d21 = r3[i11];

        $d23 = $d22 * $d21;

        $b7 = $d23 cmpg 0.0;

        if $b7 >= 0 goto label2;

        $d42 = r4[i11];

        $d43 = staticinvoke <java.lang.Math: double signum(double)>($d42);

        goto label3;

     label2:
        $d43 = 0.0;

     label3:
        $b8 = $d43 cmpl 0.0;

        if $b8 < 0 goto label4;

        $d33 = r4[i11];

        $d34 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d33);

        $i10 = i11 - 1;

        $d35 = r3[$i10];

        $d36 = staticinvoke <java.lang.Math: double abs(double)>($d35);

        $d37 = r3[i11];

        $d38 = staticinvoke <java.lang.Math: double abs(double)>($d37);

        $d39 = staticinvoke <java.lang.Math: double min(double,double)>($d36, $d38);

        $d40 = 5.0 * $d39;

        $d41 = staticinvoke <java.lang.Math: double min(double,double)>($d34, $d40);

        r5[i11] = $d41;

        goto label5;

     label4:
        $d24 = r4[i11];

        $d25 = staticinvoke <java.lang.Math: double min(double,double)>(0.0, $d24);

        $i9 = i11 - 1;

        $d26 = r3[$i9];

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $d28 = r3[i11];

        $d29 = staticinvoke <java.lang.Math: double abs(double)>($d28);

        $d30 = staticinvoke <java.lang.Math: double min(double,double)>($d27, $d29);

        $d31 = -5.0 * $d30;

        $d32 = staticinvoke <java.lang.Math: double max(double,double)>($d25, $d31);

        r5[i11] = $d32;

     label5:
        i11 = i11 + 1;

        goto label1;

     label6:
        return r5;
    }

    private double[] aValuesCalculator(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b4;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r3 = newarray (double)[$i2];

        i6 = 0;

     label1:
        $i3 = i0 - 1;

        if i6 >= $i3 goto label4;

        $i5 = i6;

        $d0 = r1[i6];

        $b4 = $d0 cmpl 0.0;

        if $b4 != 0 goto label2;

        $d4 = 0.0;

        goto label3;

     label2:
        $d2 = r2[i6];

        $d1 = r1[i6];

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d3);

     label3:
        r3[$i5] = $d4;

        i6 = i6 + 1;

        goto label1;

     label4:
        return r3;
    }

    private double[] bValuesCalculator(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b4;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r3 = newarray (double)[$i2];

        i7 = 0;

     label1:
        $i3 = i0 - 1;

        if i7 >= $i3 goto label4;

        $i6 = i7;

        $d0 = r1[i7];

        $b4 = $d0 cmpl 0.0;

        if $b4 != 0 goto label2;

        $d4 = 0.0;

        goto label3;

     label2:
        $i5 = i7 + 1;

        $d2 = r2[$i5];

        $d1 = r1[i7];

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d3);

     label3:
        r3[$i6] = $d4;

        i7 = i7 + 1;

        goto label1;

     label4:
        return r3;
    }

    private double[][] getIntervalsA(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, i8;
        double[][] r5;
        double d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;
        byte $b4, $b5, $b6, $b7;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r5 = newmultiarray (double)[$i2][2];

        i8 = 0;

     label1:
        $i3 = i0 - 1;

        if i8 >= $i3 goto label8;

        $d4 = r3[i8];

        $d3 = r2[i8];

        $d5 = $d4 * $d3;

        $b4 = $d5 cmpl 0.0;

        if $b4 <= 0 goto label2;

        $d30 = r3[i8];

        goto label3;

     label2:
        $d30 = 0.0;

     label3:
        $d9 = -7.9 * $d30;

        $d7 = 0.26 * $d30;

        $d6 = r4[i8];

        $d8 = $d7 * $d6;

        $d11 = $d9 - $d8;

        $d10 = r1[i8];

        d1 = $d11 / $d10;

        $d12 = r4[i8];

        $d13 = 2.0 * $d12;

        $d15 = 20.0 - $d13;

        $d14 = r2[i8];

        $d17 = $d15 * $d14;

        $d16 = 8.0 * $d30;

        $d21 = $d17 - $d16;

        $d19 = 0.48 * $d30;

        $d18 = r4[i8];

        $d20 = $d19 * $d18;

        $d23 = $d21 - $d20;

        $d22 = r1[i8];

        d2 = $d23 / $d22;

        $b5 = $d30 cmpl 0.0;

        if $b5 != 0 goto label4;

        $r12 = r5[i8];

        $d28 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d2);

        $r12[0] = $d28;

        $r13 = r5[i8];

        $d29 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d2);

        $r13[1] = $d29;

        goto label5;

     label4:
        $r6 = r5[i8];

        $r6[0] = d1;

        $r7 = r5[i8];

        $r7[1] = d2;

     label5:
        $r8 = r5[i8];

        $d24 = $r8[0];

        $d25 = staticinvoke <java.lang.Math: double abs(double)>($d24);

        $b6 = $d25 cmpg 1.0E-14;

        if $b6 >= 0 goto label6;

        $r11 = r5[i8];

        $r11[0] = 0.0;

     label6:
        $r9 = r5[i8];

        $d26 = $r9[1];

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $b7 = $d27 cmpg 1.0E-14;

        if $b7 >= 0 goto label7;

        $r10 = r5[i8];

        $r10[1] = 0.0;

     label7:
        i8 = i8 + 1;

        goto label1;

     label8:
        return r5;
    }

    private double[][] getIntervalsB(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i9, i10;
        double[][] r5;
        double d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;
        byte $b5, $b6, $b7, $b8;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r5 = newmultiarray (double)[$i2][2];

        i10 = 0;

     label1:
        $i3 = i0 - 1;

        if i10 >= $i3 goto label8;

        $i4 = i10 + 1;

        $d4 = r3[$i4];

        $d3 = r2[i10];

        $d5 = $d4 * $d3;

        $b5 = $d5 cmpl 0.0;

        if $b5 <= 0 goto label2;

        $i9 = i10 + 1;

        $d30 = r3[$i9];

        goto label3;

     label2:
        $d30 = 0.0;

     label3:
        $d6 = r4[i10];

        $d7 = 2.0 * $d6;

        $d9 = -20.0 + $d7;

        $d8 = r2[i10];

        $d11 = $d9 * $d8;

        $d10 = 8.0 * $d30;

        $d15 = $d11 + $d10;

        $d13 = 0.48 * $d30;

        $d12 = r4[i10];

        $d14 = $d13 * $d12;

        $d17 = $d15 + $d14;

        $d16 = r1[i10];

        d1 = $d17 / $d16;

        $d21 = 7.9 * $d30;

        $d19 = 0.26 * $d30;

        $d18 = r4[i10];

        $d20 = $d19 * $d18;

        $d23 = $d21 + $d20;

        $d22 = r1[i10];

        d2 = $d23 / $d22;

        $b6 = $d30 cmpl 0.0;

        if $b6 != 0 goto label4;

        $r12 = r5[i10];

        $d28 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d2);

        $r12[0] = $d28;

        $r13 = r5[i10];

        $d29 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d2);

        $r13[1] = $d29;

        goto label5;

     label4:
        $r6 = r5[i10];

        $r6[0] = d1;

        $r7 = r5[i10];

        $r7[1] = d2;

     label5:
        $r8 = r5[i10];

        $d24 = $r8[0];

        $d25 = staticinvoke <java.lang.Math: double abs(double)>($d24);

        $b7 = $d25 cmpg 1.0E-14;

        if $b7 >= 0 goto label6;

        $r11 = r5[i10];

        $r11[0] = 0.0;

     label6:
        $r9 = r5[i10];

        $d26 = $r9[1];

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $b8 = $d27 cmpg 1.0E-14;

        if $b8 >= 0 goto label7;

        $r10 = r5[i10];

        $r10[1] = 0.0;

     label7:
        i10 = i10 + 1;

        goto label1;

     label8:
        return r5;
    }

    private double firstDerivativesRecalculator(double[], double[], double[], double[], int)
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r2, r3, r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 := @parameter4: int;

        $d0 = r4[i0];

        $d1 = 2.0 * $d0;

        $d3 = 20.0 - $d1;

        $d2 = r2[i0];

        $d5 = $d3 * $d2;

        $d4 = r1[i0];

        $d13 = $d5 / $d4;

        $i1 = i0 - 1;

        $d6 = r3[$i1];

        $d7 = 2.0 * $d6;

        $d9 = 20.0 - $d7;

        $i2 = i0 - 1;

        $d8 = r2[$i2];

        $d11 = $d9 * $d8;

        $i3 = i0 - 1;

        $d10 = r1[$i3];

        $d12 = $d11 / $d10;

        $d25 = $d13 + $d12;

        $d14 = r4[i0];

        $d15 = 0.48 * $d14;

        $d17 = 8.0 + $d15;

        $d16 = r1[i0];

        $d23 = $d17 / $d16;

        $i4 = i0 - 1;

        $d18 = r3[$i4];

        $d19 = 0.48 * $d18;

        $d21 = 8.0 + $d19;

        $i5 = i0 - 1;

        $d20 = r1[$i5];

        $d22 = $d21 / $d20;

        $d24 = $d23 + $d22;

        $d26 = $d25 / $d24;

        return $d26;
    }

    private double[] secondDerivativeCalculator(double[], double[][], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator r0;
        double[] r1, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        double[][] r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[][];

        i0 = lengthof r1;

        r4 = newarray (double)[i0];

        i12 = 0;

     label1:
        $i1 = i0 - 2;

        if i12 >= $i1 goto label2;

        $i9 = i12 + 1;

        $i6 = i12 + 1;

        $r9 = r2[$i6];

        $d12 = $r9[1];

        $i7 = i12 + 1;

        $r10 = r2[$i7];

        $d11 = $r10[0];

        $i8 = i12 + 1;

        $d10 = r1[$i8];

        $d13 = staticinvoke <java.lang.Math: double max(double,double)>($d11, $d10);

        $d14 = staticinvoke <java.lang.Math: double min(double,double)>($d12, $d13);

        r4[$i9] = $d14;

        $i11 = i12 + 1;

        $r11 = r3[i12];

        $d17 = $r11[1];

        $r12 = r3[i12];

        $d16 = $r12[0];

        $i10 = i12 + 1;

        $d15 = r4[$i10];

        $d18 = staticinvoke <java.lang.Math: double max(double,double)>($d16, $d15);

        $d19 = staticinvoke <java.lang.Math: double min(double,double)>($d17, $d18);

        r4[$i11] = $d19;

        i12 = i12 + 1;

        goto label1;

     label2:
        $r5 = r2[0];

        $d2 = $r5[1];

        $r6 = r2[0];

        $d1 = $r6[0];

        $d0 = r1[0];

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d0);

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>($d2, $d3);

        r4[0] = $d4;

        $i5 = i0 - 1;

        $i2 = i0 - 2;

        $r7 = r3[$i2];

        $d7 = $r7[1];

        $i3 = i0 - 2;

        $r8 = r3[$i3];

        $d6 = $r8[0];

        $i4 = i0 - 1;

        $d5 = r1[$i4];

        $d8 = staticinvoke <java.lang.Math: double max(double,double)>($d6, $d5);

        $d9 = staticinvoke <java.lang.Math: double min(double,double)>($d7, $d8);

        r4[$i5] = $d9;

        return r4;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double SMALL> = 1.0E-14;

        <com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double EPS> = 1.0E-6;

        <com.opengamma.analytics.math.interpolation.MonotonicityPreservingQuinticSplineInterpolator: double ERROR> = 1.0E-12;

        return;
    }
}
