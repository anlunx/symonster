class com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1 extends com.opengamma.analytics.math.function.Function1D
{
    final double val$k;
    final double val$forward;
    final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option;
    final double val$t;
    final com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction, double, double, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction r1;
        double d0, d1, d2;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d2 := @parameter4: double;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$k> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward> = d1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$t> = d2;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public final java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, d73, d74, d75, d76, d77, d78, d79, d80;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction $r2, $r12, $r19;
        java.lang.Double $r3, $r8, $r15, $r22, $r23, $r25;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider $r4;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r5, $r9, $r10, $r11, $r16, $r17, $r18;
        com.opengamma.analytics.math.function.Function1D $r6, $r13, $r20;
        java.lang.Object $r7, $r14, $r21;
        org.apache.commons.lang.NotImplementedException $r24;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        d6 = 1.0 - d1;

        $d14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$k>;

        $d13 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d15 = $d14 / $d13;

        d7 = staticinvoke <java.lang.Math: double log(double)>($d15);

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d3, 0.0, 1.0E-15);

        if $z0 == 0 goto label2;

        $z5 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 1.0, 1.0E-15);

        if $z5 == 0 goto label1;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        return $r25;

     label1:
        $r24 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r24.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Have not implemented the case where nu = 0, beta != 0");

        throw $r24;

     label2:
        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d7, 0.0, 0.001);

        if $z1 == 0 goto label3;

        $r4 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider access$000()>();

        $r5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $d51 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $r6 = virtualinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r5, $d51);

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r8 = (java.lang.Double) $r7;

        d73 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d52 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d53 = staticinvoke <java.lang.Math: double exp(double)>(0.00101);

        d74 = $d52 * $d53;

        $d54 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d55 = staticinvoke <java.lang.Math: double exp(double)>(-0.00101);

        d75 = $d54 * $d55;

        $r9 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $d56 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $z3 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: boolean isCall()>();

        specialinvoke $r9.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>(d74, $d56, $z3);

        $r12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction this$0>;

        $d57 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r9, $d57);

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r15 = (java.lang.Double) $r14;

        d8 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $r16 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $r17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $d58 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $r18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $z4 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: boolean isCall()>();

        specialinvoke $r16.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>(d75, $d58, $z4);

        $r19 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction this$0>;

        $d59 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r16, $d59);

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r22 = (java.lang.Double) $r21;

        d10 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $d61 = d8 + d10;

        $d60 = 2.0 * d73;

        $d62 = $d61 - $d60;

        $d63 = $d62 / 2.0;

        $d64 = $d63 / 0.00101;

        d11 = $d64 / 0.00101;

        $d65 = d8 - d10;

        $d66 = $d65 / 2.0;

        d12 = $d66 / 0.00101;

        $d67 = d11 * d7;

        $d69 = $d67 * d7;

        $d68 = d12 * d7;

        $d70 = $d69 + $d68;

        $d71 = $d70 + d73;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d71);

        return $r23;

     label3:
        $d17 = d3 * d3;

        $d16 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$t>;

        d76 = $d17 * $d16;

        d77 = d0 / d3;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 1.0, 1.0E-15);

        if $z2 == 0 goto label4;

        d78 = d7;

        goto label5;

     label4:
        $d18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$k>;

        $d19 = staticinvoke <java.lang.Math: double pow(double,double)>($d18, d6);

        $d20 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d21 = staticinvoke <java.lang.Math: double pow(double,double)>($d20, d6);

        $d22 = $d19 - $d21;

        d78 = $d22 / d6;

     label5:
        $d26 = d77 * d77;

        $d23 = 2.0 * d2;

        $d24 = $d23 * d77;

        $d25 = $d24 * d78;

        $d28 = $d26 + $d25;

        $d27 = d78 * d78;

        $d29 = $d28 + $d27;

        d79 = staticinvoke <java.lang.Math: double sqrt(double)>($d29);

        $d30 = d2 * d77;

        $d31 = d79 + $d30;

        $d33 = $d31 + d78;

        $d32 = 1.0 + d2;

        $d34 = $d33 / $d32;

        $d35 = $d34 / d77;

        d80 = staticinvoke <java.lang.Math: double log(double)>($d35);

        d4 = d7 / d80;

        $r2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction this$0>;

        $d37 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d36 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$k>;

        d9 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction: double access$100(com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction,double,double,double,double,double,double)>($r2, $d37, $d36, d77, d1, d2, d78);

        $d39 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$k>;

        $d38 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: double val$forward>;

        $d40 = $d39 * $d38;

        $d41 = staticinvoke <java.lang.Math: double sqrt(double)>($d40);

        $d42 = d4 * $d41;

        $d43 = staticinvoke <java.lang.Math: double log(double)>($d42);

        $d44 = d9 + $d43;

        $d45 = neg $d44;

        $d46 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>(d80);

        d5 = $d45 / $d46;

        $d49 = d3 * d4;

        $d47 = d5 * d76;

        $d48 = 1.0 + $d47;

        $d50 = $d49 * $d48;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d50);

        return $r3;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1 r0;
        java.lang.Object r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRPaulotVolatilityFunction$1: java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)>($r2);

        return $r3;
    }
}
