public abstract class org.apache.commons.math.genetics.ListPopulation extends java.lang.Object implements org.apache.commons.math.genetics.Population
{
    private java.util.List chromosomes;
    private int populationLimit;

    public void <init>(java.util.List, int)
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List r1;
        int i0, $i1, $i2;
        org.apache.commons.math.exception.NotPositiveException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r6;
        java.lang.Integer $r4, $r7, $r8;
        org.apache.commons.math.exception.NumberIsTooLargeException $r5;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 <= i0 goto label1;

        $r5 = new org.apache.commons.math.exception.NumberIsTooLargeException;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE>;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r5.<org.apache.commons.math.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r6, $r7, $r8, 0);

        throw $r5;

     label1:
        if i0 >= 0 goto label2;

        $r2 = new org.apache.commons.math.exception.NotPositiveException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POPULATION_LIMIT_NOT_POSITIVE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math.exception.NotPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes> = r1;

        r0.<org.apache.commons.math.genetics.ListPopulation: int populationLimit> = i0;

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        int i0;
        java.util.ArrayList $r1;
        org.apache.commons.math.exception.NotPositiveException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math.exception.NotPositiveException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POPULATION_LIMIT_NOT_POSITIVE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math.exception.NotPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math.genetics.ListPopulation: int populationLimit> = i0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes> = $r1;

        return;
    }

    public void setChromosomes(java.util.List)
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes> = r1;

        return;
    }

    public java.util.List getChromosomes()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        return $r1;
    }

    public void addChromosome(org.apache.commons.math.genetics.Chromosome)
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        org.apache.commons.math.genetics.Chromosome r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        r1 := @parameter0: org.apache.commons.math.genetics.Chromosome;

        $r2 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public org.apache.commons.math.genetics.Chromosome getFittestChromosome()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.Iterator r1;
        org.apache.commons.math.genetics.Chromosome r2, r7;
        java.util.List $r3, $r5;
        java.lang.Object $r4, $r6;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $r3 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (org.apache.commons.math.genetics.Chromosome) $r4;

        $r5 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.genetics.Chromosome) $r6;

        $i0 = virtualinvoke r2.<org.apache.commons.math.genetics.Chromosome: int compareTo(org.apache.commons.math.genetics.Chromosome)>(r7);

        if $i0 <= 0 goto label2;

        r7 = r2;

     label2:
        goto label1;

     label3:
        return r7;
    }

    public int getPopulationLimit()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        int $i0;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $i0 = r0.<org.apache.commons.math.genetics.ListPopulation: int populationLimit>;

        return $i0;
    }

    public void setPopulationLimit(int)
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        int i0;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.genetics.ListPopulation: int populationLimit> = i0;

        return;
    }

    public int getPopulationSize()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math.genetics.ListPopulation r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.math.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math.genetics.ListPopulation: java.util.List chromosomes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
