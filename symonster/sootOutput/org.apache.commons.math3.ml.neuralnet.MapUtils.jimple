public class org.apache.commons.math3.ml.neuralnet.MapUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.ml.neuralnet.MapUtils r0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.MapUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[], java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        double[] r0, $r6;
        java.lang.Iterable r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r2;
        java.util.Iterator r3;
        org.apache.commons.math3.ml.neuralnet.Neuron r4, r7;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r5;
        byte $b0;

        r0 := @parameter0: double[];

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r7 = null;

        d1 = #Infinity;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d0 = interfaceinvoke r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r6, r0);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

        r7 = r4;

     label2:
        goto label1;

     label3:
        return r7;
    }

    public static org.apache.commons.math3.util.Pair findBestAndSecondBest(double[], java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        double[] r0, $r8, $r13;
        java.lang.Iterable r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r2;
        java.util.Iterator r5;
        org.apache.commons.math3.ml.neuralnet.Neuron r6, $r10, $r11, $r14;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.ml.neuralnet.Neuron[] $r7;
        boolean $z0;
        org.apache.commons.math3.util.Pair $r9;
        java.lang.Object $r12;
        byte $b0, $b1;

        r0 := @parameter0: double[];

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r7 = newarray (org.apache.commons.math3.ml.neuralnet.Neuron)[2];

        $r7[0] = null;

        $r7[1] = null;

        $r8 = newarray (double)[2];

        $r8[0] = #Infinity;

        $r8[1] = #Infinity;

        r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r12;

        $r13 = virtualinvoke r6.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d0 = interfaceinvoke r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r13, r0);

        $d1 = $r8[0];

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label2;

        $d3 = $r8[0];

        $r8[1] = $d3;

        $r14 = $r7[0];

        $r7[1] = $r14;

        $r8[0] = d0;

        $r7[0] = r6;

        goto label3;

     label2:
        $d2 = $r8[1];

        $b1 = d0 cmpg $d2;

        if $b1 >= 0 goto label3;

        $r8[1] = d0;

        $r7[1] = r6;

     label3:
        goto label1;

     label4:
        $r9 = new org.apache.commons.math3.util.Pair;

        $r11 = $r7[0];

        $r10 = $r7[1];

        specialinvoke $r9.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r11, $r10);

        return $r9;
    }

    public static double[][] computeU(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        int i0, i1, i2, i3, i4;
        double[][] r2;
        org.apache.commons.math3.ml.neuralnet.Network r3;
        org.apache.commons.math3.ml.neuralnet.Neuron r4, r8;
        java.util.Collection r5;
        double[] r6, $r9, $r11;
        java.util.Iterator r7;
        boolean $z0;
        double $d0, $d1, $d2, d3;
        java.lang.Object $r10;

        r0 := @parameter0: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r1 := @parameter1: org.apache.commons.math3.ml.distance.DistanceMeasure;

        i0 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        r2 = newmultiarray (double)[i0][i1];

        r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        r4 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i2, i3);

        r5 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>(r4);

        r6 = virtualinvoke r4.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        d3 = 0.0;

        i4 = 0;

        r7 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r10;

        i4 = i4 + 1;

        $r11 = virtualinvoke r8.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>(r6, $r11);

        d3 = d3 + $d2;

        goto label3;

     label4:
        $r9 = r2[i2];

        $d0 = (double) i4;

        $d1 = d3 / $d0;

        $r9[i3] = $d1;

        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return r2;
    }

    public static int[][] computeHitHistogram(java.lang.Iterable, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r2;
        org.apache.commons.math3.ml.neuralnet.Network r4;
        org.apache.commons.math3.ml.neuralnet.Neuron r5, r19;
        java.lang.Integer r6, $r13, $r15, r20;
        java.util.HashMap $r7;
        boolean $z0;
        java.lang.Object $r8, $r11, $r12;
        int[] $r9, $r10;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.util.Iterator r17;
        double[] r18;
        int[][] r21;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r4 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network getNetwork()>();

        r17 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (double[]) $r11;

        r19 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r18, r4, r2);

        $r12 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r19);

        r20 = (java.lang.Integer) $r12;

        if r20 != null goto label02;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r15);

        goto label03;

     label02:
        $i1 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        $i2 = $i1 + 1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r13);

     label03:
        goto label01;

     label04:
        i3 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfRows()>();

        i4 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int getNumberOfColumns()>();

        r21 = newmultiarray (int)[i3][i4];

        i5 = 0;

     label05:
        if i5 >= i3 goto label10;

        i6 = 0;

     label06:
        if i6 >= i4 goto label09;

        r5 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i5, i6);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.Integer) $r8;

        if r6 != null goto label07;

        $r10 = r21[i5];

        $r10[i6] = 0;

        goto label08;

     label07:
        $r9 = r21[i5];

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $r9[i6] = $i0;

     label08:
        i6 = i6 + 1;

        goto label06;

     label09:
        i5 = i5 + 1;

        goto label05;

     label10:
        return r21;
    }

    public static double computeQuantizationError(java.lang.Iterable, java.lang.Iterable, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0, r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r2;
        java.util.Iterator r3;
        double[] r4, $r8;
        boolean $z0;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.NoDataException $r5;
        java.lang.Object $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        int i0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        d3 = 0.0;

        i0 = 0;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (double[]) $r6;

        i0 = i0 + 1;

        $r7 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r4, r1, r2);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $d2 = interfaceinvoke r2.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>(r4, $r8);

        d3 = d3 + $d2;

        goto label1;

     label2:
        if i0 != 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r5;

     label3:
        $d0 = (double) i0;

        $d1 = d3 / $d0;

        return $d1;
    }

    public static double computeTopographicError(java.lang.Iterable, org.apache.commons.math3.ml.neuralnet.Network, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        java.lang.Iterable r0;
        org.apache.commons.math3.ml.neuralnet.Network r1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r2;
        java.util.Iterator r3;
        double[] r4;
        org.apache.commons.math3.util.Pair r5;
        boolean $z0, $z1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.NoDataException $r6;
        java.lang.Object $r7, $r8, $r11;
        org.apache.commons.math3.ml.neuralnet.Neuron $r9;
        java.util.Collection $r10;
        int i0, i1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.commons.math3.ml.neuralnet.Network;

        r2 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        i0 = 0;

        i1 = 0;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (double[]) $r7;

        i1 = i1 + 1;

        r5 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.util.Pair findBestAndSecondBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r4, r1, r2);

        $r8 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r9 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r8;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r9);

        $r11 = virtualinvoke r5.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $z1 = interfaceinvoke $r10.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        if $z1 != 0 goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        if i1 != 0 goto label4;

        $r6 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r6;

     label4:
        $d1 = (double) i0;

        $d0 = (double) i1;

        $d2 = $d1 / $d0;

        return $d2;
    }
}
