public class org.apache.commons.math.distribution.ZipfDistributionImpl extends org.apache.commons.math.distribution.AbstractIntegerDistribution implements org.apache.commons.math.distribution.ZipfDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    private int numberOfElements;
    private double exponent;

    public void <init>(int, double) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: void setNumberOfElementsInternal(int)>(i0);

        specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: void setExponentInternal(double)>(d0);

        return;
    }

    public int getNumberOfElements()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        return $i0;
    }

    public void setNumberOfElements(int)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: void setNumberOfElementsInternal(int)>(i0);

        return;
    }

    private void setNumberOfElementsInternal(int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label1:
        r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements> = i0;

        return;
    }

    public double getExponent()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent>;

        return $d0;
    }

    public void setExponent(double)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: void setExponentInternal(double)>(d0);

        return;
    }

    private void setExponentInternal(double) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_EXPONENT>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent> = d0;

        return;
    }

    public double probability(int)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i1 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        if i0 <= $i1 goto label2;

     label1:
        return 0.0;

     label2:
        $d1 = (double) i0;

        $d0 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent>;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d1, $d0);

        $d4 = 1.0 / $d2;

        $i2 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        $d3 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent>;

        $d5 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>($i2, $d3);

        $d6 = $d4 / $d5;

        return $d6;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return 0.0;

     label1:
        $i1 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        if i0 < $i1 goto label2;

        return 1.0;

     label2:
        $d0 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent>;

        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, $d0);

        $i2 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        $d2 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double exponent>;

        $d3 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>($i2, $d2);

        $d4 = $d1 / $d3;

        return $d4;
    }

    protected int getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        d0 := @parameter0: double;

        return 0;
    }

    protected int getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        double d0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int numberOfElements>;

        return $i0;
    }

    private double generalizedHarmonic(int, double)
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0, i1;
        double d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d4 = 0.0;

        i1 = i0;

     label1:
        if i1 <= 0 goto label2;

        $d1 = (double) i1;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d1, d0);

        $d3 = 1.0 / $d2;

        d4 = d4 + $d3;

        i1 = i1 + -1;

        goto label1;

     label2:
        return d4;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        return 1;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int getNumberOfElements()>();

        return $i0;
    }

    protected double getNumericalMean()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0;
        double d0, d1, d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int getNumberOfElements()>();

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double getExponent()>();

        $d3 = d0 - 1.0;

        d1 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, $d3);

        d2 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, d0);

        $d4 = d1 / d2;

        return $d4;
    }

    protected double getNumericalVariance()
    {
        org.apache.commons.math.distribution.ZipfDistributionImpl r0;
        int i0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math.distribution.ZipfDistributionImpl;

        i0 = virtualinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: int getNumberOfElements()>();

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double getExponent()>();

        $d4 = d0 - 2.0;

        d1 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, $d4);

        $d5 = d0 - 1.0;

        d2 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, $d5);

        d3 = specialinvoke r0.<org.apache.commons.math.distribution.ZipfDistributionImpl: double generalizedHarmonic(int,double)>(i0, d0);

        $d9 = d1 / d3;

        $d7 = d2 * d2;

        $d6 = d3 * d3;

        $d8 = $d7 / $d6;

        $d10 = $d9 - $d8;

        return $d10;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.ZipfDistributionImpl: long serialVersionUID> = -140627372283420404L;

        return;
    }
}
