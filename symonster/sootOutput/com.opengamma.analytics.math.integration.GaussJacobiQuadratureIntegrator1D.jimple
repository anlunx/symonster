public class com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D extends com.opengamma.analytics.math.integration.GaussianQuadratureIntegrator1D
{
    private static final com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction GENERATOR;
    private static final java.lang.Double[] LIMITS;

    public void <init>(int)
    {
        com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D r0;
        int i0;
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction $r1;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D;

        i0 := @parameter0: int;

        $r1 = <com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction GENERATOR>;

        specialinvoke r0.<com.opengamma.analytics.math.integration.GaussianQuadratureIntegrator1D: void <init>(int,com.opengamma.analytics.math.integration.QuadratureWeightAndAbscissaFunction)>(i0, $r1);

        return;
    }

    public java.lang.Double[] getLimits()
    {
        com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D;

        $r1 = <com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D: java.lang.Double[] LIMITS>;

        return $r1;
    }

    public com.opengamma.analytics.math.function.Function1D getIntegralFunction(com.opengamma.analytics.math.function.Function1D, java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D r0;
        com.opengamma.analytics.math.function.Function1D r1;
        java.lang.Double r2, r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D$1 $r4;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "lower");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "upper");

        $d2 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 - $d3;

        d0 = $d4 / 2.0;

        $d5 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d6 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 + $d6;

        d1 = $d7 / 2.0;

        $r4 = new com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D$1;

        specialinvoke $r4.<com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D$1: void <init>(com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D,double,com.opengamma.analytics.math.function.Function1D,double)>(r0, d0, r1, d1);

        return $r4;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction $r0;
        java.lang.Double[] $r1;
        java.lang.Double $r2, $r3;

        $r0 = new com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction;

        specialinvoke $r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: void <init>(double,double)>(0.0, 0.0);

        <com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction GENERATOR> = $r0;

        $r1 = newarray (java.lang.Double)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-1.0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[1] = $r3;

        <com.opengamma.analytics.math.integration.GaussJacobiQuadratureIntegrator1D: java.lang.Double[] LIMITS> = $r1;

        return;
    }
}
