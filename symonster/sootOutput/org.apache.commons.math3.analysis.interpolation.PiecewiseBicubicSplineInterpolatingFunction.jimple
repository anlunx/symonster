public class org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction extends java.lang.Object implements org.apache.commons.math3.analysis.BivariateFunction
{
    private static final int MIN_NUM_POINTS;
    private final double[] xval;
    private final double[] yval;
    private final double[][] fval;

    public void <init>(double[], double[], double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double[] r1, r2, $r4, $r5, $r6, $r7, $r9, $r11, $r15;
        double[][] r3, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object $r8, $r10, $r12;
        org.apache.commons.math3.exception.DimensionMismatchException $r14, $r16;
        org.apache.commons.math3.exception.NullArgumentException $r17;
        org.apache.commons.math3.exception.NoDataException $r18;
        org.apache.commons.math3.exception.InsufficientDataException $r19;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 == null goto label1;

        $r4 = r3[0];

        if $r4 != null goto label2;

     label1:
        $r17 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r17.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r17;

     label2:
        i0 = lengthof r1;

        i1 = lengthof r2;

        if i0 == 0 goto label3;

        if i1 == 0 goto label3;

        $i2 = lengthof r3;

        if $i2 == 0 goto label3;

        $r5 = r3[0];

        $i3 = lengthof $r5;

        if $i3 != 0 goto label4;

     label3:
        $r18 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r18.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r18;

     label4:
        if i0 < 5 goto label5;

        if i1 < 5 goto label5;

        $i4 = lengthof r3;

        if $i4 < 5 goto label5;

        $r6 = r3[0];

        $i5 = lengthof $r6;

        if $i5 >= 5 goto label6;

     label5:
        $r19 = new org.apache.commons.math3.exception.InsufficientDataException;

        specialinvoke $r19.<org.apache.commons.math3.exception.InsufficientDataException: void <init>()>();

        throw $r19;

     label6:
        $i6 = lengthof r3;

        if i0 == $i6 goto label7;

        $r16 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = lengthof r3;

        specialinvoke $r16.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i9);

        throw $r16;

     label7:
        $r7 = r3[0];

        $i7 = lengthof $r7;

        if i1 == $i7 goto label8;

        $r14 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r15 = r3[0];

        $i8 = lengthof $r15;

        specialinvoke $r14.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, $i8);

        throw $r14;

     label8:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r2);

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (double[]) $r8;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval> = $r9;

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (double[]) $r10;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval> = $r11;

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r13 = (double[][]) $r12;

        r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[][] fval> = $r13;

        return;
    }

    public double value(double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, d6;
        int i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        double[] r2, r3, r4, r5, $r7, $r8, $r10, $r11, $r12;
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator $r6;
        double[][] $r9;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r13, r14;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r6 = new org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        specialinvoke $r6.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: void <init>()>();

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        i2 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: int searchIndex(double,double[],int,int)>(d0, $r7, 2, 5);

        $r8 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        i3 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: int searchIndex(double,double[],int,int)>(d1, $r8, 2, 5);

        r2 = newarray (double)[5];

        r3 = newarray (double)[5];

        r4 = newarray (double)[5];

        r5 = newarray (double)[5];

        i8 = 0;

     label1:
        if i8 >= 5 goto label2;

        $r11 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $i6 = i2 + i8;

        $d4 = $r11[$i6];

        r2[i8] = $d4;

        $r12 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $i7 = i3 + i8;

        $d5 = $r12[$i7];

        r3[i8] = $d5;

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 0;

     label3:
        if i9 >= 5 goto label6;

        i10 = 0;

     label4:
        if i10 >= 5 goto label5;

        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[][] fval>;

        $i4 = i2 + i10;

        $r10 = $r9[$i4];

        $i5 = i3 + i9;

        $d3 = $r10[$i5];

        r4[i10] = $d3;

        i10 = i10 + 1;

        goto label4;

     label5:
        r13 = virtualinvoke $r6.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r2, r4);

        $d2 = virtualinvoke r13.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double value(double)>(d0);

        r5[i9] = $d2;

        i9 = i9 + 1;

        goto label3;

     label6:
        r14 = virtualinvoke $r6.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r3, r5);

        d6 = virtualinvoke r14.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double value(double)>(d1);

        return d6;
    }

    public boolean isValidPoint(double, double)
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        double[] $r1, $r2, $r3, $r4, $r5, $r6;
        byte $b0, $b3, $b4, $b7;
        int $i1, $i2, $i5, $i6;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $d2 = $r1[0];

        $b0 = d0 cmpg $d2;

        if $b0 < 0 goto label1;

        $r3 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $r2 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] xval>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        $d3 = $r3[$i2];

        $b3 = d0 cmpl $d3;

        if $b3 > 0 goto label1;

        $r4 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $d4 = $r4[0];

        $b4 = d1 cmpg $d4;

        if $b4 < 0 goto label1;

        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $r5 = r0.<org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: double[] yval>;

        $i5 = lengthof $r5;

        $i6 = $i5 - 1;

        $d5 = $r6[$i6];

        $b7 = d1 cmpl $d5;

        if $b7 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private int searchIndex(double, double[], int, int)
    {
        org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction r0;
        double d0, $d1, $d2;
        double[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i12 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r1, d0);

        if i12 == -1 goto label1;

        $i4 = lengthof r1;

        $i5 = neg $i4;

        $i6 = $i5 - 1;

        if i12 != $i6 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d1 = r1[0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $d2 = r1[$i3];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label2:
        if i12 >= 0 goto label3;

        $i10 = neg i12;

        $i11 = $i10 - i0;

        i13 = $i11 - 1;

        goto label4;

     label3:
        i13 = i12 - i0;

     label4:
        if i13 >= 0 goto label5;

        i13 = 0;

     label5:
        $i8 = i13 + i1;

        $i7 = lengthof r1;

        if $i8 < $i7 goto label6;

        $i9 = lengthof r1;

        i13 = $i9 - i1;

     label6:
        return i13;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.interpolation.PiecewiseBicubicSplineInterpolatingFunction: int MIN_NUM_POINTS> = 5;

        return;
    }
}
