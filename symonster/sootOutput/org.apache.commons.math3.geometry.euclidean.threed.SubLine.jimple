public class org.apache.commons.math3.geometry.euclidean.threed.SubLine extends java.lang.Object
{
    private static final double DEFAULT_TOLERANCE;
    private final org.apache.commons.math3.geometry.euclidean.threed.Line line;
    private final org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Line r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line> = r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion> = r2;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;
        double d0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, d0);

        $r4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>($r3, $r4);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Segment) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.threed.Segment r1;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r2, $r5;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Segment;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Line getLine()>();

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getStart()>();

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getEnd()>();

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Segment: org.apache.commons.math3.geometry.euclidean.threed.Line getLine()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getTolerance()>();

        $r6 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r3, $r4, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>($r2, $r6);

        return;
    }

    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0;
        java.util.List r1;
        java.util.Iterator r3;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r5, r6;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r7;
        java.util.ArrayList $r8;
        int $i0;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r10, $r12;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r11, $r13, $r15;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Segment $r14;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        r1 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r9;

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r10 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        r5 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r10);

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r12 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        r6 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r12);

        $r14 = new org.apache.commons.math3.geometry.euclidean.threed.Segment;

        $r15 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.threed.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>(r5, r6, $r15);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        return $r8;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine r0, r1;
        boolean z0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r17, $r18;
        org.apache.commons.math3.geometry.partitioning.Region$Location r3, r4, $r13, $r14, $r15, $r16;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r5, $r6, $r7, $r10;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r8, $r11;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r9, $r12;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        z0 := @parameter1: boolean;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r5 = r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        r2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)>($r5);

        if r2 != null goto label1;

        return null;

     label1:
        $r8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r2);

        r3 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r9);

        $r11 = r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r10 = r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r2);

        r4 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r12);

        if z0 == 0 goto label4;

        $r15 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if r3 == $r15 goto label2;

        $r16 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if r4 == $r16 goto label2;

        $r17 = r2;

        goto label3;

     label2:
        $r17 = null;

     label3:
        return $r17;

     label4:
        $r13 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if r3 != $r13 goto label5;

        $r14 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if r4 != $r14 goto label5;

        $r18 = r2;

        goto label6;

     label5:
        $r18 = null;

     label6:
        return $r18;
    }

    private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r0, r1;
        double d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5, $r6;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r0, r1, d0);

        $r4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r0);

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d1, $d2, d0);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.threed.SubLine: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
