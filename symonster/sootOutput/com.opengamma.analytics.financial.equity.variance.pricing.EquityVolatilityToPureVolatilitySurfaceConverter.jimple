public class com.opengamma.analytics.financial.equity.variance.pricing.EquityVolatilityToPureVolatilitySurfaceConverter extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.EquityVolatilityToPureVolatilitySurfaceConverter r0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.EquityVolatilityToPureVolatilitySurfaceConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface getConvertedSurface(double, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve, com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends, double[], double[][], double[][], com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurfaceInterpolator)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r0;
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r1;
        double[] r2, $r22, $r23, $r24, $r25, $r26, $r28, $r32, $r33, $r34, $r35, $r36, $r37, $r41, $r43;
        double[][] r3, r4, r6, r7;
        com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurfaceInterpolator r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, i12, i13, i14;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] $r11, $r14, $r27, $r38;
        java.lang.Integer $r12, $r13, $r15, $r16, $r39, $r42, $r44;
        com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle $r17;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.StandardSmileSurfaceDataBundle $r18;
        com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve $r19;
        com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface $r20;
        com.opengamma.analytics.math.surface.Surface $r21;
        byte $b6, $b7;
        java.lang.Double $r29, $r30, $r31, $r40;
        com.opengamma.analytics.financial.model.volatility.surface.BlackVolatilitySurfaceMoneynessFcnBackedByGrid r47;

        d0 := @parameter0: double;

        r0 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        r1 := @parameter2: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[][];

        r4 := @parameter5: double[][];

        r5 := @parameter6: com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurfaceInterpolator;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "discount curve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "dividends");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "expiries");

        i0 = lengthof r2;

        $i2 = lengthof r3;

        if $i2 != i0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r11 = newarray (java.lang.Object)[2];

        $i3 = lengthof r3;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r13;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "number of strike strips ({}) not equal to number of expiries({})", $r11);

        $i4 = lengthof r4;

        if $i4 != i0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $r14 = newarray (java.lang.Object)[2];

        $i5 = lengthof r3;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r14[0] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[1] = $r16;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "number of price strips ({}) not equal to number of expiries({})", $r14);

        i12 = 0;

     label05:
        if i12 >= i0 goto label08;

        $r36 = r3[i12];

        $i9 = lengthof $r36;

        $r37 = r4[i12];

        $i8 = lengthof $r37;

        if $i9 != $i8 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        $r38 = newarray (java.lang.Object)[4];

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r38[0] = $r39;

        $d16 = r2[i12];

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d16);

        $r38[1] = $r40;

        $r41 = r4[i12];

        $i10 = lengthof $r41;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r38[2] = $r42;

        $r43 = r3[i12];

        $i11 = lengthof $r43;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r38[3] = $r44;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "number of prices and strikes in strip #{} (expiry = {}) do not match. {} prices and {} strikes", $r38);

        i12 = i12 + 1;

        goto label05;

     label08:
        $r17 = new com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle;

        specialinvoke $r17.<com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle: void <init>(double,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve,com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends)>(d0, r0, r1);

        r6 = newarray (double[])[i0];

        r7 = newarray (double[])[i0];

        i13 = 0;

     label09:
        if i13 >= i0 goto label16;

        d17 = r2[i13];

        d1 = virtualinvoke $r17.<com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle: double getF(double)>(d17);

        d2 = virtualinvoke $r17.<com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle: double getD(double)>(d17);

        d3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d17);

        $r22 = r3[i13];

        i1 = lengthof $r22;

        $r23 = newarray (double)[i1];

        r6[i13] = $r23;

        $r24 = newarray (double)[i1];

        r7[i13] = $r24;

        i14 = 0;

     label10:
        if i14 >= i1 goto label15;

        $r25 = r3[i13];

        $d6 = $r25[i14];

        $b6 = $d6 cmpl d1;

        if $b6 < 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        z0 = $z4;

        $r26 = r3[i13];

        $d7 = $r26[i14];

        d4 = $d7 - d2;

        $b7 = d4 cmpl 0.0;

        if $b7 < 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        $r27 = newarray (java.lang.Object)[3];

        $r28 = r3[i13];

        $d8 = $r28[i14];

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r27[0] = $r29;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d17);

        $r27[1] = $r30;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r27[2] = $r31;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "strike of {} at expiry {} is less than the discounted value of future cash dividends {}. Either remove this option or change the dividend assumption", $r27);

        $r32 = r6[i13];

        $d9 = d1 - d2;

        $d10 = d4 / $d9;

        $r32[i14] = $d10;

        $r33 = r4[i13];

        $d11 = $r33[i14];

        $d13 = $d11 / d3;

        $d12 = d1 - d2;

        d5 = $d13 / $d12;

        $r35 = r7[i13];

        $r34 = r6[i13];

        $d14 = $r34[i14];

        $d15 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double impliedVolatility(double,double,double,double,boolean)>(d5, 1.0, $d14, d17, z0);

        $r35[i14] = $d15;

        i14 = i14 + 1;

        goto label10;

     label15:
        i13 = i13 + 1;

        goto label09;

     label16:
        $r18 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.StandardSmileSurfaceDataBundle;

        $r19 = new com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve;

        specialinvoke $r19.<com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve: void <init>(double)>(1.0);

        specialinvoke $r18.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.StandardSmileSurfaceDataBundle: void <init>(com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve,double[],double[][],double[][])>($r19, r2, r6, r7);

        r47 = virtualinvoke r5.<com.opengamma.analytics.financial.model.volatility.surface.VolatilitySurfaceInterpolator: com.opengamma.analytics.financial.model.volatility.surface.BlackVolatilitySurfaceMoneynessFcnBackedByGrid getVolatilitySurface(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.SmileSurfaceDataBundle)>($r18);

        $r20 = new com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface;

        $r21 = virtualinvoke r47.<com.opengamma.analytics.financial.model.volatility.surface.BlackVolatilitySurfaceMoneyness: com.opengamma.analytics.math.surface.Surface getSurface()>();

        specialinvoke $r20.<com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface: void <init>(com.opengamma.analytics.math.surface.Surface)>($r21);

        return $r20;
    }
}
