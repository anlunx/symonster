public class org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver
{
    private static final double DEFAULT_ABSOLUTE_ACCURACY;

    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: void <init>(double)>(1.0E-6);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver: void <init>(double)>(d0);

        return;
    }

    public double solve(int, org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver r0;
        int i0;
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction r1;
        double d0, d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $d2 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double midpoint(double,double)>(d0, d1);

        $d3 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double)>(i0, r1, $d2);

        return $d3;
    }

    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1;
        int[] $r2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: double getStartValue()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: double getAbsoluteAccuracy()>();

        d8 = d0;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: org.apache.commons.math3.analysis.differentiation.DerivativeStructure computeObjectiveValueAndDerivative(double)>(d8);

        $d3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $r2 = newarray (int)[1];

        $r2[0] = 1;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>($r2);

        $d5 = $d3 / $d4;

        d2 = d8 - $d5;

        $d6 = d2 - d8;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b0 = $d7 cmpg d1;

        if $b0 > 0 goto label2;

        return d2;

     label2:
        d8 = d2;

        goto label1;
    }

    public volatile double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, $d2;
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r2 = (org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction) r1;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: double solve(int,org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction,double,double)>(i0, $r2, d0, d1);

        return $d2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
