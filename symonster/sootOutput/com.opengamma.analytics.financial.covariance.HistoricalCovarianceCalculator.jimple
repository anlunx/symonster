public class com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator extends com.opengamma.analytics.financial.covariance.CovarianceCalculator
{

    public void <init>()
    {
        com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator;

        specialinvoke r0.<com.opengamma.analytics.financial.covariance.CovarianceCalculator: void <init>()>();

        return;
    }

    public transient java.lang.Double evaluate(com.opengamma.timeseries.DoubleTimeSeries[])
    {
        com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator r0;
        com.opengamma.timeseries.DoubleTimeSeries[] r1;
        com.opengamma.timeseries.DoubleTimeSeries r2, r3, $r7, $r8;
        int i0, $i1, $i2;
        java.util.Iterator r4, r5;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, d12, d13;
        java.lang.Double $r9, $r11, $r13;
        java.lang.Object $r10, $r12;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator;

        r1 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "time series array");

        $i1 = lengthof r1;

        if $i1 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "must have two time series");

        $r8 = r1[0];

        $r7 = r1[1];

        virtualinvoke r0.<com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator: void testTimeSeries(com.opengamma.timeseries.DoubleTimeSeries,com.opengamma.timeseries.DoubleTimeSeries)>($r8, $r7);

        r2 = r1[0];

        r3 = r1[1];

        i0 = interfaceinvoke r2.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        d8 = 0.0;

        d9 = 0.0;

        d10 = 0.0;

        r4 = interfaceinvoke r2.<com.opengamma.timeseries.DoubleTimeSeries: java.util.Iterator valuesIterator()>();

        r5 = interfaceinvoke r3.<com.opengamma.timeseries.DoubleTimeSeries: java.util.Iterator valuesIterator()>();

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.Double) $r10;

        d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.Double) $r12;

        d1 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d7 = d0 * d1;

        d8 = d8 + $d7;

        d9 = d9 + d0;

        d10 = d10 + d1;

        goto label3;

     label4:
        $i2 = i0 - 1;

        $d2 = (double) $i2;

        d11 = d8 / $d2;

        $d3 = (double) i0;

        d12 = d9 / $d3;

        $d4 = (double) i0;

        d13 = d10 / $d4;

        $d5 = d12 * d13;

        $d6 = d11 - $d5;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r9;
    }

    public volatile java.lang.Object evaluate(java.lang.Object[])
    {
        com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator r0;
        java.lang.Object[] r1;
        com.opengamma.timeseries.DoubleTimeSeries[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (com.opengamma.timeseries.DoubleTimeSeries[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.covariance.HistoricalCovarianceCalculator: java.lang.Double evaluate(com.opengamma.timeseries.DoubleTimeSeries[])>($r2);

        return $r3;
    }
}
