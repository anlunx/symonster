public class com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder extends com.opengamma.analytics.financial.model.option.pricing.tree.BinomialTreeBuilder
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.BinomialTreeBuilder: void <init>()>();

        return;
    }

    protected com.opengamma.util.tuple.DoublesPair getCentralNodePair(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        byte $b0;
        com.opengamma.util.tuple.DoublesPair $r1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d10 = d1 * d1;

        d4 = $d10 * d0;

        d5 = 2.0 * d3;

        $d11 = 2.0 * d3;

        $d12 = $d11 - d2;

        $d13 = d2 * $d12;

        d6 = $d13 - d4;

        $d15 = d5 * d5;

        $d14 = 4.0 * d6;

        d7 = $d15 - $d14;

        $b0 = d7 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "can\'t find upper node - root negative");

        $d16 = staticinvoke <java.lang.Math: double sqrt(double)>(d7);

        $d17 = d5 + $d16;

        d8 = $d17 / 2.0;

        $d18 = 2.0 * d3;

        d9 = $d18 - d8;

        $r1 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d9, d8);

        return $r1;
    }

    protected double getNextHigherNode(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8;
        byte $b0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = d1 * d1;

        d4 = $d5 * d0;

        $b0 = d2 cmpl d3;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "need forward > lowerNode");

        $d6 = d2 - d3;

        $d7 = d4 / $d6;

        $d8 = $d7 + d2;

        return $d8;
    }

    protected double getNextLowerNode(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, d8;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d5 = d1 * d1;

        d4 = $d5 * d0;

        $b1 = d3 cmpl d2;

        if $b1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "need higherNode > forward");

        $d6 = d2 - d3;

        $d7 = d4 / $d6;

        d8 = $d7 + d2;

        $b2 = d8 cmpg 0.0;

        if $b2 >= 0 goto label4;

        d8 = 0.0;

     label4:
        return d8;
    }

    protected double[] getForwards(double[], com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;
        double[] r1, r3;
        com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d3 = r1[i1];

        d2 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle: double getLocalDrift(double,double)>($d3, d0);

        $d5 = r1[i1];

        $d4 = d2 * d1;

        $d6 = $d5 + $d4;

        r3[i1] = $d6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    protected volatile double[] getForwards(double[], com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder r0;
        double[] r1, $r4;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle r2;
        double d0, d1;
        com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle) r2;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.NormalBinomialTreeBuilder: double[] getForwards(double[],com.opengamma.analytics.financial.model.option.definition.GeneralNormalOptionDataBundle,double,double)>(r1, $r3, d0, d1);

        return $r4;
    }
}
