public class org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator
{
    private static final java.lang.String METHOD_NAME;

    public void <init>(int, double, double, double, double) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator r0;
        int i0, $i1;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Moulton", i0, $i1, d0, d1, d2, d3);

        return;
    }

    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator r0;
        int i0, $i1;
        double d0, d1;
        double[] r1, r2;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 := @parameter3: double[];

        r2 := @parameter4: double[];

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Moulton", i0, $i1, d0, d1, r1, r2);

        return;
    }

    public double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31, d32, d33, d34, d35, $d36, d37;
        double[] r2, r3, r4, r5, r6, $r12, $r14, $r15, $r17, r22;
        int i0, $i2, $i3, $i4, $i5, $i6, $i11, $i12, i15, i16;
        boolean z0, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.commons.math.ode.sampling.StepHandler r8;
        byte $b1, $b7, $b8, $b9, $b10, $b13, $b14;
        org.apache.commons.math.ode.sampling.NordsieckStepInterpolator $r9;
        java.util.Collection $r10;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r11, $r13, $r16, r20;
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector $r18;
        java.lang.Object $r19;
        java.util.Iterator r21;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>(r1, d0, r2, d1, r3);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)>(r1);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void resetEvaluations()>();

        $b1 = d1 cmpl d0;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        if r3 == r2 goto label03;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);

     label03:
        $i2 = lengthof r2;

        r4 = newarray (double)[$i2];

        $i3 = lengthof r2;

        r5 = newarray (double)[$i3];

        $i4 = lengthof r2;

        r6 = newarray (double)[$i4];

        r20 = null;

        $r9 = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;

        specialinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean)>(r3, z0);

        $r10 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: java.util.Collection stepHandlers>;

        r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r19 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math.ode.sampling.StepHandler) $r19;

        interfaceinvoke r8.<org.apache.commons.math.ode.sampling.StepHandler: void reset()>();

        goto label04;

     label05:
        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void setStateInitialized(boolean)>(0);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>(d0, r3, d1);

        $d6 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d5 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r12 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($d6, $d5, $r12, $r11);

        $d7 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d7);

        d30 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d30);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep> = 0;

     label06:
        d31 = 10.0;

     label07:
        $b14 = d31 cmpl 1.0;

        if $b14 < 0 goto label11;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize> = d30;

        $d24 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d23 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d32 = $d24 + $d23;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>(d32);

        $r15 = virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r5, 0, $i11);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>(d32, r5, r4);

        i15 = 0;

     label08:
        $i12 = lengthof r2;

        if i15 >= $i12 goto label09;

        $d28 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d27 = r4[i15];

        $d29 = $d28 * $d27;

        r6[i15] = $d29;

        i15 = i15 + 1;

        goto label08;

     label09:
        $r16 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        r20 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix)>($r16);

        $r17 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($r17, r6, r20);

        $r18 = new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        specialinvoke $r18.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: void <init>(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator,double[],double[],double[])>(r0, r3, r6, r5);

        d31 = virtualinvoke r20.<org.apache.commons.math.linear.Array2DRowRealMatrix: double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)>($r18);

        $b13 = d31 cmpl 1.0;

        if $b13 < 0 goto label10;

        d33 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>(d31);

        $d25 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d26 = $d25 * d33;

        d30 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>($d26, z0, 0);

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d30);

     label10:
        goto label07;

     label11:
        $d9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d8 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d34 = $d9 + $d8;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>(d34, r5, r4);

        $i5 = lengthof r2;

        r22 = newarray (double)[$i5];

        i16 = 0;

     label12:
        $i6 = lengthof r2;

        if i16 >= $i6 goto label13;

        $d21 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d20 = r4[i16];

        $d22 = $d21 * $d20;

        r22[i16] = $d22;

        i16 = i16 + 1;

        goto label12;

     label13:
        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>(r6, r22, r20);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r3, 0, i0);

        $d10 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>(d34, $d10, r22, r20);

        $d11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d11);

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void shift()>();

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d34);

        $d12 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r9, r3, r4, d1);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart> = $d12;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled> = r22;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck> = r20;

        $z3 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z3 != 0 goto label24;

        $d13 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d13);

        $z4 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: boolean resetOccurred>;

        if $z4 == 0 goto label14;

        $d17 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>($d17, r3, d1);

        $d19 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d18 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r14 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r13 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($d19, $d18, $r14, $r13);

     label14:
        d35 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>(d31);

        $d14 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d2 = $d14 * d35;

        $d15 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d3 = $d15 + d2;

        if z0 == 0 goto label16;

        $b10 = d3 cmpl d1;

        if $b10 < 0 goto label15;

        $z7 = 1;

        goto label18;

     label15:
        $z7 = 0;

        goto label18;

     label16:
        $b7 = d3 cmpg d1;

        if $b7 > 0 goto label17;

        $z7 = 1;

        goto label18;

     label17:
        $z7 = 0;

     label18:
        d30 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, $z7);

        $d36 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d4 = $d36 + d30;

        if z0 == 0 goto label20;

        $b9 = d4 cmpl d1;

        if $b9 < 0 goto label19;

        $z8 = 1;

        goto label22;

     label19:
        $z8 = 0;

        goto label22;

     label20:
        $b8 = d4 cmpg d1;

        if $b8 > 0 goto label21;

        $z8 = 1;

        goto label22;

     label21:
        $z8 = 0;

     label22:
        if $z8 == 0 goto label23;

        $d16 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d30 = d1 - $d16;

     label23:
        virtualinvoke $r9.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d30);

     label24:
        $z9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z9 == 0 goto label06;

        d37 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepStart> = #NaN;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double stepSize> = #NaN;

        return d37;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: java.lang.String METHOD_NAME> = "Adams-Moulton";

        return;
    }
}
