public class org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer extends java.lang.Object
{
    private final java.util.Random random;
    private final org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy;

    public void <init>(java.util.Random)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random r1;
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r2;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Random;

        $r2 = <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy LARGEST_VARIANCE>;

        specialinvoke r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: void <init>(java.util.Random,org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)>(r1, $r2);

        return;
    }

    public void <init>(java.util.Random, org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random r1;
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy r2;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random> = r1;

        r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy> = r2;

        return;
    }

    public java.util.List cluster(java.util.Collection, int, int)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.util.Iterator r3;
        org.apache.commons.math.stat.clustering.Cluster r4, $r19;
        java.util.Random $r5;
        java.util.ArrayList $r6;
        boolean $z0, $z1, $z2, z4;
        java.lang.Object $r7, $r11;
        java.util.List $r8, $r10, r17;
        org.apache.commons.math.stat.clustering.Clusterable $r9, $r12, r18;
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r13;
        int[] $r14;
        org.apache.commons.math.exception.ConvergenceException $r15;
        org.apache.commons.math.exception.util.LocalizedFormats $r16;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        r17 = staticinvoke <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: java.util.List chooseInitialCenters(java.util.Collection,int,java.util.Random)>(r1, i0, $r5);

        staticinvoke <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: void assignPointsToClusters(java.util.Collection,java.util.Collection)>(r17, r1);

        if i1 >= 0 goto label01;

        $i5 = 2147483647;

        goto label02;

     label01:
        $i5 = i1;

     label02:
        i2 = $i5;

        i6 = 0;

     label03:
        if i6 >= i2 goto label14;

        z4 = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math.stat.clustering.Cluster) $r7;

        $r8 = virtualinvoke r4.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label10;

        $r14 = <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$1: int[] $SwitchMap$org$apache$commons$math$stat$clustering$KMeansPlusPlusClusterer$EmptyClusterStrategy>;

        $r13 = r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        $i3 = virtualinvoke $r13.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: int ordinal()>();

        $i4 = $r14[$i3];

        tableswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            default: goto label08;
        };

     label05:
        r18 = specialinvoke r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)>(r17);

        goto label09;

     label06:
        r18 = specialinvoke r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)>(r17);

        goto label09;

     label07:
        r18 = specialinvoke r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.Clusterable getFarthestPoint(java.util.Collection)>(r17);

        goto label09;

     label08:
        $r15 = new org.apache.commons.math.exception.ConvergenceException;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        specialinvoke $r15.<org.apache.commons.math.exception.ConvergenceException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r16);

        throw $r15;

     label09:
        z4 = 1;

        goto label11;

     label10:
        $r9 = virtualinvoke r4.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        $r10 = virtualinvoke r4.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math.stat.clustering.Clusterable: java.lang.Object centroidOf(java.util.Collection)>($r10);

        r18 = (org.apache.commons.math.stat.clustering.Clusterable) $r11;

        $r12 = virtualinvoke r4.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        $z2 = virtualinvoke r18.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label11;

        z4 = 1;

     label11:
        $r19 = new org.apache.commons.math.stat.clustering.Cluster;

        specialinvoke $r19.<org.apache.commons.math.stat.clustering.Cluster: void <init>(org.apache.commons.math.stat.clustering.Clusterable)>(r18);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label04;

     label12:
        if z4 != 0 goto label13;

        return r17;

     label13:
        staticinvoke <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: void assignPointsToClusters(java.util.Collection,java.util.Collection)>($r6, r1);

        r17 = $r6;

        i6 = i6 + 1;

        goto label03;

     label14:
        return r17;
    }

    private static void assignPointsToClusters(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        java.util.Iterator r2;
        org.apache.commons.math.stat.clustering.Clusterable r3;
        org.apache.commons.math.stat.clustering.Cluster r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.stat.clustering.Clusterable) $r5;

        r4 = staticinvoke <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.Cluster getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable)>(r0, r3);

        virtualinvoke r4.<org.apache.commons.math.stat.clustering.Cluster: void addPoint(org.apache.commons.math.stat.clustering.Clusterable)>(r3);

        goto label1;

     label2:
        return;
    }

    private static java.util.List chooseInitialCenters(java.util.Collection, int, java.util.Random)
    {
        java.util.Collection r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10;
        java.util.Random r1;
        org.apache.commons.math.stat.clustering.Clusterable r4, r6, $r14, r16;
        double[] r5;
        java.util.ArrayList $r7, $r8;
        java.lang.Object $r9, $r11, $r13;
        org.apache.commons.math.stat.clustering.Cluster $r10, $r12, r15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        byte $b7;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Random;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i1);

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i2);

        r4 = (org.apache.commons.math.stat.clustering.Clusterable) $r9;

        $r10 = new org.apache.commons.math.stat.clustering.Cluster;

        specialinvoke $r10.<org.apache.commons.math.stat.clustering.Cluster: void <init>(org.apache.commons.math.stat.clustering.Clusterable)>(r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        r5 = newarray (double)[$i3];

     label1:
        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i4 >= i0 goto label7;

        i8 = 0;

        i9 = 0;

     label2:
        $i5 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i9 >= $i5 goto label3;

        $r13 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i9);

        r6 = (org.apache.commons.math.stat.clustering.Clusterable) $r13;

        r15 = staticinvoke <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math.stat.clustering.Cluster getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable)>($r8, r6);

        $r14 = virtualinvoke r15.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        d7 = interfaceinvoke r6.<org.apache.commons.math.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r14);

        $d4 = (double) i8;

        $d3 = d7 * d7;

        $d5 = $d4 + $d3;

        i8 = (int) $d5;

        $d6 = (double) i8;

        r5[i9] = $d6;

        i9 = i9 + 1;

        goto label2;

     label3:
        $d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        $d1 = (double) i8;

        d8 = $d0 * $d1;

        i10 = 0;

     label4:
        $i6 = lengthof r5;

        if i10 >= $i6 goto label6;

        $d2 = r5[i10];

        $b7 = $d2 cmpl d8;

        if $b7 < 0 goto label5;

        $r11 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i10);

        r16 = (org.apache.commons.math.stat.clustering.Clusterable) $r11;

        $r12 = new org.apache.commons.math.stat.clustering.Cluster;

        specialinvoke $r12.<org.apache.commons.math.stat.clustering.Cluster: void <init>(org.apache.commons.math.stat.clustering.Clusterable)>(r16);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label6;

     label5:
        i10 = i10 + 1;

        goto label4;

     label6:
        goto label1;

     label7:
        return $r8;
    }

    private org.apache.commons.math.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math.stat.clustering.Cluster r2, r16;
        org.apache.commons.math.stat.clustering.Clusterable r3, r5, $r8;
        boolean $z0, $z1, $z2;
        java.util.Random $r6;
        int $i0, $i1;
        java.lang.Object $r7, $r11, $r15;
        org.apache.commons.math.exception.ConvergenceException $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        java.util.List $r12, $r14, r19;
        org.apache.commons.math.stat.descriptive.moment.Variance $r13;
        byte $b2;
        double $d0, d1, d2;
        java.util.Iterator r17, r18;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r16 = null;

        r17 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.stat.clustering.Cluster) $r11;

        $r12 = virtualinvoke r2.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r3 = virtualinvoke r2.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        $r13 = new org.apache.commons.math.stat.descriptive.moment.Variance;

        specialinvoke $r13.<org.apache.commons.math.stat.descriptive.moment.Variance: void <init>()>();

        $r14 = virtualinvoke r2.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        r18 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r15 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math.stat.clustering.Clusterable) $r15;

        $d0 = interfaceinvoke r5.<org.apache.commons.math.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r3);

        virtualinvoke $r13.<org.apache.commons.math.stat.descriptive.moment.Variance: void increment(double)>($d0);

        goto label2;

     label3:
        d2 = virtualinvoke $r13.<org.apache.commons.math.stat.descriptive.moment.Variance: double getResult()>();

        $b2 = d2 cmpl d1;

        if $b2 <= 0 goto label4;

        d1 = d2;

        r16 = r2;

     label4:
        goto label1;

     label5:
        if r16 != null goto label6;

        $r9 = new org.apache.commons.math.exception.ConvergenceException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        specialinvoke $r9.<org.apache.commons.math.exception.ConvergenceException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r10);

        throw $r9;

     label6:
        r19 = virtualinvoke r16.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $r6 = r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $i0 = interfaceinvoke r19.<java.util.List: int size()>();

        $i1 = virtualinvoke $r6.<java.util.Random: int nextInt(int)>($i0);

        $r7 = interfaceinvoke r19.<java.util.List: java.lang.Object remove(int)>($i1);

        $r8 = (org.apache.commons.math.stat.clustering.Clusterable) $r7;

        return $r8;
    }

    private org.apache.commons.math.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math.stat.clustering.Cluster r2, r10;
        int i0, $i1, $i2, i3;
        boolean $z0;
        java.util.Random $r3;
        java.lang.Object $r4, $r8;
        org.apache.commons.math.stat.clustering.Clusterable $r5;
        org.apache.commons.math.exception.ConvergenceException $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r7;
        java.util.List $r9, r12;
        java.util.Iterator r11;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i3 = 0;

        r10 = null;

        r11 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.stat.clustering.Cluster) $r8;

        $r9 = virtualinvoke r2.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i0 <= i3 goto label2;

        i3 = i0;

        r10 = r2;

     label2:
        goto label1;

     label3:
        if r10 != null goto label4;

        $r6 = new org.apache.commons.math.exception.ConvergenceException;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        specialinvoke $r6.<org.apache.commons.math.exception.ConvergenceException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r7);

        throw $r6;

     label4:
        r12 = virtualinvoke r10.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $r3 = r0.<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $i1 = interfaceinvoke r12.<java.util.List: int size()>();

        $i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        $r4 = interfaceinvoke r12.<java.util.List: java.lang.Object remove(int)>($i2);

        $r5 = (org.apache.commons.math.stat.clustering.Clusterable) $r4;

        return $r5;
    }

    private org.apache.commons.math.stat.clustering.Clusterable getFarthestPoint(java.util.Collection)
    {
        org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        org.apache.commons.math.stat.clustering.Cluster r3, r14;
        org.apache.commons.math.stat.clustering.Clusterable r4, $r8, $r13;
        java.util.List r5, $r6;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r7, $r11, $r12;
        org.apache.commons.math.exception.ConvergenceException $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        int $i0, i2, i3;
        byte $b1;

        r0 := @this: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r14 = null;

        i2 = -1;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.stat.clustering.Cluster) $r11;

        r4 = virtualinvoke r3.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        r5 = virtualinvoke r3.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        i3 = 0;

     label2:
        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r12 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r13 = (org.apache.commons.math.stat.clustering.Clusterable) $r12;

        d0 = interfaceinvoke $r13.<org.apache.commons.math.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r4);

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label3;

        d1 = d0;

        r14 = r3;

        i2 = i3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        if r14 != null goto label6;

        $r9 = new org.apache.commons.math.exception.ConvergenceException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        specialinvoke $r9.<org.apache.commons.math.exception.ConvergenceException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r10);

        throw $r9;

     label6:
        $r6 = virtualinvoke r14.<org.apache.commons.math.stat.clustering.Cluster: java.util.List getPoints()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i2);

        $r8 = (org.apache.commons.math.stat.clustering.Clusterable) $r7;

        return $r8;
    }

    private static org.apache.commons.math.stat.clustering.Cluster getNearestCluster(java.util.Collection, org.apache.commons.math.stat.clustering.Clusterable)
    {
        java.util.Collection r0;
        org.apache.commons.math.stat.clustering.Clusterable r1, $r5;
        java.util.Iterator r2;
        org.apache.commons.math.stat.clustering.Cluster r3, r6;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r4;
        byte $b0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.math.stat.clustering.Clusterable;

        d1 = 1.7976931348623157E308;

        r6 = null;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.stat.clustering.Cluster) $r4;

        $r5 = virtualinvoke r3.<org.apache.commons.math.stat.clustering.Cluster: org.apache.commons.math.stat.clustering.Clusterable getCenter()>();

        d0 = interfaceinvoke r1.<org.apache.commons.math.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r5);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

        r6 = r3;

     label2:
        goto label1;

     label3:
        return r6;
    }
}
