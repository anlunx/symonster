public abstract class org.apache.commons.math3.optim.linear.LinearOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer
{
    private org.apache.commons.math3.optim.linear.LinearObjectiveFunction function;
    private java.util.Collection linearConstraints;
    private boolean nonNegative;

    protected void <init>()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(null);

        return;
    }

    protected boolean isRestrictedToNonNegative()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $z0 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: boolean nonNegative>;

        return $z0;
    }

    protected org.apache.commons.math3.optim.linear.LinearObjectiveFunction getFunction()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.linear.LinearObjectiveFunction $r1;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.linear.LinearObjectiveFunction function>;

        return $r1;
    }

    protected java.util.Collection getConstraints()
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: java.util.Collection linearConstraints>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r3;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math3.optim.linear.NonNegativeConstraint $r4;
        org.apache.commons.math3.optim.linear.LinearConstraintSet $r5;
        java.util.Collection $r6;
        org.apache.commons.math3.optim.linear.LinearObjectiveFunction $r7;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optim.linear.LinearObjectiveFunction;

        if $z0 == 0 goto label2;

        $r7 = (org.apache.commons.math3.optim.linear.LinearObjectiveFunction) r3;

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.linear.LinearObjectiveFunction function> = $r7;

        goto label4;

     label2:
        $z1 = r3 instanceof org.apache.commons.math3.optim.linear.LinearConstraintSet;

        if $z1 == 0 goto label3;

        $r5 = (org.apache.commons.math3.optim.linear.LinearConstraintSet) r3;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.optim.linear.LinearConstraintSet: java.util.Collection getConstraints()>();

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: java.util.Collection linearConstraints> = $r6;

        goto label4;

     label3:
        $z2 = r3 instanceof org.apache.commons.math3.optim.linear.NonNegativeConstraint;

        if $z2 == 0 goto label4;

        $r4 = (org.apache.commons.math3.optim.linear.NonNegativeConstraint) r3;

        $z3 = virtualinvoke $r4.<org.apache.commons.math3.optim.linear.NonNegativeConstraint: boolean isRestrictedToNonNegative()>();

        r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: boolean nonNegative> = $z3;

        goto label4;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.LinearOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.LinearOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }
}
