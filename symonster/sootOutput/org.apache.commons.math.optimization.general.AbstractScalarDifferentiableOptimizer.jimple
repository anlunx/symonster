public abstract class org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer extends java.lang.Object implements org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer
{
    public static final int DEFAULT_MAX_ITERATIONS;
    protected org.apache.commons.math.optimization.RealConvergenceChecker checker;
    protected org.apache.commons.math.optimization.GoalType goal;
    protected double[] point;
    private int maxIterations;
    private int iterations;
    private int maxEvaluations;
    private int evaluations;
    private int gradientEvaluations;
    private org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction function;
    private org.apache.commons.math.analysis.MultivariateVectorialFunction gradient;

    protected void <init>()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        org.apache.commons.math.optimization.SimpleScalarValueChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math.optimization.SimpleScalarValueChecker;

        specialinvoke $r1.<org.apache.commons.math.optimization.SimpleScalarValueChecker: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: void setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)>($r1);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: void setMaxIterations(int)>(100);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: void setMaxEvaluations(int)>(2147483647);

        return;
    }

    public void setMaxIterations(int)
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxIterations> = i0;

        return;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxIterations>;

        return $i0;
    }

    public int getIterations()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int iterations>;

        return $i0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxEvaluations> = i0;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int evaluations>;

        return $i0;
    }

    public int getGradientEvaluations()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int gradientEvaluations>;

        return $i0;
    }

    public void setConvergenceChecker(org.apache.commons.math.optimization.RealConvergenceChecker)
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        org.apache.commons.math.optimization.RealConvergenceChecker r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        r1 := @parameter0: org.apache.commons.math.optimization.RealConvergenceChecker;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker checker> = r1;

        return;
    }

    public org.apache.commons.math.optimization.RealConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        org.apache.commons.math.optimization.RealConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.optimization.RealConvergenceChecker checker>;

        return $r1;
    }

    protected void incrementIterationsCounter() throws org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.optimization.OptimizationException $r1;
        org.apache.commons.math.MaxIterationsExceededException $r2;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int iterations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int iterations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxIterations>;

        if $i1 <= $i2 goto label1;

        $r1 = new org.apache.commons.math.optimization.OptimizationException;

        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxIterations>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math.optimization.OptimizationException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;

     label1:
        return;
    }

    protected double[] computeObjectiveGradient(double[]) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        double[] r1, $r3;
        int $i0, $i1;
        org.apache.commons.math.analysis.MultivariateVectorialFunction $r2;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int gradientEvaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int gradientEvaluations> = $i1;

        $r2 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.analysis.MultivariateVectorialFunction gradient>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.analysis.MultivariateVectorialFunction: double[] value(double[])>(r1);

        return $r3;
    }

    protected double computeObjectiveValue(double[]) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        double[] r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction $r2;
        double $d0;
        org.apache.commons.math.FunctionEvaluationException $r3;
        org.apache.commons.math.MaxEvaluationsExceededException $r4;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        r1 := @parameter0: double[];

        $i0 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int evaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        $r3 = new org.apache.commons.math.FunctionEvaluationException;

        $r4 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int maxEvaluations>;

        specialinvoke $r4.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i3);

        specialinvoke $r3.<org.apache.commons.math.FunctionEvaluationException: void <init>(java.lang.Throwable,double[])>($r4, r1);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction function>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction: double value(double[])>(r1);

        return $d0;
    }

    public org.apache.commons.math.optimization.RealPointValuePair optimize(org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[]) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer r0;
        org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction r1;
        org.apache.commons.math.optimization.GoalType r2;
        double[] r3, $r6;
        org.apache.commons.math.analysis.MultivariateVectorialFunction $r4;
        java.lang.Object $r5;
        org.apache.commons.math.optimization.RealPointValuePair $r7;

        r0 := @this: org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;

        r2 := @parameter1: org.apache.commons.math.optimization.GoalType;

        r3 := @parameter2: double[];

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int iterations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int evaluations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int gradientEvaluations> = 0;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction function> = r1;

        $r4 = interfaceinvoke r1.<org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction: org.apache.commons.math.analysis.MultivariateVectorialFunction gradient()>();

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.analysis.MultivariateVectorialFunction gradient> = $r4;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.optimization.GoalType goal> = r2;

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r5;

        r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: double[] point> = $r6;

        $r7 = virtualinvoke r0.<org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: org.apache.commons.math.optimization.RealPointValuePair doOptimize()>();

        return $r7;
    }

    protected abstract org.apache.commons.math.optimization.RealPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException;

    public static void <clinit>()
    {
        <org.apache.commons.math.optimization.general.AbstractScalarDifferentiableOptimizer: int DEFAULT_MAX_ITERATIONS> = 100;

        return;
    }
}
