class org.apache.commons.math.linear.EigenDecompositionImpl$Solver extends java.lang.Object implements org.apache.commons.math.linear.DecompositionSolver
{
    private double[] realEigenvalues;
    private double[] imagEigenvalues;
    private final org.apache.commons.math.linear.ArrayRealVector[] eigenvectors;

    private void <init>(double[], double[], org.apache.commons.math.linear.ArrayRealVector[])
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        double[] r1, r2;
        org.apache.commons.math.linear.ArrayRealVector[] r3;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math.linear.ArrayRealVector[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues> = r1;

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] imagEigenvalues> = r2;

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors> = r3;

        return;
    }

    public double[] solve(double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        double[] r1, r2, r4, $r5, $r7;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math.linear.ArrayRealVector r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        org.apache.commons.math.linear.ArrayRealVector[] $r6;
        java.lang.Object[] $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        org.apache.commons.math.linear.SingularMatrixException $r13;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r13 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r13.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r13;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        i0 = lengthof $r5;

        $i1 = lengthof r1;

        if $i1 == i0 goto label2;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r8 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r12;

     label2:
        r2 = newarray (double)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        $r6 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r6[i3];

        r4 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(double[])>(r1);

        $r7 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $d2 = $r7[i3];

        d0 = $d1 / $d2;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $d5 = r2[i4];

        $d3 = r4[i4];

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r2[i4] = $d6;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return r2;
    }

    public org.apache.commons.math.linear.RealVector solve(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealVector r1;
        int i0, $i1, $i2, i3, i4;
        double[] r2, r4, $r5, $r8;
        org.apache.commons.math.linear.ArrayRealVector r3, $r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        org.apache.commons.math.linear.ArrayRealVector[] $r7;
        java.lang.Object[] $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11, $r12;
        java.lang.IllegalArgumentException $r13;
        org.apache.commons.math.linear.SingularMatrixException $r14;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r14 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r14.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r14;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        i0 = lengthof $r5;

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label2;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r9 = newarray (java.lang.Object)[2];

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[1] = $r12;

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r13;

     label2:
        r2 = newarray (double)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        $r7 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r7[i3];

        r4 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        $r8 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $d2 = $r8[i3];

        d0 = $d1 / $d2;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $d5 = r2[i4];

        $d3 = r4[i4];

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r2[i4] = $d6;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealMatrix r1, $r6;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8;
        double[][] r2;
        org.apache.commons.math.linear.ArrayRealVector r3;
        double[] r4, $r5, $r8, $r9;
        boolean $z0;
        org.apache.commons.math.linear.ArrayRealVector[] $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9;
        java.lang.Object[] $r10;
        org.apache.commons.math.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12, $r13, $r14;
        java.lang.IllegalArgumentException $r15;
        org.apache.commons.math.linear.SingularMatrixException $r16;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label01;

        $r16 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r16.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r16;

     label01:
        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        i0 = lengthof $r5;

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        if $i2 == i0 goto label02;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r10 = newarray (java.lang.Object)[4];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10[0] = $r12;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r10[1] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[2] = $r14;

        $r10[3] = "n";

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r15;

     label02:
        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        i5 = 0;

     label03:
        if i5 >= i1 goto label10;

        i6 = 0;

     label04:
        if i6 >= i0 goto label09;

        $r7 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r7[i6];

        r4 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        d8 = 0.0;

        i7 = 0;

     label05:
        if i7 >= i0 goto label06;

        $d5 = virtualinvoke r3.<org.apache.commons.math.linear.ArrayRealVector: double getEntry(int)>(i7);

        $d6 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i7, i5);

        $d7 = $d5 * $d6;

        d8 = d8 + $d7;

        i7 = i7 + 1;

        goto label05;

     label06:
        $r8 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $d0 = $r8[i6];

        d9 = d8 / $d0;

        i8 = 0;

     label07:
        if i8 >= i0 goto label08;

        $r9 = r2[i8];

        $d3 = $r9[i5];

        $d1 = r4[i8];

        $d2 = d9 * $d1;

        $d4 = $d3 + $d2;

        $r9[i5] = $d4;

        i8 = i8 + 1;

        goto label07;

     label08:
        i6 = i6 + 1;

        goto label04;

     label09:
        i5 = i5 + 1;

        goto label03;

     label10:
        $r6 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])>(r2);

        return $r6;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        double[] $r1, $r2, $r3;
        int $i0, i3;
        double $d0, $d1;
        byte $b1, $b2;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r2 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $d0 = $r2[i3];

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] imagEigenvalues>;

        $d1 = $r3[i3];

        $b2 = $d1 cmpl 0.0;

        if $b2 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public org.apache.commons.math.linear.RealMatrix getInverse() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        int i0, i1, i2, i3;
        double[][] r1;
        double[] r2, r3, $r4, $r8;
        boolean $z0;
        org.apache.commons.math.linear.RealMatrix $r5;
        org.apache.commons.math.linear.ArrayRealVector[] $r6;
        org.apache.commons.math.linear.ArrayRealVector $r7;
        double $d0, $d1, $d2, $d3, $d4, d5;
        org.apache.commons.math.linear.SingularMatrixException $r9;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r9 = new org.apache.commons.math.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label1:
        $r4 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        i0 = lengthof $r4;

        r1 = newmultiarray (double)[i0][i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        d5 = 0.0;

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        $r6 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        $r7 = $r6[i3];

        r3 = virtualinvoke $r7.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = r3[i1];

        $d0 = r3[i2];

        $d3 = $d1 * $d0;

        $r8 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: double[] realEigenvalues>;

        $d2 = $r8[i3];

        $d4 = $d3 / $d2;

        d5 = d5 + $d4;

        i3 = i3 + 1;

        goto label4;

     label5:
        r2[i2] = d5;

        i2 = i2 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r5 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])>(r1);

        return $r5;
    }

    void <init>(double[], double[], org.apache.commons.math.linear.ArrayRealVector[], org.apache.commons.math.linear.EigenDecompositionImpl$1)
    {
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver r0;
        double[] r1, r2;
        org.apache.commons.math.linear.ArrayRealVector[] r3;
        org.apache.commons.math.linear.EigenDecompositionImpl$1 r4;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math.linear.ArrayRealVector[];

        r4 := @parameter3: org.apache.commons.math.linear.EigenDecompositionImpl$1;

        specialinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: void <init>(double[],double[],org.apache.commons.math.linear.ArrayRealVector[])>(r1, r2, r3);

        return;
    }
}
