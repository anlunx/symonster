public abstract class org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer implements org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer
{
    private static final double DEFAULT_SINGULARITY_THRESHOLD;
    protected double[][] weightedResidualJacobian;
    protected int cols;
    protected int rows;
    protected double[] point;
    protected double[] objective;
    protected double[] weightedResiduals;
    protected double cost;
    private org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction jF;
    private int jacobianEvaluations;
    private org.apache.commons.math3.linear.RealMatrix weightMatrixSqrt;

    protected void <init>()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void <init>()>();

        return;
    }

    protected void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        return;
    }

    public int getJacobianEvaluations()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $i0 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations>;

        return $i0;
    }

    protected void updateJacobian()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r3;
        double[] $r2;
        double[][] $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $r2 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>($r2);

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] weightedResidualJacobian> = $r4;

        return;
    }

    protected org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, $r6, $r11;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2, r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        double[][] r3;
        int[] r4;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r5;
        org.apache.commons.math3.linear.RealMatrix $r7, $r8, $r9;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r10, $r13;
        double $d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r12;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: double[];

        $i2 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations> = $i3;

        $i4 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i4];

        i0 = lengthof r1;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r13 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = r1[i7];

        specialinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(i0, 1, i7, $d1);

        r2[i7] = $r13;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction jF>;

        r14 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] getTarget()>();

        i1 = lengthof $r6;

        $i5 = lengthof r14;

        if $i5 == i1 goto label3;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r14;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, i1);

        throw $r12;

     label3:
        r3 = newmultiarray (double)[i1][i0];

        i8 = 0;

     label4:
        if i8 >= i1 goto label7;

        r4 = newarray (int)[i0];

        i9 = 0;

     label5:
        if i9 >= i0 goto label6;

        r4[i9] = 1;

        $r11 = r3[i8];

        $r10 = r14[i8];

        $d0 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        $r11[i9] = $d0;

        r4[i9] = 0;

        i9 = i9 + 1;

        goto label5;

     label6:
        i8 = i8 + 1;

        goto label4;

     label7:
        $r7 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrixSqrt>;

        $r8 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r3);

        $r9 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r8);

        return $r9;
    }

    protected void updateResidualsAndCost()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, $r3, $r4, $r5, $r9;
        double $d0;
        org.apache.commons.math3.linear.ArrayRealVector $r6;
        org.apache.commons.math3.linear.RealMatrix $r7;
        org.apache.commons.math3.linear.RealVector $r8;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $r3 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] computeObjectiveValue(double[])>($r3);

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] objective> = $r4;

        $r5 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] objective>;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] computeResiduals(double[])>($r5);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double computeCost(double[])>(r1);

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double cost> = $d0;

        $r6 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r1);

        $r7 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrixSqrt>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r6);

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] weightedResiduals> = $r9;

        return;
    }

    protected double computeCost(double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1;
        org.apache.commons.math3.linear.ArrayRealVector $r3;
        org.apache.commons.math3.linear.RealMatrix $r4;
        org.apache.commons.math3.linear.RealVector $r5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: double[];

        $r3 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r3);

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r5);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d1;
    }

    public double getRMS()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double getChiSquare()>();

        $i0 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $d1 = (double) $i0;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        return $d3;
    }

    public double getChiSquare()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $d1 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $d0 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double cost>;

        $d2 = $d1 * $d0;

        return $d2;
    }

    public org.apache.commons.math3.linear.RealMatrix getWeightSquareRoot()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrixSqrt>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix copy()>();

        return $r2;
    }

    protected void setCost(double)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double cost> = d0;

        return;
    }

    public double[][] getCovariances()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] getCovariances(double)>(1.0E-14);

        return $r1;
    }

    public double[][] getCovariances(double)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double d0;
        double[] $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] computeCovariances(double[],double)>($r1, d0);

        return $r2;
    }

    public double[][] computeCovariances(double[], double)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1;
        double d0;
        org.apache.commons.math3.linear.RealMatrix r2, r3, $r5, $r7;
        org.apache.commons.math3.linear.DecompositionSolver r4;
        org.apache.commons.math3.linear.QRDecomposition $r6;
        double[][] $r8;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>(r1);

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r3 = interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r2);

        $r6 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke $r6.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r3, d0);

        r4 = virtualinvoke $r6.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r7 = interfaceinvoke r4.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        return $r8;
    }

    public double[] guessParametersErrors()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, $r3, $r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[][] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        $i1 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i0 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        if $i1 > $i0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_DEGREES_OF_FREEDOM>;

        $i7 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $i8 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r6, $r7, $r8, 0);

        throw $r5;

     label1:
        $i2 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        r1 = newarray (double)[$i2];

        $d1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double getChiSquare()>();

        $i4 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int rows>;

        $i3 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int cols>;

        $i5 = $i4 - $i3;

        $d2 = (double) $i5;

        $d3 = $d1 / $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $r3 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] computeCovariances(double[],double)>($r3, 1.0E-14);

        i9 = 0;

     label2:
        $i6 = lengthof r1;

        if i9 >= $i6 goto label3;

        $r4 = r2[i9];

        $d4 = $r4[i9];

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        $d6 = $d5 * d0;

        r1[i9] = $d6;

        i9 = i9 + 1;

        goto label2;

     label3:
        return r1;
    }

    public double[] computeSigma(double[], double)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, r2, $r4;
        double d0, $d1, $d2;
        int i0, i1;
        double[][] r3;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 = lengthof r1;

        r2 = newarray (double)[i0];

        r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[][] computeCovariances(double[],double)>(r1, d0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        $d1 = $r4[i1];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction r1;
        double[] r2, r3, r4;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r5;
        org.apache.commons.math3.optimization.OptimizationData[] $r6;
        org.apache.commons.math3.optimization.Target $r7;
        org.apache.commons.math3.optimization.Weight $r8;
        org.apache.commons.math3.optimization.InitialGuess $r9;
        org.apache.commons.math3.optimization.PointVectorValuePair $r10;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        $r5 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)>(r1);

        $r6 = newarray (org.apache.commons.math3.optimization.OptimizationData)[3];

        $r7 = new org.apache.commons.math3.optimization.Target;

        specialinvoke $r7.<org.apache.commons.math3.optimization.Target: void <init>(double[])>(r2);

        $r6[0] = $r7;

        $r8 = new org.apache.commons.math3.optimization.Weight;

        specialinvoke $r8.<org.apache.commons.math3.optimization.Weight: void <init>(double[])>(r3);

        $r6[1] = $r8;

        $r9 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r9.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>(r4);

        $r6[2] = $r9;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])>(i0, $r5, $r6);

        return $r10;
    }

    public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction r1;
        double[] r2, r3, r4;
        org.apache.commons.math3.optimization.OptimizationData[] $r5;
        org.apache.commons.math3.optimization.Target $r6;
        org.apache.commons.math3.optimization.Weight $r7;
        org.apache.commons.math3.optimization.InitialGuess $r8;
        org.apache.commons.math3.optimization.PointVectorValuePair $r9;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        $r5 = newarray (org.apache.commons.math3.optimization.OptimizationData)[3];

        $r6 = new org.apache.commons.math3.optimization.Target;

        specialinvoke $r6.<org.apache.commons.math3.optimization.Target: void <init>(double[])>(r2);

        $r5[0] = $r6;

        $r7 = new org.apache.commons.math3.optimization.Weight;

        specialinvoke $r7.<org.apache.commons.math3.optimization.Weight: void <init>(double[])>(r3);

        $r5[1] = $r7;

        $r8 = new org.apache.commons.math3.optimization.InitialGuess;

        specialinvoke $r8.<org.apache.commons.math3.optimization.InitialGuess: void <init>(double[])>(r4);

        $r5[2] = $r8;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])>(i0, r1, $r5);

        return $r9;
    }

    protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction r1;
        org.apache.commons.math3.optimization.OptimizationData[] r2;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r3;
        org.apache.commons.math3.optimization.PointVectorValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.OptimizationData[];

        $r3 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)>(r1);

        $r4 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.optimization.OptimizationData[])>(i0, $r3, r2);

        return $r4;
    }

    protected void setUp()
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r3;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r4;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r5;
        double[] $r6, $r7, $r8;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer: void setUp()>();

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int jacobianEvaluations> = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        $r2 = specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix)>($r1);

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.linear.RealMatrix weightMatrixSqrt> = $r2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.analysis.MultivariateVectorFunction getObjectiveFunction()>();

        $r4 = (org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction) $r3;

        $r5 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)>($r4);

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction jF> = $r5;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] getStartPoint()>();

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point> = $r6;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] getTarget()>();

        $i0 = lengthof $r7;

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int rows> = $i0;

        $r8 = r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] point>;

        $i1 = lengthof $r8;

        r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: int cols> = $i1;

        return;
    }

    protected double[] computeResiduals(double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        double[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: double[];

        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double[] getTarget()>();

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r2;

        $i4 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r4;

     label1:
        $i2 = lengthof r2;

        r3 = newarray (double)[$i2];

        i6 = 0;

     label2:
        $i3 = lengthof r2;

        if i6 >= $i3 goto label3;

        $d1 = r2[i6];

        $d0 = r1[i6];

        $d2 = $d1 - $d0;

        r3[i6] = $d2;

        i6 = i6 + 1;

        goto label2;

     label3:
        return r3;
    }

    private org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r4;
        boolean $z0;
        org.apache.commons.math3.linear.EigenDecomposition $r3;
        org.apache.commons.math3.linear.DiagonalMatrix $r5;
        double $d0, $d1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = r1 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r5 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r5;

     label3:
        $r3 = new org.apache.commons.math3.linear.EigenDecomposition;

        specialinvoke $r3.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getSquareRoot()>();

        return $r4;
    }

    public volatile org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])
    {
        org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateVectorFunction r1;
        double[] r2, r3, r4;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r5;
        org.apache.commons.math3.optimization.PointVectorValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        $r5 = (org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: org.apache.commons.math3.optimization.PointVectorValuePair optimize(int,org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction,double[],double[],double[])>(i0, $r5, r2, r3, r4);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: double DEFAULT_SINGULARITY_THRESHOLD> = 1.0E-14;

        return;
    }
}
