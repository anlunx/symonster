public class org.apache.commons.math3.analysis.differentiation.JacobianFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateMatrixFunction
{
    private final org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f;

    public void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)
    {
        org.apache.commons.math3.analysis.differentiation.JacobianFunction r0;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.JacobianFunction;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.JacobianFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f> = r1;

        return;
    }

    public double[][] value(double[])
    {
        org.apache.commons.math3.analysis.differentiation.JacobianFunction r0;
        double[] r1, $r7;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2, r9;
        double[][] r3;
        int[] r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r5;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r6, $r8;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.JacobianFunction;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i0];

        i8 = 0;

     label1:
        $i1 = lengthof r1;

        if i8 >= $i1 goto label2;

        $r8 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i7 = lengthof r1;

        $d1 = r1[i8];

        specialinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>($i7, 1, i8, $d1);

        r2[i8] = $r8;

        i8 = i8 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.JacobianFunction: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f>;

        r9 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $i3 = lengthof r9;

        $i2 = lengthof r1;

        r3 = newmultiarray (double)[$i3][$i2];

        $i4 = lengthof r1;

        r4 = newarray (int)[$i4];

        i9 = 0;

     label3:
        $i5 = lengthof r9;

        if i9 >= $i5 goto label6;

        i10 = 0;

     label4:
        $i6 = lengthof r1;

        if i10 >= $i6 goto label5;

        r4[i10] = 1;

        $r7 = r3[i9];

        $r6 = r9[i9];

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        $r7[i10] = $d0;

        r4[i10] = 0;

        i10 = i10 + 1;

        goto label4;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        return r3;
    }
}
