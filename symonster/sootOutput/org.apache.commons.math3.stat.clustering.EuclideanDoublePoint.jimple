public class org.apache.commons.math3.stat.clustering.EuclideanDoublePoint extends java.lang.Object implements org.apache.commons.math3.stat.clustering.Clusterable, java.io.Serializable
{
    private static final long serialVersionUID;
    private final double[] point;

    public void <init>(double[])
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point> = r1;

        return;
    }

    public org.apache.commons.math3.stat.clustering.EuclideanDoublePoint centroidOf(java.util.Collection)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, r3, $r5;
        java.util.Collection r1;
        double[] r2, $r4, $r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Object $r6;
        java.util.Iterator r8;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: java.util.Collection;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $i0 = lengthof $r4;

        r2 = newarray (double)[$i0];

        r8 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) $r6;

        i4 = 0;

     label2:
        $i3 = lengthof r2;

        if i4 >= $i3 goto label3;

        $d3 = r2[i4];

        $r7 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $d4 = $r7[i4];

        $d5 = $d3 + $d4;

        r2[i4] = $d5;

        i4 = i4 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        i5 = 0;

     label5:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label6;

        $d0 = r2[i5];

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $d1 = (double) $i2;

        $d2 = $d0 / $d1;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r5 = new org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        specialinvoke $r5.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: void <init>(double[])>(r2);

        return $r5;
    }

    public double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanDoublePoint)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, r1;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r2 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] getPoint()>();

        $d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double distance(double[],double[])>($r2, $r3);

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $r2 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) r1;

        $r3 = $r2.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r4, $r3);

        return $z1;
    }

    public double[] getPoint()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        return $r1;
    }

    public int hashCode()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0;
        double[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        $r1 = r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double[] point>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r1);

        return $r2;
    }

    public volatile java.lang.Object centroidOf(java.util.Collection)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, $r2;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint centroidOf(java.util.Collection)>(r1);

        return $r2;
    }

    public volatile double distanceFrom(java.lang.Object)
    {
        org.apache.commons.math3.stat.clustering.EuclideanDoublePoint r0, $r2;
        java.lang.Object r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.clustering.EuclideanDoublePoint;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.stat.clustering.EuclideanDoublePoint) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanDoublePoint)>($r2);

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.clustering.EuclideanDoublePoint: long serialVersionUID> = 8026472786091227632L;

        return;
    }
}
