public class org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest extends java.lang.Object
{
    private org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking;

    public void <init>()
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r3 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FIXED>;

        $r2 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy AVERAGE>;

        specialinvoke $r1.<org.apache.commons.math3.stat.ranking.NaturalRanking: void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)>($r3, $r2);

        r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy r2;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r3;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        r2 := @parameter1: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking;

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking: void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy,org.apache.commons.math3.stat.ranking.TiesStrategy)>(r1, r2);

        r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking> = $r3;

        return;
    }

    private void ensureDataConformance(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double[] r1, r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.exception.NoDataException $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof r1;

        if $i0 == 0 goto label3;

        $i1 = lengthof r2;

        if $i1 != 0 goto label4;

     label3:
        $r4 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r4;

     label4:
        $i3 = lengthof r2;

        $i2 = lengthof r1;

        if $i3 == $i2 goto label5;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r2;

        $i4 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r5;

     label5:
        return;
    }

    private double[] calculateDifferences(double[], double[])
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double[] r1, r2, r3;
        int $i0, $i1, i2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i0 = lengthof r1;

        r3 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $d1 = r2[i2];

        $d0 = r1[i2];

        $d2 = $d1 - $d0;

        r3[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[] calculateAbsoluteDifferences(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double[] r1, r2;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        org.apache.commons.math3.exception.NoDataException $r3;
        org.apache.commons.math3.exception.NullArgumentException $r4;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r4.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r4;

     label1:
        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r3;

     label2:
        $i1 = lengthof r1;

        r2 = newarray (double)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label4;

        $d0 = r1[i3];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        r2[i3] = $d1;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r2;
    }

    public double wilcoxonSignedRank(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double[] r1, r2, r3, r4, r5;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        org.apache.commons.math3.stat.ranking.NaturalRanking $r6;
        int $i0, $i1, $i2, i4, i5;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: void ensureDataConformance(double[],double[])>(r1, r2);

        r3 = specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: double[] calculateDifferences(double[],double[])>(r1, r2);

        r4 = specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: double[] calculateAbsoluteDifferences(double[])>(r3);

        $r6 = r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: org.apache.commons.math3.stat.ranking.NaturalRanking naturalRanking>;

        r5 = virtualinvoke $r6.<org.apache.commons.math3.stat.ranking.NaturalRanking: double[] rank(double[])>(r4);

        d6 = 0.0;

        i4 = 0;

     label1:
        $i0 = lengthof r3;

        if i4 >= $i0 goto label3;

        $d4 = r3[i4];

        $b3 = $d4 cmpl 0.0;

        if $b3 <= 0 goto label2;

        $d5 = r5[i4];

        d6 = d6 + $d5;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        i5 = lengthof r1;

        $i1 = i5 + 1;

        $i2 = i5 * $i1;

        $d1 = (double) $i2;

        $d2 = $d1 / 2.0;

        d0 = $d2 - d6;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d6, d0);

        return $d3;
    }

    private double calculateExactPValue(double, int)
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int i0, i1, $i3, $i4, $i5, i6, i7, i8, i9;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 = 1 << i0;

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i1 goto label6;

        i8 = 0;

        i9 = 0;

     label2:
        if i9 >= i0 goto label4;

        $i3 = i7 >> i9;

        $i4 = $i3 & 1;

        if $i4 != 1 goto label3;

        $i5 = i9 + 1;

        i8 = i8 + $i5;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        $d5 = (double) i8;

        $b2 = $d5 cmpl d0;

        if $b2 < 0 goto label5;

        i6 = i6 + 1;

     label5:
        i7 = i7 + 1;

        goto label1;

     label6:
        $d1 = (double) i6;

        $d3 = 2.0 * $d1;

        $d2 = (double) i1;

        $d4 = $d3 / $d2;

        return $d4;
    }

    private double calculateAsymptoticPValue(double, int)
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.distribution.NormalDistribution $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $i1 = i0 + 1;

        $i2 = i0 * $i1;

        $d4 = (double) $i2;

        d1 = $d4 / 4.0;

        $i3 = 2 * i0;

        $i4 = $i3 + 1;

        $d5 = (double) $i4;

        $d6 = $d5 / 6.0;

        d2 = d1 * $d6;

        $d7 = d0 - d1;

        $d8 = $d7 - 0.5;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        d3 = $d8 / $d9;

        $r2 = new org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(null, 0.0, 1.0);

        $d10 = virtualinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: double cumulativeProbability(double)>(d3);

        $d11 = 2.0 * $d10;

        return $d11;
    }

    public double wilcoxonSignedRankTest(double[], double[], boolean) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest r0;
        double[] r1, r2;
        boolean z0;
        int i0, $i1, $i2;
        double d0, d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: void ensureDataConformance(double[],double[])>(r1, r2);

        i0 = lengthof r1;

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: double wilcoxonSignedRank(double[],double[])>(r1, r2);

        if z0 == 0 goto label1;

        if i0 <= 30 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label1:
        if z0 == 0 goto label2;

        $d5 = specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: double calculateExactPValue(double,int)>(d0, i0);

        return $d5;

     label2:
        $i1 = i0 + 1;

        $i2 = i0 * $i1;

        $d2 = (double) $i2;

        $d3 = $d2 / 2.0;

        d1 = $d3 - d0;

        $d4 = specialinvoke r0.<org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest: double calculateAsymptoticPValue(double,int)>(d1, i0);

        return $d4;
    }
}
