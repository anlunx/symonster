public abstract class org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver extends org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver implements org.apache.commons.math3.analysis.solvers.PolynomialSolver
{
    private org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialFunction;

    protected void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double)>(d0);

        return;
    }

    protected void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double)>(d0, d1);

        return;
    }

    protected void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void <init>(double,double,double)>(d0, d1, d2);

        return;
    }

    protected void setup(int, org.apache.commons.math3.analysis.polynomials.PolynomialFunction, double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        int i0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r1;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver: void setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i0, r1, d0, d1, d2);

        r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialFunction> = r1;

        return;
    }

    protected double[] getCoefficients()
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        $r1 = r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialFunction>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double[] getCoefficients()>();

        return $r2;
    }

    protected volatile void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        $r2 = (org.apache.commons.math3.analysis.polynomials.PolynomialFunction) r1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver: void setup(int,org.apache.commons.math3.analysis.polynomials.PolynomialFunction,double,double,double)>(i0, $r2, d0, d1, d2);

        return;
    }
}
