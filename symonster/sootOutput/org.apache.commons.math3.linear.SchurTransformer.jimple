class org.apache.commons.math3.linear.SchurTransformer extends java.lang.Object
{
    private static final int MAX_ITERATIONS;
    private final double[][] matrixP;
    private final double[][] matrixT;
    private org.apache.commons.math3.linear.RealMatrix cachedP;
    private org.apache.commons.math3.linear.RealMatrix cachedT;
    private org.apache.commons.math3.linear.RealMatrix cachedPt;
    private final double epsilon;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r4, $r6;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.linear.HessenbergTransformer $r3;
        double[][] $r5, $r7;
        org.apache.commons.math3.linear.NonSquareMatrixException $r8;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon> = $d0;

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r8 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r8.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r8;

     label1:
        $r3 = new org.apache.commons.math3.linear.HessenbergTransformer;

        specialinvoke $r3.<org.apache.commons.math3.linear.HessenbergTransformer: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getH()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT> = $r5;

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.linear.HessenbergTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP> = $r7;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = null;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void transform()>();

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r4;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix getPT()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix getP()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedPt>;

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix getT()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r4;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r3);

        r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        return $r2;
    }

    private void transform()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60;
        double[][] $r2, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r25, $r28, $r29, $r32, $r34, $r35, $r38, $r39, $r42, $r44, $r45, $r48, $r49, $r52;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo $r3;
        org.apache.commons.math3.exception.MaxCountExceededException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6;
        java.lang.Object[] $r7;
        double[] $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r26, $r27, $r30, $r31, $r33, $r36, $r37, $r40, $r41, $r43, $r46, $r47, $r50, $r51, $r53, r54;
        byte $b10, $b11;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i0 = lengthof $r2;

        d0 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: double getNorm()>();

        $r3 = new org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        specialinvoke $r3.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: void <init>(org.apache.commons.math3.linear.SchurTransformer$1)>(null);

        i20 = 0;

        i21 = i0 - 1;

     label01:
        if i21 < 0 goto label14;

        i1 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: int findSmallSubDiagonalElement(int,double)>(i21, d0);

        if i1 != i21 goto label02;

        $r52 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r53 = $r52[i21];

        $d48 = $r53[i21];

        $d47 = $r3.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d49 = $d48 + $d47;

        $r53[i21] = $d49;

        i21 = i21 + -1;

        i20 = 0;

        goto label13;

     label02:
        $i3 = i21 - 1;

        if i1 != $i3 goto label11;

        $r8 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i4 = i21 - 1;

        $r9 = $r8[$i4];

        $i5 = i21 - 1;

        $d5 = $r9[$i5];

        $r10 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r11 = $r10[i21];

        $d4 = $r11[i21];

        $d6 = $d5 - $d4;

        d50 = $d6 / 2.0;

        $d10 = d50 * d50;

        $r12 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r13 = $r12[i21];

        $i6 = i21 - 1;

        $d8 = $r13[$i6];

        $r14 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i7 = i21 - 1;

        $r15 = $r14[$i7];

        $d7 = $r15[i21];

        $d9 = $d8 * $d7;

        d51 = $d10 + $d9;

        $r16 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r17 = $r16[i21];

        $d12 = $r17[i21];

        $d11 = $r3.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d13 = $d12 + $d11;

        $r17[i21] = $d13;

        $r18 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i8 = i21 - 1;

        $r19 = $r18[$i8];

        $i9 = i21 - 1;

        $d15 = $r19[$i9];

        $d14 = $r3.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d16 = $d15 + $d14;

        $r19[$i9] = $d16;

        $b10 = d51 cmpl 0.0;

        if $b10 < 0 goto label10;

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d51);

        d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d17);

        $b11 = d50 cmpl 0.0;

        if $b11 < 0 goto label03;

        d53 = d50 + d52;

        goto label04;

     label03:
        d53 = d50 - d52;

     label04:
        $r20 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r21 = $r20[i21];

        $i12 = i21 - 1;

        d1 = $r21[$i12];

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d53);

        d2 = $d18 + $d19;

        d54 = d1 / d2;

        d55 = d53 / d2;

        $d21 = d54 * d54;

        $d20 = d55 * d55;

        $d22 = $d21 + $d20;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d22);

        d56 = d54 / d3;

        d57 = d55 / d3;

        i22 = i21 - 1;

     label05:
        if i22 >= i0 goto label06;

        $r42 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i18 = i21 - 1;

        $r43 = $r42[$i18];

        d58 = $r43[i22];

        $r44 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i19 = i21 - 1;

        $r47 = $r44[$i19];

        $d41 = d57 * d58;

        $r45 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r46 = $r45[i21];

        $d39 = $r46[i22];

        $d40 = d56 * $d39;

        $d42 = $d41 + $d40;

        $r47[i22] = $d42;

        $r48 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r51 = $r48[i21];

        $r49 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r50 = $r49[i21];

        $d43 = $r50[i22];

        $d45 = d57 * $d43;

        $d44 = d56 * d58;

        $d46 = $d45 - $d44;

        $r51[i22] = $d46;

        i22 = i22 + 1;

        goto label05;

     label06:
        i23 = 0;

     label07:
        if i23 > i21 goto label08;

        $r32 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r33 = $r32[i23];

        $i16 = i21 - 1;

        d59 = $r33[$i16];

        $r34 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r37 = $r34[i23];

        $i17 = i21 - 1;

        $d33 = d57 * d59;

        $r35 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r36 = $r35[i23];

        $d31 = $r36[i21];

        $d32 = d56 * $d31;

        $d34 = $d33 + $d32;

        $r37[$i17] = $d34;

        $r38 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r41 = $r38[i23];

        $r39 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r40 = $r39[i23];

        $d35 = $r40[i21];

        $d37 = d57 * $d35;

        $d36 = d56 * d59;

        $d38 = $d37 - $d36;

        $r41[i21] = $d38;

        i23 = i23 + 1;

        goto label07;

     label08:
        i24 = 0;

     label09:
        $i13 = i0 - 1;

        if i24 > $i13 goto label10;

        $r22 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r23 = $r22[i24];

        $i14 = i21 - 1;

        d60 = $r23[$i14];

        $r24 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r27 = $r24[i24];

        $i15 = i21 - 1;

        $d25 = d57 * d60;

        $r25 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r26 = $r25[i24];

        $d23 = $r26[i21];

        $d24 = d56 * $d23;

        $d26 = $d25 + $d24;

        $r27[$i15] = $d26;

        $r28 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r31 = $r28[i24];

        $r29 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r30 = $r29[i24];

        $d27 = $r30[i21];

        $d29 = d57 * $d27;

        $d28 = d56 * d60;

        $d30 = $d29 - $d28;

        $r31[i21] = $d30;

        i24 = i24 + 1;

        goto label09;

     label10:
        i21 = i21 + -2;

        i20 = 0;

        goto label13;

     label11:
        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void computeShift(int,int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo)>(i1, i21, i20, $r3);

        i20 = i20 + 1;

        if i20 <= 100 goto label12;

        $r4 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONVERGENCE_FAILED>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r5, $r6, $r7);

        throw $r4;

     label12:
        r54 = newarray (double)[3];

        i2 = specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: int initQRStep(int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo,double[])>(i1, i21, $r3, r54);

        specialinvoke r0.<org.apache.commons.math3.linear.SchurTransformer: void performDoubleQRStep(int,int,int,org.apache.commons.math3.linear.SchurTransformer$ShiftInfo,double[])>(i1, i2, i21, $r3, r54);

     label13:
        goto label01;

     label14:
        return;
    }

    private double getNorm()
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        double[][] $r1, $r2, $r3;
        int $i0, $i1, $i2, i3, i4;
        double[] $r4;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        d2 = 0.0;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label4;

        $i1 = i3 - 1;

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, 0);

     label2:
        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = lengthof $r2;

        if i4 >= $i2 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i3];

        $d0 = $r4[i4];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d2 = d2 + $d1;

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return d2;
    }

    private int findSmallSubDiagonalElement(int, double)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int i0, $i1, $i2, $i4, i6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        double[][] $r1, $r3, $r5;
        double[] $r2, $r4, $r6;
        byte $b3, $b5;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        i6 = i0;

     label1:
        if i6 <= 0 goto label4;

        $r1 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i1 = i6 - 1;

        $r2 = $r1[$i1];

        $i2 = i6 - 1;

        $d1 = $r2[$i2];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i6];

        $d3 = $r4[i6];

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d9 = $d2 + $d4;

        $b3 = d9 cmpl 0.0;

        if $b3 != 0 goto label2;

        d9 = d0;

     label2:
        $r5 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r6 = $r5[i6];

        $i4 = i6 - 1;

        $d5 = $r6[$i4];

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $d7 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        $d8 = $d7 * d9;

        $b5 = $d6 cmpg $d8;

        if $b5 >= 0 goto label3;

        goto label4;

     label3:
        i6 = i6 + -1;

        goto label1;

     label4:
        return i6;
    }

    private void computeShift(int, int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo)
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo r1;
        double[][] $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        double[] $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        double $d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41, d42, d43, d44;
        byte $b3, $b4;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        $r2 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r3 = $r2[i1];

        $d0 = $r3[i1];

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d0;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = 0.0;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = 0.0;

        if i0 >= i1 goto label1;

        $r12 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i8 = i1 - 1;

        $r13 = $r12[$i8];

        $i9 = i1 - 1;

        $d36 = $r13[$i9];

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d36;

        $r14 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r15 = $r14[i1];

        $i10 = i1 - 1;

        $d38 = $r15[$i10];

        $r16 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i11 = i1 - 1;

        $r17 = $r16[$i11];

        $d37 = $r17[i1];

        $d39 = $d38 * $d37;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = $d39;

     label1:
        if i2 != 10 goto label4;

        $d23 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d22 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d24 = $d23 + $d22;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift> = $d24;

        i12 = 0;

     label2:
        if i12 > i1 goto label3;

        $r10 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r11 = $r10[i12];

        $d34 = $r11[i12];

        $d33 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d35 = $d34 - $d33;

        $r11[i12] = $d35;

        i12 = i12 + 1;

        goto label2;

     label3:
        $r6 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r7 = $r6[i1];

        $i5 = i1 - 1;

        $d25 = $r7[$i5];

        $d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d25);

        $r8 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i6 = i1 - 1;

        $r9 = $r8[$i6];

        $i7 = i1 - 2;

        $d27 = $r9[$i7];

        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d27);

        d40 = $d26 + $d28;

        $d29 = 0.75 * d40;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d29;

        $d30 = 0.75 * d40;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d30;

        $d31 = -0.4375 * d40;

        $d32 = $d31 * d40;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = $d32;

     label4:
        if i2 != 30 goto label8;

        $d3 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d2 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d4 = $d3 - $d2;

        d41 = $d4 / 2.0;

        $d6 = d41 * d41;

        $d5 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        d42 = $d6 + $d5;

        $b3 = d42 cmpl 0.0;

        if $b3 <= 0 goto label8;

        d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d42);

        $d8 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d7 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $b4 = $d8 cmpg $d7;

        if $b4 >= 0 goto label5;

        d43 = neg d43;

     label5:
        $d16 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d14 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        $d10 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d9 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d11 = $d10 - $d9;

        $d12 = $d11 / 2.0;

        $d13 = $d12 + d43;

        $d15 = $d14 / $d13;

        d44 = $d16 - $d15;

        i13 = 0;

     label6:
        if i13 > i1 goto label7;

        $r4 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r5 = $r4[i13];

        $d20 = $r5[i13];

        $d21 = $d20 - d44;

        $r5[i13] = $d21;

        i13 = i13 + 1;

        goto label6;

     label7:
        $d17 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift>;

        $d18 = $d17 + d44;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double exShift> = $d18;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w> = 0.964;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = 0.964;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = 0.964;

     label8:
        return;
    }

    private int initQRStep(int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo, double[])
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo r1;
        double[] r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36;
        double[][] $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        byte $b13;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        r2 := @parameter3: double[];

        i14 = i1 - 2;

     label1:
        if i14 < i0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r4 = $r3[i14];

        d0 = $r4[i14];

        $d5 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d1 = $d5 - d0;

        $d6 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        d2 = $d6 - d0;

        $d8 = d1 * d2;

        $d7 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double w>;

        $d10 = $d8 - $d7;

        $r5 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i2 = i14 + 1;

        $r6 = $r5[$i2];

        $d9 = $r6[i14];

        $d12 = $d10 / $d9;

        $r7 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r8 = $r7[i14];

        $i3 = i14 + 1;

        $d11 = $r8[$i3];

        $d13 = $d12 + $d11;

        r2[0] = $d13;

        $r9 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i4 = i14 + 1;

        $r10 = $r9[$i4];

        $i5 = i14 + 1;

        $d14 = $r10[$i5];

        $d15 = $d14 - d0;

        $d16 = $d15 - d1;

        $d17 = $d16 - d2;

        r2[1] = $d17;

        $r11 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i6 = i14 + 2;

        $r12 = $r11[$i6];

        $i7 = i14 + 1;

        $d18 = $r12[$i7];

        r2[2] = $d18;

        if i14 != i0 goto label2;

        goto label4;

     label2:
        $r13 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r14 = $r13[i14];

        $i8 = i14 - 1;

        $d19 = $r14[$i8];

        $d20 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d19);

        $d21 = r2[1];

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d21);

        $d23 = r2[2];

        $d24 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d23);

        $d25 = $d22 + $d24;

        d3 = $d20 * $d25;

        $d26 = r2[0];

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d26);

        $r15 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i9 = i14 - 1;

        $r16 = $r15[$i9];

        $i10 = i14 - 1;

        $d28 = $r16[$i10];

        $d29 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d28);

        $d30 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d32 = $d29 + $d30;

        $r17 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i11 = i14 + 1;

        $r18 = $r17[$i11];

        $i12 = i14 + 1;

        $d31 = $r18[$i12];

        $d33 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d31);

        $d34 = $d32 + $d33;

        d4 = $d27 * $d34;

        $d35 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        $d36 = $d35 * d4;

        $b13 = d3 cmpg $d36;

        if $b13 >= 0 goto label3;

        goto label4;

     label3:
        i14 = i14 + -1;

        goto label1;

     label4:
        return i14;
    }

    private void performDoubleQRStep(int, int, int, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo, double[])
    {
        org.apache.commons.math3.linear.SchurTransformer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, i39, i40, i41, i42, i43;
        org.apache.commons.math3.linear.SchurTransformer$ShiftInfo r1;
        double[] r2, $r5, $r7, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r47, $r48, $r50, $r52, $r54, $r56;
        boolean z0, $z1, $z2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, d69, d70, d71, $d72, d73, $d74, $d75;
        double[][] $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r46, $r49, $r51, $r53, $r55;
        byte $b9, $b10;

        r0 := @this: org.apache.commons.math3.linear.SchurTransformer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.apache.commons.math3.linear.SchurTransformer$ShiftInfo;

        r2 := @parameter4: double[];

        $r3 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        i3 = lengthof $r3;

        d69 = r2[0];

        d70 = r2[1];

        d71 = r2[2];

        i38 = i1;

     label01:
        $i4 = i2 - 1;

        if i38 > $i4 goto label20;

        $i8 = i2 - 1;

        if i38 == $i8 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z0 = $z2;

        if i38 == i1 goto label07;

        $r51 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r52 = $r51[i38];

        $i33 = i38 - 1;

        d69 = $r52[$i33];

        $r53 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i34 = i38 + 1;

        $r54 = $r53[$i34];

        $i35 = i38 - 1;

        d70 = $r54[$i35];

        if $z2 == 0 goto label04;

        $r55 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i36 = i38 + 2;

        $r56 = $r55[$i36];

        $i37 = i38 - 1;

        $d72 = $r56[$i37];

        goto label05;

     label04:
        $d72 = 0.0;

     label05:
        d71 = $d72;

        $d59 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d69);

        $d60 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d70);

        $d61 = $d59 + $d60;

        $d62 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d72);

        $d63 = $d61 + $d62;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d63;

        $d65 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d64 = r0.<org.apache.commons.math3.linear.SchurTransformer: double epsilon>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d65, 0.0, $d64);

        if $z1 == 0 goto label06;

        goto label19;

     label06:
        $d66 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d69 = d69 / $d66;

        $d67 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d70 = d70 / $d67;

        $d68 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        d71 = $d72 / $d68;

     label07:
        $d2 = d69 * d69;

        $d1 = d70 * d70;

        $d4 = $d2 + $d1;

        $d3 = d71 * d71;

        $d5 = $d4 + $d3;

        d73 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $b9 = d69 cmpg 0.0;

        if $b9 >= 0 goto label08;

        d73 = neg d73;

     label08:
        $b10 = d73 cmpl 0.0;

        if $b10 == 0 goto label19;

        if i38 == i1 goto label09;

        $r49 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r50 = $r49[i38];

        $i32 = i38 - 1;

        $d57 = neg d73;

        $d56 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d58 = $d57 * $d56;

        $r50[$i32] = $d58;

        goto label10;

     label09:
        if i0 == i1 goto label10;

        $r45 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r48 = $r45[i38];

        $i31 = i38 - 1;

        $r46 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r47 = $r46[i38];

        $i30 = i38 - 1;

        $d54 = $r47[$i30];

        $d55 = neg $d54;

        $r48[$i31] = $d55;

     label10:
        d69 = d69 + d73;

        $d74 = d69 / d73;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x> = $d74;

        $d75 = d70 / d73;

        r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y> = $d75;

        d0 = d71 / d73;

        d70 = d70 / d69;

        d71 = d71 / d69;

        i39 = i38;

     label11:
        if i39 >= i3 goto label13;

        $r33 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r34 = $r33[i38];

        $d40 = $r34[i39];

        $r35 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i24 = i38 + 1;

        $r36 = $r35[$i24];

        $d38 = $r36[i39];

        $d39 = d70 * $d38;

        d69 = $d40 + $d39;

        if z0 == 0 goto label12;

        $r41 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i26 = i38 + 2;

        $r42 = $r41[$i26];

        $d49 = $r42[i39];

        $d50 = d71 * $d49;

        d69 = d69 + $d50;

        $r43 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i27 = i38 + 2;

        $r44 = $r43[$i27];

        $d52 = $r44[i39];

        $d51 = d69 * d0;

        $d53 = $d52 - $d51;

        $r44[i39] = $d53;

     label12:
        $r37 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r38 = $r37[i38];

        $d43 = $r38[i39];

        $d41 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $d42 = d69 * $d41;

        $d44 = $d43 - $d42;

        $r38[i39] = $d44;

        $r39 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i25 = i38 + 1;

        $r40 = $r39[$i25];

        $d47 = $r40[i39];

        $d45 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $d46 = d69 * $d45;

        $d48 = $d47 - $d46;

        $r40[i39] = $d48;

        i39 = i39 + 1;

        goto label11;

     label13:
        i40 = 0;

     label14:
        $i11 = i38 + 3;

        $i12 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i2, $i11);

        if i40 > $i12 goto label16;

        $d23 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $r21 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r22 = $r21[i40];

        $d22 = $r22[i38];

        $d27 = $d23 * $d22;

        $d25 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $r23 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r24 = $r23[i40];

        $i19 = i38 + 1;

        $d24 = $r24[$i19];

        $d26 = $d25 * $d24;

        d69 = $d27 + $d26;

        if z0 == 0 goto label15;

        $r29 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r30 = $r29[i40];

        $i21 = i38 + 2;

        $d33 = $r30[$i21];

        $d34 = d0 * $d33;

        d69 = d69 + $d34;

        $r31 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r32 = $r31[i40];

        $i22 = i38 + 2;

        $d36 = $r32[$i22];

        $d35 = d69 * d71;

        $d37 = $d36 - $d35;

        $r32[$i22] = $d37;

     label15:
        $r25 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r26 = $r25[i40];

        $d28 = $r26[i38];

        $d29 = $d28 - d69;

        $r26[i38] = $d29;

        $r27 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r28 = $r27[i40];

        $i20 = i38 + 1;

        $d31 = $r28[$i20];

        $d30 = d69 * d70;

        $d32 = $d31 - $d30;

        $r28[$i20] = $d32;

        i40 = i40 + 1;

        goto label14;

     label16:
        $r8 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $i13 = lengthof $r8;

        i41 = $i13 - 1;

        i42 = 0;

     label17:
        if i42 > i41 goto label19;

        $d7 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double x>;

        $r9 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r10 = $r9[i42];

        $d6 = $r10[i38];

        $d11 = $d7 * $d6;

        $d9 = r1.<org.apache.commons.math3.linear.SchurTransformer$ShiftInfo: double y>;

        $r11 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r12 = $r11[i42];

        $i14 = i38 + 1;

        $d8 = $r12[$i14];

        $d10 = $d9 * $d8;

        d69 = $d11 + $d10;

        if z0 == 0 goto label18;

        $r17 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r18 = $r17[i42];

        $i16 = i38 + 2;

        $d17 = $r18[$i16];

        $d18 = d0 * $d17;

        d69 = d69 + $d18;

        $r19 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r20 = $r19[i42];

        $i17 = i38 + 2;

        $d20 = $r20[$i17];

        $d19 = d69 * d71;

        $d21 = $d20 - $d19;

        $r20[$i17] = $d21;

     label18:
        $r13 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r14 = $r13[i42];

        $d12 = $r14[i38];

        $d13 = $d12 - d69;

        $r14[i38] = $d13;

        $r15 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixP>;

        $r16 = $r15[i42];

        $i15 = i38 + 1;

        $d15 = $r16[$i15];

        $d14 = d69 * d70;

        $d16 = $d15 - $d14;

        $r16[$i15] = $d16;

        i42 = i42 + 1;

        goto label17;

     label19:
        i38 = i38 + 1;

        goto label01;

     label20:
        i43 = i1 + 2;

     label21:
        if i43 > i2 goto label23;

        $r4 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r5 = $r4[i43];

        $i5 = i43 - 2;

        $r5[$i5] = 0.0;

        $i6 = i1 + 2;

        if i43 <= $i6 goto label22;

        $r6 = r0.<org.apache.commons.math3.linear.SchurTransformer: double[][] matrixT>;

        $r7 = $r6[i43];

        $i7 = i43 - 3;

        $r7[$i7] = 0.0;

     label22:
        i43 = i43 + 1;

        goto label21;

     label23:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.SchurTransformer: int MAX_ITERATIONS> = 100;

        return;
    }
}
