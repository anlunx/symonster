public class org.apache.commons.math3.analysis.function.HarmonicOscillator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double amplitude;
    private final double omega;
    private final double phase;

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude> = d0;

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega> = d1;

        r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase> = d2;

        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d3 = $d1 * d0;

        $d2 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase>;

        $d5 = $d3 + $d2;

        $d4 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d6 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double value(double,double)>($d5, $d4);

        return $d6;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }

    private static double value(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d0);

        $d3 = d1 * $d2;

        return $d3;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.HarmonicOscillator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        double[] r2;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.commons.math3.analysis.function.HarmonicOscillator;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i1 = $i0 + 1;

        r2 = newarray (double)[$i1];

        $d3 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d5 = $d3 * d0;

        $d4 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double phase>;

        d1 = $d5 + $d4;

        $d6 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d1);

        $d8 = $d6 * $d7;

        r2[0] = $d8;

        $i2 = lengthof r2;

        if $i2 <= 1 goto label2;

        $d9 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double amplitude>;

        $d11 = neg $d9;

        $d10 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d12 = $d11 * $d10;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d1);

        $d14 = $d12 * $d13;

        r2[1] = $d14;

        $d15 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        $d17 = neg $d15;

        $d16 = r0.<org.apache.commons.math3.analysis.function.HarmonicOscillator: double omega>;

        d2 = $d17 * $d16;

        i5 = 2;

     label1:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label2;

        $i4 = i5 - 2;

        $d18 = r2[$i4];

        $d19 = d2 * $d18;

        r2[i5] = $d19;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r3;
    }

    static double access$000(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.analysis.function.HarmonicOscillator: double value(double,double)>(d0, d1);

        return $d2;
    }
}
