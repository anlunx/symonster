public class org.apache.commons.math3.analysis.integration.SimpsonIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
{
    public static final int SIMPSON_MAX_ITERATIONS_COUNT;

    public void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.SimpsonIntegrator r0;
        double d0, d1;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.SimpsonIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(d0, d1, i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.SimpsonIntegrator r0;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.SimpsonIntegrator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.SimpsonIntegrator r0;

        r0 := @this: org.apache.commons.math3.analysis.integration.SimpsonIntegrator;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(3, 64);

        return;
    }

    protected double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.SimpsonIntegrator r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19;
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator $r2;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.Incrementor $r3, $r4, $r5;
        byte $b4, $b5;

        r0 := @this: org.apache.commons.math3.analysis.integration.SimpsonIntegrator;

        $r2 = new org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        specialinvoke $r2.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: void <init>()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: int getMinimalIterationCount()>();

        if $i0 != 1 goto label1;

        $d13 = virtualinvoke $r2.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 1);

        $d14 = 4.0 * $d13;

        $d15 = virtualinvoke $r2.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 0);

        $d16 = $d14 - $d15;

        $d17 = $d16 / 3.0;

        return $d17;

     label1:
        d18 = 0.0;

        d19 = virtualinvoke $r2.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 0);

     label2:
        $r3 = r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        d0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, $i1);

        $r4 = r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $d4 = 4.0 * d0;

        $d5 = $d4 - d19;

        d1 = $d5 / 3.0;

        $r5 = r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        $i2 = virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: int getMinimalIterationCount()>();

        if $i2 < $i3 goto label4;

        $d6 = d1 - d18;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $d7 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: double getRelativeAccuracy()>();

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d18);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d10 = $d8 + $d9;

        $d11 = $d7 * $d10;

        d3 = $d11 * 0.5;

        $b4 = d2 cmpg d3;

        if $b4 <= 0 goto label3;

        $d12 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.SimpsonIntegrator: double getAbsoluteAccuracy()>();

        $b5 = d2 cmpg $d12;

        if $b5 > 0 goto label4;

     label3:
        return d1;

     label4:
        d18 = d1;

        d19 = d0;

        goto label2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.integration.SimpsonIntegrator: int SIMPSON_MAX_ITERATIONS_COUNT> = 64;

        return;
    }
}
