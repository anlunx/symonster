public abstract class org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer extends org.apache.commons.math.ConvergingAlgorithmImpl implements org.apache.commons.math.optimization.UnivariateRealOptimizer
{
    protected boolean resultComputed;
    protected double result;
    protected double functionValue;
    private int maxEvaluations;
    private int evaluations;
    private org.apache.commons.math.optimization.GoalType optimizationGoal;
    private double searchMin;
    private double searchMax;
    private double searchStart;
    private org.apache.commons.math.analysis.UnivariateRealFunction function;

    protected void <init>(int, double)
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.ConvergingAlgorithmImpl: void <init>(int,double)>(i0, d0);

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed> = 0;

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: void setMaxEvaluations(int)>(2147483647);

        return;
    }

    protected void <init>()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        specialinvoke r0.<org.apache.commons.math.ConvergingAlgorithmImpl: void <init>()>();

        return;
    }

    protected void checkResultComputed()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        boolean $z0;
        org.apache.commons.math.exception.NoDataException $r1;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $z0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed>;

        if $z0 != 0 goto label1;

        $r1 = new org.apache.commons.math.exception.NoDataException;

        specialinvoke $r1.<org.apache.commons.math.exception.NoDataException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public double getResult()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        boolean $z0;
        double $d0;
        org.apache.commons.math.exception.NoDataException $r1;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $z0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed>;

        if $z0 != 0 goto label1;

        $r1 = new org.apache.commons.math.exception.NoDataException;

        specialinvoke $r1.<org.apache.commons.math.exception.NoDataException: void <init>()>();

        throw $r1;

     label1:
        $d0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double result>;

        return $d0;
    }

    public double getFunctionValue() throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double d0, $d1, $d2, $d3;
        boolean $z0;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $d1 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label1;

        d0 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double getResult()>();

        $r1 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: org.apache.commons.math.analysis.UnivariateRealFunction function>;

        $d3 = interfaceinvoke $r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue> = $d3;

     label1:
        $d2 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue>;

        return $d2;
    }

    protected final void setResult(double, double, int)
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double d0, d1;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double result> = d0;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue> = d1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int iterationCount> = i0;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed> = 1;

        return;
    }

    protected final void clearResult()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed> = 0;

        return;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        int i0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations> = i0;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $i0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations>;

        return $i0;
    }

    public org.apache.commons.math.optimization.GoalType getGoalType()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        org.apache.commons.math.optimization.GoalType $r1;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $r1 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: org.apache.commons.math.optimization.GoalType optimizationGoal>;

        return $r1;
    }

    public double getMin()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $d0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchMin>;

        return $d0;
    }

    public double getMax()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $d0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchMax>;

        return $d0;
    }

    public double getStartValue()
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $d0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchStart>;

        return $d0;
    }

    protected double computeObjectiveValue(org.apache.commons.math.analysis.UnivariateRealFunction, double) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, $d1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.FunctionEvaluationException $r2;
        org.apache.commons.math.MaxEvaluationsExceededException $r3;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        $i0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        $r2 = new org.apache.commons.math.FunctionEvaluationException;

        $r3 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations>;

        specialinvoke $r3.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i3);

        specialinvoke $r2.<org.apache.commons.math.FunctionEvaluationException: void <init>(java.lang.Throwable,double)>($r3, d0);

        throw $r2;

     label1:
        $d1 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        return $d1;
    }

    protected double computeObjectiveValue(double) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double d0, $d1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;
        org.apache.commons.math.FunctionEvaluationException $r2;
        org.apache.commons.math.MaxEvaluationsExceededException $r3;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed> = 0;

        $r2 = new org.apache.commons.math.FunctionEvaluationException;

        $r3 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i3 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int maxEvaluations>;

        specialinvoke $r3.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i3);

        specialinvoke $r2.<org.apache.commons.math.FunctionEvaluationException: void <init>(java.lang.Throwable,double)>($r3, d0);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: org.apache.commons.math.analysis.UnivariateRealFunction function>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        return $d1;
    }

    public double optimize(org.apache.commons.math.analysis.UnivariateRealFunction, org.apache.commons.math.optimization.GoalType, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        org.apache.commons.math.optimization.GoalType r2;
        double d0, d1, d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        r2 := @parameter1: org.apache.commons.math.optimization.GoalType;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchMin> = d0;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchMax> = d1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double searchStart> = d2;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: org.apache.commons.math.optimization.GoalType optimizationGoal> = r2;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: org.apache.commons.math.analysis.UnivariateRealFunction function> = r1;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue> = #NaN;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: int evaluations> = 0;

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: void resetIterationsCounter()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double doOptimize()>();

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double result> = $d3;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: boolean resultComputed> = 1;

        $d4 = r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double result>;

        return $d4;
    }

    protected void setFunctionValue(double)
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double functionValue> = d0;

        return;
    }

    public double optimize(org.apache.commons.math.analysis.UnivariateRealFunction, org.apache.commons.math.optimization.GoalType, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        org.apache.commons.math.optimization.GoalType r2;
        double d0, d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        r2 := @parameter1: org.apache.commons.math.optimization.GoalType;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $d2 = d1 - d0;

        $d3 = 0.5 * $d2;

        $d4 = d0 + $d3;

        $d5 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: double optimize(org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.optimization.GoalType,double,double,double)>(r1, r2, d0, d1, $d4);

        return $d5;
    }

    protected double doOptimize() throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer r0;
        org.apache.commons.math.exception.MathUnsupportedOperationException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;

        $r1 = new org.apache.commons.math.exception.MathUnsupportedOperationException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_OVERRIDEN>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;
    }
}
