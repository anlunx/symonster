public class org.apache.commons.math3.geometry.euclidean.threed.Plane extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Embedding
{
    private static final double DEFAULT_TOLERANCE;
    private double originOffset;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D u;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D v;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D w;
    private final double tolerance;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = 0.0;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, $r3;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = d0;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d2 = neg $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d2;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3, $r4, $r5, $r6;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter3: double;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>(r1);

        $r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>(r1);

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r5);

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, $r6, d0);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, r3, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r2;

        $r3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r3;

        $r4 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r4;

        $r5 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r5;

        $d1 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance> = $d1;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r0);

        return $r1;
    }

    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r2);

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d1 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d1;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void setFrame()>();

        return;
    }

    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d0;

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r2;

        $r3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r3;

        $r4 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r4;

        $r5 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r5;

        return;
    }

    private void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2;
        double d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $b0 = d0 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label1:
        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = 1.0 / d0;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, r1);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r2;

        return;
    }

    private void setFrame()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = neg $d0;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, $r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin> = $r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r4;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r7 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r6, $r5);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r7;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getU()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getV()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)>($r2);

        return $r3;
    }

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        return $d0;
    }

    public void revertSelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2, $r3, $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w> = $r4;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = neg $d0;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset> = $d1;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r4, $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r5);

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d0, $d1);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d3 = neg $d2;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d0, $r4, $d1, $r6, $d3, $r5);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter1: double;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $d2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d4 = d0 - $d3;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, $r3, $d2, $r5, $d4, $r4);

        return $r2;
    }

    public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3, $r2);

        $b0 = d0 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d6 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d8 = $d7 - $d6;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $d10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b3 = $d9 cmpg $d10;

        if $b3 < 0 goto label2;

     label1:
        $b1 = d0 cmpl 3.141592653489793;

        if $b1 <= 0 goto label3;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d1 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d3 = $d2 + $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b2 = $d4 cmpg $d5;

        if $b2 >= 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        r3 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>(r1);

        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r3);

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>($r7);

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r9);

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r10, $d0);

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r12 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11);

        $r6.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r12;

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $r14 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r13);

        $r6.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r14;

        return $r6;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Plane translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r4, $r5, $r6, $r7, $r8;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>(r1);

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r5, $r6, $d0);

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u>;

        $r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D u> = $r7;

        $r8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v>;

        $r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D v> = $r8;

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Line r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, r3, $r4, $r6, $r7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r2);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b0 = $d2 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        $r5 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r5);

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d4 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r3);

        $d5 = $d3 + $d4;

        $d6 = neg $d5;

        d1 = $d6 / d0;

        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r3, d1, r2);

        return $r7;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1, $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, r3, $r4, $r5, $r8;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r4 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5, $r4);

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r2, $d2);

        r3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane,org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r0, r1, $r6);

        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector)>(r2);

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r3, $r8, $d3);

        return $r7;
    }

    public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1, r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        byte $b0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r2 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d1 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d2 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r6 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d4 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r7 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d5 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r8 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d6 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d7 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $r9 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d8 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r10 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d9 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r11 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        d10 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        d11 = r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d18 = d5 * d10;

        $d17 = d9 * d6;

        d12 = $d18 - $d17;

        $d20 = d6 * d8;

        $d19 = d10 * d4;

        d13 = $d20 - $d19;

        $d22 = d4 * d9;

        $d21 = d8 * d5;

        d14 = $d22 - $d21;

        $d24 = d0 * d12;

        $d23 = d1 * d13;

        $d26 = $d24 + $d23;

        $d25 = d2 * d14;

        d15 = $d26 + $d25;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d15);

        $b0 = $d27 cmpg 1.0E-10;

        if $b0 >= 0 goto label1;

        return null;

     label1:
        d16 = 1.0 / d15;

        $r12 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d28 = neg d12;

        $d33 = $d28 * d3;

        $d30 = d2 * d9;

        $d29 = d10 * d1;

        $d31 = $d30 - $d29;

        $d32 = $d31 * d7;

        $d38 = $d33 - $d32;

        $d35 = d6 * d1;

        $d34 = d2 * d5;

        $d36 = $d35 - $d34;

        $d37 = $d36 * d11;

        $d39 = $d38 - $d37;

        $d66 = $d39 * d16;

        $d40 = neg d13;

        $d45 = $d40 * d3;

        $d42 = d10 * d0;

        $d41 = d2 * d8;

        $d43 = $d42 - $d41;

        $d44 = $d43 * d7;

        $d50 = $d45 - $d44;

        $d47 = d2 * d4;

        $d46 = d6 * d0;

        $d48 = $d47 - $d46;

        $d49 = $d48 * d11;

        $d51 = $d50 - $d49;

        $d65 = $d51 * d16;

        $d52 = neg d14;

        $d57 = $d52 * d3;

        $d54 = d1 * d8;

        $d53 = d9 * d0;

        $d55 = $d54 - $d53;

        $d56 = $d55 * d7;

        $d62 = $d57 - $d56;

        $d59 = d5 * d0;

        $d58 = d1 * d4;

        $d60 = $d59 - $d58;

        $d61 = $d60 * d11;

        $d63 = $d62 - $d61;

        $d64 = $d63 * d16;

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d66, $d65, $d64);

        return $r12;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double)>($d0);

        return $r1;
    }

    public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double $d0, $d1, $d2;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Vector)>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double tolerance>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        if $z0 == 0 goto label1;

        $d2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d3 = neg $d2;

        goto label2;

     label1:
        $d3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

     label2:
        $d1 = $d0 + $d3;

        return $d1;
    }

    public double getOffset(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }

    public double getOffset(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double originOffset>;

        $d2 = $d0 + $d1;

        return $d2;
    }

    public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r4 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D w>;

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Plane r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Plane;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.threed.Plane: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
