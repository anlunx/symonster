public abstract class org.apache.commons.math3.geometry.partitioning.AbstractRegion extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Region
{
    private org.apache.commons.math3.geometry.partitioning.BSPTree tree;
    private final double tolerance;
    private double size;
    private org.apache.commons.math3.geometry.Point barycenter;

    protected void <init>(double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double d0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        java.lang.Boolean $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = d0;

        return;
    }

    protected void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = d0;

        return;
    }

    protected void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        java.util.Collection r1;
        double d0;
        int $i0;
        java.util.TreeSet $r3;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 $r4;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r5, $r6, $r8, $r9;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion$2 $r7;
        java.lang.Boolean $r10;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = d0;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        $r9 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r10);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r9;

        goto label2;

     label1:
        $r3 = new java.util.TreeSet;

        $r4 = new org.apache.commons.math3.geometry.partitioning.AbstractRegion$1;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$1: void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)>(r0);

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        virtualinvoke $r3.<java.util.TreeSet: boolean addAll(java.util.Collection)>(r1);

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r5;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>($r6, $r3);

        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r7 = new org.apache.commons.math3.geometry.partitioning.AbstractRegion$2;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.AbstractRegion$2: void <init>(org.apache.commons.math3.geometry.partitioning.AbstractRegion)>(r0);

        virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r7);

     label2:
        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane[], double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] r1;
        double d0;
        int i0, $i1, i2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r3, $r6;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4, $r8, $r10, r13;
        java.lang.Boolean $r5, $r9, $r11, $r12;
        org.apache.commons.math3.geometry.partitioning.Region $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane[];

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance> = d0;

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        $r4 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r5);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r4;

        goto label5;

     label2:
        $r6 = r1[0];

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Region wholeSpace()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree> = $r8;

        r13 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r9);

        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r3 = r1[i2];

        $z0 = virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r3);

        if $z0 == 0 goto label4;

        virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        $r10 = virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r11);

        r13 = virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r12);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return;
    }

    public abstract org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree);

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance>;

        return $d0;
    }

    private void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.Collection)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r10, $r11;
        java.util.Collection r2;
        java.util.Iterator r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r6, $r15, $r16, $r18;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane r7;
        boolean $z0, $z1, $z6, $z7;
        java.util.ArrayList $r8, $r9;
        java.lang.Object $r12, $r17;
        int[] $r13;
        org.apache.commons.math3.geometry.partitioning.Side $r14;
        int $i0, $i1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r19, r20;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: java.util.Collection;

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        r20 = null;

     label1:
        if r20 != null goto label2;

        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label2;

        $r17 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r17;

        r20 = interfaceinvoke $r18.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r19 = interfaceinvoke r20.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()>();

        $z7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r19);

        if $z7 != 0 goto label1;

        r20 = null;

        goto label1;

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.partitioning.SubHyperplane) $r12;

        $r13 = <org.apache.commons.math3.geometry.partitioning.AbstractRegion$3: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r14 = interfaceinvoke r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r20);

        $i0 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i1 = $r13[$i0];

        tableswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label5:
        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label8;

     label6:
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label8;

     label7:
        r7 = interfaceinvoke r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r20);

        $r15 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $r16 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        goto label8;

     label8:
        goto label4;

     label9:
        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>($r10, $r8);

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.Collection)>($r11, $r9);

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.AbstractRegion copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0, $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r2);

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }

    public boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r3, $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label3;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r6 = (java.lang.Boolean) $r5;

        $z2 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r3);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        if $z1 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public boolean isFull()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r1);

        return $z0;
    }

    public boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r3, $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r6 = (java.lang.Boolean) $r5;

        $z2 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r4);

        if $z1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean contains(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Region r1, $r3;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        $r2 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region difference(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r0);

        $z0 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty()>();

        return $z0;
    }

    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void <init>(org.apache.commons.math3.geometry.Point)>(r1);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r3);

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BoundaryProjection getProjection()>();

        return $r5;
    }

    public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>($r2, r1);

        return $r3;
    }

    protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.Vector r2;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>(r1, r2);

        return $r3;
    }

    protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3, $r7, $r8;
        org.apache.commons.math3.geometry.Point r2;
        org.apache.commons.math3.geometry.partitioning.Region$Location r4, r5, $r11, $r12;
        double $d0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r6;
        java.lang.Object $r9;
        java.lang.Boolean $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.Point;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double tolerance>;

        r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point,double)>(r2, $d0);

        $r6 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r6 != null goto label3;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r10 = (java.lang.Boolean) $r9;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r11 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        goto label2;

     label1:
        $r11 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

     label2:
        return $r11;

     label3:
        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>($r7, r2);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.Point)>($r8, r2);

        if r4 != r5 goto label4;

        $r12 = r4;

        goto label5;

     label4:
        $r12 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location BOUNDARY>;

     label5:
        return $r12;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        boolean z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3, $r6, $r7;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.partitioning.BoundaryBuilder $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        if $r4 != null goto label1;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r5 = new org.apache.commons.math3.geometry.partitioning.BoundaryBuilder;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BoundaryBuilder: void <init>()>();

        virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r5);

     label1:
        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        return $r7;
    }

    public double getBoundarySize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r2 = new org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;

        specialinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r2);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor: double getSize()>();

        return $d0;
    }

    public double getSize()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void computeGeometricalProperties()>();

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double size>;

        return $d0;
    }

    protected void setSize(double)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: double size> = d0;

        return;
    }

    public org.apache.commons.math3.geometry.Point getBarycenter()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point $r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void computeGeometricalProperties()>();

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter>;

        return $r2;
    }

    protected void setBarycenter(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r1);

        return;
    }

    protected void setBarycenter(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.Point barycenter> = r1;

        return;
    }

    protected abstract void computeGeometricalProperties();

    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.InsideFinder $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.geometry.partitioning.Side $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r3 = new org.apache.commons.math3.geometry.partitioning.InsideFinder;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void <init>(org.apache.commons.math3.geometry.partitioning.Region)>(r0);

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()>();

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r4, $r5);

        $z0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound()>();

        if $z2 == 0 goto label1;

        $r6 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side BOTH>;

        goto label4;

     label1:
        $r6 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label4;

     label2:
        $z1 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound()>();

        if $z1 == 0 goto label3;

        $r6 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label4;

     label3:
        $r6 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label4:
        return $r6;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, $r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree tree>;

        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r2, r1);

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r11, $r13, $r15, $r18, $r20, $r21;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2, r5, r6, $r7, $r8, $r12, $r14, $r16, $r17, $r19, $r22, $r23, $r26;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane r4;
        int[] $r9;
        org.apache.commons.math3.geometry.partitioning.Side $r10;
        int $i0, $i1;
        java.lang.Object $r24;
        java.lang.Boolean $r25;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r7 != null goto label3;

        $r24 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r25 = (java.lang.Boolean) $r24;

        $z0 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r26 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()>();

        goto label2;

     label1:
        $r26 = null;

     label2:
        return $r26;

     label3:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        r3 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r9 = <org.apache.commons.math3.geometry.partitioning.AbstractRegion$3: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r10 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r3);

        $i0 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label9;
        };

     label4:
        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r12 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r11, r2);

        return $r12;

     label5:
        $r18 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r19 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r18, r2);

        return $r19;

     label6:
        r4 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r3);

        $r13 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r14 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        r5 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r13, $r14);

        $r15 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r16 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        r6 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r15, $r16);

        if r5 != null goto label7;

        return r6;

     label7:
        if r6 != null goto label8;

        return r5;

     label8:
        $r17 = interfaceinvoke r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r6);

        return $r17;

     label9:
        $r20 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r21 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r22 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r21, r2);

        $r23 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r20, $r22);

        return $r23;
    }

    public org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0, $r13;
        org.apache.commons.math3.geometry.partitioning.Transform r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3, r9, $r11, $r16, $r19, $r22, $r28;
        java.util.Iterator r4, r8;
        java.util.Map$Entry r5;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r6, r7;
        java.util.HashMap $r10;
        java.util.Set $r12;
        boolean $z0, $z1;
        java.lang.Object $r14, $r15, $r18, $r20, $r21, $r23, $r25, $r27;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r17;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r24, $r26;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Transform;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r11, r1, $r10);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r15;

        $r17 = virtualinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r17 == null goto label3;

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r18;

        $r20 = virtualinvoke $r19.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r6 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r20;

        if r6 == null goto label3;

        $r21 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r21;

        $r23 = virtualinvoke $r22.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r7 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r23;

        $r24 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        r8 = virtualinvoke $r24.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r25;

        $r26 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r27 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r28 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r27;

        virtualinvoke $r26.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r28);

        goto label2;

     label3:
        goto label1;

     label4:
        $r13 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        return $r13;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.Transform, java.util.Map)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r20, r22, $r26, $r27, $r28, $r29, $r30;
        org.apache.commons.math3.geometry.partitioning.Transform r2;
        java.util.Map r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r4, $r8, $r12, $r13, $r15, $r16;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r5, r6, $r9, $r14, $r17, $r24, $r25;
        java.lang.Object $r10, $r21;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute $r18, r23;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r19;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Transform;

        r3 := @parameter2: java.util.Map;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r8 != null goto label1;

        $r20 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r21 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        specialinvoke $r20.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r21);

        r22 = $r20;

        goto label7;

     label1:
        r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r9 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r4;

        r5 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r23 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r10;

        if r23 == null goto label6;

        $r12 = virtualinvoke r23.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r12 != null goto label2;

        $r24 = null;

        goto label3;

     label2:
        $r13 = virtualinvoke r23.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r14 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) $r13;

        $r24 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

     label3:
        r6 = $r24;

        $r15 = virtualinvoke r23.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r15 != null goto label4;

        $r25 = null;

        goto label5;

     label4:
        $r16 = virtualinvoke r23.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r17 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) $r16;

        $r25 = virtualinvoke $r17.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>(r2);

     label5:
        $r18 = new org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r19 = new org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke $r19.<org.apache.commons.math3.geometry.partitioning.NodesSet: void <init>()>();

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r6, $r25, $r19);

        r23 = $r18;

     label6:
        $r26 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r27 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r28 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r27, r2, r3);

        $r29 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r30 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.Transform,java.util.Map)>($r29, r2, r3);

        specialinvoke $r26.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r5, $r28, $r30, r23);

        r22 = $r26;

     label7:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r22);

        return r22;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region copySelf()
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion copySelf()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.AbstractRegion r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.AbstractRegion;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }
}
