public class org.apache.commons.math3.linear.DiagonalMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final double[] data;

    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>(i0, i0);

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data> = $r1;

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r1, 1);

        return;
    }

    public void <init>(double[], boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] r1, $r4;
        boolean z0;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r2;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data> = $r4;

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        int i0, i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, i1);

        throw $r2;

     label1:
        $r1 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(int)>(i0);

        return $r1;
    }

    public org.apache.commons.math3.linear.RealMatrix copy()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = new org.apache.commons.math3.linear.DiagonalMatrix;

        $r2 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        specialinvoke $r1.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>($r2);

        return $r1;
    }

    public org.apache.commons.math3.linear.DiagonalMatrix add(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, r1, $r3;
        int i0, i1;
        double[] r2, $r4, $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r4[i1];

        $r5 = r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r5[i1];

        $d2 = $d1 + $d0;

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return $r3;
    }

    public org.apache.commons.math3.linear.DiagonalMatrix subtract(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, r1, $r3;
        int i0, i1;
        double[] r2, $r4, $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r4[i1];

        $r5 = r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r5[i1];

        $d2 = $d1 - $d0;

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return $r3;
    }

    public org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, r1, $r3;
        int i0, i1;
        double[] r2, $r4, $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.DiagonalMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r4[i1];

        $r5 = r1.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r5[i1];

        $d2 = $d1 * $d0;

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r2, 0);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r6, $r7;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, i2, i3;
        double[][] r2;
        boolean $z0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;
        double[] $r4, $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = r1 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z0 == 0 goto label1;

        $r6 = (org.apache.commons.math3.linear.DiagonalMatrix) r1;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix)>($r6);

        return $r7;

     label1:
        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $r5 = r2[i2];

        $r4 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r4[i2];

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d0 * $d1;

        $r5[i3] = $d2;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r3 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r3;
    }

    public double[][] getData()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0, i1;
        double[][] r1;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: int getRowDimension()>();

        r1 = newmultiarray (double)[i0][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r1[i1];

        $r2 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r2[i1];

        $r3[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public double[] getDataRef()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        return $r1;
    }

    public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0, i1;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        if i0 != i1 goto label1;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d0 = $r1[i0];

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        return $d0;
    }

    public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0, i1;
        double d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        if i0 != i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $r1[i0] = d0;

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void ensureZero(double)>(d0);

     label2:
        return;
    }

    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        if i0 != i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r1[i0];

        $d2 = $d1 + d0;

        $r1[i0] = $d2;

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: void ensureZero(double)>(d0);

     label2:
        return;
    }

    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        if i0 != i1 goto label1;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r1[i0];

        $d2 = $d1 * d0;

        $r1[i0] = $d2;

     label1:
        return;
    }

    public int getRowDimension()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r2, $r3;
        double[] r1, $r4;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.DiagonalMatrix: double[] getDataRef()>();

        return $r4;
    }

    public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double[] r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] operate(double[])>(r1);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        org.apache.commons.math3.linear.RealVector r1, $r3;
        boolean $z0;
        double[] $r2, r5;
        org.apache.commons.math3.linear.ArrayRealVector $r4;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math3.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math3.linear.ArrayRealVector) r1;

        r5 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        goto label2;

     label1:
        r5 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

     label2:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] preMultiply(double[])>(r5);

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealVector createRealVector(double[])>($r2);

        return $r3;
    }

    private void ensureZero(double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double d0, $d1;
        boolean $z0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        d0 := @parameter0: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(0.0, d0, 1);

        if $z0 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 1);

        throw $r1;

     label1:
        return;
    }

    public org.apache.commons.math3.linear.DiagonalMatrix inverse() throws org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix inverse(double)>(0.0);

        return $r1;
    }

    public org.apache.commons.math3.linear.DiagonalMatrix inverse(double) throws org.apache.commons.math3.linear.SingularMatrixException
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0, $r4;
        double d0, $d1, $d2;
        double[] r1, $r2, $r3, $r5;
        boolean $z0;
        int $i0, $i1, i2;
        org.apache.commons.math3.linear.SingularMatrixException $r6;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.DiagonalMatrix: boolean isSingular(double)>(d0);

        if $z0 == 0 goto label1;

        $r6 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r6.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        i2 = 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label3;

        $r5 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r5[i2];

        $d2 = 1.0 / $d1;

        r1[i2] = $d2;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[],boolean)>(r1, 0);

        return $r4;
    }

    public boolean isSingular(double)
    {
        org.apache.commons.math3.linear.DiagonalMatrix r0;
        double d0, $d1;
        double[] $r1, $r2;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.DiagonalMatrix;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.DiagonalMatrix: double[] data>;

        $d1 = $r2[i1];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 0.0, d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.DiagonalMatrix: long serialVersionUID> = 20121229L;

        return;
    }
}
