class com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1 extends com.opengamma.analytics.math.function.Function1D
{
    final int val$dim;
    final java.util.List val$funcs;
    final com.opengamma.analytics.math.interpolation.BasisFunctionGenerator this$0;

    void <init>(com.opengamma.analytics.math.interpolation.BasisFunctionGenerator, int, java.util.List)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1 r0;
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r1;
        int i0;
        java.util.List r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator this$0> = r1;

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: int val$dim> = i0;

        r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: java.util.List val$funcs> = r2;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(double[])
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1 r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        java.lang.Double $r5, $r9, $r11;
        java.util.List $r6;
        java.lang.Object $r7, $r10;
        double $d0, $d1, d2;
        com.opengamma.analytics.math.function.Function1D $r8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1;

        r1 := @parameter0: double[];

        d2 = 1.0;

        $i1 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: int val$dim>;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r3;

        $i3 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: int val$dim>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r4;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "length of x {} was not equal to dimension {}", $r2);

        i4 = 0;

     label3:
        $i5 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: int val$dim>;

        if i4 >= $i5 goto label4;

        $r6 = r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: java.util.List val$funcs>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        $r8 = (com.opengamma.analytics.math.function.Function1D) $r7;

        $d0 = r1[i4];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r10 = virtualinvoke $r8.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r9);

        $r11 = (java.lang.Double) $r10;

        $d1 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        d2 = d2 * $d1;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        return $r5;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1 r0;
        java.lang.Object r1;
        double[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (double[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: java.lang.Double evaluate(double[])>($r2);

        return $r3;
    }
}
