public class org.apache.commons.math.stat.regression.SimpleRegression extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.commons.math.distribution.TDistribution distribution;
    private double sumX;
    private double sumXX;
    private double sumY;
    private double sumYY;
    private double sumXY;
    private long n;
    private double xbar;
    private double ybar;

    public void <init>()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        org.apache.commons.math.distribution.TDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $r1 = new org.apache.commons.math.distribution.TDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double)>(1.0);

        specialinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: void <init>(org.apache.commons.math.distribution.TDistribution)>($r1);

        return;
    }

    public void <init>(org.apache.commons.math.distribution.TDistribution)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        org.apache.commons.math.distribution.TDistribution r1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        r1 := @parameter0: org.apache.commons.math.distribution.TDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n> = 0L;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar> = 0.0;

        virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: void setDistribution(org.apache.commons.math.distribution.TDistribution)>(r1);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        int i0;
        org.apache.commons.math.distribution.TDistributionImpl $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n> = 0L;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar> = 0.0;

        $r1 = new org.apache.commons.math.distribution.TDistributionImpl;

        $d0 = (double) i0;

        specialinvoke $r1.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double)>($d0);

        virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: void setDistribution(org.apache.commons.math.distribution.TDistribution)>($r1);

        return;
    }

    public void addData(double, double)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l14, $l15;
        byte $b1, $b13;
        org.apache.commons.math.distribution.TDistribution $r1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar> = d0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar> = d1;

        goto label2;

     label1:
        $d4 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        d2 = d0 - $d4;

        $d5 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar>;

        d3 = d1 - $d5;

        $d12 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d7 = d2 * d2;

        $l2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d6 = (double) $l2;

        $d10 = $d7 * $d6;

        $l3 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d8 = (double) $l3;

        $d9 = $d8 + 1.0;

        $d11 = $d10 / $d9;

        $d13 = $d12 + $d11;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX> = $d13;

        $d20 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY>;

        $d15 = d3 * d3;

        $l4 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d14 = (double) $l4;

        $d18 = $d15 * $d14;

        $l5 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d16 = (double) $l5;

        $d17 = $d16 + 1.0;

        $d19 = $d18 / $d17;

        $d21 = $d20 + $d19;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY> = $d21;

        $d28 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        $d23 = d2 * d3;

        $l6 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d22 = (double) $l6;

        $d26 = $d23 * $d22;

        $l7 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d24 = (double) $l7;

        $d25 = $d24 + 1.0;

        $d27 = $d26 / $d25;

        $d29 = $d28 + $d27;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY> = $d29;

        $d33 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        $l8 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d30 = (double) $l8;

        $d31 = $d30 + 1.0;

        $d32 = d2 / $d31;

        $d34 = $d33 + $d32;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar> = $d34;

        $d38 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar>;

        $l9 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d35 = (double) $l9;

        $d36 = $d35 + 1.0;

        $d37 = d3 / $d36;

        $d39 = $d38 + $d37;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar> = $d39;

     label2:
        $d40 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX>;

        $d41 = $d40 + d0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX> = $d41;

        $d42 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY>;

        $d43 = $d42 + d1;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY> = $d43;

        $l10 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l11 = $l10 + 1L;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n> = $l11;

        $l12 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b13 = $l12 cmp 2L;

        if $b13 <= 0 goto label3;

        $r1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution>;

        $l14 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l15 = $l14 - 2L;

        $d44 = (double) $l15;

        interfaceinvoke $r1.<org.apache.commons.math.distribution.TDistribution: void setDegreesOfFreedom(double)>($d44);

     label3:
        return;
    }

    public void removeData(double, double)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l14, $l15;
        byte $b1, $b13;
        org.apache.commons.math.distribution.TDistribution $r1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $d4 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        d2 = d0 - $d4;

        $d5 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar>;

        d3 = d1 - $d5;

        $d12 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d7 = d2 * d2;

        $l2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d6 = (double) $l2;

        $d10 = $d7 * $d6;

        $l3 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d8 = (double) $l3;

        $d9 = $d8 - 1.0;

        $d11 = $d10 / $d9;

        $d13 = $d12 - $d11;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX> = $d13;

        $d20 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY>;

        $d15 = d3 * d3;

        $l4 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d14 = (double) $l4;

        $d18 = $d15 * $d14;

        $l5 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d16 = (double) $l5;

        $d17 = $d16 - 1.0;

        $d19 = $d18 / $d17;

        $d21 = $d20 - $d19;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY> = $d21;

        $d28 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        $d23 = d2 * d3;

        $l6 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d22 = (double) $l6;

        $d26 = $d23 * $d22;

        $l7 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d24 = (double) $l7;

        $d25 = $d24 - 1.0;

        $d27 = $d26 / $d25;

        $d29 = $d28 - $d27;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY> = $d29;

        $d33 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        $l8 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d30 = (double) $l8;

        $d31 = $d30 - 1.0;

        $d32 = d2 / $d31;

        $d34 = $d33 - $d32;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar> = $d34;

        $d38 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar>;

        $l9 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d35 = (double) $l9;

        $d36 = $d35 - 1.0;

        $d37 = d3 / $d36;

        $d39 = $d38 - $d37;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double ybar> = $d39;

        $d40 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX>;

        $d41 = $d40 - d0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX> = $d41;

        $d42 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY>;

        $d43 = $d42 - d1;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY> = $d43;

        $l10 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l11 = $l10 - 1L;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n> = $l11;

        $l12 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b13 = $l12 cmp 2L;

        if $b13 <= 0 goto label1;

        $r1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution>;

        $l14 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l15 = $l14 - 2L;

        $d44 = (double) $l15;

        interfaceinvoke $r1.<org.apache.commons.math.distribution.TDistribution: void setDegreesOfFreedom(double)>($d44);

     label1:
        return;
    }

    public void addData(double[][])
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double[][] r1;
        int $i0, i1;
        double[] $r2, $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        r1 := @parameter0: double[][];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = r1[i1];

        $d1 = $r2[0];

        $r3 = r1[i1];

        $d0 = $r3[1];

        virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: void addData(double,double)>($d1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void removeData(double[][])
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double[][] r1;
        int $i0, i3;
        long $l1;
        byte $b2;
        double[] $r2, $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        r1 := @parameter0: double[][];

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label2;

        $l1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $r2 = r1[i3];

        $d1 = $r2[0];

        $r3 = r1[i3];

        $d0 = $r3[1];

        virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: void removeData(double,double)>($d1, $d0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY> = 0.0;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n> = 0L;

        return;
    }

    public long getN()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        return $l0;
    }

    public double predict(double)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlope()>();

        $d2 = specialinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getIntercept(double)>(d1);

        $d3 = d1 * d0;

        $d4 = $d2 + $d3;

        return $d4;
    }

    public double getIntercept()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = specialinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getIntercept(double)>($d0);

        return $d1;
    }

    public double getSlope()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1, $b2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $b2 = $d1 cmpg 4.9E-323;

        if $b2 >= 0 goto label2;

        return #NaN;

     label2:
        $d3 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        $d2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double getSumSquaredErrors()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d5 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY>;

        $d1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        $d0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        $d3 = $d1 * $d0;

        $d2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d4 = $d3 / $d2;

        $d6 = $d5 - $d4;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(0.0, $d6);

        return $d7;
    }

    public double getTotalSumSquares()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumYY>;

        return $d0;
    }

    public double getXSumSquares()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        long $l0;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        return $d0;
    }

    public double getSumOfCrossProducts()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXY>;

        return $d0;
    }

    public double getRegressionSumSquares()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = specialinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getRegressionSumSquares(double)>($d0);

        return $d1;
    }

    public double getMeanSquareError()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        long $l0, $l2, $l3;
        byte $b1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $l2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l3 = $l2 - 2L;

        $d1 = (double) $l3;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public double getR()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, $d1, d2;
        byte $b0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getRSquare()>();

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        d2 = neg d2;

     label1:
        return d2;
    }

    public double getRSquare()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getTotalSumSquares()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSumSquaredErrors()>();

        $d2 = d0 - $d1;

        $d3 = $d2 / d0;

        return $d3;
    }

    public double getInterceptStdErr()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d1 = (double) $l0;

        $d7 = 1.0 / $d1;

        $d3 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        $d2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double xbar>;

        $d5 = $d3 * $d2;

        $d4 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d6 = $d5 / $d4;

        $d8 = $d7 + $d6;

        $d9 = $d0 * $d8;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d9);

        return $d10;
    }

    public double getSlopeStdErr()
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getMeanSquareError()>();

        $d1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d2);

        return $d3;
    }

    public double getSlopeConfidenceInterval() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlopeConfidenceInterval(double)>(0.05);

        return $d0;
    }

    public double getSlopeConfidenceInterval(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.math.distribution.TDistribution $r7;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 1.0;

        if $b0 >= 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 > 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $r7 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution>;

        $d2 = d0 / 2.0;

        $d3 = 1.0 - $d2;

        $d4 = interfaceinvoke $r7.<org.apache.commons.math.distribution.TDistribution: double inverseCumulativeProbability(double)>($d3);

        $d5 = $d1 * $d4;

        return $d5;
    }

    public double getSignificance() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        org.apache.commons.math.distribution.TDistribution $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        $r1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlope()>();

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $d2 = virtualinvoke r0.<org.apache.commons.math.stat.regression.SimpleRegression: double getSlopeStdErr()>();

        $d3 = $d1 / $d2;

        $d4 = interfaceinvoke $r1.<org.apache.commons.math.distribution.TDistribution: double cumulativeProbability(double)>($d3);

        $d5 = 1.0 - $d4;

        $d6 = 2.0 * $d5;

        return $d6;
    }

    private double getIntercept(double)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $d3 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumY>;

        $d1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumX>;

        $d2 = d0 * $d1;

        $d5 = $d3 - $d2;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $d4 = (double) $l0;

        $d6 = $d5 / $d4;

        return $d6;
    }

    private double getRegressionSumSquares(double)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        d0 := @parameter0: double;

        $d2 = d0 * d0;

        $d1 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: double sumXX>;

        $d3 = $d2 * $d1;

        return $d3;
    }

    public void setDistribution(org.apache.commons.math.distribution.TDistribution)
    {
        org.apache.commons.math.stat.regression.SimpleRegression r0;
        org.apache.commons.math.distribution.TDistribution r1, $r2;
        long $l0, $l2, $l3;
        byte $b1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.SimpleRegression;

        r1 := @parameter0: org.apache.commons.math.distribution.TDistribution;

        r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution> = r1;

        $l0 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $b1 = $l0 cmp 2L;

        if $b1 <= 0 goto label1;

        $r2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: org.apache.commons.math.distribution.TDistribution distribution>;

        $l2 = r0.<org.apache.commons.math.stat.regression.SimpleRegression: long n>;

        $l3 = $l2 - 2L;

        $d0 = (double) $l3;

        interfaceinvoke $r2.<org.apache.commons.math.distribution.TDistribution: void setDegreesOfFreedom(double)>($d0);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.stat.regression.SimpleRegression: long serialVersionUID> = -3004689053607543335L;

        return;
    }
}
