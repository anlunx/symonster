public class org.apache.commons.math3.distribution.ConstantRealDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    private static final long serialVersionUID;
    private final double value;

    public void <init>(double)
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(null);

        r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value> = d0;

        return;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        $b0 = d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $d2 = 1.0;

        goto label2;

     label1:
        $d2 = 0.0;

     label2:
        return $d2;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $d2 = 0.0;

        goto label2;

     label1:
        $d2 = 1.0;

     label2:
        return $d2;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double d0, $d1;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $d1 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        return $d1;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        return 0.0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        return $d0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        return $d0;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        return 1;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        return 1;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ConstantRealDistribution: double value>;

        return $d0;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.ConstantRealDistribution r0;
        long l0;

        r0 := @this: org.apache.commons.math3.distribution.ConstantRealDistribution;

        l0 := @parameter0: long;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.ConstantRealDistribution: long serialVersionUID> = -4157745166772046273L;

        return;
    }
}
