public class com.opengamma.analytics.math.surface.NodalObjectsSurface extends com.opengamma.analytics.math.surface.ObjectsSurface
{

    public static com.opengamma.analytics.math.surface.NodalObjectsSurface 'from'(java.lang.Object[], java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2;
        com.opengamma.analytics.math.surface.NodalObjectsSurface $r3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        $r3 = new com.opengamma.analytics.math.surface.NodalObjectsSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.NodalObjectsSurface: void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.NodalObjectsSurface 'from'(java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0, r1, r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.NodalObjectsSurface $r4;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.NodalObjectsSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.NodalObjectsSurface: void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    public void <init>(java.lang.Object[], java.lang.Object[], java.lang.Object[])
    {
        com.opengamma.analytics.math.surface.NodalObjectsSurface r0;
        java.lang.Object[] r1, r2, r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalObjectsSurface;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<com.opengamma.analytics.math.surface.ObjectsSurface: void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[])>(r1, r2, r3);

        return;
    }

    public void <init>(java.lang.Object[], java.lang.Object[], java.lang.Object[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalObjectsSurface r0;
        java.lang.Object[] r1, r2, r3;
        java.lang.String r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalObjectsSurface;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.Object[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.ObjectsSurface: void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public java.lang.Object getZValue(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.surface.NodalObjectsSurface r0;
        java.lang.Object r1, r2, $r15, $r16, $r18;
        java.lang.Object[] r3, r4, $r17;
        int i0, i1;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.surface.NodalObjectsSurface;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y");

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalObjectsSurface: java.lang.Object[] getXData()>();

        r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalObjectsSurface: java.lang.Object[] getYData()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r15 = r3[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label2;

        $r16 = r4[i1];

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label2;

        $r17 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalObjectsSurface: java.lang.Object[] getZData()>();

        $r18 = $r17[i1];

        return $r18;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y-z data in surface for (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;
    }

    public java.lang.Object getZValue(com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.math.surface.NodalObjectsSurface r0;
        com.opengamma.util.tuple.Pair r1;
        java.lang.Object $r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.surface.NodalObjectsSurface;

        r1 := @parameter0: com.opengamma.util.tuple.Pair;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x-y pair");

        $r3 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r4 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalObjectsSurface: java.lang.Object getZValue(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r5;
    }
}
