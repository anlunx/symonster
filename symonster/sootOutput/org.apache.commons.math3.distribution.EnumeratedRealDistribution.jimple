public class org.apache.commons.math3.distribution.EnumeratedRealDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    private static final long serialVersionUID;
    protected final org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution;

    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        double[] r1, r2;
        org.apache.commons.math3.random.Well19937c $r3;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r3.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double[],double[])>($r3, r1, r2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double[] r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.ArrayList $r5;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r6;
        org.apache.commons.math3.util.Pair $r7;
        double $d0, $d1;
        java.lang.Double $r8, $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r3;

        $i4 = lengthof r2;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r10;

     label1:
        $r5 = new java.util.ArrayList;

        $i2 = lengthof r2;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i2);

        i6 = 0;

     label2:
        $i3 = lengthof r2;

        if i6 >= $i3 goto label3;

        $r7 = new org.apache.commons.math3.util.Pair;

        $d0 = r2[i6];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d1 = r3[i6];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r7.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r8, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r6 = new org.apache.commons.math3.distribution.EnumeratedDistribution;

        specialinvoke $r6.<org.apache.commons.math3.distribution.EnumeratedDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>(r1, $r5);

        r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution> = $r6;

        return;
    }

    public double probability(double)
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.lang.Double $r2;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: double probability(java.lang.Object)>($r2);

        return $d1;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: double probability(double)>(d0);

        return $d1;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        double d0, $d1, $d2, d3;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Double $r7, $r9;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d0 := @parameter0: double;

        d3 = 0.0;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r5;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b0 = $d1 cmpg d0;

        if $b0 > 0 goto label2;

        $r8 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        d3 = d3 + $d2;

     label2:
        goto label1;

     label3:
        return d3;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        double d0, $d1, $d2, d3, d4;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4, $r11, $r13, $r15;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r7;
        java.util.List $r8;
        java.lang.Object $r9, $r10, $r12, $r14;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        d3 = 0.0;

        d4 = virtualinvoke r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: double getSupportLowerBound()>();

        $r7 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r9;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r11 = (java.lang.Double) $r10;

        $d1 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $b2 = $d1 cmpl 0.0;

        if $b2 != 0 goto label4;

        goto label3;

     label4:
        $r12 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r13 = (java.lang.Double) $r12;

        $d2 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        d3 = d3 + $d2;

        $r14 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r15 = (java.lang.Double) $r14;

        d4 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $b3 = d3 cmpl d0;

        if $b3 < 0 goto label5;

        goto label6;

     label5:
        goto label3;

     label6:
        return d4;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Double $r7, $r9;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d3 = 0.0;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r5;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r9 = (java.lang.Double) $r8;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        goto label1;

     label2:
        return d3;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r3;
        java.util.List $r4;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11;
        java.lang.Object $r5, $r6, $r8, $r10, $r12, $r14;
        java.lang.Double $r7, $r9, $r11, $r13, $r15;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d10 = 0.0;

        d11 = 0.0;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r5;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r7 = (java.lang.Double) $r6;

        $d2 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r9 = (java.lang.Double) $r8;

        $d3 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 * $d3;

        d10 = d10 + $d4;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r11 = (java.lang.Double) $r10;

        $d5 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r13 = (java.lang.Double) $r12;

        $d6 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 * $d6;

        $r14 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r15 = (java.lang.Double) $r14;

        $d8 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d9 = $d7 * $d8;

        d11 = d11 + $d9;

        goto label1;

     label2:
        $d0 = d10 * d10;

        $d1 = d11 - $d0;

        return $d1;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8, $r10;
        java.lang.Double $r7, $r9, $r11;
        double $d0, $d1, d2;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d2 = #Infinity;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r5;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpg d2;

        if $b0 >= 0 goto label2;

        $r8 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r11 = (java.lang.Double) $r10;

        d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

     label2:
        goto label1;

     label3:
        return d2;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        java.util.Iterator r1;
        org.apache.commons.math3.util.Pair r2;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8, $r10;
        java.lang.Double $r7, $r9, $r11;
        double $d0, $d1, d2;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        d2 = #-Infinity;

        $r3 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.util.List getPmf()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.util.Pair) $r5;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r7 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl d2;

        if $b0 <= 0 goto label2;

        $r8 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r11 = (java.lang.Double) $r10;

        d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

     label2:
        goto label1;

     label3:
        return d2;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        return 1;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        return 1;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.EnumeratedRealDistribution r0;
        org.apache.commons.math3.distribution.EnumeratedDistribution $r1;
        java.lang.Object $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.EnumeratedRealDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.EnumeratedRealDistribution: org.apache.commons.math3.distribution.EnumeratedDistribution innerDistribution>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.EnumeratedDistribution: java.lang.Object sample()>();

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.EnumeratedRealDistribution: long serialVersionUID> = 20130308L;

        return;
    }
}
