class org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final int variables;
    private final int order;
    private final double[] data;

    public void <init>(int, int, double[])
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject r0;
        int i0, i1;
        double[] r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: int variables> = i0;

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: int order> = i1;

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: double[] data> = r1;

        return;
    }

    private java.lang.Object readResolve()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r1;
        double[] $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: int variables>;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: int order>;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: double[] data>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i1, $i0, $r2);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: long serialVersionUID> = 20120730L;

        return;
    }
}
