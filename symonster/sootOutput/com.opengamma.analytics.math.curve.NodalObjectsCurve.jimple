public class com.opengamma.analytics.math.curve.NodalObjectsCurve extends com.opengamma.analytics.math.curve.ObjectsCurve
{

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.lang.Comparable[], java.lang.Object[])
    {
        java.lang.Comparable[] r0;
        java.lang.Object[] r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.lang.Comparable[];

        r1 := @parameter1: java.lang.Object[];

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean)>(r0, r1, 0);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.Map)
    {
        java.util.Map r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r1.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Map,boolean)>(r0, 0);

        return $r1;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.Set)
    {
        java.util.Set r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r1.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Set,boolean)>(r0, 0);

        return $r1;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.List,java.util.List,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.lang.Comparable[], java.lang.Object[], java.lang.String)
    {
        java.lang.Comparable[] r0;
        java.lang.Object[] r1;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r3;

        r0 := @parameter0: java.lang.Comparable[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r3.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean,java.lang.String)>(r0, r1, 0, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Map,boolean,java.lang.String)>(r0, 0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Set,boolean,java.lang.String)>(r0, 0, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve 'from'(java.util.List, java.util.List, java.lang.String)
    {
        java.util.List r0, r1;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r3.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.List,java.util.List,boolean,java.lang.String)>(r0, r1, 0, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.lang.Comparable[], java.lang.Object[])
    {
        java.lang.Comparable[] r0;
        java.lang.Object[] r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.lang.Comparable[];

        r1 := @parameter1: java.lang.Object[];

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean)>(r0, r1, 1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.Map)
    {
        java.util.Map r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r1.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Map,boolean)>(r0, 1);

        return $r1;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.Set)
    {
        java.util.Set r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r1.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Set,boolean)>(r0, 1);

        return $r1;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.List,java.util.List,boolean)>(r0, r1, 1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.lang.Comparable[], java.lang.Object[], java.lang.String)
    {
        java.lang.Comparable[] r0;
        java.lang.Object[] r1;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r3;

        r0 := @parameter0: java.lang.Comparable[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r3.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean,java.lang.String)>(r0, r1, 1, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Map,boolean,java.lang.String)>(r0, 1, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.Set,boolean,java.lang.String)>(r0, 1, r1);

        return $r2;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve fromSorted(java.util.List, java.util.List, java.lang.String)
    {
        java.util.List r0, r1;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.NodalObjectsCurve $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        $r3 = new com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke $r3.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void <init>(java.util.List,java.util.List,boolean,java.lang.String)>(r0, r1, 1, r2);

        return $r3;
    }

    protected void <init>()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>()>();

        return;
    }

    public void <init>(java.lang.Comparable[], java.lang.Object[], boolean)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.lang.Comparable[] r1;
        java.lang.Object[] r2;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.lang.Comparable[];

        r2 := @parameter1: java.lang.Object[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean)>(r1, r2, z0);

        return;
    }

    public void <init>(java.util.Map, boolean)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.Map r1;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.Map,boolean)>(r1, z0);

        return;
    }

    public void <init>(java.util.Set, boolean)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.Set r1;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.Set,boolean)>(r1, z0);

        return;
    }

    public void <init>(java.util.List, java.util.List, boolean)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.List r1, r2;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.List,java.util.List,boolean)>(r1, r2, z0);

        return;
    }

    public void <init>(java.lang.Comparable[], java.lang.Object[], boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.lang.Comparable[] r1;
        java.lang.Object[] r2;
        boolean z0;
        java.lang.String r3;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.lang.Comparable[];

        r2 := @parameter1: java.lang.Object[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.lang.Comparable[],java.lang.Object[],boolean,java.lang.String)>(r1, r2, z0, r3);

        return;
    }

    public void <init>(java.util.Map, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.Map r1;
        boolean z0;
        java.lang.String r2;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.Map,boolean,java.lang.String)>(r1, z0, r2);

        return;
    }

    public void <init>(java.util.Set, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.Set r1;
        boolean z0;
        java.lang.String r2;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.Set,boolean,java.lang.String)>(r1, z0, r2);

        return;
    }

    public void <init>(java.util.List, java.util.List, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.util.List r1, r2;
        boolean z0;
        java.lang.String r3;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void <init>(java.util.List,java.util.List,boolean,java.lang.String)>(r1, r2, z0, r3);

        return;
    }

    public java.lang.Object getYValue(java.lang.Comparable)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.lang.Comparable r1;
        int i0;
        java.lang.Comparable[] $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.lang.Comparable;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x");

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: java.lang.Comparable[] getXData()>();

        i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r3, r1);

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Curve does not contain data for x point ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: java.lang.Object[] getYData()>();

        $r5 = $r4[i0];

        return $r5;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta meta()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r0;

        $r0 = <com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta INSTANCE>;

        return $r0;
    }

    public static com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta metaNodalObjectsCurve(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = <com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta INSTANCE>;

        return $r2;
    }

    public com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = <com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta INSTANCE>;

        return $r1;
    }

    public com.opengamma.analytics.math.curve.NodalObjectsCurve clone()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0, $r2;
        org.joda.beans.Bean $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = staticinvoke <org.joda.beans.JodaBeanUtils: org.joda.beans.Bean cloneAlways(org.joda.beans.Bean)>(r0);

        $r2 = (com.opengamma.analytics.math.curve.NodalObjectsCurve) $r1;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $z0 = specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        int $i1, $i2;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $i1 = specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: int hashCode()>();

        $i2 = 7 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(32);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodalObjectsCurve{");

        i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: void toString(java.lang.StringBuilder)>($r2);

        $i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i1 <= i0 goto label1;

        $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 2;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>($i3);

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void toString(java.lang.StringBuilder)
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        java.lang.StringBuilder r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<com.opengamma.analytics.math.curve.ObjectsCurve: void toString(java.lang.StringBuilder)>(r1);

        return;
    }

    public volatile com.opengamma.analytics.math.curve.ObjectsCurve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta metaBean()>();

        return $r1;
    }

    public volatile com.opengamma.analytics.math.curve.Curve clone()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0, $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: com.opengamma.analytics.math.curve.NodalObjectsCurve clone()>();

        return $r1;
    }

    public volatile com.opengamma.analytics.math.curve.Curve$Meta metaBean()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta metaBean()>();

        return $r1;
    }

    public volatile org.joda.beans.MetaBean metaBean()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0;
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r1;
        org.joda.beans.MetaBean r2;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta metaBean()>();

        r2 = (org.joda.beans.MetaBean) $r1;

        return r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve r0, $r1;

        r0 := @this: com.opengamma.analytics.math.curve.NodalObjectsCurve;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.curve.NodalObjectsCurve: com.opengamma.analytics.math.curve.NodalObjectsCurve clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta $r0;
        org.joda.beans.MetaBean r1;

        $r0 = <com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta: com.opengamma.analytics.math.curve.NodalObjectsCurve$Meta INSTANCE>;

        r1 = (org.joda.beans.MetaBean) $r0;

        staticinvoke <org.joda.beans.JodaBeanUtils: void registerMetaBean(org.joda.beans.MetaBean)>(r1);

        return;
    }
}
