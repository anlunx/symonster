class org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper extends java.lang.Object implements org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper
{
    private final org.apache.commons.math3.analysis.UnivariateFunction boundingFunction;
    private final org.apache.commons.math3.analysis.UnivariateFunction unboundingFunction;

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper r0;
        double d0, d1;
        org.apache.commons.math3.analysis.function.Sigmoid $r1;
        org.apache.commons.math3.analysis.function.Logit $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.analysis.function.Sigmoid;

        specialinvoke $r1.<org.apache.commons.math3.analysis.function.Sigmoid: void <init>(double,double)>(d0, d1);

        r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: org.apache.commons.math3.analysis.UnivariateFunction boundingFunction> = $r1;

        $r2 = new org.apache.commons.math3.analysis.function.Logit;

        specialinvoke $r2.<org.apache.commons.math3.analysis.function.Logit: void <init>(double,double)>(d0, d1);

        r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: org.apache.commons.math3.analysis.UnivariateFunction unboundingFunction> = $r2;

        return;
    }

    public double unboundedToBounded(double)
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper r0;
        double d0, $d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: org.apache.commons.math3.analysis.UnivariateFunction boundingFunction>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        return $d1;
    }

    public double boundedToUnbounded(double)
    {
        org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper r0;
        double d0, $d1;
        org.apache.commons.math3.analysis.UnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: org.apache.commons.math3.analysis.UnivariateFunction unboundingFunction>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        return $d1;
    }
}
