public class org.apache.commons.math3.ode.sampling.StepNormalizer extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepHandler
{
    private double h;
    private final org.apache.commons.math3.ode.sampling.FixedStepHandler handler;
    private double firstTime;
    private double lastTime;
    private double[] lastState;
    private double[] lastDerivatives;
    private boolean forward;
    private final org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds;
    private final org.apache.commons.math3.ode.sampling.StepNormalizerMode mode;

    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        $r2 = <org.apache.commons.math3.ode.sampling.StepNormalizerBounds: org.apache.commons.math3.ode.sampling.StepNormalizerBounds FIRST>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>(d0, r1, $r3, $r2);

        return;
    }

    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerMode;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerBounds: org.apache.commons.math3.ode.sampling.StepNormalizerBounds FIRST>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>(d0, r1, r2, $r3);

        return;
    }

    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerBounds)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0;
        org.apache.commons.math3.ode.sampling.FixedStepHandler r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerBounds;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void <init>(double,org.apache.commons.math3.ode.sampling.FixedStepHandler,org.apache.commons.math3.ode.sampling.StepNormalizerMode,org.apache.commons.math3.ode.sampling.StepNormalizerBounds)>(d0, r1, $r3, r2);

        return;
    }

    public void <init>(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0, $d1;
        org.apache.commons.math3.ode.sampling.FixedStepHandler r1;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode r2;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.FixedStepHandler;

        r2 := @parameter2: org.apache.commons.math3.ode.sampling.StepNormalizerMode;

        r3 := @parameter3: org.apache.commons.math3.ode.sampling.StepNormalizerBounds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h> = $d1;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler> = r1;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode> = r2;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds> = r3;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = 1;

        return;
    }

    public void init(double, double[], double)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0, d1;
        double[] r1;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r2;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = 1;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler>;

        interfaceinvoke $r2.<org.apache.commons.math3.ode.sampling.FixedStepHandler: void init(double,double[],double)>(d0, r1, d1);

        return;
    }

    public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7, $z8;
        double[] $r2, $r7, $r9, $r10, $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22;
        org.apache.commons.math3.ode.sampling.StepNormalizerMode $r3, $r4, $r14, $r15;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r5;
        byte $b0, $b1;
        java.lang.Object $r8, $r11;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        if $r2 != null goto label03;

        $d14 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime> = $d14;

        $d15 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = $d15;

        $d16 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d16);

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (double[]) $r8;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState> = $r9;

        $r10 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Object clone()>();

        $r12 = (double[]) $r11;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives> = $r12;

        $d17 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d18 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $b1 = $d17 cmpl $d18;

        if $b1 < 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward> = $z5;

        $z4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward>;

        if $z4 != 0 goto label03;

        $d19 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d20 = neg $d19;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h> = $d20;

     label03:
        $r14 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode>;

        $r15 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode INCREMENT>;

        if $r14 != $r15 goto label04;

        $d13 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d12 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d21 = $d13 + $d12;

        goto label05;

     label04:
        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d2);

        $d5 = $d3 + 1.0;

        $d4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        $d21 = $d5 * $d4;

     label05:
        d22 = $d21;

        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerMode mode>;

        $r3 = <org.apache.commons.math3.ode.sampling.StepNormalizerMode: org.apache.commons.math3.ode.sampling.StepNormalizerMode MULTIPLES>;

        if $r4 != $r3 goto label06;

        $d10 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d21, $d10, 1);

        if $z3 == 0 goto label06;

        $d11 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        d22 = $d21 + $d11;

     label06:
        z6 = specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean isNextInStep(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>(d22, r1);

     label07:
        if z6 == 0 goto label08;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>(0);

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator,double)>(r1, d22);

        $d9 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double h>;

        d22 = d22 + $d9;

        z6 = specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean isNextInStep(double,org.apache.commons.math3.ode.sampling.StepInterpolator)>(d22, r1);

        goto label07;

     label08:
        if z0 == 0 goto label13;

        $r5 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds>;

        $z2 = virtualinvoke $r5.<org.apache.commons.math3.ode.sampling.StepNormalizerBounds: boolean lastIncluded()>();

        if $z2 == 0 goto label09;

        $d7 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $d8 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = $d7 cmpl $d8;

        if $b0 == 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        z1 = $z7;

        if $z7 != 0 goto label11;

        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>($z8);

        if z1 == 0 goto label13;

        $d6 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator,double)>(r1, $d6);

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: void doNormalizedStep(boolean)>(1);

     label13:
        return;
    }

    private boolean isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        double d0, $d1, $d2;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: boolean forward>;

        if $z0 == 0 goto label2;

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b1 = d0 cmpg $d2;

        if $b1 > 0 goto label1;

        $z1 = 1;

        goto label4;

     label1:
        $z1 = 0;

        goto label4;

     label2:
        $d1 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b0 = d0 cmpl $d1;

        if $b0 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private void doNormalizedStep(boolean)
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        boolean z0, $z1;
        org.apache.commons.math3.ode.sampling.StepNormalizerBounds $r1;
        double[] $r2, $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.ode.sampling.FixedStepHandler $r4;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds>;

        $z1 = virtualinvoke $r1.<org.apache.commons.math3.ode.sampling.StepNormalizerBounds: boolean firstIncluded()>();

        if $z1 != 0 goto label1;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double firstTime>;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $b0 = $d2 cmpl $d1;

        if $b0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: org.apache.commons.math3.ode.sampling.FixedStepHandler handler>;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        interfaceinvoke $r4.<org.apache.commons.math3.ode.sampling.FixedStepHandler: void handleStep(double,double[],double[],boolean)>($d0, $r3, $r2, z0);

        return;
    }

    private void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator, double) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.StepNormalizer r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        double d0, $d1;
        double[] $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.ode.sampling.StepNormalizer;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        d0 := @parameter1: double;

        r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime> = d0;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d1);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r4 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastState>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r4, 0, $i0);

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r7 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $r6 = r0.<org.apache.commons.math3.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r7, 0, $i1);

        return;
    }
}
