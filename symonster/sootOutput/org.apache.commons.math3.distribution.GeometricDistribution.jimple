public class org.apache.commons.math3.distribution.GeometricDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    private static final long serialVersionUID;
    private final double probabilityOfSuccess;

    public void <init>(double)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double d0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.GeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>($r1, d0);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE_LEFT>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess> = d0;

        return;
    }

    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        return $d0;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int i0;
        double d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d3 = 0.0;

        goto label2;

     label1:
        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, i0);

        d3 = $d2 * d0;

     label2:
        return d3;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int i0;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d6 = #-Infinity;

        goto label2;

     label1:
        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d2 = (double) i0;

        $d1 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d1);

        $d4 = $d2 * $d3;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        d6 = $d4 + $d5;

     label2:
        return d6;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        int i0, $i1;
        double d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d3 = 0.0;

        goto label2;

     label1:
        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - d0;

        $i1 = i0 + 1;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i1);

        d3 = 1.0 - $d2;

     label2:
        return d3;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d1 = 1.0 - d0;

        $d2 = $d1 / d0;

        return $d2;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        d0 = r0.<org.apache.commons.math3.distribution.GeometricDistribution: double probabilityOfSuccess>;

        $d2 = 1.0 - d0;

        $d1 = d0 * d0;

        $d3 = $d2 / $d1;

        return $d3;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 2147483647;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.GeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.GeometricDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.GeometricDistribution: long serialVersionUID> = 20130507L;

        return;
    }
}
