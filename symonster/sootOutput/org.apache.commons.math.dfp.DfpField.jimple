public class org.apache.commons.math.dfp.DfpField extends java.lang.Object implements org.apache.commons.math.Field
{
    public static final int FLAG_INVALID;
    public static final int FLAG_DIV_ZERO;
    public static final int FLAG_OVERFLOW;
    public static final int FLAG_UNDERFLOW;
    public static final int FLAG_INEXACT;
    private static java.lang.String sqr2String;
    private static java.lang.String sqr2ReciprocalString;
    private static java.lang.String sqr3String;
    private static java.lang.String sqr3ReciprocalString;
    private static java.lang.String piString;
    private static java.lang.String eString;
    private static java.lang.String ln2String;
    private static java.lang.String ln5String;
    private static java.lang.String ln10String;
    private final int radixDigits;
    private final org.apache.commons.math.dfp.Dfp zero;
    private final org.apache.commons.math.dfp.Dfp one;
    private final org.apache.commons.math.dfp.Dfp two;
    private final org.apache.commons.math.dfp.Dfp sqr2;
    private final org.apache.commons.math.dfp.Dfp[] sqr2Split;
    private final org.apache.commons.math.dfp.Dfp sqr2Reciprocal;
    private final org.apache.commons.math.dfp.Dfp sqr3;
    private final org.apache.commons.math.dfp.Dfp sqr3Reciprocal;
    private final org.apache.commons.math.dfp.Dfp pi;
    private final org.apache.commons.math.dfp.Dfp[] piSplit;
    private final org.apache.commons.math.dfp.Dfp e;
    private final org.apache.commons.math.dfp.Dfp[] eSplit;
    private final org.apache.commons.math.dfp.Dfp ln2;
    private final org.apache.commons.math.dfp.Dfp[] ln2Split;
    private final org.apache.commons.math.dfp.Dfp ln5;
    private final org.apache.commons.math.dfp.Dfp[] ln5Split;
    private final org.apache.commons.math.dfp.Dfp ln10;
    private org.apache.commons.math.dfp.DfpField$RoundingMode rMode;
    private int ieeeFlags;

    public void <init>(int)
    {
        org.apache.commons.math.dfp.DfpField r0;
        int i0;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.dfp.DfpField: void <init>(int,boolean)>(i0, 1);

        return;
    }

    private void <init>(int, boolean)
    {
        org.apache.commons.math.dfp.DfpField r0;
        int i0, $i1, $i2, $i3;
        boolean z0;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r3;
        org.apache.commons.math.dfp.Dfp $r4, $r5, $r6, $r7, $r11, $r13, $r15, $r17, $r21, $r25, $r29, $r33;
        java.lang.String $r8, $r9, $r12, $r14, $r16, $r18, $r19, $r22, $r23, $r26, $r27, $r30, $r31, $r34;
        org.apache.commons.math.dfp.Dfp[] $r10, $r20, $r24, $r28, $r32;
        java.lang.Throwable $r36;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 13 goto label01;

        $i2 = 4;

        goto label02;

     label01:
        $i1 = i0 + 3;

        $i2 = $i1 / 4;

     label02:
        r0.<org.apache.commons.math.dfp.DfpField: int radixDigits> = $i2;

        $r3 = <org.apache.commons.math.dfp.DfpField$RoundingMode: org.apache.commons.math.dfp.DfpField$RoundingMode ROUND_HALF_EVEN>;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.DfpField$RoundingMode rMode> = $r3;

        r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags> = 0;

        $r4 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r4.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>(r0, 0);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp zero> = $r4;

        $r5 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>(r0, 1);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp one> = $r5;

        $r6 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r6.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>(r0, 2);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp two> = $r6;

        if z0 == 0 goto label10;

        entermonitor class "org/apache/commons/math/dfp/DfpField";

     label03:
        if i0 >= 67 goto label04;

        $i3 = 200;

        goto label05;

     label04:
        $i3 = 3 * i0;

     label05:
        staticinvoke <org.apache.commons.math.dfp.DfpField: void computeStringConstants(int)>($i3);

        $r7 = new org.apache.commons.math.dfp.Dfp;

        $r8 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2String>;

        specialinvoke $r7.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r8);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2> = $r7;

        $r9 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2String>;

        $r10 = specialinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] split(java.lang.String)>($r9);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] sqr2Split> = $r10;

        $r11 = new org.apache.commons.math.dfp.Dfp;

        $r12 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2ReciprocalString>;

        specialinvoke $r11.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r12);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2Reciprocal> = $r11;

        $r13 = new org.apache.commons.math.dfp.Dfp;

        $r14 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr3String>;

        specialinvoke $r13.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r14);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3> = $r13;

        $r15 = new org.apache.commons.math.dfp.Dfp;

        $r16 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr3ReciprocalString>;

        specialinvoke $r15.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r16);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3Reciprocal> = $r15;

        $r17 = new org.apache.commons.math.dfp.Dfp;

        $r18 = <org.apache.commons.math.dfp.DfpField: java.lang.String piString>;

        specialinvoke $r17.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r18);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp pi> = $r17;

        $r19 = <org.apache.commons.math.dfp.DfpField: java.lang.String piString>;

        $r20 = specialinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] split(java.lang.String)>($r19);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] piSplit> = $r20;

        $r21 = new org.apache.commons.math.dfp.Dfp;

        $r22 = <org.apache.commons.math.dfp.DfpField: java.lang.String eString>;

        specialinvoke $r21.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r22);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp e> = $r21;

        $r23 = <org.apache.commons.math.dfp.DfpField: java.lang.String eString>;

        $r24 = specialinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] split(java.lang.String)>($r23);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] eSplit> = $r24;

        $r25 = new org.apache.commons.math.dfp.Dfp;

        $r26 = <org.apache.commons.math.dfp.DfpField: java.lang.String ln2String>;

        specialinvoke $r25.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r26);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln2> = $r25;

        $r27 = <org.apache.commons.math.dfp.DfpField: java.lang.String ln2String>;

        $r28 = specialinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] split(java.lang.String)>($r27);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln2Split> = $r28;

        $r29 = new org.apache.commons.math.dfp.Dfp;

        $r30 = <org.apache.commons.math.dfp.DfpField: java.lang.String ln5String>;

        specialinvoke $r29.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r30);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln5> = $r29;

        $r31 = <org.apache.commons.math.dfp.DfpField: java.lang.String ln5String>;

        $r32 = specialinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] split(java.lang.String)>($r31);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln5Split> = $r32;

        $r33 = new org.apache.commons.math.dfp.Dfp;

        $r34 = <org.apache.commons.math.dfp.DfpField: java.lang.String ln10String>;

        specialinvoke $r33.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r34);

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln10> = $r33;

        exitmonitor class "org/apache/commons/math/dfp/DfpField";

     label06:
        goto label09;

     label07:
        $r36 := @caughtexception;

        exitmonitor class "org/apache/commons/math/dfp/DfpField";

     label08:
        throw $r36;

     label09:
        goto label11;

     label10:
        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] sqr2Split> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2Reciprocal> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3Reciprocal> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp pi> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] piSplit> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp e> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] eSplit> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln2> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln2Split> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln5> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln5Split> = null;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln10> = null;

     label11:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public int getRadixDigits()
    {
        org.apache.commons.math.dfp.DfpField r0;
        int $i0;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $i0 = r0.<org.apache.commons.math.dfp.DfpField: int radixDigits>;

        return $i0;
    }

    public void setRoundingMode(org.apache.commons.math.dfp.DfpField$RoundingMode)
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.DfpField$RoundingMode r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        r1 := @parameter0: org.apache.commons.math.dfp.DfpField$RoundingMode;

        r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.DfpField$RoundingMode rMode> = r1;

        return;
    }

    public org.apache.commons.math.dfp.DfpField$RoundingMode getRoundingMode()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.DfpField$RoundingMode $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.DfpField$RoundingMode rMode>;

        return $r1;
    }

    public int getIEEEFlags()
    {
        org.apache.commons.math.dfp.DfpField r0;
        int $i0;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $i0 = r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags>;

        return $i0;
    }

    public void clearIEEEFlags()
    {
        org.apache.commons.math.dfp.DfpField r0;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags> = 0;

        return;
    }

    public void setIEEEFlags(int)
    {
        org.apache.commons.math.dfp.DfpField r0;
        int i0, $i1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter0: int;

        $i1 = i0 & 31;

        r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags> = $i1;

        return;
    }

    public void setIEEEFlagsBits(int)
    {
        org.apache.commons.math.dfp.DfpField r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags>;

        $i1 = i0 & 31;

        $i3 = $i2 | $i1;

        r0.<org.apache.commons.math.dfp.DfpField: int ieeeFlags> = $i3;

        return;
    }

    public org.apache.commons.math.dfp.Dfp newDfp()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField)>(r0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(byte)
    {
        org.apache.commons.math.dfp.DfpField r0;
        byte b0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        b0 := @parameter0: byte;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,byte)>(r0, b0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(int)
    {
        org.apache.commons.math.dfp.DfpField r0;
        int i0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>(r0, i0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(long)
    {
        org.apache.commons.math.dfp.DfpField r0;
        long l0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        l0 := @parameter0: long;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,long)>(r0, l0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(double)
    {
        org.apache.commons.math.dfp.DfpField r0;
        double d0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,double)>(r0, d0);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp r1, $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        r1 := @parameter0: org.apache.commons.math.dfp.Dfp;

        $r2 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r2.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(java.lang.String)
    {
        org.apache.commons.math.dfp.DfpField r0;
        java.lang.String r1;
        org.apache.commons.math.dfp.Dfp $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r2.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math.dfp.Dfp newDfp(byte, byte)
    {
        org.apache.commons.math.dfp.DfpField r0;
        byte b0, b1;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $r1 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,byte,byte)>(r0, b0, b1);

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getZero()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp zero>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getOne()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp one>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getTwo()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp two>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getSqr2()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp[] getSqr2Split()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] sqr2Split>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.dfp.Dfp[]) $r2;

        return $r3;
    }

    public org.apache.commons.math.dfp.Dfp getSqr2Reciprocal()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr2Reciprocal>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getSqr3()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getSqr3Reciprocal()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp sqr3Reciprocal>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp getPi()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp pi>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp[] getPiSplit()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] piSplit>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.dfp.Dfp[]) $r2;

        return $r3;
    }

    public org.apache.commons.math.dfp.Dfp getE()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp e>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp[] getESplit()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] eSplit>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.dfp.Dfp[]) $r2;

        return $r3;
    }

    public org.apache.commons.math.dfp.Dfp getLn2()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln2>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp[] getLn2Split()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln2Split>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.dfp.Dfp[]) $r2;

        return $r3;
    }

    public org.apache.commons.math.dfp.Dfp getLn5()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln5>;

        return $r1;
    }

    public org.apache.commons.math.dfp.Dfp[] getLn5Split()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp[] ln5Split>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.dfp.Dfp[]) $r2;

        return $r3;
    }

    public org.apache.commons.math.dfp.Dfp getLn10()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp ln10>;

        return $r1;
    }

    private org.apache.commons.math.dfp.Dfp[] split(java.lang.String)
    {
        org.apache.commons.math.dfp.DfpField r0;
        java.lang.String r1, $r5, $r7;
        org.apache.commons.math.dfp.Dfp[] r2;
        char[] r3;
        int $i0, $i1, $i7, $i8, $i9, $i12, $i13, i15, i16, i17, i19, $i20;
        org.apache.commons.math.dfp.Dfp $r4, $r6;
        char $c2, $c3, $c4, $c5, $c6, $c10, $c11, $c14, $c18;
        boolean z0;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        r1 := @parameter0: java.lang.String;

        r2 = newarray (org.apache.commons.math.dfp.Dfp)[2];

        z0 = 1;

        i15 = 0;

        i16 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r3 = newarray (char)[$i0];

        i17 = 0;

     label1:
        $i1 = lengthof r3;

        if i17 >= $i1 goto label6;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i17);

        r3[i17] = $c5;

        $c6 = r3[i17];

        if $c6 < 49 goto label2;

        $c14 = r3[i17];

        if $c14 > 57 goto label2;

        z0 = 0;

     label2:
        $c18 = r3[i17];

        if $c18 != 46 goto label3;

        $i12 = 400 - i16;

        $i13 = $i12 % 4;

        i16 = i16 + $i13;

        z0 = 0;

     label3:
        $i7 = r0.<org.apache.commons.math.dfp.DfpField: int radixDigits>;

        $i8 = $i7 / 2;

        $i9 = $i8 * 4;

        if i16 != $i9 goto label4;

        i15 = i17;

        goto label6;

     label4:
        $c10 = r3[i17];

        if $c10 < 48 goto label5;

        $c11 = r3[i17];

        if $c11 > 57 goto label5;

        if z0 != 0 goto label5;

        i16 = i16 + 1;

     label5:
        i17 = i17 + 1;

        goto label1;

     label6:
        $r4 = new org.apache.commons.math.dfp.Dfp;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i15);

        specialinvoke $r4.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r5);

        r2[0] = $r4;

        i19 = 0;

     label7:
        $i20 = lengthof r3;

        if i19 >= $i20 goto label9;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i19);

        r3[i19] = $c2;

        $c3 = r3[i19];

        if $c3 < 48 goto label8;

        $c4 = r3[i19];

        if $c4 > 57 goto label8;

        if i19 >= i15 goto label8;

        r3[i19] = 48;

     label8:
        i19 = i19 + 1;

        goto label7;

     label9:
        $r6 = new org.apache.commons.math.dfp.Dfp;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r3);

        specialinvoke $r6.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,java.lang.String)>(r0, $r7);

        r2[1] = $r6;

        return r2;
    }

    private static void computeStringConstants(int)
    {
        int i0, $i1, $i2;
        org.apache.commons.math.dfp.Dfp r4, r5, $r8, $r9, $r10, $r12, $r15, $r17, $r19, $r21, $r23, $r24, $r26, $r27;
        java.lang.String $r6, $r11, $r13, $r14, $r16, $r18, $r20, $r22, $r25, $r28, $r29;
        org.apache.commons.math.dfp.DfpField $r7;

        i0 := @parameter0: int;

        $r6 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2String>;

        if $r6 == null goto label1;

        $r29 = <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2String>;

        $i1 = virtualinvoke $r29.<java.lang.String: int length()>();

        $i2 = i0 - 3;

        if $i1 >= $i2 goto label2;

     label1:
        $r7 = new org.apache.commons.math.dfp.DfpField;

        specialinvoke $r7.<org.apache.commons.math.dfp.DfpField: void <init>(int,boolean)>(i0, 0);

        $r8 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r8.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r7, 1);

        $r9 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r9.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r7, 2);

        $r10 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r10.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r7, 3);

        r4 = virtualinvoke $r9.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp sqrt()>();

        $r11 = virtualinvoke r4.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2String> = $r11;

        $r12 = virtualinvoke $r8.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r4);

        $r13 = virtualinvoke $r12.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String sqr2ReciprocalString> = $r13;

        r5 = virtualinvoke $r10.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp sqrt()>();

        $r14 = virtualinvoke r5.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String sqr3String> = $r14;

        $r15 = virtualinvoke $r8.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r5);

        $r16 = virtualinvoke $r15.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String sqr3ReciprocalString> = $r16;

        $r17 = staticinvoke <org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp computePi(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>($r8, $r9, $r10);

        $r18 = virtualinvoke $r17.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String piString> = $r18;

        $r19 = staticinvoke <org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp computeExp(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>($r8, $r8);

        $r20 = virtualinvoke $r19.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String eString> = $r20;

        $r21 = staticinvoke <org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp computeLn(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>($r9, $r8, $r9);

        $r22 = virtualinvoke $r21.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String ln2String> = $r22;

        $r23 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r23.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r7, 5);

        $r24 = staticinvoke <org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp computeLn(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>($r23, $r8, $r9);

        $r25 = virtualinvoke $r24.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String ln5String> = $r25;

        $r26 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r26.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r7, 10);

        $r27 = staticinvoke <org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp computeLn(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)>($r26, $r8, $r9);

        $r28 = virtualinvoke $r27.<org.apache.commons.math.dfp.Dfp: java.lang.String toString()>();

        <org.apache.commons.math.dfp.DfpField: java.lang.String ln10String> = $r28;

     label2:
        return;
    }

    private static org.apache.commons.math.dfp.Dfp computePi(org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r25, r26, r27;
        boolean $z0;
        int i0;

        r0 := @parameter0: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter1: org.apache.commons.math.dfp.Dfp;

        r2 := @parameter2: org.apache.commons.math.dfp.Dfp;

        r3 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp sqrt()>();

        r25 = virtualinvoke r3.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>(r0);

        r4 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r1);

        r26 = r1;

        $r11 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r3);

        $r12 = virtualinvoke r2.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r11);

        r27 = virtualinvoke r1.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r12);

        i0 = 1;

     label1:
        if i0 >= 20 goto label3;

        r5 = r25;

        r6 = virtualinvoke r25.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r25);

        $r14 = virtualinvoke r6.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r6);

        r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r14);

        $r15 = virtualinvoke r7.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp sqrt()>();

        r8 = virtualinvoke $r15.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp sqrt()>();

        $r16 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>(r8);

        $r17 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r8);

        r25 = virtualinvoke $r16.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>($r17);

        r26 = virtualinvoke r26.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r4);

        r9 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r25);

        r10 = virtualinvoke r9.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r9);

        $r18 = virtualinvoke r10.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r10);

        $r19 = virtualinvoke r27.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r18);

        $r20 = virtualinvoke r26.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r25);

        $r21 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r25);

        $r22 = virtualinvoke r25.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r25);

        $r23 = virtualinvoke $r21.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r22);

        $r24 = virtualinvoke $r20.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>($r23);

        r27 = virtualinvoke $r19.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp subtract(org.apache.commons.math.dfp.Dfp)>($r24);

        $z0 = virtualinvoke r25.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r13 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r27);

        return $r13;
    }

    public static org.apache.commons.math.dfp.Dfp computeExp(org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, r9, r10, r11, r12, r13;
        boolean $z0;
        int i0;

        r0 := @parameter0: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter1: org.apache.commons.math.dfp.Dfp;

        $r2 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r2.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        r9 = $r2;

        $r3 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        r10 = $r3;

        $r4 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r4.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        r11 = $r4;

        $r5 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        r12 = $r5;

        $r6 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r6.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r1);

        r13 = $r6;

        i0 = 0;

     label1:
        if i0 >= 10000 goto label3;

        r13 = virtualinvoke r13.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r0);

        $r7 = virtualinvoke r13.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>(r11);

        r9 = virtualinvoke r9.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r7);

        r12 = virtualinvoke r12.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r1);

        r11 = virtualinvoke r11.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r12);

        $z0 = virtualinvoke r9.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r8 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r8.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r9);

        r10 = $r8;

        i0 = i0 + 1;

        goto label1;

     label3:
        return r9;
    }

    public static org.apache.commons.math.dfp.Dfp computeLn(org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp, org.apache.commons.math.dfp.Dfp)
    {
        org.apache.commons.math.dfp.Dfp r0, r1, r2, r3, r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, r14, r15, r16, r17;
        org.apache.commons.math.dfp.DfpField $r6;
        boolean $z0;
        int i0, i1;

        r0 := @parameter0: org.apache.commons.math.dfp.Dfp;

        r1 := @parameter1: org.apache.commons.math.dfp.Dfp;

        r2 := @parameter2: org.apache.commons.math.dfp.Dfp;

        i0 = 1;

        $r5 = new org.apache.commons.math.dfp.Dfp;

        $r6 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.DfpField getField()>();

        specialinvoke $r5.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.DfpField,int)>($r6, -1);

        $r7 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>($r5);

        $r8 = virtualinvoke r0.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r1);

        r3 = virtualinvoke $r7.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(org.apache.commons.math.dfp.Dfp)>($r8);

        $r9 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r9.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r3);

        r14 = $r9;

        $r10 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r10.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r3);

        r15 = $r10;

        $r11 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r11.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>($r9);

        r16 = $r11;

        i1 = 0;

     label1:
        if i1 >= 10000 goto label3;

        r17 = virtualinvoke r15.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r3);

        r15 = virtualinvoke r17.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r3);

        i0 = i0 + 2;

        r4 = virtualinvoke r15.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp divide(int)>(i0);

        r14 = virtualinvoke r14.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp add(org.apache.commons.math.dfp.Dfp)>(r4);

        $z0 = virtualinvoke r14.<org.apache.commons.math.dfp.Dfp: boolean equals(java.lang.Object)>(r16);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r13 = new org.apache.commons.math.dfp.Dfp;

        specialinvoke $r13.<org.apache.commons.math.dfp.Dfp: void <init>(org.apache.commons.math.dfp.Dfp)>(r14);

        r16 = $r13;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r12 = virtualinvoke r14.<org.apache.commons.math.dfp.Dfp: org.apache.commons.math.dfp.Dfp multiply(org.apache.commons.math.dfp.Dfp)>(r2);

        return $r12;
    }

    public volatile java.lang.Object getOne()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getOne()>();

        return $r1;
    }

    public volatile java.lang.Object getZero()
    {
        org.apache.commons.math.dfp.DfpField r0;
        org.apache.commons.math.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math.dfp.DfpField;

        $r1 = virtualinvoke r0.<org.apache.commons.math.dfp.DfpField: org.apache.commons.math.dfp.Dfp getZero()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.dfp.DfpField: int FLAG_INEXACT> = 16;

        <org.apache.commons.math.dfp.DfpField: int FLAG_UNDERFLOW> = 8;

        <org.apache.commons.math.dfp.DfpField: int FLAG_OVERFLOW> = 4;

        <org.apache.commons.math.dfp.DfpField: int FLAG_DIV_ZERO> = 2;

        <org.apache.commons.math.dfp.DfpField: int FLAG_INVALID> = 1;

        return;
    }
}
