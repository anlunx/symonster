public class com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, r4, r5, r6, r7, $r8;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        return r5;

     label1:
        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        $d0 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 / $d1;

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d7 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 - $d7;

        $d9 = $d5 / $d8;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d9);

        $d11 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d12 = $d10 * $d11;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        return $r8;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, r4, r5, r6, r7;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        return 0.0;

     label1:
        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        $d0 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 / $d1;

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d7 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 - $d7;

        $d9 = $d5 / $d8;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d9);

        $d11 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d12 = $d10 * $d11;

        $d13 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        $d14 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d15 = $d13 / $d14;

        $d16 = staticinvoke <java.lang.Math: double log(double)>($d15);

        $d17 = $d12 * $d16;

        $d18 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d19 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d20 = $d18 - $d19;

        $d21 = $d17 / $d20;

        return $d21;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        return $r3;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        double[] $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D: double[] getFiniteDifferenceSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.LogLinearInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
