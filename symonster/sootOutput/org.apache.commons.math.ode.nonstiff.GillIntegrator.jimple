public class org.apache.commons.math.ode.nonstiff.GillIntegrator extends org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator
{
    private static final double[] STATIC_C;
    private static final double[][] STATIC_A;
    private static final double[] STATIC_B;

    public void <init>(double)
    {
        org.apache.commons.math.ode.nonstiff.GillIntegrator r0;
        double d0;
        org.apache.commons.math.ode.nonstiff.GillStepInterpolator $r1;
        double[] $r2, $r4;
        double[][] $r3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.GillIntegrator;

        d0 := @parameter0: double;

        $r2 = <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[] STATIC_C>;

        $r3 = <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[][] STATIC_A>;

        $r4 = <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[] STATIC_B>;

        $r1 = new org.apache.commons.math.ode.nonstiff.GillStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math.ode.nonstiff.GillStepInterpolator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator: void <init>(java.lang.String,double[],double[][],double[],org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator,double)>("Gill", $r2, $r3, $r4, $r1, d0);

        return;
    }

    static void <clinit>()
    {
        double[] $r0, $r2, $r3, $r4, $r5;
        double[][] $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        $r0 = newarray (double)[3];

        $r0[0] = 0.5;

        $r0[1] = 0.5;

        $r0[2] = 1.0;

        <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[] STATIC_C> = $r0;

        $r1 = newarray (double[])[3];

        $r2 = newarray (double)[1];

        $r2[0] = 0.5;

        $r1[0] = $r2;

        $r3 = newarray (double)[2];

        $d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d1 = $d0 - 1.0;

        $d2 = $d1 / 2.0;

        $r3[0] = $d2;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d4 = 2.0 - $d3;

        $d5 = $d4 / 2.0;

        $r3[1] = $d5;

        $r1[1] = $r3;

        $r4 = newarray (double)[3];

        $r4[0] = 0.0;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d7 = neg $d6;

        $d8 = $d7 / 2.0;

        $r4[1] = $d8;

        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d10 = 2.0 + $d9;

        $d11 = $d10 / 2.0;

        $r4[2] = $d11;

        $r1[2] = $r4;

        <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[][] STATIC_A> = $r1;

        $r5 = newarray (double)[4];

        $r5[0] = 0.16666666666666666;

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d13 = 2.0 - $d12;

        $d14 = $d13 / 6.0;

        $r5[1] = $d14;

        $d15 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(2.0);

        $d16 = 2.0 + $d15;

        $d17 = $d16 / 6.0;

        $r5[2] = $d17;

        $r5[3] = 0.16666666666666666;

        <org.apache.commons.math.ode.nonstiff.GillIntegrator: double[] STATIC_B> = $r5;

        return;
    }
}
