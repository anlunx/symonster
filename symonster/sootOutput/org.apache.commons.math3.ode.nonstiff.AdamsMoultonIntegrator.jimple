public class org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator extends org.apache.commons.math3.ode.nonstiff.AdamsIntegrator
{
    private static final java.lang.String METHOD_NAME;

    public void <init>(int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        int i0, $i1;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Moulton", i0, $i1, d0, d1, d2, d3);

        return;
    }

    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        int i0, $i1;
        double d0, d1;
        double[] r1, r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 := @parameter3: double[];

        r2 := @parameter4: double[];

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Moulton", i0, $i1, d0, d1, r1, r2);

        return;
    }

    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1, r23;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, d31, d32, d33, d34, d35, d36, d37, d38, $d39;
        boolean z0, $z3, $z4, $z5, $z6, $z7, $z8;
        double[] r2, r3, r4, r5, r6, $r14, $r16, $r17, $r19, $r21, r26;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i12, i15, i16, i17, i18;
        org.apache.commons.math3.ode.EquationsMapper r8, $r11, r24;
        byte $b1, $b8, $b9, $b10, $b11, $b13, $b14;
        java.lang.Object $r9;
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator $r10;
        org.apache.commons.math3.ode.EquationsMapper[] $r12, r25;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r13, $r15, $r18, r22;
        org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector $r20;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>(r1, d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>(r1);

        $d2 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b1 = d0 cmpl $d2;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        r2 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r9;

        $i2 = lengthof r3;

        r4 = newarray (double)[$i2];

        $i3 = lengthof r3;

        r5 = newarray (double)[$i3];

        $i4 = lengthof r3;

        r6 = newarray (double)[$i4];

        r22 = null;

        $r10 = new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        $r11 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r12 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>(r3, $z5, $r11, $r12);

        $d3 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void initIntegration(double,double[],double)>($d3, r2, d0);

        $d4 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>($d4, r3, d0);

        $d6 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d5 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r14 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r13 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d6, $d5, $r14, $r13);

        $d7 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d7);

        d31 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d31);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep> = 0;

     label03:
        d32 = 10.0;

     label04:
        $b14 = d32 cmpl 1.0;

        if $b14 < 0 goto label10;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize> = d31;

        $d25 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d24 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d33 = $d25 + $d24;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>(d33);

        r23 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        r24 = virtualinvoke r23.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r17 = virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r24.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r17, r5);

        i15 = 0;

        r25 = virtualinvoke r23.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i0 = lengthof r25;

        i16 = 0;

     label05:
        if i16 >= i0 goto label06;

        r8 = r25[i16];

        $r21 = virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedSecondaryState(int)>(i15);

        virtualinvoke r8.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r21, r5);

        i15 = i15 + 1;

        i16 = i16 + 1;

        goto label05;

     label06:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>(d33, r5, r4);

        i17 = 0;

     label07:
        $i12 = lengthof r2;

        if i17 >= $i12 goto label08;

        $d29 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d28 = r4[i17];

        $d30 = $d29 * $d28;

        r6[i17] = $d30;

        i17 = i17 + 1;

        goto label07;

     label08:
        $r18 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        r22 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r18);

        $r19 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r19, r6, r22);

        $r20 = new org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        specialinvoke $r20.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector: void <init>(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator,double[],double[],double[])>(r0, r3, r6, r5);

        d32 = virtualinvoke r22.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)>($r20);

        $b13 = d32 cmpl 1.0;

        if $b13 < 0 goto label09;

        d34 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>(d32);

        $d26 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d27 = $d26 * d34;

        d31 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>($d27, z0, 0);

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d31);

     label09:
        goto label04;

     label10:
        $d9 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d35 = $d9 + $d8;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void computeDerivatives(double,double[],double[])>(d35, r5, r4);

        $i5 = lengthof r2;

        r26 = newarray (double)[$i5];

        i18 = 0;

     label11:
        $i6 = lengthof r2;

        if i18 >= $i6 goto label12;

        $d22 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $d21 = r4[i18];

        $d23 = $d22 * $d21;

        r26[i18] = $d23;

        i18 = i18 + 1;

        goto label11;

     label12:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(r6, r26, r22);

        $i7 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r3, 0, $i7);

        $d10 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d35, $d10, r26, r22);

        $d11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d11);

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void shift()>();

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d35);

        $d12 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r10, r3, r4, d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart> = $d12;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled> = r26;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = r22;

        $z3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z3 != 0 goto label23;

        $d14 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d14);

        $z4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean resetOccurred>;

        if $z4 == 0 goto label13;

        $d18 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void start(double,double[],double)>($d18, r3, d0);

        $d20 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        $d19 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        $r16 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double[] scaled>;

        $r15 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d20, $d19, $r16, $r15);

     label13:
        d36 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double computeStepGrowShrinkFactor(double)>(d32);

        $d15 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepSize>;

        d37 = $d15 * d36;

        $d16 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d38 = $d16 + d37;

        if z0 == 0 goto label15;

        $b11 = d38 cmpl d0;

        if $b11 < 0 goto label14;

        $z6 = 1;

        goto label17;

     label14:
        $z6 = 0;

        goto label17;

     label15:
        $b8 = d38 cmpg d0;

        if $b8 > 0 goto label16;

        $z6 = 1;

        goto label17;

     label16:
        $z6 = 0;

     label17:
        d31 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double filterStep(double,boolean,boolean)>(d37, z0, $z6);

        $d39 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d1 = $d39 + d31;

        if z0 == 0 goto label19;

        $b10 = d1 cmpl d0;

        if $b10 < 0 goto label18;

        $z7 = 1;

        goto label21;

     label18:
        $z7 = 0;

        goto label21;

     label19:
        $b9 = d1 cmpg d0;

        if $b9 > 0 goto label20;

        $z7 = 1;

        goto label21;

     label20:
        $z7 = 0;

     label21:
        if $z7 == 0 goto label22;

        $d17 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        d31 = d0 - $d17;

     label22:
        virtualinvoke $r10.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d31);

     label23:
        $z8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: boolean isLastStep>;

        if $z8 == 0 goto label03;

        $d13 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: double stepStart>;

        virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d13);

        virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>(r3);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: void resetInternalState()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator: java.lang.String METHOD_NAME> = "Adams-Moulton";

        return;
    }
}
