public class org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver implements org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver
{
    private static final double DEFAULT_ABSOLUTE_ACCURACY;
    private static final int DEFAULT_MAXIMAL_ORDER;
    private static final int MAXIMAL_AGING;
    private static final double REDUCTION_FACTOR;
    private final int maximalOrder;
    private org.apache.commons.math3.analysis.solvers.AllowedSolution allowed;

    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: void <init>(double,int)>(1.0E-6, 5);

        return;
    }

    public void <init>(double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double d0;
        int i0;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>(d0);

        if i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = i0;

        $r1 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r1;

        return;
    }

    public void <init>(double, double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double d0, d1;
        int i0;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>(d0, d1);

        if i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = i0;

        $r1 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r1;

        return;
    }

    public void <init>(double, double, double, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double d0, d1, d2;
        int i0;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double,double)>(d0, d1, d2);

        if i0 >= 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder> = i0;

        $r1 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution ANY_SIDE>;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = $r1;

        return;
    }

    public int getMaximalOrder()
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $i0 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        return $i0;
    }

    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double[] r1, r2, r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, d44, d45, d46, d47, d48, d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, d60, d61, d62, d63, d64, d65, $d66;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i35, i36, i37, i38, $i39, $i41, $i42, $i43, $i44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b4, $b5, $b11, $b12, $b13, $b22, $b33, $b34, $b40, $b45;
        org.apache.commons.math3.exception.NoBracketingException $r4;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r5;
        int[] $r6;
        org.apache.commons.math3.exception.MathInternalError $r7;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        $i0 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        $i1 = $i0 + 1;

        r1 = newarray (double)[$i1];

        $i2 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int maximalOrder>;

        $i3 = $i2 + 1;

        r2 = newarray (double)[$i3];

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getMin()>();

        r1[0] = $d2;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getStartValue()>();

        r1[1] = $d3;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getMax()>();

        r1[2] = $d4;

        $d7 = r1[0];

        $d6 = r1[1];

        $d5 = r1[2];

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: void verifySequence(double,double,double)>($d7, $d6, $d5);

        $d8 = r1[1];

        $d9 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d8);

        r2[1] = $d9;

        $d10 = r2[1];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d10, 0.0, 1);

        if $z0 == 0 goto label01;

        $d43 = r1[1];

        return $d43;

     label01:
        $d11 = r1[0];

        $d12 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d11);

        r2[0] = $d12;

        $d13 = r2[0];

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d13, 0.0, 1);

        if $z1 == 0 goto label02;

        $d42 = r1[0];

        return $d42;

     label02:
        $d15 = r2[0];

        $d14 = r2[1];

        $d16 = $d15 * $d14;

        $b4 = $d16 cmpg 0.0;

        if $b4 >= 0 goto label03;

        i29 = 2;

        i30 = 1;

        goto label06;

     label03:
        $d17 = r1[2];

        $d18 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>($d17);

        r2[2] = $d18;

        $d19 = r2[2];

        $z2 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>($d19, 0.0, 1);

        if $z2 == 0 goto label04;

        $d41 = r1[2];

        return $d41;

     label04:
        $d21 = r2[1];

        $d20 = r2[2];

        $d22 = $d21 * $d20;

        $b5 = $d22 cmpg 0.0;

        if $b5 >= 0 goto label05;

        i29 = 3;

        i30 = 2;

        goto label06;

     label05:
        $r4 = new org.apache.commons.math3.exception.NoBracketingException;

        $d26 = r1[0];

        $d25 = r1[2];

        $d24 = r2[0];

        $d23 = r2[2];

        specialinvoke $r4.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d26, $d25, $d24, $d23);

        throw $r4;

     label06:
        $i6 = lengthof r1;

        r3 = newarray (double)[$i6];

        $i7 = i30 - 1;

        d44 = r1[$i7];

        $i8 = i30 - 1;

        d45 = r2[$i8];

        d46 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d45);

        i31 = 0;

        d47 = r1[i30];

        d48 = r2[i30];

        d49 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d48);

        i32 = 0;

     label07:
        $d50 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getAbsoluteAccuracy()>();

        $d51 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getRelativeAccuracy()>();

        $d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d44);

        $d53 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d47);

        $d54 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d52, $d53);

        $d55 = $d51 * $d54;

        d0 = $d50 + $d55;

        $d56 = d47 - d44;

        $b33 = $d56 cmpg d0;

        if $b33 <= 0 goto label08;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d46, d49);

        $d28 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double getFunctionValueAccuracy()>();

        $b13 = $d27 cmpg $d28;

        if $b13 >= 0 goto label21;

     label08:
        $r6 = <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$AllowedSolution>;

        $r5 = r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed>;

        $i9 = virtualinvoke $r5.<org.apache.commons.math3.analysis.solvers.AllowedSolution: int ordinal()>();

        $i10 = $r6[$i9];

        tableswitch($i10)
        {
            case 1: goto label09;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label17;
            default: goto label20;
        };

     label09:
        $b34 = d46 cmpg d49;

        if $b34 >= 0 goto label10;

        $d57 = d44;

        goto label11;

     label10:
        $d57 = d47;

     label11:
        return $d57;

     label12:
        return d44;

     label13:
        return d47;

     label14:
        $b12 = d45 cmpg 0.0;

        if $b12 > 0 goto label15;

        $d58 = d44;

        goto label16;

     label15:
        $d58 = d47;

     label16:
        return $d58;

     label17:
        $b11 = d45 cmpg 0.0;

        if $b11 >= 0 goto label18;

        $d59 = d47;

        goto label19;

     label18:
        $d59 = d44;

     label19:
        return $d59;

     label20:
        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label21:
        if i31 < 2 goto label22;

        i35 = i31 - 2;

        $i26 = 1 << i35;

        $i27 = $i26 - 1;

        d60 = (double) $i27;

        $i28 = i35 + 1;

        d61 = (double) $i28;

        $d38 = d60 * d45;

        $d36 = d61 * 0.0625;

        $d37 = $d36 * d48;

        $d40 = $d38 - $d37;

        $d39 = d60 + d61;

        d62 = $d40 / $d39;

        goto label24;

     label22:
        if i32 < 2 goto label23;

        i36 = i32 - 2;

        $i23 = i36 + 1;

        d63 = (double) $i23;

        $i24 = 1 << i36;

        $i25 = $i24 - 1;

        d64 = (double) $i25;

        $d33 = d64 * d48;

        $d31 = d63 * 0.0625;

        $d32 = $d31 * d45;

        $d35 = $d33 - $d32;

        $d34 = d63 + d64;

        d62 = $d35 / $d34;

        goto label24;

     label23:
        d62 = 0.0;

     label24:
        i37 = 0;

        i38 = i29;

     label25:
        $i39 = i38 - i37;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i37, r3, i37, $i39);

        d65 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double guessX(double,double[],double[],int,int)>(d62, r3, r2, i37, i38);

        $b40 = d65 cmpl d44;

        if $b40 <= 0 goto label26;

        $b22 = d65 cmpg d47;

        if $b22 < 0 goto label29;

     label26:
        $i15 = i30 - i37;

        $i14 = i38 - i30;

        if $i15 < $i14 goto label27;

        i37 = i37 + 1;

        goto label28;

     label27:
        i38 = i38 + -1;

     label28:
        d65 = #NaN;

     label29:
        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d65);

        if $z5 == 0 goto label30;

        $i21 = i38 - i37;

        if $i21 > 1 goto label25;

     label30:
        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d65);

        if $z3 == 0 goto label31;

        $d29 = d47 - d44;

        $d30 = 0.5 * $d29;

        d65 = d44 + $d30;

        i37 = i30 - 1;

        i38 = i30;

     label31:
        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double computeObjectiveValue(double)>(d65);

        $z4 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d1, 0.0, 1);

        if $z4 == 0 goto label32;

        return d65;

     label32:
        if i29 <= 2 goto label33;

        $i20 = i38 - i37;

        if $i20 == i29 goto label33;

        i29 = i38 - i37;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i37, r1, 0, i29);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i37, r2, 0, i29);

        i30 = i30 - i37;

        goto label34;

     label33:
        $i16 = lengthof r1;

        if i29 != $i16 goto label34;

        i29 = i29 + -1;

        $i17 = lengthof r1;

        $i18 = $i17 + 1;

        $i19 = $i18 / 2;

        if i30 < $i19 goto label34;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 1, r1, 0, i29);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r2, 0, i29);

        i30 = i30 + -1;

     label34:
        $i41 = i30 + 1;

        $i42 = i29 - i30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i30, r1, $i41, $i42);

        r1[i30] = d65;

        $i43 = i30 + 1;

        $i44 = i29 - i30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i30, r2, $i43, $i44);

        r2[i30] = d1;

        i29 = i29 + 1;

        $d66 = d1 * d45;

        $b45 = $d66 cmpg 0.0;

        if $b45 > 0 goto label35;

        d47 = d65;

        d48 = d1;

        d49 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        i31 = i31 + 1;

        i32 = 0;

        goto label36;

     label35:
        d44 = d65;

        d45 = d1;

        d46 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        i31 = 0;

        i32 = i32 + 1;

        i30 = i30 + 1;

     label36:
        goto label07;
    }

    private double guessX(double, double[], double[], int, int)
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        double[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i7 = i0;

     label1:
        $i3 = i1 - 1;

        if i7 >= $i3 goto label4;

        $i4 = i7 + 1;

        i2 = $i4 - i0;

        i8 = i1 - 1;

     label2:
        if i8 <= i7 goto label3;

        $d6 = r1[i8];

        $i5 = i8 - 1;

        $d5 = r1[$i5];

        $d10 = $d6 - $d5;

        $d8 = r2[i8];

        $i6 = i8 - i2;

        $d7 = r2[$i6];

        $d9 = $d8 - $d7;

        $d11 = $d10 / $d9;

        r1[i8] = $d11;

        i8 = i8 + -1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        d12 = 0.0;

        i9 = i1 - 1;

     label5:
        if i9 < i0 goto label6;

        $d4 = r1[i9];

        $d1 = r2[i9];

        $d2 = d0 - $d1;

        $d3 = d12 * $d2;

        d12 = $d4 + $d3;

        i9 = i9 + -1;

        goto label5;

     label6:
        return d12;
    }

    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, $d2;
        org.apache.commons.math3.analysis.solvers.AllowedSolution r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r2 := @parameter4: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = r2;

        $d2 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>(i0, r1, d0, d1);

        return $d2;
    }

    public double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2, $d3;
        org.apache.commons.math3.analysis.solvers.AllowedSolution r2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r2 := @parameter5: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        r0.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: org.apache.commons.math3.analysis.solvers.AllowedSolution allowed> = r2;

        $d3 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i0, r1, d0, d1, d2);

        return $d3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double REDUCTION_FACTOR> = 0.0625;

        <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int MAXIMAL_AGING> = 2;

        <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: int DEFAULT_MAXIMAL_ORDER> = 5;

        <org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
