public class org.apache.commons.math3.geometry.partitioning.NodesSet extends java.lang.Object implements java.lang.Iterable
{
    private java.util.List list;

    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.NodesSet r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.List list> = $r1;

        return;
    }

    public void add(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.NodesSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r3;
        java.util.Iterator r2;
        java.util.List $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.NodesSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.List list>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r6;

        if r1 != r3 goto label2;

        return;

     label2:
        goto label1;

     label3:
        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.List list>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAll(java.lang.Iterable)
    {
        org.apache.commons.math3.geometry.partitioning.NodesSet r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.NodesSet;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r4;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.NodesSet: void add(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        goto label1;

     label2:
        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.geometry.partitioning.NodesSet r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.NodesSet;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.NodesSet: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
