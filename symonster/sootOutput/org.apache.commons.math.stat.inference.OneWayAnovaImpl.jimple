public class org.apache.commons.math.stat.inference.OneWayAnovaImpl extends java.lang.Object implements org.apache.commons.math.stat.inference.OneWayAnova
{

    public void <init>()
    {
        org.apache.commons.math.stat.inference.OneWayAnovaImpl r0;

        r0 := @this: org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double anovaFValue(java.util.Collection) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.OneWayAnovaImpl r0;
        java.util.Collection r1;
        org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats r2;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        r1 := @parameter0: java.util.Collection;

        r2 = specialinvoke r0.<org.apache.commons.math.stat.inference.OneWayAnovaImpl: org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats anovaStats(java.util.Collection)>(r1);

        $d0 = staticinvoke <org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats: double access$000(org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats)>(r2);

        return $d0;
    }

    public double anovaPValue(java.util.Collection) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.OneWayAnovaImpl r0;
        java.util.Collection r1;
        org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats r2;
        org.apache.commons.math.distribution.FDistributionImpl $r4;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        r1 := @parameter0: java.util.Collection;

        r2 = specialinvoke r0.<org.apache.commons.math.stat.inference.OneWayAnovaImpl: org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats anovaStats(java.util.Collection)>(r1);

        $r4 = new org.apache.commons.math.distribution.FDistributionImpl;

        $i0 = staticinvoke <org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats: int access$100(org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats)>(r2);

        $d0 = (double) $i0;

        $i1 = staticinvoke <org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats: int access$200(org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats)>(r2);

        $d1 = (double) $i1;

        specialinvoke $r4.<org.apache.commons.math.distribution.FDistributionImpl: void <init>(double,double)>($d0, $d1);

        $d2 = staticinvoke <org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats: double access$000(org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats)>(r2);

        $d3 = interfaceinvoke $r4.<org.apache.commons.math.distribution.FDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean anovaTest(java.util.Collection, double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.OneWayAnovaImpl r0;
        java.util.Collection r1;
        double d0, $d1;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r6;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        $r2[2] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r7;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.inference.OneWayAnovaImpl: double anovaPValue(java.util.Collection)>(r1);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats anovaStats(java.util.Collection) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.OneWayAnovaImpl r0;
        java.util.Collection r1;
        double[] r4, r22;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, d20, d21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        boolean $z0, $z1;
        org.apache.commons.math.stat.descriptive.summary.Sum $r6, $r10;
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares $r7, $r11;
        org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats $r8;
        java.lang.Object $r9, $r12;
        java.lang.Object[] $r13, $r17;
        org.apache.commons.math.exception.util.LocalizedFormats $r14, $r18;
        java.lang.Integer $r15, $r19;
        java.lang.IllegalArgumentException $r16, $r20;
        java.util.Iterator r21, r23;

        r0 := @this: org.apache.commons.math.stat.inference.OneWayAnovaImpl;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= 2 goto label1;

        $r18 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TWO_OR_MORE_CATEGORIES_REQUIRED>;

        $r17 = newarray (java.lang.Object)[1];

        $i6 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r17[0] = $r19;

        $r20 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r18, $r17);

        throw $r20;

     label1:
        r21 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (double[]) $r12;

        $i4 = lengthof r22;

        if $i4 > 1 goto label3;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED>;

        $r13 = newarray (java.lang.Object)[1];

        $i5 = lengthof r22;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r13[0] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r16;

     label3:
        goto label2;

     label4:
        i7 = 0;

        d17 = 0.0;

        $r6 = new org.apache.commons.math.stat.descriptive.summary.Sum;

        specialinvoke $r6.<org.apache.commons.math.stat.descriptive.summary.Sum: void <init>()>();

        $r7 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r7.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void <init>()>();

        i8 = 0;

        r23 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r9 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r4 = (double[]) $r9;

        $r10 = new org.apache.commons.math.stat.descriptive.summary.Sum;

        specialinvoke $r10.<org.apache.commons.math.stat.descriptive.summary.Sum: void <init>()>();

        $r11 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r11.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void <init>()>();

        i9 = 0;

        i10 = 0;

     label6:
        $i2 = lengthof r4;

        if i10 >= $i2 goto label7;

        d0 = r4[i10];

        i9 = i9 + 1;

        virtualinvoke $r10.<org.apache.commons.math.stat.descriptive.summary.Sum: void increment(double)>(d0);

        virtualinvoke $r11.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void increment(double)>(d0);

        i8 = i8 + 1;

        virtualinvoke $r6.<org.apache.commons.math.stat.descriptive.summary.Sum: void increment(double)>(d0);

        virtualinvoke $r7.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void increment(double)>(d0);

        i10 = i10 + 1;

        goto label6;

     label7:
        $i3 = i9 - 1;

        i7 = i7 + $i3;

        $d11 = virtualinvoke $r11.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double getResult()>();

        $d12 = virtualinvoke $r10.<org.apache.commons.math.stat.descriptive.summary.Sum: double getResult()>();

        $d13 = virtualinvoke $r10.<org.apache.commons.math.stat.descriptive.summary.Sum: double getResult()>();

        $d15 = $d12 * $d13;

        $d14 = (double) i9;

        $d16 = $d15 / $d14;

        d18 = $d11 - $d16;

        d17 = d17 + d18;

        goto label5;

     label8:
        $d3 = virtualinvoke $r7.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double getResult()>();

        $d4 = virtualinvoke $r6.<org.apache.commons.math.stat.descriptive.summary.Sum: double getResult()>();

        $d5 = virtualinvoke $r6.<org.apache.commons.math.stat.descriptive.summary.Sum: double getResult()>();

        $d7 = $d4 * $d5;

        $d6 = (double) i8;

        $d8 = $d7 / $d6;

        d19 = $d3 - $d8;

        d20 = d19 - d17;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        i11 = $i1 - 1;

        $d9 = (double) i11;

        d21 = d20 / $d9;

        $d10 = (double) i7;

        d1 = d17 / $d10;

        d2 = d21 / d1;

        $r8 = new org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats;

        specialinvoke $r8.<org.apache.commons.math.stat.inference.OneWayAnovaImpl$AnovaStats: void <init>(int,int,double,org.apache.commons.math.stat.inference.OneWayAnovaImpl$1)>(i11, i7, d2, null);

        return $r8;
    }
}
