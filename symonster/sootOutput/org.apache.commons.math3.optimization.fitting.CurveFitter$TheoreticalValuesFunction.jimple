class org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction
{
    private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f;
    final org.apache.commons.math3.optimization.fitting.CurveFitter this$0;

    public void <init>(org.apache.commons.math3.optimization.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction)
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.optimization.fitting.CurveFitter r1;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: org.apache.commons.math3.optimization.fitting.CurveFitter;

        r2 := @parameter1: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f> = r2;

        return;
    }

    public double[] value(double[])
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        double[] r1, r2;
        java.util.Iterator r3;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint r4;
        org.apache.commons.math3.optimization.fitting.CurveFitter $r5, $r7;
        java.util.List $r6, $r8;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r10;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: double[];

        $r5 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r6 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r5);

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        r2 = newarray (double)[$i0];

        i2 = 0;

        $r7 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r8 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r7);

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint) $r9;

        $i1 = i2;

        i2 = i2 + 1;

        $r10 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = interfaceinvoke $r10.<org.apache.commons.math3.analysis.ParametricUnivariateFunction: double value(double,double[])>($d0, r1);

        r2[$i1] = $d1;

        goto label1;

     label2:
        return r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])
    {
        org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r1, r14;
        double[] r2;
        java.util.Iterator r3;
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        org.apache.commons.math3.optimization.fitting.CurveFitter $r5, $r7;
        java.util.List $r6, $r8;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r10, $r12, $r13, r15;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r11;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $i0 = lengthof r1;

        r2 = newarray (double)[$i0];

        i7 = 0;

     label1:
        $i1 = lengthof r1;

        if i7 >= $i1 goto label2;

        $r13 = r1[i7];

        $d2 = virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r2[i7] = $d2;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r6 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r5);

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        r14 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i2];

        i8 = 0;

        $r7 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.optimization.fitting.CurveFitter this$0>;

        $r8 = staticinvoke <org.apache.commons.math3.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter)>($r7);

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.optimization.fitting.WeightedObservedPoint) $r9;

        $r10 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i3 = lengthof r1;

        $r11 = r0.<org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = interfaceinvoke $r11.<org.apache.commons.math3.analysis.ParametricUnivariateFunction: double value(double,double[])>($d0, r2);

        specialinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i3, 1, $d1);

        r15 = $r10;

        i9 = 0;

     label4:
        $i4 = lengthof r1;

        if i9 >= $i4 goto label5;

        $r12 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i6 = lengthof r1;

        specialinvoke $r12.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>($i6, 1, i9, 0.0);

        r15 = virtualinvoke r15.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r12);

        i9 = i9 + 1;

        goto label4;

     label5:
        $i5 = i8;

        i8 = i8 + 1;

        r14[$i5] = r15;

        goto label3;

     label6:
        return r14;
    }
}
