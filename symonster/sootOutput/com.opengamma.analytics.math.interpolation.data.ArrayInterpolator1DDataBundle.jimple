public class com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle extends java.lang.Object implements com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle
{
    private final double[] _keys;
    private final double[] _values;
    private final int _n;

    public void <init>(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] r1, r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(double[], double[], boolean)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] r1, r2, $r5, $r6;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Keys must not be null.");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Values must not be null.");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "keys and values must be same length.");

        $i2 = lengthof r1;

        if $i2 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "Must have at least two data points.");

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, $i3);

        r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys> = $r5;

        $i4 = lengthof r2;

        $r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, $i4);

        r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values> = $r6;

        $i5 = lengthof r1;

        r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n> = $i5;

        if z0 != 0 goto label5;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void parallelBinarySort()>();

     label5:
        specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void checkSameKeys()>();

        return;
    }

    private void checkSameKeys()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        int $i0, $i1, $i5, i6;
        double[] $r1, $r2, $r4;
        double $d0, $d1, $d2;
        long $l2, $l3;
        byte $b4;
        java.lang.Object[] $r3;
        java.lang.Double $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        i6 = 1;

     label1:
        $i0 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        if i6 >= $i0 goto label4;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i1 = i6 - 1;

        $d0 = $r1[$i1];

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d1 = $r2[i6];

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i5 = i6 - 1;

        $d2 = $r4[$i5];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r3[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Equal nodes in interpolator {}", $r3);

        i6 = i6 + 1;

        goto label1;

     label4:
        return;
    }

    private void parallelBinarySort()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        int $i0, $i1;
        double[] $r1, $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $i0 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i1 = $i0 - 1;

        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void dualArrayQuickSort(double[],double[],int,int)>($r2, $r1, 0, $i1);

        return;
    }

    private static void dualArrayQuickSort(double[], double[], int, int)
    {
        double[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 <= i0 goto label1;

        $i4 = i0 + i1;

        i2 = $i4 >> 1;

        i3 = staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int partition(double[],double[],int,int,int)>(r0, r1, i0, i1, i2);

        $i5 = i3 - 1;

        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void dualArrayQuickSort(double[],double[],int,int)>(r0, r1, i0, $i5);

        $i6 = i3 + 1;

        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void dualArrayQuickSort(double[],double[],int,int)>(r0, r1, $i6, i1);

     label1:
        return;
    }

    private static int partition(double[], double[], int, int, int)
    {
        double[] r0, r1;
        int i0, i1, i2, i4, i5;
        double d0, $d1;
        byte $b3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        d0 = r0[i2];

        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void swap(double[],double[],int,int)>(r0, r1, i2, i1);

        i4 = i0;

        i5 = i0;

     label1:
        if i5 >= i1 goto label3;

        $d1 = r0[i5];

        $b3 = $d1 cmpg d0;

        if $b3 > 0 goto label2;

        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void swap(double[],double[],int,int)>(r0, r1, i5, i4);

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        staticinvoke <com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void swap(double[],double[],int,int)>(r0, r1, i4, i1);

        return i4;
    }

    private static void swap(double[], double[], int, int)
    {
        double[] r0, r1;
        int i0, i1;
        double $d0, $d1, d2, d3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        d2 = r0[i0];

        $d0 = r0[i1];

        r0[i0] = $d0;

        r0[i1] = d2;

        d3 = r1[i0];

        $d1 = r1[i1];

        r1[i0] = $d1;

        r1[i1] = d3;

        return;
    }

    public boolean containsKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1;
        double[] $r2;
        double $d0;
        int $i0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r2, $d0);

        if $i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Double firstKey()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1;
        double $d0;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = $r1[0];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public java.lang.Double firstValue()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1;
        double $d0;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $d0 = $r1[0];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public java.lang.Double get(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1, $r4;
        int i0;
        double[] $r2, $r3;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        i0 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r2, $d0);

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $d1 = $r3[i0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1, $r4, $r6, $r8, $r10, $r13, $r15;
        int i0, $i1, $i2, $i3, $i4;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues $r2, $r11;
        double[] $r3, $r5, $r7, $r9, $r12, $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r1);

        $i1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r11 = new com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues;

        $r12 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d4 = $r12[i0];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r14 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $d5 = $r14[i0];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        specialinvoke $r11.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: void <init>(int,java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(i0, $r13, $r15, null, null);

        return $r11;

     label1:
        $r2 = new com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues;

        $r3 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = $r3[i0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r5 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $d1 = $r5[i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r7 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i3 = i0 + 1;

        $d2 = $r7[$i3];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r9 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $i4 = i0 + 1;

        $d3 = $r9[$i4];

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: void <init>(int,java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(i0, $r4, $r6, $r8, $r10);

        return $r2;
    }

    public double[] getKeys()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        return $r1;
    }

    public int getLowerBoundIndex(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        double[] $r2, $r3, $r4, $r5, $r11, $r12, $r20;
        byte $b0, $b3, $b4, $b8;
        int $i1, $i2, $i5, $i6, $i7, $i9, $i10, $i11, i12, i13;
        java.lang.IllegalArgumentException $r6, $r15;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13, $r16, $r17, $r18, $r19, $r21;
        java.lang.String $r14, $r22;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d1 = $r2[0];

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get lower bound index for ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": lowest x-value is ");

        $r20 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d8 = $r20[0];

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label1:
        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r3 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i2 = $i1 - 1;

        $d3 = $r3[$i2];

        $b3 = $d2 cmpl $d3;

        if $b3 <= 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get lower bound index for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": highest x-value is ");

        $r12 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $r11 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i10 = lengthof $r11;

        $i11 = $i10 - 1;

        $d7 = $r12[$i11];

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label2:
        $r4 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d4 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        i12 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r4, $d4);

        if i12 < 0 goto label3;

        return i12;

     label3:
        if i12 >= 0 goto label4;

        $i9 = i12 + 1;

        i13 = neg $i9;

        i12 = i13 + -1;

     label4:
        $d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b4 = $d5 cmpl -0.0;

        if $b4 != 0 goto label5;

        $i5 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i6 = $i5 - 1;

        if i12 >= $i6 goto label5;

        $r5 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i7 = i12 + 1;

        $d6 = $r5[$i7];

        $b8 = $d6 cmpl 0.0;

        if $b8 != 0 goto label5;

        i12 = i12 + 1;

     label5:
        return i12;
    }

    public java.lang.Double getLowerBoundKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1, $r3;
        int i0;
        double[] $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r1);

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = $r2[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public double[] getValues()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        return $r1;
    }

    public java.lang.Double higherKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1, $r3;
        int i0, $i1;
        double[] $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int getHigherIndex(java.lang.Double)>(r1);

        $i1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        if i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $d0 = $r2[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public java.lang.Double higherValue(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1, $r3;
        int i0, $i1;
        double[] $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int getHigherIndex(java.lang.Double)>(r1);

        $i1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        if i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $d0 = $r2[i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    protected int getHigherIndex(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        java.lang.Double r1;
        int $i0, $i1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Double;

        $i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r1);

        $i1 = $i0 + 1;

        return $i1;
    }

    public java.lang.Double lastKey()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        int $i0, $i1;
        double[] $r1;
        double $d0;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i0 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i1 = $i0 - 1;

        $d0 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public java.lang.Double lastValue()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        int $i0, $i1;
        double[] $r1;
        double $d0;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $i0 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        $i1 = $i0 - 1;

        $d0 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public int size()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        double[] $r1, $r2;
        int $i1, $i2, $i3, $i4, i6, i7;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i6 = $i1 + $i2;

        $i3 = 31 * i6;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r2);

        i7 = $i3 + $i4;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double[] $r5, $r6, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle) r1;

        $r6 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $r5 = r2.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _keys>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $r7 = r2.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void setYValueAtIndex(int, double)
    {
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle r0;
        int i0, $i2;
        double d0;
        double[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "index");

        $i2 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: int _n>;

        if i0 < $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Index was greater than number of data points");

        throw $r2;

     label1:
        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: double[] _values>;

        $r1[i0] = d0;

        return;
    }
}
