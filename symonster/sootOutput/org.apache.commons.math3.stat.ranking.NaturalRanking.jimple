public class org.apache.commons.math3.stat.ranking.NaturalRanking extends java.lang.Object implements org.apache.commons.math3.stat.ranking.RankingAlgorithm
{
    public static final org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY;
    public static final org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY;
    private final org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy;
    private final org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy;
    private final org.apache.commons.math3.random.RandomDataGenerator randomData;

    public void <init>()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r2;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = null;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy r1;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r2;
        org.apache.commons.math3.random.RandomDataGenerator $r3;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r2;

        $r3 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r3.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r3;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = r1;

        $r2 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r2;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = null;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.stat.ranking.TiesStrategy)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy r2;
        org.apache.commons.math3.random.RandomDataGenerator $r3;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        r2 := @parameter1: org.apache.commons.math3.stat.ranking.TiesStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = r1;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = r2;

        $r3 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r3.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r3;

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r2;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy RANDOM>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r2;

        $r3 = <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = $r3;

        $r4 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r4;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.ranking.NaNStrategy, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy r1;
        org.apache.commons.math3.random.RandomGenerator r2;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaNStrategy;

        r2 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy> = r1;

        $r3 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy RANDOM>;

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy> = $r3;

        $r4 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r2);

        r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData> = $r4;

        return;
    }

    public org.apache.commons.math3.stat.ranking.NaNStrategy getNanStrategy()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r1;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        return $r1;
    }

    public org.apache.commons.math3.stat.ranking.TiesStrategy getTiesStrategy()
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        $r1 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy>;

        return $r1;
    }

    public double[] rank(double[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, $i15, $i16, i17, $i18;
        org.apache.commons.math3.stat.ranking.NaNStrategy $r3, $r5, $r6;
        int[] $r4;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r7, $r8, $r9, $r11, $r13, $r17, $r20, $r23;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Integer $r10, $r14, $r24;
        java.util.ArrayList $r12, $r21, r22;
        org.apache.commons.math3.exception.NotANumberException $r15;
        org.apache.commons.math3.exception.MathInternalError $r16;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r18;
        java.util.List r19;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r18 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[$i0];

        i12 = 0;

     label01:
        $i1 = lengthof r1;

        if i12 >= $i1 goto label02;

        $r17 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $d3 = r1[i12];

        specialinvoke $r17.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d3, i12);

        r18[i12] = $r17;

        i12 = i12 + 1;

        goto label01;

     label02:
        r19 = null;

        $r4 = <org.apache.commons.math3.stat.ranking.NaturalRanking$1: int[] $SwitchMap$org$apache$commons$math3$stat$ranking$NaNStrategy>;

        $r3 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $i2 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaNStrategy: int ordinal()>();

        $i3 = $r4[$i2];

        tableswitch($i3)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            default: goto label08;
        };

     label03:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)>(r18, #Infinity);

        goto label09;

     label04:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[],double)>(r18, #-Infinity);

        goto label09;

     label05:
        r18 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r18);

        goto label09;

     label06:
        r19 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r18);

        goto label09;

     label07:
        r19 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r18);

        $i11 = interfaceinvoke r19.<java.util.List: int size()>();

        if $i11 <= 0 goto label09;

        $r15 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r15.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r15;

     label08:
        $r16 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r16.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r16;

     label09:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r18);

        $i13 = lengthof r18;

        r2 = newarray (double)[$i13];

        i14 = 1;

        $r20 = r18[0];

        $i15 = virtualinvoke $r20.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $d4 = (double) 1;

        r2[$i15] = $d4;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r22 = $r21;

        $r23 = r18[0];

        $i16 = virtualinvoke $r23.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r24);

        i17 = 1;

     label10:
        $i18 = lengthof r18;

        if i17 >= $i18 goto label14;

        $r7 = r18[i17];

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $i5 = i17 - 1;

        $r8 = r18[$i5];

        $d1 = virtualinvoke $r8.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i6 <= 0 goto label12;

        i14 = i17 + 1;

        $i9 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i9 <= 1 goto label11;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void resolveTie(double[],java.util.List)>(r2, r22);

     label11:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r22 = $r12;

        $r13 = r18[i17];

        $i10 = virtualinvoke $r13.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label13;

     label12:
        $r9 = r18[i17];

        $i7 = virtualinvoke $r9.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>($r10);

     label13:
        $r11 = r18[i17];

        $i8 = virtualinvoke $r11.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $d2 = (double) i14;

        r2[$i8] = $d2;

        i17 = i17 + 1;

        goto label10;

     label14:
        $i4 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i4 <= 1 goto label15;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void resolveTie(double[],java.util.List)>(r2, r22);

     label15:
        $r6 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy>;

        $r5 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FIXED>;

        if $r6 != $r5 goto label16;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void restoreNaNs(double[],java.util.List)>(r2, r19);

     label16:
        return r2;
    }

    private org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r1, r2, r10;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        $z0 = specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: boolean containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])>(r1);

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[$i0];

        i6 = 0;

        i7 = 0;

     label2:
        $i1 = lengthof r1;

        if i7 >= $i1 goto label7;

        $r3 = r1[i7];

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label5;

        i8 = i7 + 1;

     label3:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label4;

        $r7 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r8 = r1[i8];

        $d2 = virtualinvoke $r8.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $r9 = r1[i8];

        $i4 = virtualinvoke $r9.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        $i5 = $i4 - 1;

        specialinvoke $r7.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d2, $i5);

        r1[i8] = $r7;

        i8 = i8 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r4 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r5 = r1[i7];

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $r6 = r1[i7];

        $i2 = virtualinvoke $r6.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        specialinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>($d1, $i2);

        r2[i6] = $r4;

        i6 = i6 + 1;

     label6:
        i7 = i7 + 1;

        goto label2;

     label7:
        r10 = newarray (org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair)[i6];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r10, 0, i6);

        return r10;
    }

    private void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[], double)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r1;
        double d0, $d1;
        int $i0, $i1, i2;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        d0 := @parameter1: double;

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $r2 = r1[i2];

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label2;

        $r3 = new org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair;

        $r4 = r1[i2];

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: int getPosition()>();

        specialinvoke $r3.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: void <init>(double,int)>(d0, $i1);

        r1[i2] = $r3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private boolean containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r1;
        int $i0, i1;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r2;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r2 = r1[i1];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void resolveTie(double[], java.util.List)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] r1;
        java.util.List r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, i15;
        java.lang.Object $r3, $r7, $r9;
        java.lang.Integer $r4, $r8, $r10;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r5;
        int[] $r6;
        boolean $z0, $z1;
        long $l6, $l7, $l9, $l10, $l11, $l12, l13, l14;
        org.apache.commons.math3.random.RandomDataGenerator $r11;
        org.apache.commons.math3.exception.MathInternalError $r12;
        java.util.Iterator r13, r14;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        d0 = r1[$i1];

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r6 = <org.apache.commons.math3.stat.ranking.NaturalRanking$1: int[] $SwitchMap$org$apache$commons$math3$stat$ranking$TiesStrategy>;

        $r5 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy>;

        $i2 = virtualinvoke $r5.<org.apache.commons.math3.stat.ranking.TiesStrategy: int ordinal()>();

        $i3 = $r6[$i2];

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label6;
            default: goto label8;
        };

     label1:
        $d2 = 2.0 * d0;

        $d1 = (double) i0;

        $d3 = $d2 + $d1;

        $d4 = $d3 - 1.0;

        $d5 = $d4 / 2.0;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>(r1, r2, $d5);

        goto label9;

     label2:
        $d8 = (double) i0;

        $d9 = d0 + $d8;

        $d10 = $d9 - 1.0;

        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>(r1, r2, $d10);

        goto label9;

     label3:
        specialinvoke r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: void fill(double[],java.util.List,double)>(r1, r2, d0);

        goto label9;

     label4:
        r13 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        l13 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>(d0);

     label5:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r9 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        $i8 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = r0.<org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        $l9 = (long) i0;

        $l10 = l13 + $l9;

        $l11 = $l10 - 1L;

        $l12 = virtualinvoke $r11.<org.apache.commons.math3.random.RandomDataGenerator: long nextLong(long,long)>(l13, $l11);

        $d7 = (double) $l12;

        r1[$i8] = $d7;

        goto label5;

     label6:
        r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        l14 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>(d0);

        i15 = 0;

     label7:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        $i4 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i5 = i15;

        i15 = i15 + 1;

        $l6 = (long) $i5;

        $l7 = l14 + $l6;

        $d6 = (double) $l7;

        r1[$i4] = $d6;

        goto label7;

     label8:
        $r12 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r12;

     label9:
        return;
    }

    private void fill(double[], java.util.List, double)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] r1;
        java.util.List r2;
        double d0;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[$i0] = d0;

        goto label1;

     label2:
        return;
    }

    private void restoreNaNs(double[], java.util.List)
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        double[] r1;
        java.util.List r2;
        java.util.Iterator r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[$i1] = #NaN;

        goto label2;

     label3:
        return;
    }

    private java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[])
    {
        org.apache.commons.math3.stat.ranking.NaturalRanking r0;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] r1;
        java.util.ArrayList $r3;
        int $i0, i1;
        org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair $r4;
        double $d0;
        boolean $z0;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.stat.ranking.NaturalRanking;

        r1 := @parameter0: org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r4 = r1[i1];

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair: double getValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r3;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.stat.ranking.NaNStrategy $r0;
        org.apache.commons.math3.stat.ranking.TiesStrategy $r1;

        $r0 = <org.apache.commons.math3.stat.ranking.NaNStrategy: org.apache.commons.math3.stat.ranking.NaNStrategy FAILED>;

        <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.NaNStrategy DEFAULT_NAN_STRATEGY> = $r0;

        $r1 = <org.apache.commons.math3.stat.ranking.TiesStrategy: org.apache.commons.math3.stat.ranking.TiesStrategy AVERAGE>;

        <org.apache.commons.math3.stat.ranking.NaturalRanking: org.apache.commons.math3.stat.ranking.TiesStrategy DEFAULT_TIES_STRATEGY> = $r1;

        return;
    }
}
