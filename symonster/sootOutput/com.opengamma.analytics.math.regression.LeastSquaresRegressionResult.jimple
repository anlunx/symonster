public class com.opengamma.analytics.math.regression.LeastSquaresRegressionResult extends java.lang.Object
{
    private final double[] _residuals;
    private final double[] _betas;
    private final double _meanSquareError;
    private final double[] _standardErrorOfBeta;
    private final double _rSquared;
    private final double _rSquaredAdjusted;
    private final double[] _tStats;
    private final double[] _pValues;
    private final boolean _hasIntercept;

    public void <init>(com.opengamma.analytics.math.regression.LeastSquaresRegressionResult)
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0, r1;
        double[] $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        r1 := @parameter0: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "regression result");

        $r2 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getBetas()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas> = $r2;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getResiduals()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals> = $r3;

        $d0 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double getMeanSquareError()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError> = $d0;

        $r4 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getStandardErrorOfBetas()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta> = $r4;

        $d1 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double getRSquared()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared> = $d1;

        $d2 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double getAdjustedRSquared()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted> = $d2;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getTStatistics()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats> = $r5;

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getPValues()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues> = $r6;

        $z0 = virtualinvoke r1.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean hasIntercept()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept> = $z0;

        return;
    }

    public void <init>(double[], double[], double, double[], double, double, double[], double[], boolean)
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] r1, r2, r3, r4, r5;
        double d0, d1, d2;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        r3 := @parameter3: double[];

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        r4 := @parameter6: double[];

        r5 := @parameter7: double[];

        z0 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas> = r1;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals> = r2;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError> = d0;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta> = r3;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared> = d1;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted> = d2;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats> = r4;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues> = r5;

        r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept> = z0;

        return;
    }

    public double[] getBetas()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas>;

        return $r1;
    }

    public double[] getResiduals()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals>;

        return $r1;
    }

    public double getMeanSquareError()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $d0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError>;

        return $d0;
    }

    public double[] getStandardErrorOfBetas()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta>;

        return $r1;
    }

    public double getRSquared()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $d0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared>;

        return $d0;
    }

    public double getAdjustedRSquared()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $d0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted>;

        return $d0;
    }

    public double[] getTStatistics()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats>;

        return $r1;
    }

    public double[] getPValues()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues>;

        return $r1;
    }

    public boolean hasIntercept()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $z0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept>;

        return $z0;
    }

    public double getPredictedValue(double[])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] r1, r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        r1 := @parameter0: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        r2 = virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getBetas()>();

        $z0 = virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z0 == 0 goto label1;

        $i7 = lengthof r1;

        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        if $i7 == $i6 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of variables did not match number used in regression");

        throw $r4;

     label1:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of variables did not match number used in regression");

        throw $r3;

     label2:
        d7 = 0.0;

        i8 = 0;

     label3:
        $i4 = i8;

        $z2 = virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z2 == 0 goto label4;

        $i3 = lengthof r1;

        $i9 = $i3 + 1;

        goto label5;

     label4:
        $i9 = lengthof r1;

     label5:
        if $i4 >= $i9 goto label9;

        $z1 = virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z1 == 0 goto label7;

        if i8 != 0 goto label6;

        $d6 = r2[0];

        d7 = d7 + $d6;

        goto label8;

     label6:
        $d4 = r2[i8];

        $i2 = i8 - 1;

        $d3 = r1[$i2];

        $d5 = $d4 * $d3;

        d7 = d7 + $d5;

        goto label8;

     label7:
        $d1 = r1[i8];

        $d0 = r2[i8];

        $d2 = $d1 * $d0;

        d7 = d7 + $d2;

     label8:
        i8 = i8 + 1;

        goto label3;

     label9:
        return d7;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0;
        double[] $r1, $r2, $r3, $r4, $r5;
        int $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i25, i27, i29, i30, i32, i34, i35, i36, i37;
        boolean $z0;
        double $d0, $d1, $d2;
        long $l4, $l5, $l10, $l11, $l14, $l15, l28, l31, l33;
        short $s26;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i25 = $i1 + $i2;

        $i3 = 31 * i25;

        $z0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept>;

        if $z0 == 0 goto label1;

        $s26 = 1231;

        goto label2;

     label1:
        $s26 = 1237;

     label2:
        i27 = $i3 + $s26;

        $d0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError>;

        l28 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i7 = 31 * i27;

        $l4 = l28 >>> 32;

        $l5 = l28 ^ $l4;

        $i6 = (int) $l5;

        i29 = $i7 + $i6;

        $i8 = 31 * i29;

        $r2 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues>;

        $i9 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r2);

        i30 = $i8 + $i9;

        $d1 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared>;

        l31 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i13 = 31 * i30;

        $l10 = l31 >>> 32;

        $l11 = l31 ^ $l10;

        $i12 = (int) $l11;

        i32 = $i13 + $i12;

        $d2 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted>;

        l33 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $i17 = 31 * i32;

        $l14 = l33 >>> 32;

        $l15 = l33 ^ $l14;

        $i16 = (int) $l15;

        i34 = $i17 + $i16;

        $i18 = 31 * i34;

        $r3 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals>;

        $i19 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r3);

        i35 = $i18 + $i19;

        $i20 = 31 * i35;

        $r4 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta>;

        $i21 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r4);

        i36 = $i20 + $i21;

        $i22 = 31 * i36;

        $r5 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats>;

        $i23 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r5);

        i37 = $i22 + $i23;

        return i37;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l0, $l1, $l3, $l4, $l6, $l7;
        byte $b2, $b5, $b8;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 != null goto label02;

        return 0;

     label02:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label03;

        return 0;

     label03:
        r2 = (com.opengamma.analytics.math.regression.LeastSquaresRegressionResult) r1;

        $r6 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas>;

        $r5 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _betas>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        $z2 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept>;

        $z1 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean _hasIntercept>;

        if $z2 == $z1 goto label05;

        return 0;

     label05:
        $d0 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _meanSquareError>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label06;

        return 0;

     label06:
        $r8 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues>;

        $r7 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _pValues>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z3 != 0 goto label07;

        return 0;

     label07:
        $d2 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquared>;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label08;

        return 0;

     label08:
        $d4 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted>;

        $l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $d5 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double _rSquaredAdjusted>;

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $b8 = $l6 cmp $l7;

        if $b8 == 0 goto label09;

        return 0;

     label09:
        $r10 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals>;

        $r9 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _residuals>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r10, $r9);

        if $z4 != 0 goto label10;

        return 0;

     label10:
        $r12 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta>;

        $r11 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _standardErrorOfBeta>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r12, $r11);

        if $z5 != 0 goto label11;

        return 0;

     label11:
        $r14 = r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats>;

        $r13 = r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] _tStats>;

        $z6 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r14, $r13);

        if $z6 != 0 goto label12;

        return 0;

     label12:
        return 1;
    }
}
