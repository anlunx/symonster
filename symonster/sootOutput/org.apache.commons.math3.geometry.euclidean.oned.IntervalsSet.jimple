public class org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion implements java.lang.Iterable
{
    private static final double DEFAULT_TOLERANCE;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>(d0);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double d0, d1, d2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double,double,double)>(d0, d1, d2);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, d0);

        return;
    }

    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Collection r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, d0);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double)>(1.0E-10);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>(d0, d1, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }

    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double, double, double)
    {
        double d0, d1, d2;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0, r27, r28;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r1, $r3, $r18;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2, $r4, $r19;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r20, $r21, $r23, $r25;
        java.lang.Boolean $r7, $r10, $r12, $r15, $r17, $r22, $r24, $r26;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label2;

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z2 == 0 goto label1;

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label1;

        $r25 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r26 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r25.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r26);

        return $r25;

     label1:
        $r18 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d1);

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r19, 1, d2);

        r27 = virtualinvoke $r18.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r20 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r21 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r22 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r22);

        $r23 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r23.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r24);

        specialinvoke $r20.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r27, $r21, $r23, null);

        return $r20;

     label2:
        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r2, 0, d2);

        r28 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z1 == 0 goto label3;

        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label3;

        $r13 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r14 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

        $r16 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r17);

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r28, $r14, $r16, null);

        return $r13;

     label3:
        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $r4 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d1);

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>($r4, 1, d2);

        r0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r5 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r7);

        $r8 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r9 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r10);

        $r11 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r12);

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r0, $r9, $r11, null);

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r28, $r6, $r8, null);

        return $r5;
    }

    public org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }

    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Iterator r1;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3, $r6, $r15;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4, $r7;
        java.util.List $r5;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r9;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r10, $r11, $r12, $r14;
        java.lang.Object $r13, $r16;
        java.lang.Boolean $r17;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r4 != null goto label3;

        $r14 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r14);

        $r15 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r17 = (java.lang.Boolean) $r16;

        $z2 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        $d6 = #Infinity;

        goto label2;

     label1:
        $d6 = 0.0;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setSize(double)>($d6);

        goto label8;

     label3:
        d7 = 0.0;

        d8 = 0.0;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r13;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSize()>();

        d7 = d7 + $d2;

        $d3 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSize()>();

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getBarycenter()>();

        $d5 = $d3 * $d4;

        d8 = d8 + $d5;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setSize(double)>(d7);

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d7);

        if $z1 == 0 goto label6;

        $r12 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r12);

        goto label8;

     label6:
        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d7 cmpl $d0;

        if $b0 < 0 goto label7;

        $r11 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = d8 / d7;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r11);

        goto label8;

     label7:
        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r9 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r8;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r10);

     label8:
        return;
    }

    public double getInf()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2, $r5;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r7;
        org.apache.commons.math3.geometry.partitioning.BSPTree r8, $r9;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        d0 = #Infinity;

     label1:
        $r2 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label4;

        $r5 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r1 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r6;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $z1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        goto label3;

     label2:
        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

     label3:
        r8 = $r9;

        goto label1;

     label4:
        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label5;

        $d1 = #-Infinity;

        goto label6;

     label5:
        $d1 = d0;

     label6:
        return $d1;
    }

    public double getSup()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2, $r5;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0, $z1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r7;
        org.apache.commons.math3.geometry.partitioning.BSPTree r8, $r9;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        d0 = #-Infinity;

     label1:
        $r2 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label4;

        $r5 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r1 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r6;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $z1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        goto label3;

     label2:
        $r9 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

     label3:
        r8 = $r9;

        goto label1;

     label4:
        $r3 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label5;

        $d1 = #Infinity;

        goto label6;

     label5:
        $d1 = d0;

     label6:
        return $d1;
    }

    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.Point r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12, d13, d14;
        java.util.Iterator r2;
        double[] r3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4, $r6, $r9, $r11, $r13, $r15;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r5, $r8, $r10, $r12, $r14;
        java.lang.Object $r7;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r4 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        d10 = #-Infinity;

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (double[]) $r7;

        $d2 = r3[0];

        $b0 = d0 cmpg $d2;

        if $b0 >= 0 goto label3;

        d11 = d0 - d10;

        $d8 = r3[0];

        d12 = $d8 - d0;

        $b3 = d11 cmpg d12;

        if $b3 >= 0 goto label2;

        $r14 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r15 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d10);

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r15, d11);

        return $r14;

     label2:
        $r12 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $d9 = r3[0];

        $r13 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>($d9);

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r13, d12);

        return $r12;

     label3:
        $d3 = r3[1];

        $b1 = d0 cmpg $d3;

        if $b1 > 0 goto label5;

        $d4 = r3[0];

        d13 = $d4 - d0;

        $d5 = r3[1];

        d14 = d0 - $d5;

        $b2 = d13 cmpg d14;

        if $b2 >= 0 goto label4;

        $r10 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $d7 = r3[1];

        $r11 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>($d7);

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r11, d14);

        return $r10;

     label4:
        $r8 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $d6 = r3[0];

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>($d6);

        specialinvoke $r8.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r9, d13);

        return $r8;

     label5:
        d10 = r3[1];

        goto label1;

     label6:
        $r5 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r6 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)>(d10);

        $d1 = d0 - d10;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>(r1, $r6, $d1);

        return $r5;
    }

    private org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        double d0;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d0);

     label2:
        return $r1;
    }

    public java.util.List asList()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        java.util.Iterator r2;
        double[] r3;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.euclidean.oned.Interval $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (double[]) $r5;

        $r6 = new org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d1 = r3[0];

        $d0 = r3[1];

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.oned.Interval: void <init>(double,double)>($d1, $d0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r4;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r3, r4, r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 != null goto label1;

        return r1;

     label1:
        r4 = null;

        r5 = r1;

     label2:
        if r5 == null goto label3;

        r4 = r5;

        r5 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r5);

        goto label2;

     label3:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstIntervalBoundary()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2, r3, r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

     label2:
        if r4 == null goto label3;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        if $z1 != 0 goto label3;

        r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r4);

        goto label2;

     label3:
        return r4;
    }

    private boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Boolean $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Boolean $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3, $r4, $r5, r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r6 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label1;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1, $r3, $r4, $r5, r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r6 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r2 == null goto label1;

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r6);

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        goto label1;

     label2:
        $r3 = virtualinvoke r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        return $r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

     label1:
        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 == null goto label2;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        goto label1;

     label2:
        return r3;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r2 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

     label1:
        $r1 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r1 == null goto label2;

        r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r3);

        goto label1;

     label2:
        return r3;
    }

    private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

        if r1 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

        if r1 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return $r2;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        return $r2;
    }

    private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: boolean isDirect()>();

        return $z0;
    }

    private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r3;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        return $d0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator: void <init>(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>(r0);

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstIntervalBoundary()>();

        return $r1;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static boolean access$200(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $z0;
    }

    static double access$300(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $d0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $d0;
    }

    static boolean access$400(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $z0;
    }

    static org.apache.commons.math3.geometry.partitioning.BSPTree access$500(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
