public class org.apache.commons.math3.optimization.univariate.BrentOptimizer extends org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer
{
    private static final double GOLDEN_SECTION;
    private static final double MIN_RELATIVE_TOLERANCE;
    private final double relativeThreshold;
    private final double absoluteThreshold;

    public void <init>(double, double, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        double d0, d1, $d2, $d3;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        byte $b0, $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        java.lang.Double $r3, $r5, $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        $d2 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $b0 = d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d3 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label1:
        $b1 = d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double relativeThreshold> = d0;

        r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double absoluteThreshold> = d1;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: void <init>(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)>(d0, d1, null);

        return;
    }

    protected org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d55, d56, d57, d58, d59, d60, $d61, d62, d63, $d64;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.optimization.GoalType $r2, $r3;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b17, $b18, $b19;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r4, $r5, $r6, $r7, $r8, r9, r10, r11;
        int i16;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r3 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r2 != $r3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getMin()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getStartValue()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double getMax()>();

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $b0 = d0 cmpg d2;

        if $b0 >= 0 goto label03;

        d30 = d0;

        d31 = d2;

        goto label04;

     label03:
        d30 = d2;

        d31 = d0;

     label04:
        d32 = d1;

        d33 = d1;

        d34 = d1;

        d35 = 0.0;

        d36 = 0.0;

        d37 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d1);

        if z0 != 0 goto label05;

        d37 = neg d37;

     label05:
        d38 = d37;

        d39 = d37;

        r9 = null;

        $r4 = new org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        if z0 == 0 goto label06;

        $d40 = d37;

        goto label07;

     label06:
        $d40 = neg d37;

     label07:
        specialinvoke $r4.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: void <init>(double,double)>(d1, $d40);

        r10 = $r4;

        r11 = $r4;

        i16 = 0;

     label08:
        $d41 = d30 + d31;

        d3 = 0.5 * $d41;

        $d42 = r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double relativeThreshold>;

        $d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d32);

        $d44 = $d42 * $d43;

        $d45 = r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double absoluteThreshold>;

        d4 = $d44 + $d45;

        d5 = 2.0 * d4;

        $d46 = d32 - d3;

        $d47 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d46);

        $d48 = d31 - d30;

        $d49 = 0.5 * $d48;

        $d50 = d5 - $d49;

        $b17 = $d47 cmpg $d50;

        if $b17 > 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        if $z7 != 0 goto label38;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d36);

        $b1 = $d6 cmpl d4;

        if $b1 <= 0 goto label18;

        $d10 = d32 - d34;

        $d9 = d37 - d38;

        d55 = $d10 * $d9;

        $d12 = d32 - d33;

        $d11 = d37 - d39;

        d56 = $d12 * $d11;

        $d13 = d32 - d33;

        $d16 = $d13 * d56;

        $d14 = d32 - d34;

        $d15 = $d14 * d55;

        d57 = $d16 - $d15;

        $d17 = d56 - d55;

        d58 = 2.0 * $d17;

        $b9 = d58 cmpl 0.0;

        if $b9 <= 0 goto label11;

        d57 = neg d57;

        goto label12;

     label11:
        d58 = neg d58;

     label12:
        d59 = d36;

        d36 = d35;

        $d18 = d30 - d32;

        $d19 = d58 * $d18;

        $b10 = d57 cmpl $d19;

        if $b10 <= 0 goto label15;

        $d21 = d31 - d32;

        $d22 = d58 * $d21;

        $b11 = d57 cmpg $d22;

        if $b11 >= 0 goto label15;

        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d57);

        $d24 = 0.5 * d58;

        $d25 = $d24 * d59;

        $d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d25);

        $b12 = $d23 cmpg $d26;

        if $b12 >= 0 goto label15;

        d35 = d57 / d58;

        d60 = d32 + d35;

        $d27 = d60 - d30;

        $b13 = $d27 cmpg d5;

        if $b13 < 0 goto label13;

        $d28 = d31 - d60;

        $b15 = $d28 cmpg d5;

        if $b15 >= 0 goto label21;

     label13:
        $b14 = d32 cmpg d3;

        if $b14 > 0 goto label14;

        d35 = d4;

        goto label21;

     label14:
        d35 = neg d4;

        goto label21;

     label15:
        $b18 = d32 cmpg d3;

        if $b18 >= 0 goto label16;

        d36 = d31 - d32;

        goto label17;

     label16:
        d36 = d30 - d32;

     label17:
        $d20 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d35 = $d20 * d36;

        goto label21;

     label18:
        $b2 = d32 cmpg d3;

        if $b2 >= 0 goto label19;

        d36 = d31 - d32;

        goto label20;

     label19:
        d36 = d30 - d32;

     label20:
        $d7 = <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d35 = $d7 * d36;

     label21:
        $d61 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d35);

        $b19 = $d61 cmpg d4;

        if $b19 >= 0 goto label23;

        $b8 = d35 cmpl 0.0;

        if $b8 < 0 goto label22;

        d62 = d32 + d4;

        goto label24;

     label22:
        d62 = d32 - d4;

        goto label24;

     label23:
        d62 = d32 + d35;

     label24:
        d63 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d62);

        if z0 != 0 goto label25;

        d63 = neg d63;

     label25:
        r9 = r10;

        $r7 = new org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        $d8 = d62;

        if z0 == 0 goto label26;

        $d64 = d63;

        goto label27;

     label26:
        $d64 = neg d63;

     label27:
        specialinvoke $r7.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: void <init>(double,double)>($d8, $d64);

        r10 = $r7;

        $r8 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r9, $r7, z0);

        r11 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r11, $r8, z0);

        if r1 == null goto label28;

        $z5 = interfaceinvoke r1.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i16, r9, $r7);

        if $z5 == 0 goto label28;

        return r11;

     label28:
        $b3 = d63 cmpg d37;

        if $b3 > 0 goto label31;

        $b7 = d62 cmpg d32;

        if $b7 >= 0 goto label29;

        d31 = d32;

        goto label30;

     label29:
        d30 = d32;

     label30:
        d33 = d34;

        d38 = d39;

        d34 = d32;

        d39 = d37;

        d32 = d62;

        d37 = d63;

        goto label37;

     label31:
        $b4 = d62 cmpg d32;

        if $b4 >= 0 goto label32;

        d30 = d62;

        goto label33;

     label32:
        d31 = d62;

     label33:
        $b5 = d63 cmpg d39;

        if $b5 <= 0 goto label34;

        $z2 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d34, d32);

        if $z2 == 0 goto label35;

     label34:
        d33 = d34;

        d38 = d39;

        d34 = d62;

        d39 = d63;

        goto label37;

     label35:
        $b6 = d63 cmpg d38;

        if $b6 <= 0 goto label36;

        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d33, d32);

        if $z3 != 0 goto label36;

        $z4 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d33, d34);

        if $z4 == 0 goto label37;

     label36:
        d33 = d62;

        d38 = d63;

     label37:
        goto label39;

     label38:
        $r5 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r9, r10, z0);

        $r6 = specialinvoke r0.<org.apache.commons.math3.optimization.univariate.BrentOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,boolean)>(r11, $r5, z0);

        return $r6;

     label39:
        i16 = i16 + 1;

        goto label08;
    }

    private org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, boolean)
    {
        org.apache.commons.math3.optimization.univariate.BrentOptimizer r0;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair r1, r2, $r3, $r4;
        boolean z0;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BrentOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        r2 := @parameter1: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        return r2;

     label1:
        if r2 != null goto label2;

        return r1;

     label2:
        if z0 == 0 goto label5;

        $d2 = virtualinvoke r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d3 = virtualinvoke r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $b1 = $d2 cmpg $d3;

        if $b1 > 0 goto label3;

        $r3 = r1;

        goto label4;

     label3:
        $r3 = r2;

     label4:
        return $r3;

     label5:
        $d0 = virtualinvoke r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 < 0 goto label6;

        $r4 = r1;

        goto label7;

     label6:
        $r4 = r2;

     label7:
        return $r4;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2, $d3, $d4;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(5.0);

        $d1 = 3.0 - $d0;

        $d2 = 0.5 * $d1;

        <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION> = $d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $d4 = 2.0 * $d3;

        <org.apache.commons.math3.optimization.univariate.BrentOptimizer: double MIN_RELATIVE_TOLERANCE> = $d4;

        return;
    }
}
