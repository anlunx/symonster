class org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer extends java.lang.Object implements org.apache.commons.math.ode.sampling.StepHandler
{
    private final int n;
    final org.apache.commons.math.ode.MultistepIntegrator this$0;

    public void <init>(org.apache.commons.math.ode.MultistepIntegrator, int)
    {
        org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer r0;
        org.apache.commons.math.ode.MultistepIntegrator r1;
        int i0;

        r0 := @this: org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer;

        r1 := @parameter0: org.apache.commons.math.ode.MultistepIntegrator;

        i0 := @parameter1: int;

        r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: int n> = i0;

        return;
    }

    public void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        boolean z0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r2, $r7, $r9, $r13, $r19, $r23;
        org.apache.commons.math.ode.MultistepIntegrator $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r14, $r15, $r18, $r21, $r22, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.Object $r8, $r20;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r16;
        org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException $r17;
        double[][] r25;

        r0 := @this: org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

        z0 := @parameter1: boolean;

        d0 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d1 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $r3 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r3.<org.apache.commons.math.ode.MultistepIntegrator: double stepStart> = d0;

        $r5 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $d2 = d1 - d0;

        $r4 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $i0 = staticinvoke <org.apache.commons.math.ode.MultistepIntegrator: int access$000(org.apache.commons.math.ode.MultistepIntegrator)>($r4);

        $i1 = $i0 + 1;

        $d3 = (double) $i1;

        $d4 = $d2 / $d3;

        $r5.<org.apache.commons.math.ode.MultistepIntegrator: double stepSize> = $d4;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        $r6 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r7 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (double[]) $r8;

        $r6.<org.apache.commons.math.ode.MultistepIntegrator: double[] scaled> = $r9;

        i7 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: int n>;

        if i7 >= $i2 goto label2;

        $r22 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r23 = $r22.<org.apache.commons.math.ode.MultistepIntegrator: double[] scaled>;

        $d13 = $r23[i7];

        $r24 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $d12 = $r24.<org.apache.commons.math.ode.MultistepIntegrator: double stepSize>;

        $d14 = $d13 * $d12;

        $r23[i7] = $d14;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r10 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $i3 = staticinvoke <org.apache.commons.math.ode.MultistepIntegrator: int access$000(org.apache.commons.math.ode.MultistepIntegrator)>($r10);

        r25 = newarray (double[])[$i3];

        i8 = 1;

     label3:
        $r11 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $i4 = staticinvoke <org.apache.commons.math.ode.MultistepIntegrator: int access$000(org.apache.commons.math.ode.MultistepIntegrator)>($r11);

        if i8 > $i4 goto label6;

        $r18 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $d6 = $r18.<org.apache.commons.math.ode.MultistepIntegrator: double stepSize>;

        $d5 = (double) i8;

        $d7 = $d6 * $d5;

        $d8 = d0 + $d7;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d8);

        $r19 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r20;

        i9 = 0;

     label4:
        $i5 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: int n>;

        if i9 >= $i5 goto label5;

        $d10 = r2[i9];

        $r21 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $d9 = $r21.<org.apache.commons.math.ode.MultistepIntegrator: double stepSize>;

        $d11 = $d10 * $d9;

        r2[i9] = $d11;

        i9 = i9 + 1;

        goto label4;

     label5:
        $i6 = i8 - 1;

        r25[$i6] = r2;

        i8 = i8 + 1;

        goto label3;

     label6:
        $r15 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r14 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r12 = r0.<org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer: org.apache.commons.math.ode.MultistepIntegrator this$0>;

        $r13 = $r12.<org.apache.commons.math.ode.MultistepIntegrator: double[] scaled>;

        $r16 = virtualinvoke $r14.<org.apache.commons.math.ode.MultistepIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double[],double[][])>($r13, r25);

        $r15.<org.apache.commons.math.ode.MultistepIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck> = $r16;

        $r17 = new org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException;

        specialinvoke $r17.<org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException: void <init>()>();

        throw $r17;
    }

    public boolean requiresDenseOutput()
    {
        org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer r0;

        r0 := @this: org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer;

        return 1;
    }

    public void reset()
    {
        org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer r0;

        r0 := @this: org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer;

        return;
    }
}
