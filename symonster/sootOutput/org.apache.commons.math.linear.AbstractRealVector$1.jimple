class org.apache.commons.math.linear.AbstractRealVector$1 extends java.lang.Object implements java.util.Iterator
{
    private int i;
    private org.apache.commons.math.linear.AbstractRealVector$EntryImpl e;
    final int val$dim;
    final org.apache.commons.math.linear.AbstractRealVector this$0;

    void <init>(org.apache.commons.math.linear.AbstractRealVector, int)
    {
        org.apache.commons.math.linear.AbstractRealVector$1 r0;
        org.apache.commons.math.linear.AbstractRealVector r1, $r3;
        int i0;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$1;

        r1 := @parameter0: org.apache.commons.math.linear.AbstractRealVector;

        i0 := @parameter1: int;

        r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.AbstractRealVector this$0> = r1;

        r0.<org.apache.commons.math.linear.AbstractRealVector$1: int val$dim> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.AbstractRealVector$1: int i> = 0;

        $r2 = new org.apache.commons.math.linear.AbstractRealVector$EntryImpl;

        $r3 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.AbstractRealVector this$0>;

        specialinvoke $r2.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void <init>(org.apache.commons.math.linear.AbstractRealVector)>($r3);

        r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.AbstractRealVector$EntryImpl e> = $r2;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.math.linear.AbstractRealVector$1 r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$1;

        $i1 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: int i>;

        $i0 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: int val$dim>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.math.linear.RealVector$Entry next()
    {
        org.apache.commons.math.linear.AbstractRealVector$1 r0;
        int $i0, $i1;
        org.apache.commons.math.linear.AbstractRealVector$EntryImpl $r1, $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$1;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.AbstractRealVector$EntryImpl e>;

        $i0 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: int i>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.linear.AbstractRealVector$1: int i> = $i1;

        virtualinvoke $r1.<org.apache.commons.math.linear.AbstractRealVector$EntryImpl: void setIndex(int)>($i0);

        $r2 = r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.AbstractRealVector$EntryImpl e>;

        return $r2;
    }

    public void remove()
    {
        org.apache.commons.math.linear.AbstractRealVector$1 r0;
        org.apache.commons.math.exception.MathUnsupportedOperationException $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$1;

        $r1 = new org.apache.commons.math.exception.MathUnsupportedOperationException;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math.exception.MathUnsupportedOperationException: void <init>(java.lang.Object[])>($r2);

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        org.apache.commons.math.linear.AbstractRealVector$1 r0;
        org.apache.commons.math.linear.RealVector$Entry $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealVector$1;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealVector$1: org.apache.commons.math.linear.RealVector$Entry next()>();

        return $r1;
    }
}
