public class org.apache.commons.math3.analysis.function.Logit extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double lo;
    private final double hi;

    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Logit r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Logit: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.Logit: double lo> = d0;

        r0.<org.apache.commons.math3.analysis.function.Logit: double hi> = d1;

        return;
    }

    public double value(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $d3 = staticinvoke <org.apache.commons.math3.analysis.function.Logit: double value(double,double,double)>(d0, $d2, $d1);

        return $d3;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }

    private static double value(double, double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1, $r2, $r3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpg d1;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl d2;

        if $b1 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $d4 = d0 - d1;

        $d3 = d2 - d0;

        $d5 = $d4 / $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d5);

        return $d6;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.analysis.function.Logit r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, d25;
        double[] r2;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4, $r5, $r6;
        int $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.function.Logit;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $b0 = d0 cmpg $d2;

        if $b0 < 0 goto label1;

        $d5 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $b1 = d0 cmpl $d5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d3 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $d4 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        $i2 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i3 = $i2 + 1;

        r2 = newarray (double)[$i3];

        $d6 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $d9 = d0 - $d6;

        $d7 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $d8 = $d7 - d0;

        $d10 = $d9 / $d8;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d10);

        r2[0] = $d11;

        $d12 = r2[0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d12);

        if $z0 == 0 goto label6;

        $i6 = lengthof r2;

        if $i6 <= 1 goto label3;

        r2[1] = #Infinity;

     label3:
        i8 = 2;

     label4:
        $i9 = lengthof r2;

        if i8 >= $i9 goto label5;

        $i7 = i8 - 2;

        $d22 = r2[$i7];

        r2[i8] = $d22;

        i8 = i8 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        $d13 = r0.<org.apache.commons.math3.analysis.function.Logit: double lo>;

        $d14 = d0 - $d13;

        d23 = 1.0 / $d14;

        d24 = d23;

        $d15 = r0.<org.apache.commons.math3.analysis.function.Logit: double hi>;

        $d16 = $d15 - d0;

        d1 = 1.0 / $d16;

        d25 = d1;

        i10 = 1;

     label7:
        $i4 = lengthof r2;

        if i10 >= $i4 goto label8;

        $d17 = d24 + d25;

        r2[i10] = $d17;

        $i5 = neg i10;

        $d18 = (double) $i5;

        $d19 = $d18 * d23;

        d24 = d24 * $d19;

        $d20 = (double) i10;

        $d21 = $d20 * d1;

        d25 = d25 * $d21;

        i10 = i10 + 1;

        goto label7;

     label8:
        $r7 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r7;
    }

    static double access$000(double, double, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        double d0, d1, d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <org.apache.commons.math3.analysis.function.Logit: double value(double,double,double)>(d0, d1, d2);

        return $d3;
    }
}
