public class org.apache.commons.math.distribution.BinomialDistributionImpl extends org.apache.commons.math.distribution.AbstractIntegerDistribution implements org.apache.commons.math.distribution.BinomialDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    private int numberOfTrials;
    private double probabilityOfSuccess;

    public void <init>(int, double)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: void setNumberOfTrialsInternal(int)>(i0);

        specialinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: void setProbabilityOfSuccessInternal(double)>(d0);

        return;
    }

    public int getNumberOfTrials()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        return $i0;
    }

    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double probabilityOfSuccess>;

        return $d0;
    }

    public void setNumberOfTrials(int)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: void setNumberOfTrialsInternal(int)>(i0);

        return;
    }

    private void setNumberOfTrialsInternal(int)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_TRIALS>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials> = i0;

        return;
    }

    public void setProbabilityOfSuccess(double)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: void setProbabilityOfSuccessInternal(double)>(d0);

        return;
    }

    private void setProbabilityOfSuccessInternal(double)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0;
        byte $b0, $b1;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label2:
        r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double probabilityOfSuccess> = d0;

        return;
    }

    protected int getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 := @parameter0: double;

        return -1;
    }

    protected int getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        return $i0;
    }

    public double cumulativeProbability(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int i0, $i1, $i2, $i3;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d5 = 0.0;

        goto label3;

     label1:
        $i1 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        if i0 < $i1 goto label2;

        d5 = 1.0;

        goto label3;

     label2:
        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double getProbabilityOfSuccess()>();

        $d1 = (double) i0;

        $d3 = $d1 + 1.0;

        $i2 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        $i3 = $i2 - i0;

        $d2 = (double) $i3;

        $d4 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double)>($d0, $d3, $d2);

        d5 = 1.0 - $d4;

     label3:
        return d5;
    }

    public double probability(int)
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        if i0 <= $i1 goto label2;

     label1:
        d4 = 0.0;

        goto label3;

     label2:
        $i2 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int numberOfTrials>;

        $d2 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double probabilityOfSuccess>;

        $d0 = r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double probabilityOfSuccess>;

        $d1 = 1.0 - $d0;

        $d3 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>(i0, $i2, $d2, $d1);

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d3);

     label3:
        return d4;
    }

    public int inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0;
        byte $b0, $b1;
        int $i2;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return -1;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return 2147483647;

     label2:
        $i2 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: int inverseCumulativeProbability(double)>(d0);

        return $i2;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int getNumberOfTrials()>();

        return $i0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int getNumberOfTrials()>();

        $d0 = (double) $i0;

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double getProbabilityOfSuccess()>();

        $d2 = $d0 * $d1;

        return $d2;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.BinomialDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.BinomialDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.BinomialDistributionImpl: int getNumberOfTrials()>();

        $d1 = (double) $i0;

        $d3 = $d1 * d0;

        $d2 = 1.0 - d0;

        $d4 = $d3 * $d2;

        return $d4;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.BinomialDistributionImpl: long serialVersionUID> = 6751309484392813623L;

        return;
    }
}
