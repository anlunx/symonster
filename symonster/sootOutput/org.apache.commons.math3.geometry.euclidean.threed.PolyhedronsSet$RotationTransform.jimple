class org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
{
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D center;
    private org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation;
    private org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal;
    private org.apache.commons.math3.geometry.partitioning.Transform cachedTransform;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center> = r1;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation> = r2;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r3, $r4, $r5, $r7, $r8;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        r2 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r3);

        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r2);

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r7, 1.0, $r8);

        return $r5;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D center>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r3, $r2);

        return $r5;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r4, r5, $r13, $r23;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r6, r7, r8, $r19, $r20, $r21;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r9, r10, r11, $r17, $r18;
        org.apache.commons.math3.geometry.partitioning.Transform $r14, $r24;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r15;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane $r16;
        java.awt.geom.AffineTransform $r22;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal>;

        if r2 == $r13 goto label1;

        r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r2;

        r5 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r3;

        r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()>();

        $r17 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(1.0, 0.0);

        r7 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r17);

        $r18 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(0.0, 1.0);

        r8 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r18);

        $r19 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>(r6);

        r9 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r19);

        $r20 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>(r7);

        r10 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r20);

        $r21 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>(r8);

        r11 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r21);

        $r22 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d4 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d7 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d8 = $d6 - $d7;

        $d9 = virtualinvoke r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d10 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d11 = $d9 - $d10;

        $d12 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d13 = virtualinvoke r9.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        specialinvoke $r22.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d2, $d5, $d8, $d11, $d12, $d13);

        $r23 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal> = $r23;

        $r24 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.partitioning.Transform getTransform(java.awt.geom.AffineTransform)>($r22);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform> = $r24;

     label1:
        $r15 = (org.apache.commons.math3.geometry.euclidean.twod.SubLine) r1;

        $r14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform>;

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r14);

        return $r16;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
}
