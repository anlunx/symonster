public class org.apache.commons.math3.util.FastMath extends java.lang.Object
{
    public static final double PI;
    public static final double E;
    static final int EXP_INT_TABLE_MAX_INDEX;
    static final int EXP_INT_TABLE_LEN;
    static final int LN_MANT_LEN;
    static final int EXP_FRAC_TABLE_LEN;
    private static final double LOG_MAX_VALUE;
    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME;
    private static final double LN_2_A;
    private static final double LN_2_B;
    private static final double[][] LN_QUICK_COEF;
    private static final double[][] LN_HI_PREC_COEF;
    private static final int SINE_TABLE_LEN;
    private static final double[] SINE_TABLE_A;
    private static final double[] SINE_TABLE_B;
    private static final double[] COSINE_TABLE_A;
    private static final double[] COSINE_TABLE_B;
    private static final double[] TANGENT_TABLE_A;
    private static final double[] TANGENT_TABLE_B;
    private static final long[] RECIP_2PI;
    private static final long[] PI_O_4_BITS;
    private static final double[] EIGHTHS;
    private static final double[] CBRTTWO;
    private static final long HEX_40000000;
    private static final long MASK_30BITS;
    private static final int MASK_NON_SIGN_INT;
    private static final long MASK_NON_SIGN_LONG;
    private static final double TWO_POWER_52;
    private static final double TWO_POWER_53;
    private static final double F_1_3;
    private static final double F_1_5;
    private static final double F_1_7;
    private static final double F_1_9;
    private static final double F_1_11;
    private static final double F_1_13;
    private static final double F_1_15;
    private static final double F_1_17;
    private static final double F_3_4;
    private static final double F_15_16;
    private static final double F_13_14;
    private static final double F_11_12;
    private static final double F_9_10;
    private static final double F_7_8;
    private static final double F_5_6;
    private static final double F_1_2;
    private static final double F_1_4;

    private void <init>()
    {
        org.apache.commons.math3.util.FastMath r0;

        r0 := @this: org.apache.commons.math3.util.FastMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static double doubleHighPart(double)
    {
        double d0, $d1, $d2, $d3, $d4;
        byte $b0, $b1;
        long l2, l3;

        d0 := @parameter0: double;

        $d1 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d2 = neg $d1;

        $b0 = d0 cmpl $d2;

        if $b0 <= 0 goto label1;

        $d4 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b1 = d0 cmpg $d4;

        if $b1 >= 0 goto label1;

        return d0;

     label1:
        l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l3 = l2 & -1073741824L;

        $d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d3;
    }

    public static double sqrt(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        return $d1;
    }

    public static double cosh(double)
    {
        double d0, d1, d2, d3, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d58, d59, d61, d62;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        double[] r0;

        d45 := @parameter0: double;

        $b0 = d45 cmpl d45;

        if $b0 == 0 goto label1;

        return d45;

     label1:
        $b1 = d45 cmpl 20.0;

        if $b1 <= 0 goto label3;

        $d39 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $b5 = d45 cmpl $d39;

        if $b5 < 0 goto label2;

        $d42 = 0.5 * d45;

        d46 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d42);

        $d43 = 0.5 * d46;

        $d44 = $d43 * d46;

        return $d44;

     label2:
        $d40 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d45);

        $d41 = 0.5 * $d40;

        return $d41;

     label3:
        $b2 = d45 cmpg -20.0;

        if $b2 >= 0 goto label5;

        $d31 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $d32 = neg $d31;

        $b4 = d45 cmpg $d32;

        if $b4 > 0 goto label4;

        $d36 = -0.5 * d45;

        d47 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d36);

        $d37 = 0.5 * d47;

        $d38 = $d37 * d47;

        return $d38;

     label4:
        $d33 = neg d45;

        $d34 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d33);

        $d35 = 0.5 * $d34;

        return $d35;

     label5:
        r0 = newarray (double)[2];

        $b3 = d45 cmpg 0.0;

        if $b3 >= 0 goto label6;

        d45 = neg d45;

     label6:
        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d45, 0.0, r0);

        $d6 = r0[0];

        $d5 = r0[1];

        d48 = $d6 + $d5;

        $d7 = r0[0];

        $d9 = d48 - $d7;

        $d8 = r0[1];

        $d10 = $d9 - $d8;

        d49 = neg $d10;

        d50 = d48 * 1.073741824E9;

        $d11 = d48 + d50;

        d0 = $d11 - d50;

        d1 = d48 - d0;

        d2 = 1.0 / d48;

        d51 = d2 * 1.073741824E9;

        $d12 = d2 + d51;

        d3 = $d12 - d51;

        d52 = d2 - d3;

        $d13 = d0 * d3;

        $d15 = 1.0 - $d13;

        $d14 = d0 * d52;

        $d17 = $d15 - $d14;

        $d16 = d1 * d3;

        $d19 = $d17 - $d16;

        $d18 = d1 * d52;

        $d20 = $d19 - $d18;

        $d21 = $d20 * d2;

        d53 = d52 + $d21;

        $d22 = neg d49;

        $d23 = $d22 * d2;

        $d24 = $d23 * d2;

        d54 = d53 + $d24;

        d55 = d48 + d3;

        $d25 = d55 - d48;

        $d26 = $d25 - d3;

        $d27 = neg $d26;

        d56 = d49 + $d27;

        d58 = d55 + d54;

        $d28 = d58 - d55;

        $d29 = $d28 - d54;

        $d30 = neg $d29;

        d59 = d56 + $d30;

        d61 = d58 + d59;

        d62 = d61 * 0.5;

        return d62;
    }

    public static double sinh(double)
    {
        double d0, d1, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d94, d95, d97, d98, d99, d100, d101, d102, d103, d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, d115, d116, d118;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        boolean z0;
        double[] r0, r1;

        d75 := @parameter0: double;

        z0 = 0;

        $b0 = d75 cmpl d75;

        if $b0 == 0 goto label01;

        return d75;

     label01:
        $b1 = d75 cmpl 20.0;

        if $b1 <= 0 goto label03;

        $d69 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $b7 = d75 cmpl $d69;

        if $b7 < 0 goto label02;

        $d72 = 0.5 * d75;

        d76 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d72);

        $d73 = 0.5 * d76;

        $d74 = $d73 * d76;

        return $d74;

     label02:
        $d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d75);

        $d71 = 0.5 * $d70;

        return $d71;

     label03:
        $b2 = d75 cmpg -20.0;

        if $b2 >= 0 goto label05;

        $d61 = <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE>;

        $d62 = neg $d61;

        $b6 = d75 cmpg $d62;

        if $b6 > 0 goto label04;

        $d66 = -0.5 * d75;

        d77 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d66);

        $d67 = -0.5 * d77;

        $d68 = $d67 * d77;

        return $d68;

     label04:
        $d63 = neg d75;

        $d64 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d63);

        $d65 = -0.5 * $d64;

        return $d65;

     label05:
        $b3 = d75 cmpl 0.0;

        if $b3 != 0 goto label06;

        return d75;

     label06:
        $b4 = d75 cmpg 0.0;

        if $b4 >= 0 goto label07;

        d75 = neg d75;

        z0 = 1;

     label07:
        $b5 = d75 cmpl 0.25;

        if $b5 <= 0 goto label08;

        r0 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d75, 0.0, r0);

        $d36 = r0[0];

        $d35 = r0[1];

        d78 = $d36 + $d35;

        $d37 = r0[0];

        $d39 = d78 - $d37;

        $d38 = r0[1];

        $d40 = $d39 - $d38;

        d79 = neg $d40;

        d80 = d78 * 1.073741824E9;

        $d41 = d78 + d80;

        d81 = $d41 - d80;

        d82 = d78 - d81;

        d83 = 1.0 / d78;

        d84 = d83 * 1.073741824E9;

        $d42 = d83 + d84;

        d85 = $d42 - d84;

        d86 = d83 - d85;

        $d43 = d81 * d85;

        $d45 = 1.0 - $d43;

        $d44 = d81 * d86;

        $d47 = $d45 - $d44;

        $d46 = d82 * d85;

        $d49 = $d47 - $d46;

        $d48 = d82 * d86;

        $d50 = $d49 - $d48;

        $d51 = $d50 * d83;

        d87 = d86 + $d51;

        $d52 = neg d79;

        $d53 = $d52 * d83;

        $d54 = $d53 * d83;

        d88 = d87 + $d54;

        d89 = neg d85;

        d90 = neg d88;

        d91 = d78 + d89;

        $d55 = d91 - d78;

        $d56 = $d55 - d89;

        $d57 = neg $d56;

        d92 = d79 + $d57;

        d94 = d91 + d90;

        $d58 = d94 - d91;

        $d59 = $d58 - d90;

        $d60 = neg $d59;

        d95 = d92 + $d60;

        d97 = d94 + d95;

        d98 = d97 * 0.5;

        goto label09;

     label08:
        r1 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>(d75, r1);

        $d4 = r1[0];

        $d3 = r1[1];

        d99 = $d4 + $d3;

        $d5 = r1[0];

        $d7 = d99 - $d5;

        $d6 = r1[1];

        $d8 = $d7 - $d6;

        d100 = neg $d8;

        d101 = 1.0 + d99;

        d102 = 1.0 / d101;

        $d9 = d101 - 1.0;

        $d10 = $d9 - d99;

        $d11 = neg $d10;

        d103 = $d11 + d100;

        d104 = d99 * d102;

        d105 = d104 * 1.073741824E9;

        $d12 = d104 + d105;

        d106 = $d12 - d105;

        d107 = d104 - d106;

        d108 = d101 * 1.073741824E9;

        $d13 = d101 + d108;

        d0 = $d13 - d108;

        d1 = d101 - d0;

        $d14 = d0 * d106;

        $d16 = d99 - $d14;

        $d15 = d0 * d107;

        $d18 = $d16 - $d15;

        $d17 = d1 * d106;

        $d20 = $d18 - $d17;

        $d19 = d1 * d107;

        $d21 = $d20 - $d19;

        $d22 = $d21 * d102;

        d109 = d107 + $d22;

        $d23 = d100 * d102;

        d110 = d109 + $d23;

        $d24 = neg d99;

        $d25 = $d24 * d103;

        $d26 = $d25 * d102;

        $d27 = $d26 * d102;

        d111 = d110 + $d27;

        d112 = d99 + d106;

        $d28 = d112 - d99;

        $d29 = $d28 - d106;

        $d30 = neg $d29;

        d113 = d100 + $d30;

        d115 = d112 + d111;

        $d31 = d115 - d112;

        $d32 = $d31 - d111;

        $d33 = neg $d32;

        d116 = d113 + $d33;

        d118 = d115 + d116;

        d98 = d118 * 0.5;

     label09:
        if z0 == 0 goto label10;

        d98 = neg d98;

     label10:
        return d98;
    }

    public static double tanh(double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        double $d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, d63, d64, d65, d66, d67, d68, d69, d71, d72, d73, d74, d76, d77, d78, d79, d80, d81, d82, d83, d84, d85, d86, d87, d88, d91, d92, d93, d94, d96, d97, d98, d99, d100, d101, d102, d103, d104, d105;
        boolean z0;
        double[] r0, r1;

        d63 := @parameter0: double;

        z0 = 0;

        $b0 = d63 cmpl d63;

        if $b0 == 0 goto label1;

        return d63;

     label1:
        $b1 = d63 cmpl 20.0;

        if $b1 <= 0 goto label2;

        return 1.0;

     label2:
        $b2 = d63 cmpg -20.0;

        if $b2 >= 0 goto label3;

        return -1.0;

     label3:
        $b3 = d63 cmpl 0.0;

        if $b3 != 0 goto label4;

        return d63;

     label4:
        $b4 = d63 cmpg 0.0;

        if $b4 >= 0 goto label5;

        d63 = neg d63;

        z0 = 1;

     label5:
        $b5 = d63 cmpl 0.5;

        if $b5 < 0 goto label6;

        r0 = newarray (double)[2];

        $d29 = d63 * 2.0;

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d29, 0.0, r0);

        $d32 = r0[0];

        $d31 = r0[1];

        d64 = $d32 + $d31;

        $d33 = r0[0];

        $d35 = d64 - $d33;

        $d34 = r0[1];

        $d36 = $d35 - $d34;

        d65 = neg $d36;

        d66 = -1.0 + d64;

        $d37 = d66 + 1.0;

        $d38 = $d37 - d64;

        d67 = neg $d38;

        d68 = d66 + d65;

        $d39 = d68 - d66;

        $d40 = $d39 - d65;

        $d41 = neg $d40;

        d69 = d67 + $d41;

        d71 = 1.0 + d64;

        $d42 = d71 - 1.0;

        $d43 = $d42 - d64;

        d72 = neg $d43;

        d73 = d71 + d65;

        $d44 = d73 - d71;

        $d45 = $d44 - d65;

        $d46 = neg $d45;

        d74 = d72 + $d46;

        d76 = d73 * 1.073741824E9;

        $d47 = d73 + d76;

        d77 = $d47 - d76;

        d78 = d73 - d77;

        d79 = d68 / d73;

        d80 = d79 * 1.073741824E9;

        $d48 = d79 + d80;

        d81 = $d48 - d80;

        d82 = d79 - d81;

        $d49 = d77 * d81;

        $d51 = d68 - $d49;

        $d50 = d77 * d82;

        $d53 = $d51 - $d50;

        $d52 = d78 * d81;

        $d55 = $d53 - $d52;

        $d54 = d78 * d82;

        $d56 = $d55 - $d54;

        $d57 = $d56 / d73;

        d83 = d82 + $d57;

        $d58 = d69 / d73;

        d84 = d83 + $d58;

        $d59 = neg d74;

        $d60 = $d59 * d68;

        $d61 = $d60 / d73;

        $d62 = $d61 / d73;

        d85 = d84 + $d62;

        d86 = d81 + d85;

        goto label7;

     label6:
        r1 = newarray (double)[2];

        $d0 = d63 * 2.0;

        staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>($d0, r1);

        $d3 = r1[0];

        $d2 = r1[1];

        d87 = $d3 + $d2;

        $d4 = r1[0];

        $d6 = d87 - $d4;

        $d5 = r1[1];

        $d7 = $d6 - $d5;

        d88 = neg $d7;

        d91 = 2.0 + d87;

        $d8 = d91 - 2.0;

        $d9 = $d8 - d87;

        d92 = neg $d9;

        d93 = d91 + d88;

        $d10 = d93 - d91;

        $d11 = $d10 - d88;

        $d12 = neg $d11;

        d94 = d92 + $d12;

        d96 = d93 * 1.073741824E9;

        $d13 = d93 + d96;

        d97 = $d13 - d96;

        d98 = d93 - d97;

        d99 = d87 / d93;

        d100 = d99 * 1.073741824E9;

        $d14 = d99 + d100;

        d101 = $d14 - d100;

        d102 = d99 - d101;

        $d15 = d97 * d101;

        $d17 = d87 - $d15;

        $d16 = d97 * d102;

        $d19 = $d17 - $d16;

        $d18 = d98 * d101;

        $d21 = $d19 - $d18;

        $d20 = d98 * d102;

        $d22 = $d21 - $d20;

        $d23 = $d22 / d93;

        d103 = d102 + $d23;

        $d24 = d88 / d93;

        d104 = d103 + $d24;

        $d25 = neg d94;

        $d26 = $d25 * d87;

        $d27 = $d26 / d93;

        $d28 = $d27 / d93;

        d105 = d104 + $d28;

        d86 = d101 + d105;

     label7:
        if z0 == 0 goto label8;

        d86 = neg d86;

     label8:
        return d86;
    }

    public static double acosh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = d0 * d0;

        $d2 = $d1 - 1.0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        $d4 = d0 + $d3;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d4);

        return $d5;
    }

    public static double asinh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, d65, d66, $d67;
        byte $b0, $b1, $b2, $b3, $b4;
        boolean z0;

        d65 := @parameter0: double;

        z0 = 0;

        $b0 = d65 cmpg 0.0;

        if $b0 >= 0 goto label1;

        z0 = 1;

        d65 = neg d65;

     label1:
        $b1 = d65 cmpl 0.167;

        if $b1 <= 0 goto label2;

        $d61 = d65 * d65;

        $d62 = $d61 + 1.0;

        $d63 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d62);

        $d64 = $d63 + d65;

        d66 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d64);

        goto label6;

     label2:
        d0 = d65 * d65;

        $b2 = d65 cmpl 0.097;

        if $b2 <= 0 goto label3;

        $d37 = d0 * 0.058823529411764705;

        $d38 = $d37 * 0.9375;

        $d39 = 0.06666666666666667 - $d38;

        $d40 = d0 * $d39;

        $d41 = $d40 * 0.9285714285714286;

        $d42 = 0.07692307692307693 - $d41;

        $d43 = d0 * $d42;

        $d44 = $d43 * 0.9166666666666666;

        $d45 = 0.09090909090909091 - $d44;

        $d46 = d0 * $d45;

        $d47 = $d46 * 0.9;

        $d48 = 0.1111111111111111 - $d47;

        $d49 = d0 * $d48;

        $d50 = $d49 * 0.875;

        $d51 = 0.14285714285714285 - $d50;

        $d52 = d0 * $d51;

        $d53 = $d52 * 0.8333333333333334;

        $d54 = 0.2 - $d53;

        $d55 = d0 * $d54;

        $d56 = $d55 * 0.75;

        $d57 = 0.3333333333333333 - $d56;

        $d58 = d0 * $d57;

        $d59 = $d58 * 0.5;

        $d60 = 1.0 - $d59;

        d66 = d65 * $d60;

        goto label6;

     label3:
        $b3 = d65 cmpl 0.036;

        if $b3 <= 0 goto label4;

        $d19 = d0 * 0.07692307692307693;

        $d20 = $d19 * 0.9166666666666666;

        $d21 = 0.09090909090909091 - $d20;

        $d22 = d0 * $d21;

        $d23 = $d22 * 0.9;

        $d24 = 0.1111111111111111 - $d23;

        $d25 = d0 * $d24;

        $d26 = $d25 * 0.875;

        $d27 = 0.14285714285714285 - $d26;

        $d28 = d0 * $d27;

        $d29 = $d28 * 0.8333333333333334;

        $d30 = 0.2 - $d29;

        $d31 = d0 * $d30;

        $d32 = $d31 * 0.75;

        $d33 = 0.3333333333333333 - $d32;

        $d34 = d0 * $d33;

        $d35 = $d34 * 0.5;

        $d36 = 1.0 - $d35;

        d66 = d65 * $d36;

        goto label6;

     label4:
        $b4 = d65 cmpl 0.0036;

        if $b4 <= 0 goto label5;

        $d7 = d0 * 0.1111111111111111;

        $d8 = $d7 * 0.875;

        $d9 = 0.14285714285714285 - $d8;

        $d10 = d0 * $d9;

        $d11 = $d10 * 0.8333333333333334;

        $d12 = 0.2 - $d11;

        $d13 = d0 * $d12;

        $d14 = $d13 * 0.75;

        $d15 = 0.3333333333333333 - $d14;

        $d16 = d0 * $d15;

        $d17 = $d16 * 0.5;

        $d18 = 1.0 - $d17;

        d66 = d65 * $d18;

        goto label6;

     label5:
        $d1 = d0 * 0.2;

        $d2 = $d1 * 0.75;

        $d3 = 0.3333333333333333 - $d2;

        $d4 = d0 * $d3;

        $d5 = $d4 * 0.5;

        $d6 = 1.0 - $d5;

        d66 = d65 * $d6;

     label6:
        if z0 == 0 goto label7;

        $d67 = neg d66;

        goto label8;

     label7:
        $d67 = d66;

     label8:
        return $d67;
    }

    public static double atanh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, d45, d46, $d47;
        byte $b0, $b1, $b2, $b3, $b4;
        boolean z0;

        d45 := @parameter0: double;

        z0 = 0;

        $b0 = d45 cmpg 0.0;

        if $b0 >= 0 goto label1;

        z0 = 1;

        d45 = neg d45;

     label1:
        $b1 = d45 cmpl 0.15;

        if $b1 <= 0 goto label2;

        $d42 = 1.0 + d45;

        $d41 = 1.0 - d45;

        $d43 = $d42 / $d41;

        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d43);

        d46 = 0.5 * $d44;

        goto label6;

     label2:
        d0 = d45 * d45;

        $b2 = d45 cmpl 0.087;

        if $b2 <= 0 goto label3;

        $d25 = d0 * 0.058823529411764705;

        $d26 = 0.06666666666666667 + $d25;

        $d27 = d0 * $d26;

        $d28 = 0.07692307692307693 + $d27;

        $d29 = d0 * $d28;

        $d30 = 0.09090909090909091 + $d29;

        $d31 = d0 * $d30;

        $d32 = 0.1111111111111111 + $d31;

        $d33 = d0 * $d32;

        $d34 = 0.14285714285714285 + $d33;

        $d35 = d0 * $d34;

        $d36 = 0.2 + $d35;

        $d37 = d0 * $d36;

        $d38 = 0.3333333333333333 + $d37;

        $d39 = d0 * $d38;

        $d40 = 1.0 + $d39;

        d46 = d45 * $d40;

        goto label6;

     label3:
        $b3 = d45 cmpl 0.031;

        if $b3 <= 0 goto label4;

        $d13 = d0 * 0.07692307692307693;

        $d14 = 0.09090909090909091 + $d13;

        $d15 = d0 * $d14;

        $d16 = 0.1111111111111111 + $d15;

        $d17 = d0 * $d16;

        $d18 = 0.14285714285714285 + $d17;

        $d19 = d0 * $d18;

        $d20 = 0.2 + $d19;

        $d21 = d0 * $d20;

        $d22 = 0.3333333333333333 + $d21;

        $d23 = d0 * $d22;

        $d24 = 1.0 + $d23;

        d46 = d45 * $d24;

        goto label6;

     label4:
        $b4 = d45 cmpl 0.003;

        if $b4 <= 0 goto label5;

        $d5 = d0 * 0.1111111111111111;

        $d6 = 0.14285714285714285 + $d5;

        $d7 = d0 * $d6;

        $d8 = 0.2 + $d7;

        $d9 = d0 * $d8;

        $d10 = 0.3333333333333333 + $d9;

        $d11 = d0 * $d10;

        $d12 = 1.0 + $d11;

        d46 = d45 * $d12;

        goto label6;

     label5:
        $d1 = d0 * 0.2;

        $d2 = 0.3333333333333333 + $d1;

        $d3 = d0 * $d2;

        $d4 = 1.0 + $d3;

        d46 = d45 * $d4;

     label6:
        if z0 == 0 goto label7;

        $d47 = neg d46;

        goto label8;

     label7:
        $d47 = d46;

     label8:
        return $d47;
    }

    public static double signum(double)
    {
        double d0, $d1;
        byte $b0, $b1;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $d1 = -1.0;

        goto label3;

     label1:
        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $d1 = 1.0;

        goto label3;

     label2:
        $d1 = d0;

     label3:
        return $d1;
    }

    public static float signum(float)
    {
        float f0, $f1;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $f1 = -1.0F;

        goto label3;

     label1:
        $b1 = f0 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        $f1 = 1.0F;

        goto label3;

     label2:
        $f1 = f0;

     label3:
        return $f1;
    }

    public static double nextUp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d0, #Infinity);

        return $d1;
    }

    public static float nextUp(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <org.apache.commons.math3.util.FastMath: float nextAfter(float,double)>(f0, #Infinity);

        return $f1;
    }

    public static double nextDown(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d0, #-Infinity);

        return $d1;
    }

    public static float nextDown(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <org.apache.commons.math3.util.FastMath: float nextAfter(float,double)>(f0, #-Infinity);

        return $f1;
    }

    public static double random()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        return $d0;
    }

    public static double exp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d0, 0.0, null);

        return $d1;
    }

    private static double exp(double, double, double[])
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, d53, d54, d56, d57, d58, d59, d60;
        double[] r0, $r1, $r2, $r3, $r4;
        byte $b0, $b3, $b4;
        int $i1, $i2, i5, i6;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: double[];

        i5 = (int) d0;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label07;

        $b4 = d0 cmpg -746.0;

        if $b4 >= 0 goto label02;

        if r0 == null goto label01;

        r0[0] = 0.0;

        r0[1] = 0.0;

     label01:
        return 0.0;

     label02:
        if i5 >= -709 goto label04;

        $d47 = d0 + 40.19140625;

        $d48 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d47, d1, r0);

        d53 = $d48 / 2.85040095144011776E17;

        if r0 == null goto label03;

        $d49 = r0[0];

        $d50 = $d49 / 2.85040095144011776E17;

        r0[0] = $d50;

        $d51 = r0[1];

        $d52 = $d51 / 2.85040095144011776E17;

        r0[1] = $d52;

     label03:
        return d53;

     label04:
        if i5 != -709 goto label06;

        $d41 = d0 + 1.494140625;

        $d42 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>($d41, d1, r0);

        d54 = $d42 / 4.455505956692757;

        if r0 == null goto label05;

        $d43 = r0[0];

        $d44 = $d43 / 4.455505956692757;

        r0[0] = $d44;

        $d45 = r0[1];

        $d46 = $d45 / 4.455505956692757;

        r0[1] = $d46;

     label05:
        return d54;

     label06:
        i5 = i5 + -1;

        goto label09;

     label07:
        if i5 <= 709 goto label09;

        if r0 == null goto label08;

        r0[0] = #Infinity;

        r0[1] = 0.0;

     label08:
        return #Infinity;

     label09:
        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$000()>();

        $i1 = 750 + i5;

        d2 = $r1[$i1];

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$100()>();

        $i2 = 750 + i5;

        d3 = $r2[$i2];

        $d10 = (double) i5;

        $d11 = d0 - $d10;

        $d12 = $d11 * 1024.0;

        i6 = (int) $d12;

        $r3 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        d4 = $r3[i6];

        $r4 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        d5 = $r4[i6];

        $d15 = (double) i5;

        $d13 = (double) i6;

        $d14 = $d13 / 1024.0;

        $d16 = $d15 + $d14;

        d6 = d0 - $d16;

        $d17 = 0.04168701738764507 * d6;

        d56 = $d17 + 0.1666666505023083;

        $d18 = d56 * d6;

        d57 = $d18 + 0.5000000000042687;

        $d19 = d57 * d6;

        d58 = $d19 + 1.0;

        $d20 = d58 * d6;

        d59 = $d20 + -3.940510424527919E-20;

        d7 = d2 * d4;

        $d22 = d2 * d5;

        $d21 = d3 * d4;

        $d24 = $d22 + $d21;

        $d23 = d3 * d5;

        d8 = $d24 + $d23;

        d9 = d8 + d7;

        $b3 = d1 cmpl 0.0;

        if $b3 == 0 goto label10;

        $d34 = d9 * d1;

        $d36 = $d34 * d59;

        $d35 = d9 * d1;

        $d38 = $d36 + $d35;

        $d37 = d9 * d59;

        $d39 = $d38 + $d37;

        $d40 = $d39 + d8;

        d60 = $d40 + d7;

        goto label11;

     label10:
        $d25 = d9 * d59;

        $d26 = $d25 + d8;

        d60 = $d26 + d7;

     label11:
        if r0 == null goto label12;

        r0[0] = d7;

        $d27 = d9 * d1;

        $d29 = $d27 * d59;

        $d28 = d9 * d1;

        $d31 = $d29 + $d28;

        $d30 = d9 * d59;

        $d32 = $d31 + $d30;

        $d33 = $d32 + d8;

        r0[1] = $d33;

     label12:
        return d60;
    }

    public static double expm1(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double,double[])>(d0, null);

        return $d1;
    }

    private static double expm1(double, double[])
    {
        double[] r0, $r1, $r2, r3;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, d80, d81, d82, d83, d84, d85, d86, d88, d89, d91, d92, d93, d94, d95, d97, d98, d100, d101, d102, d104, d105, d106, d108, d109, d111, d112, d114, d115, d117, d118, d120, d121, d123, d124, d125, d126, d127, d128, d129, d130, d131, d132, d133;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        boolean z0;
        int i6;

        d80 := @parameter0: double;

        r0 := @parameter1: double[];

        $b0 = d80 cmpl d80;

        if $b0 != 0 goto label1;

        $b1 = d80 cmpl 0.0;

        if $b1 != 0 goto label2;

     label1:
        return d80;

     label2:
        $b2 = d80 cmpg -1.0;

        if $b2 <= 0 goto label3;

        $b4 = d80 cmpl 1.0;

        if $b4 < 0 goto label5;

     label3:
        r3 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d80, 0.0, r3);

        $b3 = d80 cmpl 0.0;

        if $b3 <= 0 goto label4;

        $d15 = r3[0];

        $d17 = -1.0 + $d15;

        $d16 = r3[1];

        $d18 = $d17 + $d16;

        return $d18;

     label4:
        $d9 = r3[0];

        d0 = -1.0 + $d9;

        $d11 = d0 + 1.0;

        $d10 = r3[0];

        $d12 = $d11 - $d10;

        d81 = neg $d12;

        $d13 = r3[1];

        d82 = d81 + $d13;

        $d14 = d0 + d82;

        return $d14;

     label5:
        z0 = 0;

        $b5 = d80 cmpg 0.0;

        if $b5 >= 0 goto label6;

        d80 = neg d80;

        z0 = 1;

     label6:
        $d19 = d80 * 1024.0;

        i6 = (int) $d19;

        $r1 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        $d20 = $r1[i6];

        d83 = $d20 - 1.0;

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        d84 = $r2[i6];

        d85 = d83 + d84;

        $d21 = d85 - d83;

        $d22 = $d21 - d84;

        d86 = neg $d22;

        d88 = d85 * 1.073741824E9;

        $d23 = d85 + d88;

        d89 = $d23 - d88;

        $d24 = d85 - d89;

        d1 = d86 + $d24;

        $d25 = (double) i6;

        $d26 = $d25 / 1024.0;

        d2 = d80 - $d26;

        $d27 = 0.008336750013465571 * d2;

        d91 = $d27 + 0.041666663879186654;

        $d28 = d91 * d2;

        d92 = $d28 + 0.16666666666745392;

        $d29 = d92 * d2;

        d93 = $d29 + 0.49999999999999994;

        d94 = d93 * d2;

        d95 = d94 * d2;

        d97 = d2 + d95;

        $d30 = d97 - d2;

        $d31 = $d30 - d95;

        d98 = neg $d31;

        d100 = d97 * 1.073741824E9;

        $d32 = d97 + d100;

        d101 = $d32 - d100;

        $d33 = d97 - d101;

        d102 = d98 + $d33;

        d104 = d101 * d89;

        $d34 = d101 * d1;

        d105 = d104 + $d34;

        $d36 = d105 - d104;

        $d35 = d101 * d1;

        $d37 = $d36 - $d35;

        d106 = neg $d37;

        $d38 = d102 * d89;

        d108 = d105 + $d38;

        $d40 = d108 - d105;

        $d39 = d102 * d89;

        $d41 = $d40 - $d39;

        $d42 = neg $d41;

        d109 = d106 + $d42;

        $d43 = d102 * d1;

        d111 = d108 + $d43;

        $d45 = d111 - d108;

        $d44 = d102 * d1;

        $d46 = $d45 - $d44;

        $d47 = neg $d46;

        d112 = d109 + $d47;

        d114 = d111 + d89;

        $d48 = d114 - d89;

        $d49 = $d48 - d111;

        $d50 = neg $d49;

        d115 = d112 + $d50;

        d117 = d114 + d101;

        $d51 = d117 - d114;

        $d52 = $d51 - d101;

        $d53 = neg $d52;

        d118 = d115 + $d53;

        d120 = d117 + d1;

        $d54 = d120 - d117;

        $d55 = $d54 - d1;

        $d56 = neg $d55;

        d121 = d118 + $d56;

        d123 = d120 + d102;

        $d57 = d123 - d120;

        $d58 = $d57 - d102;

        $d59 = neg $d58;

        d124 = d121 + $d59;

        d125 = d123;

        if z0 == 0 goto label7;

        d3 = 1.0 + d123;

        d4 = 1.0 / d3;

        $d61 = d3 - 1.0;

        $d62 = $d61 - d123;

        $d63 = neg $d62;

        d5 = $d63 + d124;

        d6 = d123 * d4;

        d126 = d6 * 1.073741824E9;

        $d64 = d6 + d126;

        d7 = $d64 - d126;

        d127 = d6 - d7;

        d128 = d3 * 1.073741824E9;

        $d65 = d3 + d128;

        d129 = $d65 - d128;

        d130 = d3 - d129;

        $d66 = d129 * d7;

        $d68 = d123 - $d66;

        $d67 = d129 * d127;

        $d70 = $d68 - $d67;

        $d69 = d130 * d7;

        $d72 = $d70 - $d69;

        $d71 = d130 * d127;

        $d73 = $d72 - $d71;

        $d74 = $d73 * d4;

        d131 = d127 + $d74;

        $d75 = d124 * d4;

        d132 = d131 + $d75;

        $d76 = neg d123;

        $d77 = $d76 * d5;

        $d78 = $d77 * d4;

        $d79 = $d78 * d4;

        d133 = d132 + $d79;

        d125 = neg d7;

        d124 = neg d133;

     label7:
        if r0 == null goto label8;

        r0[0] = d125;

        r0[1] = d124;

     label8:
        $d60 = d125 + d124;

        return $d60;
    }

    public static double log(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>(d0, null);

        return $d1;
    }

    private static double log(double, double[])
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, d70, d72, d73, d74, d77, d78, d79, d80, d81, d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, $d92, $d93, $d94, d96, d97, d98, d99, d102, d103, d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, d114, d115, d116, d118, d119, d120, d121, d122, d123, d125, d126, d128, d129, d130, d132, d133, d134, d136, d137, d138, d140, d141, d142, d144;
        double[] r0, r1, r2, r3, r4, r14;
        byte $b0, $b2, $b3, $b4, $b8, $b9, $b15, $b19, $b21, $b22;
        long $l1, $l5, $l7, $l10, $l11, $l20, l23, $l26, $l27, $l29, $l30;
        int $i6, $i12, $i13, $i14, $i16, $i17, $i18, i24, i25, $i28, i31;
        double[][] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label01;

        return #-Infinity;

     label01:
        l23 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = l23 & -9223372036854775808L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label02;

        $b22 = d0 cmpl d0;

        if $b22 == 0 goto label04;

     label02:
        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label04;

        if r0 == null goto label03;

        r0[0] = #NaN;

     label03:
        return #NaN;

     label04:
        $b4 = d0 cmpl #Infinity;

        if $b4 != 0 goto label06;

        if r0 == null goto label05;

        r0[0] = #Infinity;

     label05:
        return #Infinity;

     label06:
        $l5 = l23 >> 52;

        $i6 = (int) $l5;

        i24 = $i6 - 1023;

        $l7 = l23 & 9218868437227405312L;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label10;

        $b19 = d0 cmpl 0.0;

        if $b19 != 0 goto label08;

        if r0 == null goto label07;

        r0[0] = #-Infinity;

     label07:
        return #-Infinity;

     label08:
        l23 = l23 << 1;

     label09:
        $l20 = l23 & 4503599627370496L;

        $b21 = $l20 cmp 0L;

        if $b21 != 0 goto label10;

        i24 = i24 + -1;

        l23 = l23 << 1;

        goto label09;

     label10:
        if i24 == -1 goto label11;

        if i24 != 0 goto label14;

     label11:
        $b9 = d0 cmpg 1.01;

        if $b9 >= 0 goto label14;

        $b15 = d0 cmpl 0.99;

        if $b15 <= 0 goto label14;

        if r0 != null goto label14;

        d70 = d0 - 1.0;

        d72 = d70 * 1.073741824E9;

        $d52 = d70 + d72;

        d73 = $d52 - d72;

        d74 = d70 - d73;

        $r10 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $r9 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $i16 = lengthof $r9;

        $i17 = $i16 - 1;

        r1 = $r10[$i17];

        d77 = r1[0];

        d78 = r1[1];

        $r11 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        $i18 = lengthof $r11;

        i25 = $i18 - 2;

     label12:
        if i25 < 0 goto label13;

        d79 = d77 * d73;

        $d61 = d77 * d74;

        $d60 = d78 * d73;

        $d63 = $d61 + $d60;

        $d62 = d78 * d74;

        d80 = $d63 + $d62;

        d81 = d79 * 1.073741824E9;

        $d64 = d79 + d81;

        d82 = $d64 - d81;

        $d65 = d79 - d82;

        d83 = $d65 + d80;

        $r12 = <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF>;

        r2 = $r12[i25];

        $d66 = r2[0];

        d84 = d82 + $d66;

        $d67 = r2[1];

        d85 = d83 + $d67;

        d86 = d84 * 1.073741824E9;

        $d68 = d84 + d86;

        d77 = $d68 - d86;

        $d69 = d84 - d77;

        d78 = $d69 + d85;

        i25 = i25 + -1;

        goto label12;

     label13:
        d87 = d77 * d73;

        $d54 = d77 * d74;

        $d53 = d78 * d73;

        $d56 = $d54 + $d53;

        $d55 = d78 * d74;

        d88 = $d56 + $d55;

        d89 = d87 * 1.073741824E9;

        $d57 = d87 + d89;

        d90 = $d57 - d89;

        $d58 = d87 - d90;

        d91 = $d58 + d88;

        $d59 = d90 + d91;

        return $d59;

     label14:
        $r13 = staticinvoke <org.apache.commons.math3.util.FastMath$lnMant: double[][] access$400()>();

        $l26 = l23 & 4499201580859392L;

        $l27 = $l26 >> 42;

        $i28 = (int) $l27;

        r14 = $r13[$i28];

        $l29 = l23 & 4398046511103L;

        $d92 = (double) $l29;

        $l30 = l23 & 4499201580859392L;

        $d93 = (double) $l30;

        $d94 = 4.503599627370496E15 + $d93;

        d1 = $d92 / $d94;

        d96 = 0.0;

        if r0 == null goto label17;

        d97 = d1 * 1.073741824E9;

        $d29 = d1 + d97;

        d98 = $d29 - d97;

        d99 = d1 - d98;

        $l10 = l23 & 4398046511103L;

        d2 = (double) $l10;

        $l11 = l23 & 4499201580859392L;

        $d30 = (double) $l11;

        d3 = 4.503599627370496E15 + $d30;

        $d31 = d98 * d3;

        $d33 = d2 - $d31;

        $d32 = d99 * d3;

        d102 = $d33 - $d32;

        $d34 = d102 / d3;

        d103 = d99 + $d34;

        $r6 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $r5 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $i12 = lengthof $r5;

        $i13 = $i12 - 1;

        r3 = $r6[$i13];

        d104 = r3[0];

        d105 = r3[1];

        $r7 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        $i14 = lengthof $r7;

        i31 = $i14 - 2;

     label15:
        if i31 < 0 goto label16;

        d106 = d104 * d98;

        $d42 = d104 * d103;

        $d41 = d105 * d98;

        $d44 = $d42 + $d41;

        $d43 = d105 * d103;

        d107 = $d44 + $d43;

        d108 = d106 * 1.073741824E9;

        $d45 = d106 + d108;

        d109 = $d45 - d108;

        $d46 = d106 - d109;

        d110 = $d46 + d107;

        $r8 = <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF>;

        r4 = $r8[i31];

        $d47 = r4[0];

        d111 = d109 + $d47;

        $d48 = r4[1];

        d112 = d110 + $d48;

        d113 = d111 * 1.073741824E9;

        $d49 = d111 + d113;

        d104 = $d49 - d113;

        $d50 = d111 - d104;

        d105 = $d50 + d112;

        i31 = i31 + -1;

        goto label15;

     label16:
        d114 = d104 * d98;

        $d36 = d104 * d103;

        $d35 = d105 * d98;

        $d38 = $d36 + $d35;

        $d37 = d105 * d103;

        d115 = $d38 + $d37;

        d116 = d114 + d115;

        $d39 = d116 - d114;

        $d40 = $d39 - d115;

        d96 = neg $d40;

        goto label18;

     label17:
        $d4 = -0.16624882440418567 * d1;

        d118 = $d4 + 0.19999954120254515;

        $d5 = d118 * d1;

        d119 = $d5 + -0.2499999997677497;

        $d6 = d119 * d1;

        d120 = $d6 + 0.3333333333332802;

        $d7 = d120 * d1;

        d121 = $d7 + -0.5;

        $d8 = d121 * d1;

        d122 = $d8 + 1.0;

        d116 = d122 * d1;

     label18:
        $d9 = (double) i24;

        d123 = 0.6931470632553101 * $d9;

        $d10 = r14[0];

        d125 = d123 + $d10;

        $d12 = d125 - d123;

        $d11 = r14[0];

        $d13 = $d12 - $d11;

        d126 = neg $d13;

        d128 = 0.0 + d126;

        d129 = d125 + d116;

        $d14 = d129 - d125;

        $d15 = $d14 - d116;

        d130 = neg $d15;

        d132 = d128 + d130;

        $d16 = (double) i24;

        $d17 = 1.1730463525082348E-7 * $d16;

        d133 = d129 + $d17;

        $d20 = d133 - d129;

        $d18 = (double) i24;

        $d19 = 1.1730463525082348E-7 * $d18;

        $d21 = $d20 - $d19;

        d134 = neg $d21;

        d136 = d132 + d134;

        $d22 = r14[1];

        d137 = d133 + $d22;

        $d24 = d137 - d133;

        $d23 = r14[1];

        $d25 = $d24 - $d23;

        d138 = neg $d25;

        d140 = d136 + d138;

        d141 = d137 + d96;

        $d26 = d141 - d137;

        $d27 = $d26 - d96;

        d142 = neg $d27;

        d144 = d140 + d142;

        if r0 == null goto label19;

        r0[0] = d141;

        r0[1] = d144;

     label19:
        $d28 = d141 + d144;

        return $d28;
    }

    public static double log1p(double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18;
        double[] r0;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl -1.0;

        if $b0 != 0 goto label1;

        return #-Infinity;

     label1:
        $b1 = d0 cmpl #Infinity;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $b2 = d0 cmpl 1.0E-6;

        if $b2 > 0 goto label3;

        $b3 = d0 cmpg -1.0E-6;

        if $b3 >= 0 goto label5;

     label3:
        d17 = 1.0 + d0;

        $d5 = d17 - 1.0;

        $d6 = $d5 - d0;

        d1 = neg $d6;

        r0 = newarray (double)[2];

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>(d17, r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z0 == 0 goto label4;

        return d2;

     label4:
        d3 = d1 / d17;

        $d7 = 0.5 * d3;

        d4 = $d7 + 1.0;

        $d9 = d4 * d3;

        $d8 = r0[1];

        $d11 = $d9 + $d8;

        $d10 = r0[0];

        $d12 = $d11 + $d10;

        return $d12;

     label5:
        $d13 = d0 * 0.3333333333333333;

        $d14 = $d13 - 0.5;

        $d15 = $d14 * d0;

        d18 = $d15 + 1.0;

        $d16 = d18 * d0;

        return $d16;
    }

    public static double log10(double)
    {
        double d0, d1, d2, d3, d4, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        double[] r0;
        boolean $z0;

        d0 := @parameter0: double;

        r0 = newarray (double)[2];

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>(d0, r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z0 == 0 goto label1;

        return d1;

     label1:
        $d7 = r0[0];

        d2 = $d7 * 1.073741824E9;

        $d8 = r0[0];

        $d9 = $d8 + d2;

        d3 = $d9 - d2;

        $d10 = r0[0];

        $d12 = $d10 - d3;

        $d11 = r0[1];

        d4 = $d12 + $d11;

        $d14 = 1.9699272335463627E-8 * d4;

        $d13 = 1.9699272335463627E-8 * d3;

        $d16 = $d14 + $d13;

        $d15 = 0.4342944622039795 * d4;

        $d18 = $d16 + $d15;

        $d17 = 0.4342944622039795 * d3;

        $d19 = $d18 + $d17;

        return $d19;
    }

    public static double log(double, double)
    {
        double d0, d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d4 = $d2 / $d3;

        return $d4;
    }

    public static double pow(double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d48, d49, d51, d52, d53, d54, d55;
        double[] r0;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b13, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b24, $b25, $b27, $b28, $b29, $b30, $b31, $b33, $b34, $b35, $b36, $b38, $b39, $b41, $b44, $b45;
        long $l12, $l14, $l15, $l23, $l26, $l32, $l37, $l40, l42, l43, l46, l47;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 = newarray (double)[2];

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label01;

        return 1.0;

     label01:
        $b1 = d0 cmpl d0;

        if $b1 == 0 goto label02;

        return d0;

     label02:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label07;

        l42 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l32 = l42 & -9223372036854775808L;

        $b33 = $l32 cmp 0L;

        if $b33 == 0 goto label04;

        l43 = (long) d1;

        $b35 = d1 cmpg 0.0;

        if $b35 >= 0 goto label03;

        $d36 = (double) l43;

        $b39 = d1 cmpl $d36;

        if $b39 != 0 goto label03;

        $l40 = l43 & 1L;

        $b41 = $l40 cmp 1L;

        if $b41 != 0 goto label03;

        return #-Infinity;

     label03:
        $b44 = d1 cmpl 0.0;

        if $b44 <= 0 goto label04;

        $d35 = (double) l43;

        $b36 = d1 cmpl $d35;

        if $b36 != 0 goto label04;

        $l37 = l43 & 1L;

        $b38 = $l37 cmp 1L;

        if $b38 != 0 goto label04;

        return -0.0;

     label04:
        $b45 = d1 cmpg 0.0;

        if $b45 >= 0 goto label05;

        return #Infinity;

     label05:
        $b34 = d1 cmpl 0.0;

        if $b34 <= 0 goto label06;

        return 0.0;

     label06:
        return #NaN;

     label07:
        $b3 = d0 cmpl #Infinity;

        if $b3 != 0 goto label10;

        $b30 = d1 cmpl d1;

        if $b30 == 0 goto label08;

        return d1;

     label08:
        $b31 = d1 cmpg 0.0;

        if $b31 >= 0 goto label09;

        return 0.0;

     label09:
        return #Infinity;

     label10:
        $b4 = d1 cmpl #Infinity;

        if $b4 != 0 goto label13;

        $d33 = d0 * d0;

        $b28 = $d33 cmpl 1.0;

        if $b28 != 0 goto label11;

        return #NaN;

     label11:
        $d34 = d0 * d0;

        $b29 = $d34 cmpl 1.0;

        if $b29 <= 0 goto label12;

        return #Infinity;

     label12:
        return 0.0;

     label13:
        $b5 = d0 cmpl #-Infinity;

        if $b5 != 0 goto label18;

        $b19 = d1 cmpl d1;

        if $b19 == 0 goto label14;

        return d1;

     label14:
        $b20 = d1 cmpg 0.0;

        if $b20 >= 0 goto label16;

        l46 = (long) d1;

        $d32 = (double) l46;

        $b25 = d1 cmpl $d32;

        if $b25 != 0 goto label15;

        $l26 = l46 & 1L;

        $b27 = $l26 cmp 1L;

        if $b27 != 0 goto label15;

        return -0.0;

     label15:
        return 0.0;

     label16:
        $b21 = d1 cmpl 0.0;

        if $b21 <= 0 goto label18;

        l47 = (long) d1;

        $d31 = (double) l47;

        $b22 = d1 cmpl $d31;

        if $b22 != 0 goto label17;

        $l23 = l47 & 1L;

        $b24 = $l23 cmp 1L;

        if $b24 != 0 goto label17;

        return #-Infinity;

     label17:
        return #Infinity;

     label18:
        $b6 = d1 cmpl #-Infinity;

        if $b6 != 0 goto label21;

        $d29 = d0 * d0;

        $b17 = $d29 cmpl 1.0;

        if $b17 != 0 goto label19;

        return #NaN;

     label19:
        $d30 = d0 * d0;

        $b18 = $d30 cmpg 1.0;

        if $b18 >= 0 goto label20;

        return #Infinity;

     label20:
        return 0.0;

     label21:
        $b7 = d0 cmpg 0.0;

        if $b7 >= 0 goto label27;

        $b10 = d1 cmpl 9.007199254740992E15;

        if $b10 >= 0 goto label22;

        $b11 = d1 cmpg -9.007199254740992E15;

        if $b11 > 0 goto label23;

     label22:
        $d23 = neg d0;

        $d24 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d23, d1);

        return $d24;

     label23:
        $l12 = (long) d1;

        $d25 = (double) $l12;

        $b13 = d1 cmpl $d25;

        if $b13 != 0 goto label26;

        $l14 = (long) d1;

        $l15 = $l14 & 1L;

        $b16 = $l15 cmp 0L;

        if $b16 != 0 goto label24;

        $d28 = neg d0;

        $d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d28, d1);

        goto label25;

     label24:
        $d26 = neg d0;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d26, d1);

        $d37 = neg $d27;

     label25:
        return $d37;

     label26:
        return #NaN;

     label27:
        $b8 = d1 cmpg 8.0E298;

        if $b8 >= 0 goto label28;

        $b9 = d1 cmpl -8.0E298;

        if $b9 <= 0 goto label28;

        d38 = d1 * 1.073741824E9;

        $d22 = d1 + d38;

        d39 = $d22 - d38;

        d40 = d1 - d39;

        goto label29;

     label28:
        d41 = d1 * 9.313225746154785E-10;

        d42 = d41 * 9.313225746154785E-10;

        $d7 = d41 + d42;

        $d8 = $d7 - d41;

        $d9 = $d8 * 1.073741824E9;

        d39 = $d9 * 1.073741824E9;

        d40 = d1 - d39;

     label29:
        d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double,double[])>(d0, r0);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d43);

        if $z0 == 0 goto label30;

        return d43;

     label30:
        d44 = r0[0];

        d45 = r0[1];

        d2 = d44 * 1.073741824E9;

        $d10 = d44 + d2;

        d3 = $d10 - d2;

        $d11 = d44 - d3;

        d46 = d45 + $d11;

        d4 = d3 * d39;

        $d13 = d3 * d40;

        $d12 = d46 * d39;

        $d15 = $d13 + $d12;

        $d14 = d46 * d40;

        d5 = $d15 + $d14;

        d48 = d4 + d5;

        $d16 = d48 - d4;

        $d17 = $d16 - d5;

        d49 = neg $d17;

        $d18 = 0.008333333333333333 * d49;

        d51 = $d18 + 0.041666666666666664;

        $d19 = d51 * d49;

        d52 = $d19 + 0.16666666666666666;

        $d20 = d52 * d49;

        d53 = $d20 + 0.5;

        $d21 = d53 * d49;

        d54 = $d21 + 1.0;

        d55 = d54 * d49;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double,double,double[])>(d48, d55, null);

        return d6;
    }

    public static double pow(double, int)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42;
        int $i1, i2;

        d27 := @parameter0: double;

        i2 := @parameter1: int;

        if i2 != 0 goto label1;

        return 1.0;

     label1:
        if i2 >= 0 goto label2;

        i2 = neg i2;

        d27 = 1.0 / d27;

     label2:
        d0 = 1.34217729E8 * d27;

        $d4 = d0 - d27;

        d1 = d0 - $d4;

        d2 = d27 - d1;

        d28 = 1.0;

        d29 = 0.0;

        d30 = d27;

        d31 = d1;

        d32 = d2;

     label3:
        if i2 == 0 goto label5;

        $i1 = i2 & 1;

        if $i1 == 0 goto label4;

        d33 = d28 * d30;

        d34 = 1.34217729E8 * d28;

        $d18 = d34 - d28;

        d35 = d34 - $d18;

        d36 = d28 - d35;

        $d25 = d36 * d32;

        $d19 = d35 * d31;

        $d21 = d33 - $d19;

        $d20 = d36 * d31;

        $d23 = $d21 - $d20;

        $d22 = d35 * d32;

        $d24 = $d23 - $d22;

        d37 = $d25 - $d24;

        d28 = d33;

        $d26 = d29 * d30;

        d29 = $d26 + d37;

     label4:
        d38 = d31 * d30;

        d39 = 1.34217729E8 * d31;

        $d6 = d39 - d31;

        d40 = d39 - $d6;

        d41 = d31 - d40;

        $d13 = d41 * d32;

        $d7 = d40 * d31;

        $d9 = d38 - $d7;

        $d8 = d41 * d31;

        $d11 = $d9 - $d8;

        $d10 = d40 * d32;

        $d12 = $d11 - $d10;

        d42 = $d13 - $d12;

        d3 = 1.34217729E8 * d38;

        $d14 = d3 - d38;

        d31 = d3 - $d14;

        $d15 = d32 * d30;

        $d17 = $d15 + d42;

        $d16 = d38 - d31;

        d32 = $d17 + $d16;

        d30 = d31 + d32;

        i2 = i2 >> 1;

        goto label3;

     label5:
        $d5 = d28 + d29;

        return $d5;
    }

    private static double polySine(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, d7, d8, d9, d10;

        d0 := @parameter0: double;

        d1 = d0 * d0;

        $d2 = 2.7553817452272217E-6 * d1;

        d7 = $d2 + -1.9841269659586505E-4;

        $d3 = d7 * d1;

        d8 = $d3 + 0.008333333333329196;

        $d4 = d8 * d1;

        d9 = $d4 + -0.16666666666666666;

        $d5 = d9 * d1;

        d10 = $d5 * d0;

        return d10;
    }

    private static double polyCosine(double)
    {
        double d0, d1, $d2, $d3, $d4, d6, d7, d8, d9;

        d0 := @parameter0: double;

        d1 = d0 * d0;

        $d2 = 2.479773539153719E-5 * d1;

        d6 = $d2 + -0.0013888888689039883;

        $d3 = d6 * d1;

        d7 = $d3 + 0.041666666666621166;

        $d4 = d7 * d1;

        d8 = $d4 + -0.49999999999999994;

        d9 = d8 * d1;

        return d9;
    }

    private static double sinQ(double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d8, d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, d40, d41, d46, d47, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59;
        int i0;
        double[] $r0, $r1, $r2, $r3, $r4;
        byte $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d12 = d0 * 8.0;

        $d13 = $d12 + 0.5;

        i0 = (int) $d13;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        $d14 = $r0[i0];

        d2 = d0 - $d14;

        $r1 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        d3 = $r1[i0];

        $r2 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        d4 = $r2[i0];

        $r3 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        d5 = $r3[i0];

        $r4 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        d6 = $r4[i0];

        d40 = staticinvoke <org.apache.commons.math3.util.FastMath: double polySine(double)>(d2);

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double polyCosine(double)>(d2);

        d9 = d2 * 1.073741824E9;

        $d15 = d2 + d9;

        d10 = $d15 - d9;

        $d16 = d2 - d10;

        d41 = d40 + $d16;

        d46 = 0.0 + d3;

        $d17 = d46 - 0.0;

        $d18 = $d17 - d3;

        d47 = neg $d18;

        d49 = 0.0 + d47;

        d50 = d5 * d10;

        d51 = d46 + d50;

        $d19 = d51 - d46;

        $d20 = $d19 - d50;

        d52 = neg $d20;

        d53 = d51;

        d54 = d49 + d52;

        $d21 = d3 * d8;

        $d23 = d54 + $d21;

        $d22 = d5 * d41;

        d55 = $d23 + $d22;

        $d25 = d55 + d4;

        $d24 = d6 * d10;

        $d27 = $d25 + $d24;

        $d26 = d4 * d8;

        $d29 = $d27 + $d26;

        $d28 = d6 * d41;

        d56 = $d29 + $d28;

        $b1 = d1 cmpl 0.0;

        if $b1 == 0 goto label1;

        $d31 = d5 + d6;

        $d30 = 1.0 + d8;

        $d35 = $d31 * $d30;

        $d33 = d3 + d4;

        $d32 = d10 + d41;

        $d34 = $d33 * $d32;

        $d36 = $d35 - $d34;

        d57 = $d36 * d1;

        d58 = d51 + d57;

        $d37 = d58 - d51;

        $d38 = $d37 - d57;

        d59 = neg $d38;

        d53 = d58;

        d56 = d56 + d59;

     label1:
        d11 = d53 + d56;

        return d11;
    }

    private static double cosQ(double, double)
    {
        double d0, d1, d4, $d5, $d6, $d7, $d8, d9, d10;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d4 = 1.5707963267948966 - d0;

        $d5 = d4 - 1.5707963267948966;

        $d6 = $d5 + d0;

        d9 = neg $d6;

        $d7 = 6.123233995736766E-17 - d1;

        d10 = d9 + $d7;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d4, d10);

        return $d8;
    }

    private static double tanQ(double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, d69, d70, d71, d76, d77, d79, d80, d81, d82, d84, d85, d86, d87, d88, d93, d94, d95, d97, d98, d99, d100, d102, d103, d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, d114, d115, $d116;
        boolean z0;
        int i0;
        double[] $r0, $r1, $r2, $r3, $r4;
        byte $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        z0 := @parameter2: boolean;

        $d14 = d0 * 8.0;

        $d15 = $d14 + 0.5;

        i0 = (int) $d15;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        $d16 = $r0[i0];

        d2 = d0 - $d16;

        $r1 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        d3 = $r1[i0];

        $r2 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        d4 = $r2[i0];

        $r3 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        d5 = $r3[i0];

        $r4 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        d6 = $r4[i0];

        d69 = staticinvoke <org.apache.commons.math3.util.FastMath: double polySine(double)>(d2);

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double polyCosine(double)>(d2);

        d70 = d2 * 1.073741824E9;

        $d17 = d2 + d70;

        d9 = $d17 - d70;

        $d18 = d2 - d9;

        d71 = d69 + $d18;

        d76 = 0.0 + d3;

        $d19 = d76 - 0.0;

        $d20 = $d19 - d3;

        d77 = neg $d20;

        d79 = 0.0 + d77;

        d80 = d5 * d9;

        d81 = d76 + d80;

        $d21 = d81 - d76;

        $d22 = $d21 - d80;

        d82 = neg $d22;

        d84 = d79 + d82;

        $d24 = d3 * d8;

        $d23 = d5 * d71;

        $d25 = $d24 + $d23;

        d85 = d84 + $d25;

        $d26 = d6 * d9;

        $d28 = d4 + $d26;

        $d27 = d4 * d8;

        $d30 = $d28 + $d27;

        $d29 = d6 * d71;

        $d31 = $d30 + $d29;

        d86 = d85 + $d31;

        d87 = d81 + d86;

        $d32 = d87 - d81;

        $d33 = $d32 - d86;

        d88 = neg $d33;

        d93 = d5 * 1.0;

        d94 = 0.0 + d93;

        $d34 = d94 - 0.0;

        $d35 = $d34 - d93;

        d95 = neg $d35;

        d97 = 0.0 + d95;

        $d36 = neg d3;

        d98 = $d36 * d9;

        d99 = d94 + d98;

        $d37 = d99 - d94;

        $d38 = $d37 - d98;

        d100 = neg $d38;

        d102 = d97 + d100;

        $d40 = d6 * 1.0;

        $d39 = d5 * d8;

        $d42 = $d40 + $d39;

        $d41 = d6 * d8;

        $d43 = $d42 + $d41;

        d103 = d102 + $d43;

        $d45 = d4 * d9;

        $d44 = d3 * d71;

        $d47 = $d45 + $d44;

        $d46 = d4 * d71;

        $d48 = $d47 + $d46;

        d104 = d103 - $d48;

        d105 = d99 + d104;

        $d49 = d105 - d99;

        $d50 = $d49 - d104;

        d106 = neg $d50;

        if z0 == 0 goto label1;

        d107 = d105;

        d105 = d87;

        d87 = d107;

        d108 = d106;

        d106 = d88;

        d88 = d108;

     label1:
        d109 = d87 / d105;

        d110 = d109 * 1.073741824E9;

        $d51 = d109 + d110;

        d10 = $d51 - d110;

        d11 = d109 - d10;

        d111 = d105 * 1.073741824E9;

        $d52 = d105 + d111;

        d12 = $d52 - d111;

        d13 = d105 - d12;

        $d53 = d10 * d12;

        $d55 = d87 - $d53;

        $d54 = d10 * d13;

        $d57 = $d55 - $d54;

        $d56 = d11 * d12;

        $d59 = $d57 - $d56;

        $d58 = d11 * d13;

        $d60 = $d59 - $d58;

        d112 = $d60 / d105;

        $d61 = d88 / d105;

        d113 = d112 + $d61;

        $d62 = neg d87;

        $d63 = $d62 * d106;

        $d64 = $d63 / d105;

        $d65 = $d64 / d105;

        d114 = d113 + $d65;

        $b1 = d1 cmpl 0.0;

        if $b1 == 0 goto label3;

        $d66 = d109 * d109;

        $d67 = $d66 * d1;

        d115 = d1 + $d67;

        if z0 == 0 goto label2;

        d115 = neg d115;

     label2:
        d114 = d114 + d115;

     label3:
        $d116 = d109 + d114;

        return $d116;
    }

    private static void reducePayneHanek(double, double[])
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        double[] r0;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i41, $i43, $i47, $i48, $i52, $i54, $i55, i60, i63;
        long $l3, $l4, $l9, $l11, $l13, $l15, $l16, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l30, $l31, $l33, $l35, $l37, $l39, $l42, $l44, $l45, $l46, $l49, $l50, $l51, $l53, $l56, $l57, $l58, l59, l61, l62, l64, $l65, l67, l68, l69, $l70, l71, l72, l73, l74, l75, l76, l77, l78, $l79, l80, $l81, l82, $l83, $l85, l87, l88, l89, l90, l91, l92, l93, $l94, $l95, l96, $l97, l99, l100, l101, l102, l103, l104, $l105, $l106, $l107, l108, $l109, l110, $l111, l112, l113, l114, l115, $l116, l117, $l118, l119, l120, l121, l122, l123, $l124, l125, $l126, l127, $l128, $l130, l132, l133, $l134, l135, $l136, l137, l138, l139, l140, $l141, $l142, l143, $l144, l146, l147, l148, $l149, l150, $l151, l152, l153, l154, l155, $l156, $l157, l158, $l159, l161, $l162, $l163, $l164, $l165, $l166;
        long[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        byte $b10, $b12, $b14, $b18, $b20, $b22, $b24, $b26, $b28, $b32, $b34, $b36, $b38, $b40, $b84, $b86, $b98, $b129, $b131, $b145, $b160;
        boolean $z0, z1, $z2, z3, $z4, z5, $z6, z7, $z8, z9, $z10, z11, $z12, z13, $z14, z15, $z16, z17, $z18, z19, $z20, z21, $z22, z23, $z24, z25, $z26, z27, $z28, z29, $z30, z31, $z32, z33, $z34, z35, $z36, z37, $z38, z39, $z40, z41;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        l59 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l3 = l59 >> 52;

        $l4 = $l3 & 2047L;

        $i5 = (int) $l4;

        i60 = $i5 - 1023;

        l61 = l59 & 4503599627370495L;

        l62 = l61 | 4503599627370496L;

        i63 = i60 + 1;

        l64 = l62 << 11;

        i0 = i63 >> 6;

        $i6 = i0 << 6;

        i1 = i63 - $i6;

        if i1 == 0 goto label03;

        if i0 != 0 goto label01;

        $l65 = 0L;

        goto label02;

     label01:
        $r4 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i41 = i0 - 1;

        $l42 = $r4[$i41];

        $l65 = $l42 << i1;

     label02:
        $r5 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $l44 = $r5[i0];

        $i43 = 64 - i1;

        $l45 = $l44 >>> $i43;

        l67 = $l65 | $l45;

        $r6 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $l46 = $r6[i0];

        $l51 = $l46 << i1;

        $r7 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i47 = i0 + 1;

        $l49 = $r7[$i47];

        $i48 = 64 - i1;

        $l50 = $l49 >>> $i48;

        l68 = $l51 | $l50;

        $r8 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i52 = i0 + 1;

        $l53 = $r8[$i52];

        $l58 = $l53 << i1;

        $r9 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i54 = i0 + 2;

        $l56 = $r9[$i54];

        $i55 = 64 - i1;

        $l57 = $l56 >>> $i55;

        l69 = $l58 | $l57;

        goto label06;

     label03:
        if i0 != 0 goto label04;

        $l70 = 0L;

        goto label05;

     label04:
        $r1 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i7 = i0 - 1;

        $l70 = $r1[$i7];

     label05:
        l67 = $l70;

        $r2 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        l68 = $r2[i0];

        $r3 = <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI>;

        $i8 = i0 + 1;

        l69 = $r3[$i8];

     label06:
        l71 = l64 >>> 32;

        l72 = l64 & 4294967295L;

        l73 = l68 >>> 32;

        l74 = l68 & 4294967295L;

        l75 = l71 * l73;

        l76 = l72 * l74;

        l77 = l72 * l73;

        l78 = l71 * l74;

        $l79 = l78 << 32;

        l80 = l76 + $l79;

        $l81 = l78 >>> 32;

        l82 = l75 + $l81;

        $l83 = l76 & -9223372036854775808L;

        $b84 = $l83 cmp 0L;

        if $b84 == 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        z1 = $z0;

        $l9 = l78 & 2147483648L;

        $b10 = $l9 cmp 0L;

        if $b10 == 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z3 = $z2;

        $l11 = l80 & -9223372036854775808L;

        $b12 = $l11 cmp 0L;

        if $b12 == 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        z5 = $z4;

        if z1 == 0 goto label13;

        if z3 != 0 goto label15;

     label13:
        if z1 != 0 goto label14;

        if z3 == 0 goto label16;

     label14:
        if z5 != 0 goto label16;

     label15:
        l82 = l82 + 1L;

     label16:
        $l85 = l80 & -9223372036854775808L;

        $b86 = $l85 cmp 0L;

        if $b86 == 0 goto label17;

        $z6 = 1;

        goto label18;

     label17:
        $z6 = 0;

     label18:
        z7 = $z6;

        $l13 = l77 & 2147483648L;

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label19;

        $z8 = 1;

        goto label20;

     label19:
        $z8 = 0;

     label20:
        z9 = $z8;

        $l15 = l77 << 32;

        l87 = l80 + $l15;

        $l16 = l77 >>> 32;

        l88 = l82 + $l16;

        $l17 = l87 & -9223372036854775808L;

        $b18 = $l17 cmp 0L;

        if $b18 == 0 goto label21;

        $z10 = 1;

        goto label22;

     label21:
        $z10 = 0;

     label22:
        z11 = $z10;

        if z7 == 0 goto label23;

        if z9 != 0 goto label25;

     label23:
        if z7 != 0 goto label24;

        if z9 == 0 goto label26;

     label24:
        if z11 != 0 goto label26;

     label25:
        l88 = l88 + 1L;

     label26:
        l89 = l69 >>> 32;

        l90 = l69 & 4294967295L;

        l91 = l71 * l89;

        l92 = l72 * l89;

        l93 = l71 * l90;

        $l94 = l92 + l93;

        $l95 = $l94 >>> 32;

        l96 = l91 + $l95;

        $l97 = l87 & -9223372036854775808L;

        $b98 = $l97 cmp 0L;

        if $b98 == 0 goto label27;

        $z12 = 1;

        goto label28;

     label27:
        $z12 = 0;

     label28:
        z13 = $z12;

        $l19 = l96 & -9223372036854775808L;

        $b20 = $l19 cmp 0L;

        if $b20 == 0 goto label29;

        $z14 = 1;

        goto label30;

     label29:
        $z14 = 0;

     label30:
        z15 = $z14;

        l99 = l87 + l96;

        $l21 = l99 & -9223372036854775808L;

        $b22 = $l21 cmp 0L;

        if $b22 == 0 goto label31;

        $z16 = 1;

        goto label32;

     label31:
        $z16 = 0;

     label32:
        z17 = $z16;

        if z13 == 0 goto label33;

        if z15 != 0 goto label35;

     label33:
        if z13 != 0 goto label34;

        if z15 == 0 goto label36;

     label34:
        if z17 != 0 goto label36;

     label35:
        l88 = l88 + 1L;

     label36:
        l100 = l67 >>> 32;

        l101 = l67 & 4294967295L;

        l102 = l72 * l101;

        l103 = l72 * l100;

        l104 = l71 * l101;

        $l105 = l103 + l104;

        $l106 = $l105 << 32;

        $l107 = l102 + $l106;

        l108 = l88 + $l107;

        $l109 = l108 >>> 62;

        i2 = (int) $l109;

        l110 = l108 << 2;

        $l111 = l99 >>> 62;

        l112 = l110 | $l111;

        l113 = l99 << 2;

        l114 = l112 >>> 32;

        l115 = l112 & 4294967295L;

        $r10 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l116 = $r10[0];

        l117 = $l116 >>> 32;

        $r11 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l118 = $r11[0];

        l119 = $l118 & 4294967295L;

        l120 = l114 * l117;

        l121 = l115 * l119;

        l122 = l115 * l117;

        l123 = l114 * l119;

        $l124 = l123 << 32;

        l125 = l121 + $l124;

        $l126 = l123 >>> 32;

        l127 = l120 + $l126;

        $l128 = l121 & -9223372036854775808L;

        $b129 = $l128 cmp 0L;

        if $b129 == 0 goto label37;

        $z18 = 1;

        goto label38;

     label37:
        $z18 = 0;

     label38:
        z19 = $z18;

        $l23 = l123 & 2147483648L;

        $b24 = $l23 cmp 0L;

        if $b24 == 0 goto label39;

        $z20 = 1;

        goto label40;

     label39:
        $z20 = 0;

     label40:
        z21 = $z20;

        $l25 = l125 & -9223372036854775808L;

        $b26 = $l25 cmp 0L;

        if $b26 == 0 goto label41;

        $z22 = 1;

        goto label42;

     label41:
        $z22 = 0;

     label42:
        z23 = $z22;

        if z19 == 0 goto label43;

        if z21 != 0 goto label45;

     label43:
        if z19 != 0 goto label44;

        if z21 == 0 goto label46;

     label44:
        if z23 != 0 goto label46;

     label45:
        l127 = l127 + 1L;

     label46:
        $l130 = l125 & -9223372036854775808L;

        $b131 = $l130 cmp 0L;

        if $b131 == 0 goto label47;

        $z24 = 1;

        goto label48;

     label47:
        $z24 = 0;

     label48:
        z25 = $z24;

        $l27 = l122 & 2147483648L;

        $b28 = $l27 cmp 0L;

        if $b28 == 0 goto label49;

        $z26 = 1;

        goto label50;

     label49:
        $z26 = 0;

     label50:
        z27 = $z26;

        $l29 = l122 << 32;

        l132 = l125 + $l29;

        $l30 = l122 >>> 32;

        l133 = l127 + $l30;

        $l31 = l132 & -9223372036854775808L;

        $b32 = $l31 cmp 0L;

        if $b32 == 0 goto label51;

        $z28 = 1;

        goto label52;

     label51:
        $z28 = 0;

     label52:
        z29 = $z28;

        if z25 == 0 goto label53;

        if z27 != 0 goto label55;

     label53:
        if z25 != 0 goto label54;

        if z27 == 0 goto label56;

     label54:
        if z29 != 0 goto label56;

     label55:
        l133 = l133 + 1L;

     label56:
        $r12 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l134 = $r12[1];

        l135 = $l134 >>> 32;

        $r13 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l136 = $r13[1];

        l137 = $l136 & 4294967295L;

        l138 = l114 * l135;

        l139 = l115 * l135;

        l140 = l114 * l137;

        $l141 = l139 + l140;

        $l142 = $l141 >>> 32;

        l143 = l138 + $l142;

        $l144 = l132 & -9223372036854775808L;

        $b145 = $l144 cmp 0L;

        if $b145 == 0 goto label57;

        $z30 = 1;

        goto label58;

     label57:
        $z30 = 0;

     label58:
        z31 = $z30;

        $l33 = l143 & -9223372036854775808L;

        $b34 = $l33 cmp 0L;

        if $b34 == 0 goto label59;

        $z32 = 1;

        goto label60;

     label59:
        $z32 = 0;

     label60:
        z33 = $z32;

        l146 = l132 + l143;

        $l35 = l146 & -9223372036854775808L;

        $b36 = $l35 cmp 0L;

        if $b36 == 0 goto label61;

        $z34 = 1;

        goto label62;

     label61:
        $z34 = 0;

     label62:
        z35 = $z34;

        if z31 == 0 goto label63;

        if z33 != 0 goto label65;

     label63:
        if z31 != 0 goto label64;

        if z33 == 0 goto label66;

     label64:
        if z35 != 0 goto label66;

     label65:
        l133 = l133 + 1L;

     label66:
        l147 = l113 >>> 32;

        l148 = l113 & 4294967295L;

        $r14 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l149 = $r14[0];

        l150 = $l149 >>> 32;

        $r15 = <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS>;

        $l151 = $r15[0];

        l152 = $l151 & 4294967295L;

        l153 = l147 * l150;

        l154 = l148 * l150;

        l155 = l147 * l152;

        $l156 = l154 + l155;

        $l157 = $l156 >>> 32;

        l158 = l153 + $l157;

        $l159 = l146 & -9223372036854775808L;

        $b160 = $l159 cmp 0L;

        if $b160 == 0 goto label67;

        $z36 = 1;

        goto label68;

     label67:
        $z36 = 0;

     label68:
        z37 = $z36;

        $l37 = l158 & -9223372036854775808L;

        $b38 = $l37 cmp 0L;

        if $b38 == 0 goto label69;

        $z38 = 1;

        goto label70;

     label69:
        $z38 = 0;

     label70:
        z39 = $z38;

        l161 = l146 + l158;

        $l39 = l161 & -9223372036854775808L;

        $b40 = $l39 cmp 0L;

        if $b40 == 0 goto label71;

        $z40 = 1;

        goto label72;

     label71:
        $z40 = 0;

     label72:
        z41 = $z40;

        if z37 == 0 goto label73;

        if z39 != 0 goto label75;

     label73:
        if z37 != 0 goto label74;

        if z39 == 0 goto label76;

     label74:
        if z41 != 0 goto label76;

     label75:
        l133 = l133 + 1L;

     label76:
        $l162 = l133 >>> 12;

        $d5 = (double) $l162;

        d1 = $d5 / 4.503599627370496E15;

        $l163 = l133 & 4095L;

        $l164 = $l163 << 40;

        $l165 = l161 >>> 24;

        $l166 = $l164 + $l165;

        $d6 = (double) $l166;

        $d7 = $d6 / 4.503599627370496E15;

        d2 = $d7 / 4.503599627370496E15;

        d3 = d1 + d2;

        $d8 = d3 - d1;

        $d9 = $d8 - d2;

        d4 = neg $d9;

        $d10 = (double) i2;

        r0[0] = $d10;

        $d11 = d3 * 2.0;

        r0[1] = $d11;

        $d12 = d4 * 2.0;

        r0[2] = $d12;

        return;
    }

    public static double sin(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, $d9;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b8;
        org.apache.commons.math3.util.FastMath$CodyWaite $r0;
        int $i6, $i7, i9;
        boolean z0;
        long l10;
        double[] r1;

        d0 := @parameter0: double;

        z0 = 0;

        i9 = 0;

        d7 = 0.0;

        d8 = d0;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label01;

        z0 = 1;

        d8 = neg d0;

     label01:
        $b1 = d8 cmpl 0.0;

        if $b1 != 0 goto label03;

        l10 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b8 = l10 cmp 0L;

        if $b8 >= 0 goto label02;

        return -0.0;

     label02:
        return 0.0;

     label03:
        $b2 = d8 cmpl d8;

        if $b2 != 0 goto label04;

        $b3 = d8 cmpl #Infinity;

        if $b3 != 0 goto label05;

     label04:
        return #NaN;

     label05:
        $b4 = d8 cmpl 3294198.0;

        if $b4 <= 0 goto label06;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d8, r1);

        $d6 = r1[0];

        $i7 = (int) $d6;

        i9 = $i7 & 3;

        d8 = r1[1];

        d7 = r1[2];

        goto label07;

     label06:
        $b5 = d8 cmpl 1.5707963267948966;

        if $b5 <= 0 goto label07;

        $r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d8);

        $i6 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i9 = $i6 & 3;

        d8 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        d7 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

     label07:
        if z0 == 0 goto label08;

        i9 = i9 ^ 2;

     label08:
        tableswitch(i9)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            default: goto label13;
        };

     label09:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d8, d7);

        return $d9;

     label10:
        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d8, d7);

        return $d5;

     label11:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d8, d7);

        $d4 = neg $d3;

        return $d4;

     label12:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d8, d7);

        $d2 = neg $d1;

        return $d2;

     label13:
        return #NaN;
    }

    public static double cos(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, $d9;
        byte $b0, $b1, $b2, $b3, $b4;
        org.apache.commons.math3.util.FastMath$CodyWaite $r0;
        int $i5, $i6, i7;
        double[] r1;

        d0 := @parameter0: double;

        i7 = 0;

        d7 = d0;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label01;

        d7 = neg d0;

     label01:
        $b1 = d7 cmpl d7;

        if $b1 != 0 goto label02;

        $b2 = d7 cmpl #Infinity;

        if $b2 != 0 goto label03;

     label02:
        return #NaN;

     label03:
        d8 = 0.0;

        $b3 = d7 cmpl 3294198.0;

        if $b3 <= 0 goto label04;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d7, r1);

        $d6 = r1[0];

        $i6 = (int) $d6;

        i7 = $i6 & 3;

        d7 = r1[1];

        d8 = r1[2];

        goto label05;

     label04:
        $b4 = d7 cmpl 1.5707963267948966;

        if $b4 <= 0 goto label05;

        $r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d7);

        $i5 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i7 = $i5 & 3;

        d7 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        d8 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

     label05:
        tableswitch(i7)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d7, d8);

        return $d9;

     label07:
        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d7, d8);

        $d5 = neg $d4;

        return $d5;

     label08:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosQ(double,double)>(d7, d8);

        $d3 = neg $d2;

        return $d3;

     label09:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinQ(double,double)>(d7, d8);

        return $d1;

     label10:
        return #NaN;
    }

    public static double tan(double)
    {
        double d0, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d13, d14, d15;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b9, $b12;
        int $i6, $i7, $i8, i10;
        org.apache.commons.math3.util.FastMath$CodyWaite $r0;
        boolean z0;
        long l11;
        double[] r1;

        d0 := @parameter0: double;

        z0 = 0;

        i10 = 0;

        d10 = d0;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label01;

        z0 = 1;

        d10 = neg d0;

     label01:
        $b1 = d10 cmpl 0.0;

        if $b1 != 0 goto label03;

        l11 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b9 = l11 cmp 0L;

        if $b9 >= 0 goto label02;

        return -0.0;

     label02:
        return 0.0;

     label03:
        $b2 = d10 cmpl d10;

        if $b2 != 0 goto label04;

        $b3 = d10 cmpl #Infinity;

        if $b3 != 0 goto label05;

     label04:
        return #NaN;

     label05:
        d11 = 0.0;

        $b4 = d10 cmpl 3294198.0;

        if $b4 <= 0 goto label06;

        r1 = newarray (double)[3];

        staticinvoke <org.apache.commons.math3.util.FastMath: void reducePayneHanek(double,double[])>(d10, r1);

        $d9 = r1[0];

        $i8 = (int) $d9;

        i10 = $i8 & 3;

        d10 = r1[1];

        d11 = r1[2];

        goto label07;

     label06:
        $b5 = d10 cmpl 1.5707963267948966;

        if $b5 <= 0 goto label07;

        $r0 = new org.apache.commons.math3.util.FastMath$CodyWaite;

        specialinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: void <init>(double)>(d10);

        $i7 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: int getK()>();

        i10 = $i7 & 3;

        d10 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemA()>();

        d11 = virtualinvoke $r0.<org.apache.commons.math3.util.FastMath$CodyWaite: double getRemB()>();

     label07:
        $b12 = d10 cmpl 1.5;

        if $b12 <= 0 goto label08;

        d2 = 1.5707963267948966 - d10;

        $d4 = d2 - 1.5707963267948966;

        $d5 = $d4 + d10;

        d13 = neg $d5;

        $d6 = 6.123233995736766E-17 - d11;

        d14 = d13 + $d6;

        d10 = d2 + d14;

        $d7 = d10 - d2;

        $d8 = $d7 - d14;

        d11 = neg $d8;

        i10 = i10 ^ 1;

        z0 = z0 ^ 1;

     label08:
        $i6 = i10 & 1;

        if $i6 != 0 goto label09;

        d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 0);

        goto label10;

     label09:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanQ(double,double,boolean)>(d10, d11, 1);

        d15 = neg $d3;

     label10:
        if z0 == 0 goto label11;

        d15 = neg d15;

     label11:
        return d15;
    }

    public static double atan(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d0, 0.0, 0);

        return $d1;
    }

    private static double atan(double, double, boolean)
    {
        boolean z0, $z1, $z2, z3;
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, d68, d69, $d70, $d71, d72, d73, d74, d75, d76, d77, d78, d80, d81, d82, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93, d95, d96, d97, d98, d99, d100, d101, d102, d103, d106, d108, d109, d110, d111, d112, d113, d115, d116, d118, d119, d120, d121, d122, d123, d125, d126, d128, d129, d130;
        byte $b0, $b1, $b2, $b3;
        double[] $r0, $r1, $r2;
        int i4;

        d68 := @parameter0: double;

        d69 := @parameter1: double;

        z0 := @parameter2: boolean;

        $b0 = d68 cmpl 0.0;

        if $b0 != 0 goto label03;

        if z0 == 0 goto label01;

        $d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(3.141592653589793, d68);

        goto label02;

     label01:
        $d70 = d68;

     label02:
        return $d70;

     label03:
        $b1 = d68 cmpg 0.0;

        if $b1 >= 0 goto label04;

        d68 = neg d68;

        d69 = neg d69;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        $b2 = d68 cmpl 1.633123935319537E16;

        if $b2 <= 0 goto label08;

        $z2 = z3 ^ z0;

        if $z2 == 0 goto label06;

        $d71 = -1.5707963267948966;

        goto label07;

     label06:
        $d71 = 1.5707963267948966;

     label07:
        return $d71;

     label08:
        $b3 = d68 cmpg 1.0;

        if $b3 >= 0 goto label09;

        $d63 = -1.7168146928204135 * d68;

        $d64 = $d63 * d68;

        $d65 = $d64 + 8.0;

        $d66 = $d65 * d68;

        $d67 = $d66 + 0.5;

        i4 = (int) $d67;

        goto label10;

     label09:
        d72 = 1.0 / d68;

        $d2 = -1.7168146928204135 * d72;

        $d3 = $d2 * d72;

        $d4 = $d3 + 8.0;

        $d5 = $d4 * d72;

        $d6 = neg $d5;

        $d7 = $d6 + 13.07;

        i4 = (int) $d7;

     label10:
        $r0 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A>;

        d73 = $r0[i4];

        $r1 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B>;

        d0 = $r1[i4];

        d74 = d68 - d73;

        $d8 = d74 - d68;

        $d9 = $d8 + d73;

        d75 = neg $d9;

        $d10 = d69 - d0;

        d76 = d75 + $d10;

        d77 = d74 + d76;

        $d11 = d77 - d74;

        $d12 = $d11 - d76;

        d78 = neg $d12;

        d80 = d68 * 1.073741824E9;

        $d13 = d68 + d80;

        d81 = $d13 - d80;

        $d14 = d69 + d68;

        d82 = $d14 - d81;

        d84 = d69 + d82;

        if i4 != 0 goto label11;

        $d60 = d81 + d84;

        $d59 = d73 + d0;

        $d61 = $d60 * $d59;

        $d62 = 1.0 + $d61;

        d85 = 1.0 / $d62;

        d86 = d77 * d85;

        d87 = d78 * d85;

        goto label12;

     label11:
        d88 = d81 * d73;

        d89 = 1.0 + d88;

        $d15 = d89 - 1.0;

        $d16 = $d15 - d88;

        d90 = neg $d16;

        $d18 = d84 * d73;

        $d17 = d81 * d0;

        d91 = $d18 + $d17;

        d92 = d89 + d91;

        $d19 = d92 - d89;

        $d20 = $d19 - d91;

        $d21 = neg $d20;

        d93 = d90 + $d21;

        $d22 = d84 * d0;

        d95 = d93 + $d22;

        d86 = d77 / d92;

        d96 = d86 * 1.073741824E9;

        $d23 = d86 + d96;

        d97 = $d23 - d96;

        d98 = d86 - d97;

        d99 = d92 * 1.073741824E9;

        $d24 = d92 + d99;

        d100 = $d24 - d99;

        d101 = d92 - d100;

        $d25 = d97 * d100;

        $d27 = d77 - $d25;

        $d26 = d97 * d101;

        $d29 = $d27 - $d26;

        $d28 = d98 * d100;

        $d31 = $d29 - $d28;

        $d30 = d98 * d101;

        $d32 = $d31 - $d30;

        d102 = $d32 / d92;

        $d33 = neg d77;

        $d34 = $d33 * d95;

        $d35 = $d34 / d92;

        $d36 = $d35 / d92;

        d103 = d102 + $d36;

        $d37 = d78 / d92;

        d87 = d103 + $d37;

     label12:
        d106 = d86 * d86;

        $d38 = 0.07490822288864472 * d106;

        d108 = $d38 - 0.09088450866185192;

        $d39 = d108 * d106;

        d109 = $d39 + 0.11111095942313305;

        $d40 = d109 * d106;

        d110 = $d40 - 0.1428571423679182;

        $d41 = d110 * d106;

        d111 = $d41 + 0.19999999999923582;

        $d42 = d111 * d106;

        d112 = $d42 - 0.33333333333333287;

        $d43 = d112 * d106;

        d113 = $d43 * d86;

        d115 = d86 + d113;

        $d44 = d115 - d86;

        $d45 = $d44 - d113;

        d116 = neg $d45;

        $d46 = d86 * d86;

        $d47 = 1.0 + $d46;

        $d48 = d87 / $d47;

        d118 = d116 + $d48;

        $r2 = <org.apache.commons.math3.util.FastMath: double[] EIGHTHS>;

        d119 = $r2[i4];

        d120 = d119 + d115;

        $d49 = d120 - d119;

        $d50 = $d49 - d115;

        d121 = neg $d50;

        d122 = d120 + d118;

        $d51 = d122 - d120;

        $d52 = $d51 - d118;

        $d53 = neg $d52;

        d123 = d121 + $d53;

        d125 = d122 + d123;

        if z0 == 0 goto label13;

        $d54 = d125 - d122;

        $d55 = $d54 - d123;

        d126 = neg $d55;

        d128 = 3.141592653589793 - d125;

        $d56 = d128 - 3.141592653589793;

        $d57 = $d56 + d125;

        d129 = neg $d57;

        $d58 = 1.2246467991473532E-16 - d126;

        d130 = d129 + $d58;

        d125 = d128 + d130;

     label13:
        $z1 = z3 ^ z0;

        if $z1 == 0 goto label14;

        d125 = neg d125;

     label14:
        return d125;
    }

    public static double atan2(double, double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d19, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32, d33, d34, d35, d36, d37;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b24, $b25, $b26, $b27, $b28, $b29, $b30, $b31, $b32;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d1 cmpl d1;

        if $b0 != 0 goto label01;

        $b1 = d0 cmpl d0;

        if $b1 == 0 goto label02;

     label01:
        return #NaN;

     label02:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label09;

        d29 = d1 * d0;

        d30 = 1.0 / d1;

        d31 = 1.0 / d0;

        $b27 = d30 cmpl 0.0;

        if $b27 != 0 goto label04;

        $b32 = d1 cmpl 0.0;

        if $b32 <= 0 goto label03;

        return d0;

     label03:
        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(3.141592653589793, d0);

        return $d28;

     label04:
        $b28 = d1 cmpg 0.0;

        if $b28 < 0 goto label05;

        $b31 = d30 cmpg 0.0;

        if $b31 >= 0 goto label08;

     label05:
        $b29 = d0 cmpg 0.0;

        if $b29 < 0 goto label06;

        $b30 = d31 cmpg 0.0;

        if $b30 >= 0 goto label07;

     label06:
        return -3.141592653589793;

     label07:
        return 3.141592653589793;

     label08:
        return d29;

     label09:
        $b3 = d0 cmpl #Infinity;

        if $b3 != 0 goto label12;

        $b25 = d1 cmpl #Infinity;

        if $b25 != 0 goto label10;

        return 0.7853981633974483;

     label10:
        $b26 = d1 cmpl #-Infinity;

        if $b26 != 0 goto label11;

        return 2.356194490192345;

     label11:
        return 1.5707963267948966;

     label12:
        $b4 = d0 cmpl #-Infinity;

        if $b4 != 0 goto label15;

        $b23 = d1 cmpl #Infinity;

        if $b23 != 0 goto label13;

        return -0.7853981633974483;

     label13:
        $b24 = d1 cmpl #-Infinity;

        if $b24 != 0 goto label14;

        return -2.356194490192345;

     label14:
        return -1.5707963267948966;

     label15:
        $b5 = d1 cmpl #Infinity;

        if $b5 != 0 goto label19;

        $b19 = d0 cmpl 0.0;

        if $b19 > 0 goto label16;

        $d26 = 1.0 / d0;

        $b20 = $d26 cmpl 0.0;

        if $b20 <= 0 goto label17;

     label16:
        return 0.0;

     label17:
        $b21 = d0 cmpg 0.0;

        if $b21 < 0 goto label18;

        $d27 = 1.0 / d0;

        $b22 = $d27 cmpg 0.0;

        if $b22 >= 0 goto label19;

     label18:
        return -0.0;

     label19:
        $b6 = d1 cmpl #-Infinity;

        if $b6 != 0 goto label23;

        $b15 = d0 cmpl 0.0;

        if $b15 > 0 goto label20;

        $d24 = 1.0 / d0;

        $b16 = $d24 cmpl 0.0;

        if $b16 <= 0 goto label21;

     label20:
        return 3.141592653589793;

     label21:
        $b17 = d0 cmpg 0.0;

        if $b17 < 0 goto label22;

        $d25 = 1.0 / d0;

        $b18 = $d25 cmpg 0.0;

        if $b18 >= 0 goto label23;

     label22:
        return -3.141592653589793;

     label23:
        $b7 = d1 cmpl 0.0;

        if $b7 != 0 goto label27;

        $b11 = d0 cmpl 0.0;

        if $b11 > 0 goto label24;

        $d22 = 1.0 / d0;

        $b12 = $d22 cmpl 0.0;

        if $b12 <= 0 goto label25;

     label24:
        return 1.5707963267948966;

     label25:
        $b13 = d0 cmpg 0.0;

        if $b13 < 0 goto label26;

        $d23 = 1.0 / d0;

        $b14 = $d23 cmpg 0.0;

        if $b14 >= 0 goto label27;

     label26:
        return -1.5707963267948966;

     label27:
        d32 = d0 / d1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d32);

        if $z0 == 0 goto label30;

        $b10 = d1 cmpg 0.0;

        if $b10 >= 0 goto label28;

        $z1 = 1;

        goto label29;

     label28:
        $z1 = 0;

     label29:
        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d32, 0.0, $z1);

        return $d19;

     label30:
        d33 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d32);

        d34 = d32 - d33;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d1);

        d3 = d1 - d2;

        $d6 = d33 * d2;

        $d8 = d0 - $d6;

        $d7 = d33 * d3;

        $d10 = $d8 - $d7;

        $d9 = d34 * d2;

        $d12 = $d10 - $d9;

        $d11 = d34 * d3;

        $d13 = $d12 - $d11;

        $d14 = $d13 / d1;

        d35 = d34 + $d14;

        d4 = d33 + d35;

        $d15 = d4 - d33;

        $d16 = $d15 - d35;

        d36 = neg $d16;

        d37 = d4;

        $b8 = d4 cmpl 0.0;

        if $b8 != 0 goto label31;

        d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>(0.0, d0);

     label31:
        $d17 = d37;

        $b9 = d1 cmpg 0.0;

        if $b9 >= 0 goto label32;

        $z2 = 1;

        goto label33;

     label32:
        $z2 = 0;

     label33:
        d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>($d17, d36, $z2);

        return d5;
    }

    public static double asin(double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63;
        byte $b0, $b1, $b2, $b3, $b4, $b5;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return #NaN;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 > 0 goto label2;

        $b2 = d0 cmpg -1.0;

        if $b2 >= 0 goto label3;

     label2:
        return #NaN;

     label3:
        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label4;

        return 1.5707963267948966;

     label4:
        $b4 = d0 cmpl -1.0;

        if $b4 != 0 goto label5;

        return -1.5707963267948966;

     label5:
        $b5 = d0 cmpl 0.0;

        if $b5 != 0 goto label6;

        return d0;

     label6:
        d43 = d0 * 1.073741824E9;

        $d6 = d0 + d43;

        d1 = $d6 - d43;

        d2 = d0 - d1;

        d44 = d1 * d1;

        $d7 = d1 * d2;

        $d9 = $d7 * 2.0;

        $d8 = d2 * d2;

        d45 = $d9 + $d8;

        d46 = neg d44;

        d47 = neg d45;

        d48 = 1.0 + d46;

        $d10 = d48 - 1.0;

        $d11 = $d10 - d46;

        d49 = neg $d11;

        d50 = d48 + d47;

        $d12 = d50 - d48;

        $d13 = $d12 - d47;

        $d14 = neg $d13;

        d51 = d49 + $d14;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d50);

        d53 = d3 * 1.073741824E9;

        $d15 = d3 + d53;

        d54 = $d15 - d53;

        d55 = d3 - d54;

        $d16 = d54 * d54;

        $d19 = d50 - $d16;

        $d17 = 2.0 * d54;

        $d18 = $d17 * d55;

        $d21 = $d19 - $d18;

        $d20 = d55 * d55;

        $d23 = $d21 - $d20;

        $d22 = 2.0 * d3;

        $d24 = $d23 / $d22;

        d56 = d55 + $d24;

        $d25 = 2.0 * d3;

        d4 = d51 / $d25;

        d5 = d0 / d3;

        d57 = d5 * 1.073741824E9;

        $d26 = d5 + d57;

        d58 = $d26 - d57;

        d59 = d5 - d58;

        $d27 = d58 * d54;

        $d29 = d0 - $d27;

        $d28 = d58 * d56;

        $d31 = $d29 - $d28;

        $d30 = d59 * d54;

        $d33 = $d31 - $d30;

        $d32 = d59 * d56;

        $d34 = $d33 - $d32;

        $d35 = $d34 / d3;

        d60 = d59 + $d35;

        $d36 = neg d0;

        $d37 = $d36 * d4;

        $d38 = $d37 / d3;

        $d39 = $d38 / d3;

        d61 = d60 + $d39;

        d62 = d58 + d61;

        $d40 = d62 - d58;

        $d41 = $d40 - d61;

        d63 = neg $d41;

        $d42 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d62, d63, 0);

        return $d42;
    }

    public static double acos(double)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d42, d43, d44, d45, d46, d47, d48, d49, d50, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return #NaN;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 > 0 goto label2;

        $b2 = d0 cmpg -1.0;

        if $b2 >= 0 goto label3;

     label2:
        return #NaN;

     label3:
        $b3 = d0 cmpl -1.0;

        if $b3 != 0 goto label4;

        return 3.141592653589793;

     label4:
        $b4 = d0 cmpl 1.0;

        if $b4 != 0 goto label5;

        return 0.0;

     label5:
        $b5 = d0 cmpl 0.0;

        if $b5 != 0 goto label6;

        return 1.5707963267948966;

     label6:
        d42 = d0 * 1.073741824E9;

        $d4 = d0 + d42;

        d1 = $d4 - d42;

        d2 = d0 - d1;

        d43 = d1 * d1;

        $d5 = d1 * d2;

        $d7 = $d5 * 2.0;

        $d6 = d2 * d2;

        d44 = $d7 + $d6;

        d45 = neg d43;

        d46 = neg d44;

        d47 = 1.0 + d45;

        $d8 = d47 - 1.0;

        $d9 = $d8 - d45;

        d48 = neg $d9;

        d49 = d47 + d46;

        $d10 = d49 - d47;

        $d11 = $d10 - d46;

        $d12 = neg $d11;

        d50 = d48 + $d12;

        d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d49);

        d53 = d52 * 1.073741824E9;

        $d13 = d52 + d53;

        d54 = $d13 - d53;

        d55 = d52 - d54;

        $d14 = d54 * d54;

        $d17 = d49 - $d14;

        $d15 = 2.0 * d54;

        $d16 = $d15 * d55;

        $d19 = $d17 - $d16;

        $d18 = d55 * d55;

        $d21 = $d19 - $d18;

        $d20 = 2.0 * d52;

        $d22 = $d21 / $d20;

        d56 = d55 + $d22;

        $d23 = 2.0 * d52;

        $d24 = d50 / $d23;

        d57 = d56 + $d24;

        d58 = d54 + d57;

        $d25 = d58 - d54;

        $d26 = $d25 - d57;

        d59 = neg $d26;

        d3 = d58 / d0;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d3);

        if $z0 == 0 goto label7;

        return 1.5707963267948966;

     label7:
        d60 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d3);

        d61 = d3 - d60;

        $d27 = d60 * d1;

        $d29 = d58 - $d27;

        $d28 = d60 * d2;

        $d31 = $d29 - $d28;

        $d30 = d61 * d1;

        $d33 = $d31 - $d30;

        $d32 = d61 * d2;

        $d34 = $d33 - $d32;

        $d35 = $d34 / d0;

        d62 = d61 + $d35;

        $d36 = d59 / d0;

        d63 = d62 + $d36;

        d64 = d60 + d63;

        $d37 = d64 - d60;

        $d38 = $d37 - d63;

        d65 = neg $d38;

        $b6 = d0 cmpg 0.0;

        if $b6 >= 0 goto label8;

        $z1 = 1;

        goto label9;

     label8:
        $z1 = 0;

     label9:
        $d39 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double,double,boolean)>(d64, d65, $z1);

        return $d39;
    }

    public static double cbrt(double)
    {
        int i0, $i3, $i4, $i5, $i12, $i13, $i17, i19;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, d42, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d57, d58, d59, d60, d61, d62;
        long $l1, $l2, $l6, $l7, $l8, $l9, $l10, $l11, $l15, $l16, l18;
        double[] $r0;
        byte $b14;
        boolean z0;

        d42 := @parameter0: double;

        l18 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d42);

        $l1 = l18 >> 52;

        $l2 = $l1 & 2047L;

        $i3 = (int) $l2;

        i19 = $i3 - 1023;

        z0 = 0;

        if i19 != -1023 goto label2;

        $b14 = d42 cmpl 0.0;

        if $b14 != 0 goto label1;

        return d42;

     label1:
        z0 = 1;

        d42 = d42 * 1.8014398509481984E16;

        l18 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d42);

        $l15 = l18 >> 52;

        $l16 = $l15 & 2047L;

        $i17 = (int) $l16;

        i19 = $i17 - 1023;

     label2:
        if i19 != 1024 goto label3;

        return d42;

     label3:
        i0 = i19 / 3;

        $l8 = l18 & -9223372036854775808L;

        $i4 = i0 + 1023;

        $i5 = $i4 & 2047;

        $l6 = (long) $i5;

        $l7 = $l6 << 52;

        $l9 = $l8 | $l7;

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l9);

        $l10 = l18 & 4503599627370495L;

        $l11 = $l10 | 4607182418800017408L;

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l11);

        $d7 = -0.010714690733195933 * d1;

        d44 = $d7 + 0.0875862700108075;

        $d8 = d44 * d1;

        d45 = $d8 + -0.3058015757857271;

        $d9 = d45 * d1;

        d46 = $d9 + 0.7249995199969751;

        $d10 = d46 * d1;

        d47 = $d10 + 0.5039018405998233;

        $r0 = <org.apache.commons.math3.util.FastMath: double[] CBRTTWO>;

        $i12 = i19 % 3;

        $i13 = $i12 + 2;

        $d11 = $r0[$i13];

        d48 = d47 * $d11;

        $d12 = d0 * d0;

        $d13 = $d12 * d0;

        d2 = d42 / $d13;

        $d14 = d48 * d48;

        $d15 = $d14 * d48;

        $d18 = d2 - $d15;

        $d16 = 3.0 * d48;

        $d17 = $d16 * d48;

        $d19 = $d18 / $d17;

        d49 = d48 + $d19;

        $d20 = d49 * d49;

        $d21 = $d20 * d49;

        $d24 = d2 - $d21;

        $d22 = 3.0 * d49;

        $d23 = $d22 * d49;

        $d25 = $d24 / $d23;

        d50 = d49 + $d25;

        d51 = d50 * 1.073741824E9;

        $d26 = d50 + d51;

        d3 = $d26 - d51;

        d4 = d50 - d3;

        d52 = d3 * d3;

        $d27 = d3 * d4;

        $d29 = $d27 * 2.0;

        $d28 = d4 * d4;

        d53 = $d29 + $d28;

        d54 = d52 * 1.073741824E9;

        $d30 = d52 + d54;

        d5 = $d30 - d54;

        $d31 = d52 - d5;

        d55 = d53 + $d31;

        $d33 = d5 * d4;

        $d32 = d3 * d55;

        $d35 = $d33 + $d32;

        $d34 = d55 * d4;

        d57 = $d35 + $d34;

        d58 = d5 * d3;

        d6 = d2 - d58;

        $d36 = d6 - d2;

        $d37 = $d36 + d58;

        d59 = neg $d37;

        d60 = d59 - d57;

        $d40 = d6 + d60;

        $d38 = 3.0 * d50;

        $d39 = $d38 * d50;

        $d41 = $d40 / $d39;

        d61 = d50 + $d41;

        d62 = d61 * d0;

        if z0 == 0 goto label4;

        d62 = d62 * 3.814697265625E-6;

     label4:
        return d62;
    }

    public static double toRadians(double)
    {
        double d0, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        boolean $z0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label2;

     label1:
        return d0;

     label2:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d0);

        d4 = d0 - d3;

        $d6 = d4 * 1.997844754509471E-9;

        $d5 = d4 * 0.01745329052209854;

        $d8 = $d6 + $d5;

        $d7 = d3 * 1.997844754509471E-9;

        $d10 = $d8 + $d7;

        $d9 = d3 * 0.01745329052209854;

        d11 = $d10 + $d9;

        $b1 = d11 cmpl 0.0;

        if $b1 != 0 goto label3;

        d11 = d11 * d0;

     label3:
        return d11;
    }

    public static double toDegrees(double)
    {
        double d0, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        boolean $z0;
        byte $b0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label2;

     label1:
        return d0;

     label2:
        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double doubleHighPart(double)>(d0);

        d4 = d0 - d3;

        $d6 = d4 * 3.145894820876798E-6;

        $d5 = d4 * 57.2957763671875;

        $d8 = $d6 + $d5;

        $d7 = d3 * 3.145894820876798E-6;

        $d10 = $d8 + $d7;

        $d9 = d3 * 57.2957763671875;

        $d11 = $d10 + $d9;

        return $d11;
    }

    public static int abs(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 = i0 >>> 31;

        $i2 = i1 ^ -1;

        $i3 = $i2 + 1;

        $i4 = i0 ^ $i3;

        $i5 = $i4 + i1;

        return $i5;
    }

    public static long abs(long)
    {
        long l0, l1, $l2, $l3, $l4, $l5;

        l0 := @parameter0: long;

        l1 = l0 >>> 63;

        $l2 = l1 ^ -1L;

        $l3 = $l2 + 1L;

        $l4 = l0 ^ $l3;

        $l5 = $l4 + l1;

        return $l5;
    }

    public static float abs(float)
    {
        float f0, $f1;
        int $i0, $i1;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i1 = 2147483647 & $i0;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f1;
    }

    public static double abs(double)
    {
        double d0, $d1;
        long $l0, $l1;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = 9223372036854775807L & $l0;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d1;
    }

    public static double ulp(double)
    {
        double d0, $d1, $d2, $d3;
        boolean $z0;
        long $l0, $l1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label1;

        return #Infinity;

     label1:
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = $l0 ^ 1L;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        $d2 = d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        return $d3;
    }

    public static float ulp(float)
    {
        float f0, $f1, $f2, $f3;
        boolean $z0;
        int $i0, $i1;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z0 == 0 goto label1;

        return #InfinityF;

     label1:
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i1 = $i0 ^ 1;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        $f2 = f0 - $f1;

        $f3 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f2);

        return $f3;
    }

    public static double scalb(double, int)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d8, $d10, $d11;
        int i0, i3, $i7, $i21, $i23, $i32, i36, i39;
        long l1, l2, l4, $l6, $l9, $l10, $l11, $l12, $l13, $l16, $l17, $l18, $l19, $l22, $l25, $l26, $l27, $l28, $l29, $l33, $l34, l35, l37, l38, l40;
        boolean $z0, $z1;
        byte $b5, $b8, $b14, $b15, $b20, $b24, $b30, $b31;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        if i0 <= -1023 goto label01;

        if i0 >= 1024 goto label01;

        $i32 = i0 + 1023;

        $l33 = (long) $i32;

        $l34 = $l33 << 52;

        $d5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l34);

        $d6 = d0 * $d5;

        return $d6;

     label01:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label02;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 != 0 goto label02;

        $b5 = d0 cmpl 0.0;

        if $b5 != 0 goto label03;

     label02:
        return d0;

     label03:
        if i0 >= -2098 goto label05;

        $b31 = d0 cmpl 0.0;

        if $b31 <= 0 goto label04;

        goto label04;

     label04:
        return 0.0;

     label05:
        if i0 <= 2097 goto label08;

        $b30 = d0 cmpl 0.0;

        if $b30 <= 0 goto label06;

        $d8 = #Infinity;

        goto label07;

     label06:
        $d8 = #-Infinity;

     label07:
        return $d8;

     label08:
        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l2 = l1 & -9223372036854775808L;

        $l6 = l1 >>> 52;

        $i7 = (int) $l6;

        i3 = $i7 & 2047;

        l35 = l1 & 4503599627370495L;

        i36 = i3 + i0;

        if i0 >= 0 goto label13;

        if i36 <= 0 goto label09;

        $l26 = (long) i36;

        $l27 = $l26 << 52;

        $l28 = l2 | $l27;

        $l29 = $l28 | l35;

        $d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l29);

        return $d4;

     label09:
        if i36 <= -53 goto label11;

        l37 = l35 | 4503599627370496L;

        $i21 = neg i36;

        $l22 = 1L << $i21;

        l4 = l37 & $l22;

        $i23 = 1 - i36;

        l38 = l37 >>> $i23;

        $b24 = l4 cmp 0L;

        if $b24 == 0 goto label10;

        l38 = l38 + 1L;

     label10:
        $l25 = l2 | l38;

        $d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l25);

        return $d3;

     label11:
        $b20 = l2 cmp 0L;

        if $b20 != 0 goto label12;

        goto label12;

     label12:
        return 0.0;

     label13:
        if i3 != 0 goto label19;

     label14:
        $l13 = l35 >>> 52;

        $b14 = $l13 cmp 1L;

        if $b14 == 0 goto label15;

        l35 = l35 << 1;

        i36 = i36 + -1;

        goto label14;

     label15:
        i39 = i36 + 1;

        l40 = l35 & 4503599627370495L;

        if i39 >= 2047 goto label16;

        $l16 = (long) i39;

        $l17 = $l16 << 52;

        $l18 = l2 | $l17;

        $l19 = $l18 | l40;

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l19);

        return $d2;

     label16:
        $b15 = l2 cmp 0L;

        if $b15 != 0 goto label17;

        $d10 = #Infinity;

        goto label18;

     label17:
        $d10 = #-Infinity;

     label18:
        return $d10;

     label19:
        if i36 >= 2047 goto label20;

        $l9 = (long) i36;

        $l10 = $l9 << 52;

        $l11 = l2 | $l10;

        $l12 = $l11 | l35;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l12);

        return $d1;

     label20:
        $b8 = l2 cmp 0L;

        if $b8 != 0 goto label21;

        $d11 = #Infinity;

        goto label22;

     label21:
        $d11 = #-Infinity;

     label22:
        return $d11;
    }

    public static float scalb(float, int)
    {
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f8, $f10, $f11;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, i25, i26, i27, i28, i29, i30;
        boolean $z0, $z1;
        byte $b5, $b21, $b22;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        if i0 <= -127 goto label01;

        if i0 >= 128 goto label01;

        $i23 = i0 + 127;

        $i24 = $i23 << 23;

        $f5 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i24);

        $f6 = f0 * $f5;

        return $f6;

     label01:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label02;

        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z1 != 0 goto label02;

        $b5 = f0 cmpl 0.0F;

        if $b5 != 0 goto label03;

     label02:
        return f0;

     label03:
        if i0 >= -277 goto label05;

        $b22 = f0 cmpl 0.0F;

        if $b22 <= 0 goto label04;

        goto label04;

     label04:
        return 0.0F;

     label05:
        if i0 <= 276 goto label08;

        $b21 = f0 cmpl 0.0F;

        if $b21 <= 0 goto label06;

        $f8 = #InfinityF;

        goto label07;

     label06:
        $f8 = #-InfinityF;

     label07:
        return $f8;

     label08:
        i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i2 = i1 & -2147483648;

        $i6 = i1 >>> 23;

        i3 = $i6 & 255;

        i25 = i1 & 8388607;

        i26 = i3 + i0;

        if i0 >= 0 goto label13;

        if i26 <= 0 goto label09;

        $i18 = i26 << 23;

        $i19 = i2 | $i18;

        $i20 = $i19 | i25;

        $f4 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i20);

        return $f4;

     label09:
        if i26 <= -24 goto label11;

        i27 = i25 | 8388608;

        $i14 = neg i26;

        $i15 = 1 << $i14;

        i4 = i27 & $i15;

        $i16 = 1 - i26;

        i28 = i27 >>> $i16;

        if i4 == 0 goto label10;

        i28 = i28 + 1;

     label10:
        $i17 = i2 | i28;

        $f3 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i17);

        return $f3;

     label11:
        if i2 != 0 goto label12;

        goto label12;

     label12:
        return 0.0F;

     label13:
        if i3 != 0 goto label19;

     label14:
        $i10 = i25 >>> 23;

        if $i10 == 1 goto label15;

        i25 = i25 << 1;

        i26 = i26 + -1;

        goto label14;

     label15:
        i29 = i26 + 1;

        i30 = i25 & 8388607;

        if i29 >= 255 goto label16;

        $i11 = i29 << 23;

        $i12 = i2 | $i11;

        $i13 = $i12 | i30;

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i13);

        return $f2;

     label16:
        if i2 != 0 goto label17;

        $f10 = #InfinityF;

        goto label18;

     label17:
        $f10 = #-InfinityF;

     label18:
        return $f10;

     label19:
        if i26 >= 255 goto label20;

        $i7 = i26 << 23;

        $i8 = i2 | $i7;

        $i9 = $i8 | i25;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i9);

        return $f1;

     label20:
        if i2 != 0 goto label21;

        $f11 = #InfinityF;

        goto label22;

     label21:
        $f11 = #-InfinityF;

     label22:
        return $f11;
    }

    public static double nextAfter(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5;
        long l0, l1, $l6, $l7, $l8, $l9, $l10, $l11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b2, $b3, $b4, $b5, $b12, $b13;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label02;

     label01:
        return #NaN;

     label02:
        $b2 = d0 cmpl d1;

        if $b2 != 0 goto label03;

        return d1;

     label03:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z2 == 0 goto label06;

        $b13 = d0 cmpg 0.0;

        if $b13 >= 0 goto label04;

        $d4 = -1.7976931348623157E308;

        goto label05;

     label04:
        $d4 = 1.7976931348623157E308;

     label05:
        return $d4;

     label06:
        $b3 = d0 cmpl 0.0;

        if $b3 != 0 goto label09;

        $b12 = d1 cmpg 0.0;

        if $b12 >= 0 goto label07;

        $d5 = -4.9E-324;

        goto label08;

     label07:
        $d5 = 4.9E-324;

     label08:
        return $d5;

     label09:
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l1 = l0 & -9223372036854775808L;

        $b4 = d1 cmpg d0;

        if $b4 >= 0 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        $z5 = $z3 ^ $z4;

        if $z5 == 0 goto label14;

        $l9 = l0 & 9223372036854775807L;

        $l10 = $l9 + 1L;

        $l11 = l1 | $l10;

        $d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l11);

        return $d3;

     label14:
        $l6 = l0 & 9223372036854775807L;

        $l7 = $l6 - 1L;

        $l8 = l1 | $l7;

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l8);

        return $d2;
    }

    public static float nextAfter(float, double)
    {
        float f0, $f1, $f2, $f3, $f4, $f5;
        double d0, $d1, $d2, $d3;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b2, $b3, $b4, $b11, $b12;

        f0 := @parameter0: float;

        d0 := @parameter1: double;

        $d1 = (double) f0;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label02;

     label01:
        return #NaNF;

     label02:
        $d2 = (double) f0;

        $b2 = $d2 cmpl d0;

        if $b2 != 0 goto label03;

        $f3 = (float) d0;

        return $f3;

     label03:
        $z2 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z2 == 0 goto label06;

        $b12 = f0 cmpg 0.0F;

        if $b12 >= 0 goto label04;

        $f4 = -3.4028235E38F;

        goto label05;

     label04:
        $f4 = 3.4028235E38F;

     label05:
        return $f4;

     label06:
        $b3 = f0 cmpl 0.0F;

        if $b3 != 0 goto label09;

        $b11 = d0 cmpg 0.0;

        if $b11 >= 0 goto label07;

        $f5 = -1.4E-45F;

        goto label08;

     label07:
        $f5 = 1.4E-45F;

     label08:
        return $f5;

     label09:
        i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i1 = i0 & -2147483648;

        $d3 = (double) f0;

        $b4 = d0 cmpg $d3;

        if $b4 >= 0 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        if i1 != 0 goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        $z5 = $z3 ^ $z4;

        if $z5 == 0 goto label14;

        $i8 = i0 & 2147483647;

        $i9 = $i8 + 1;

        $i10 = i1 | $i9;

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i10);

        return $f2;

     label14:
        $i5 = i0 & 2147483647;

        $i6 = $i5 - 1;

        $i7 = i1 | $i6;

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i7);

        return $f1;
    }

    public static double floor(double)
    {
        double d0, $d1, $d2, $d3, $d4;
        byte $b0, $b1, $b2, $b3, $b4, $b6;
        long l5;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return d0;

     label1:
        $b1 = d0 cmpl 4.503599627370496E15;

        if $b1 >= 0 goto label2;

        $b2 = d0 cmpg -4.503599627370496E15;

        if $b2 > 0 goto label3;

     label2:
        return d0;

     label3:
        l5 = (long) d0;

        $b3 = d0 cmpg 0.0;

        if $b3 >= 0 goto label4;

        $d4 = (double) l5;

        $b4 = $d4 cmpl d0;

        if $b4 == 0 goto label4;

        l5 = l5 - 1L;

     label4:
        $b6 = l5 cmp 0L;

        if $b6 != 0 goto label5;

        $d2 = (double) l5;

        $d3 = d0 * $d2;

        return $d3;

     label5:
        $d1 = (double) l5;

        return $d1;
    }

    public static double ceil(double)
    {
        double d0, $d1, d2, d3;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return d0;

     label1:
        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d0);

        $b1 = d2 cmpl d0;

        if $b1 != 0 goto label2;

        return d2;

     label2:
        d3 = d2 + 1.0;

        $b2 = d3 cmpl 0.0;

        if $b2 != 0 goto label3;

        $d1 = d0 * d3;

        return $d1;

     label3:
        return d3;
    }

    public static double rint(double)
    {
        double d0, d1, d2, $d3, $d4;
        long l0, $l3;
        byte $b1, $b2, $b4, $b5;

        d0 := @parameter0: double;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d0);

        d2 = d0 - d1;

        $b1 = d2 cmpl 0.5;

        if $b1 <= 0 goto label2;

        $b5 = d1 cmpl -1.0;

        if $b5 != 0 goto label1;

        return -0.0;

     label1:
        $d3 = d1 + 1.0;

        return $d3;

     label2:
        $b2 = d2 cmpg 0.5;

        if $b2 >= 0 goto label3;

        return d1;

     label3:
        l0 = (long) d1;

        $l3 = l0 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label4;

        $d4 = d1;

        goto label5;

     label4:
        $d4 = d1 + 1.0;

     label5:
        return $d4;
    }

    public static long round(double)
    {
        double d0, $d1, $d2;
        long $l0;

        d0 := @parameter0: double;

        $d1 = d0 + 0.5;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        $l0 = (long) $d2;

        return $l0;
    }

    public static int round(float)
    {
        float f0, $f1;
        double $d0, $d1;
        int $i0;

        f0 := @parameter0: float;

        $f1 = f0 + 0.5F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        $i0 = (int) $d1;

        return $i0;
    }

    public static int min(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public static long min(long, long)
    {
        long l0, l1, $l3;
        byte $b2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 > 0 goto label1;

        $l3 = l0;

        goto label2;

     label1:
        $l3 = l1;

     label2:
        return $l3;
    }

    public static float min(float, float)
    {
        float f0, f1;
        int i0;
        byte $b1, $b2, $b3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b1 = f0 cmpl f1;

        if $b1 <= 0 goto label1;

        return f1;

     label1:
        $b2 = f0 cmpg f1;

        if $b2 >= 0 goto label2;

        return f0;

     label2:
        $b3 = f0 cmpl f1;

        if $b3 == 0 goto label3;

        return #NaNF;

     label3:
        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        if i0 != -2147483648 goto label4;

        return f0;

     label4:
        return f1;
    }

    public static double min(double, double)
    {
        double d0, d1;
        long l0;
        byte $b1, $b2, $b3, $b4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label1;

        return d1;

     label1:
        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label2;

        return d0;

     label2:
        $b3 = d0 cmpl d1;

        if $b3 == 0 goto label3;

        return #NaN;

     label3:
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b4 = l0 cmp -9223372036854775808L;

        if $b4 != 0 goto label4;

        return d0;

     label4:
        return d1;
    }

    public static int max(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $i2 = i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    public static long max(long, long)
    {
        long l0, l1, $l3;
        byte $b2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 > 0 goto label1;

        $l3 = l1;

        goto label2;

     label1:
        $l3 = l0;

     label2:
        return $l3;
    }

    public static float max(float, float)
    {
        float f0, f1;
        int i0;
        byte $b1, $b2, $b3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b1 = f0 cmpl f1;

        if $b1 <= 0 goto label1;

        return f0;

     label1:
        $b2 = f0 cmpg f1;

        if $b2 >= 0 goto label2;

        return f1;

     label2:
        $b3 = f0 cmpl f1;

        if $b3 == 0 goto label3;

        return #NaNF;

     label3:
        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        if i0 != -2147483648 goto label4;

        return f1;

     label4:
        return f0;
    }

    public static double max(double, double)
    {
        double d0, d1;
        long l0;
        byte $b1, $b2, $b3, $b4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label1;

        return d0;

     label1:
        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label2;

        return d1;

     label2:
        $b3 = d0 cmpl d1;

        if $b3 == 0 goto label3;

        return #NaN;

     label3:
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b4 = l0 cmp -9223372036854775808L;

        if $b4 != 0 goto label4;

        return d1;

     label4:
        return d0;
    }

    public static double hypot(double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z1 == 0 goto label2;

     label1:
        return #Infinity;

     label2:
        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z2 != 0 goto label3;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z3 == 0 goto label4;

     label3:
        return #NaN;

     label4:
        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d0);

        i1 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>(d1);

        $i3 = i1 + 27;

        if i0 <= $i3 goto label5;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        return $d10;

     label5:
        $i4 = i0 + 27;

        if i1 <= $i4 goto label6;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        return $d9;

     label6:
        $i5 = i0 + i1;

        i2 = $i5 / 2;

        $i6 = neg i2;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d0, $i6);

        $i7 = neg i2;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d1, $i7);

        $d6 = d2 * d2;

        $d5 = d3 * d3;

        $d7 = $d6 + $d5;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>(d4, i2);

        return $d8;
    }

    public static double IEEEremainder(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.StrictMath: double IEEEremainder(double,double)>(d0, d1);

        return $d2;
    }

    public static int toIntExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0;
        byte $b1, $b2;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        int $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp -2147483648L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label2:
        $i3 = (int) l0;

        return $i3;
    }

    public static int incrementExact(int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, $i1;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        if i0 != 2147483647 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        $i1 = i0 + 1;

        return $i1;
    }

    public static long incrementExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, $l2;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        $l2 = l0 + 1L;

        return $l2;
    }

    public static int decrementExact(int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, $i1;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        if i0 != -2147483648 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        $i1 = i0 - 1;

        return $i1;
    }

    public static long decrementExact(long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, $l2;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;

        l0 := @parameter0: long;

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        $l2 = l0 - 1L;

        return $l2;
    }

    public static int addExact(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        $i3 = i0 ^ i1;

        if $i3 < 0 goto label1;

        $i4 = i2 ^ i1;

        if $i4 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        return i2;
    }

    public static long addExact(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3, $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 + l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $l5 = l2 ^ l1;

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        return l2;
    }

    public static int subtractExact(int, int)
    {
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 - i1;

        $i3 = i0 ^ i1;

        if $i3 >= 0 goto label1;

        $i4 = i2 ^ i1;

        if $i4 < 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        return i2;
    }

    public static long subtractExact(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3, $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 - l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $l5 = l2 ^ l1;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        return l2;
    }

    public static int multiplyExact(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label1;

        $i5 = 2147483647 / i1;

        if i0 > $i5 goto label3;

        $i6 = -2147483648 / i1;

        if i0 < $i6 goto label3;

     label1:
        if i1 >= -1 goto label2;

        $i3 = -2147483648 / i1;

        if i0 > $i3 goto label3;

        $i4 = 2147483647 / i1;

        if i0 < $i4 goto label3;

     label2:
        if i1 != -1 goto label4;

        if i0 != -2147483648 goto label4;

     label3:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_MULTIPLICATION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label4:
        $i2 = i0 * i1;

        return $i2;
    }

    public static long multiplyExact(long, long)
    {
        long l0, l1, $l5, $l7, $l9, $l11, $l13;
        byte $b2, $b3, $b4, $b6, $b8, $b10, $b12, $b14;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3, $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $l11 = 9223372036854775807L / l1;

        $b12 = l0 cmp $l11;

        if $b12 > 0 goto label3;

        $l13 = -9223372036854775808L / l1;

        $b14 = l0 cmp $l13;

        if $b14 < 0 goto label3;

     label1:
        $b3 = l1 cmp -1L;

        if $b3 >= 0 goto label2;

        $l7 = -9223372036854775808L / l1;

        $b8 = l0 cmp $l7;

        if $b8 > 0 goto label3;

        $l9 = 9223372036854775807L / l1;

        $b10 = l0 cmp $l9;

        if $b10 < 0 goto label3;

     label2:
        $b4 = l1 cmp -1L;

        if $b4 != 0 goto label4;

        $b6 = l0 cmp -9223372036854775808L;

        if $b6 != 0 goto label4;

     label3:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_MULTIPLICATION>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label4:
        $l5 = l0 * l1;

        return $l5;
    }

    public static int floorDiv(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        i2 = i0 % i1;

        $i3 = i0 ^ i1;

        if $i3 >= 0 goto label2;

        if i2 != 0 goto label3;

     label2:
        $i4 = i0 / i1;

        return $i4;

     label3:
        $i5 = i0 / i1;

        $i6 = $i5 - 1;

        return $i6;
    }

    public static long floorDiv(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, l2, $l4, $l6, $l8, $l9;
        byte $b3, $b5, $b7;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        l2 = l0 % l1;

        $l4 = l0 ^ l1;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label2;

        $b7 = l2 cmp 0L;

        if $b7 != 0 goto label3;

     label2:
        $l6 = l0 / l1;

        return $l6;

     label3:
        $l8 = l0 / l1;

        $l9 = $l8 - 1L;

        return $l9;
    }

    public static int floorMod(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        i2 = i0 % i1;

        $i3 = i0 ^ i1;

        if $i3 >= 0 goto label2;

        if i2 != 0 goto label3;

     label2:
        return i2;

     label3:
        $i4 = i1 + i2;

        return $i4;
    }

    public static long floorMod(long, long)
    {
        long l0, l1, l2, $l4, $l7;
        byte $b3, $b5, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label1:
        l2 = l0 % l1;

        $l4 = l0 ^ l1;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label2;

        $b6 = l2 cmp 0L;

        if $b6 != 0 goto label3;

     label2:
        return l2;

     label3:
        $l7 = l1 + l2;

        return $l7;
    }

    public static double copySign(double, double)
    {
        double d0, d1, $d2;
        long l0, l1, $l2;
        byte $b3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l2 = l0 ^ l1;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label1;

        return d0;

     label1:
        $d2 = neg d0;

        return $d2;
    }

    public static float copySign(float, float)
    {
        float f0, f1, $f2;
        int i0, i1, $i2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i2 = i0 ^ i1;

        if $i2 < 0 goto label1;

        return f0;

     label1:
        $f2 = neg f0;

        return $f2;
    }

    public static int getExponent(double)
    {
        double d0;
        long $l0, $l1, $l2;
        int $i3, $i4;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = $l0 >>> 52;

        $l2 = $l1 & 2047L;

        $i3 = (int) $l2;

        $i4 = $i3 - 1023;

        return $i4;
    }

    public static int getExponent(float)
    {
        float f0;
        int $i0, $i1, $i2, $i3;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i1 = $i0 >>> 23;

        $i2 = $i1 & 255;

        $i3 = $i2 - 127;

        return $i3;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.io.PrintStream r1;
        double[] $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        double[][] $r6;

        r0 := @parameter0: java.lang.String[];

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$000()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_INT_TABLE_A", 1500, $r2);

        $r3 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpIntTable: double[] access$100()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_INT_TABLE_B", 1500, $r3);

        $r4 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$200()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_FRAC_TABLE_A", 1025, $r4);

        $r5 = staticinvoke <org.apache.commons.math3.util.FastMath$ExpFracTable: double[] access$300()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "EXP_FRAC_TABLE_B", 1025, $r5);

        $r6 = staticinvoke <org.apache.commons.math3.util.FastMath$lnMant: double[][] access$400()>();

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[][])>(r1, "LN_MANT", 1024, $r6);

        $r7 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "SINE_TABLE_A", 14, $r7);

        $r8 = <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "SINE_TABLE_B", 14, $r8);

        $r9 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "COSINE_TABLE_A", 14, $r9);

        $r10 = <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "COSINE_TABLE_B", 14, $r10);

        $r11 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "TANGENT_TABLE_A", 14, $r11);

        $r12 = <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B>;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void printarray(java.io.PrintStream,java.lang.String,int,double[])>(r1, "TANGENT_TABLE_B", 14, $r12);

        return;
    }

    static void <clinit>()
    {
        double $d0;
        double[][] $r0, $r10;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r25, $r26;
        long[] $r23, $r24;

        <org.apache.commons.math3.util.FastMath: double F_1_4> = 0.25;

        <org.apache.commons.math3.util.FastMath: double F_1_2> = 0.5;

        <org.apache.commons.math3.util.FastMath: double F_5_6> = 0.8333333333333334;

        <org.apache.commons.math3.util.FastMath: double F_7_8> = 0.875;

        <org.apache.commons.math3.util.FastMath: double F_9_10> = 0.9;

        <org.apache.commons.math3.util.FastMath: double F_11_12> = 0.9166666666666666;

        <org.apache.commons.math3.util.FastMath: double F_13_14> = 0.9285714285714286;

        <org.apache.commons.math3.util.FastMath: double F_15_16> = 0.9375;

        <org.apache.commons.math3.util.FastMath: double F_3_4> = 0.75;

        <org.apache.commons.math3.util.FastMath: double F_1_17> = 0.058823529411764705;

        <org.apache.commons.math3.util.FastMath: double F_1_15> = 0.06666666666666667;

        <org.apache.commons.math3.util.FastMath: double F_1_13> = 0.07692307692307693;

        <org.apache.commons.math3.util.FastMath: double F_1_11> = 0.09090909090909091;

        <org.apache.commons.math3.util.FastMath: double F_1_9> = 0.1111111111111111;

        <org.apache.commons.math3.util.FastMath: double F_1_7> = 0.14285714285714285;

        <org.apache.commons.math3.util.FastMath: double F_1_5> = 0.2;

        <org.apache.commons.math3.util.FastMath: double F_1_3> = 0.3333333333333333;

        <org.apache.commons.math3.util.FastMath: double TWO_POWER_53> = 9.007199254740992E15;

        <org.apache.commons.math3.util.FastMath: double TWO_POWER_52> = 4.503599627370496E15;

        <org.apache.commons.math3.util.FastMath: long MASK_NON_SIGN_LONG> = 9223372036854775807L;

        <org.apache.commons.math3.util.FastMath: int MASK_NON_SIGN_INT> = 2147483647;

        <org.apache.commons.math3.util.FastMath: long MASK_30BITS> = -1073741824L;

        <org.apache.commons.math3.util.FastMath: long HEX_40000000> = 1073741824L;

        <org.apache.commons.math3.util.FastMath: int SINE_TABLE_LEN> = 14;

        <org.apache.commons.math3.util.FastMath: double LN_2_B> = 1.1730463525082348E-7;

        <org.apache.commons.math3.util.FastMath: double LN_2_A> = 0.6931470632553101;

        <org.apache.commons.math3.util.FastMath: boolean RECOMPUTE_TABLES_AT_RUNTIME> = 0;

        <org.apache.commons.math3.util.FastMath: int EXP_FRAC_TABLE_LEN> = 1025;

        <org.apache.commons.math3.util.FastMath: int LN_MANT_LEN> = 1024;

        <org.apache.commons.math3.util.FastMath: int EXP_INT_TABLE_LEN> = 1500;

        <org.apache.commons.math3.util.FastMath: int EXP_INT_TABLE_MAX_INDEX> = 750;

        <org.apache.commons.math3.util.FastMath: double E> = 2.718281828459045;

        <org.apache.commons.math3.util.FastMath: double PI> = 3.141592653589793;

        $d0 = staticinvoke <java.lang.StrictMath: double log(double)>(1.7976931348623157E308);

        <org.apache.commons.math3.util.FastMath: double LOG_MAX_VALUE> = $d0;

        $r0 = newarray (double[])[9];

        $r1 = newarray (double)[2];

        $r1[0] = 1.0;

        $r1[1] = 5.669184079525E-24;

        $r0[0] = $r1;

        $r2 = newarray (double)[2];

        $r2[0] = -0.25;

        $r2[1] = -0.25;

        $r0[1] = $r2;

        $r3 = newarray (double)[2];

        $r3[0] = 0.3333333134651184;

        $r3[1] = 1.986821492305628E-8;

        $r0[2] = $r3;

        $r4 = newarray (double)[2];

        $r4[0] = -0.25;

        $r4[1] = -6.663542893624021E-14;

        $r0[3] = $r4;

        $r5 = newarray (double)[2];

        $r5[0] = 0.19999998807907104;

        $r5[1] = 1.1921056801463227E-8;

        $r0[4] = $r5;

        $r6 = newarray (double)[2];

        $r6[0] = -0.1666666567325592;

        $r6[1] = -7.800414592973399E-9;

        $r0[5] = $r6;

        $r7 = newarray (double)[2];

        $r7[0] = 0.1428571343421936;

        $r7[1] = 5.650007086920087E-9;

        $r0[6] = $r7;

        $r8 = newarray (double)[2];

        $r8[0] = -0.12502530217170715;

        $r8[1] = -7.44321345601866E-11;

        $r0[7] = $r8;

        $r9 = newarray (double)[2];

        $r9[0] = 0.11113807559013367;

        $r9[1] = 9.219544613762692E-9;

        $r0[8] = $r9;

        <org.apache.commons.math3.util.FastMath: double[][] LN_QUICK_COEF> = $r0;

        $r10 = newarray (double[])[6];

        $r11 = newarray (double)[2];

        $r11[0] = 1.0;

        $r11[1] = -6.032174644509064E-23;

        $r10[0] = $r11;

        $r12 = newarray (double)[2];

        $r12[0] = -0.25;

        $r12[1] = -0.25;

        $r10[1] = $r12;

        $r13 = newarray (double)[2];

        $r13[0] = 0.3333333134651184;

        $r13[1] = 1.9868161777724352E-8;

        $r10[2] = $r13;

        $r14 = newarray (double)[2];

        $r14[0] = -0.2499999701976776;

        $r14[1] = -2.957007209750105E-8;

        $r10[3] = $r14;

        $r15 = newarray (double)[2];

        $r15[0] = 0.19999954104423523;

        $r15[1] = 1.5830993332061267E-10;

        $r10[4] = $r15;

        $r16 = newarray (double)[2];

        $r16[0] = -0.16624879837036133;

        $r16[1] = -2.6033824355191673E-8;

        $r10[5] = $r16;

        <org.apache.commons.math3.util.FastMath: double[][] LN_HI_PREC_COEF> = $r10;

        $r17 = newarray (double)[14];

        $r17[0] = 0.0;

        $r17[1] = 0.1246747374534607;

        $r17[2] = 0.24740394949913025;

        $r17[3] = 0.366272509098053;

        $r17[4] = 0.4794255495071411;

        $r17[5] = 0.5850973129272461;

        $r17[6] = 0.6816387176513672;

        $r17[7] = 0.7675435543060303;

        $r17[8] = 0.8414709568023682;

        $r17[9] = 0.902267575263977;

        $r17[10] = 0.9489846229553223;

        $r17[11] = 0.9808930158615112;

        $r17[12] = 0.9974949359893799;

        $r17[13] = 0.9985313415527344;

        <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_A> = $r17;

        $r18 = newarray (double)[14];

        $r18[0] = 0.0;

        $r18[1] = -4.068233003401932E-9;

        $r18[2] = 9.755392680573412E-9;

        $r18[3] = 1.9987994582857286E-8;

        $r18[4] = -1.0902938113007961E-8;

        $r18[5] = -3.9986783938944604E-8;

        $r18[6] = 4.23719669792332E-8;

        $r18[7] = -5.207000323380292E-8;

        $r18[8] = 2.800552834259E-8;

        $r18[9] = 1.883511811213715E-8;

        $r18[10] = -3.5997360512765566E-9;

        $r18[11] = 4.116164446561962E-8;

        $r18[12] = 5.0614674548127384E-8;

        $r18[13] = -1.0129027912496858E-9;

        <org.apache.commons.math3.util.FastMath: double[] SINE_TABLE_B> = $r18;

        $r19 = newarray (double)[14];

        $r19[0] = 1.0;

        $r19[1] = 0.9921976327896118;

        $r19[2] = 0.9689123630523682;

        $r19[3] = 0.9305076599121094;

        $r19[4] = 0.8775825500488281;

        $r19[5] = 0.8109631538391113;

        $r19[6] = 0.7316888570785522;

        $r19[7] = 0.6409968137741089;

        $r19[8] = 0.5403022766113281;

        $r19[9] = 0.4311765432357788;

        $r19[10] = 0.3153223395347595;

        $r19[11] = 0.19454771280288696;

        $r19[12] = 0.07073719799518585;

        $r19[13] = -0.05417713522911072;

        <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_A> = $r19;

        $r20 = newarray (double)[14];

        $r20[0] = 0.0;

        $r20[1] = 3.4439717236742845E-8;

        $r20[2] = 5.865827662008209E-8;

        $r20[3] = -3.7999795083850525E-8;

        $r20[4] = 1.184154459111628E-8;

        $r20[5] = -3.43338934259355E-8;

        $r20[6] = 1.1795268640216787E-8;

        $r20[7] = 4.438921624363781E-8;

        $r20[8] = 2.925681159240093E-8;

        $r20[9] = -2.6437112632041807E-8;

        $r20[10] = 2.2860509143963117E-8;

        $r20[11] = -4.813899778443457E-9;

        $r20[12] = 3.6725170580355583E-9;

        $r20[13] = 2.0217439756338078E-10;

        <org.apache.commons.math3.util.FastMath: double[] COSINE_TABLE_B> = $r20;

        $r21 = newarray (double)[14];

        $r21[0] = 0.0;

        $r21[1] = 0.1256551444530487;

        $r21[2] = 0.25534194707870483;

        $r21[3] = 0.3936265707015991;

        $r21[4] = 0.5463024377822876;

        $r21[5] = 0.7214844226837158;

        $r21[6] = 0.9315965175628662;

        $r21[7] = 1.1974215507507324;

        $r21[8] = 1.5574076175689697;

        $r21[9] = 2.092571258544922;

        $r21[10] = 3.0095696449279785;

        $r21[11] = 5.041914939880371;

        $r21[12] = 14.101419448852539;

        $r21[13] = -18.430862426757812;

        <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_A> = $r21;

        $r22 = newarray (double)[14];

        $r22[0] = 0.0;

        $r22[1] = -7.877917738262007E-9;

        $r22[2] = -2.5857668567479893E-8;

        $r22[3] = 5.2240336371356666E-9;

        $r22[4] = 5.206150291559893E-8;

        $r22[5] = 1.8307188599677033E-8;

        $r22[6] = -5.7618793749770706E-8;

        $r22[7] = 7.848361555046424E-8;

        $r22[8] = 1.0708593250394448E-7;

        $r22[9] = 1.7827257129423813E-8;

        $r22[10] = 2.893485277253286E-8;

        $r22[11] = 3.1660099222737955E-7;

        $r22[12] = 4.983191803254889E-7;

        $r22[13] = -3.356118100840571E-7;

        <org.apache.commons.math3.util.FastMath: double[] TANGENT_TABLE_B> = $r22;

        $r23 = newarray (long)[18];

        $r23[0] = 2935890503282001226L;

        $r23[1] = 9154082963658192752L;

        $r23[2] = 3952090531849364496L;

        $r23[3] = 9193070505571053912L;

        $r23[4] = 7910884519577875640L;

        $r23[5] = 113236205062349959L;

        $r23[6] = 4577762542105553359L;

        $r23[7] = -5034868814120038111L;

        $r23[8] = 4208363204685324176L;

        $r23[9] = 5648769086999809661L;

        $r23[10] = 2819561105158720014L;

        $r23[11] = -4035746434778044925L;

        $r23[12] = -302932621132653753L;

        $r23[13] = -2644281811660520851L;

        $r23[14] = -3183605296591799669L;

        $r23[15] = 6722166367014452318L;

        $r23[16] = -3512299194304650054L;

        $r23[17] = -7278142539171889152L;

        <org.apache.commons.math3.util.FastMath: long[] RECIP_2PI> = $r23;

        $r24 = newarray (long)[2];

        $r24[0] = -3958705157555305932L;

        $r24[1] = -4267615245585081135L;

        <org.apache.commons.math3.util.FastMath: long[] PI_O_4_BITS> = $r24;

        $r25 = newarray (double)[14];

        $r25[0] = 0.0;

        $r25[1] = 0.125;

        $r25[2] = 0.25;

        $r25[3] = 0.375;

        $r25[4] = 0.5;

        $r25[5] = 0.625;

        $r25[6] = 0.75;

        $r25[7] = 0.875;

        $r25[8] = 1.0;

        $r25[9] = 1.125;

        $r25[10] = 1.25;

        $r25[11] = 1.375;

        $r25[12] = 1.5;

        $r25[13] = 1.625;

        <org.apache.commons.math3.util.FastMath: double[] EIGHTHS> = $r25;

        $r26 = newarray (double)[5];

        $r26[0] = 0.6299605249474366;

        $r26[1] = 0.7937005259840998;

        $r26[2] = 1.0;

        $r26[3] = 1.2599210498948732;

        $r26[4] = 1.5874010519681994;

        <org.apache.commons.math3.util.FastMath: double[] CBRTTWO> = $r26;

        return;
    }
}
