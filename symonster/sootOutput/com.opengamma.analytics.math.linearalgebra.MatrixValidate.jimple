public abstract class com.opengamma.analytics.math.linearalgebra.MatrixValidate extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.linearalgebra.MatrixValidate r0;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.MatrixValidate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void notNaNOrInfinite(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r0;
        int i0, i1, i2, i3;
        double d0;
        int[] $r1;
        java.lang.Double $r2;
        boolean $z0, $z1;
        com.opengamma.analytics.math.MathException $r3, $r4;

        r0 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        $r1 = newarray (int)[2];

        $r1[0] = i2;

        $r1[1] = i3;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r1);

        d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label3;

        $r4 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r4.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Matrix contains a NaN");

        throw $r4;

     label3:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label4;

        $r3 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r3.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Matrix contains an infinite");

        throw $r3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }
}
