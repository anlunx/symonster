public class com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double price(double, double, double, boolean, double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;
        boolean z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        z0 := @parameter3: boolean;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        $d5 = staticinvoke <java.lang.Math: double exp(double)>(d3);

        $d6 = d0 * $d5;

        $d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d6, d1, d2, d4, z0);

        return $d7;
    }

    public static double impliedVolatility(double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, d39, d40, d41, d42, $d43, d45, d46, d47, d48, d49, $d50;
        boolean z0, $z1;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        com.opengamma.analytics.math.MathException $r0, $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $b0 = d1 cmpl d0;

        if $b0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label03;

        return d4;

     label03:
        $b2 = d3 cmpl 0.0;

        if $b2 != 0 goto label04;

        return d4;

     label04:
        d5 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation: double price(double,double,double,boolean,double,double)>(d0, d1, d2, $z1, d3, d4);

        $b3 = d5 cmpg 1.0E-100;

        if $b3 > 0 goto label08;

        $d22 = d1 / d0;

        d38 = staticinvoke <java.lang.Math: double log(double)>($d22);

        d39 = d2 / 2.0;

        $d23 = neg d38;

        $d27 = $d23 + d3;

        $d24 = d4 * d4;

        $d25 = $d24 * d2;

        $d26 = $d25 / 2.0;

        $d28 = $d27 - $d26;

        d40 = $d28 / d4;

        $d31 = d40 * d40;

        $d29 = 4.0 * d39;

        $d30 = $d29 * d38;

        d41 = $d31 - $d30;

        $b6 = d41 cmpg 0.0;

        if $b6 >= 0 goto label05;

        $r1 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r1.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("cannot solve for sigma");

        throw $r1;

     label05:
        d42 = staticinvoke <java.lang.Math: double sqrt(double)>(d41);

        if $z1 == 0 goto label06;

        $d35 = neg d40;

        $d36 = $d35 - d42;

        $d37 = $d36 / 2.0;

        $d43 = $d37 / d39;

        goto label07;

     label06:
        $d32 = neg d40;

        $d33 = $d32 + d42;

        $d34 = $d33 / 2.0;

        $d43 = $d34 / d39;

     label07:
        return $d43;

     label08:
        if $z1 != 0 goto label12;

        $b4 = d5 cmpl d1;

        if $b4 < 0 goto label12;

        $d7 = d1 / d0;

        d45 = staticinvoke <java.lang.Math: double log(double)>($d7);

        d46 = d2 / 2.0;

        $d11 = d45 + d3;

        $d8 = d4 * d4;

        $d9 = $d8 * d2;

        $d10 = $d9 / 2.0;

        $d12 = $d11 - $d10;

        d47 = $d12 / d4;

        $d15 = d47 * d47;

        $d13 = 4.0 * d46;

        $d14 = $d13 * d45;

        d48 = $d15 - $d14;

        $b5 = d48 cmpg 0.0;

        if $b5 >= 0 goto label09;

        $r0 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r0.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("cannot solve for sigma");

        throw $r0;

     label09:
        d49 = staticinvoke <java.lang.Math: double sqrt(double)>(d48);

        if $z1 == 0 goto label10;

        $d19 = neg d47;

        $d20 = $d19 - d49;

        $d21 = $d20 / 2.0;

        $d50 = $d21 / d46;

        goto label11;

     label10:
        $d16 = neg d47;

        $d17 = $d16 + d49;

        $d18 = $d17 / 2.0;

        $d50 = $d18 / d46;

     label11:
        return $d50;

     label12:
        $d6 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double impliedVolatility(double,double,double,double,boolean)>(d5, d0, d1, d2, z0);

        return $d6;
    }

    public static double dualDelta(double, double, double, boolean, double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7;
        boolean z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        z0 := @parameter3: boolean;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        $d5 = staticinvoke <java.lang.Math: double exp(double)>(d3);

        $d6 = d0 * $d5;

        $d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>($d6, d1, d2, d4, z0);

        return $d7;
    }

    public static double dVdK(double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10;
        byte $b0, $b1;
        boolean $z1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $b0 = d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $b1 = d1 cmpl d0;

        if $b1 < 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        d5 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation: double impliedVolatility(double,double,double,double,double)>(d0, d1, d2, d3, d4);

        d6 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation: double dualDelta(double,double,double,boolean,double,double)>(d0, d1, d2, $z1, d3, d4);

        d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d0, d1, d2, d5, $z1);

        d8 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d0, d1, d2, d5);

        $d9 = d6 - d7;

        $d10 = $d9 / d8;

        return $d10;
    }

    protected static double dVdK(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10;
        byte $b0, $b1;
        boolean $z1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $b0 = d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $b1 = d1 cmpl d0;

        if $b1 < 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        d6 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.ShiftedLogNormalTailExtrapolation: double dualDelta(double,double,double,boolean,double,double)>(d0, d1, d2, $z1, d3, d4);

        d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d0, d1, d2, d5, $z1);

        d8 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d0, d1, d2, d5);

        $d9 = d6 - d7;

        $d10 = $d9 / d8;

        return $d10;
    }
}
