public class com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction extends com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider
{
    private static final org.slf4j.Logger s_logger;
    private static final double CUTOFF_MONEYNESS;
    private static final double SMALL_Z;
    private static final double LARGE_NEG_Z;
    private static final double LARGE_POS_Z;
    private static final double BETA_EPS;
    private static final double RHO_EPS;
    private static final double RHO_EPS_NEGATIVE;
    private static final double ATM_EPS;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$1 $r2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$1;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$1: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r0, r1, d0);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$2 $r2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$2;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r0, r1, d0);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$3 $r2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$3;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r0, r1, d0);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: com.opengamma.analytics.math.function.Function1D getModelAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    public double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, d114, d115;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r2;
        byte $b0, $b1;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r3;
        org.slf4j.Logger $r4;
        java.lang.Double $r5, $r6, $r7;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d6 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        $b0 = d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        d7 = d0 * 1.0E-12;

        $b1 = d2 cmpg d7;

        if $b1 >= 0 goto label2;

        $r4 = <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: org.slf4j.Logger s_logger>;

        $r3 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $r3[2] = $r7;

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Given strike of {} is less than cutoff at {}, therefore the strike is taken as {}", $r3);

        d104 = d7;

        goto label3;

     label2:
        d104 = d2;

     label3:
        d8 = 1.0 - d4;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d0, d104, 1.0E-7);

        if $z0 == 0 goto label4;

        d105 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d8);

        $d82 = d8 * d8;

        $d83 = $d82 * d3;

        $d84 = $d83 * d3;

        $d85 = $d84 / 24.0;

        $d86 = $d85 / d105;

        $d92 = $d86 / d105;

        $d87 = d5 * d3;

        $d88 = $d87 * d4;

        $d89 = $d88 * d6;

        $d90 = $d89 / 4.0;

        $d91 = $d90 / d105;

        $d99 = $d92 + $d91;

        $d96 = d6 * d6;

        $d93 = 3.0 * d5;

        $d94 = $d93 * d5;

        $d95 = 2.0 - $d94;

        $d97 = $d96 * $d95;

        $d98 = $d97 / 24.0;

        $d100 = $d99 + $d98;

        $d101 = d1 * $d100;

        $d102 = 1.0 + $d101;

        $d103 = d3 * $d102;

        d106 = $d103 / d105;

        goto label7;

     label4:
        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d4, 0.0, 1.0E-8);

        if $z1 == 0 goto label5;

        $d61 = d0 / d104;

        d107 = staticinvoke <java.lang.Math: double log(double)>($d61);

        $d62 = d0 * d104;

        $d63 = staticinvoke <java.lang.Math: double sqrt(double)>($d62);

        $d64 = d6 * $d63;

        $d65 = $d64 * d107;

        d108 = $d65 / d3;

        d109 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double getZOverChi(double,double)>(d5, d108);

        $d66 = d3 * d107;

        $d79 = $d66 * d109;

        $d67 = d3 * d3;

        $d68 = $d67 / d0;

        $d74 = $d68 / d104;

        $d72 = d6 * d6;

        $d69 = 3.0 * d5;

        $d70 = $d69 * d5;

        $d71 = 2.0 - $d70;

        $d73 = $d72 * $d71;

        $d75 = $d74 + $d73;

        $d76 = d1 * $d75;

        $d77 = $d76 / 24.0;

        $d78 = 1.0 + $d77;

        $d81 = $d79 * $d78;

        $d80 = d0 - d104;

        d106 = $d81 / $d80;

        goto label7;

     label5:
        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d4, 1.0, 1.0E-8);

        if $z2 == 0 goto label6;

        $d46 = d0 / d104;

        d110 = staticinvoke <java.lang.Math: double log(double)>($d46);

        $d47 = d6 * d110;

        d111 = $d47 / d3;

        d112 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double getZOverChi(double,double)>(d5, d111);

        $d60 = d3 * d112;

        $d48 = d5 * d3;

        $d49 = $d48 * d6;

        $d56 = $d49 / 4.0;

        $d53 = d6 * d6;

        $d50 = 3.0 * d5;

        $d51 = $d50 * d5;

        $d52 = 2.0 - $d51;

        $d54 = $d53 * $d52;

        $d55 = $d54 / 24.0;

        $d57 = $d56 + $d55;

        $d58 = d1 * $d57;

        $d59 = 1.0 + $d58;

        d106 = $d60 * $d59;

        goto label7;

     label6:
        $d15 = d0 / d104;

        d113 = staticinvoke <java.lang.Math: double log(double)>($d15);

        $d16 = d0 * d104;

        d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d16, d8);

        d10 = staticinvoke <java.lang.Math: double sqrt(double)>(d9);

        $d17 = d8 * d113;

        d11 = staticinvoke <java.lang.Math: double pow(double,double)>($d17, 2.0);

        $d18 = d6 * d10;

        $d19 = $d18 * d113;

        d114 = $d19 / d3;

        d115 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double getZOverChi(double,double)>(d5, d114);

        $d20 = d11 / 24.0;

        $d23 = 1.0 + $d20;

        $d21 = d11 * d11;

        $d22 = $d21 / 1920.0;

        $d24 = $d23 + $d22;

        $d25 = d10 * $d24;

        d12 = d3 / $d25;

        $d26 = d8 * d8;

        $d27 = $d26 * d3;

        $d28 = $d27 * d3;

        $d29 = $d28 / 24.0;

        $d35 = $d29 / d9;

        $d30 = d5 * d6;

        $d31 = $d30 * d4;

        $d32 = $d31 * d3;

        $d33 = $d32 / 4.0;

        $d34 = $d33 / d10;

        $d42 = $d35 + $d34;

        $d39 = d6 * d6;

        $d36 = 3.0 * d5;

        $d37 = $d36 * d5;

        $d38 = 2.0 - $d37;

        $d40 = $d39 * $d38;

        $d41 = $d40 / 24.0;

        $d43 = $d42 + $d41;

        $d44 = d1 * $d43;

        d14 = 1.0 + $d44;

        $d45 = d12 * d115;

        d106 = $d45 * d14;

     label7:
        return d106;
    }

    public double getVolatility(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7;
        byte $b0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r3;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Forward must be > 0");

        $r3 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>(d1, d2, 1);

        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double,double,double,double)>(d3, d4, d5, d6);

        $d7 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)>($r3, d0, $r4);

        return $d7;
    }

    public double[] getVolatilityModelAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d14, d15, d16, d17, d18, d19, d20, d21, d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, d179;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r2;
        double[] r3, r4;
        byte $b0, $b1;
        boolean $z0;
        java.lang.Object[] $r5;
        org.slf4j.Logger $r6;
        java.lang.Double $r7, $r8, $r9;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        r3 = newarray (double)[4];

        d1 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d179 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d2 = d0 * 1.0E-12;

        $b0 = d179 cmpg d2;

        if $b0 >= 0 goto label1;

        $r6 = <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: org.slf4j.Logger s_logger>;

        $r5 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d179);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r5[2] = $r9;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Given strike of {} is less than cutoff at {}, therefore the strike is taken as {}", $r5);

        d179 = d2;

     label1:
        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d5 = 1.0 - d4;

        d6 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d7 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label4;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 0.0);

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d0, d179, 1.0E-7);

        if $z0 == 0 goto label2;

        $d169 = 3.0 * d6;

        $d170 = $d169 * d6;

        $d171 = 2.0 - $d170;

        $d172 = $d171 * d7;

        $d173 = $d172 * d7;

        $d174 = $d173 / 24.0;

        $d175 = $d174 * d3;

        $d176 = 1.0 + $d175;

        $d177 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d5);

        $d178 = $d176 / $d177;

        r3[3] = $d178;

        goto label3;

     label2:
        r3[3] = 1.0E7;

     label3:
        return r3;

     label4:
        $d24 = d0 * d179;

        $d23 = d5 / 2.0;

        d8 = staticinvoke <java.lang.Math: double pow(double,double)>($d24, $d23);

        $d25 = d0 / d179;

        d9 = staticinvoke <java.lang.Math: double log(double)>($d25);

        $d26 = d7 / d1;

        $d27 = $d26 * d8;

        d10 = $d27 * d9;

        $d28 = d5 * d5;

        $d30 = $d28 / 24.0;

        $d29 = d9 * d9;

        $d31 = $d30 * $d29;

        $d32 = 1.0 + $d31;

        $d33 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 4.0);

        $d34 = $d33 / 1920.0;

        $d35 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 4.0);

        $d36 = $d34 * $d35;

        $d37 = $d32 + $d36;

        d11 = d8 * $d37;

        $d38 = d5 * d1;

        $d39 = $d38 / d8;

        $d40 = staticinvoke <java.lang.Math: double pow(double,double)>($d39, 2.0);

        $d46 = $d40 / 24.0;

        $d41 = d6 * d4;

        $d42 = $d41 * d7;

        $d44 = $d42 * d1;

        $d43 = 4.0 * d8;

        $d45 = $d44 / $d43;

        $d53 = $d46 + $d45;

        $d47 = 3.0 * d6;

        $d48 = $d47 * d6;

        $d49 = 2.0 - $d48;

        $d50 = $d49 * d7;

        $d51 = $d50 * d7;

        $d52 = $d51 / 24.0;

        $d54 = $d53 + $d52;

        $d55 = $d54 * d3;

        d12 = 1.0 + $d55;

        r4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double[] zOverChiWithDev(double,double)>(d6, d10);

        $d57 = d1 / d11;

        $d56 = r4[0];

        $d58 = $d57 * $d56;

        d14 = $d58 * 1.0;

        $d60 = neg d1;

        $d59 = d11 * d11;

        $d62 = $d60 / $d59;

        $d61 = r4[0];

        $d63 = $d62 * $d61;

        $d64 = $d63 * d12;

        d15 = $d64 * 1.0;

        $d65 = d1 / d11;

        $d66 = $d65 * d12;

        d16 = $d66 * 1.0;

        $d67 = r4[2];

        d17 = $d67 * d16;

        $d68 = d7 / d1;

        $d69 = $d68 * d9;

        $d72 = $d69 * d17;

        $d70 = d11 / d8;

        $d71 = $d70 * d15;

        $d74 = $d72 + $d71;

        $d73 = d5 * d1;

        $d75 = staticinvoke <java.lang.Math: double pow(double,double)>($d73, 2.0);

        $d76 = staticinvoke <java.lang.Math: double pow(double,double)>(d8, 3.0);

        $d77 = $d75 / $d76;

        $d84 = $d77 / 12.0;

        $d78 = d6 * d4;

        $d79 = $d78 * d7;

        $d80 = $d79 * d1;

        $d82 = $d80 / 4.0;

        $d81 = d8 * d8;

        $d83 = $d82 / $d81;

        $d85 = $d84 + $d83;

        $d86 = $d85 * d3;

        $d87 = $d86 * d14;

        d18 = $d74 - $d87;

        $d88 = 1.0 / d1;

        $d89 = $d88 * d8;

        $d90 = $d89 * d9;

        $d103 = $d90 * d17;

        $d91 = d6 * d4;

        $d93 = $d91 * d1;

        $d92 = 4.0 * d8;

        $d99 = $d93 / $d92;

        $d94 = 3.0 * d6;

        $d95 = $d94 * d6;

        $d96 = 2.0 - $d95;

        $d97 = $d96 * d7;

        $d98 = $d97 / 12.0;

        $d100 = $d99 + $d98;

        $d101 = $d100 * d3;

        $d102 = $d101 * d14;

        d19 = $d103 + $d102;

        $d104 = r4[1];

        $d115 = $d104 * d16;

        $d105 = d4 * d7;

        $d107 = $d105 * d1;

        $d106 = 4.0 * d8;

        $d111 = $d107 / $d106;

        $d108 = d6 * d7;

        $d109 = $d108 * d7;

        $d110 = $d109 / 4.0;

        $d112 = $d111 - $d110;

        $d113 = $d112 * d3;

        $d114 = $d113 * d14;

        d20 = $d115 + $d114;

        $d117 = neg d7;

        $d116 = d1 * d1;

        $d118 = $d117 / $d116;

        $d119 = $d118 * d8;

        $d120 = $d119 * d9;

        $d133 = $d120 * d17;

        $d121 = d5 * d1;

        $d123 = $d121 / d8;

        $d122 = d5 / d8;

        $d124 = $d123 * $d122;

        $d129 = $d124 / 12.0;

        $d125 = d6 * d4;

        $d127 = $d125 * d7;

        $d126 = 4.0 * d8;

        $d128 = $d127 / $d126;

        $d130 = $d129 + $d128;

        $d131 = $d130 * d3;

        $d132 = $d131 * d14;

        $d139 = $d133 + $d132;

        $d135 = 1.0 / d11;

        $d134 = r4[0];

        $d136 = $d135 * $d134;

        $d137 = $d136 * d12;

        $d138 = $d137 * 1.0;

        d21 = $d139 + $d138;

        $d140 = d0 * d179;

        $d141 = staticinvoke <java.lang.Math: double log(double)>($d140);

        $d142 = -0.5 * $d141;

        $d143 = $d142 * d8;

        $d146 = $d143 * d18;

        $d145 = d5 / 12.0;

        $d144 = d9 * d9;

        $d147 = $d145 * $d144;

        $d148 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 3.0);

        $d149 = $d148 / 480.0;

        $d150 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 4.0);

        $d151 = $d149 * $d150;

        $d152 = $d147 + $d151;

        $d153 = d8 * $d152;

        $d154 = $d153 * d15;

        $d168 = $d146 - $d154;

        $d155 = neg d5;

        $d156 = $d155 * d1;

        $d157 = $d156 * d1;

        $d158 = $d157 / d8;

        $d159 = $d158 / d8;

        $d164 = $d159 / 12.0;

        $d160 = d6 * d7;

        $d161 = $d160 * d1;

        $d162 = $d161 / 4.0;

        $d163 = $d162 / d8;

        $d165 = $d164 + $d163;

        $d166 = $d165 * d3;

        $d167 = $d166 * d14;

        d22 = $d168 + $d167;

        r3[0] = d21;

        r3[1] = d22;

        r3[2] = d20;

        r3[3] = d19;

        return r3;
    }

    public double[] getVolatilityAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d14, d15, d16, d17, d18, d19, d20, d21, d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, d169, d170, d171, d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, d214, d215, d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r2;
        double[] r3;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] $r4;
        org.slf4j.Logger $r5;
        java.lang.Double $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        r3 = newarray (double)[7];

        d1 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d169 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d2 = d0 * 1.0E-12;

        $b0 = d169 cmpg d2;

        if $b0 >= 0 goto label01;

        $r5 = <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: org.slf4j.Logger s_logger>;

        $r4 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d169);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[1] = $r7;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[2] = $r8;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Given strike of {} is less than cutoff at {}, therefore the strike is taken as {}", $r4);

        d169 = d2;

     label01:
        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d5 = 1.0 - d4;

        d6 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d7 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        d8 = 1.0 - d6;

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label04;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 0.0);

        $z4 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d0, d169, 1.0E-7);

        if $z4 == 0 goto label02;

        $d159 = 3.0 * d6;

        $d160 = $d159 * d6;

        $d161 = 2.0 - $d160;

        $d162 = $d161 * d7;

        $d163 = $d162 * d7;

        $d164 = $d163 / 24.0;

        $d165 = $d164 * d3;

        $d166 = 1.0 + $d165;

        $d167 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d5);

        $d168 = $d166 / $d167;

        r3[3] = $d168;

        goto label03;

     label02:
        r3[3] = 1.0E7;

     label03:
        return r3;

     label04:
        $d24 = d0 * d169;

        $d23 = d5 / 2.0;

        d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d24, $d23);

        $d25 = d0 / d169;

        d10 = staticinvoke <java.lang.Math: double log(double)>($d25);

        $d26 = d7 / d1;

        $d27 = $d26 * d9;

        d11 = $d27 * d10;

        d170 = 0.0;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d11, 0.0, 1.0E-6);

        if $z0 == 0 goto label05;

        $d157 = 0.5 * d11;

        $d158 = $d157 * d6;

        d171 = 1.0 - $d158;

        goto label13;

     label05:
        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d8, 0.0, 1.0E-5);

        if $z1 == 0 goto label08;

        $b10 = d11 cmpl 1.0;

        if $b10 < 0 goto label07;

        $b11 = d8 cmpl 0.0;

        if $b11 != 0 goto label06;

        d171 = 0.0;

        d170 = #Infinity;

        goto label13;

     label06:
        $d153 = d11 - 1.0;

        $d154 = 2.0 * $d153;

        $d155 = staticinvoke <java.lang.Math: double log(double)>($d154);

        $d156 = staticinvoke <java.lang.Math: double log(double)>(d8);

        d170 = $d155 - $d156;

        d171 = d11 / d170;

        goto label13;

     label07:
        $d145 = 1.0 - d11;

        $d146 = staticinvoke <java.lang.Math: double log(double)>($d145);

        $d149 = neg $d146;

        $d147 = d11 - 1.0;

        $d148 = d11 / $d147;

        $d150 = staticinvoke <java.lang.Math: double pow(double,double)>($d148, 2.0);

        $d151 = 0.5 * $d150;

        $d152 = $d151 * d8;

        d170 = $d149 - $d152;

        d171 = d11 / d170;

        goto label13;

     label08:
        $b2 = d11 cmpg -1000000.0;

        if $b2 >= 0 goto label09;

        $d142 = d6 * d6;

        $d143 = $d142 - 1.0;

        $d144 = $d143 / 2.0;

        d172 = $d144 / d11;

        goto label11;

     label09:
        $b3 = d11 cmpl 1.0E8;

        if $b3 <= 0 goto label10;

        $d141 = d11 - d6;

        d172 = 2.0 * $d141;

        goto label11;

     label10:
        $d28 = 2.0 * d6;

        $d29 = $d28 * d11;

        $d31 = 1.0 - $d29;

        $d30 = d11 * d11;

        $d32 = $d31 + $d30;

        $d33 = staticinvoke <java.lang.Math: double sqrt(double)>($d32);

        $d34 = $d33 + d11;

        d172 = $d34 - d6;

     label11:
        $b12 = d172 cmpg 0.0;

        if $b12 > 0 goto label12;

        d171 = 0.0;

        goto label13;

     label12:
        $d35 = 1.0 - d6;

        $d36 = d172 / $d35;

        d170 = staticinvoke <java.lang.Math: double log(double)>($d36);

        d171 = d11 / d170;

     label13:
        $d173 = d5 * d5;

        $d174 = $d173 / 24.0;

        $d175 = d10 * d10;

        $d176 = $d174 * $d175;

        $d177 = 1.0 + $d176;

        $d178 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 4.0);

        $d179 = $d178 / 1920.0;

        $d180 = staticinvoke <java.lang.Math: double pow(double,double)>(d10, 4.0);

        $d181 = $d179 * $d180;

        $d182 = $d177 + $d181;

        d183 = d9 * $d182;

        $d184 = d5 * d1;

        $d185 = $d184 / d9;

        $d186 = staticinvoke <java.lang.Math: double pow(double,double)>($d185, 2.0);

        $d187 = $d186 / 24.0;

        $d188 = d6 * d4;

        $d189 = $d188 * d7;

        $d190 = $d189 * d1;

        $d191 = 4.0 * d9;

        $d192 = $d190 / $d191;

        $d193 = $d187 + $d192;

        $d194 = 3.0 * d6;

        $d195 = $d194 * d6;

        $d196 = 2.0 - $d195;

        $d197 = $d196 * d7;

        $d198 = $d197 * d7;

        $d199 = $d198 / 24.0;

        $d200 = $d193 + $d199;

        $d201 = $d200 * d3;

        d12 = 1.0 + $d201;

        $d202 = d1 / d183;

        $d203 = $d202 * d171;

        $d204 = $d203 * d12;

        r3[0] = $d204;

        $d205 = d1 / d183;

        $d206 = $d205 * d171;

        d14 = $d206 * 1.0;

        $d207 = neg d1;

        $d208 = d183 * d183;

        $d209 = $d207 / $d208;

        $d210 = $d209 * d171;

        $d211 = $d210 * d12;

        d15 = $d211 * 1.0;

        $d212 = d1 / d183;

        $d213 = $d212 * d12;

        d16 = $d213 * 1.0;

        d214 = 0.0;

        $z5 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d11, 0.0, 1.0E-6);

        if $z5 == 0 goto label14;

        $d139 = neg d6;

        $d140 = $d139 / 2.0;

        d215 = $d140 * d16;

        goto label20;

     label14:
        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d8, 0.0, 1.0E-5);

        if $z2 == 0 goto label17;

        $b8 = d11 cmpl 1.0;

        if $b8 < 0 goto label16;

        $b9 = d11 cmpl 1.0;

        if $b9 != 0 goto label15;

        d215 = 0.0;

        goto label20;

     label15:
        $d132 = d11 - 1.0;

        d216 = 1.0 / $d132;

        $d133 = neg d16;

        $d135 = $d133 * d11;

        $d134 = d170 * d170;

        d214 = $d135 / $d134;

        $d136 = r3[0];

        $d138 = $d136 / d11;

        $d137 = d216 * d214;

        d215 = $d138 + $d137;

        goto label20;

     label16:
        $d119 = 1.0 - d11;

        $d120 = staticinvoke <java.lang.Math: double log(double)>($d119);

        $d122 = -1.0 / $d120;

        $d121 = 1.0 - d11;

        $d123 = staticinvoke <java.lang.Math: double log(double)>($d121);

        $d125 = d11 / $d123;

        $d124 = 1.0 - d11;

        $d126 = $d125 / $d124;

        $d127 = 1.0 + $d126;

        $d128 = $d122 * $d127;

        d215 = $d128 * d16;

        $d130 = neg d11;

        $d129 = d170 * d170;

        $d131 = $d130 / $d129;

        d214 = $d131 * d16;

        goto label20;

     label17:
        $b4 = d11 cmpg -1000000.0;

        if $b4 >= 0 goto label18;

        $d114 = 1.0 / d170;

        $d118 = $d114 * d16;

        $d115 = d170 * d170;

        $d116 = 0.0 / $d115;

        $d117 = $d116 * d16;

        d215 = $d118 + $d117;

        goto label20;

     label18:
        $b5 = d11 cmpl 1.0E8;

        if $b5 <= 0 goto label19;

        $d109 = 1.0 / d170;

        $d113 = $d109 * d16;

        $d110 = d170 * d170;

        $d111 = 0.0 / $d110;

        $d112 = $d111 * d16;

        d215 = $d113 - $d112;

        goto label20;

     label19:
        $d38 = neg d11;

        $d37 = d170 * d170;

        $d39 = $d38 / $d37;

        d214 = $d39 * d16;

        $d40 = 1.0 / d170;

        $d46 = $d40 * d16;

        $d41 = 2.0 * d6;

        $d42 = $d41 * d11;

        $d44 = 1.0 - $d42;

        $d43 = d11 * d11;

        $d45 = $d44 + $d43;

        $d47 = staticinvoke <java.lang.Math: double sqrt(double)>($d45);

        $d48 = $d47 + d11;

        $d49 = $d48 - d6;

        $d55 = 1.0 / $d49;

        $d50 = 2.0 * d6;

        $d51 = $d50 * d11;

        $d53 = 1.0 - $d51;

        $d52 = d11 * d11;

        $d54 = $d53 + $d52;

        $d56 = staticinvoke <java.lang.Math: double pow(double,double)>($d54, -0.5);

        $d60 = 0.5 * $d56;

        $d58 = -2.0 * d6;

        $d57 = 2.0 * d11;

        $d59 = $d58 + $d57;

        $d61 = $d60 * $d59;

        $d62 = $d61 + 1.0;

        $d63 = $d55 * $d62;

        $d64 = $d63 * d214;

        d215 = $d46 + $d64;

     label20:
        $d217 = d5 * d5;

        $d218 = $d217 / 12.0;

        $d219 = $d218 * d10;

        $d220 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 4.0);

        $d221 = $d220 / 1920.0;

        $d222 = $d221 * 4.0;

        $d223 = staticinvoke <java.lang.Math: double pow(double,double)>(d10, 3.0);

        $d224 = $d222 * $d223;

        $d225 = $d219 + $d224;

        $d226 = d9 * $d225;

        $d227 = $d226 * d15;

        $d228 = d7 / d1;

        $d229 = $d228 * d9;

        $d230 = $d229 * d215;

        d231 = $d227 + $d230;

        $d232 = d7 / d1;

        $d233 = $d232 * d10;

        $d234 = $d233 * d215;

        $d235 = d183 / d9;

        $d236 = $d235 * d15;

        $d237 = $d234 + $d236;

        $d238 = d5 * d1;

        $d239 = staticinvoke <java.lang.Math: double pow(double,double)>($d238, 2.0);

        $d240 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, 3.0);

        $d241 = $d239 / $d240;

        $d242 = $d241 / 12.0;

        $d243 = d6 * d4;

        $d244 = $d243 * d7;

        $d245 = $d244 * d1;

        $d246 = $d245 / 4.0;

        $d247 = d9 * d9;

        $d248 = $d246 / $d247;

        $d249 = $d242 + $d248;

        $d250 = $d249 * d3;

        $d251 = $d250 * d14;

        d17 = $d237 - $d251;

        $d252 = -1.0 / d169;

        $d253 = $d252 * d231;

        $d254 = d5 * d9;

        $d255 = 2.0 * d169;

        $d256 = $d254 / $d255;

        $d257 = $d256 * d17;

        d18 = $d253 + $d257;

        $d258 = 1.0 / d0;

        $d259 = $d258 * d231;

        $d260 = d5 * d9;

        $d261 = 2.0 * d0;

        $d262 = $d260 / $d261;

        $d263 = $d262 * d17;

        d19 = $d259 + $d263;

        $d264 = 1.0 / d1;

        $d265 = $d264 * d9;

        $d266 = $d265 * d10;

        $d267 = $d266 * d215;

        $d268 = d6 * d4;

        $d269 = $d268 * d1;

        $d270 = 4.0 * d9;

        $d271 = $d269 / $d270;

        $d272 = 3.0 * d6;

        $d273 = $d272 * d6;

        $d274 = 2.0 - $d273;

        $d275 = $d274 * d7;

        $d276 = $d275 / 12.0;

        $d277 = $d271 + $d276;

        $d278 = $d277 * d3;

        $d279 = $d278 * d14;

        d20 = $d267 + $d279;

        $d280 = d0 - d169;

        $d281 = staticinvoke <java.lang.Math: double abs(double)>($d280);

        $b13 = $d281 cmpg 1.0E-7;

        if $b13 >= 0 goto label21;

        $d107 = neg d11;

        $d108 = $d107 / 2.0;

        d282 = $d108 * d16;

        goto label25;

     label21:
        $z3 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d8, 0.0, 1.0E-5);

        if $z3 == 0 goto label24;

        $b6 = d11 cmpl 1.0;

        if $b6 < 0 goto label23;

        $b7 = d8 cmpl 0.0;

        if $b7 != 0 goto label22;

        d282 = #-Infinity;

        goto label25;

     label22:
        $d105 = 1.0 / d8;

        $d101 = 0.5 - d11;

        $d100 = d11 - 1.0;

        $d103 = $d101 / $d100;

        $d102 = d11 - 1.0;

        $d104 = $d103 / $d102;

        $d106 = $d105 + $d104;

        d282 = d214 * $d106;

        goto label25;

     label23:
        $d86 = 1.0 - d11;

        $d87 = d11 / $d86;

        $d88 = staticinvoke <java.lang.Math: double pow(double,double)>($d87, 2.0);

        $d92 = 0.5 * $d88;

        $d89 = d11 - 4.0;

        $d93 = 0.25 * $d89;

        $d90 = 1.0 - d11;

        $d91 = d11 / $d90;

        $d94 = staticinvoke <java.lang.Math: double pow(double,double)>($d91, 3.0);

        $d96 = $d93 * $d94;

        $d95 = 1.0 - d11;

        $d97 = $d96 / $d95;

        $d98 = $d97 * d8;

        $d99 = $d92 + $d98;

        d282 = $d99 * d214;

        goto label25;

     label24:
        $d65 = 2.0 * d6;

        $d66 = $d65 * d11;

        $d68 = 1.0 - $d66;

        $d67 = d11 * d11;

        $d69 = $d68 + $d67;

        $d70 = staticinvoke <java.lang.Math: double sqrt(double)>($d69);

        $d71 = $d70 + d11;

        $d72 = $d71 - d6;

        $d78 = 1.0 / $d72;

        $d73 = 2.0 * d6;

        $d74 = $d73 * d11;

        $d76 = 1.0 - $d74;

        $d75 = d11 * d11;

        $d77 = $d76 + $d75;

        $d79 = staticinvoke <java.lang.Math: double pow(double,double)>($d77, -0.5);

        $d80 = neg $d79;

        $d81 = $d80 * d11;

        $d82 = $d81 - 1.0;

        $d84 = $d78 * $d82;

        $d83 = 1.0 / d8;

        $d85 = $d84 + $d83;

        d282 = $d85 * d214;

     label25:
        $d283 = d4 * d7;

        $d284 = $d283 * d1;

        $d285 = 4.0 * d9;

        $d286 = $d284 / $d285;

        $d287 = d6 * d7;

        $d288 = $d287 * d7;

        $d289 = $d288 / 4.0;

        $d290 = $d286 - $d289;

        $d291 = $d290 * d3;

        $d292 = $d291 * d14;

        d293 = d282 + $d292;

        $d294 = neg d7;

        $d295 = d1 * d1;

        $d296 = $d294 / $d295;

        $d297 = $d296 * d9;

        $d298 = $d297 * d10;

        $d299 = $d298 * d215;

        $d300 = d5 * d1;

        $d301 = $d300 / d9;

        $d302 = d5 / d9;

        $d303 = $d301 * $d302;

        $d304 = $d303 / 12.0;

        $d305 = d6 * d4;

        $d306 = $d305 * d7;

        $d307 = 4.0 * d9;

        $d308 = $d306 / $d307;

        $d309 = $d304 + $d308;

        $d310 = $d309 * d3;

        $d311 = $d310 * d14;

        $d312 = $d299 + $d311;

        $d313 = 1.0 / d183;

        $d314 = $d313 * d171;

        $d315 = $d314 * d12;

        $d316 = $d315 * 1.0;

        d21 = $d312 + $d316;

        $d317 = d0 * d169;

        $d318 = staticinvoke <java.lang.Math: double log(double)>($d317);

        $d319 = -0.5 * $d318;

        $d320 = $d319 * d9;

        $d321 = $d320 * d17;

        $d322 = d5 / 12.0;

        $d323 = d10 * d10;

        $d324 = $d322 * $d323;

        $d325 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 3.0);

        $d326 = $d325 / 480.0;

        $d327 = staticinvoke <java.lang.Math: double pow(double,double)>(d10, 4.0);

        $d328 = $d326 * $d327;

        $d329 = $d324 + $d328;

        $d330 = d9 * $d329;

        $d331 = $d330 * d15;

        $d332 = $d321 - $d331;

        $d333 = neg d5;

        $d334 = $d333 * d1;

        $d335 = $d334 * d1;

        $d336 = $d335 / d9;

        $d337 = $d336 / d9;

        $d338 = $d337 / 12.0;

        $d339 = d6 * d7;

        $d340 = $d339 * d1;

        $d341 = $d340 / 4.0;

        $d342 = $d341 / d9;

        $d343 = $d338 + $d342;

        $d344 = $d343 * d3;

        $d345 = $d344 * d14;

        d22 = $d332 + $d345;

        r3[1] = d19;

        r3[2] = d18;

        r3[3] = d21;

        r3[4] = d22;

        r3[5] = d293;

        r3[6] = d20;

        return r3;
    }

    public double getVolatilityAdjoint2(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData, double[], double[][])
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d21, d22, d23, d24, d25, d26, d31, d32, d33, d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, $d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345, $d346, $d347, $d348, $d349, $d350, $d351, $d352, $d353, $d354, $d355, $d356, $d357, $d358, $d359, $d360, $d361, $d362, $d363, $d364, $d365, $d366, $d367, $d368, $d369, $d370, $d371, $d372, $d373, $d374, $d375, $d376, $d377, $d378, $d379, $d380, $d381, $d382, $d383, $d384, $d385, $d386, $d387, $d388, $d389, $d390, $d391, $d392, $d393, $d394, $d395, $d396, $d397, $d398, $d399, $d400, $d401, $d402, $d403, $d404, $d405, $d406, $d407, $d408, $d409, $d410, $d411, $d412, $d413, $d414, $d415, $d416, $d417, $d418, $d419, $d420, $d421, $d422, $d423, $d424, $d425, $d426, $d427, $d428, $d429, $d430, $d431, $d432, $d433, $d434, $d435, $d436, $d437, $d438, $d439, $d440, $d441, $d442, $d443, $d444, $d445, $d446, $d447, $d448, $d449, $d450, $d451, $d452, $d453, $d454, $d455, $d456, $d457, $d458, $d459, $d460, $d461, $d462, $d463, $d464, $d465, $d466, $d467, $d468, $d469, $d470, $d471, d473, d474, d475, d476, $d477, $d478, $d479, $d480, $d481, $d482, d484, $d486, d488, $d489, $d490, $d491, $d492, $d493, $d494, $d495, $d496, $d497, $d498, $d499, $d500, $d501, $d502, $d503, $d504, $d505, $d506, $d507, $d508, $d509, $d510, $d511, $d512, $d513, $d514, $d515, $d516, $d517, $d518, $d519, $d520, $d521, $d522, $d523, $d524, $d525, $d526, $d527, $d528, $d529, $d530, $d531, $d532, $d533, $d534, $d535, $d536, $d537, $d538, $d539, $d540, $d541, $d542, $d543, $d544, $d545, $d546, $d547, $d548, $d549, $d550, $d551;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r2;
        double[] r3, r6, r7, r8, r9, r10, r11, r12, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62;
        double[][] r4, r5, r13, r14, r15, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b13;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, i15;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        r3 := @parameter3: double[];

        r4 := @parameter4: double[][];

        $d36 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>($d36, 1.0E-6);

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d6 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        $d37 = 1.0 - d4;

        d7 = $d37 / 2.0;

        d8 = d0 * d1;

        d9 = staticinvoke <java.lang.Math: double pow(double,double)>(d8, d7);

        d10 = d9 * d9;

        $d38 = d0 / d1;

        d11 = staticinvoke <java.lang.Math: double log(double)>($d38);

        d12 = d11 * d11;

        d13 = d12 * d11;

        d14 = d13 * d11;

        $d39 = d7 * d7;

        $d44 = $d39 / 6.0;

        $d40 = d7 * d7;

        $d41 = $d40 / 20.0;

        $d42 = $d41 * d14;

        $d43 = d12 + $d42;

        $d45 = $d44 * $d43;

        $d46 = 1.0 + $d45;

        d15 = d9 * $d46;

        $d47 = d6 / d3;

        $d48 = $d47 * d9;

        d16 = $d48 * d11;

        $d49 = d7 * d7;

        $d50 = $d49 / 6.0;

        $d51 = $d50 * d3;

        $d52 = $d51 * d3;

        $d58 = $d52 / d10;

        $d53 = d5 * d4;

        $d54 = $d53 * d6;

        $d55 = $d54 * d3;

        $d56 = $d55 / 4.0;

        $d57 = $d56 / d9;

        $d65 = $d58 + $d57;

        $d59 = 3.0 * d5;

        $d60 = $d59 * d5;

        $d61 = 2.0 - $d60;

        $d62 = $d61 / 24.0;

        $d63 = $d62 * d6;

        $d64 = $d63 * d6;

        d17 = $d65 + $d64;

        $d66 = 2.0 * d5;

        $d67 = $d66 * d16;

        $d69 = 1.0 - $d67;

        $d68 = d16 * d16;

        $d70 = $d69 + $d68;

        d18 = staticinvoke <java.lang.Math: double sqrt(double)>($d70);

        d473 = 0.0;

        d474 = 0.0;

        d475 = 0.0;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d16, 0.0, 1.0E-6);

        if $z0 == 0 goto label01;

        $d470 = 0.5 * d16;

        $d471 = $d470 * d5;

        d476 = 1.0 - $d471;

        goto label06;

     label01:
        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d5, 1.0, 1.0E-5);

        if $z1 == 0 goto label04;

        $b13 = d16 cmpg 1.0;

        if $b13 >= 0 goto label02;

        $d461 = 1.0 - d16;

        $d462 = staticinvoke <java.lang.Math: double log(double)>($d461);

        $d465 = neg $d462;

        $d463 = d16 - 1.0;

        $d464 = d16 / $d463;

        $d466 = staticinvoke <java.lang.Math: double pow(double,double)>($d464, 2.0);

        $d468 = 0.5 * $d466;

        $d467 = 1.0 - d5;

        $d469 = $d468 * $d467;

        $d477 = $d465 - $d469;

        goto label03;

     label02:
        $d456 = 2.0 * d16;

        $d457 = $d456 - 2.0;

        $d458 = staticinvoke <java.lang.Math: double log(double)>($d457);

        $d459 = 1.0 - d5;

        $d460 = staticinvoke <java.lang.Math: double log(double)>($d459);

        $d477 = $d458 - $d460;

     label03:
        d473 = $d477;

        goto label05;

     label04:
        $d71 = d18 + d16;

        $d73 = $d71 - d5;

        $d72 = 1.0 - d5;

        $d74 = $d73 / $d72;

        d473 = staticinvoke <java.lang.Math: double log(double)>($d74);

     label05:
        d474 = 1.0 / d18;

        $d75 = d5 - d16;

        $d76 = staticinvoke <java.lang.Math: double pow(double,double)>(d18, 3.0);

        d475 = $d75 / $d76;

        d476 = d16 / d473;

     label06:
        $d478 = d3 / d15;

        $d479 = $d478 * d476;

        $d480 = d17 * d2;

        $d481 = 1.0 + $d480;

        d19 = $d479 * $d481;

        $d482 = neg d19;

        d21 = $d482 / d15;

        $z6 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d16, 0.0, 1.0E-6);

        if $z6 == 0 goto label07;

        $d453 = d3 / d15;

        $d451 = d17 * d2;

        $d452 = 1.0 + $d451;

        $d454 = $d453 * $d452;

        $d455 = $d454 * -0.5;

        d484 = $d455 * d5;

        goto label08;

     label07:
        $d79 = d3 / d15;

        $d77 = d17 * d2;

        $d78 = 1.0 + $d77;

        $d85 = $d79 * $d78;

        $d83 = 1.0 / d473;

        $d81 = d16 * d474;

        $d80 = d473 * d473;

        $d82 = $d81 / $d80;

        $d84 = $d83 - $d82;

        d484 = $d85 * $d84;

     label08:
        $d86 = d3 / d15;

        $d87 = $d86 * d476;

        d22 = $d87 * d2;

        $d90 = d476 / d15;

        $d88 = d17 * d2;

        $d89 = 1.0 + $d88;

        d23 = $d90 * $d89;

        $d91 = neg d3;

        $d92 = $d91 / d15;

        $d94 = $d92 * d16;

        $d93 = d473 * d473;

        $d97 = $d94 / $d93;

        $d95 = d17 * d2;

        $d96 = 1.0 + $d95;

        d24 = $d97 * $d96;

        r5 = newmultiarray (double)[3][3];

        $r17 = r5[0];

        $d98 = neg d21;

        $d101 = $d98 / d15;

        $d99 = d15 * d15;

        $d100 = d19 / $d99;

        $d102 = $d101 + $d100;

        $r17[0] = $d102;

        $r18 = r5[0];

        $d103 = neg d484;

        $d104 = $d103 / d15;

        $r18[1] = $d104;

        $r19 = r5[0];

        $d105 = neg d22;

        $d106 = $d105 / d15;

        $r19[2] = $d106;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d16, 0.0, 1.0E-6);

        if $z2 == 0 goto label09;

        $r45 = r5[1];

        $d447 = d3 / d15;

        $d448 = $d447 * -0.5;

        $d449 = $d448 * d5;

        $d450 = $d449 * d2;

        $r45[2] = $d450;

        goto label10;

     label09:
        $r20 = r5[1];

        $d109 = d3 / d15;

        $d107 = d17 * d2;

        $d108 = 1.0 + $d107;

        $d124 = $d109 * $d108;

        $d111 = -2.0 * d474;

        $d110 = d473 * d473;

        $d115 = $d111 / $d110;

        $d113 = d16 * d475;

        $d112 = d473 * d473;

        $d114 = $d113 / $d112;

        $d122 = $d115 - $d114;

        $d116 = 2.0 * d16;

        $d117 = $d116 * d474;

        $d120 = $d117 * d474;

        $d118 = d473 * d473;

        $d119 = $d118 * d473;

        $d121 = $d120 / $d119;

        $d123 = $d122 + $d121;

        $d125 = $d124 * $d123;

        $r20[1] = $d125;

        $r21 = r5[1];

        $d126 = d3 / d15;

        $d132 = $d126 * d2;

        $d130 = 1.0 / d473;

        $d128 = d16 * d474;

        $d127 = d473 * d473;

        $d129 = $d128 / $d127;

        $d131 = $d130 - $d129;

        $d133 = $d132 * $d131;

        $r21[2] = $d133;

     label10:
        $r22 = r5[2];

        $r22[2] = 0.0;

        r6 = newarray (double)[3];

        r7 = newarray (double)[3];

        r8 = newarray (double)[3];

        $d137 = d12 / 3.0;

        $d134 = d7 * d7;

        $d135 = $d134 / 40.0;

        $d136 = $d135 * d14;

        $d138 = $d137 + $d136;

        $d139 = d7 * $d138;

        $d140 = d9 * $d139;

        $d141 = staticinvoke <java.lang.Math: double log(double)>(d8);

        $d142 = $d141 * d15;

        $d143 = $d140 + $d142;

        r6[0] = $d143;

        $d144 = d7 * d15;

        $d145 = $d144 / d8;

        r6[1] = $d145;

        $d146 = d7 * d7;

        $d152 = $d146 / 6.0;

        $d150 = 2.0 * d11;

        $d147 = d7 * d7;

        $d148 = $d147 / 5.0;

        $d149 = $d148 * d13;

        $d151 = $d150 + $d149;

        $d153 = $d152 * $d151;

        $d154 = d9 * $d153;

        r6[2] = $d154;

        $d155 = staticinvoke <java.lang.Math: double log(double)>(d8);

        $d156 = $d155 * d16;

        r7[0] = $d156;

        $d157 = d7 * d16;

        $d158 = $d157 / d8;

        r7[1] = $d158;

        $d159 = d6 / d3;

        $d160 = $d159 * d9;

        r7[2] = $d160;

        $d161 = d7 / 3.0;

        $d162 = $d161 * d3;

        $d163 = $d162 * d3;

        $d169 = $d163 / d10;

        $d164 = 2.0 * d7;

        $d165 = $d164 * d7;

        $d166 = $d165 / 6.0;

        $d167 = $d166 * d3;

        $d168 = $d167 * d3;

        $d170 = $d168 / d10;

        $d171 = staticinvoke <java.lang.Math: double log(double)>(d8);

        $d172 = $d170 * $d171;

        $d177 = $d169 - $d172;

        $d173 = d5 * d4;

        $d174 = $d173 * d6;

        $d175 = $d174 * d3;

        $d176 = $d175 / 4.0;

        $d178 = $d176 / d9;

        $d179 = staticinvoke <java.lang.Math: double log(double)>(d8);

        $d180 = $d178 * $d179;

        $d181 = $d177 - $d180;

        r8[0] = $d181;

        $d182 = -2.0 * d7;

        $d183 = $d182 * d7;

        $d184 = $d183 / 6.0;

        $d185 = $d184 * d3;

        $d186 = $d185 * d3;

        $d187 = $d186 / d10;

        $d188 = $d187 * d7;

        $d196 = $d188 / d8;

        $d189 = d5 * d4;

        $d190 = $d189 * d6;

        $d191 = $d190 * d3;

        $d192 = $d191 / 4.0;

        $d193 = $d192 / d9;

        $d194 = $d193 * d7;

        $d195 = $d194 / d8;

        $d197 = $d196 - $d195;

        r8[1] = $d197;

        r8[2] = 0.0;

        r9 = newarray (double)[4];

        r10 = newarray (double)[4];

        r11 = newarray (double)[4];

        r12 = newarray (double)[4];

        r9[0] = 0.0;

        $d198 = r6[0];

        $d199 = $d198 * -0.5;

        r9[1] = $d199;

        r9[2] = 0.0;

        r9[3] = 0.0;

        $d200 = neg d16;

        $d201 = $d200 / d3;

        r10[0] = $d201;

        $d202 = r7[0];

        $d203 = $d202 * -0.5;

        r10[1] = $d203;

        r10[2] = 0.0;

        $d204 = d9 * d11;

        $d205 = $d204 / d3;

        r10[3] = $d205;

        $d206 = d7 * d7;

        $d207 = $d206 / 3.0;

        $d208 = $d207 * d3;

        $d213 = $d208 / d10;

        $d209 = d5 * d4;

        $d210 = $d209 * d6;

        $d211 = $d210 / 4.0;

        $d212 = $d211 / d9;

        $d214 = $d213 + $d212;

        r11[0] = $d214;

        $d215 = d5 * d6;

        $d216 = $d215 * d3;

        $d217 = $d216 / 4.0;

        $d220 = $d217 / d9;

        $d218 = r8[0];

        $d219 = $d218 * -0.5;

        $d221 = $d220 + $d219;

        r11[1] = $d221;

        $d222 = d4 * d6;

        $d223 = $d222 * d3;

        $d224 = $d223 / 4.0;

        $d228 = $d224 / d9;

        $d225 = d5 / 4.0;

        $d226 = $d225 * d6;

        $d227 = $d226 * d6;

        $d229 = $d228 - $d227;

        r11[2] = $d229;

        $d230 = d5 * d4;

        $d231 = $d230 * d3;

        $d232 = $d231 / 4.0;

        $d238 = $d232 / d9;

        $d233 = 3.0 * d5;

        $d234 = $d233 * d5;

        $d235 = 2.0 - $d234;

        $d236 = $d235 / 12.0;

        $d237 = $d236 * d6;

        $d239 = $d238 + $d237;

        r11[3] = $d239;

        r12[0] = 1.0;

        r12[1] = 0.0;

        r12[2] = 0.0;

        r12[3] = 0.0;

        $d240 = r6[1];

        $d243 = d21 * $d240;

        $d241 = r7[1];

        $d242 = d484 * $d241;

        $d246 = $d243 + $d242;

        $d244 = r8[1];

        $d245 = d22 * $d244;

        d25 = $d246 + $d245;

        $d247 = r6[2];

        $d250 = d21 * $d247;

        $d248 = r7[2];

        $d249 = d484 * $d248;

        $d253 = $d250 + $d249;

        $d251 = r8[2];

        $d252 = d22 * $d251;

        d26 = $d253 + $d252;

        r13 = newmultiarray (double)[2][2];

        r14 = newmultiarray (double)[2][2];

        r15 = newmultiarray (double)[2][2];

        $r23 = r13[0];

        $d254 = d7 - 1.0;

        $d255 = d7 * $d254;

        $d257 = $d255 * d15;

        $d256 = d8 * d8;

        $d258 = $d257 / $d256;

        $r23[0] = $d258;

        $r24 = r13[0];

        $d259 = d7 * d9;

        $d260 = $d259 / d8;

        $d261 = $d260 * d7;

        $d262 = $d261 * d7;

        $d269 = $d262 / 6.0;

        $d267 = 2.0 * d11;

        $d263 = 4.0 * d7;

        $d264 = $d263 * d7;

        $d265 = $d264 / 20.0;

        $d266 = $d265 * d13;

        $d268 = $d267 + $d266;

        $d270 = $d269 * $d268;

        $r24[1] = $d270;

        $r25 = r13[1];

        $d271 = d7 * d7;

        $d277 = $d271 / 6.0;

        $d272 = 12.0 * d7;

        $d273 = $d272 * d7;

        $d274 = $d273 / 20.0;

        $d275 = $d274 * d11;

        $d276 = 2.0 + $d275;

        $d278 = $d277 * $d276;

        $d279 = d9 * $d278;

        $r25[1] = $d279;

        $r26 = r14[0];

        $d280 = d7 - 1.0;

        $d281 = d7 * $d280;

        $d283 = $d281 * d16;

        $d282 = d8 * d8;

        $d284 = $d283 / $d282;

        $r26[0] = $d284;

        $r27 = r14[0];

        $d285 = d6 / d3;

        $d286 = $d285 * d7;

        $d287 = $d286 * d9;

        $d288 = $d287 / d8;

        $r27[1] = $d288;

        $r28 = r14[1];

        $r28[1] = 0.0;

        $r29 = r15[0];

        $d291 = 2.0 * d7;

        $d289 = 2.0 * d7;

        $d290 = $d289 + 1.0;

        $d292 = $d291 * $d290;

        $d293 = $d292 * d7;

        $d294 = $d293 * d7;

        $d295 = $d294 / 6.0;

        $d296 = $d295 * d3;

        $d299 = $d296 * d3;

        $d297 = d10 * d8;

        $d298 = $d297 * d8;

        $d310 = $d299 / $d298;

        $d300 = d7 + 1.0;

        $d301 = d7 * $d300;

        $d302 = $d301 * d5;

        $d303 = $d302 * d4;

        $d304 = $d303 * d6;

        $d305 = $d304 * d3;

        $d308 = $d305 / 4.0;

        $d306 = d9 * d8;

        $d307 = $d306 * d8;

        $d309 = $d308 / $d307;

        $d311 = $d310 + $d309;

        $r29[0] = $d311;

        $r30 = r15[0];

        $r30[1] = 0.0;

        $r31 = r15[1];

        $r31[1] = 0.0;

        r16 = newmultiarray (double)[2][2];

        i14 = 0;

     label11:
        if i14 >= 2 goto label14;

        i15 = i14;

     label12:
        if i15 >= 2 goto label13;

        $r44 = r16[i14];

        $r32 = r5[0];

        $d398 = $r32[0];

        $i1 = i15 + 1;

        $d397 = r6[$i1];

        $d402 = $d398 * $d397;

        $r33 = r5[0];

        $d400 = $r33[1];

        $i2 = i15 + 1;

        $d399 = r7[$i2];

        $d401 = $d400 * $d399;

        $d406 = $d402 + $d401;

        $r34 = r5[0];

        $d404 = $r34[2];

        $i3 = i15 + 1;

        $d403 = r8[$i3];

        $d405 = $d404 * $d403;

        $d408 = $d406 + $d405;

        $i4 = i14 + 1;

        $d407 = r6[$i4];

        $d411 = $d408 * $d407;

        $r35 = r13[i14];

        $d409 = $r35[i15];

        $d410 = d21 * $d409;

        $d425 = $d411 + $d410;

        $r36 = r5[0];

        $d413 = $r36[1];

        $i5 = i15 + 1;

        $d412 = r6[$i5];

        $d417 = $d413 * $d412;

        $r37 = r5[1];

        $d415 = $r37[1];

        $i6 = i15 + 1;

        $d414 = r7[$i6];

        $d416 = $d415 * $d414;

        $d421 = $d417 + $d416;

        $r38 = r5[1];

        $d419 = $r38[2];

        $i7 = i15 + 1;

        $d418 = r8[$i7];

        $d420 = $d419 * $d418;

        $d423 = $d421 + $d420;

        $i8 = i14 + 1;

        $d422 = r7[$i8];

        $d424 = $d423 * $d422;

        $d428 = $d425 + $d424;

        $r39 = r14[i14];

        $d426 = $r39[i15];

        $d427 = d484 * $d426;

        $d442 = $d428 + $d427;

        $r40 = r5[0];

        $d430 = $r40[2];

        $i9 = i15 + 1;

        $d429 = r6[$i9];

        $d434 = $d430 * $d429;

        $r41 = r5[1];

        $d432 = $r41[2];

        $i10 = i15 + 1;

        $d431 = r7[$i10];

        $d433 = $d432 * $d431;

        $d438 = $d434 + $d433;

        $r42 = r5[2];

        $d436 = $r42[2];

        $i11 = i15 + 1;

        $d435 = r8[$i11];

        $d437 = $d436 * $d435;

        $d440 = $d438 + $d437;

        $i12 = i14 + 1;

        $d439 = r8[$i12];

        $d441 = $d440 * $d439;

        $d445 = $d442 + $d441;

        $r43 = r15[i14];

        $d443 = $r43[i15];

        $d444 = d22 * $d443;

        $d446 = $d445 + $d444;

        $r44[i15] = $d446;

        i15 = i15 + 1;

        goto label12;

     label13:
        i14 = i14 + 1;

        goto label11;

     label14:
        d31 = 1.0 / d0;

        d32 = -1.0 / d1;

        $d312 = d0 * d0;

        d33 = -1.0 / $d312;

        $d313 = d1 * d1;

        d35 = 1.0 / $d313;

        $d315 = d25 * d1;

        $d314 = d26 * d31;

        $d316 = $d315 + $d314;

        r3[0] = $d316;

        $d318 = d25 * d0;

        $d317 = d26 * d32;

        $d319 = $d318 + $d317;

        r3[1] = $d319;

        $d320 = r9[0];

        $d323 = d21 * $d320;

        $d321 = r10[0];

        $d322 = d484 * $d321;

        $d326 = $d323 + $d322;

        $d324 = r11[0];

        $d325 = d22 * $d324;

        $d329 = $d326 + $d325;

        $d327 = r12[0];

        $d328 = d23 * $d327;

        $d330 = $d329 + $d328;

        r3[2] = $d330;

        $d331 = r9[1];

        $d334 = d21 * $d331;

        $d332 = r10[1];

        $d333 = d484 * $d332;

        $d337 = $d334 + $d333;

        $d335 = r11[1];

        $d336 = d22 * $d335;

        $d340 = $d337 + $d336;

        $d338 = r12[1];

        $d339 = d23 * $d338;

        $d341 = $d340 + $d339;

        r3[3] = $d341;

        $z3 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d16, 0.0, 1.0E-6);

        if $z3 == 0 goto label15;

        $d395 = -0.5 * d16;

        $d393 = r11[2];

        $d394 = d22 * $d393;

        $d396 = $d395 + $d394;

        r3[4] = $d396;

        goto label20;

     label15:
        $z4 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d5, 1.0, 1.0E-5);

        if $z4 == 0 goto label19;

        $b0 = d16 cmpl 1.0;

        if $b0 <= 0 goto label16;

        $d386 = 1.0 - d5;

        $d392 = 1.0 / $d386;

        $d388 = 0.5 - d16;

        $d387 = d16 - 1.0;

        $d390 = $d388 / $d387;

        $d389 = d16 - 1.0;

        $d391 = $d390 / $d389;

        $d486 = $d392 + $d391;

        goto label17;

     label16:
        $d362 = 1.0 - d16;

        $d363 = d16 / $d362;

        $d364 = staticinvoke <java.lang.Math: double pow(double,double)>($d363, 2.0);

        $d368 = 0.5 * $d364;

        $d365 = d16 - 4.0;

        $d369 = 0.25 * $d365;

        $d366 = d16 - 1.0;

        $d367 = d16 / $d366;

        $d370 = staticinvoke <java.lang.Math: double pow(double,double)>($d367, 3.0);

        $d372 = $d369 * $d370;

        $d371 = d16 - 1.0;

        $d374 = $d372 / $d371;

        $d373 = 1.0 - d5;

        $d375 = $d374 * $d373;

        $d486 = $d368 + $d375;

     label17:
        $z5 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d486);

        if $z5 == 0 goto label18;

        $d376 = r9[2];

        $d378 = d21 * $d376;

        $d377 = d24 * $d486;

        $d381 = $d378 + $d377;

        $d379 = r11[2];

        $d380 = d22 * $d379;

        $d384 = $d381 + $d380;

        $d382 = r12[2];

        $d383 = d23 * $d382;

        $d385 = $d384 + $d383;

        r3[4] = $d385;

        goto label20;

     label18:
        r3[4] = #-Infinity;

        goto label20;

     label19:
        $d342 = neg d16;

        $d343 = $d342 / d18;

        $d348 = $d343 - 1.0;

        $d344 = d18 + d16;

        $d346 = $d344 - d5;

        $d345 = 1.0 - d5;

        $d347 = $d346 / $d345;

        $d351 = $d348 + $d347;

        $d349 = d18 + d16;

        $d350 = $d349 - d5;

        d488 = $d351 / $d350;

        $d352 = r9[2];

        $d354 = d21 * $d352;

        $d353 = d24 * d488;

        $d357 = $d354 + $d353;

        $d355 = r11[2];

        $d356 = d22 * $d355;

        $d360 = $d357 + $d356;

        $d358 = r12[2];

        $d359 = d23 * $d358;

        $d361 = $d360 + $d359;

        r3[4] = $d361;

     label20:
        $d489 = r9[3];

        $d490 = d21 * $d489;

        $d491 = r10[3];

        $d492 = d484 * $d491;

        $d493 = $d490 + $d492;

        $d494 = r11[3];

        $d495 = d22 * $d494;

        $d496 = $d493 + $d495;

        $d497 = r12[3];

        $d498 = d23 * $d497;

        $d499 = $d496 + $d498;

        r3[5] = $d499;

        $r46 = r4[0];

        $r47 = r16[0];

        $d500 = $r47[0];

        $d501 = $d500 * d1;

        $r48 = r16[0];

        $d502 = $r48[1];

        $d503 = $d502 * d31;

        $d504 = $d501 + $d503;

        $d505 = $d504 * d1;

        $d506 = d25 * 0.0;

        $d507 = $d505 + $d506;

        $r49 = r16[0];

        $d508 = $r49[1];

        $d509 = $d508 * d1;

        $r50 = r16[1];

        $d510 = $r50[1];

        $d511 = $d510 * d31;

        $d512 = $d509 + $d511;

        $d513 = $d512 * d31;

        $d514 = $d507 + $d513;

        $d515 = d26 * d33;

        $d516 = $d514 + $d515;

        $r46[0] = $d516;

        $r51 = r4[0];

        $r52 = r16[0];

        $d517 = $r52[0];

        $d518 = $d517 * d0;

        $r53 = r16[0];

        $d519 = $r53[1];

        $d520 = $d519 * d32;

        $d521 = $d518 + $d520;

        $d522 = $d521 * d1;

        $d523 = d25 * 1.0;

        $d524 = $d522 + $d523;

        $r54 = r16[0];

        $d525 = $r54[1];

        $d526 = $d525 * d0;

        $r55 = r16[1];

        $d527 = $r55[1];

        $d528 = $d527 * d32;

        $d529 = $d526 + $d528;

        $d530 = $d529 * d31;

        $d531 = $d524 + $d530;

        $d532 = d26 * 0.0;

        $d533 = $d531 + $d532;

        $r51[1] = $d533;

        $r56 = r4[1];

        $r57 = r4[0];

        $d534 = $r57[1];

        $r56[0] = $d534;

        $r58 = r4[1];

        $r59 = r16[0];

        $d535 = $r59[0];

        $d536 = $d535 * d0;

        $r60 = r16[0];

        $d537 = $r60[1];

        $d538 = $d537 * d32;

        $d539 = $d536 + $d538;

        $d540 = $d539 * d0;

        $d541 = d25 * 0.0;

        $d542 = $d540 + $d541;

        $r61 = r16[0];

        $d543 = $r61[1];

        $d544 = $d543 * d0;

        $r62 = r16[1];

        $d545 = $r62[1];

        $d546 = $d545 * d32;

        $d547 = $d544 + $d546;

        $d548 = $d547 * d32;

        $d549 = $d542 + $d548;

        $d550 = d26 * d35;

        $d551 = $d549 + $d550;

        $r58[1] = $d551;

        return d19;
    }

    private double getZOverChi(double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, d44, d45, $d46, $d47, $d48;
        boolean $z0, $z1, $z2;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 0.0, 1.0E-6);

        if $z0 == 0 goto label01;

        $d41 = d0 * d1;

        $d42 = $d41 / 2.0;

        $d43 = 1.0 - $d42;

        return $d43;

     label01:
        d2 = 1.0 - d0;

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d2, 0.0, 1.0E-5);

        if $z1 == 0 goto label05;

        $b6 = d1 cmpl 1.0;

        if $b6 <= 0 goto label03;

        $b8 = d2 cmpl 0.0;

        if $b8 != 0 goto label02;

        return 0.0;

     label02:
        $d35 = d1 - 1.0;

        $d36 = 2.0 * $d35;

        $d37 = staticinvoke <java.lang.Math: double log(double)>($d36);

        $d38 = staticinvoke <java.lang.Math: double log(double)>(d2);

        $d39 = $d37 - $d38;

        $d40 = d1 / $d39;

        return $d40;

     label03:
        $b7 = d1 cmpg 1.0;

        if $b7 >= 0 goto label04;

        $d25 = 1.0 - d1;

        $d26 = staticinvoke <java.lang.Math: double log(double)>($d25);

        $d29 = neg $d26;

        $d27 = d1 - 1.0;

        $d28 = d1 / $d27;

        $d30 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d28);

        $d31 = 0.5 * $d30;

        $d32 = $d31 * d2;

        $d33 = $d29 - $d32;

        $d34 = d1 / $d33;

        return $d34;

     label04:
        return 0.0;

     label05:
        d3 = 1.0 + d0;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d3, 0.0, 1.0E-8);

        if $z2 == 0 goto label09;

        $b3 = d1 cmpl -1.0;

        if $b3 <= 0 goto label06;

        $d22 = 1.0 + d1;

        $d23 = staticinvoke <java.lang.Math: double log(double)>($d22);

        $d24 = d1 / $d23;

        return $d24;

     label06:
        $b4 = d1 cmpg -1.0;

        if $b4 >= 0 goto label08;

        $b5 = d3 cmpl 0.0;

        if $b5 != 0 goto label07;

        return 0.0;

     label07:
        $d16 = staticinvoke <java.lang.Math: double log(double)>(d3);

        $d17 = 1.0 + d1;

        $d18 = neg $d17;

        $d19 = $d18 / d2;

        $d20 = staticinvoke <java.lang.Math: double log(double)>($d19);

        d44 = $d16 - $d20;

        $d21 = d1 / d44;

        return $d21;

     label08:
        return 0.0;

     label09:
        $b0 = d1 cmpg -1000000.0;

        if $b0 >= 0 goto label10;

        $d13 = d0 * d0;

        $d14 = $d13 - 1.0;

        $d15 = $d14 / 2.0;

        d45 = $d15 / d1;

        goto label12;

     label10:
        $b1 = d1 cmpl 1.0E8;

        if $b1 <= 0 goto label11;

        $d12 = d1 - d0;

        d45 = 2.0 * $d12;

        goto label12;

     label11:
        $d5 = 2.0 * d0;

        $d6 = $d5 * d1;

        $d8 = 1.0 - $d6;

        $d7 = d1 * d1;

        $d9 = $d8 + $d7;

        $d10 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        $d11 = $d10 + d1;

        d45 = $d11 - d0;

        $b2 = d45 cmpg 0.0;

        if $b2 > 0 goto label12;

        return 0.0;

     label12:
        $d46 = staticinvoke <java.lang.Math: double log(double)>(d45);

        $d47 = staticinvoke <java.lang.Math: double log(double)>(d2);

        d4 = $d46 - $d47;

        $d48 = d1 / d4;

        return $d48;
    }

    private double[] zOverChiWithDev(double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, d164, d165, d166, d167, d168, d169, d170, d171, d172, d175, d176, d177, d178, d179;
        double[] r1;
        boolean $z0, $z1, $z2;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        com.opengamma.analytics.math.MathException $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 = newarray (double)[3];

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 0.0, 1.0E-6);

        if $z0 == 0 goto label01;

        $d157 = d0 * d1;

        $d158 = $d157 / 2.0;

        $d159 = 1.0 - $d158;

        r1[0] = $d159;

        $d160 = neg d1;

        $d161 = $d160 / 2.0;

        r1[1] = $d161;

        $d162 = neg d0;

        $d163 = $d162 / 2.0;

        r1[2] = $d163;

        return r1;

     label01:
        d2 = 1.0 - d0;

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d2, 0.0, 1.0E-5);

        if $z1 == 0 goto label06;

        $b5 = d1 cmpl 1.0;

        if $b5 <= 0 goto label03;

        $b7 = d2 cmpl 0.0;

        if $b7 != 0 goto label02;

        r1[0] = 0.0;

        r1[1] = #-Infinity;

        r1[2] = 0.0;

        goto label05;

     label02:
        $d131 = d1 - 1.0;

        $d132 = 2.0 * $d131;

        $d133 = staticinvoke <java.lang.Math: double log(double)>($d132);

        $d134 = staticinvoke <java.lang.Math: double log(double)>(d2);

        d164 = $d133 - $d134;

        $d135 = d1 / d164;

        r1[0] = $d135;

        $d136 = neg d1;

        $d137 = $d136 / d164;

        $d139 = $d137 / d164;

        $d140 = 1.0 / d2;

        $d141 = 0.5 - d1;

        $d138 = d1 - 1.0;

        $d142 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d138);

        $d143 = $d141 / $d142;

        $d144 = $d140 + $d143;

        $d145 = $d139 * $d144;

        r1[1] = $d145;

        $d152 = 1.0 / d164;

        $d146 = d1 / d164;

        $d153 = $d146 / d164;

        $d147 = 2.0 * d0;

        $d148 = $d147 * d1;

        $d150 = 1.0 - $d148;

        $d149 = d1 * d1;

        $d151 = $d150 + $d149;

        $d154 = staticinvoke <java.lang.Math: double sqrt(double)>($d151);

        $d155 = $d153 / $d154;

        $d156 = $d152 - $d155;

        r1[2] = $d156;

        goto label05;

     label03:
        $b6 = d1 cmpg 1.0;

        if $b6 >= 0 goto label04;

        $d93 = 1.0 - d1;

        $d94 = staticinvoke <java.lang.Math: double log(double)>($d93);

        $d97 = neg $d94;

        $d95 = d1 - 1.0;

        $d96 = d1 / $d95;

        $d98 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d96);

        $d99 = 0.5 * $d98;

        $d100 = $d99 * d2;

        d165 = $d97 - $d100;

        $d101 = d1 / d165;

        r1[0] = $d101;

        $d102 = neg d1;

        $d103 = $d102 / d165;

        $d106 = $d103 / d165;

        $d104 = d1 - 1.0;

        $d105 = d1 / $d104;

        $d107 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d105);

        $d111 = 0.5 * $d107;

        $d108 = 0.25 * d1;

        $d112 = $d108 - 1.0;

        $d109 = d1 - 1.0;

        $d110 = d1 / $d109;

        $d113 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double cube(double)>($d110);

        $d115 = $d112 * $d113;

        $d114 = d1 - 1.0;

        $d116 = $d115 / $d114;

        $d117 = $d116 * d2;

        $d118 = $d111 + $d117;

        $d119 = $d106 * $d118;

        r1[1] = $d119;

        $d126 = 1.0 / d165;

        $d120 = d1 / d165;

        $d127 = $d120 / d165;

        $d121 = 2.0 * d0;

        $d122 = $d121 * d1;

        $d124 = 1.0 - $d122;

        $d123 = d1 * d1;

        $d125 = $d124 + $d123;

        $d128 = staticinvoke <java.lang.Math: double sqrt(double)>($d125);

        $d129 = $d127 / $d128;

        $d130 = $d126 - $d129;

        r1[2] = $d130;

        goto label05;

     label04:
        $r3 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r3.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("can\'t handle z=1, rho=1");

        throw $r3;

     label05:
        return r1;

     label06:
        d166 = 1.0 + d0;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d166, 0.0, 1.0E-8);

        if $z2 == 0 goto label11;

        $b2 = d1 cmpl -1.0;

        if $b2 <= 0 goto label07;

        $d76 = 1.0 + d1;

        d167 = staticinvoke <java.lang.Math: double log(double)>($d76);

        d168 = d167 * d167;

        $d77 = d1 / d167;

        r1[0] = $d77;

        $d78 = 2.0 * d1;

        $d79 = $d78 + 1.0;

        $d81 = $d79 / 2.0;

        $d80 = 1.0 + d1;

        $d82 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d80);

        $d84 = $d81 / $d82;

        $d83 = 1.0 / d2;

        $d85 = $d84 - $d83;

        $d86 = $d85 * d1;

        $d87 = $d86 / d168;

        r1[1] = $d87;

        $d91 = 1.0 / d167;

        $d88 = 1.0 + d1;

        $d89 = d1 / $d88;

        $d90 = $d89 / d168;

        $d92 = $d91 - $d90;

        r1[2] = $d92;

        goto label10;

     label07:
        $b3 = d1 cmpg -1.0;

        if $b3 >= 0 goto label09;

        $b4 = d166 cmpl 0.0;

        if $b4 != 0 goto label08;

        r1[0] = 0.0;

        $d62 = staticinvoke <java.lang.Math: double log(double)>(1.0E-8);

        $d63 = 1.0 + d1;

        $d64 = neg $d63;

        $d65 = $d64 / d2;

        $d66 = staticinvoke <java.lang.Math: double log(double)>($d65);

        d169 = $d62 - $d66;

        $d67 = 1.0 / d2;

        $d70 = 1.0E8 + $d67;

        $d68 = 1.0 + d1;

        $d69 = d1 / $d68;

        $d71 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d69);

        d170 = $d70 - $d71;

        $d72 = neg d170;

        $d73 = $d72 * d1;

        $d74 = $d73 / d169;

        $d75 = $d74 / d169;

        r1[1] = $d75;

        r1[2] = 0.0;

        goto label10;

     label08:
        $d40 = staticinvoke <java.lang.Math: double log(double)>(d166);

        $d41 = 1.0 + d1;

        $d42 = neg $d41;

        $d43 = $d42 / d2;

        $d44 = staticinvoke <java.lang.Math: double log(double)>($d43);

        d171 = $d40 - $d44;

        $d45 = d1 / d171;

        r1[0] = $d45;

        $d47 = 1.0 / d166;

        $d46 = 1.0 / d2;

        $d50 = $d47 + $d46;

        $d48 = 1.0 + d1;

        $d49 = d1 / $d48;

        $d51 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d49);

        d172 = $d50 - $d51;

        $d52 = neg d172;

        $d53 = $d52 * d1;

        $d54 = $d53 / d171;

        $d55 = $d54 / d171;

        r1[1] = $d55;

        $d60 = 1.0 / d171;

        $d56 = d1 / d171;

        $d58 = $d56 / d171;

        $d57 = 1.0 + d1;

        $d59 = $d58 / $d57;

        $d61 = $d60 + $d59;

        r1[2] = $d61;

        goto label10;

     label09:
        $r2 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r2.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("can\'t handle z=-1, rho=-1");

        throw $r2;

     label10:
        return r1;

     label11:
        $b0 = d1 cmpg -1000000.0;

        if $b0 >= 0 goto label12;

        $d36 = d0 * d0;

        $d37 = $d36 - 1.0;

        $d38 = $d37 / 2.0;

        d175 = $d38 / d1;

        d176 = d0 / d1;

        $d39 = neg d175;

        d177 = $d39 / d1;

        goto label14;

     label12:
        $b1 = d1 cmpl 1.0E8;

        if $b1 <= 0 goto label13;

        $d29 = d1 - d0;

        $d28 = 0.0 / d1;

        d178 = $d29 + $d28;

        $d30 = d178 + d1;

        d175 = $d30 - d0;

        d176 = -2.0;

        $d31 = 0.0 / d1;

        $d32 = $d31 / d1;

        d177 = 2.0 - $d32;

        goto label14;

     label13:
        $d7 = 2.0 * d0;

        $d8 = $d7 * d1;

        $d10 = 1.0 - $d8;

        $d9 = d1 * d1;

        $d11 = $d10 + $d9;

        d179 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        $d12 = d179 + d1;

        d175 = $d12 - d0;

        $d13 = d1 / d179;

        $d14 = $d13 + 1.0;

        d176 = neg $d14;

        $d15 = d1 - d0;

        $d16 = $d15 / d179;

        d177 = $d16 + 1.0;

     label14:
        $b8 = d175 cmpg 0.0;

        if $b8 > 0 goto label15;

        r1[0] = 0.0;

        r1[1] = 0.0;

        r1[2] = 0.0;

        goto label16;

     label15:
        $d17 = 1.0 - d0;

        $d18 = d175 / $d17;

        d3 = staticinvoke <java.lang.Math: double log(double)>($d18);

        $d19 = d1 / d3;

        r1[0] = $d19;

        $d21 = d176 / d175;

        $d20 = 1.0 / d2;

        d4 = $d21 + $d20;

        $d22 = d1 / d3;

        d5 = $d22 / d3;

        $d23 = neg d4;

        $d24 = $d23 * d5;

        r1[1] = $d24;

        d6 = d177 / d175;

        $d26 = 1.0 / d3;

        $d25 = d5 * d6;

        $d27 = $d26 - $d25;

        r1[2] = $d27;

     label16:
        return r1;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction;

        return "SABR (Hagan)";
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double ATM_EPS> = 1.0E-7;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double RHO_EPS_NEGATIVE> = 1.0E-8;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double RHO_EPS> = 1.0E-5;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double BETA_EPS> = 1.0E-8;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double LARGE_POS_Z> = 1.0E8;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double LARGE_NEG_Z> = -1000000.0;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double SMALL_Z> = 1.0E-6;

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: double CUTOFF_MONEYNESS> = 1.0E-12;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/model/volatility/smile/function/SABRHaganVolatilityFunction");

        <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganVolatilityFunction: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
