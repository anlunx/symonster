public class org.apache.commons.math3.analysis.function.Logistic extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double a;
    private final double k;
    private final double b;
    private final double oneOverN;
    private final double q;
    private final double m;

    public void <init>(double, double, double, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        double d0, d1, d2, d3, d4, d5, $d6;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Double $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d5 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.function.Logistic: double k> = d0;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double m> = d1;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double b> = d2;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double q> = d3;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double a> = d4;

        $d6 = 1.0 / d5;

        r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN> = $d6;

        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logistic: double m>;

        $d7 = $d1 - d0;

        $d6 = r0.<org.apache.commons.math3.analysis.function.Logistic: double k>;

        $d5 = r0.<org.apache.commons.math3.analysis.function.Logistic: double b>;

        $d4 = r0.<org.apache.commons.math3.analysis.function.Logistic: double q>;

        $d3 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN>;

        $d8 = staticinvoke <org.apache.commons.math3.analysis.function.Logistic: double value(double,double,double,double,double,double)>($d7, $d6, $d5, $d4, $d3, $d2);

        return $d8;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }

    private static double value(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d7 = d1 - d4;

        $d6 = d2 * d0;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d6);

        $d9 = d3 * $d8;

        $d10 = 1.0 + $d9;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d10, d5);

        $d12 = $d7 / $d11;

        $d13 = d4 + $d12;

        return $d13;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.function.Logistic r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.analysis.function.Logistic;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        $d0 = r0.<org.apache.commons.math3.analysis.function.Logistic: double m>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.analysis.function.Logistic: double b>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d1);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure exp()>();

        $d2 = r0.<org.apache.commons.math3.analysis.function.Logistic: double q>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d2);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>(1.0);

        $d3 = r0.<org.apache.commons.math3.analysis.function.Logistic: double oneOverN>;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double)>($d3);

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure reciprocal()>();

        $d5 = r0.<org.apache.commons.math3.analysis.function.Logistic: double k>;

        $d4 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $d6 = $d5 - $d4;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d6);

        $d7 = r0.<org.apache.commons.math3.analysis.function.Logistic: double a>;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d7);

        return $r11;
    }

    static double access$000(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, $d6;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d6 = staticinvoke <org.apache.commons.math3.analysis.function.Logistic: double value(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        return $d6;
    }
}
