public class org.apache.commons.math3.distribution.PascalDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    private static final long serialVersionUID;
    private final int numberOfSuccesses;
    private final double probabilityOfSuccess;
    private final double logProbabilityOfSuccess;
    private final double log1mProbabilityOfSuccess;

    public void <init>(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int i0;
        double d0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r1, i0, d0);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        int i0;
        double d0, $d1, $d2, $d3;
        byte $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5, $r8;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        if i0 > 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESSES>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label1:
        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label2;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses> = i0;

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess> = d0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double logProbabilityOfSuccess> = $d1;

        $d2 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d2);

        r0.<org.apache.commons.math3.distribution.PascalDistribution: double log1mProbabilityOfSuccess> = $d3;

        return;
    }

    public int getNumberOfSuccesses()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        return $i0;
    }

    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        return $d0;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d7 = 0.0;

        goto label2;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i2 = i0 + $i1;

        $i5 = $i2 - 1;

        $i3 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i4 = $i3 - 1;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>($i5, $i4);

        $d1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $i6 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d1, $i6);

        $d5 = $d0 * $d2;

        $d3 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $d4 = 1.0 - $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d4, i0);

        d7 = $d5 * $d6;

     label2:
        return d7;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d8 = #-Infinity;

        goto label2;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i2 = i0 + $i1;

        $i5 = $i2 - 1;

        $i3 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $i4 = $i3 - 1;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>($i5, $i4);

        $d2 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double logProbabilityOfSuccess>;

        $i6 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d1 = (double) $i6;

        $d3 = $d2 * $d1;

        $d7 = $d0 + $d3;

        $d5 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double log1mProbabilityOfSuccess>;

        $d4 = (double) i0;

        $d6 = $d5 * $d4;

        d8 = $d7 + $d6;

     label2:
        return d8;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        int i0, $i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d4 = 0.0;

        goto label2;

     label1:
        $d3 = r0.<org.apache.commons.math3.distribution.PascalDistribution: double probabilityOfSuccess>;

        $i1 = r0.<org.apache.commons.math3.distribution.PascalDistribution: int numberOfSuccesses>;

        $d2 = (double) $i1;

        $d0 = (double) i0;

        $d1 = $d0 + 1.0;

        d4 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d3, $d2, $d1);

     label2:
        return d4;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double d0, d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: int getNumberOfSuccesses()>();

        d1 = (double) $i0;

        $d2 = 1.0 - d0;

        $d3 = d1 * $d2;

        $d4 = $d3 / d0;

        return $d4;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PascalDistribution: int getNumberOfSuccesses()>();

        d1 = (double) $i0;

        $d2 = 1.0 - d0;

        $d4 = d1 * $d2;

        $d3 = d0 * d0;

        $d5 = $d4 / $d3;

        return $d5;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 2147483647;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.PascalDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PascalDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.PascalDistribution: long serialVersionUID> = 6751309484392813623L;

        return;
    }
}
