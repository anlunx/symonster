final class org.apache.commons.math3.distribution.SaddlePointExpansion extends java.lang.Object
{
    private static final double HALF_LOG_2_PI;
    private static final double[] EXACT_STIRLING_ERRORS;

    private void <init>()
    {
        org.apache.commons.math3.distribution.SaddlePointExpansion r0;

        r0 := @this: org.apache.commons.math3.distribution.SaddlePointExpansion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static double getStirlingError(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20;
        byte $b0, $b1;
        int $i2;
        double[] $r0;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 15.0;

        if $b0 >= 0 goto label3;

        d18 = 2.0 * d0;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d18);

        $b1 = $d9 cmpl d18;

        if $b1 != 0 goto label1;

        $r0 = <org.apache.commons.math3.distribution.SaddlePointExpansion: double[] EXACT_STIRLING_ERRORS>;

        $i2 = (int) d18;

        d19 = $r0[$i2];

        goto label2;

     label1:
        $d10 = d0 + 1.0;

        $d11 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d10);

        $d12 = d0 + 0.5;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d14 = $d12 * $d13;

        $d15 = $d11 - $d14;

        $d17 = $d15 + d0;

        $d16 = <org.apache.commons.math3.distribution.SaddlePointExpansion: double HALF_LOG_2_PI>;

        d19 = $d17 - $d16;

     label2:
        goto label4;

     label3:
        d20 = d0 * d0;

        $d1 = 8.417508417508417E-4 / d20;

        $d2 = 5.952380952380953E-4 - $d1;

        $d3 = $d2 / d20;

        $d4 = 7.936507936507937E-4 - $d3;

        $d5 = $d4 / d20;

        $d6 = 0.002777777777777778 - $d5;

        $d7 = $d6 / d20;

        $d8 = 0.08333333333333333 - $d7;

        d19 = $d8 / d0;

     label4:
        return d19;
    }

    static double getDeviancePart(double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18, d19, d20;
        byte $b0, $b1;
        int $i2, $i3, i4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d3 = d0 - d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d5 = d0 + d1;

        $d6 = 0.1 * $d5;

        $b0 = $d4 cmpg $d6;

        if $b0 >= 0 goto label3;

        d2 = d0 - d1;

        $d11 = d0 + d1;

        d15 = d2 / $d11;

        d16 = d15 * d2;

        d17 = #NaN;

        $d12 = 2.0 * d0;

        d18 = $d12 * d15;

        d19 = d15 * d15;

        i4 = 1;

     label1:
        $b1 = d16 cmpl d17;

        if $b1 == 0 goto label2;

        d17 = d16;

        d18 = d18 * d19;

        $i2 = i4 * 2;

        $i3 = $i2 + 1;

        $d13 = (double) $i3;

        $d14 = d18 / $d13;

        d16 = d16 + $d14;

        i4 = i4 + 1;

        goto label1;

     label2:
        d20 = d16;

        goto label4;

     label3:
        $d7 = d0 / d1;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d7);

        $d9 = d0 * $d8;

        $d10 = $d9 + d1;

        d20 = $d10 - d0;

     label4:
        return d20;
    }

    static double logBinomialProbability(int, int, double, double)
    {
        int i0, i1, $i2, $i3, $i4;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, d45, d46;
        byte $b5, $b6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        if i0 != 0 goto label2;

        $b6 = d0 cmpg 0.1;

        if $b6 >= 0 goto label1;

        $d40 = (double) i1;

        $d38 = (double) i1;

        $d39 = $d38 * d1;

        $d41 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d40, $d39);

        $d44 = neg $d41;

        $d42 = (double) i1;

        $d43 = $d42 * d0;

        d45 = $d44 - $d43;

        goto label5;

     label1:
        $d36 = (double) i1;

        $d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        d45 = $d36 * $d37;

        goto label5;

     label2:
        if i0 != i1 goto label4;

        $b5 = d1 cmpg 0.1;

        if $b5 >= 0 goto label3;

        $d31 = (double) i1;

        $d29 = (double) i1;

        $d30 = $d29 * d0;

        $d32 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d31, $d30);

        $d35 = neg $d32;

        $d33 = (double) i1;

        $d34 = $d33 * d1;

        d45 = $d35 - $d34;

        goto label5;

     label3:
        $d27 = (double) i1;

        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        d45 = $d27 * $d28;

        goto label5;

     label4:
        $d3 = (double) i1;

        $d4 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d3);

        $d5 = (double) i0;

        $d6 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d5);

        $d8 = $d4 - $d6;

        $i2 = i1 - i0;

        $d7 = (double) $i2;

        $d9 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d7);

        $d13 = $d8 - $d9;

        $d12 = (double) i0;

        $d10 = (double) i1;

        $d11 = $d10 * d0;

        $d14 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d12, $d11);

        $d18 = $d13 - $d14;

        $i3 = i1 - i0;

        $d17 = (double) $i3;

        $d15 = (double) i1;

        $d16 = $d15 * d1;

        $d19 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d17, $d16);

        d46 = $d18 - $d19;

        $d20 = (double) i0;

        $d22 = 6.283185307179586 * $d20;

        $i4 = i1 - i0;

        $d21 = (double) $i4;

        $d24 = $d22 * $d21;

        $d23 = (double) i1;

        d2 = $d24 / $d23;

        $d25 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d2);

        $d26 = -0.5 * $d25;

        d45 = $d26 + d46;

     label5:
        return d45;
    }

    static void <clinit>()
    {
        double $d0, $d1;
        double[] $r0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d1 = 0.5 * $d0;

        <org.apache.commons.math3.distribution.SaddlePointExpansion: double HALF_LOG_2_PI> = $d1;

        $r0 = newarray (double)[31];

        $r0[0] = 0.0;

        $r0[1] = 0.15342640972002736;

        $r0[2] = 0.08106146679532726;

        $r0[3] = 0.05481412105191765;

        $r0[4] = 0.0413406959554093;

        $r0[5] = 0.03316287351993629;

        $r0[6] = 0.02767792568499834;

        $r0[7] = 0.023746163656297496;

        $r0[8] = 0.020790672103765093;

        $r0[9] = 0.018488450532673187;

        $r0[10] = 0.016644691189821193;

        $r0[11] = 0.015134973221917378;

        $r0[12] = 0.013876128823070748;

        $r0[13] = 0.012810465242920227;

        $r0[14] = 0.01189670994589177;

        $r0[15] = 0.011104559758206917;

        $r0[16] = 0.010411265261972096;

        $r0[17] = 0.009799416126158804;

        $r0[18] = 0.009255462182712733;

        $r0[19] = 0.008768700134139386;

        $r0[20] = 0.00833056343336287;

        $r0[21] = 0.00793411456431402;

        $r0[22] = 0.007573675487951841;

        $r0[23] = 0.007244554301320383;

        $r0[24] = 0.00694284010720953;

        $r0[25] = 0.006665247032707682;

        $r0[26] = 0.006408994188004207;

        $r0[27] = 0.006171712263039458;

        $r0[28] = 0.0059513701127588475;

        $r0[29] = 0.0057462165130101155;

        $r0[30] = 0.005554733551962801;

        <org.apache.commons.math3.distribution.SaddlePointExpansion: double[] EXACT_STIRLING_ERRORS> = $r0;

        return;
    }
}
