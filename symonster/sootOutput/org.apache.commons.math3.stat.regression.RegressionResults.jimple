public class org.apache.commons.math3.stat.regression.RegressionResults extends java.lang.Object implements java.io.Serializable
{
    private static final int SSE_IDX;
    private static final int SST_IDX;
    private static final int RSQ_IDX;
    private static final int MSE_IDX;
    private static final int ADJRSQ_IDX;
    private static final long serialVersionUID;
    private final double[] parameters;
    private final double[][] varCovData;
    private final boolean isSymmetricVCD;
    private final int rank;
    private final long nobs;
    private final boolean containsConstant;
    private final double[] globalFitInfo;

    private void <init>()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = null;

        $r1 = (double[][]) null;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = $r1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: int rank> = -1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs> = -1L;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant> = 0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD> = 0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo> = null;

        return;
    }

    public void <init>(double[], double[][], boolean, long, int, double, double, double, boolean, boolean)
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        double[][] r2, $r11, $r13;
        boolean z0, z1, z2;
        long l0, $l2, $l3, $l4, $l5, $l10, $l11;
        int i1, $i7, $i8, i9;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        z0 := @parameter2: boolean;

        l0 := @parameter3: long;

        i1 := @parameter4: int;

        d0 := @parameter5: double;

        d1 := @parameter6: double;

        d2 := @parameter7: double;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z2 == 0 goto label3;

        $r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>(r1);

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = $r10;

        $i7 = lengthof r2;

        $r11 = newarray (double[])[$i7];

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = $r11;

        i9 = 0;

     label1:
        $i8 = lengthof r2;

        if i9 >= $i8 goto label2;

        $r13 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r12 = r2[i9];

        $r14 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r12);

        $r13[i9] = $r14;

        i9 = i9 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters> = r1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData> = r2;

     label4:
        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD> = z0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs> = l0;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: int rank> = i1;

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant> = z1;

        $r3 = newarray (double)[5];

        r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo> = $r3;

        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r4, #NaN);

        if i1 <= 0 goto label7;

        $r9 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        if z1 == 0 goto label5;

        $d19 = d0 * d0;

        $d18 = (double) l0;

        $d20 = $d19 / $d18;

        $d21 = d1 - $d20;

        goto label6;

     label5:
        $d21 = d1;

     label6:
        $r9[1] = $d21;

     label7:
        $r15 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r15[0] = d2;

        $r16 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r17 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d22 = $r17[0];

        $l10 = (long) i1;

        $l11 = l0 - $l10;

        $d23 = (double) $l11;

        $d24 = $d22 / $d23;

        $r16[3] = $d24;

        $r18 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r19 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d25 = $r19[0];

        $r20 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d26 = $r20[1];

        $d27 = $d25 / $d26;

        $d28 = 1.0 - $d27;

        $r18[2] = $d28;

        if z1 != 0 goto label8;

        $r8 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $r7 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d11 = $r7[2];

        $d15 = 1.0 - $d11;

        $d13 = (double) l0;

        $l4 = (long) i1;

        $l5 = l0 - $l4;

        $d12 = (double) $l5;

        $d14 = $d13 / $d12;

        $d16 = $d15 * $d14;

        $d17 = 1.0 - $d16;

        $r8[4] = $d17;

        goto label9;

     label8:
        $r6 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d3 = (double) l0;

        $d4 = $d3 - 1.0;

        $d8 = d2 * $d4;

        $r5 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d6 = $r5[1];

        $l2 = (long) i1;

        $l3 = l0 - $l2;

        $d5 = (double) $l3;

        $d7 = $d6 * $d5;

        $d9 = $d8 / $d7;

        $d10 = 1.0 - $d9;

        $r6[4] = $d10;

     label9:
        return;
    }

    public double getParameterEstimate(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int i0, $i1, $i2, $i3;
        double[] $r1, $r5, $r7, $r8;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if i0 < 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i3 = lengthof $r7;

        if i0 < $i3 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r5;

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label3:
        $r8 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $d0 = $r8[i0];

        return $d0;
    }

    public double[] getParameterEstimates()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r2);

        return $r3;
    }

    public double getStdErrorOfEstimate(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int i0, $i1, $i2, $i3;
        double d0, $d1;
        double[] $r1, $r5, $r7;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r6;
        boolean $z0;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if i0 < 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i3 = lengthof $r7;

        if i0 < $i3 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r5;

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label3:
        d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>(i0, i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label4;

        $b4 = d0 cmpl 4.9E-324;

        if $b4 <= 0 goto label4;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        return $d1;

     label4:
        return #NaN;
    }

    public double[] getStdErrorOfEstimates()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] r1, $r2, $r3, $r4;
        double d0, $d1;
        int $i0, $i1, i3;
        boolean $z0;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r2 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r3;

        r1 = newarray (double)[$i0];

        i3 = 0;

     label2:
        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i1 = lengthof $r4;

        if i3 >= $i1 goto label5;

        d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>(i3, i3);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label3;

        $b2 = d0 cmpl 4.9E-324;

        if $b2 <= 0 goto label3;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        r1[i3] = $d1;

        goto label4;

     label3:
        r1[i3] = #NaN;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return r1;
    }

    public double getCovarianceOfParameters(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double[] $r1, $r5, $r7, $r11, $r13;
        org.apache.commons.math3.exception.OutOfRangeException $r2, $r8;
        java.lang.Integer $r3, $r4, $r6, $r9, $r10, $r12;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return #NaN;

     label1:
        if i0 < 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i4 = lengthof $r7;

        if i0 < $i4 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i2 = lengthof $r5;

        $i3 = $i2 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label3:
        if i1 < 0 goto label4;

        $r13 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i7 = lengthof $r13;

        if i1 < $i7 goto label5;

     label4:
        $r8 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r11 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i5 = lengthof $r11;

        $i6 = $i5 - 1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        specialinvoke $r8.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r9, $r10, $r12);

        throw $r8;

     label5:
        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.regression.RegressionResults: double getVcvElement(int,int)>(i0, i1);

        return $d0;
    }

    public int getNumberOfParameters()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] parameters>;

        $i0 = lengthof $r2;

        return $i0;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $l0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: long nobs>;

        return $l0;
    }

    public double getTotalSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[1];

        return $d0;
    }

    public double getRegressionSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d1 = $r1[1];

        $r2 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r2[0];

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getErrorSumSquares()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[0];

        return $d0;
    }

    public double getMeanSquareError()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[3];

        return $d0;
    }

    public double getRSquared()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[2];

        return $d0;
    }

    public double getAdjustedRSquared()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[] globalFitInfo>;

        $d0 = $r1[4];

        return $d0;
    }

    public boolean hasIntercept()
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        $z0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean containsConstant>;

        return $z0;
    }

    private double getVcvElement(int, int)
    {
        org.apache.commons.math3.stat.regression.RegressionResults r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;
        double[][] $r1, $r3, $r4, $r6, $r8, $r10, $r12, $r14;
        double[] $r2, $r5, $r7, $r9, $r11, $r13, $r15;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.stat.regression.RegressionResults;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: boolean isSymmetricVCD>;

        if $z0 == 0 goto label5;

        $r3 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $i2 = lengthof $r3;

        if $i2 <= 1 goto label3;

        if i0 != i1 goto label1;

        $r14 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r15 = $r14[i0];

        $d5 = $r15[i0];

        return $d5;

     label1:
        $r8 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r9 = $r8[i1];

        $i11 = lengthof $r9;

        if i0 < $i11 goto label2;

        $r12 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r13 = $r12[i0];

        $d4 = $r13[i1];

        return $d4;

     label2:
        $r10 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r11 = $r10[i1];

        $d3 = $r11[i0];

        return $d3;

     label3:
        if i0 <= i1 goto label4;

        $r6 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r7 = $r6[0];

        $i7 = i0 + 1;

        $i8 = $i7 * i0;

        $i9 = $i8 / 2;

        $i10 = $i9 + i1;

        $d2 = $r7[$i10];

        return $d2;

     label4:
        $r4 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r5 = $r4[0];

        $i3 = i1 + 1;

        $i4 = $i3 * i1;

        $i5 = $i4 / 2;

        $i6 = $i5 + i0;

        $d1 = $r5[$i6];

        return $d1;

     label5:
        $r1 = r0.<org.apache.commons.math3.stat.regression.RegressionResults: double[][] varCovData>;

        $r2 = $r1[i0];

        $d0 = $r2[i1];

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.regression.RegressionResults: long serialVersionUID> = 1L;

        <org.apache.commons.math3.stat.regression.RegressionResults: int ADJRSQ_IDX> = 4;

        <org.apache.commons.math3.stat.regression.RegressionResults: int MSE_IDX> = 3;

        <org.apache.commons.math3.stat.regression.RegressionResults: int RSQ_IDX> = 2;

        <org.apache.commons.math3.stat.regression.RegressionResults: int SST_IDX> = 1;

        <org.apache.commons.math3.stat.regression.RegressionResults: int SSE_IDX> = 0;

        return;
    }
}
