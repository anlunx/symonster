public class com.opengamma.analytics.math.minimization.LineSearch extends java.lang.Object
{
    private final com.opengamma.analytics.math.minimization.ScalarMinimizer _minimizer;
    private final com.opengamma.analytics.math.minimization.MinimumBracketer _bracketer;

    public void <init>(com.opengamma.analytics.math.minimization.ScalarMinimizer)
    {
        com.opengamma.analytics.math.minimization.LineSearch r0;
        com.opengamma.analytics.math.minimization.ScalarMinimizer r1;
        com.opengamma.analytics.math.minimization.ParabolicMinimumBracketer $r2;

        r0 := @this: com.opengamma.analytics.math.minimization.LineSearch;

        r1 := @parameter0: com.opengamma.analytics.math.minimization.ScalarMinimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null minimizer");

        r0.<com.opengamma.analytics.math.minimization.LineSearch: com.opengamma.analytics.math.minimization.ScalarMinimizer _minimizer> = r1;

        $r2 = new com.opengamma.analytics.math.minimization.ParabolicMinimumBracketer;

        specialinvoke $r2.<com.opengamma.analytics.math.minimization.ParabolicMinimumBracketer: void <init>()>();

        r0.<com.opengamma.analytics.math.minimization.LineSearch: com.opengamma.analytics.math.minimization.MinimumBracketer _bracketer> = $r2;

        return;
    }

    public double minimise(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.LineSearch r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        double[] r5;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.math.minimization.LineSearch$LineSearchFunction $r6;
        com.opengamma.analytics.math.minimization.MinimumBracketer $r7;
        byte $b0;
        com.opengamma.analytics.math.minimization.ScalarMinimizer $r8;

        r0 := @this: com.opengamma.analytics.math.minimization.LineSearch;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "direction");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "x");

        $r6 = new com.opengamma.analytics.math.minimization.LineSearch$LineSearchFunction;

        specialinvoke $r6.<com.opengamma.analytics.math.minimization.LineSearch$LineSearchFunction: void <init>(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, r3);

        $r7 = r0.<com.opengamma.analytics.math.minimization.LineSearch: com.opengamma.analytics.math.minimization.MinimumBracketer _bracketer>;

        r5 = virtualinvoke $r7.<com.opengamma.analytics.math.minimization.MinimumBracketer: double[] getBracketedPoints(com.opengamma.analytics.math.function.Function1D,double,double)>($r6, 0.0, 1.0);

        $d2 = r5[2];

        $d1 = r5[0];

        $b0 = $d2 cmpg $d1;

        if $b0 >= 0 goto label1;

        d0 = r5[0];

        $d7 = r5[2];

        r5[0] = $d7;

        r5[2] = d0;

     label1:
        $r8 = r0.<com.opengamma.analytics.math.minimization.LineSearch: com.opengamma.analytics.math.minimization.ScalarMinimizer _minimizer>;

        $d5 = r5[1];

        $d4 = r5[0];

        $d3 = r5[2];

        $d6 = interfaceinvoke $r8.<com.opengamma.analytics.math.minimization.ScalarMinimizer: double minimize(com.opengamma.analytics.math.function.Function1D,double,double,double)>($r6, $d5, $d4, $d3);

        return $d6;
    }
}
