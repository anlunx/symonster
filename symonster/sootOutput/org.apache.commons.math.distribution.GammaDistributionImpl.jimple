public class org.apache.commons.math.distribution.GammaDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.GammaDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private double alpha;
    private double beta;
    private final double solverAbsoluteAccuracy;

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: void setAlphaInternal(double)>(d0);

        specialinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: void setBetaInternal(double)>(d1);

        r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1, $d2, $d3, d4;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        d4 = 0.0;

        goto label2;

     label1:
        $d3 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d1 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        $d2 = d0 / $d1;

        d4 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaP(double,double)>($d3, $d2);

     label2:
        return d4;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(d0);

        return $d1;
    }

    public void setAlpha(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: void setAlphaInternal(double)>(d0);

        return;
    }

    private void setAlphaInternal(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_ALPHA>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha> = d0;

        return;
    }

    public double getAlpha()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        return $d0;
    }

    public void setBeta(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: void setBetaInternal(double)>(d0);

        return;
    }

    private void setBetaInternal(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_BETA>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta> = d0;

        return;
    }

    public double getBeta()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d1 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        $d4 = d0 / $d1;

        $d2 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d3 = $d2 - 1.0;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d4, $d3);

        $d6 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        $d10 = $d5 / $d6;

        $d8 = neg d0;

        $d7 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        $d9 = $d8 / $d7;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d9);

        $d13 = $d10 * $d11;

        $d12 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d14 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d12);

        $d15 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d14);

        $d16 = $d13 / $d15;

        return $d16;
    }

    public double density(java.lang.Double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        java.lang.Double r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double density(double)>($d0);

        return $d1;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        return 4.9E-324;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1, $d2, d3;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d2 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d1 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        d3 = $d2 * $d1;

        goto label2;

     label1:
        d3 = 1.7976931348623157E308;

     label2:
        return d3;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d4 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d3 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        $d5 = $d4 * $d3;

        d6 = $d5 * 0.5;

        goto label2;

     label1:
        $d2 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double alpha>;

        $d1 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double beta>;

        d6 = $d2 * $d1;

     label2:
        return d6;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double getAlpha()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double getBeta()>();

        $d2 = $d0 * $d1;

        return $d2;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double getBeta()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double getAlpha()>();

        $d2 = $d1 * d0;

        $d3 = $d2 * d0;

        return $d3;
    }

    public volatile double density(java.lang.Object) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.GammaDistributionImpl r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.GammaDistributionImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.GammaDistributionImpl: double density(java.lang.Double)>($r2);

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.GammaDistributionImpl: long serialVersionUID> = -3239549463135430361L;

        <org.apache.commons.math.distribution.GammaDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
