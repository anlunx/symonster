final class com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2 extends java.lang.Object implements com.opengamma.analytics.math.function.Function
{
    final com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle val$divCurves;
    final com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface val$pureVolSurface;

    void <init>(com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle, com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2 r0;
        com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle r1;
        com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface r2;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2;

        r1 := @parameter0: com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface;

        r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle val$divCurves> = r1;

        r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface val$pureVolSurface> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient java.lang.Double evaluate(java.lang.Double[])
    {
        com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2 r0;
        java.lang.Double[] r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11;
        java.lang.Double $r2, $r3, $r7, $r8, $r9;
        com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle $r4, $r5;
        byte $b0, $b1, $b2;
        com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface $r6;
        boolean $z1;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2;

        r1 := @parameter0: java.lang.Double[];

        $r2 = r1[0];

        d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $r3 = r1[1];

        d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle val$divCurves>;

        d2 = virtualinvoke $r4.<com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle: double getF(double)>(d0);

        $r5 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle val$divCurves>;

        d3 = virtualinvoke $r5.<com.opengamma.analytics.financial.equity.variance.pricing.EquityDividendsCurvesBundle: double getD(double)>(d0);

        $b0 = d1 cmpg d3;

        if $b0 >= 0 goto label1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r9;

     label1:
        $b1 = d1 cmpl d2;

        if $b1 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $d9 = d1 - d3;

        $d8 = d2 - d3;

        d4 = $d9 / $d8;

        $r6 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface val$pureVolSurface>;

        d5 = virtualinvoke $r6.<com.opengamma.analytics.financial.model.volatility.surface.PureImpliedVolatilitySurface: double getVolatility(double,double)>(d0, d4);

        $d10 = d2 - d3;

        $d11 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>(1.0, d4, d0, d5, $z1);

        d6 = $d10 * $d11;

        $b2 = d6 cmpg 0.0;

        if $b2 >= 0 goto label4;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r8;

     label4:
        d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double impliedVolatility(double,double,double,double,boolean)>(d6, d2, d1, d0, $z1);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        return $r7;
    }

    public volatile java.lang.Object evaluate(java.lang.Object[])
    {
        com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2 r0;
        java.lang.Object[] r1;
        java.lang.Double[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Double[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.equity.variance.pricing.VolatilitySurfaceConverter$2: java.lang.Double evaluate(java.lang.Double[])>($r2);

        return $r3;
    }
}
