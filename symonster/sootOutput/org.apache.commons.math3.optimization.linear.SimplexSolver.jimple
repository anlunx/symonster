public class org.apache.commons.math3.optimization.linear.SimplexSolver extends org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer
{
    private static final double DEFAULT_EPSILON;
    private static final int DEFAULT_ULPS;
    private final double epsilon;
    private final int maxUlps;

    public void <init>()
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void <init>(double,int)>(1.0E-6, 10);

        return;
    }

    public void <init>(double, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer: void <init>()>();

        r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon> = d0;

        r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps> = i0;

        return;
    }

    private java.lang.Integer getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau r1;
        double d0, d1;
        int $i0, $i1, i3;
        byte $b2;
        java.lang.Integer r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        d1 = 0.0;

        r2 = null;

        i3 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label1:
        $i0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label3;

        d0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(0, i3);

        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label2;

        d1 = d0;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r2;
    }

    private java.lang.Integer getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int)
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24;
        java.util.ArrayList $r2, $r8, r11;
        java.lang.Object $r3, $r5, $r6;
        java.lang.Integer $r4, $r7, $r9, $r10, r13, r14, r16, r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double d0, d1, d2, d3, d4;
        java.util.Iterator r12, r15;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        i0 := @parameter1: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r11 = $r2;

        d0 = 1.7976931348623157E308;

        i17 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label01:
        $i1 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if i17 >= $i1 goto label04;

        $i13 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        $i14 = $i13 - 1;

        d1 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i17, $i14);

        d2 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i17, i0);

        $i15 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        $i16 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,int)>(d2, 0.0, $i15);

        if $i16 <= 0 goto label03;

        d3 = d1 / d2;

        i18 = staticinvoke <java.lang.Double: int compare(double,double)>(d3, d0);

        if i18 != 0 goto label02;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label03;

     label02:
        if i18 >= 0 goto label03;

        d0 = d3;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r11 = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label03:
        i17 = i17 + 1;

        goto label01;

     label04:
        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i2 != 0 goto label05;

        return null;

     label05:
        $i3 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i3 <= 1 goto label16;

        $i4 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i4 <= 0 goto label10;

        r12 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r6 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Integer) $r6;

        i19 = 0;

     label07:
        $i9 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if i19 >= $i9 goto label09;

        $i10 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getArtificialVariableOffset()>();

        i20 = i19 + $i10;

        $i11 = virtualinvoke r13.<java.lang.Integer: int intValue()>();

        d4 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i11, i20);

        $i12 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        $z4 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d4, 1.0, $i12);

        if $z4 == 0 goto label08;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>(i20);

        $z5 = virtualinvoke r13.<java.lang.Integer: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label08;

        return r13;

     label08:
        i19 = i19 + 1;

        goto label07;

     label09:
        goto label06;

     label10:
        $i5 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int getIterations()>();

        $i6 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int getMaxIterations()>();

        $i7 = $i6 / 2;

        if $i5 >= $i7 goto label16;

        r14 = null;

        i21 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        i22 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumObjectiveFunctions()>();

        $i8 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getWidth()>();

        i23 = $i8 - 1;

        r15 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.Integer) $r5;

        i24 = i22;

     label12:
        if i24 >= i23 goto label14;

        $z1 = virtualinvoke r16.<java.lang.Integer: boolean equals(java.lang.Object)>(r14);

        if $z1 != 0 goto label14;

        r17 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>(i24);

        if r17 == null goto label13;

        $z2 = virtualinvoke r17.<java.lang.Integer: boolean equals(java.lang.Object)>(r16);

        if $z2 == 0 goto label13;

        if i24 >= i21 goto label13;

        i21 = i24;

        r14 = r16;

     label13:
        i24 = i24 + 1;

        goto label12;

     label14:
        goto label11;

     label15:
        return r14;

     label16:
        $r3 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        return $r4;
    }

    protected void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau r1;
        java.lang.Integer r2, r3;
        double d0, d1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.commons.math3.optimization.linear.UnboundedSolutionException $r4;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void incrementIterationsCounter()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.lang.Integer getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau)>(r1);

        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = specialinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.lang.Integer getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau,int)>(r1, $i0);

        if r3 != null goto label1;

        $r4 = new org.apache.commons.math3.optimization.linear.UnboundedSolutionException;

        specialinvoke $r4.<org.apache.commons.math3.optimization.linear.UnboundedSolutionException: void <init>()>();

        throw $r4;

     label1:
        $i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        d0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>($i1, $i2);

        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void divideRow(int,double)>($i3, d0);

        i8 = 0;

     label2:
        $i4 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getHeight()>();

        if i8 >= $i4 goto label4;

        $i5 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        if i8 == $i5 goto label3;

        $i6 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(i8, $i6);

        $i7 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: void subtractRow(int,int,double)>(i8, $i7, d1);

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return;
    }

    protected void solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException, org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau r1;
        int $i0, $i1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException $r2;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optimization.linear.SimplexTableau;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean isOptimal()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)>(r1);

        goto label1;

     label2:
        $i1 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: int getRhsOffset()>();

        $d0 = virtualinvoke r1.<org.apache.commons.math3.optimization.linear.SimplexTableau: double getEntry(int,int)>(0, $i1);

        $d1 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, 0.0, $d1);

        if $z1 != 0 goto label3;

        $r2 = new org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException;

        specialinvoke $r2.<org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    public org.apache.commons.math3.optimization.PointValuePair doOptimize() throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.optimization.linear.UnboundedSolutionException, org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optimization.linear.SimplexSolver r0;
        org.apache.commons.math3.optimization.linear.SimplexTableau $r2;
        org.apache.commons.math3.optimization.linear.LinearObjectiveFunction $r3;
        java.util.Collection $r4;
        org.apache.commons.math3.optimization.GoalType $r5;
        boolean $z0, $z1;
        int $i0;
        double $d0;
        org.apache.commons.math3.optimization.PointValuePair $r6;

        r0 := @this: org.apache.commons.math3.optimization.linear.SimplexSolver;

        $r2 = new org.apache.commons.math3.optimization.linear.SimplexTableau;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: org.apache.commons.math3.optimization.linear.LinearObjectiveFunction getFunction()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: java.util.Collection getConstraints()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: boolean restrictToNonNegative()>();

        $d0 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: double epsilon>;

        $i0 = r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: int maxUlps>;

        specialinvoke $r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: void <init>(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optimization.GoalType,boolean,double,int)>($r3, $r4, $r5, $z0, $d0, $i0);

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau)>($r2);

        virtualinvoke $r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: void dropPhase1Objective()>();

     label1:
        $z1 = virtualinvoke $r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: boolean isOptimal()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optimization.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau)>($r2);

        goto label1;

     label2:
        $r6 = virtualinvoke $r2.<org.apache.commons.math3.optimization.linear.SimplexTableau: org.apache.commons.math3.optimization.PointValuePair getSolution()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optimization.linear.SimplexSolver: int DEFAULT_ULPS> = 10;

        <org.apache.commons.math3.optimization.linear.SimplexSolver: double DEFAULT_EPSILON> = 1.0E-6;

        return;
    }
}
