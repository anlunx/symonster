public class org.apache.commons.math.optimization.general.GaussNewtonOptimizer extends org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
{
    private final boolean useLU;

    public void <init>(boolean)
    {
        org.apache.commons.math.optimization.general.GaussNewtonOptimizer r0;
        boolean z0;

        r0 := @this: org.apache.commons.math.optimization.general.GaussNewtonOptimizer;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void <init>()>();

        r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: boolean useLU> = z0;

        return;
    }

    public org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.general.GaussNewtonOptimizer r0;
        org.apache.commons.math.optimization.VectorialPointValuePair r1, $r5, r21;
        double[] r2, r4, $r6, $r7, $r11, $r14, $r15, $r16, r22, r26;
        double[][] r3, $r13;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, $i13;
        org.apache.commons.math.linear.BlockRealMatrix $r8;
        boolean $z0, z1;
        org.apache.commons.math.linear.QRDecompositionImpl $r9;
        org.apache.commons.math.optimization.VectorialConvergenceChecker $r10;
        org.apache.commons.math.linear.LUDecompositionImpl $r12;
        org.apache.commons.math.linear.InvalidMatrixException $r17;
        org.apache.commons.math.optimization.OptimizationException $r18;
        java.lang.Object[] $r19;
        org.apache.commons.math.exception.util.LocalizedFormats $r20;
        org.apache.commons.math.linear.DecompositionSolver $r24;

        r0 := @this: org.apache.commons.math.optimization.general.GaussNewtonOptimizer;

        r21 = null;

        z1 = 0;

     label01:
        if z1 != 0 goto label17;

        virtualinvoke r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: void incrementIterationsCounter()>();

        r1 = r21;

        virtualinvoke r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: void updateResidualsAndCost()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: void updateJacobian()>();

        $r5 = new org.apache.commons.math.optimization.VectorialPointValuePair;

        $r7 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] point>;

        $r6 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] objective>;

        specialinvoke $r5.<org.apache.commons.math.optimization.VectorialPointValuePair: void <init>(double[],double[])>($r7, $r6);

        r21 = $r5;

        $i0 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        r2 = newarray (double)[$i0];

        $i2 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        $i1 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        r3 = newmultiarray (double)[$i2][$i1];

        i8 = 0;

     label02:
        $i3 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int rows>;

        if i8 >= $i3 goto label09;

        $r13 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[][] jacobian>;

        r22 = $r13[i8];

        $r14 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] residualsWeights>;

        d17 = $r14[i8];

        $r15 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] objective>;

        $d7 = $r15[i8];

        $r16 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] targetValues>;

        $d6 = $r16[i8];

        d0 = $d7 - $d6;

        d1 = d17 * d0;

        i9 = 0;

     label03:
        $i5 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        if i9 >= $i5 goto label04;

        $d15 = r2[i9];

        $d13 = r22[i9];

        $d14 = d1 * $d13;

        $d16 = $d15 + $d14;

        r2[i9] = $d16;

        i9 = i9 + 1;

        goto label03;

     label04:
        i10 = 0;

     label05:
        $i6 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        if i10 >= $i6 goto label08;

        r4 = r3[i10];

        $d8 = r22[i10];

        d2 = d17 * $d8;

        i11 = 0;

     label06:
        $i7 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        if i11 >= $i7 goto label07;

        $d11 = r4[i11];

        $d9 = r22[i11];

        $d10 = d2 * $d9;

        $d12 = $d11 + $d10;

        r4[i11] = $d12;

        i11 = i11 + 1;

        goto label06;

     label07:
        i10 = i10 + 1;

        goto label05;

     label08:
        i8 = i8 + 1;

        goto label02;

     label09:
        $r8 = new org.apache.commons.math.linear.BlockRealMatrix;

        specialinvoke $r8.<org.apache.commons.math.linear.BlockRealMatrix: void <init>(double[][])>(r3);

        $z0 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: boolean useLU>;

        if $z0 == 0 goto label10;

        $r12 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r12.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r8);

        $r24 = virtualinvoke $r12.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        goto label11;

     label10:
        $r9 = new org.apache.commons.math.linear.QRDecompositionImpl;

        specialinvoke $r9.<org.apache.commons.math.linear.QRDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r8);

        $r24 = virtualinvoke $r9.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

     label11:
        r26 = interfaceinvoke $r24.<org.apache.commons.math.linear.DecompositionSolver: double[] solve(double[])>(r2);

        i12 = 0;

     label12:
        $i13 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int cols>;

        if i12 >= $i13 goto label13;

        $r11 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: double[] point>;

        $d4 = $r11[i12];

        $d3 = r26[i12];

        $d5 = $d4 + $d3;

        $r11[i12] = $d5;

        i12 = i12 + 1;

        goto label12;

     label13:
        goto label15;

     label14:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.math.optimization.OptimizationException;

        $r20 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNABLE_TO_SOLVE_SINGULAR_PROBLEM>;

        $r19 = newarray (java.lang.Object)[0];

        specialinvoke $r18.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r18;

     label15:
        if r1 == null goto label16;

        $r10 = r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker>;

        $i4 = virtualinvoke r0.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: int getIterations()>();

        z1 = interfaceinvoke $r10.<org.apache.commons.math.optimization.VectorialConvergenceChecker: boolean converged(int,org.apache.commons.math.optimization.VectorialPointValuePair,org.apache.commons.math.optimization.VectorialPointValuePair)>($i4, r1, $r5);

     label16:
        goto label01;

     label17:
        return r21;

        catch org.apache.commons.math.linear.InvalidMatrixException from label09 to label13 with label14;
    }
}
