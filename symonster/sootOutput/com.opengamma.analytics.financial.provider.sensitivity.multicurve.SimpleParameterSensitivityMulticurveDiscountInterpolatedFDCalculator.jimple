public class com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator extends java.lang.Object
{
    private final com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator;
    private final double _shift;

    public void <init>(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor, double)
    {
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r1;
        double d0;

        r0 := @this: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Calculator");

        r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator> = r1;

        r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift> = d0;

        return;
    }

    public com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity calculateSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount)
    {
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount r2, r84, r88, r101, r105, r118, r122;
        java.util.Set r3, r92, r109;
        java.lang.Double r4, r85, r89, r90, r102, r106, r107, r119, r123;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity $r5, r75;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r6, $r12, $r19, $r21, $r28, $r29, $r35, $r42, $r44, $r51, $r52, $r58, $r65, $r67, $r74;
        com.opengamma.analytics.math.curve.DoublesCurve $r7, $r8, $r30, $r31, $r53, $r54;
        double[] $r9, $r11, $r16, $r20, $r25, $r32, $r34, $r39, $r43, $r48, $r55, $r57, $r62, $r66, $r71, r81, r82, r86, r98, r99, r103, r115, r116, r120;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r33, $r56;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve $r13, $r22, $r36, $r45, $r59, $r68, r79, r96, r113;
        java.lang.String $r14, $r23, $r37, $r46, $r60, $r69, r91, r108, r124;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r15, $r24, $r38, $r47, $r61, $r70, r80, r97, r114;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r17, $r26, $r40, $r49, $r63, $r72;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor $r18, $r27, $r41, $r50, $r64, $r73;
        java.util.Iterator r76, r93, r110;
        com.opengamma.util.money.Currency r77;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r78, r95, r112;
        int i0, i1, i2, i3, i4, i5;
        com.opengamma.analytics.financial.instrument.index.IndexON r94;
        com.opengamma.analytics.financial.instrument.index.IborIndex r111;

        r0 := @this: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount;

        $r5 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity;

        specialinvoke $r5.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: void <init>()>();

        r75 = $r5;

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.util.Set getCurrencies()>();

        r76 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r76.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r52 = interfaceinvoke r76.<java.util.Iterator: java.lang.Object next()>();

        r77 = (com.opengamma.util.money.Currency) $r52;

        r78 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(com.opengamma.util.money.Currency)>(r77);

        $z7 = r78 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Curve should be a YieldCurve");

        r79 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve) r78;

        $r53 = virtualinvoke r79.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z8 = $r53 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Yield curve should be based on InterpolatedDoublesCurve");

        $r54 = virtualinvoke r79.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        r80 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r54;

        $r55 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        i0 = lengthof $r55;

        r81 = newarray (double)[i0];

        i1 = 0;

     label02:
        if i1 >= i0 goto label03;

        $r57 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r58 = virtualinvoke $r57.<java.lang.Object: java.lang.Object clone()>();

        r82 = (double[]) $r58;

        $d27 = r82[i1];

        $d26 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d28 = $d27 + $d26;

        r82[i1] = $d28;

        $r59 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r60 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r61 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r62 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r63 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r61.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r62, r82, $r63, 1);

        specialinvoke $r59.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r60, $r61);

        r84 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withDiscountFactor(com.opengamma.util.money.Currency,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r77, $r59);

        $r64 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r65 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r64, r84);

        r85 = (java.lang.Double) $r65;

        $r66 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r67 = virtualinvoke $r66.<java.lang.Object: java.lang.Object clone()>();

        r86 = (double[]) $r67;

        $d30 = r86[i1];

        $d29 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d31 = $d30 - $d29;

        r86[i1] = $d31;

        $r68 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r69 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r70 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r71 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r72 = virtualinvoke r80.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r70.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r71, r86, $r72, 1);

        specialinvoke $r68.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r69, $r70);

        r88 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withDiscountFactor(com.opengamma.util.money.Currency,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r77, $r68);

        $r73 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r74 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r73, r88);

        r89 = (java.lang.Double) $r74;

        $d32 = virtualinvoke r85.<java.lang.Double: double doubleValue()>();

        $d33 = virtualinvoke r89.<java.lang.Double: double doubleValue()>();

        $d34 = $d32 - $d33;

        r90 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d34);

        $d35 = virtualinvoke r90.<java.lang.Double: double doubleValue()>();

        $d36 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d37 = 2.0 * $d36;

        $d38 = $d35 / $d37;

        r81[i1] = $d38;

        i1 = i1 + 1;

        goto label02;

     label03:
        r91 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.lang.String getName(com.opengamma.util.money.Currency)>(r77);

        $r56 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r56.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r81);

        r75 = virtualinvoke r75.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity plus(java.lang.String,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r91, $r56);

        goto label01;

     label04:
        r92 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.util.Set getIndexesON()>();

        r93 = interfaceinvoke r92.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r93.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r29 = interfaceinvoke r93.<java.util.Iterator: java.lang.Object next()>();

        r94 = (com.opengamma.analytics.financial.instrument.index.IndexON) $r29;

        r95 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(com.opengamma.analytics.financial.instrument.index.IndexON)>(r94);

        $z5 = r95 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "Curve should be a YieldCurve");

        r96 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve) r95;

        $r30 = virtualinvoke r96.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z6 = $r30 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Yield curve should be based on InterpolatedDoublesCurve");

        $r31 = virtualinvoke r96.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        r97 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r31;

        $r32 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        i2 = lengthof $r32;

        r98 = newarray (double)[i2];

        i3 = 0;

     label06:
        if i3 >= i2 goto label07;

        $r34 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r35 = virtualinvoke $r34.<java.lang.Object: java.lang.Object clone()>();

        r99 = (double[]) $r35;

        $d14 = r99[i3];

        $d13 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d15 = $d14 + $d13;

        r99[i3] = $d15;

        $r36 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r37 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r38 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r39 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r40 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r38.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r39, r99, $r40, 1);

        specialinvoke $r36.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r37, $r38);

        r101 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withForward(com.opengamma.analytics.financial.instrument.index.IndexON,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r94, $r36);

        $r41 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r42 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r41, r101);

        r102 = (java.lang.Double) $r42;

        $r43 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r44 = virtualinvoke $r43.<java.lang.Object: java.lang.Object clone()>();

        r103 = (double[]) $r44;

        $d17 = r103[i3];

        $d16 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d18 = $d17 - $d16;

        r103[i3] = $d18;

        $r45 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r46 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r47 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r48 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r49 = virtualinvoke r97.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r47.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r48, r103, $r49, 1);

        specialinvoke $r45.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r46, $r47);

        r105 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withForward(com.opengamma.analytics.financial.instrument.index.IndexON,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r94, $r45);

        $r50 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r51 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r50, r105);

        r106 = (java.lang.Double) $r51;

        $d19 = virtualinvoke r102.<java.lang.Double: double doubleValue()>();

        $d20 = virtualinvoke r106.<java.lang.Double: double doubleValue()>();

        $d21 = $d19 - $d20;

        r107 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d21);

        $d22 = virtualinvoke r107.<java.lang.Double: double doubleValue()>();

        $d23 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d24 = 2.0 * $d23;

        $d25 = $d22 / $d24;

        r98[i3] = $d25;

        i3 = i3 + 1;

        goto label06;

     label07:
        r108 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.lang.String getName(com.opengamma.analytics.financial.instrument.index.IndexON)>(r94);

        $r33 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r98);

        r75 = virtualinvoke r75.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity plus(java.lang.String,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r108, $r33);

        goto label05;

     label08:
        r109 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.util.Set getIndexesIbor()>();

        r110 = interfaceinvoke r109.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r6 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>();

        r111 = (com.opengamma.analytics.financial.instrument.index.IborIndex) $r6;

        r112 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(com.opengamma.analytics.financial.instrument.index.IborIndex)>(r111);

        $z3 = r112 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "Curve should be a YieldCurve");

        r113 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve) r112;

        $r7 = virtualinvoke r113.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z4 = $r7 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "Yield curve should be based on InterpolatedDoublesCurve");

        $r8 = virtualinvoke r113.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        r114 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r8;

        $r9 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        i4 = lengthof $r9;

        r115 = newarray (double)[i4];

        i5 = 0;

     label10:
        if i5 >= i4 goto label11;

        $r11 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();

        r116 = (double[]) $r12;

        $d1 = r116[i5];

        $d0 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d2 = $d1 + $d0;

        r116[i5] = $d2;

        $r13 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r14 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r15 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r16 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r17 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r15.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r16, r116, $r17, 1);

        specialinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r14, $r15);

        r118 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withForward(com.opengamma.analytics.financial.instrument.index.IborIndex,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r111, $r13);

        $r18 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r19 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r18, r118);

        r119 = (java.lang.Double) $r19;

        $r20 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.Object clone()>();

        r120 = (double[]) $r21;

        $d4 = r120[i5];

        $d3 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d5 = $d4 - $d3;

        r120[i5] = $d5;

        $r22 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r23 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r24 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        $r25 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r26 = virtualinvoke r114.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        specialinvoke $r24.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r25, r120, $r26, 1);

        specialinvoke $r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>($r23, $r24);

        r122 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount withForward(com.opengamma.analytics.financial.instrument.index.IborIndex,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r111, $r22);

        $r27 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor _valueCalculator>;

        $r28 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>($r27, r122);

        r123 = (java.lang.Double) $r28;

        $d6 = virtualinvoke r119.<java.lang.Double: double doubleValue()>();

        $d7 = virtualinvoke r123.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 - $d7;

        r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $d9 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d10 = r0.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivityMulticurveDiscountInterpolatedFDCalculator: double _shift>;

        $d11 = 2.0 * $d10;

        $d12 = $d9 / $d11;

        r115[i5] = $d12;

        i5 = i5 + 1;

        goto label10;

     label11:
        r124 = virtualinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderDiscount: java.lang.String getName(com.opengamma.analytics.financial.instrument.index.IborIndex)>(r111);

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r115);

        r75 = virtualinvoke r75.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimpleParameterSensitivity plus(java.lang.String,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r124, $r10);

        goto label09;

     label12:
        return r75;
    }
}
