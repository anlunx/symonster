public class org.apache.commons.math.random.ValueServer extends java.lang.Object
{
    public static final int DIGEST_MODE;
    public static final int REPLAY_MODE;
    public static final int UNIFORM_MODE;
    public static final int EXPONENTIAL_MODE;
    public static final int GAUSSIAN_MODE;
    public static final int CONSTANT_MODE;
    private int mode;
    private java.net.URL valuesFileURL;
    private double mu;
    private double sigma;
    private org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution;
    private java.io.BufferedReader filePointer;
    private final org.apache.commons.math.random.RandomData randomData;

    public void <init>()
    {
        org.apache.commons.math.random.ValueServer r0;
        org.apache.commons.math.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.ValueServer: int mode> = 5;

        r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL> = null;

        r0.<org.apache.commons.math.random.ValueServer: double mu> = 0.0;

        r0.<org.apache.commons.math.random.ValueServer: double sigma> = 0.0;

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution> = null;

        r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer> = null;

        $r1 = new org.apache.commons.math.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.RandomData randomData> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math.random.RandomData)
    {
        org.apache.commons.math.random.ValueServer r0;
        org.apache.commons.math.random.RandomData r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        r1 := @parameter0: org.apache.commons.math.random.RandomData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.ValueServer: int mode> = 5;

        r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL> = null;

        r0.<org.apache.commons.math.random.ValueServer: double mu> = 0.0;

        r0.<org.apache.commons.math.random.ValueServer: double sigma> = 0.0;

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution> = null;

        r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer> = null;

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.RandomData randomData> = r1;

        return;
    }

    public double getNext() throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.IllegalStateException $r10;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $i0 = r0.<org.apache.commons.math.random.ValueServer: int mode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math.random.ValueServer: double getNextDigest()>();

        return $d0;

     label2:
        $d5 = specialinvoke r0.<org.apache.commons.math.random.ValueServer: double getNextReplay()>();

        return $d5;

     label3:
        $d4 = specialinvoke r0.<org.apache.commons.math.random.ValueServer: double getNextUniform()>();

        return $d4;

     label4:
        $d3 = specialinvoke r0.<org.apache.commons.math.random.ValueServer: double getNextExponential()>();

        return $d3;

     label5:
        $d2 = specialinvoke r0.<org.apache.commons.math.random.ValueServer: double getNextGaussian()>();

        return $d2;

     label6:
        $d1 = r0.<org.apache.commons.math.random.ValueServer: double mu>;

        return $d1;

     label7:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNKNOWN_MODE>;

        $r1 = newarray (java.lang.Object)[13];

        $i1 = r0.<org.apache.commons.math.random.ValueServer: int mode>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r3;

        $r1[1] = "DIGEST_MODE";

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[2] = $r4;

        $r1[3] = "REPLAY_MODE";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[4] = $r5;

        $r1[5] = "UNIFORM_MODE";

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[6] = $r6;

        $r1[7] = "EXPONENTIAL_MODE";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r1[8] = $r7;

        $r1[9] = "GAUSSIAN_MODE";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[10] = $r8;

        $r1[11] = "CONSTANT_MODE";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[12] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r10;
    }

    public void fill(double[]) throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        double[] r1;
        int $i0, i1;
        double $d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        r1 := @parameter0: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.random.ValueServer: double getNext()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public double[] fill(int) throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        int i0, i1;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        i0 := @parameter0: int;

        r1 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.random.ValueServer: double getNext()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void computeDistribution() throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        org.apache.commons.math.random.EmpiricalDistributionImpl $r1;
        java.net.URL $r2;
        org.apache.commons.math.random.EmpiricalDistribution $r3;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = new org.apache.commons.math.random.EmpiricalDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.random.EmpiricalDistributionImpl: void <init>()>();

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution> = $r1;

        $r3 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $r2 = r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL>;

        interfaceinvoke $r3.<org.apache.commons.math.random.EmpiricalDistribution: void load(java.net.URL)>($r2);

        return;
    }

    public void computeDistribution(int) throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        int i0;
        org.apache.commons.math.random.EmpiricalDistributionImpl $r1;
        java.net.URL $r2;
        org.apache.commons.math.random.EmpiricalDistribution $r3, $r4, $r6;
        org.apache.commons.math.stat.descriptive.StatisticalSummary $r5, $r7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.random.EmpiricalDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.random.EmpiricalDistributionImpl: void <init>(int)>(i0);

        r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution> = $r1;

        $r3 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $r2 = r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL>;

        interfaceinvoke $r3.<org.apache.commons.math.random.EmpiricalDistribution: void load(java.net.URL)>($r2);

        $r4 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math.random.EmpiricalDistribution: org.apache.commons.math.stat.descriptive.StatisticalSummary getSampleStats()>();

        $d0 = interfaceinvoke $r5.<org.apache.commons.math.stat.descriptive.StatisticalSummary: double getMean()>();

        r0.<org.apache.commons.math.random.ValueServer: double mu> = $d0;

        $r6 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.math.random.EmpiricalDistribution: org.apache.commons.math.stat.descriptive.StatisticalSummary getSampleStats()>();

        $d1 = interfaceinvoke $r7.<org.apache.commons.math.stat.descriptive.StatisticalSummary: double getStandardDeviation()>();

        r0.<org.apache.commons.math.random.ValueServer: double sigma> = $d1;

        return;
    }

    public int getMode()
    {
        org.apache.commons.math.random.ValueServer r0;
        int $i0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $i0 = r0.<org.apache.commons.math.random.ValueServer: int mode>;

        return $i0;
    }

    public void setMode(int)
    {
        org.apache.commons.math.random.ValueServer r0;
        int i0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.random.ValueServer: int mode> = i0;

        return;
    }

    public java.net.URL getValuesFileURL()
    {
        org.apache.commons.math.random.ValueServer r0;
        java.net.URL $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL>;

        return $r1;
    }

    public void setValuesFileURL(java.lang.String) throws java.net.MalformedURLException
    {
        org.apache.commons.math.random.ValueServer r0;
        java.lang.String r1;
        java.net.URL $r2;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL> = $r2;

        return;
    }

    public void setValuesFileURL(java.net.URL)
    {
        org.apache.commons.math.random.ValueServer r0;
        java.net.URL r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        r1 := @parameter0: java.net.URL;

        r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL> = r1;

        return;
    }

    public org.apache.commons.math.random.EmpiricalDistribution getEmpiricalDistribution()
    {
        org.apache.commons.math.random.ValueServer r0;
        org.apache.commons.math.random.EmpiricalDistribution $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        return $r1;
    }

    public void resetReplayFile() throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        java.io.BufferedReader $r2, $r3, $r5;
        java.io.IOException $r4;
        java.io.InputStreamReader $r6;
        java.net.URL $r7;
        java.io.InputStream $r8;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r2 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer> = null;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = new java.io.BufferedReader;

        $r6 = new java.io.InputStreamReader;

        $r7 = r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL>;

        $r8 = virtualinvoke $r7.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8);

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);

        r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer> = $r5;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void closeReplayFile() throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        java.io.BufferedReader $r1, $r2;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

        r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer> = null;

     label1:
        return;
    }

    public double getMu()
    {
        org.apache.commons.math.random.ValueServer r0;
        double $d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $d0 = r0.<org.apache.commons.math.random.ValueServer: double mu>;

        return $d0;
    }

    public void setMu(double)
    {
        org.apache.commons.math.random.ValueServer r0;
        double d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.random.ValueServer: double mu> = d0;

        return;
    }

    public double getSigma()
    {
        org.apache.commons.math.random.ValueServer r0;
        double $d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $d0 = r0.<org.apache.commons.math.random.ValueServer: double sigma>;

        return $d0;
    }

    public void setSigma(double)
    {
        org.apache.commons.math.random.ValueServer r0;
        double d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.random.ValueServer: double sigma> = d0;

        return;
    }

    private double getNextDigest()
    {
        org.apache.commons.math.random.ValueServer r0;
        org.apache.commons.math.random.EmpiricalDistribution $r1, $r5, $r7;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.IllegalStateException $r4;
        java.util.List $r6;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math.random.EmpiricalDistribution: java.util.List getBinStats()>();

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIGEST_NOT_INITIALIZED>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label2:
        $r7 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.EmpiricalDistribution empiricalDistribution>;

        $d0 = interfaceinvoke $r7.<org.apache.commons.math.random.EmpiricalDistribution: double getNextValue()>();

        return $d0;
    }

    private double getNextReplay() throws java.io.IOException
    {
        org.apache.commons.math.random.ValueServer r0;
        java.io.BufferedReader $r1, $r2, $r5;
        java.lang.String $r3, $r6, r11;
        java.lang.Double $r4;
        double $d0;
        java.lang.Object[] $r7;
        java.net.URL $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.io.EOFException $r10;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.commons.math.random.ValueServer: void resetReplayFile()>();

     label1:
        $r2 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        r11 = $r3;

        if $r3 != null goto label2;

        virtualinvoke r0.<org.apache.commons.math.random.ValueServer: void closeReplayFile()>();

        virtualinvoke r0.<org.apache.commons.math.random.ValueServer: void resetReplayFile()>();

        $r5 = r0.<org.apache.commons.math.random.ValueServer: java.io.BufferedReader filePointer>;

        $r6 = virtualinvoke $r5.<java.io.BufferedReader: java.lang.String readLine()>();

        r11 = $r6;

        if $r6 != null goto label2;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats URL_CONTAINS_NO_DATA>;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = r0.<org.apache.commons.math.random.ValueServer: java.net.URL valuesFileURL>;

        $r7[0] = $r8;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.io.EOFException createEOFException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r7);

        throw $r10;

     label2:
        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r11);

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    private double getNextUniform()
    {
        org.apache.commons.math.random.ValueServer r0;
        double $d0, $d1, $d2;
        org.apache.commons.math.random.RandomData $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.RandomData randomData>;

        $d0 = r0.<org.apache.commons.math.random.ValueServer: double mu>;

        $d1 = 2.0 * $d0;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomData: double nextUniform(double,double)>(0.0, $d1);

        return $d2;
    }

    private double getNextExponential()
    {
        org.apache.commons.math.random.ValueServer r0;
        double $d0, $d1;
        org.apache.commons.math.random.RandomData $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.RandomData randomData>;

        $d0 = r0.<org.apache.commons.math.random.ValueServer: double mu>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomData: double nextExponential(double)>($d0);

        return $d1;
    }

    private double getNextGaussian()
    {
        org.apache.commons.math.random.ValueServer r0;
        double $d0, $d1, $d2;
        org.apache.commons.math.random.RandomData $r1;

        r0 := @this: org.apache.commons.math.random.ValueServer;

        $r1 = r0.<org.apache.commons.math.random.ValueServer: org.apache.commons.math.random.RandomData randomData>;

        $d1 = r0.<org.apache.commons.math.random.ValueServer: double mu>;

        $d0 = r0.<org.apache.commons.math.random.ValueServer: double sigma>;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math.random.RandomData: double nextGaussian(double,double)>($d1, $d0);

        return $d2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.random.ValueServer: int CONSTANT_MODE> = 5;

        <org.apache.commons.math.random.ValueServer: int GAUSSIAN_MODE> = 4;

        <org.apache.commons.math.random.ValueServer: int EXPONENTIAL_MODE> = 3;

        <org.apache.commons.math.random.ValueServer: int UNIFORM_MODE> = 2;

        <org.apache.commons.math.random.ValueServer: int REPLAY_MODE> = 1;

        <org.apache.commons.math.random.ValueServer: int DIGEST_MODE> = 0;

        return;
    }
}
