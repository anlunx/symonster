public class com.opengamma.analytics.math.minimization.UncoupledParameterTransforms extends java.lang.Object implements com.opengamma.analytics.math.minimization.NonLinearParameterTransforms
{
    private final com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues;
    private final com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms;
    private final boolean[] _freeParameters;
    private final int _nMP;
    private final int _nFP;

    public void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.minimization.ParameterLimitsTransform[], java.util.BitSet)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] r2;
        java.util.BitSet r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        boolean[] $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[];

        r3 := @parameter2: java.util.BitSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null start values");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String)>(r2, "must specify transforms");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "must specify what is fixed (even if none)");

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP> = $i0;

        $i2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r7 = newarray (java.lang.Object)[2];

        $i3 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[0] = $r8;

        $i4 = lengthof r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[1] = $r9;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "Have {}-dimensional start value but {} transforms", $r7);

        $i5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        $r10 = newarray (boolean)[$i5];

        r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters> = $r10;

        i11 = 0;

     label03:
        $i12 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i11 >= $i12 goto label08;

        $i9 = virtualinvoke r3.<java.util.BitSet: int size()>();

        if i11 >= $i9 goto label06;

        $r12 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $i10 = i11;

        $z0 = virtualinvoke r3.<java.util.BitSet: boolean get(int)>(i11);

        if $z0 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $r12[$i10] = $z2;

        goto label07;

     label06:
        $r11 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $r11[i11] = 1;

     label07:
        i11 = i11 + 1;

        goto label03;

     label08:
        i13 = virtualinvoke r3.<java.util.BitSet: int cardinality()>();

        $i6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i13 >= $i6 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "all parameters are fixed");

        $i7 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        $i8 = $i7 - i13;

        r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP> = $i8;

        r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues> = r1;

        r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms> = r2;

        return;
    }

    public int getNumberOfModelParameters()
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        $i0 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        return $i0;
    }

    public int getNumberOfFittingParameters()
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        $i0 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        return $i0;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D transform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r4;
        double[] r2;
        int $i0, $i1, $i2, i3, i4, $i5;
        boolean[] $r5;
        boolean $z0, $z1;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r6;
        int[] $r7;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r8;
        java.lang.Double $r9;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function parameters");

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "functionParameters wrong dimension");

        $i2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        r2 = newarray (double)[$i2];

        i3 = 0;

        i4 = 0;

     label3:
        $i5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i3 >= $i5 goto label5;

        $r5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $z0 = $r5[i3];

        if $z0 == 0 goto label4;

        $r6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $r8 = $r6[i3];

        $r7 = newarray (int)[1];

        $r7[0] = i3;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d1 = interfaceinvoke $r8.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double transform(double)>($d0);

        r2[i4] = $d1;

        i4 = i4 + 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        return $r4;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D inverseTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r4, $r7;
        double[] r2;
        int $i0, $i1, $i2, i3, i4, $i5;
        boolean[] $r5;
        boolean $z0, $z1;
        int[] $r6, $r10;
        java.lang.Double $r8, $r12;
        double $d0, $d1, $d2;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r9;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r11;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "fitting parameters");

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "fittingParameter wrong dimension");

        $i2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        r2 = newarray (double)[$i2];

        i3 = 0;

        i4 = 0;

     label3:
        $i5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i3 >= $i5 goto label6;

        $r5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $z0 = $r5[i3];

        if $z0 == 0 goto label4;

        $r9 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $r11 = $r9[i3];

        $r10 = newarray (int)[1];

        $r10[0] = i4;

        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        $d1 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d2 = interfaceinvoke $r11.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double inverseTransform(double)>($d1);

        r2[i3] = $d2;

        i4 = i4 + 1;

        goto label5;

     label4:
        $r7 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues>;

        $r6 = newarray (int)[1];

        $r6[0] = i3;

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r6);

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        r2[i3] = $d0;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        return $r4;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D jacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        double[][] r2;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r4;
        boolean[] $r5;
        boolean $z0, $z1;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r6;
        int[] $r7;
        double[] $r8;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r9;
        java.lang.Double $r10;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function parameters");

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "functionParameters wrong dimension");

        $i3 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        $i2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        r2 = newmultiarray (double)[$i3][$i2];

        i4 = 0;

        i5 = 0;

     label3:
        $i6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i4 >= $i6 goto label5;

        $r5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $z0 = $r5[i4];

        if $z0 == 0 goto label4;

        $r8 = r2[i5];

        $r6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $r9 = $r6[i4];

        $r7 = newarray (int)[1];

        $r7[0] = i4;

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d0 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d1 = interfaceinvoke $r9.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double transformGradient(double)>($d0);

        $r8[i4] = $d1;

        i5 = i5 + 1;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r2);

        return $r4;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D inverseJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        double[][] r2;
        int[] r3, r4, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, i11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r7;
        double[] $r9;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform $r10;
        java.lang.Double $r11;
        double $d0, $d1;
        boolean[] $r12;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "fitting parameters");

        $i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        if $i1 != $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "fitting parameters wrong dimension");

        $i4 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        $i3 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nFP>;

        r2 = newmultiarray (double)[$i4][$i3];

        $i5 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        r3 = newarray (int)[$i5];

        $i6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        r4 = newarray (int)[$i6];

        i7 = 0;

        i8 = 0;

     label3:
        $i9 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: int _nMP>;

        if i8 >= $i9 goto label5;

        $r12 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $z0 = $r12[i8];

        if $z0 == 0 goto label4;

        r3[i7] = i8;

        r4[i7] = i7;

        i7 = i7 + 1;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        i10 = 0;

     label6:
        if i10 >= i7 goto label7;

        i11 = r3[i10];

        i0 = r4[i10];

        $r9 = r2[i11];

        $r7 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $r10 = $r7[i11];

        $r8 = newarray (int)[1];

        $r8[0] = i0;

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r8);

        $d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d1 = interfaceinvoke $r10.<com.opengamma.analytics.math.minimization.ParameterLimitsTransform: double inverseTransformGradient(double)>($d0);

        $r9[i0] = $d1;

        i10 = i10 + 1;

        goto label6;

     label7:
        $r6 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D noCopy(double[][])>(r2);

        return $r6;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0;
        boolean[] $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r3;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r1);

        i8 = $i1 + $i2;

        $i3 = 31 * i8;

        $r2 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues>;

        $i4 = virtualinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int hashCode()>();

        i9 = $i3 + $i4;

        $i5 = 31 * i9;

        $r3 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        i10 = $i5 + $i6;

        return i10;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        boolean[] $r5, $r6;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r8;
        com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.minimization.UncoupledParameterTransforms) r1;

        $r6 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $r5 = r2.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: boolean[] _freeParameters>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r6, $r5);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues>;

        $r7 = r2.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D _startValues>;

        $z1 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r10 = r0.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $r9 = r2.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.minimization.ParameterLimitsTransform[] _transforms>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r10, $r9);

        return $z2;
    }
}
