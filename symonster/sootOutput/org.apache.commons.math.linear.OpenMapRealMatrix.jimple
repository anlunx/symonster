public class org.apache.commons.math.linear.OpenMapRealMatrix extends org.apache.commons.math.linear.AbstractRealMatrix implements org.apache.commons.math.linear.SparseRealMatrix, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int rows;
    private final int columns;
    private final org.apache.commons.math.util.OpenIntToDoubleHashMap entries;

    public void <init>(int, int)
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void <init>(int,int)>(i0, i1);

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows> = i0;

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns> = i1;

        $r1 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math.linear.OpenMapRealMatrix)
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, r1;
        int $i0, $i1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealMatrix;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void <init>()>();

        $i0 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows>;

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows> = $i0;

        $i1 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns> = $i1;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        $r3 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math.util.OpenIntToDoubleHashMap)>($r3);

        r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        return;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix copy()
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        $r1 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        specialinvoke $r1.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math.linear.OpenMapRealMatrix)>(r0);

        return $r1;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix createMatrix(int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        specialinvoke $r1.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(int,int)>(i0, i1);

        return $r1;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        return $i0;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix add(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r3, $r4, $r7;
        org.apache.commons.math.linear.RealMatrix r1, $r6;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math.linear.OpenMapRealMatrix) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix add(org.apache.commons.math.linear.OpenMapRealMatrix)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix add(org.apache.commons.math.linear.RealMatrix)>(r1);

        $r7 = (org.apache.commons.math.linear.OpenMapRealMatrix) $r6;

        return $r7;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix add(org.apache.commons.math.linear.OpenMapRealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, r1, $r4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        $r4 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math.linear.OpenMapRealMatrix)>(r0);

        $r5 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i3 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i0 = $i2 / $i3;

        $i4 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i5 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        $i6 = i0 * $i5;

        i1 = $i4 - $i6;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: double getEntry(int,int)>(i0, i1);

        $d1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d2 = $d0 + $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void setEntry(int,int,double)>(i0, i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix subtract(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r3, $r4, $r7;
        org.apache.commons.math.linear.RealMatrix r1, $r6;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

     label1:
        $r3 = (org.apache.commons.math.linear.OpenMapRealMatrix) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix subtract(org.apache.commons.math.linear.OpenMapRealMatrix)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix subtract(org.apache.commons.math.linear.RealMatrix)>(r1);

        $r7 = (org.apache.commons.math.linear.OpenMapRealMatrix) $r6;

        return $r7;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix subtract(org.apache.commons.math.linear.OpenMapRealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, r1, $r4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        $r4 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(org.apache.commons.math.linear.OpenMapRealMatrix)>(r0);

        $r5 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i3 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i0 = $i2 / $i3;

        $i4 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i5 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        $i6 = i0 * $i5;

        i1 = $i4 - $i6;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: double getEntry(int,int)>(i0, i1);

        $d1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d2 = $d0 - $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void setEntry(int,int,double)>(i0, i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r5, $r6;
        org.apache.commons.math.linear.RealMatrix r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r4;
        double d0, $d1, $d2;
        java.lang.ClassCastException $r7;
        org.apache.commons.math.linear.BlockRealMatrix $r8;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

     label1:
        $r5 = (org.apache.commons.math.linear.OpenMapRealMatrix) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix multiply(org.apache.commons.math.linear.OpenMapRealMatrix)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r8 = new org.apache.commons.math.linear.BlockRealMatrix;

        $i4 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows>;

        specialinvoke $r8.<org.apache.commons.math.linear.BlockRealMatrix: void <init>(int,int)>($i4, i0);

        $r9 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r4 = virtualinvoke $r9.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label4:
        $z0 = virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        d0 = virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        i1 = virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i5 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i2 = i1 / $i5;

        $i6 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i3 = i1 % $i6;

        i7 = 0;

     label5:
        if i7 >= i0 goto label6;

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i3, i7);

        $d2 = d0 * $d1;

        virtualinvoke $r8.<org.apache.commons.math.linear.BlockRealMatrix: void addToEntry(int,int,double)>(i2, i7, $d2);

        i7 = i7 + 1;

        goto label5;

     label6:
        goto label4;

     label7:
        return $r8;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.OpenMapRealMatrix multiply(org.apache.commons.math.linear.OpenMapRealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, r1, $r4;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, i10;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        double d0, d1, $d2, $d3, $d4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        byte $b9;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealMatrix: int getColumnDimension()>();

        $r4 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        $i6 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows>;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(int,int)>($i6, i0);

        $r5 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i7 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i2 = i1 / $i7;

        $i8 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        i3 = i1 % $i8;

        i10 = 0;

     label2:
        if i10 >= i0 goto label5;

        i4 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i3, i10);

        $r6 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z1 = virtualinvoke $r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i4);

        if $z1 == 0 goto label4;

        i5 = specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i2, i10);

        $r7 = $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r7.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i5);

        $r8 = r1.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d3 = virtualinvoke $r8.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i4);

        $d4 = d0 * $d3;

        d1 = $d2 + $d4;

        $b9 = d1 cmpl 0.0;

        if $b9 != 0 goto label3;

        $r10 = $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r10.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double remove(int)>(i5);

        goto label4;

     label3:
        $r9 = $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r9.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i5, d1);

     label4:
        i10 = i10 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        return $r4;
    }

    public double getEntry(int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i2 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, i1);

        $d0 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>($i2);

        return $d0;
    }

    public int getRowDimension()
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int rows>;

        return $i0;
    }

    public void setEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1, $i3, $i4;
        double d0;
        byte $b2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1, $r2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i4 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, i1);

        virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double remove(int)>($i4);

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i3 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, i1);

        virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>($i3, d0);

     label2:
        return;
    }

    public void addToEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1, i2;
        double d0, d1, $d2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1, $r2, $r3;
        byte $b3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        i2 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, i1);

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i2);

        d1 = $d2 + d0;

        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double remove(int)>(i2);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i2, d1);

     label2:
        return;
    }

    public void multiplyEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1, i2;
        double d0, d1, $d2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1, $r2, $r3;
        byte $b3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        i2 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int computeKey(int,int)>(i0, i1);

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i2);

        d1 = $d2 * d0;

        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double remove(int)>(i2);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i2, d1);

     label2:
        return;
    }

    private int computeKey(int, int)
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<org.apache.commons.math.linear.OpenMapRealMatrix: int columns>;

        $i3 = i0 * $i2;

        $i4 = $i3 + i1;

        return $i4;
    }

    public volatile org.apache.commons.math.linear.RealMatrix subtract(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r2;
        org.apache.commons.math.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix subtract(org.apache.commons.math.linear.RealMatrix)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealMatrix add(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r2;
        org.apache.commons.math.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix add(org.apache.commons.math.linear.RealMatrix)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealMatrix copy()
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealMatrix createMatrix(int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealMatrix r0, $r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealMatrix: org.apache.commons.math.linear.OpenMapRealMatrix createMatrix(int,int)>(i0, i1);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.linear.OpenMapRealMatrix: long serialVersionUID> = -5962461716457143437L;

        return;
    }
}
