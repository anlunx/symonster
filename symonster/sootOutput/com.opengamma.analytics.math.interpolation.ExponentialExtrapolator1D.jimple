public class com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        double[] r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        double[] r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r11, $r12;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r12 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: java.lang.Double leftExtrapolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        return $r12;

     label1:
        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d3 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        $r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: java.lang.Double rightExtrapolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        return $r11;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was within data range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r11, $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $r12 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: java.lang.Double leftExtrapolateDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        $d5 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        return $d5;

     label1:
        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d3 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        $r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: java.lang.Double rightExtrapolateDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        $d4 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        return $d4;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was within data range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        double[] $r11, $r12;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r12 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: double[] getLeftSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,double)>(r1, $d4);

        return $r12;

     label1:
        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d3 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $b1 = $d2 cmpl $d3;

        if $b1 <= 0 goto label2;

        $r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: double[] getRightSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        return $r11;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was within data range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    private java.lang.Double leftExtrapolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r5;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstValue()>();

        d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double log(double)>(d1);

        d2 = $d3 / d0;

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = d2 * $d4;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r5;
    }

    private java.lang.Double rightExtrapolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r5;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastValue()>();

        d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double log(double)>(d1);

        d2 = $d3 / d0;

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = d2 * $d4;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r5;
    }

    private java.lang.Double leftExtrapolateDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r5;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstValue()>();

        d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double log(double)>(d1);

        d2 = $d3 / d0;

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = d2 * $d4;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $d7 = d2 * $d6;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        return $r5;
    }

    private java.lang.Double rightExtrapolateDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r3, $r4, $r5;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastValue()>();

        d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double log(double)>(d1);

        d2 = $d3 / d0;

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = d2 * $d4;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $d7 = d2 * $d6;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        return $r5;
    }

    private double[] getLeftSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9;
        double[] r2;
        java.lang.Double $r3, $r4, $r5;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r3, "value");

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        d1 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstValue()>();

        d2 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d5 = staticinvoke <java.lang.Math: double log(double)>(d2);

        d3 = $d5 / d1;

        $d6 = d3 * d0;

        d4 = staticinvoke <java.lang.Math: double exp(double)>($d6);

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r2 = newarray (double)[$i0];

        $d8 = d4 * d0;

        $d7 = d1 * d2;

        $d9 = $d8 / $d7;

        r2[0] = $d9;

        return r2;
    }

    private double[] getRightSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r4, $r5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[] r3;
        int $i0, $i1, $i2;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        $r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastValue()>();

        d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d4 = staticinvoke <java.lang.Math: double log(double)>(d1);

        d2 = $d4 / d0;

        $d5 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d6 = d2 * $d5;

        d3 = staticinvoke <java.lang.Math: double exp(double)>($d6);

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r3 = newarray (double)[$i0];

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        $d7 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d9 = d3 * $d7;

        $d8 = d0 * d1;

        $d10 = $d9 / $d8;

        r3[$i2] = $d10;

        return r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.ExponentialExtrapolator1D: long serialVersionUID> = 1L;

        return;
    }
}
