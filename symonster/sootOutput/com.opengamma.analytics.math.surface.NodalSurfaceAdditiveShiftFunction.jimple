public class com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction extends java.lang.Object implements com.opengamma.analytics.math.surface.SurfaceShiftFunction
{

    public void <init>()
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r8;
        double d0;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARALLEL_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double,java.lang.String)>(r1, d0, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r8;
        double d0, $d1, $d2;
        java.lang.String r2;
        double[] r3, r4, r5, r6;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getYDataAsPrimitive()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getZDataAsPrimitive()>();

        i0 = lengthof r5;

        r6 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r5[i1];

        $d2 = $d1 + d0;

        r6[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = staticinvoke <com.opengamma.analytics.math.surface.NodalDoublesSurface: com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[],double[],double[],java.lang.String)>(r3, r4, r6, r2);

        return $r8;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double, double, double)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r8;
        double d0, d1, d2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SINGLE_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double,double,double,java.lang.String)>(r1, d0, d1, d2, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r16;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        java.lang.String r2, $r15;
        double[] r3, r4, r5, r6;
        int i0, i7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;
        long $l1, $l2, $l4, $l5;
        byte $b3, $b6;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getYDataAsPrimitive()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getZDataAsPrimitive()>();

        i0 = lengthof r5;

        i7 = 0;

     label1:
        if i7 >= i0 goto label3;

        $d3 = r3[i7];

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label2;

        $d4 = r4[i7];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label2;

        r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r5, i0);

        $d5 = r6[i7];

        $d6 = $d5 + d2;

        r6[i7] = $d6;

        $r16 = staticinvoke <com.opengamma.analytics.math.surface.NodalDoublesSurface: com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[],double[],double[],java.lang.String)>(r3, r4, r6, r2);

        return $r16;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y data in surface for (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double[], double[], double[])
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r11;
        double[] r2, r3, r4;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MULTIPLE_SHIFT_");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double[],double[],double[],java.lang.String)>(r1, r2, r3, r4, $r10);

        return $r11;
    }

    public com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface, double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface r1, $r16, $r37;
        double[] r2, r3, r4, r6, r7, r8, r9, $r34, $r35, $r36;
        java.lang.String r5, $r25, $r32;
        int i0, i1, i2, $i3, $i10, $i11, $i12, i13, $i14, i15;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Iterator r11;
        java.util.ArrayList $r17;
        boolean $z0, $z1, $z3, z4;
        java.lang.IllegalArgumentException $r18, $r28;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r30, $r31;
        java.lang.Object $r26;
        java.lang.Integer $r27, $r33, $r39, $r40, $r41;
        long $l4, $l5, $l7, $l8;
        byte $b6, $b9;
        java.lang.Object[] $r38;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.NodalDoublesSurface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "surface");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "x shift");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "y shift");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "shifts");

        i0 = lengthof r2;

        if i0 != 0 goto label01;

        $r34 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getXDataAsPrimitive()>();

        $r35 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getYDataAsPrimitive()>();

        $r36 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getZDataAsPrimitive()>();

        $r37 = staticinvoke <com.opengamma.analytics.math.surface.NodalDoublesSurface: com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[],double[],double[],java.lang.String)>($r34, $r35, $r36, r5);

        return $r37;

     label01:
        $i3 = lengthof r3;

        if i0 != $i3 goto label02;

        $i10 = lengthof r4;

        if i0 != $i10 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $r38 = newarray (java.lang.Object)[3];

        $i11 = lengthof r4;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r38[0] = $r39;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r38[1] = $r40;

        $i12 = lengthof r3;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r38[2] = $r41;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "number of shifts {} must be equal to number of x shift positions {} and y shift positions {}", $r38);

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getXDataAsPrimitive()>();

        r7 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getYDataAsPrimitive()>();

        r8 = virtualinvoke r1.<com.opengamma.analytics.math.surface.NodalDoublesSurface: double[] getZDataAsPrimitive()>();

        i1 = lengthof r8;

        r9 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r8, i1);

        i13 = 0;

     label04:
        $i14 = lengthof r2;

        if i13 >= $i14 goto label13;

        d0 = r2[i13];

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        i15 = 0;

     label05:
        if i15 >= i1 goto label07;

        $d7 = r6[i15];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d7);

        $l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label06;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r33);

     label06:
        i15 = i15 + 1;

        goto label05;

     label07:
        $z0 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x data in surface for value ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label08:
        z4 = 0;

        r11 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r26 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r27 = (java.lang.Integer) $r26;

        i2 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        $d2 = r7[i2];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r3[i13];

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label10;

        $d5 = r9[i2];

        $d4 = r4[i13];

        $d6 = $d5 + $d4;

        r9[i2] = $d6;

        z4 = 1;

     label10:
        goto label09;

     label11:
        if z4 != 0 goto label12;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y data in surface for (");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d1 = r3[i13];

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label12:
        i13 = i13 + 1;

        goto label04;

     label13:
        $r16 = staticinvoke <com.opengamma.analytics.math.surface.NodalDoublesSurface: com.opengamma.analytics.math.surface.NodalDoublesSurface 'from'(double[],double[],double[],java.lang.String)>(r6, r7, r9, r5);

        return $r16;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double[] r2, r3, r4;
        java.lang.String r5;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.lang.String;

        $r6 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double[],double[],double[],java.lang.String)>($r6, r2, r3, r4, r5);

        return $r7;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double[], double[], double[])
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double[] r2, r3, r4;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double[],double[],double[])>($r5, r2, r3, r4);

        return $r6;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0, d1, d2;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: java.lang.String;

        $r3 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double,double,double,java.lang.String)>($r3, d0, d1, d2, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, double, double)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0, d1, d2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double,double,double)>($r2, d0, d1, d2);

        return $r3;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double, java.lang.String)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        $r3 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double,java.lang.String)>($r3, d0, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.surface.Surface evaluate(com.opengamma.analytics.math.surface.Surface, double)
    {
        com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction r0;
        com.opengamma.analytics.math.surface.Surface r1;
        double d0;
        com.opengamma.analytics.math.surface.NodalDoublesSurface $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.surface.Surface;

        d0 := @parameter1: double;

        $r2 = (com.opengamma.analytics.math.surface.NodalDoublesSurface) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.surface.NodalSurfaceAdditiveShiftFunction: com.opengamma.analytics.math.surface.NodalDoublesSurface evaluate(com.opengamma.analytics.math.surface.NodalDoublesSurface,double)>($r2, d0);

        return $r3;
    }
}
