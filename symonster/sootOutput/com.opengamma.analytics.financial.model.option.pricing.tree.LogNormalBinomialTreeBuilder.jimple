public class com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder extends com.opengamma.analytics.financial.model.option.pricing.tree.BinomialTreeBuilder
{
    private static final double EPS;
    private static final com.opengamma.analytics.math.rootfinding.RealSingleRootFinder s_root;
    private static com.opengamma.analytics.math.rootfinding.BracketRoot s_bracketRoot;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.BinomialTreeBuilder: void <init>()>();

        return;
    }

    protected double[] getForwards(double[], com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;
        double[] r1, r3;
        com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d3 = r1[i1];

        d2 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle: double getLocalDrift(double,double)>($d3, d0);

        $d5 = r1[i1];

        $d4 = d2 * d1;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d4);

        $d7 = $d5 * $d6;

        r3[i1] = $d7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    protected com.opengamma.util.tuple.DoublesPair getCentralNodePair(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        double[] r2;
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$CentreNode $r3;
        com.opengamma.analytics.math.rootfinding.BracketRoot $r4;
        com.opengamma.analytics.math.rootfinding.RealSingleRootFinder $r5;
        java.lang.Double $r6, $r7, $r8;
        com.opengamma.util.tuple.DoublesPair $r9;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r3 = new com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$CentreNode;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$CentreNode: void <init>(com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder,double,double,double,double)>(r0, d0, d1, d2, d3);

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.BracketRoot s_bracketRoot>;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d7 = d1 * $d6;

        $d8 = staticinvoke <java.lang.Math: double exp(double)>($d7);

        $d9 = d2 * $d8;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.rootfinding.BracketRoot: double[] getBracketedPoints(com.opengamma.analytics.math.function.Function1D,double,double)>($r3, d2, $d9);

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.RealSingleRootFinder s_root>;

        $d10 = r2[0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        $d11 = r2[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r8 = virtualinvoke $r5.<com.opengamma.analytics.math.rootfinding.RealSingleRootFinder: java.lang.Double getRoot(com.opengamma.analytics.math.function.Function1D,java.lang.Double,java.lang.Double)>($r3, $r6, $r7);

        d4 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d12 = d3 * d3;

        d5 = $d12 / d4;

        $r9 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d5, d4);

        return $r9;
    }

    protected double getNextHigherNode(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        double[] r2;
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$UpperNodes $r3;
        com.opengamma.analytics.math.rootfinding.BracketRoot $r4;
        com.opengamma.analytics.math.rootfinding.RealSingleRootFinder $r5;
        java.lang.Double $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $r3 = new com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$UpperNodes;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$UpperNodes: void <init>(com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder,double,double,double,double)>(r0, d0, d1, d2, d3);

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d6 = d1 * $d5;

        $d7 = staticinvoke <java.lang.Math: double exp(double)>($d6);

        d4 = d2 * $d7;

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.BracketRoot s_bracketRoot>;

        $d8 = d2 - d3;

        $d9 = $d8 / 0.6;

        $d15 = $d9 + d3;

        $d10 = d2 - d3;

        $d11 = $d10 / 0.4;

        $d14 = $d11 + d3;

        $d13 = d2 * 1.00000001;

        $d12 = 10.0 * d4;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.rootfinding.BracketRoot: double[] getBracketedPoints(com.opengamma.analytics.math.function.Function1D,double,double,double,double)>($r3, $d15, $d14, $d13, $d12);

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.RealSingleRootFinder s_root>;

        $d16 = r2[0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d16);

        $d17 = r2[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d17);

        $r8 = virtualinvoke $r5.<com.opengamma.analytics.math.rootfinding.RealSingleRootFinder: java.lang.Double getRoot(com.opengamma.analytics.math.function.Function1D,java.lang.Double,java.lang.Double)>($r3, $r6, $r7);

        $d18 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        return $d18;
    }

    protected double getNextLowerNode(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        double[] r2;
        byte $b0;
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$LowerNodes $r3;
        com.opengamma.analytics.math.rootfinding.BracketRoot $r4;
        com.opengamma.analytics.math.rootfinding.RealSingleRootFinder $r5;
        java.lang.Double $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $r3 = new com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$LowerNodes;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder$LowerNodes: void <init>(com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder,double,double,double,double)>(r0, d0, d1, d2, d3);

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.BracketRoot s_bracketRoot>;

        $d4 = neg d1;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d6 = $d4 * $d5;

        $d7 = staticinvoke <java.lang.Math: double exp(double)>($d6);

        $d8 = d2 * $d7;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.rootfinding.BracketRoot: double[] getBracketedPoints(com.opengamma.analytics.math.function.Function1D,double,double)>($r3, $d8, d2);

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.RealSingleRootFinder s_root>;

        $d9 = r2[0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $d10 = r2[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        $r8 = virtualinvoke $r5.<com.opengamma.analytics.math.rootfinding.RealSingleRootFinder: java.lang.Double getRoot(com.opengamma.analytics.math.function.Function1D,java.lang.Double,java.lang.Double)>($r3, $r6, $r7);

        $d11 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        return $d11;
    }

    protected volatile double[] getForwards(double[], com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder r0;
        double[] r1, $r4;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle r2;
        double d0, d1;
        com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle) r2;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: double[] getForwards(double[],com.opengamma.analytics.financial.model.option.definition.GeneralLogNormalOptionDataBundle,double,double)>(r1, $r3, d0, d1);

        return $r4;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.rootfinding.BrentSingleRootFinder $r0;
        com.opengamma.analytics.math.rootfinding.BracketRoot $r1;

        <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: double EPS> = 1.0E-8;

        $r0 = new com.opengamma.analytics.math.rootfinding.BrentSingleRootFinder;

        specialinvoke $r0.<com.opengamma.analytics.math.rootfinding.BrentSingleRootFinder: void <init>()>();

        <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.RealSingleRootFinder s_root> = $r0;

        $r1 = new com.opengamma.analytics.math.rootfinding.BracketRoot;

        specialinvoke $r1.<com.opengamma.analytics.math.rootfinding.BracketRoot: void <init>()>();

        <com.opengamma.analytics.financial.model.option.pricing.tree.LogNormalBinomialTreeBuilder: com.opengamma.analytics.math.rootfinding.BracketRoot s_bracketRoot> = $r1;

        return;
    }
}
