public class com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine extends com.opengamma.analytics.financial.provider.method.CalibrationEngineWithCalculators
{
    private static final double DEFAULT_PRECISION;
    private final java.util.List _instrumentIndex;
    private final int _nbInstrumentsBlock;
    private final com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective;

    public void <init>(com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective, int)
    {
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine r0;
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective r1;
        int i0;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r2;
        com.opengamma.util.money.Currency $r3;
        java.util.ArrayList $r4;
        java.util.List $r5;
        java.lang.Integer $r6;

        r0 := @this: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine;

        r1 := @parameter0: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective: com.opengamma.analytics.financial.forex.method.FXMatrix getFXMatrix()>();

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective: com.opengamma.util.money.Currency getCcy()>();

        specialinvoke r0.<com.opengamma.analytics.financial.provider.method.CalibrationEngineWithCalculators: void <init>(com.opengamma.analytics.financial.forex.method.FXMatrix,com.opengamma.util.money.Currency)>($r2, $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex> = $r4;

        $r5 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock> = i0;

        r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective> = r1;

        return;
    }

    public java.util.List getInstrumentIndex()
    {
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine;

        $r1 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex>;

        return $r1;
    }

    public int getNbInstrumentsBlock()
    {
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine;

        $i0 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        return $i0;
    }

    public void addInstrument(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor)
    {
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r2;
        com.opengamma.analytics.financial.interestrate.swaption.derivative.SwaptionPhysicalFixedIbor r3;
        boolean $z0;
        java.util.List $r4, $r5, $r6, $r10;
        java.lang.Double $r7;
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves $r8;
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective $r9;
        com.opengamma.analytics.financial.model.interestrate.definition.LiborMarketModelDisplacedDiffusionParameters $r11;
        double[] $r12;
        com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon $r13, $r15;
        com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity $r14, $r16;
        int $i0, $i1, $i2;
        com.opengamma.analytics.financial.interestrate.payments.derivative.Payment $r17;
        com.opengamma.analytics.financial.interestrate.payments.derivative.Coupon $r18;
        double $d0;
        java.lang.Integer $r19;

        r0 := @this: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        $z0 = r1 instanceof com.opengamma.analytics.financial.interestrate.swaption.derivative.SwaptionPhysicalFixedIbor;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Calibration instruments should be swaptions");

        r3 = (com.opengamma.analytics.financial.interestrate.swaption.derivative.SwaptionPhysicalFixedIbor) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getBasket()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getMethod()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getCalibrationPrices()>();

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex>;

        $r8 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        $r9 = (com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective) $r8;

        $r11 = virtualinvoke $r9.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective: com.opengamma.analytics.financial.model.interestrate.definition.LiborMarketModelDisplacedDiffusionParameters getLMMParameters()>();

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.interestrate.definition.LiborMarketModelDisplacedDiffusionParameters: double[] getIborTime()>();

        $r13 = virtualinvoke r3.<com.opengamma.analytics.financial.interestrate.swaption.derivative.SwaptionPhysicalFixedIbor: com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon getUnderlyingSwap()>();

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon: com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity getSecondLeg()>();

        $r15 = virtualinvoke r3.<com.opengamma.analytics.financial.interestrate.swaption.derivative.SwaptionPhysicalFixedIbor: com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon getUnderlyingSwap()>();

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon: com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity getSecondLeg()>();

        $i0 = virtualinvoke $r16.<com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity: int getNumberOfPayments()>();

        $i1 = $i0 - 1;

        $r17 = virtualinvoke $r14.<com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity: com.opengamma.analytics.financial.interestrate.payments.derivative.Payment getNthPayment(int)>($i1);

        $r18 = (com.opengamma.analytics.financial.interestrate.payments.derivative.Coupon) $r17;

        $d0 = virtualinvoke $r18.<com.opengamma.analytics.financial.interestrate.payments.derivative.Coupon: double getPaymentTime()>();

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r12, $d0);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r19);

        return;
    }

    public void calibrate(com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface)
    {
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine r0;
        com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective r2;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] r4;
        double[] r5, $r24;
        java.util.List $r7, $r16, $r19, $r26, $r29;
        com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves $r8, $r10, $r14, $r15, $r25;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface $r9;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare $r11;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r12;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r13;
        java.lang.Object $r17, $r20, $r27, $r30;
        java.lang.Integer $r18, $r21;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r22, $r23;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative $r28;
        java.lang.Double $r31;
        double $d0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine;

        r1 := @parameter0: com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getBasket()>();

        i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i2 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        $i3 = i0 % $i2;

        if $i3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Number of instruments incompatible with block size");

        $i4 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        i1 = i0 / $i4;

        virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: void computeCalibrationPrice(com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface)>(r1);

        $r8 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        $r9 = interfaceinvoke r1.<com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        virtualinvoke $r8.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves: void setMulticurves(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface)>($r9);

        $r10 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        r2 = (com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective) $r10;

        $r11 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        $r13 = <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition SV_COMMONS>;

        $r12 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        specialinvoke $r11.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>($r13, $r12, 1.0E-15);

        i23 = 0;

     label3:
        if i23 >= i1 goto label6;

        $i5 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        r4 = newarray (com.opengamma.analytics.financial.interestrate.InstrumentDerivative)[$i5];

        $i6 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        r5 = newarray (double)[$i6];

        i24 = 0;

     label4:
        $i7 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        if i24 >= $i7 goto label5;

        $r26 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getBasket()>();

        $i17 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        $i18 = i23 * $i17;

        $i19 = $i18 + i24;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>($i19);

        $r28 = (com.opengamma.analytics.financial.interestrate.InstrumentDerivative) $r27;

        r4[i24] = $r28;

        $r29 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List getCalibrationPrices()>();

        $i20 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        $i21 = i23 * $i20;

        $i22 = $i21 + i24;

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>($i22);

        $r31 = (java.lang.Double) $r30;

        $d0 = virtualinvoke $r31.<java.lang.Double: double doubleValue()>();

        r5[i24] = $d0;

        i24 = i24 + 1;

        goto label4;

     label5:
        $r14 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        virtualinvoke $r14.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves: void setInstruments(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[])>(r4);

        $r15 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        virtualinvoke $r15.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves: void setPrice(double[])>(r5);

        $r16 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex>;

        $i8 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        $i9 = i23 * $i8;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i9);

        $r18 = (java.lang.Integer) $r17;

        $i10 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        virtualinvoke r2.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective: void setStartIndex(int)>($i10);

        $r19 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: java.util.List _instrumentIndex>;

        $i12 = i23 + 1;

        $i11 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        $i13 = $i12 * $i11;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>($i13);

        $r21 = (java.lang.Integer) $r20;

        $i14 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $i15 = $i14 - 1;

        virtualinvoke r2.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationObjective: void setEndIndex(int)>($i15);

        $r22 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i16 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: int _nbInstrumentsBlock>;

        specialinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int,double)>($i16, 0.0);

        $r25 = r0.<com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareCalibrationObjectiveWithMultiCurves _calibrationObjective>;

        $r23 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r24 = newarray (double)[2];

        $r24[0] = 1.0;

        $r24[1] = 0.0;

        specialinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r24);

        virtualinvoke $r11.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r22, $r25, $r23);

        i23 = i23 + 1;

        goto label3;

     label6:
        return;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.financial.provider.method.SuccessiveLeastSquareLMMDDCalibrationEngine: double DEFAULT_PRECISION> = 1.0E-15;

        return;
    }
}
