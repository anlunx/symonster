public class org.apache.commons.math3.stat.descriptive.DescriptiveStatistics extends java.lang.Object implements org.apache.commons.math3.stat.descriptive.StatisticalSummary, java.io.Serializable
{
    public static final int INFINITE_WINDOW;
    private static final long serialVersionUID;
    private static final java.lang.String SET_QUANTILE_METHOD_NAME;
    protected int windowSize;
    private org.apache.commons.math3.util.ResizableDoubleArray eDA;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl;
    private org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r2;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r3;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r4;
        org.apache.commons.math3.stat.descriptive.rank.Max $r5;
        org.apache.commons.math3.stat.descriptive.rank.Min $r6;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r7;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r8;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r9;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r10;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r11;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r1;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r11;

        return;
    }

    public void <init>(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int i0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r2;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r3;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r4;
        org.apache.commons.math3.stat.descriptive.rank.Max $r5;
        org.apache.commons.math3.stat.descriptive.rank.Min $r6;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r7;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r8;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r9;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r10;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r11;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r1;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r11;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void setWindowSize(int)>(i0);

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double[] r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2, $r13;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r3;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r4;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r5;
        org.apache.commons.math3.stat.descriptive.rank.Max $r6;
        org.apache.commons.math3.stat.descriptive.rank.Min $r7;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r8;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r9;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r10;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r11;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r12;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r11;

        $r12 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r12.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r12;

        if r1 == null goto label1;

        $r13 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r13.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(double[])>(r1);

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r13;

     label1:
        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0, r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r3;
        org.apache.commons.math3.stat.descriptive.moment.GeometricMean $r4;
        org.apache.commons.math3.stat.descriptive.moment.Kurtosis $r5;
        org.apache.commons.math3.stat.descriptive.rank.Max $r6;
        org.apache.commons.math3.stat.descriptive.rank.Min $r7;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r8;
        org.apache.commons.math3.stat.descriptive.moment.Skewness $r9;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r10;
        org.apache.commons.math3.stat.descriptive.summary.SumOfSquares $r11;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r12;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = -1;

        $r2 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r3;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.GeometricMean: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r4;

        $r5 = new org.apache.commons.math3.stat.descriptive.moment.Kurtosis;

        specialinvoke $r5.<org.apache.commons.math3.stat.descriptive.moment.Kurtosis: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r5;

        $r6 = new org.apache.commons.math3.stat.descriptive.rank.Max;

        specialinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.Max: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r6;

        $r7 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r7;

        $r8 = new org.apache.commons.math3.stat.descriptive.rank.Percentile;

        specialinvoke $r8.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r8;

        $r9 = new org.apache.commons.math3.stat.descriptive.moment.Skewness;

        specialinvoke $r9.<org.apache.commons.math3.stat.descriptive.moment.Skewness: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r9;

        $r10 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r10;

        $r11 = new org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.summary.SumOfSquares: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r11;

        $r12 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r12.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r12;

        staticinvoke <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics,org.apache.commons.math3.stat.descriptive.DescriptiveStatistics)>(r1, r0);

        return;
    }

    public void addValue(double)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double d0;
        int $i0, $i2, $i6;
        org.apache.commons.math3.util.ResizableDoubleArray $r1, $r2, $r3;
        long $l1, $l3, $l5, $l7;
        byte $b4, $b8;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        d0 := @parameter0: double;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        if $i0 == -1 goto label2;

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $i2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        $l3 = (long) $i2;

        $b4 = $l1 cmp $l3;

        if $b4 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r3.<org.apache.commons.math3.util.ResizableDoubleArray: double addElementRolling(double)>(d0);

        goto label3;

     label1:
        $l5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $i6 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        $l7 = (long) $i6;

        $b8 = $l5 cmp $l7;

        if $b8 >= 0 goto label3;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>(d0);

        goto label3;

     label2:
        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>(d0);

     label3:
        return;
    }

    public void removeMostRecentValue() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: void discardMostRecentElements(int)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NO_DATA>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label4:
        return;

        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label1 to label2 with label3;
    }

    public double replaceMostRecentValue(double) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double d0, $d1;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double substituteMostRecentElement(double)>(d0);

        return $d1;
    }

    public double getMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getGeometricMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getVariance()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getPopulationVariance()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>(boolean)>(0);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getStandardDeviation()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        long $l0, $l2;
        byte $b1, $b3;
        double $d0, d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        d1 = #NaN;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $l2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b3 = $l2 cmp 1L;

        if $b3 <= 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getVariance()>();

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        goto label2;

     label1:
        d1 = 0.0;

     label2:
        return d1;
    }

    public double getQuadraticMean()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        long l0;
        byte $b1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getSumsq()>();

        $d1 = (double) l0;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        goto label2;

     label1:
        $d3 = #NaN;

     label2:
        return $d3;
    }

    public double getSkewness()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getKurtosis()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getMax()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getMin()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public double getSum()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public double getSumsq()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r1);

        return $d0;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void clear()>();

        return;
    }

    public int getWindowSize()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        return $i0;
    }

    public void setWindowSize(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.ResizableDoubleArray $r1, $r2, $r3;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        if i0 == -1 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_WINDOW_SIZE>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = i0;

        if i0 == -1 goto label2;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        if i0 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $i2 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: int getNumElements()>();

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.commons.math3.util.ResizableDoubleArray: void discardFrontElements(int)>($i3);

     label2:
        return;
    }

    public double[] getValues()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] getElements()>();

        return $r2;
    }

    public double[] getSortedValues()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double[] getValues()>();

        staticinvoke <java.util.Arrays: void sort(double[])>(r1);

        return r1;
    }

    public double getElement(int)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        int i0;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double getElement(int)>(i0);

        return $d0;
    }

    public double getPercentile(double) throws org.apache.commons.math3.exception.MathIllegalStateException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        double d0, $d1;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1, $r2, $r8, $r11, $r12, $r20, $r27;
        boolean $z0;
        java.lang.Class $r3, $r5, $r22, $r29;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7, $r19, $r26;
        java.lang.Double $r9;
        org.apache.commons.math3.stat.descriptive.rank.Percentile $r13;
        java.lang.reflect.InvocationTargetException $r14;
        java.lang.IllegalStateException $r15;
        java.lang.Throwable $r16;
        java.lang.IllegalAccessException $r17;
        org.apache.commons.math3.exception.MathIllegalStateException $r18, $r25;
        org.apache.commons.math3.exception.util.LocalizedFormats $r21, $r28;
        java.lang.String $r23, $r30;
        java.lang.NoSuchMethodException $r24;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $z0 = $r1 instanceof org.apache.commons.math3.stat.descriptive.rank.Percentile;

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r13 = (org.apache.commons.math3.stat.descriptive.rank.Percentile) $r12;

        virtualinvoke $r13.<org.apache.commons.math3.stat.descriptive.rank.Percentile: void setQuantile(double)>(d0);

        goto label6;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[1];

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r4[0] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setQuantile", $r4);

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7[0] = $r9;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r7);

     label2:
        goto label6;

     label3:
        $r24 := @caughtexception;

        $r25 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r28 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD>;

        $r26 = newarray (java.lang.Object)[2];

        $r27 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r29 = virtualinvoke $r27.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>();

        $r26[0] = $r30;

        $r26[1] = "setQuantile";

        specialinvoke $r25.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r28, $r26);

        throw $r25;

     label4:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r21 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD>;

        $r19 = newarray (java.lang.Object)[2];

        $r19[0] = "setQuantile";

        $r20 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $r22 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r19[1] = $r23;

        specialinvoke $r18.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r21, $r19);

        throw $r18;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r15;

     label6:
        $r11 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)>($r11);

        return $d1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r28, $r29, $r33;
        long $l0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.String $r31;
        org.apache.commons.math3.exception.MathIllegalStateException $r32;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DescriptiveStatistics:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n: ");

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long getN()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("min: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMin()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max: ");

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMax()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mean: ");

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getMean()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("std dev: ");

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getStandardDeviation()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label1:
        $r22 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("median: ");

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getPercentile(double)>(50.0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

        $r33 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("median: unavailable");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label4:
        $r25 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skewness: ");

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getSkewness()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kurtosis: ");

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: double getKurtosis()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d6);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r31;

        catch org.apache.commons.math3.exception.MathIllegalStateException from label1 to label2 with label3;
    }

    public double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: double compute(org.apache.commons.math3.util.MathArrays$Function)>(r1);

        return $d0;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMeanImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

        return $r1;
    }

    public synchronized void setMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getGeometricMeanImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

        return $r1;
    }

    public synchronized void setGeometricMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getKurtosisImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

        return $r1;
    }

    public synchronized void setKurtosisImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMaxImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

        return $r1;
    }

    public synchronized void setMaxImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMinImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

        return $r1;
    }

    public synchronized void setMinImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getPercentileImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        return $r1;
    }

    public synchronized void setPercentileImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;
        java.lang.Class $r2, $r4, $r13, $r19;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6, $r11, $r17;
        java.lang.Double $r7;
        java.lang.IllegalAccessException $r9;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r10, $r16;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12, $r18;
        java.lang.String $r14, $r20;
        java.lang.NoSuchMethodException $r15;
        java.lang.reflect.InvocationTargetException $r21;
        java.lang.IllegalArgumentException $r22;
        java.lang.Throwable $r23;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r3[0] = $r4;

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setQuantile", $r3);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(50.0);

        $r6[0] = $r7;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r6);

     label2:
        goto label6;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r18 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD>;

        $r17 = newarray (java.lang.Object)[2];

        $r19 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r17[0] = $r20;

        $r17[1] = "setQuantile";

        specialinvoke $r16.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r18, $r17);

        throw $r16;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD>;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "setQuantile";

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r11[1] = $r14;

        specialinvoke $r10.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label5:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r23);

        throw $r22;

     label6:
        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = r1;

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSkewnessImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

        return $r1;
    }

    public synchronized void setSkewnessImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getVarianceImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

        return $r1;
    }

    public synchronized void setVarianceImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumsqImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

        return $r1;
    }

    public synchronized void setSumsqImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = r1;

        return;
    }

    public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumImpl()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

        return $r1;
    }

    public synchronized void setSumImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic)
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.UnivariateStatistic;

        r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = r1;

        return;
    }

    public org.apache.commons.math3.stat.descriptive.DescriptiveStatistics copy()
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0, $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        $r2 = new org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics,org.apache.commons.math3.stat.descriptive.DescriptiveStatistics)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics, org.apache.commons.math3.stat.descriptive.DescriptiveStatistics) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.DescriptiveStatistics r0, r1;
        org.apache.commons.math3.util.ResizableDoubleArray $r2, $r3;
        int $i0;
        org.apache.commons.math3.stat.descriptive.UnivariateStatistic $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.util.ResizableDoubleArray: org.apache.commons.math3.util.ResizableDoubleArray copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.util.ResizableDoubleArray eDA> = $r3;

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize>;

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int windowSize> = $i0;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl> = $r5;

        $r6 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl> = $r7;

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl> = $r9;

        $r10 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl>;

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl> = $r11;

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl>;

        $r13 = interfaceinvoke $r12.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl> = $r13;

        $r14 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl>;

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl> = $r15;

        $r16 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl>;

        $r17 = interfaceinvoke $r16.<org.apache.commons.math3.stat.descriptive.UnivariateStatistic: org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl> = $r17;

        $r18 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl>;

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl> = $r18;

        $r19 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl>;

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl> = $r19;

        $r20 = r0.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl>;

        r1.<org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl> = $r20;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: java.lang.String SET_QUANTILE_METHOD_NAME> = "setQuantile";

        <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: long serialVersionUID> = 4133067267405273064L;

        <org.apache.commons.math3.stat.descriptive.DescriptiveStatistics: int INFINITE_WINDOW> = -1;

        return;
    }
}
