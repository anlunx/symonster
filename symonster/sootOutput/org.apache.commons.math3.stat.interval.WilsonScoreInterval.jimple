public class org.apache.commons.math3.stat.interval.WilsonScoreInterval extends java.lang.Object implements org.apache.commons.math3.stat.interval.BinomialConfidenceInterval
{

    public void <init>()
    {
        org.apache.commons.math3.stat.interval.WilsonScoreInterval r0;

        r0 := @this: org.apache.commons.math3.stat.interval.WilsonScoreInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)
    {
        org.apache.commons.math3.stat.interval.WilsonScoreInterval r0;
        int i0, i1, $i2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        org.apache.commons.math3.distribution.NormalDistribution $r2;
        org.apache.commons.math3.stat.interval.ConfidenceInterval $r3;

        r0 := @this: org.apache.commons.math3.stat.interval.WilsonScoreInterval;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.stat.interval.IntervalUtils: void checkParameters(int,int,double)>(i0, i1, d0);

        $d10 = 1.0 - d0;

        d1 = $d10 / 2.0;

        $r2 = new org.apache.commons.math3.distribution.NormalDistribution;

        specialinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: void <init>()>();

        $d11 = 1.0 - d1;

        d2 = virtualinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: double inverseCumulativeProbability(double)>($d11);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d2, 2);

        $d13 = (double) i1;

        $d12 = (double) i0;

        d4 = $d13 / $d12;

        $d14 = (double) i0;

        $d15 = 1.0 / $d14;

        $d16 = $d15 * d3;

        $d17 = 1.0 + $d16;

        d5 = 1.0 / $d17;

        $i2 = 2 * i0;

        $d18 = (double) $i2;

        $d19 = 1.0 / $d18;

        $d20 = $d19 * d3;

        d6 = d4 + $d20;

        $d21 = (double) i0;

        $d22 = 1.0 / $d21;

        $d24 = $d22 * d4;

        $d23 = 1.0 - d4;

        $d26 = $d24 * $d23;

        $d25 = (double) i0;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d25, 2);

        $d28 = 4.0 * $d27;

        $d29 = 1.0 / $d28;

        $d30 = $d29 * d3;

        $d31 = $d26 + $d30;

        $d32 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d31);

        d7 = d2 * $d32;

        $d33 = d6 - d7;

        d8 = d5 * $d33;

        $d34 = d6 + d7;

        d9 = d5 * $d34;

        $r3 = new org.apache.commons.math3.stat.interval.ConfidenceInterval;

        specialinvoke $r3.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void <init>(double,double,double)>(d8, d9, d0);

        return $r3;
    }
}
