public class org.apache.commons.math3.distribution.PoissonDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    public static final int DEFAULT_MAX_ITERATIONS;
    public static final double DEFAULT_EPSILON;
    private static final long serialVersionUID;
    private final org.apache.commons.math3.distribution.NormalDistribution normal;
    private final org.apache.commons.math3.distribution.ExponentialDistribution exponential;
    private final double mean;
    private final int maxIterations;
    private final double epsilon;

    public void <init>(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>(d0, 1.0E-12, 10000000);

        return;
    }

    public void <init>(double, double, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0, d1;
        int i0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,int)>($r1, d0, d1, i0);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, $d2;
        int i0;
        byte $b1;
        org.apache.commons.math3.distribution.NormalDistribution $r2;
        org.apache.commons.math3.distribution.ExponentialDistribution $r3;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Double $r6;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b1 = d0 cmpg 0.0;

        if $b1 > 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MEAN>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r5, $r6);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean> = d0;

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: double epsilon> = d1;

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: int maxIterations> = i0;

        $r2 = new org.apache.commons.math3.distribution.NormalDistribution;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        specialinvoke $r2.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>(r1, d0, $d2, 1.0E-9);

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.NormalDistribution normal> = $r2;

        $r3 = new org.apache.commons.math3.distribution.ExponentialDistribution;

        specialinvoke $r3.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(r1, 1.0, 1.0E-9);

        r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential> = $r3;

        return;
    }

    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>(d0, d1, 10000000);

        return;
    }

    public void <init>(double, int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(double,double,int)>(d0, 1.0E-12, i0);

        return;
    }

    public double getMean()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        return $d0;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int i0;
        double d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        i0 := @parameter0: int;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double logProbability(int)>(i0);

        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label1;

        $d1 = 0.0;

        goto label2;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d0);

     label2:
        return $d1;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 != 2147483647 goto label2;

     label1:
        d14 = #-Infinity;

        goto label4;

     label2:
        if i0 != 0 goto label3;

        $d13 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        d14 = neg $d13;

        goto label4;

     label3:
        $d0 = (double) i0;

        $d1 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getStirlingError(double)>($d0);

        $d4 = neg $d1;

        $d3 = (double) i0;

        $d2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $d5 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d3, $d2);

        $d6 = $d4 - $d5;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d8 = 0.5 * $d7;

        $d10 = $d6 - $d8;

        $d9 = (double) i0;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d9);

        $d12 = 0.5 * $d11;

        d14 = $d10 - $d12;

     label4:
        return d14;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0.0;

     label1:
        if i0 != 2147483647 goto label2;

        return 1.0;

     label2:
        $d0 = (double) i0;

        $d3 = $d0 + 1.0;

        $d2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $d1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double epsilon>;

        $i1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: int maxIterations>;

        $d4 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>($d3, $d2, $d1, $i1);

        return $d4;
    }

    public double normalApproximateProbability(int)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        int i0;
        double $d0, $d1, $d2;
        org.apache.commons.math3.distribution.NormalDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.NormalDistribution normal>;

        $d0 = (double) i0;

        $d1 = $d0 + 0.5;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.NormalDistribution: double cumulativeProbability(double)>($d1);

        return $d2;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double getMean()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: double getMean()>();

        return $d0;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 2147483647;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        return 1;
    }

    public int sample()
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double $d0;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: double mean>;

        $l0 = specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: long nextPoisson(double)>($d0);

        $l1 = staticinvoke <org.apache.commons.math3.util.FastMath: long min(long,long)>($l0, 2147483647L);

        $i2 = (int) $l1;

        return $i2;
    }

    private long nextPoisson(double)
    {
        org.apache.commons.math3.distribution.PoissonDistribution r0;
        double d0, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, d74, d75, d77, d78, d79, d80, d81, d88, $d89, d90, d91, d92, d93, d94, d95;
        long l0, l16, $l17, $l19, $l20;
        byte $b1, $b3, $b4, $b5, $b6, $b7, $b8, $b10, $b11, $b12, $b13, $b14, $b15, $b18;
        int $i2, $i9;
        org.apache.commons.math3.distribution.ExponentialDistribution $r1, $r2, $r4;
        org.apache.commons.math3.random.RandomGenerator $r3, $r5, $r6;
        boolean $z1, z2;

        r0 := @this: org.apache.commons.math3.distribution.PoissonDistribution;

        d0 := @parameter0: double;

        $b1 = d0 cmpg 40.0;

        if $b1 >= 0 goto label04;

        $d71 = neg d0;

        d74 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d71);

        l16 = 0L;

        d75 = 1.0;

     label01:
        $d73 = (double) l16;

        $d72 = 1000.0 * d0;

        $b14 = $d73 cmpg $d72;

        if $b14 >= 0 goto label03;

        $r5 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d77 = interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d75 = d75 * d77;

        $b15 = d75 cmpl d74;

        if $b15 < 0 goto label02;

        l16 = l16 + 1L;

        goto label01;

     label02:
        return l16;

     label03:
        return l16;

     label04:
        d78 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d0);

        d79 = d0 - d78;

        d80 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d78);

        $i2 = (int) d78;

        d81 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i2);

        $b3 = d79 cmpg 4.9E-324;

        if $b3 >= 0 goto label05;

        $l17 = 0L;

        goto label06;

     label05:
        $l17 = specialinvoke r0.<org.apache.commons.math3.distribution.PoissonDistribution: long nextPoisson(double)>(d79);

     label06:
        l0 = $l17;

        $d14 = 32.0 * d78;

        $d15 = $d14 / 3.141592653589793;

        $d16 = $d15 + 1.0;

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d16);

        $d18 = d78 * $d17;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d18);

        d3 = d2 / 2.0;

        $d19 = 2.0 * d78;

        d4 = $d19 + d2;

        $d20 = 3.141592653589793 * d4;

        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d20);

        $d22 = 8.0 * d78;

        $d23 = 1.0 / $d22;

        $d24 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d23);

        d5 = $d21 * $d24;

        $d29 = d4 / d2;

        $d26 = neg d2;

        $d25 = 1.0 + d2;

        $d27 = $d26 * $d25;

        $d28 = $d27 / d4;

        $d30 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d28);

        d6 = $d29 * $d30;

        $d31 = d5 + d6;

        d7 = $d31 + 1.0;

        d8 = d5 / d7;

        d9 = d6 / d7;

        $d32 = 8.0 * d78;

        d10 = 1.0 / $d32;

     label07:
        $r6 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d11 = interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $b18 = d11 cmpg d8;

        if $b18 > 0 goto label11;

        $r3 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d12 = interfaceinvoke $r3.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d63 = d78 + d3;

        $d64 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d63);

        $d65 = d12 * $d64;

        d88 = $d65 - 0.5;

        $b11 = d88 cmpl d2;

        if $b11 > 0 goto label07;

        $d66 = neg d78;

        $b12 = d88 cmpg $d66;

        if $b12 >= 0 goto label08;

        goto label07;

     label08:
        $b13 = d88 cmpg 0.0;

        if $b13 >= 0 goto label09;

        $d89 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d88);

        goto label10;

     label09:
        $d89 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d88);

     label10:
        d90 = $d89;

        $r4 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        d13 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d69 = neg d13;

        $d67 = d12 * d12;

        $d68 = $d67 / 2.0;

        $d70 = $d69 - $d68;

        d91 = $d70 + d10;

        goto label13;

     label11:
        $d33 = d8 + d9;

        $b4 = d11 cmpl $d33;

        if $b4 <= 0 goto label12;

        d92 = d78;

        goto label20;

     label12:
        $d34 = d4 / d2;

        $r1 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        $d35 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d36 = $d34 * $d35;

        d88 = d2 + $d36;

        d90 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d88);

        $r2 = r0.<org.apache.commons.math3.distribution.PoissonDistribution: org.apache.commons.math3.distribution.ExponentialDistribution exponential>;

        $d37 = virtualinvoke $r2.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        $d41 = neg $d37;

        $d38 = d88 + 1.0;

        $d39 = d2 * $d38;

        $d40 = $d39 / d4;

        d91 = $d41 - $d40;

     label13:
        $b5 = d88 cmpg 0.0;

        if $b5 >= 0 goto label14;

        $z1 = 1;

        goto label15;

     label14:
        $z1 = 0;

     label15:
        z2 = $z1;

        $d42 = d90 + 1.0;

        $d44 = d90 * $d42;

        $d43 = 2.0 * d78;

        d93 = $d44 / $d43;

        $d45 = neg d93;

        $b6 = d91 cmpg $d45;

        if $b6 >= 0 goto label16;

        if $z1 != 0 goto label16;

        d92 = d78 + d90;

        goto label20;

     label16:
        $d46 = 2.0 * d90;

        $d48 = $d46 + 1.0;

        $d47 = 6.0 * d78;

        $d49 = $d48 / $d47;

        $d50 = $d49 - 1.0;

        d94 = d93 * $d50;

        $d56 = d93 * d93;

        $d52 = (double) z2;

        $d51 = d90 + 1.0;

        $d53 = $d52 * $d51;

        $d54 = d78 + $d53;

        $d55 = 3.0 * $d54;

        $d57 = $d56 / $d55;

        d95 = d94 - $d57;

        $b7 = d91 cmpg d95;

        if $b7 >= 0 goto label17;

        d92 = d78 + d90;

        goto label20;

     label17:
        $b8 = d91 cmpl d94;

        if $b8 <= 0 goto label18;

        goto label07;

     label18:
        $d59 = d90 * d80;

        $d58 = d90 + d78;

        $i9 = (int) $d58;

        $d60 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>($i9);

        $d61 = $d59 - $d60;

        $d62 = $d61 + d81;

        $b10 = d91 cmpg $d62;

        if $b10 >= 0 goto label19;

        d92 = d78 + d90;

        goto label20;

     label19:
        goto label07;

     label20:
        $l19 = (long) d92;

        $l20 = l0 + $l19;

        return $l20;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.PoissonDistribution: long serialVersionUID> = -3349935121172596109L;

        <org.apache.commons.math3.distribution.PoissonDistribution: double DEFAULT_EPSILON> = 1.0E-12;

        <org.apache.commons.math3.distribution.PoissonDistribution: int DEFAULT_MAX_ITERATIONS> = 10000000;

        return;
    }
}
