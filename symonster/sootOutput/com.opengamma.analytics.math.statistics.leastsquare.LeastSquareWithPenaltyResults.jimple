public class com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults extends com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults
{
    private final double _penalty;

    public void <init>(double, double, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults r0;
        double d0, d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults: void <init>(double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(d0, r1, r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegative(double,java.lang.String)>(d1, "penalty");

        r0.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults: double _penalty> = d1;

        return;
    }

    public void <init>(double, double, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults r0;
        double d0, d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2, r3;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r3 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults: void <init>(double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(d0, r1, r2, r3);

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegative(double,java.lang.String)>(d1, "penalty");

        r0.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults: double _penalty> = d1;

        return;
    }

    public double getPenalty()
    {
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults;

        $d0 = r0.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareWithPenaltyResults: double _penalty>;

        return $d0;
    }
}
