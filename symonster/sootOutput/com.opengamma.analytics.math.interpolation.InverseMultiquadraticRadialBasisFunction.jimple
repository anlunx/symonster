public class com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final double _scaleFactor;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor> = 1.0;

        return;
    }

    public void <init>(double)
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0;
        double d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        $d1 = d0 * d0;

        r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor> = $d1;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0;
        java.lang.Double r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d3 = $d0 * $d1;

        $d2 = r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor>;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d6 = 1.0 / $d5;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r2;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0;
        long l1, $l2, $l3;
        double $d0;
        int $i4, $i5, i7;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        $d0 = r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor>;

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i5 = 31 * 1;

        $l2 = l1 >>> 32;

        $l3 = l1 ^ $l2;

        $i4 = (int) $l3;

        i7 = $i5 + $i4;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction) r1;

        $d0 = r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: double _scaleFactor>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.InverseMultiquadraticRadialBasisFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
