public class org.apache.commons.math.optimization.LeastSquaresConverter extends java.lang.Object implements org.apache.commons.math.analysis.MultivariateRealFunction
{
    private final org.apache.commons.math.analysis.MultivariateVectorialFunction function;
    private final double[] observations;
    private final double[] weights;
    private final org.apache.commons.math.linear.RealMatrix scale;

    public void <init>(org.apache.commons.math.analysis.MultivariateVectorialFunction, double[])
    {
        org.apache.commons.math.optimization.LeastSquaresConverter r0;
        org.apache.commons.math.analysis.MultivariateVectorialFunction r1;
        double[] r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math.optimization.LeastSquaresConverter;

        r1 := @parameter0: org.apache.commons.math.analysis.MultivariateVectorialFunction;

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.analysis.MultivariateVectorialFunction function> = r1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations> = $r4;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] weights> = null;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.linear.RealMatrix scale> = null;

        return;
    }

    public void <init>(org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.LeastSquaresConverter r0;
        org.apache.commons.math.analysis.MultivariateVectorialFunction r1;
        double[] r2, r3, $r5, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r4, $r6;
        java.lang.Object[] $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.apache.commons.math.optimization.LeastSquaresConverter;

        r1 := @parameter0: org.apache.commons.math.analysis.MultivariateVectorialFunction;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r8 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[0] = $r10;

        $i3 = lengthof r3;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r12;

     label1:
        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.analysis.MultivariateVectorialFunction function> = r1;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations> = $r5;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] weights> = $r7;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.linear.RealMatrix scale> = null;

        return;
    }

    public void <init>(org.apache.commons.math.analysis.MultivariateVectorialFunction, double[], org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.LeastSquaresConverter r0;
        org.apache.commons.math.analysis.MultivariateVectorialFunction r1;
        double[] r2, $r5;
        org.apache.commons.math.linear.RealMatrix r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r4;
        java.lang.Object[] $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.commons.math.optimization.LeastSquaresConverter;

        r1 := @parameter0: org.apache.commons.math.analysis.MultivariateVectorialFunction;

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r2;

        $i1 = interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        if $i0 == $i1 goto label1;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r7 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[0] = $r9;

        $i3 = interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r11;

     label1:
        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.analysis.MultivariateVectorialFunction function> = r1;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations> = $r5;

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] weights> = null;

        $r6 = interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix copy()>();

        r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.linear.RealMatrix scale> = $r6;

        return;
    }

    public double value(double[]) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.LeastSquaresConverter r0;
        double[] r1, r2, $r4, $r5, $r8, $r9, $r14, r16;
        org.apache.commons.math.analysis.MultivariateVectorialFunction $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11;
        org.apache.commons.math.linear.RealMatrix $r6, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11;
        org.apache.commons.math.FunctionEvaluationException $r10;
        java.lang.Object[] $r11;
        org.apache.commons.math.exception.util.LocalizedFormats $r12;
        java.lang.Integer $r13, $r15;

        r0 := @this: org.apache.commons.math.optimization.LeastSquaresConverter;

        r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.analysis.MultivariateVectorialFunction function>;

        r2 = interfaceinvoke $r3.<org.apache.commons.math.analysis.MultivariateVectorialFunction: double[] value(double[])>(r1);

        $i1 = lengthof r2;

        $r4 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations>;

        $i0 = lengthof $r4;

        if $i1 == $i0 goto label01;

        $r10 = new org.apache.commons.math.FunctionEvaluationException;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r11 = newarray (java.lang.Object)[2];

        $i4 = lengthof r2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r11[0] = $r13;

        $r14 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations>;

        $i5 = lengthof $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[1] = $r15;

        specialinvoke $r10.<org.apache.commons.math.FunctionEvaluationException: void <init>(double[],org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>(r1, $r12, $r11);

        throw $r10;

     label01:
        i6 = 0;

     label02:
        $i2 = lengthof r2;

        if i6 >= $i2 goto label03;

        $d6 = r2[i6];

        $r9 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] observations>;

        $d5 = $r9[i6];

        $d7 = $d6 - $d5;

        r2[i6] = $d7;

        i6 = i6 + 1;

        goto label02;

     label03:
        d8 = 0.0;

        $r5 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] weights>;

        if $r5 == null goto label06;

        i7 = 0;

     label04:
        $i3 = lengthof r2;

        if i7 >= $i3 goto label05;

        d9 = r2[i7];

        $r8 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: double[] weights>;

        $d2 = $r8[i7];

        $d3 = $d2 * d9;

        $d4 = $d3 * d9;

        d8 = d8 + $d4;

        i7 = i7 + 1;

        goto label04;

     label05:
        goto label11;

     label06:
        $r6 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.linear.RealMatrix scale>;

        if $r6 == null goto label09;

        $r7 = r0.<org.apache.commons.math.optimization.LeastSquaresConverter: org.apache.commons.math.linear.RealMatrix scale>;

        r16 = interfaceinvoke $r7.<org.apache.commons.math.linear.RealMatrix: double[] operate(double[])>(r2);

        i8 = lengthof r16;

        i9 = 0;

     label07:
        if i9 >= i8 goto label08;

        d10 = r16[i9];

        $d1 = d10 * d10;

        d8 = d8 + $d1;

        i9 = i9 + 1;

        goto label07;

     label08:
        goto label11;

     label09:
        i10 = lengthof r2;

        i11 = 0;

     label10:
        if i11 >= i10 goto label11;

        d11 = r2[i11];

        $d0 = d11 * d11;

        d8 = d8 + $d0;

        i11 = i11 + 1;

        goto label10;

     label11:
        return d8;
    }
}
