public class org.apache.commons.math3.linear.ArrayFieldVector extends java.lang.Object implements org.apache.commons.math3.linear.FieldVector, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.commons.math3.FieldElement[] data;
    private final org.apache.commons.math3.Field field;

    public void <init>(org.apache.commons.math3.Field)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,int)>(r1, 0);

        return;
    }

    public void <init>(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;
        int i0;
        java.lang.Object[] $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = r1;

        $r2 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r1, i0);

        $r3 = (org.apache.commons.math3.FieldElement[]) $r2;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r3;

        return;
    }

    public void <init>(int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[] $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,int)>($r2, i0);

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r3, r1);

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1, $r6;
        org.apache.commons.math3.FieldElement $r3;
        org.apache.commons.math3.Field $r4;
        java.lang.Object $r5;
        java.lang.ArrayIndexOutOfBoundsException $r7;
        org.apache.commons.math3.exception.ZeroException $r8;
        java.lang.Object[] $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

     label1:
        $r3 = r1[0];

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r4;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.math3.exception.ZeroException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke $r8.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = r1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r4;

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[], boolean) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1, $r9;
        boolean z0;
        int $i0;
        org.apache.commons.math3.FieldElement $r2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.exception.ZeroException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.ZeroException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label1:
        $r2 = r1[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r3;

        if z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (org.apache.commons.math3.FieldElement[]) $r4;

        goto label3;

     label2:
        $r9 = r1;

     label3:
        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r9;

        return;
    }

    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[], boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2, $r5;
        boolean z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = r1;

        if z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (org.apache.commons.math3.FieldElement[]) $r3;

        goto label2;

     label1:
        $r5 = r2;

     label2:
        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r5;

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[], int, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.FieldElement $r2;
        org.apache.commons.math3.Field $r3, $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r8;
        java.lang.Integer $r9, $r10;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i3 = lengthof r1;

        $i2 = i0 + i1;

        if $i3 >= $i2 goto label1;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i4 = i0 + i1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r9, $r10, 1);

        throw $r8;

     label1:
        $r2 = r1[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r3;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, i1);

        $r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r6;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r7, 0, i1);

        return;
    }

    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[], int, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        $i3 = lengthof r2;

        $i2 = i0 + i1;

        if $i3 >= $i2 goto label1;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i4 = i0 + i1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = lengthof r2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r7, $r8, 1);

        throw $r6;

     label1:
        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = r1;

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r1, i1);

        $r4 = (org.apache.commons.math3.FieldElement[]) $r3;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r4;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r5, 0, i1);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.Field $r2, $r3;
        int $i0, $i1, i2;
        java.lang.Object[] $r4;
        org.apache.commons.math3.FieldElement[] $r5, $r6, $r7;
        org.apache.commons.math3.FieldElement $r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r2;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r3, $i0);

        $r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r5;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r7[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[] $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r2;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r5;

        return;
    }

    public void <init>(org.apache.commons.math3.linear.ArrayFieldVector, boolean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        boolean z0;
        org.apache.commons.math3.Field $r2;
        org.apache.commons.math3.FieldElement[] $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r2;

        if z0 == 0 goto label1;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (org.apache.commons.math3.FieldElement[]) $r4;

        goto label2;

     label1:
        $r6 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

     label2:
        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r6;

        return;
    }

    public void <init>(org.apache.commons.math3.linear.ArrayFieldVector, org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        r2 := @parameter1: org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.FieldVector,org.apache.commons.math3.linear.FieldVector)>(r1, r2);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.FieldVector, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r11, $r12;
        org.apache.commons.math3.linear.FieldVector r1, r2;
        org.apache.commons.math3.FieldElement[] r3, $r8, $r9, $r10, $r13, $r14;
        org.apache.commons.math3.Field $r5, $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        r2 := @parameter1: org.apache.commons.math3.linear.FieldVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r5;

        $z0 = r1 instanceof org.apache.commons.math3.linear.ArrayFieldVector;

        if $z0 == 0 goto label1;

        $r12 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r13 = $r12.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        goto label2;

     label1:
        $r13 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

     label2:
        r3 = $r13;

        $z1 = r2 instanceof org.apache.commons.math3.linear.ArrayFieldVector;

        if $z1 == 0 goto label3;

        $r11 = (org.apache.commons.math3.linear.ArrayFieldVector) r2;

        $r14 = $r11.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        goto label4;

     label3:
        $r14 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

     label4:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $i1 = lengthof r3;

        $i0 = lengthof $r14;

        $i2 = $i1 + $i0;

        $r7 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r6, $i2);

        $r8 = (org.apache.commons.math3.FieldElement[]) $r7;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r8;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i3 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r9, 0, $i3);

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i5 = lengthof r3;

        $i4 = lengthof $r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r10, $i5, $i4);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.ArrayFieldVector, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        org.apache.commons.math3.FieldElement[] r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.FieldVector,org.apache.commons.math3.FieldElement[])>(r1, r2);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.FieldVector, org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r10;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement[] r2, $r7, $r8, $r9, $r11;
        org.apache.commons.math3.Field $r4, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r4;

        $z0 = r1 instanceof org.apache.commons.math3.linear.ArrayFieldVector;

        if $z0 == 0 goto label1;

        $r10 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r11 = $r10.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        goto label2;

     label1:
        $r11 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

     label2:
        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $i1 = lengthof $r11;

        $i0 = lengthof r2;

        $i2 = $i1 + $i0;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i2);

        $r7 = (org.apache.commons.math3.FieldElement[]) $r6;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r7;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i3 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r8, 0, $i3);

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i5 = lengthof $r11;

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r9, $i5, $i4);

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[], org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r2;
        org.apache.commons.math3.FieldElement[] r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        r2 := @parameter1: org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.FieldElement[],org.apache.commons.math3.linear.FieldVector)>(r1, r2);

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[], org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r10;
        org.apache.commons.math3.FieldElement[] r1, $r7, $r8, $r9, $r11;
        org.apache.commons.math3.linear.FieldVector r2;
        org.apache.commons.math3.Field $r4, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        r2 := @parameter1: org.apache.commons.math3.linear.FieldVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r4;

        $z0 = r2 instanceof org.apache.commons.math3.linear.ArrayFieldVector;

        if $z0 == 0 goto label1;

        $r10 = (org.apache.commons.math3.linear.ArrayFieldVector) r2;

        $r11 = $r10.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        goto label2;

     label1:
        $r11 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement[] toArray()>();

     label2:
        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $i1 = lengthof r1;

        $i0 = lengthof $r11;

        $i2 = $i1 + $i0;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i2);

        $r7 = (org.apache.commons.math3.FieldElement[]) $r6;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r7;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r8, 0, $i3);

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i5 = lengthof r1;

        $i4 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r9, $i5, $i4);

        return;
    }

    public void <init>(org.apache.commons.math3.FieldElement[], org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1, r2, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.commons.math3.FieldElement $r3, $r10;
        org.apache.commons.math3.Field $r4, $r11;
        java.lang.Object[] $r5, $r13;
        org.apache.commons.math3.exception.ZeroException $r12;
        org.apache.commons.math3.exception.util.LocalizedFormats $r14;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement[];

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        $i2 = $i1 + $i0;

        if $i2 != 0 goto label1;

        $r12 = new org.apache.commons.math3.exception.ZeroException;

        $r14 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r12.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r12;

     label1:
        $r3 = r1[0];

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        $i5 = $i4 + $i3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i5);

        $r6 = (org.apache.commons.math3.FieldElement[]) $r5;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r6;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i6 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r7, 0, $i6);

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r8, $i8, $i7);

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[0];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = $r11;

        return;
    }

    public void <init>(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[], org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field r1;
        org.apache.commons.math3.FieldElement[] r2, r3, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] $r4, $r9;
        org.apache.commons.math3.exception.ZeroException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.Field;

        r2 := @parameter1: org.apache.commons.math3.FieldElement[];

        r3 := @parameter2: org.apache.commons.math3.FieldElement[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r3);

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        $i2 = $i1 + $i0;

        if $i2 != 0 goto label1;

        $r8 = new org.apache.commons.math3.exception.ZeroException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r9 = newarray (java.lang.Object)[0];

        specialinvoke $r8.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label1:
        $i4 = lengthof r2;

        $i3 = lengthof r3;

        $i5 = $i4 + $i3;

        $r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r1, $i5);

        $r5 = (org.apache.commons.math3.FieldElement[]) $r4;

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data> = $r5;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i6 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i6);

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i8 = lengthof r2;

        $i7 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r7, $i8, $i7);

        r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field> = r1;

        return;
    }

    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.Field $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        return $r1;
    }

    public org.apache.commons.math3.linear.FieldVector copy()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = new org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.ArrayFieldVector,boolean)>(r0, 1);

        return $r1;
    }

    public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r4, $r5, $r11;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement[] r3, $r7, $r10, $r13;
        java.lang.ClassCastException $r6;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r8, $r12;
        java.lang.Object[] $r9;
        org.apache.commons.math3.FieldElement $r14, $r15, $r17;
        java.lang.Object $r16;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.ArrayFieldVector add(org.apache.commons.math3.linear.ArrayFieldVector)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r7;

        $r9 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r8, $i0);

        r3 = (org.apache.commons.math3.FieldElement[]) $r9;

        i2 = 0;

     label4:
        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r10;

        if i2 >= $i1 goto label5;

        $r13 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r14 = $r13[i2];

        $r15 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r16 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r15);

        $r17 = (org.apache.commons.math3.FieldElement) $r16;

        r3[i2] = $r17;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r11 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r12 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r11.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r12, r3, 0);

        return $r11;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector add(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r8;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r4, $r7, $r10, $r11;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.Field $r5, $r9;
        java.lang.Object[] $r6;
        org.apache.commons.math3.FieldElement $r12, $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r4;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i1);

        r2 = (org.apache.commons.math3.FieldElement[]) $r6;

        i3 = 0;

     label1:
        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r7;

        if i3 >= $i2 goto label2;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r13 = $r10[i3];

        $r11 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r12 = $r11[i3];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r12);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r2[i3] = $r15;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r8 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r9, r2, 0);

        return $r8;
    }

    public org.apache.commons.math3.linear.FieldVector subtract(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r4, $r5, $r11;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement[] r3, $r7, $r10, $r13;
        java.lang.ClassCastException $r6;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r8, $r12;
        java.lang.Object[] $r9;
        org.apache.commons.math3.FieldElement $r14, $r15, $r17;
        java.lang.Object $r16;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.ArrayFieldVector subtract(org.apache.commons.math3.linear.ArrayFieldVector)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r7;

        $r9 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r8, $i0);

        r3 = (org.apache.commons.math3.FieldElement[]) $r9;

        i2 = 0;

     label4:
        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r10;

        if i2 >= $i1 goto label5;

        $r13 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r14 = $r13[i2];

        $r15 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r16 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r15);

        $r17 = (org.apache.commons.math3.FieldElement) $r16;

        r3[i2] = $r17;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r11 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r12 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r11.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r12, r3, 0);

        return $r11;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector subtract(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r8;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r4, $r7, $r10, $r11;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.Field $r5, $r9;
        java.lang.Object[] $r6;
        org.apache.commons.math3.FieldElement $r12, $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r4;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i1);

        r2 = (org.apache.commons.math3.FieldElement[]) $r6;

        i3 = 0;

     label1:
        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r7;

        if i3 >= $i2 goto label2;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r13 = $r10[i3];

        $r11 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r12 = $r11[i3];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>($r12);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r2[i3] = $r15;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r8 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r9, r2, 0);

        return $r8;
    }

    public org.apache.commons.math3.linear.FieldVector mapAdd(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r7;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r6, $r9;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i0);

        r2 = (org.apache.commons.math3.FieldElement[]) $r5;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[i2];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r8, r2, 0);

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r4, $r7;
        org.apache.commons.math3.FieldElement[] $r2, $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = $r3[i1];

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        $r5[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapSubtract(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r7;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r6, $r9;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i0);

        r2 = (org.apache.commons.math3.FieldElement[]) $r5;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[i2];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r8, r2, 0);

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r4, $r7;
        org.apache.commons.math3.FieldElement[] $r2, $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = $r3[i1];

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object subtract(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        $r5[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r7;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r6, $r9;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i0);

        r2 = (org.apache.commons.math3.FieldElement[]) $r5;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[i2];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r8, r2, 0);

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r4, $r7;
        org.apache.commons.math3.FieldElement[] $r2, $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = $r3[i1];

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        $r5[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapDivide(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r7;
        org.apache.commons.math3.FieldElement r1, $r10, $r12;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r6, $r9;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i0);

        r2 = (org.apache.commons.math3.FieldElement[]) $r5;

        i2 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[i2];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>(r1);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r8, r2, 0);

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r4, $r7;
        org.apache.commons.math3.FieldElement[] $r2, $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = $r3[i1];

        $r6 = interfaceinvoke $r4.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>(r1);

        $r7 = (org.apache.commons.math3.FieldElement) $r6;

        $r5[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.FieldVector mapInv() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r10;
        org.apache.commons.math3.FieldElement[] r1, $r4, $r9, $r12;
        org.apache.commons.math3.FieldElement r2, $r13, $r15;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r5, $r7, $r11;
        java.lang.Object[] $r6, $r18;
        java.lang.Object $r8, $r14;
        org.apache.commons.math3.exception.MathArithmeticException $r16, $r17;
        org.apache.commons.math3.exception.util.LocalizedFormats $r19;
        java.lang.Integer $r20;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r4;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i0);

        r1 = (org.apache.commons.math3.FieldElement[]) $r6;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r2 = (org.apache.commons.math3.FieldElement) $r8;

        i2 = 0;

     label1:
        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r9;

        if i2 >= $i1 goto label6;

     label2:
        $r12 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r13 = $r12[i2];

        $r14 = interfaceinvoke r2.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r13);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r1[i2] = $r15;

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        $r17 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r19 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r18[0] = $r20;

        specialinvoke $r17.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r19, $r18);

        throw $r17;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r10 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r11 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r10.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r11, r1, 0);

        return $r10;

        catch org.apache.commons.math3.exception.MathArithmeticException from label2 to label3 with label4;
    }

    public org.apache.commons.math3.linear.FieldVector mapInvToSelf() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1, $r7, $r10;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4, $r9;
        org.apache.commons.math3.FieldElement[] $r5, $r6, $r8;
        int $i0, i1;
        org.apache.commons.math3.exception.MathArithmeticException $r11, $r12;
        java.lang.Object[] $r13;
        org.apache.commons.math3.exception.util.LocalizedFormats $r14;
        java.lang.Integer $r15;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r1 = (org.apache.commons.math3.FieldElement) $r4;

        i1 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label6;

     label2:
        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r7 = $r6[i1];

        $r9 = interfaceinvoke r1.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r7);

        $r10 = (org.apache.commons.math3.FieldElement) $r9;

        $r8[i1] = $r10;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r14 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r13 = newarray (java.lang.Object)[1];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13[0] = $r15;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r12;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return r0;

        catch org.apache.commons.math3.exception.MathArithmeticException from label2 to label3 with label4;
    }

    public org.apache.commons.math3.linear.FieldVector ebeMultiply(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r4, $r5, $r11;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement[] r3, $r7, $r10, $r13;
        java.lang.ClassCastException $r6;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r8, $r12;
        java.lang.Object[] $r9;
        org.apache.commons.math3.FieldElement $r14, $r15, $r17;
        java.lang.Object $r16;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.ArrayFieldVector ebeMultiply(org.apache.commons.math3.linear.ArrayFieldVector)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r7;

        $r9 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r8, $i0);

        r3 = (org.apache.commons.math3.FieldElement[]) $r9;

        i2 = 0;

     label4:
        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r10;

        if i2 >= $i1 goto label5;

        $r13 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r14 = $r13[i2];

        $r15 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r16 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r15);

        $r17 = (org.apache.commons.math3.FieldElement) $r16;

        r3[i2] = $r17;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r11 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r12 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r11.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r12, r3, 0);

        return $r11;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector ebeMultiply(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r8;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r4, $r7, $r10, $r11;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.Field $r5, $r9;
        java.lang.Object[] $r6;
        org.apache.commons.math3.FieldElement $r12, $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r4;

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r5, $i1);

        r2 = (org.apache.commons.math3.FieldElement[]) $r6;

        i3 = 0;

     label1:
        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r7;

        if i3 >= $i2 goto label2;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r13 = $r10[i3];

        $r11 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r12 = $r11[i3];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r15 = (org.apache.commons.math3.FieldElement) $r14;

        r2[i3] = $r15;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r8 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r9, r2, 0);

        return $r8;
    }

    public org.apache.commons.math3.linear.FieldVector ebeDivide(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r5, $r6, $r12;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement[] r3, $r8, $r11, $r14;
        java.lang.ClassCastException $r7;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r9, $r13;
        java.lang.Object[] $r10, $r21;
        org.apache.commons.math3.FieldElement $r15, $r16, $r18;
        java.lang.Object $r17;
        org.apache.commons.math3.exception.MathArithmeticException $r19, $r20;
        org.apache.commons.math3.exception.util.LocalizedFormats $r22;
        java.lang.Integer $r23;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r5 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.ArrayFieldVector ebeDivide(org.apache.commons.math3.linear.ArrayFieldVector)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r8;

        $r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r9, $i0);

        r3 = (org.apache.commons.math3.FieldElement[]) $r10;

        i2 = 0;

     label4:
        $r11 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r11;

        if i2 >= $i1 goto label9;

     label5:
        $r14 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r15 = $r14[i2];

        $r16 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r17 = interfaceinvoke $r15.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r16);

        $r18 = (org.apache.commons.math3.FieldElement) $r17;

        r3[i2] = $r18;

     label6:
        goto label8;

     label7:
        $r19 := @caughtexception;

        $r20 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r22 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r21 = newarray (java.lang.Object)[1];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r21[0] = $r23;

        specialinvoke $r20.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r22, $r21);

        throw $r20;

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        $r12 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r13 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r12.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r13, r3, 0);

        return $r12;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch org.apache.commons.math3.exception.MathArithmeticException from label5 to label6 with label7;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector ebeDivide(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r9;
        org.apache.commons.math3.FieldElement[] r2, $r4, $r5, $r8, $r11, $r12;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.Field $r6, $r10;
        java.lang.Object[] $r7, $r19;
        org.apache.commons.math3.FieldElement $r13, $r14, $r16;
        java.lang.Object $r15;
        org.apache.commons.math3.exception.MathArithmeticException $r17, $r18;
        org.apache.commons.math3.exception.util.LocalizedFormats $r20;
        java.lang.Integer $r21;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r4 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r4;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r5;

        $r7 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r6, $i1);

        r2 = (org.apache.commons.math3.FieldElement[]) $r7;

        i3 = 0;

     label1:
        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r8;

        if i3 >= $i2 goto label6;

     label2:
        $r11 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r14 = $r11[i3];

        $r12 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r13 = $r12[i3];

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r13);

        $r16 = (org.apache.commons.math3.FieldElement) $r15;

        r2[i3] = $r16;

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r20 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r19 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r19[0] = $r21;

        specialinvoke $r18.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r18;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r9 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r9.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r10, r2, 0);

        return $r9;

        catch org.apache.commons.math3.exception.MathArithmeticException from label2 to label3 with label4;
    }

    public org.apache.commons.math3.FieldElement[] getData()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.FieldElement[]) $r2;

        return $r3;
    }

    public org.apache.commons.math3.FieldElement[] getDataRef()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] $r1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        return $r1;
    }

    public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r3;
        org.apache.commons.math3.linear.FieldVector r1;
        org.apache.commons.math3.FieldElement $r4, $r10, $r11, r14;
        java.lang.ClassCastException $r5;
        org.apache.commons.math3.Field $r6;
        java.lang.Object $r7, $r12, $r13;
        org.apache.commons.math3.FieldElement[] $r8, $r9;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r3 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.ArrayFieldVector)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r14 = (org.apache.commons.math3.FieldElement) $r7;

        i1 = 0;

     label4:
        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r8;

        if i1 >= $i0 goto label5;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r9[i1];

        $r11 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i1);

        $r12 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r11);

        $r13 = interfaceinvoke r14.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r12);

        r14 = (org.apache.commons.math3.FieldElement) $r13;

        i1 = i1 + 1;

        goto label4;

     label5:
        return r14;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        org.apache.commons.math3.FieldElement[] $r2, $r5, $r6, $r7;
        int $i0, $i1, i2;
        org.apache.commons.math3.Field $r3;
        java.lang.Object $r4, $r10, $r11;
        org.apache.commons.math3.FieldElement $r8, $r9, r12;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r12 = (org.apache.commons.math3.FieldElement) $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r9 = $r6[i2];

        $r7 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r8 = $r7[i2];

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r8);

        $r11 = interfaceinvoke r12.<org.apache.commons.math3.FieldElement: java.lang.Object add(java.lang.Object)>($r10);

        r12 = (org.apache.commons.math3.FieldElement) $r11;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r12;
    }

    public org.apache.commons.math3.linear.FieldVector projection(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVector r1, $r6;
        org.apache.commons.math3.FieldElement $r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector)>(r1);

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r3);

        $r5 = (org.apache.commons.math3.FieldElement) $r4;

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement)>($r5);

        return $r6;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector projection(org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r7;
        org.apache.commons.math3.FieldElement $r2, $r3, $r5;
        java.lang.Object $r4;
        org.apache.commons.math3.linear.FieldVector $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.ArrayFieldVector)>(r1);

        $r3 = virtualinvoke r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.ArrayFieldVector)>(r1);

        $r4 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: java.lang.Object divide(java.lang.Object)>($r3);

        $r5 = (org.apache.commons.math3.FieldElement) $r4;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement)>($r5);

        $r7 = (org.apache.commons.math3.linear.ArrayFieldVector) $r6;

        return $r7;
    }

    public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.FieldVector)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r4;
        org.apache.commons.math3.linear.FieldVector r1;
        int i0, i1, i2, i3;
        org.apache.commons.math3.linear.FieldMatrix $r5;
        java.lang.ClassCastException $r6;
        org.apache.commons.math3.FieldElement[] $r7, $r10;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r8;
        org.apache.commons.math3.Field $r9;
        org.apache.commons.math3.FieldElement $r11, $r12, $r14;
        java.lang.Object $r13;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r4 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.ArrayFieldVector)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        i0 = lengthof $r7;

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $r8 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r9 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r8.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r9, i0, i1);

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r11 = $r10[i2];

        $r12 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r13 = interfaceinvoke $r11.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r14 = (org.apache.commons.math3.FieldElement) $r13;

        interfaceinvoke $r8.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r14);

        i3 = i3 + 1;

        goto label5;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        return $r8;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.ArrayFieldVector)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        int i0, i1, i2, i3;
        org.apache.commons.math3.FieldElement[] $r3, $r4, $r7, $r8;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r5;
        org.apache.commons.math3.Field $r6;
        org.apache.commons.math3.FieldElement $r9, $r10, $r12;
        java.lang.Object $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        i0 = lengthof $r3;

        $r4 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        i1 = lengthof $r4;

        $r5 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>($r6, i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r10 = $r7[i2];

        $r8 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r9 = $r8[i3];

        $r11 = interfaceinvoke $r10.<org.apache.commons.math3.FieldElement: java.lang.Object multiply(java.lang.Object)>($r9);

        $r12 = (org.apache.commons.math3.FieldElement) $r11;

        interfaceinvoke $r5.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i2, i3, $r12);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r5;
    }

    public org.apache.commons.math3.FieldElement getEntry(int)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0;
        org.apache.commons.math3.FieldElement[] $r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getDimension()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.FieldVector)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r3, $r4, $r6, $r7;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r3 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.linear.ArrayFieldVector append(org.apache.commons.math3.linear.ArrayFieldVector)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r7 = new org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.FieldVector)>(r1);

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.ArrayFieldVector,org.apache.commons.math3.linear.ArrayFieldVector)>(r0, $r7);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.linear.ArrayFieldVector append(org.apache.commons.math3.linear.ArrayFieldVector)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = new org.apache.commons.math3.linear.ArrayFieldVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.linear.ArrayFieldVector,org.apache.commons.math3.linear.ArrayFieldVector)>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r9;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[] r2, $r3, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.Field $r4, $r10;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r3;

        $i1 = $i0 + 1;

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>($r4, $i1);

        r2 = (org.apache.commons.math3.FieldElement[]) $r5;

        $r7 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i2);

        $r8 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i3 = lengthof $r8;

        r2[$i3] = r1;

        $r9 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r10 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r9.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r10, r2, 0);

        return $r9;
    }

    public org.apache.commons.math3.linear.FieldVector getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r3;
        int i0, i1, $i2, $i3;
        org.apache.commons.math3.Field $r4;
        org.apache.commons.math3.FieldElement[] $r5, $r6;
        org.apache.commons.math3.exception.NotPositiveException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9;
        java.lang.IndexOutOfBoundsException $r10;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        $r7 = new org.apache.commons.math3.exception.NotPositiveException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r7.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r8, $r9);

        throw $r7;

     label1:
        $r3 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.Field field>;

        specialinvoke $r3.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,int)>($r4, i1);

     label2:
        $r6 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r5 = $r3.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r5, 0, i1);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>(i0);

        $i2 = i0 + i1;

        $i3 = $i2 - 1;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>($i3);

     label5:
        return $r3;

        catch java.lang.IndexOutOfBoundsException from label2 to label3 with label4;
    }

    public void setEntry(int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[] $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.FieldElement;

     label1:
        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3[i0] = r1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>(i0);

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setSubVector(int, org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.math3.linear.FieldVector r1;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.ClassCastException $r4;
        org.apache.commons.math3.FieldElement[] $r5;
        org.apache.commons.math3.FieldElement $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.FieldVector;

     label1:
        $r2 = (org.apache.commons.math3.linear.ArrayFieldVector) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void set(int,org.apache.commons.math3.linear.ArrayFieldVector)>(i0, $r2);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        i7 = i0;

     label4:
        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $i5 = i0 + $i4;

        if i7 >= $i5 goto label5;

        $r5 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i6 = i7 - i0;

        $r6 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>($i6);

        $r5[i7] = $r6;

        i7 = i7 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>(i0);

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        $i2 = i0 + $i1;

        $i3 = $i2 - 1;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>($i3);

     label7:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label1 to label5 with label6;
    }

    public void set(int, org.apache.commons.math3.linear.ArrayFieldVector) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0, r1;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math3.FieldElement[] $r3, $r4, $r5, $r7;
        java.lang.IndexOutOfBoundsException $r6;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.linear.ArrayFieldVector;

     label1:
        $r5 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r3 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, i0, $i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>(i0);

        $r7 = r1.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r7;

        $i3 = i0 + $i2;

        $i4 = $i3 - 1;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndex(int)>($i4);

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void set(org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.FieldElement[] $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.FieldElement;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, r1);

        return;
    }

    public org.apache.commons.math3.FieldElement[] toArray()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.FieldElement[]) $r2;

        return $r3;
    }

    protected void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVector r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkVectorDimensions(int)>($i0);

        return;
    }

    protected void checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0, $i1, $i2;
        org.apache.commons.math3.FieldElement[] $r1, $r3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r3;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r2;

     label1:
        return;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, $i1, i2;
        org.apache.commons.math3.FieldElement $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void visit(int,org.apache.commons.math3.FieldElement)>(i2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: void visit(int,org.apache.commons.math3.FieldElement)>(i3, $r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorPreservingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorPreservingVisitor r1;
        int i0, i1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor,int,int)>(r1, i0, i1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, $i1, i2;
        org.apache.commons.math3.FieldElement $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i2);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement visit(int,org.apache.commons.math3.FieldElement)>(i2, $r3);

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i2, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement visit(int,org.apache.commons.math3.FieldElement)>(i3, $r3);

        virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: void setEntry(int,org.apache.commons.math3.FieldElement)>(i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldVectorChangingVisitor: org.apache.commons.math3.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.linear.FieldVectorChangingVisitor r1;
        int i0, i1;
        org.apache.commons.math3.FieldElement $r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: org.apache.commons.math3.linear.FieldVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor,int,int)>(r1, i0, i1);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        java.lang.Object r1;
        org.apache.commons.math3.FieldElement[] $r2, $r3, $r4;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.FieldElement $r5, $r6;
        boolean $z0;
        java.lang.ClassCastException $r7;
        org.apache.commons.math3.linear.FieldVector r8;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        r8 = (org.apache.commons.math3.linear.FieldVector) r1;

        $r2 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i0 = lengthof $r2;

        $i1 = interfaceinvoke r8.<org.apache.commons.math3.linear.FieldVector: int getDimension()>();

        if $i0 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i3 = 0;

     label5:
        $r3 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $i2 = lengthof $r3;

        if i3 >= $i2 goto label8;

        $r4 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        $r5 = $r4[i3];

        $r6 = interfaceinvoke r8.<org.apache.commons.math3.linear.FieldVector: org.apache.commons.math3.FieldElement getEntry(int)>(i3);

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label7;

     label6:
        return 0;

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        return 1;

     label9:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label2 to label3 with label9;
        catch java.lang.ClassCastException from label4 to label6 with label9;
        catch java.lang.ClassCastException from label7 to label8 with label9;
    }

    public int hashCode()
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        org.apache.commons.math3.FieldElement[] r1;
        int i0, $i1, i2, i3;
        org.apache.commons.math3.FieldElement r2;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i2 = 3542;

        r1 = r0.<org.apache.commons.math3.linear.ArrayFieldVector: org.apache.commons.math3.FieldElement[] data>;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r2 = r1[i3];

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i2 = i2 ^ $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    private void checkIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        $i2 = $i1 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }

    private void checkIndices(int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.ArrayFieldVector r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.OutOfRangeException $r1, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r7, $r12;
        java.lang.Integer $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r11;

        r0 := @this: org.apache.commons.math3.linear.ArrayFieldVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.ArrayFieldVector: int getDimension()>();

        if i0 < 0 goto label1;

        if i0 < i2 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i3 = i2 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        if i1 < 0 goto label3;

        if i1 < i2 goto label4;

     label3:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i4 = i2 - 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r7, $r8, $r9, $r10);

        throw $r6;

     label4:
        if i1 >= i0 goto label5;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r12, $r13, $r14, 0);

        throw $r11;

     label5:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.ArrayFieldVector: long serialVersionUID> = 7648186910365927050L;

        return;
    }
}
