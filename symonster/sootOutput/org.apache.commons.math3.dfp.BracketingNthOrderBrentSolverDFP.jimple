public class org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP extends java.lang.Object
{
    private static final int MAXIMAL_AGING;
    private final int maximalOrder;
    private final org.apache.commons.math3.dfp.Dfp functionValueAccuracy;
    private final org.apache.commons.math3.dfp.Dfp absoluteAccuracy;
    private final org.apache.commons.math3.dfp.Dfp relativeAccuracy;
    private final org.apache.commons.math3.util.Incrementor evaluations;

    public void <init>(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.dfp.Dfp r1, r2, r3;
        int i0;
        org.apache.commons.math3.util.Incrementor $r4;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;
        java.lang.Integer $r6, $r7;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r2 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        r3 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r4.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations> = $r4;

        if i0 >= 2 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label1:
        r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: int maximalOrder> = i0;

        r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp absoluteAccuracy> = r2;

        r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp relativeAccuracy> = r1;

        r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp functionValueAccuracy> = r3;

        return;
    }

    public int getMaximalOrder()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $i0 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: int maximalOrder>;

        return $i0;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $r1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $r1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public org.apache.commons.math3.dfp.Dfp getAbsoluteAccuracy()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $r1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp absoluteAccuracy>;

        return $r1;
    }

    public org.apache.commons.math3.dfp.Dfp getRelativeAccuracy()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $r1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp relativeAccuracy>;

        return $r1;
    }

    public org.apache.commons.math3.dfp.Dfp getFunctionValueAccuracy()
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.dfp.Dfp $r1;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        $r1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp functionValueAccuracy>;

        return $r1;
    }

    public org.apache.commons.math3.dfp.Dfp solve(int, org.apache.commons.math3.dfp.UnivariateDfpFunction, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        int i0;
        org.apache.commons.math3.dfp.UnivariateDfpFunction r1;
        org.apache.commons.math3.dfp.Dfp r2, r3, $r5, $r6, $r7;
        org.apache.commons.math3.analysis.solvers.AllowedSolution r4;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.dfp.UnivariateDfpFunction;

        r2 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        r3 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        r4 := @parameter4: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        $r5 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r3);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp solve(int,org.apache.commons.math3.dfp.UnivariateDfpFunction,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.analysis.solvers.AllowedSolution)>(i0, r1, r2, r3, $r6, r4);

        return $r7;
    }

    public org.apache.commons.math3.dfp.Dfp solve(int, org.apache.commons.math3.dfp.UnivariateDfpFunction, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.analysis.solvers.AllowedSolution) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, $i24, $i25, $i26, $i27, $i28;
        org.apache.commons.math3.dfp.UnivariateDfpFunction r1;
        org.apache.commons.math3.dfp.Dfp r2, r3, r4, r6, r7, r11, r12, r13, r15, r16, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r49, $r51, $r52, $r53, $r54, $r55, $r56, $r57, r58, r59, r60, r61, r62, r63, $r64, $r65, $r66, $r67, $r68, r69, r70, $r71;
        org.apache.commons.math3.analysis.solvers.AllowedSolution r5;
        org.apache.commons.math3.dfp.Dfp[] r8, r9, r10;
        org.apache.commons.math3.util.Incrementor $r17, $r18, $r19, $r23, $r30, $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.apache.commons.math3.exception.NoBracketingException $r37;
        double $d0, $d1, $d2, $d3;
        int[] $r47;
        org.apache.commons.math3.exception.MathInternalError $r48;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.dfp.UnivariateDfpFunction;

        r2 := @parameter2: org.apache.commons.math3.dfp.Dfp;

        r3 := @parameter3: org.apache.commons.math3.dfp.Dfp;

        r4 := @parameter4: org.apache.commons.math3.dfp.Dfp;

        r5 := @parameter5: org.apache.commons.math3.analysis.solvers.AllowedSolution;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r17 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r17.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i0);

        $r18 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r18.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        r6 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r7 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        $i1 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: int maximalOrder>;

        $i2 = $i1 + 1;

        r8 = newarray (org.apache.commons.math3.dfp.Dfp)[$i2];

        $i3 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: int maximalOrder>;

        $i4 = $i3 + 1;

        r9 = newarray (org.apache.commons.math3.dfp.Dfp)[$i4];

        r8[0] = r2;

        r8[1] = r4;

        r8[2] = r3;

        $r19 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r19.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r20 = r8[1];

        $r21 = interfaceinvoke r1.<org.apache.commons.math3.dfp.UnivariateDfpFunction: org.apache.commons.math3.dfp.Dfp value(org.apache.commons.math3.dfp.Dfp)>($r20);

        r9[1] = $r21;

        $r22 = r9[1];

        $z0 = virtualinvoke $r22.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z0 == 0 goto label01;

        $r57 = r8[1];

        return $r57;

     label01:
        $r23 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r23.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r24 = r8[0];

        $r25 = interfaceinvoke r1.<org.apache.commons.math3.dfp.UnivariateDfpFunction: org.apache.commons.math3.dfp.Dfp value(org.apache.commons.math3.dfp.Dfp)>($r24);

        r9[0] = $r25;

        $r26 = r9[0];

        $z1 = virtualinvoke $r26.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z1 == 0 goto label02;

        $r56 = r8[0];

        return $r56;

     label02:
        $r28 = r9[0];

        $r27 = r9[1];

        $r29 = virtualinvoke $r28.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r27);

        $z2 = virtualinvoke $r29.<org.apache.commons.math3.dfp.Dfp: boolean negativeOrNull()>();

        if $z2 == 0 goto label03;

        i18 = 2;

        i19 = 1;

        goto label06;

     label03:
        $r30 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r30.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r31 = r8[2];

        $r32 = interfaceinvoke r1.<org.apache.commons.math3.dfp.UnivariateDfpFunction: org.apache.commons.math3.dfp.Dfp value(org.apache.commons.math3.dfp.Dfp)>($r31);

        r9[2] = $r32;

        $r33 = r9[2];

        $z3 = virtualinvoke $r33.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z3 == 0 goto label04;

        $r55 = r8[2];

        return $r55;

     label04:
        $r35 = r9[1];

        $r34 = r9[2];

        $r36 = virtualinvoke $r35.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r34);

        $z4 = virtualinvoke $r36.<org.apache.commons.math3.dfp.Dfp: boolean negativeOrNull()>();

        if $z4 == 0 goto label05;

        i18 = 3;

        i19 = 2;

        goto label06;

     label05:
        $r37 = new org.apache.commons.math3.exception.NoBracketingException;

        $r38 = r8[0];

        $d0 = virtualinvoke $r38.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        $r39 = r8[2];

        $d1 = virtualinvoke $r39.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        $r40 = r9[0];

        $d2 = virtualinvoke $r40.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        $r41 = r9[2];

        $d3 = virtualinvoke $r41.<org.apache.commons.math3.dfp.Dfp: double toDouble()>();

        specialinvoke $r37.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        throw $r37;

     label06:
        $i5 = lengthof r8;

        r10 = newarray (org.apache.commons.math3.dfp.Dfp)[$i5];

        $i6 = i19 - 1;

        r58 = r8[$i6];

        $i7 = i19 - 1;

        r59 = r9[$i7];

        r11 = virtualinvoke r58.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        r60 = virtualinvoke r59.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        i20 = 0;

        r61 = r8[i19];

        r62 = r9[i19];

        r12 = virtualinvoke r61.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        r63 = virtualinvoke r62.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        i21 = 0;

     label07:
        $z13 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r12);

        if $z13 == 0 goto label08;

        $r64 = r12;

        goto label09;

     label08:
        $r64 = r11;

     label09:
        r13 = $r64;

        $z5 = virtualinvoke r60.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r63);

        if $z5 == 0 goto label10;

        $r65 = r63;

        goto label11;

     label10:
        $r65 = r60;

     label11:
        $r43 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp absoluteAccuracy>;

        $r42 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp relativeAccuracy>;

        $r44 = virtualinvoke $r42.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r13);

        r15 = virtualinvoke $r43.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r44);

        $r45 = virtualinvoke r61.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r58);

        $r46 = virtualinvoke $r45.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r15);

        $z6 = virtualinvoke $r46.<org.apache.commons.math3.dfp.Dfp: boolean negativeOrNull()>();

        if $z6 != 0 goto label12;

        $r49 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp functionValueAccuracy>;

        $z9 = virtualinvoke $r65.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r49);

        if $z9 == 0 goto label25;

     label12:
        $r47 = <org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP$1: int[] $SwitchMap$org$apache$commons$math3$analysis$solvers$AllowedSolution>;

        $i8 = virtualinvoke r5.<org.apache.commons.math3.analysis.solvers.AllowedSolution: int ordinal()>();

        $i9 = $r47[$i8];

        tableswitch($i9)
        {
            case 1: goto label13;
            case 2: goto label16;
            case 3: goto label17;
            case 4: goto label18;
            case 5: goto label21;
            default: goto label24;
        };

     label13:
        $z14 = virtualinvoke r60.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r63);

        if $z14 == 0 goto label14;

        $r66 = r58;

        goto label15;

     label14:
        $r66 = r61;

     label15:
        return $r66;

     label16:
        return r58;

     label17:
        return r61;

     label18:
        $z8 = virtualinvoke r59.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r6);

        if $z8 == 0 goto label19;

        $r67 = r58;

        goto label20;

     label19:
        $r67 = r61;

     label20:
        return $r67;

     label21:
        $z7 = virtualinvoke r59.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r6);

        if $z7 == 0 goto label22;

        $r68 = r61;

        goto label23;

     label22:
        $r68 = r58;

     label23:
        return $r68;

     label24:
        $r48 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r48.<org.apache.commons.math3.exception.MathInternalError: void <init>(java.lang.Throwable)>(null);

        throw $r48;

     label25:
        if i20 < 2 goto label26;

        $r54 = virtualinvoke r62.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(16);

        r69 = virtualinvoke $r54.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        goto label28;

     label26:
        if i21 < 2 goto label27;

        $r53 = virtualinvoke r59.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(16);

        r69 = virtualinvoke $r53.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        goto label28;

     label27:
        r69 = r6;

     label28:
        i22 = 0;

        i23 = i18;

     label29:
        $i24 = i23 - i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, i22, r10, i22, $i24);

        r70 = specialinvoke r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.dfp.Dfp guessX(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[],int,int)>(r69, r10, r9, i22, i23);

        $z15 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r58);

        if $z15 == 0 goto label30;

        $z12 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r61);

        if $z12 != 0 goto label33;

     label30:
        $i11 = i19 - i22;

        $i10 = i23 - i19;

        if $i11 < $i10 goto label31;

        i22 = i22 + 1;

        goto label32;

     label31:
        i23 = i23 + -1;

     label32:
        r70 = r7;

     label33:
        $z16 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z16 == 0 goto label34;

        $i17 = i23 - i22;

        if $i17 > 1 goto label29;

     label34:
        $z10 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z10 == 0 goto label35;

        $r51 = virtualinvoke r61.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r58);

        $r52 = virtualinvoke $r51.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r70 = virtualinvoke r58.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r52);

        i22 = i19 - 1;

        i23 = i19;

     label35:
        $r50 = r0.<org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r50.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        r16 = interfaceinvoke r1.<org.apache.commons.math3.dfp.UnivariateDfpFunction: org.apache.commons.math3.dfp.Dfp value(org.apache.commons.math3.dfp.Dfp)>(r70);

        $z11 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: boolean isZero()>();

        if $z11 == 0 goto label36;

        return r70;

     label36:
        if i18 <= 2 goto label37;

        $i16 = i23 - i22;

        if $i16 == i18 goto label37;

        i18 = i23 - i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, i22, r8, 0, i18);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, i22, r9, 0, i18);

        i19 = i19 - i22;

        goto label38;

     label37:
        $i12 = lengthof r8;

        if i18 != $i12 goto label38;

        i18 = i18 + -1;

        $i13 = lengthof r8;

        $i14 = $i13 + 1;

        $i15 = $i14 / 2;

        if i19 < $i15 goto label38;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 1, r8, 0, i18);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 1, r9, 0, i18);

        i19 = i19 + -1;

     label38:
        $i25 = i19 + 1;

        $i26 = i18 - i19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, i19, r8, $i25, $i26);

        r8[i19] = r70;

        $i27 = i19 + 1;

        $i28 = i18 - i19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, i19, r9, $i27, $i28);

        r9[i19] = r16;

        i18 = i18 + 1;

        $r71 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r59);

        $z17 = virtualinvoke $r71.<org.apache.commons.math3.dfp.Dfp: boolean negativeOrNull()>();

        if $z17 == 0 goto label39;

        r61 = r70;

        r62 = r16;

        r63 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        i20 = i20 + 1;

        i21 = 0;

        goto label40;

     label39:
        r58 = r70;

        r59 = r16;

        r60 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp abs()>();

        i20 = 0;

        i21 = i21 + 1;

        i19 = i19 + 1;

     label40:
        goto label07;
    }

    private org.apache.commons.math3.dfp.Dfp guessX(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[], int, int)
    {
        org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP r0;
        org.apache.commons.math3.dfp.Dfp r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r15;
        org.apache.commons.math3.dfp.Dfp[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;

        r0 := @this: org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP;

        r1 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r2 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        r3 := @parameter2: org.apache.commons.math3.dfp.Dfp[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i6 = i0;

     label1:
        $i2 = i1 - 1;

        if i6 >= $i2 goto label4;

        $i3 = i6 + 1;

        i7 = $i3 - i0;

        i8 = i1 - 1;

     label2:
        if i8 <= i6 goto label3;

        $r9 = r2[i8];

        $i4 = i8 - 1;

        $r8 = r2[$i4];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r8);

        $r12 = r3[i8];

        $i5 = i8 - i7;

        $r11 = r3[$i5];

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r11);

        $r14 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r13);

        r2[i8] = $r14;

        i8 = i8 + -1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        r15 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        i9 = i1 - 1;

     label5:
        if i9 < i0 goto label6;

        $r5 = r2[i9];

        $r4 = r3[i9];

        $r6 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r7 = virtualinvoke r15.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        r15 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r7);

        i9 = i9 + -1;

        goto label5;

     label6:
        return r15;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP: int MAXIMAL_AGING> = 2;

        return;
    }
}
