public class org.apache.commons.lang.math.NumberUtils extends java.lang.Object
{
    public static final java.lang.Long LONG_ZERO;
    public static final java.lang.Long LONG_ONE;
    public static final java.lang.Long LONG_MINUS_ONE;
    public static final java.lang.Integer INTEGER_ZERO;
    public static final java.lang.Integer INTEGER_ONE;
    public static final java.lang.Integer INTEGER_MINUS_ONE;
    public static final java.lang.Short SHORT_ZERO;
    public static final java.lang.Short SHORT_ONE;
    public static final java.lang.Short SHORT_MINUS_ONE;
    public static final java.lang.Byte BYTE_ZERO;
    public static final java.lang.Byte BYTE_ONE;
    public static final java.lang.Byte BYTE_MINUS_ONE;
    public static final java.lang.Double DOUBLE_ZERO;
    public static final java.lang.Double DOUBLE_ONE;
    public static final java.lang.Double DOUBLE_MINUS_ONE;
    public static final java.lang.Float FLOAT_ZERO;
    public static final java.lang.Float FLOAT_ONE;
    public static final java.lang.Float FLOAT_MINUS_ONE;

    public void <init>()
    {
        org.apache.commons.lang.math.NumberUtils r0;

        r0 := @this: org.apache.commons.lang.math.NumberUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int stringToInt(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int toInt(java.lang.String)>(r0);

        return $i0;
    }

    public static int toInt(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int toInt(java.lang.String,int)>(r0, 0);

        return $i0;
    }

    public static int stringToInt(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int toInt(java.lang.String,int)>(r0, i0);

        return $i1;
    }

    public static int toInt(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label2:
        return $i1;

     label3:
        $r2 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static long toLong(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: long toLong(java.lang.String,long)>(r0, 0L);

        return $l0;
    }

    public static long toLong(java.lang.String, long)
    {
        java.lang.String r0;
        long l0, $l1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        return l0;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0);

     label2:
        return $l1;

     label3:
        $r2 := @caughtexception;

        return l0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static float toFloat(java.lang.String)
    {
        java.lang.String r0;
        float $f0;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: float toFloat(java.lang.String,float)>(r0, 0.0F);

        return $f0;
    }

    public static float toFloat(java.lang.String, float)
    {
        java.lang.String r0;
        float f0, $f1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        if r0 != null goto label1;

        return f0;

     label1:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

     label2:
        return $f1;

     label3:
        $r2 := @caughtexception;

        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static double toDouble(java.lang.String)
    {
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: double toDouble(java.lang.String,double)>(r0, 0.0);

        return $d0;
    }

    public static double toDouble(java.lang.String, double)
    {
        java.lang.String r0;
        double d0, $d1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        if r0 != null goto label1;

        return d0;

     label1:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

     label2:
        return $d1;

     label3:
        $r2 := @caughtexception;

        return d0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static byte toByte(java.lang.String)
    {
        java.lang.String r0;
        byte $b0;

        r0 := @parameter0: java.lang.String;

        $b0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: byte toByte(java.lang.String,byte)>(r0, 0);

        return $b0;
    }

    public static byte toByte(java.lang.String, byte)
    {
        java.lang.String r0;
        byte b0, $b1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        if r0 != null goto label1;

        return b0;

     label1:
        $b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r0);

     label2:
        return $b1;

     label3:
        $r2 := @caughtexception;

        return b0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static short toShort(java.lang.String)
    {
        java.lang.String r0;
        short $s0;

        r0 := @parameter0: java.lang.String;

        $s0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: short toShort(java.lang.String,short)>(r0, 0);

        return $s0;
    }

    public static short toShort(java.lang.String, short)
    {
        java.lang.String r0;
        short s0, $s1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        if r0 != null goto label1;

        return s0;

     label1:
        $s1 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(r0);

     label2:
        return $s1;

     label3:
        $r2 := @caughtexception;

        return s0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.Number createNumber(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7, $r15, $r20, $r25, r38, r39, r40, r41, $r47, r53;
        char c0, $c14;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16, z17, $z18;
        java.lang.Integer $r1, $r5;
        java.math.BigDecimal $r2, $r8;
        double $d0, $d1;
        byte $b8, $b9, $b15, $b16;
        float $f0, $f1, $f2;
        java.lang.Long $r6, $r32;
        java.lang.NumberFormatException $r11, $r16, $r21, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r37, $r43;
        java.lang.StringBuffer $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24, $r44, $r45, $r46;
        java.math.BigInteger $r29, $r36;
        java.lang.Float r48, r56;
        java.lang.Double r50, r58;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0);

        if $z0 == 0 goto label02;

        $r26 = new java.lang.NumberFormatException;

        specialinvoke $r26.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number");

        throw $r26;

     label02:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z1 == 0 goto label03;

        return null;

     label03:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z2 != 0 goto label04;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-0x");

        if $z3 == 0 goto label05;

     label04:
        $r1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(r0);

        return $r1;

     label05:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(101);

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(69);

        $i7 = $i5 + $i6;

        i2 = $i7 + 1;

        if i1 <= -1 goto label10;

        if i2 <= -1 goto label08;

        if i2 < i1 goto label06;

        $i24 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 <= $i24 goto label07;

     label06:
        $r21 = new java.lang.NumberFormatException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid number.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label07:
        $i25 = i1 + 1;

        r38 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i25, i2);

        goto label09;

     label08:
        $i23 = i1 + 1;

        r38 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i23);

     label09:
        r39 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label14;

     label10:
        if i2 <= -1 goto label12;

        $i22 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 <= $i22 goto label11;

        $r16 = new java.lang.NumberFormatException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid number.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label11:
        r39 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        goto label13;

     label12:
        r39 = r0;

     label13:
        r38 = null;

     label14:
        $z11 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        if $z11 != 0 goto label37;

        if c0 == 46 goto label37;

        if i2 <= -1 goto label15;

        $i17 = virtualinvoke r0.<java.lang.String: int length()>();

        $i18 = $i17 - 1;

        if i2 >= $i18 goto label15;

        $i19 = i2 + 1;

        $i20 = virtualinvoke r0.<java.lang.String: int length()>();

        $i21 = $i20 - 1;

        r40 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i19, $i21);

        goto label16;

     label15:
        r40 = null;

     label16:
        $i26 = virtualinvoke r0.<java.lang.String: int length()>();

        $i27 = $i26 - 1;

        r41 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i27);

        $z12 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isAllZeros(java.lang.String)>(r39);

        if $z12 == 0 goto label17;

        $z10 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isAllZeros(java.lang.String)>(r40);

        if $z10 == 0 goto label17;

        $z13 = 1;

        goto label18;

     label17:
        $z13 = 0;

     label18:
        z14 = $z13;

        lookupswitch(c0)
        {
            case 68: goto label29;
            case 70: goto label25;
            case 76: goto label19;
            case 100: goto label29;
            case 102: goto label25;
            case 108: goto label19;
            default: goto label36;
        };

     label19:
        if r38 != null goto label24;

        if r40 != null goto label24;

        $c14 = virtualinvoke r41.<java.lang.String: char charAt(int)>(0);

        if $c14 != 45 goto label20;

        $r7 = virtualinvoke r41.<java.lang.String: java.lang.String substring(int)>(1);

        $z8 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isDigits(java.lang.String)>($r7);

        if $z8 != 0 goto label21;

     label20:
        $z7 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isDigits(java.lang.String)>(r41);

        if $z7 == 0 goto label24;

     label21:
        $r6 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(r41);

     label22:
        return $r6;

     label23:
        $r28 := @caughtexception;

        $r29 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(r41);

        return $r29;

     label24:
        $r43 = new java.lang.NumberFormatException;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid number.");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r47);

        throw $r43;

     label25:
        r48 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(r41);

        $z9 = virtualinvoke r48.<java.lang.Float: boolean isInfinite()>();

        if $z9 != 0 goto label27;

        $f2 = virtualinvoke r48.<java.lang.Float: float floatValue()>();

        $b16 = $f2 cmpl 0.0F;

        if $b16 != 0 goto label26;

        if $z13 == 0 goto label27;

     label26:
        return r48;

     label27:
        goto label29;

     label28:
        $r37 := @caughtexception;

     label29:
        r50 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(r41);

        $z15 = virtualinvoke r50.<java.lang.Double: boolean isInfinite()>();

        if $z15 != 0 goto label31;

        $f1 = virtualinvoke r50.<java.lang.Double: float floatValue()>();

        $d1 = (double) $f1;

        $b15 = $d1 cmpl 0.0;

        if $b15 != 0 goto label30;

        if z14 == 0 goto label31;

     label30:
        return r50;

     label31:
        goto label33;

     label32:
        $r34 := @caughtexception;

     label33:
        $r8 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(r41);

     label34:
        return $r8;

     label35:
        $r30 := @caughtexception;

     label36:
        $r11 = new java.lang.NumberFormatException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a valid number.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label37:
        if i2 <= -1 goto label38;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        if i2 >= $i11 goto label38;

        $i12 = i2 + 1;

        $i13 = virtualinvoke r0.<java.lang.String: int length()>();

        r53 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i12, $i13);

        goto label39;

     label38:
        r53 = null;

     label39:
        if r38 != null goto label46;

        if r53 != null goto label46;

     label40:
        $r5 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(r0);

     label41:
        return $r5;

     label42:
        $r31 := @caughtexception;

     label43:
        $r32 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(r0);

     label44:
        return $r32;

     label45:
        $r35 := @caughtexception;

        $r36 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(r0);

        return $r36;

     label46:
        $z4 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isAllZeros(java.lang.String)>(r39);

        if $z4 == 0 goto label47;

        $z6 = staticinvoke <org.apache.commons.lang.math.NumberUtils: boolean isAllZeros(java.lang.String)>(r53);

        if $z6 == 0 goto label47;

        $z16 = 1;

        goto label48;

     label47:
        $z16 = 0;

     label48:
        z17 = $z16;

     label49:
        r56 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(r0);

        $z18 = virtualinvoke r56.<java.lang.Float: boolean isInfinite()>();

        if $z18 != 0 goto label51;

        $f0 = virtualinvoke r56.<java.lang.Float: float floatValue()>();

        $b9 = $f0 cmpl 0.0F;

        if $b9 != 0 goto label50;

        if $z16 == 0 goto label51;

     label50:
        return r56;

     label51:
        goto label53;

     label52:
        $r27 := @caughtexception;

     label53:
        r58 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(r0);

        $z5 = virtualinvoke r58.<java.lang.Double: boolean isInfinite()>();

        if $z5 != 0 goto label55;

        $d0 = virtualinvoke r58.<java.lang.Double: double doubleValue()>();

        $b8 = $d0 cmpl 0.0;

        if $b8 != 0 goto label54;

        if z17 == 0 goto label55;

     label54:
        return r58;

     label55:
        goto label57;

     label56:
        $r33 := @caughtexception;

     label57:
        $r2 = staticinvoke <org.apache.commons.lang.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(r0);

        return $r2;

        catch java.lang.NumberFormatException from label21 to label22 with label23;
        catch java.lang.NumberFormatException from label25 to label26 with label28;
        catch java.lang.NumberFormatException from label29 to label30 with label32;
        catch java.lang.NumberFormatException from label33 to label34 with label35;
        catch java.lang.NumberFormatException from label40 to label41 with label42;
        catch java.lang.NumberFormatException from label43 to label44 with label45;
        catch java.lang.NumberFormatException from label49 to label50 with label52;
        catch java.lang.NumberFormatException from label53 to label54 with label56;
    }

    private static boolean isAllZeros(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, i3;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 48 goto label3;

        return 0;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public static java.lang.Float createFloat(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Float $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.Double createDouble(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Double $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.Integer createInteger(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.Long createLong(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r0);

        return $r1;
    }

    public static java.math.BigInteger createBigInteger(java.lang.String)
    {
        java.lang.String r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static java.math.BigDecimal createBigDecimal(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        java.math.BigDecimal $r1;
        java.lang.NumberFormatException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        $r2 = new java.lang.NumberFormatException;

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("A blank string is not a valid number");

        throw $r2;

     label2:
        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static long min(long[])
    {
        long[] r0;
        int $i0, $i1, i5;
        long $l2, l4;
        byte $b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        l4 = r0[0];

        i5 = 1;

     label3:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label5;

        $l2 = r0[i5];

        $b3 = $l2 cmp l4;

        if $b3 >= 0 goto label4;

        l4 = r0[i5];

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        return l4;
    }

    public static int min(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        i3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $i2 = r0[i4];

        if $i2 >= i3 goto label4;

        i3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return i3;
    }

    public static short min(short[])
    {
        short[] r0;
        int $i0, $i1, i4;
        short $s2, s3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        s3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $s2 = r0[i4];

        if $s2 >= s3 goto label4;

        s3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return s3;
    }

    public static byte min(byte[])
    {
        byte[] r0;
        int $i0, $i1, i4;
        byte $b2, b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        b3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $b2 = r0[i4];

        if $b2 >= b3 goto label4;

        b3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return b3;
    }

    public static double min(double[])
    {
        double[] r0;
        int $i0, $i1, i3;
        double $d0, $d1, d2;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        d2 = r0[0];

        i3 = 1;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label6;

        $d0 = r0[i3];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        return #NaN;

     label4:
        $d1 = r0[i3];

        $b2 = $d1 cmpg d2;

        if $b2 >= 0 goto label5;

        d2 = r0[i3];

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return d2;
    }

    public static float min(float[])
    {
        float[] r0;
        int $i0, $i1, i3;
        float $f0, $f1, f2;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        f2 = r0[0];

        i3 = 1;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label6;

        $f0 = r0[i3];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 == 0 goto label4;

        return #NaNF;

     label4:
        $f1 = r0[i3];

        $b2 = $f1 cmpg f2;

        if $b2 >= 0 goto label5;

        f2 = r0[i3];

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return f2;
    }

    public static long max(long[])
    {
        long[] r0;
        int $i0, $i1, i5;
        long $l2, l4;
        byte $b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        l4 = r0[0];

        i5 = 1;

     label3:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label5;

        $l2 = r0[i5];

        $b3 = $l2 cmp l4;

        if $b3 <= 0 goto label4;

        l4 = r0[i5];

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        return l4;
    }

    public static int max(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        i3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $i2 = r0[i4];

        if $i2 <= i3 goto label4;

        i3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return i3;
    }

    public static short max(short[])
    {
        short[] r0;
        int $i0, $i1, i4;
        short $s2, s3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        s3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $s2 = r0[i4];

        if $s2 <= s3 goto label4;

        s3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return s3;
    }

    public static byte max(byte[])
    {
        byte[] r0;
        int $i0, $i1, i4;
        byte $b2, b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        b3 = r0[0];

        i4 = 1;

     label3:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label5;

        $b2 = r0[i4];

        if $b2 <= b3 goto label4;

        b3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return b3;
    }

    public static double max(double[])
    {
        double[] r0;
        int $i0, $i1, i3;
        double $d0, $d1, d2;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        d2 = r0[0];

        i3 = 1;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label6;

        $d0 = r0[i3];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label4;

        return #NaN;

     label4:
        $d1 = r0[i3];

        $b2 = $d1 cmpl d2;

        if $b2 <= 0 goto label5;

        d2 = r0[i3];

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return d2;
    }

    public static float max(float[])
    {
        float[] r0;
        int $i0, $i1, i3;
        float $f0, $f1, f2;
        boolean $z0;
        byte $b2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        f2 = r0[0];

        i3 = 1;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label6;

        $f0 = r0[i3];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 == 0 goto label4;

        return #NaNF;

     label4:
        $f1 = r0[i3];

        $b2 = $f1 cmpl f2;

        if $b2 <= 0 goto label5;

        f2 = r0[i3];

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return f2;
    }

    public static long min(long, long, long)
    {
        long l0, l1, l4;
        byte $b2, $b3;

        l4 := @parameter0: long;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $b2 = l0 cmp l4;

        if $b2 >= 0 goto label1;

        l4 = l0;

     label1:
        $b3 = l1 cmp l4;

        if $b3 >= 0 goto label2;

        l4 = l1;

     label2:
        return l4;
    }

    public static int min(int, int, int)
    {
        int i0, i1, i2;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= i2 goto label1;

        i2 = i0;

     label1:
        if i1 >= i2 goto label2;

        i2 = i1;

     label2:
        return i2;
    }

    public static short min(short, short, short)
    {
        short s0, s1, s2;

        s2 := @parameter0: short;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        if s0 >= s2 goto label1;

        s2 = s0;

     label1:
        if s1 >= s2 goto label2;

        s2 = s1;

     label2:
        return s2;
    }

    public static byte min(byte, byte, byte)
    {
        byte b0, b1, b2;

        b2 := @parameter0: byte;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        if b0 >= b2 goto label1;

        b2 = b0;

     label1:
        if b1 >= b2 goto label2;

        b2 = b1;

     label2:
        return b2;
    }

    public static double min(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>($d3, d2);

        return $d4;
    }

    public static float min(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f1);

        $f4 = staticinvoke <java.lang.Math: float min(float,float)>($f3, f2);

        return $f4;
    }

    public static long max(long, long, long)
    {
        long l0, l1, l4;
        byte $b2, $b3;

        l4 := @parameter0: long;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $b2 = l0 cmp l4;

        if $b2 <= 0 goto label1;

        l4 = l0;

     label1:
        $b3 = l1 cmp l4;

        if $b3 <= 0 goto label2;

        l4 = l1;

     label2:
        return l4;
    }

    public static int max(int, int, int)
    {
        int i0, i1, i2;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i2 goto label1;

        i2 = i0;

     label1:
        if i1 <= i2 goto label2;

        i2 = i1;

     label2:
        return i2;
    }

    public static short max(short, short, short)
    {
        short s0, s1, s2;

        s2 := @parameter0: short;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        if s0 <= s2 goto label1;

        s2 = s0;

     label1:
        if s1 <= s2 goto label2;

        s2 = s1;

     label2:
        return s2;
    }

    public static byte max(byte, byte, byte)
    {
        byte b0, b1, b2;

        b2 := @parameter0: byte;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        if b0 <= b2 goto label1;

        b2 = b0;

     label1:
        if b1 <= b2 goto label2;

        b2 = b1;

     label2:
        return b2;
    }

    public static double max(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        $d4 = staticinvoke <java.lang.Math: double max(double,double)>($d3, d2);

        return $d4;
    }

    public static float max(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f1);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f3, f2);

        return $f4;
    }

    public static int compare(double, double)
    {
        double d0, d1;
        long l0, l1;
        byte $b2, $b3, $b4, $b5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label1;

        return -1;

     label1:
        $b3 = d0 cmpl d1;

        if $b3 <= 0 goto label2;

        return 1;

     label2:
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b4 = l0 cmp l1;

        if $b4 != 0 goto label3;

        return 0;

     label3:
        $b5 = l0 cmp l1;

        if $b5 >= 0 goto label4;

        return -1;

     label4:
        return 1;
    }

    public static int compare(float, float)
    {
        float f0, f1;
        int i0, i1;
        byte $b2, $b3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b2 = f0 cmpg f1;

        if $b2 >= 0 goto label1;

        return -1;

     label1:
        $b3 = f0 cmpl f1;

        if $b3 <= 0 goto label2;

        return 1;

     label2:
        i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        if i0 != i1 goto label3;

        return 0;

     label3:
        if i0 >= i1 goto label4;

        return -1;

     label4:
        return 1;
    }

    public static boolean isDigits(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;
        int $i0, i2;
        char $c1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isNumber(java.lang.String)
    {
        java.lang.String r0;
        char[] r1;
        byte b0, $b33;
        boolean $z0, z1, z2, z3, z4, $z5, $z6;
        char $c1, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c11, $c12, $c13, $c14, $c15, $c16, $c17, $c18, $c19, $c20, $c21, $c22, $c24, $c26, $c27, $c28, $c29, $c30, $c31;
        int $i2, $i10, $i23, $i25, i32, i34, i35, i36, $i37;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i32 = lengthof r1;

        z1 = 0;

        z2 = 0;

        z3 = 0;

        z4 = 0;

        $c1 = r1[0];

        if $c1 != 45 goto label02;

        $b33 = 1;

        goto label03;

     label02:
        $b33 = 0;

     label03:
        b0 = $b33;

        $i2 = $b33 + 1;

        if i32 <= $i2 goto label10;

        $c22 = r1[$b33];

        if $c22 != 48 goto label10;

        $i23 = $b33 + 1;

        $c24 = r1[$i23];

        if $c24 != 120 goto label10;

        i34 = $b33 + 2;

        if i34 != i32 goto label04;

        return 0;

     label04:
        $i25 = lengthof r1;

        if i34 >= $i25 goto label09;

        $c26 = r1[i34];

        if $c26 < 48 goto label05;

        $c31 = r1[i34];

        if $c31 <= 57 goto label08;

     label05:
        $c27 = r1[i34];

        if $c27 < 97 goto label06;

        $c30 = r1[i34];

        if $c30 <= 102 goto label08;

     label06:
        $c28 = r1[i34];

        if $c28 < 65 goto label07;

        $c29 = r1[i34];

        if $c29 <= 70 goto label08;

     label07:
        return 0;

     label08:
        i34 = i34 + 1;

        goto label04;

     label09:
        return 1;

     label10:
        i35 = i32 + -1;

        i36 = b0;

     label11:
        if i36 < i35 goto label12;

        $i10 = i35 + 1;

        if i36 >= $i10 goto label25;

        if z3 == 0 goto label25;

        if z4 != 0 goto label25;

     label12:
        $c3 = r1[i36];

        if $c3 < 48 goto label13;

        $c9 = r1[i36];

        if $c9 > 57 goto label13;

        z4 = 1;

        z3 = 0;

        goto label24;

     label13:
        $c4 = r1[i36];

        if $c4 != 46 goto label16;

        if z2 != 0 goto label14;

        if z1 == 0 goto label15;

     label14:
        return 0;

     label15:
        z2 = 1;

        goto label24;

     label16:
        $c5 = r1[i36];

        if $c5 == 101 goto label17;

        $c6 = r1[i36];

        if $c6 != 69 goto label20;

     label17:
        if z1 == 0 goto label18;

        return 0;

     label18:
        if z4 != 0 goto label19;

        return 0;

     label19:
        z1 = 1;

        z3 = 1;

        goto label24;

     label20:
        $c7 = r1[i36];

        if $c7 == 43 goto label21;

        $c8 = r1[i36];

        if $c8 != 45 goto label23;

     label21:
        if z3 != 0 goto label22;

        return 0;

     label22:
        z3 = 0;

        z4 = 0;

        goto label24;

     label23:
        return 0;

     label24:
        i36 = i36 + 1;

        goto label11;

     label25:
        $i37 = lengthof r1;

        if i36 >= $i37 goto label38;

        $c11 = r1[i36];

        if $c11 < 48 goto label26;

        $c21 = r1[i36];

        if $c21 > 57 goto label26;

        return 1;

     label26:
        $c12 = r1[i36];

        if $c12 == 101 goto label27;

        $c13 = r1[i36];

        if $c13 != 69 goto label28;

     label27:
        return 0;

     label28:
        $c14 = r1[i36];

        if $c14 != 46 goto label31;

        if z2 != 0 goto label29;

        if z1 == 0 goto label30;

     label29:
        return 0;

     label30:
        return z4;

     label31:
        if z3 != 0 goto label33;

        $c17 = r1[i36];

        if $c17 == 100 goto label32;

        $c18 = r1[i36];

        if $c18 == 68 goto label32;

        $c19 = r1[i36];

        if $c19 == 102 goto label32;

        $c20 = r1[i36];

        if $c20 != 70 goto label33;

     label32:
        return z4;

     label33:
        $c15 = r1[i36];

        if $c15 == 108 goto label34;

        $c16 = r1[i36];

        if $c16 != 76 goto label37;

     label34:
        if z4 == 0 goto label35;

        if z1 != 0 goto label35;

        $z5 = 1;

        goto label36;

     label35:
        $z5 = 0;

     label36:
        return $z5;

     label37:
        return 0;

     label38:
        if z3 != 0 goto label39;

        if z4 == 0 goto label39;

        $z6 = 1;

        goto label40;

     label39:
        $z6 = 0;

     label40:
        return $z6;
    }

    static void <clinit>()
    {
        java.lang.Long $r0, $r1, $r2;
        java.lang.Integer $r3, $r4, $r5;
        java.lang.Short $r6, $r7, $r8;
        java.lang.Byte $r9, $r10, $r11;
        java.lang.Double $r12, $r13, $r14;
        java.lang.Float $r15, $r16, $r17;

        $r0 = new java.lang.Long;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>(0L);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Long LONG_ZERO> = $r0;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(1L);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Long LONG_ONE> = $r1;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(-1L);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Long LONG_MINUS_ONE> = $r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Integer INTEGER_ZERO> = $r3;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Integer INTEGER_ONE> = $r4;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(-1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Integer INTEGER_MINUS_ONE> = $r5;

        $r6 = new java.lang.Short;

        specialinvoke $r6.<java.lang.Short: void <init>(short)>(0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Short SHORT_ZERO> = $r6;

        $r7 = new java.lang.Short;

        specialinvoke $r7.<java.lang.Short: void <init>(short)>(1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Short SHORT_ONE> = $r7;

        $r8 = new java.lang.Short;

        specialinvoke $r8.<java.lang.Short: void <init>(short)>(-1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Short SHORT_MINUS_ONE> = $r8;

        $r9 = new java.lang.Byte;

        specialinvoke $r9.<java.lang.Byte: void <init>(byte)>(0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Byte BYTE_ZERO> = $r9;

        $r10 = new java.lang.Byte;

        specialinvoke $r10.<java.lang.Byte: void <init>(byte)>(1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Byte BYTE_ONE> = $r10;

        $r11 = new java.lang.Byte;

        specialinvoke $r11.<java.lang.Byte: void <init>(byte)>(-1);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Byte BYTE_MINUS_ONE> = $r11;

        $r12 = new java.lang.Double;

        specialinvoke $r12.<java.lang.Double: void <init>(double)>(0.0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Double DOUBLE_ZERO> = $r12;

        $r13 = new java.lang.Double;

        specialinvoke $r13.<java.lang.Double: void <init>(double)>(1.0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Double DOUBLE_ONE> = $r13;

        $r14 = new java.lang.Double;

        specialinvoke $r14.<java.lang.Double: void <init>(double)>(-1.0);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Double DOUBLE_MINUS_ONE> = $r14;

        $r15 = new java.lang.Float;

        specialinvoke $r15.<java.lang.Float: void <init>(float)>(0.0F);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Float FLOAT_ZERO> = $r15;

        $r16 = new java.lang.Float;

        specialinvoke $r16.<java.lang.Float: void <init>(float)>(1.0F);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Float FLOAT_ONE> = $r16;

        $r17 = new java.lang.Float;

        specialinvoke $r17.<java.lang.Float: void <init>(float)>(-1.0F);

        <org.apache.commons.lang.math.NumberUtils: java.lang.Float FLOAT_MINUS_ONE> = $r17;

        return;
    }
}
