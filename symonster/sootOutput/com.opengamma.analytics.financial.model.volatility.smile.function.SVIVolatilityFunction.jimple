public class com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction extends com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, $d3;
        byte $b0, $b1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$1 $r2;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need forward >= 0");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Need strike >= 0");

        $d3 = d1 / d0;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$1;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$1: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction,double)>(r0, d2);

        return $r2;
    }

    public double getVolatility(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: void <init>(double,double,double,double,double)>(d2, d3, d4, d5, d6);

        $d7 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double getVolatility(double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, d1, $r2);

        return $d7;
    }

    public double getVolatility(double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, $d3, $d4;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        byte $b0, $b1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need forward >= 0");

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Need strike >= 0");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null SVI parameters");

        $d3 = d1 / d0;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $d4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double getVolatility(double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d2, r1);

        return $d4;
    }

    private double getVolatility(double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null SVI parameters");

        $d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getM()>();

        d1 = d0 - $d3;

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getNu()>();

        $d4 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getA()>();

        $d5 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getB()>();

        $d6 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getRho()>();

        $d10 = $d6 * d1;

        $d8 = d1 * d1;

        $d7 = d2 * d2;

        $d9 = $d8 + $d7;

        $d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        $d12 = $d10 + $d11;

        $d13 = $d5 * $d12;

        $d14 = $d4 + $d13;

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        return $d15;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, $d3;
        byte $b0, $b1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$2 $r2;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need forward >= 0");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Need strike >= 0");

        $d3 = d1 / d0;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$2;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction,double,double,double)>(r0, d0, d1, d2);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, $d3;
        byte $b0, $b1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$3 $r2;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need forward >= 0");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Need strike >= 0");

        $d3 = d1 / d0;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$3;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction,double)>(r0, d2);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: com.opengamma.analytics.math.function.Function1D getModelAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    public double[] getVolatilityAjoint(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData $r2;
        double[] $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $r2 = new com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        specialinvoke $r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: void <init>(double,double,double,double,double)>(d2, d3, d4, d5, d6);

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double[] getVolatilityAjoint(double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, d1, $r2);

        return $r3;
    }

    public double[] getVolatilityAjoint(double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, $d3;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        byte $b0, $b1;
        double[] $r2;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need forward >= 0");

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Need strike >= 0");

        $d3 = d1 / d0;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double[] getVolatilityAdjoint(double,double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, d1, d2, r1);

        return $r2;
    }

    private double[] getVolatilityAdjoint(double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        double[] r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null data");

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getB()>();

        d4 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getRho()>();

        d5 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getNu()>();

        $d11 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getM()>();

        d6 = d2 - $d11;

        $d13 = d6 * d6;

        $d12 = d5 * d5;

        $d14 = $d13 + $d12;

        d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        $d15 = d4 * d6;

        d8 = $d15 + d7;

        $d16 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getA()>();

        $d17 = d3 * d8;

        $d18 = $d16 + $d17;

        d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $d19 = d6 / d7;

        $d20 = d4 + $d19;

        $d21 = d3 * $d20;

        $d22 = $d21 / 2.0;

        d10 = $d22 / d9;

        r2 = newarray (double)[8];

        r2[0] = d9;

        $d23 = neg d10;

        $d24 = $d23 / d0;

        r2[1] = $d24;

        $d25 = d10 / d1;

        r2[2] = $d25;

        $d26 = 0.5 / d9;

        r2[3] = $d26;

        $d27 = d8 / 2.0;

        $d28 = $d27 / d9;

        r2[4] = $d28;

        $d29 = d3 * d6;

        $d30 = $d29 / 2.0;

        $d31 = $d30 / d9;

        r2[5] = $d31;

        $d32 = d5 * d3;

        $d33 = $d32 / d7;

        $d34 = $d33 / 2.0;

        $d35 = $d34 / d9;

        r2[6] = $d35;

        $d36 = neg d10;

        r2[7] = $d36;

        return r2;
    }

    private double[] getModelAdjoint(double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        double[] r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null data");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getB()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getRho()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getNu()>();

        $d9 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getM()>();

        d4 = d0 - $d9;

        $d11 = d4 * d4;

        $d10 = d3 * d3;

        $d12 = $d11 + $d10;

        d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        $d13 = d2 * d4;

        d6 = $d13 + d5;

        $d14 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData: double getA()>();

        $d15 = d1 * d6;

        $d16 = $d14 + $d15;

        d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d16);

        $d17 = d4 / d5;

        $d18 = d2 + $d17;

        $d19 = d1 * $d18;

        $d20 = $d19 / 2.0;

        d8 = $d20 / d7;

        r2 = newarray (double)[5];

        $d21 = 0.5 / d7;

        r2[0] = $d21;

        $d22 = d6 / 2.0;

        $d23 = $d22 / d7;

        r2[1] = $d23;

        $d24 = d1 * d4;

        $d25 = $d24 / 2.0;

        $d26 = $d25 / d7;

        r2[2] = $d26;

        $d27 = d3 * d1;

        $d28 = $d27 / d5;

        $d29 = $d28 / 2.0;

        $d30 = $d29 / d7;

        r2[3] = $d30;

        $d31 = neg d8;

        r2[4] = $d31;

        return r2;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        return "SVI";
    }

    static double access$000(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, $d1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        $d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double getVolatility(double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, r1);

        return $d1;
    }

    static double[] access$100(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction, double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0, d1, d2;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        double[] $r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r1 := @parameter4: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        $r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double[] getVolatilityAdjoint(double,double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, d1, d2, r1);

        return $r2;
    }

    static double[] access$200(com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction, double, com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction r0;
        double d0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData r1;
        double[] $r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction;

        d0 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData;

        $r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SVIVolatilityFunction: double[] getModelAdjoint(double,com.opengamma.analytics.financial.model.volatility.smile.function.SVIFormulaData)>(d0, r1);

        return $r2;
    }
}
