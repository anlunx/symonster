public class org.apache.commons.math.special.Gamma extends java.lang.Object
{
    public static final double GAMMA;
    private static final double DEFAULT_EPSILON;
    private static final double[] LANCZOS;
    private static final double HALF_LOG_2_PI;
    private static final double C_LIMIT;
    private static final double S_LIMIT;

    private void <init>()
    {
        org.apache.commons.math.special.Gamma r0;

        r0 := @this: org.apache.commons.math.special.Gamma;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double logGamma(double)
    {
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19;
        boolean $z0;
        byte $b0;
        double[] $r0, $r1, $r2;
        int $i1, i2;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label2;

     label1:
        d16 = #NaN;

        goto label5;

     label2:
        d17 = 0.0;

        $r0 = <org.apache.commons.math.special.Gamma: double[] LANCZOS>;

        $i1 = lengthof $r0;

        i2 = $i1 - 1;

     label3:
        if i2 <= 0 goto label4;

        $r2 = <org.apache.commons.math.special.Gamma: double[] LANCZOS>;

        $d14 = $r2[i2];

        $d12 = (double) i2;

        $d13 = d0 + $d12;

        $d15 = $d14 / $d13;

        d17 = d17 + $d15;

        i2 = i2 + -1;

        goto label3;

     label4:
        $r1 = <org.apache.commons.math.special.Gamma: double[] LANCZOS>;

        $d2 = $r1[0];

        d18 = d17 + $d2;

        $d3 = d0 + 4.7421875;

        d19 = $d3 + 0.5;

        $d4 = d0 + 0.5;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d19);

        $d6 = $d4 * $d5;

        $d8 = $d6 - d19;

        $d7 = <org.apache.commons.math.special.Gamma: double HALF_LOG_2_PI>;

        $d10 = $d8 + $d7;

        $d9 = d18 / d0;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d9);

        d16 = $d10 + $d11;

     label5:
        return d16;
    }

    public static double regularizedGammaP(double, double) throws org.apache.commons.math.MathException
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaP(double,double,double,int)>(d0, d1, 1.0E-14, 2147483647);

        return $d2;
    }

    public static double regularizedGammaP(double, double, double, int) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, d20, $d21;
        int i0;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        org.apache.commons.math.MaxIterationsExceededException $r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d1 cmpg 0.0;

        if $b2 >= 0 goto label2;

     label1:
        d17 = #NaN;

        goto label9;

     label2:
        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label3;

        d17 = 0.0;

        goto label9;

     label3:
        $d3 = d0 + 1.0;

        $b4 = d1 cmpl $d3;

        if $b4 < 0 goto label4;

        $d16 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaQ(double,double,double,int)>(d0, d1, d2, i0);

        d17 = 1.0 - $d16;

        goto label9;

     label4:
        d18 = 0.0;

        d19 = 1.0 / d0;

        d20 = d19;

     label5:
        $d4 = d19 / d20;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $b5 = $d5 cmpl d2;

        if $b5 <= 0 goto label6;

        $d13 = (double) i0;

        $b6 = d18 cmpg $d13;

        if $b6 >= 0 goto label6;

        $b7 = d20 cmpg #Infinity;

        if $b7 >= 0 goto label6;

        d18 = d18 + 1.0;

        $d14 = d0 + d18;

        $d15 = d1 / $d14;

        d19 = d19 * $d15;

        d20 = d20 + d19;

        goto label5;

     label6:
        $d21 = (double) i0;

        $b8 = d18 cmpl $d21;

        if $b8 < 0 goto label7;

        $r0 = new org.apache.commons.math.MaxIterationsExceededException;

        specialinvoke $r0.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>(i0);

        throw $r0;

     label7:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d20);

        if $z2 == 0 goto label8;

        d17 = 1.0;

        goto label9;

     label8:
        $d6 = neg d1;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d8 = d0 * $d7;

        $d9 = $d6 + $d8;

        $d10 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>(d0);

        $d11 = $d9 - $d10;

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d11);

        d17 = $d12 * d20;

     label9:
        return d17;
    }

    public static double regularizedGammaQ(double, double) throws org.apache.commons.math.MathException
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaQ(double,double,double,int)>(d0, d1, 1.0E-14, 2147483647);

        return $d2;
    }

    public static double regularizedGammaQ(double, double, double, int) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14;
        int i0;
        boolean $z0, $z1;
        byte $b1, $b2, $b3, $b4;
        org.apache.commons.math.special.Gamma$1 $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d1 cmpg 0.0;

        if $b2 >= 0 goto label2;

     label1:
        d13 = #NaN;

        goto label5;

     label2:
        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label3;

        d13 = 1.0;

        goto label5;

     label3:
        $d3 = d0 + 1.0;

        $b4 = d1 cmpg $d3;

        if $b4 >= 0 goto label4;

        $d12 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaP(double,double,double,int)>(d0, d1, d2, i0);

        d13 = 1.0 - $d12;

        goto label5;

     label4:
        $r1 = new org.apache.commons.math.special.Gamma$1;

        specialinvoke $r1.<org.apache.commons.math.special.Gamma$1: void <init>(double)>(d0);

        $d4 = virtualinvoke $r1.<org.apache.commons.math.util.ContinuedFraction: double evaluate(double,double,int)>(d1, d2, i0);

        d14 = 1.0 / $d4;

        $d5 = neg d1;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d7 = d0 * $d6;

        $d8 = $d5 + $d7;

        $d9 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>(d0);

        $d10 = $d8 - $d9;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d10);

        d13 = $d11 * d14;

     label5:
        return d13;
    }

    public static double digamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $b2 = d0 cmpg 1.0E-5;

        if $b2 > 0 goto label1;

        $d16 = 1.0 / d0;

        $d17 = -0.5772156649015329 - $d16;

        return $d17;

     label1:
        $b1 = d0 cmpl 49.0;

        if $b1 < 0 goto label2;

        $d6 = d0 * d0;

        d1 = 1.0 / $d6;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d0);

        $d8 = 0.5 / d0;

        $d14 = $d7 - $d8;

        $d9 = d1 / 252.0;

        $d10 = 0.008333333333333333 - $d9;

        $d11 = d1 * $d10;

        $d12 = 0.08333333333333333 + $d11;

        $d13 = d1 * $d12;

        $d15 = $d14 - $d13;

        return $d15;

     label2:
        $d2 = d0 + 1.0;

        $d3 = staticinvoke <org.apache.commons.math.special.Gamma: double digamma(double)>($d2);

        $d4 = 1.0 / d0;

        $d5 = $d3 - $d4;

        return $d5;
    }

    public static double trigamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $b2 = d0 cmpg 1.0E-5;

        if $b2 > 0 goto label1;

        $d18 = d0 * d0;

        $d19 = 1.0 / $d18;

        return $d19;

     label1:
        $b1 = d0 cmpl 49.0;

        if $b1 < 0 goto label2;

        $d7 = d0 * d0;

        d1 = 1.0 / $d7;

        $d9 = 1.0 / d0;

        $d8 = d1 / 2.0;

        $d16 = $d9 + $d8;

        $d14 = d1 / d0;

        $d10 = d1 / 42.0;

        $d11 = 0.03333333333333333 + $d10;

        $d12 = d1 * $d11;

        $d13 = 0.16666666666666666 - $d12;

        $d15 = $d14 * $d13;

        $d17 = $d16 + $d15;

        return $d17;

     label2:
        $d2 = d0 + 1.0;

        $d3 = staticinvoke <org.apache.commons.math.special.Gamma: double trigamma(double)>($d2);

        $d4 = d0 * d0;

        $d5 = 1.0 / $d4;

        $d6 = $d3 + $d5;

        return $d6;
    }

    static void <clinit>()
    {
        double[] $r0;
        double $d0, $d1;

        <org.apache.commons.math.special.Gamma: double S_LIMIT> = 1.0E-5;

        <org.apache.commons.math.special.Gamma: double C_LIMIT> = 49.0;

        <org.apache.commons.math.special.Gamma: double DEFAULT_EPSILON> = 1.0E-14;

        <org.apache.commons.math.special.Gamma: double GAMMA> = 0.5772156649015329;

        $r0 = newarray (double)[15];

        $r0[0] = 0.9999999999999971;

        $r0[1] = 57.15623566586292;

        $r0[2] = -59.59796035547549;

        $r0[3] = 14.136097974741746;

        $r0[4] = -0.4919138160976202;

        $r0[5] = 3.399464998481189E-5;

        $r0[6] = 4.652362892704858E-5;

        $r0[7] = -9.837447530487956E-5;

        $r0[8] = 1.580887032249125E-4;

        $r0[9] = -2.1026444172410488E-4;

        $r0[10] = 2.1743961811521265E-4;

        $r0[11] = -1.643181065367639E-4;

        $r0[12] = 8.441822398385275E-5;

        $r0[13] = -2.6190838401581408E-5;

        $r0[14] = 3.6899182659531625E-6;

        <org.apache.commons.math.special.Gamma: double[] LANCZOS> = $r0;

        $d0 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(6.283185307179586);

        $d1 = 0.5 * $d0;

        <org.apache.commons.math.special.Gamma: double HALF_LOG_2_PI> = $d1;

        return;
    }
}
