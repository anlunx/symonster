public abstract class org.apache.commons.math.random.BitsStreamGenerator extends java.lang.Object implements org.apache.commons.math.random.RandomGenerator
{
    private double nextGaussian;

    public void <init>()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextGaussian> = #NaN;

        return;
    }

    public abstract void setSeed(int);

    public abstract void setSeed(int[]);

    public abstract void setSeed(long);

    protected abstract int next(int);

    public boolean nextBoolean()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(1);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void nextBytes(byte[])
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i17, $i19, i20, i21, i22;
        byte $b5, $b7, $b10, $b14, $b18;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        r1 := @parameter0: byte[];

        i20 = 0;

        $i1 = lengthof r1;

        i0 = $i1 - 3;

     label1:
        if i20 >= i0 goto label2;

        i21 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

        $i6 = i21 & 255;

        $b7 = (byte) $i6;

        r1[i20] = $b7;

        $i11 = i20 + 1;

        $i8 = i21 >> 8;

        $i9 = $i8 & 255;

        $b10 = (byte) $i9;

        r1[$i11] = $b10;

        $i15 = i20 + 2;

        $i12 = i21 >> 16;

        $i13 = $i12 & 255;

        $b14 = (byte) $i13;

        r1[$i15] = $b14;

        $i19 = i20 + 3;

        $i16 = i21 >> 24;

        $i17 = $i16 & 255;

        $b18 = (byte) $i17;

        r1[$i19] = $b18;

        i20 = i20 + 4;

        goto label1;

     label2:
        i22 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

     label3:
        $i2 = lengthof r1;

        if i20 >= $i2 goto label4;

        $i3 = i20;

        i20 = i20 + 1;

        $i4 = i22 & 255;

        $b5 = (byte) $i4;

        r1[$i3] = $b5;

        i22 = i22 >> 8;

        goto label3;

     label4:
        return;
    }

    public double nextDouble()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        long l0, $l3, $l4, $l5;
        int i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $i2 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(26);

        $l3 = (long) $i2;

        l0 = $l3 << 26;

        i1 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(26);

        $l4 = (long) i1;

        $l5 = l0 | $l4;

        $d0 = (double) $l5;

        $d1 = $d0 * 2.220446049250313E-16;

        return $d1;
    }

    public float nextFloat()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(23);

        $f0 = (float) $i0;

        $f1 = $f0 * 1.1920929E-7F;

        return $f1;
    }

    public double nextGaussian()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        boolean $z0;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $d4 = r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextGaussian>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        if $z0 == 0 goto label1;

        d0 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextDouble()>();

        d1 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextDouble()>();

        d2 = 6.283185307179586 * d0;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d6 = -2.0 * $d5;

        d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d6);

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>(d2);

        d10 = d3 * $d7;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>(d2);

        $d9 = d3 * $d8;

        r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextGaussian> = $d9;

        goto label2;

     label1:
        d10 = r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextGaussian>;

        r0.<org.apache.commons.math.random.BitsStreamGenerator: double nextGaussian> = #NaN;

     label2:
        return d10;
    }

    public int nextInt()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        int $i0;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $i0 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

        return $i0;
    }

    public int nextInt(int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11, i12, i13;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r1 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        $i2 = i0 >> 1;

        i9 = i0 | $i2;

        $i3 = i9 >> 2;

        i10 = i9 | $i3;

        $i4 = i10 >> 4;

        i11 = i10 | $i4;

        $i5 = i11 >> 8;

        i12 = i11 | $i5;

        $i6 = i12 >> 16;

        i13 = i12 | $i6;

     label2:
        $i7 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

        i1 = $i7 & i13;

        if i1 >= i0 goto label3;

        return i1;

     label3:
        goto label2;
    }

    public long nextLong()
    {
        org.apache.commons.math.random.BitsStreamGenerator r0;
        long l0, l1, $l3, $l5, $l6;
        int $i2, $i4;

        r0 := @this: org.apache.commons.math.random.BitsStreamGenerator;

        $i2 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

        $l3 = (long) $i2;

        l0 = $l3 << 32;

        $i4 = virtualinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: int next(int)>(32);

        $l5 = (long) $i4;

        l1 = $l5 & 4294967295L;

        $l6 = l0 | l1;

        return $l6;
    }
}
