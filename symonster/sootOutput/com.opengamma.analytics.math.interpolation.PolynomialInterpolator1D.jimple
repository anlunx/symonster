public class com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private final org.apache.commons.math.analysis.interpolation.NevilleInterpolator _interpolator;
    private final int _degree;
    private final int _offset;

    public void <init>(int)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        int i0;
        org.apache.commons.math.analysis.interpolation.NevilleInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        i0 := @parameter0: int;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        $r1 = new org.apache.commons.math.analysis.interpolation.NevilleInterpolator;

        specialinvoke $r1.<org.apache.commons.math.analysis.interpolation.NevilleInterpolator: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: org.apache.commons.math.analysis.interpolation.NevilleInterpolator _interpolator> = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegativeOrZero(int,java.lang.String)>(i0, "degree");

        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree> = i0;

        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset> = 0;

        return;
    }

    public void <init>(int, int)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        int i0, i1;
        org.apache.commons.math.analysis.interpolation.NevilleInterpolator $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        $r1 = new org.apache.commons.math.analysis.interpolation.NevilleInterpolator;

        specialinvoke $r1.<org.apache.commons.math.analysis.interpolation.NevilleInterpolator: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: org.apache.commons.math.analysis.interpolation.NevilleInterpolator _interpolator> = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegativeOrZero(int,java.lang.String)>(i0, "degree");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i1, "offset");

        if i1 < i0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset cannot be greater than the degree");

        throw $r2;

     label1:
        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree> = i0;

        r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset> = i1;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r10, $r24;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        double[] r3, r4, r5, r6;
        org.apache.commons.math.analysis.interpolation.NevilleInterpolator $r7;
        com.opengamma.analytics.math.function.Function1D $r8;
        java.lang.Object $r9;
        com.opengamma.analytics.math.MathException $r11, $r18, $r25, $r33;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r29, $r30;
        java.lang.String $r17, $r23, $r31;
        double $d0;
        org.apache.commons.math.MathException $r32;
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r34;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $i4 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        if i0 > $i4 goto label1;

        $r25 = new com.opengamma.analytics.math.MathException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need at least ");

        $i13 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        $i14 = $i13 + 1;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data points to perform polynomial interpolation of degree ");

        $i15 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>($r31);

        throw $r25;

     label1:
        $i5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i6 = i0 - 1;

        if $i5 != $i6 goto label2;

        $i12 = i0 - 1;

        $d0 = r4[$i12];

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r24;

     label2:
        i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i7 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset>;

        i2 = i1 - $i7;

        $i8 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        $i9 = $i8 + 1;

        i3 = $i9 + i2;

        if i2 >= 0 goto label3;

        $r18 = new com.opengamma.analytics.math.MathException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get lower bound: index ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be greater than or equal to zero");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label3:
        $i10 = i0 + 1;

        if i3 <= $i10 goto label4;

        $r11 = new com.opengamma.analytics.math.MathException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get upper bound: index ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be less than or equal to ");

        $i11 = i0 + 1;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label4:
        r5 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r3, i2, i3);

        r6 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r4, i2, i3);

     label5:
        $r7 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: org.apache.commons.math.analysis.interpolation.NevilleInterpolator _interpolator>;

        r34 = virtualinvoke $r7.<org.apache.commons.math.analysis.interpolation.NevilleInterpolator: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm interpolate(double[],double[])>(r5, r6);

        $r8 = staticinvoke <com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper: com.opengamma.analytics.math.function.Function1D unwrap(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm)>(r34);

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r10 = (java.lang.Double) $r9;

     label6:
        return $r10;

     label7:
        $r32 := @caughtexception;

        $r33 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r33.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r32);

        throw $r33;

        catch org.apache.commons.math.MathException from label5 to label6 with label7;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0, r2;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D) r1;

        $i1 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        $i0 = r2.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        $i3 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset>;

        $i2 = r2.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset>;

        if $i3 == $i2 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        int $i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        i5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: int hashCode()>();

        $i2 = 31 * i5;

        $i1 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _degree>;

        i6 = $i2 + $i1;

        $i4 = 31 * i6;

        $i3 = r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: int _offset>;

        i7 = $i4 + $i3;

        return i7;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        double[] $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: double[] getFiniteDifferenceSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.PolynomialInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
