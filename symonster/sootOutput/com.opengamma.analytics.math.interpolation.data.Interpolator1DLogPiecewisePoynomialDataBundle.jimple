public class com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle extends com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle
{

    public void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>(r1, r2);

        return;
    }

    public void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator, double, double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r2;
        double d0, d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator,double,double)>(r1, r2, d0, d1);

        return;
    }

    public double[] getBreakPointsY()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        double[] r1, r2;
        int i0, i1;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: double[] getBreakPointsY()>();

        i0 = lengthof r1;

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r1[i1];

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        r2[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.lang.Double firstValue()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        java.lang.Double $r1, $r2;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        $r1 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: java.lang.Double firstValue()>();

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r2;
    }

    public java.lang.Double get(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        java.lang.Double r1, $r2, $r3;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: java.lang.Double get(java.lang.Double)>(r1);

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        java.lang.Double r1, $r5, $r6, $r8, $r9, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4;
        double[] r2, $r4, $r7, $r11;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues $r3, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 := @parameter0: java.lang.Double;

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: int getLowerBoundIndex(java.lang.Double)>(r1);

        r2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: double[] getValues()>();

        $i1 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: int size()>();

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r10 = new com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues;

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: double[] getKeys()>();

        $d4 = $r11[i0];

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $d5 = r2[i0];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: void <init>(int,java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(i0, $r12, $r13, null, null);

        return $r10;

     label1:
        $r3 = new com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: double[] getKeys()>();

        $d0 = $r4[i0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d1 = r2[i0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: double[] getKeys()>();

        $i3 = i0 + 1;

        $d2 = $r7[$i3];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $i4 = i0 + 1;

        $d3 = r2[$i4];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: void <init>(int,java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double)>(i0, $r5, $r6, $r8, $r9);

        return $r3;
    }

    public double[] getValues()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        double[] r1, r2;
        int i0, i1;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        r1 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: double[] getValues()>();

        i0 = lengthof r1;

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r1[i1];

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        r2[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.lang.Double lastValue()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r0;
        java.lang.Double $r1, $r2;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        $r1 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: java.lang.Double lastValue()>();

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r2;
    }
}
