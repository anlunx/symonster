public class com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult extends java.lang.Object implements com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionResult
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra ALGEBRA;
    private final double[][] _lArray;
    private final com.opengamma.analytics.math.matrix.DoubleMatrix2D _l;
    private final com.opengamma.analytics.math.matrix.DoubleMatrix2D _lT;
    private double _determinant;

    public void <init>(double[][])
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        double[][] r1, $r3, $r7, $r8, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r2, $r4, $r6;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r5;
        int $i0, i1;
        double[] $r9, $r11;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray> = r1;

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r3 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r3);

        r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D _l> = $r2;

        $r5 = <com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.MatrixAlgebra ALGEBRA>;

        $r4 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D _l>;

        $r6 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)>($r4);

        r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D _lT> = $r6;

        r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double _determinant> = 1.0;

        i1 = 0;

     label1:
        $r7 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label2;

        $d3 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double _determinant>;

        $r8 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r9 = $r8[i1];

        $d1 = $r9[i1];

        $r10 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r11 = $r10[i1];

        $d0 = $r11[i1];

        $d2 = $d1 * $d0;

        $d4 = $d3 * $d2;

        r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double _determinant> = $d4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r2;
        double[] $r3;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r3);

        return $r2;
    }

    public double[] solve(double[])
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        double[] r1, r2, $r5, $r7, $r9, $r11;
        int i0, $i1, i2, i3, i4, i5;
        double[][] $r3, $r4, $r6, $r8, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        $r3 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $i1 = lengthof $r3;

        if i0 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "b array of incorrect size");

        r2 = newarray (double)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        $d9 = r2[i2];

        $r8 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r9 = $r8[i2];

        $d8 = $r9[i2];

        $d10 = $d9 / $d8;

        r2[i2] = $d10;

        i3 = i2 + 1;

     label04:
        if i3 >= i0 goto label05;

        $d14 = r2[i3];

        $d12 = r2[i2];

        $r10 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r11 = $r10[i3];

        $d11 = $r11[i2];

        $d13 = $d12 * $d11;

        $d15 = $d14 - $d13;

        r2[i3] = $d15;

        i3 = i3 + 1;

        goto label04;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        i4 = i0 - 1;

     label07:
        if i4 < 0 goto label10;

        $d1 = r2[i4];

        $r4 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r5 = $r4[i4];

        $d0 = $r5[i4];

        $d2 = $d1 / $d0;

        r2[i4] = $d2;

        i5 = 0;

     label08:
        if i5 >= i4 goto label09;

        $d6 = r2[i5];

        $d4 = r2[i4];

        $r6 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r7 = $r6[i4];

        $d3 = $r7[i5];

        $d5 = $d4 * $d3;

        $d7 = $d6 - $d5;

        r2[i5] = $d7;

        i5 = i5 + 1;

        goto label08;

     label09:
        i4 = i4 + -1;

        goto label07;

     label10:
        return r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r5;
        int i0, i1, $i2, i3, i4, i5, i6, i7, i8, i9;
        double[][] r2, r3, $r4, $r7, $r11, $r14, $r18;
        double[] $r6, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r4 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $i2 = lengthof $r4;

        if i0 != $i2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "b array of incorrect size");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = newmultiarray (double)[i0][i1];

        i3 = 0;

     label03:
        if i3 >= i0 goto label04;

        $r21 = r2[i3];

        $r20 = r3[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r20, 0, i1);

        i3 = i3 + 1;

        goto label03;

     label04:
        i4 = 0;

     label05:
        if i4 >= i1 goto label10;

        i5 = 0;

     label06:
        if i5 >= i0 goto label09;

        $r13 = r3[i5];

        $d9 = $r13[i4];

        $r14 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r15 = $r14[i5];

        $d8 = $r15[i5];

        $d10 = $d9 / $d8;

        $r13[i4] = $d10;

        i6 = i5 + 1;

     label07:
        if i6 >= i0 goto label08;

        $r16 = r3[i6];

        $d14 = $r16[i4];

        $r17 = r3[i5];

        $d12 = $r17[i4];

        $r18 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r19 = $r18[i6];

        $d11 = $r19[i5];

        $d13 = $d12 * $d11;

        $d15 = $d14 - $d13;

        $r16[i4] = $d15;

        i6 = i6 + 1;

        goto label07;

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        i4 = i4 + 1;

        goto label05;

     label10:
        i7 = 0;

     label11:
        if i7 >= i1 goto label16;

        i8 = i0 - 1;

     label12:
        if i8 < 0 goto label15;

        $r6 = r3[i8];

        $d1 = $r6[i7];

        $r7 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r8 = $r7[i8];

        $d0 = $r8[i8];

        $d2 = $d1 / $d0;

        $r6[i7] = $d2;

        i9 = 0;

     label13:
        if i9 >= i8 goto label14;

        $r9 = r3[i9];

        $d6 = $r9[i7];

        $r10 = r3[i8];

        $d4 = $r10[i7];

        $r11 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double[][] _lArray>;

        $r12 = $r11[i8];

        $d3 = $r12[i9];

        $d5 = $d4 * $d3;

        $d7 = $d6 - $d5;

        $r9[i7] = $d7;

        i9 = i9 + 1;

        goto label13;

     label14:
        i8 = i8 + -1;

        goto label12;

     label15:
        i7 = i7 + 1;

        goto label11;

     label16:
        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getL()
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r1;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        $r1 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D _l>;

        return $r1;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getLT()
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r1;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        $r1 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D _lT>;

        return $r1;
    }

    public double getDeterminant()
    {
        com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult;

        $d0 = r0.<com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: double _determinant>;

        return $d0;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.math.linearalgebra.CholeskyDecompositionOpenGammaResult: com.opengamma.analytics.math.matrix.MatrixAlgebra ALGEBRA> = $r0;

        return;
    }
}
