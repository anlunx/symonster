public class com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r6, $r7, $r8;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle r3;
        int i0, i1, $i2, $i5, $i6, $i7, $i8;
        double[] r4, r5;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        byte $b3, $b4;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle) r1;

        $i2 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i0 = $i2 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r6 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $b3 = $d0 cmpg $d1;

        if $b3 >= 0 goto label1;

        d8 = 0.0;

        d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>(0);

        d11 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>(0);

        goto label3;

     label1:
        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r7 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d3 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $b4 = $d2 cmpl $d3;

        if $b4 <= 0 goto label2;

        d8 = r5[i0];

        $d6 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d7 = r4[i0];

        d9 = $d6 - $d7;

        $i7 = i0 + 1;

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>($i7);

        $i8 = i0 + 1;

        d11 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>($i8);

        goto label3;

     label2:
        i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        d8 = r5[i1];

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = r4[i1];

        d9 = $d4 - $d5;

        $i5 = i1 + 1;

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>($i5);

        $i6 = i1 + 1;

        d11 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>($i6);

     label3:
        $d12 = d10 * d10;

        $d13 = $d12 * d9;

        $d14 = d8 + $d13;

        $d15 = d10 * d11;

        $d16 = $d15 * d9;

        $d17 = $d16 * d9;

        $d18 = $d14 + $d17;

        $d19 = d11 * d11;

        $d20 = $d19 / 3.0;

        $d21 = $d20 * d9;

        $d22 = $d21 * d9;

        $d23 = $d22 * d9;

        $d24 = $d18 + $d23;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        return $r8;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r5, $r6;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle r3;
        int i0, i1, $i2, $i5, $i6, $i7, $i8;
        double[] r4;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b3, $b4;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle) r1;

        $i2 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i0 = $i2 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $b3 = $d0 cmpg $d1;

        if $b3 >= 0 goto label1;

        d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>(0);

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>(0);

        goto label3;

     label1:
        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r6 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        $d3 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $b4 = $d2 cmpl $d3;

        if $b4 <= 0 goto label2;

        $d6 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d7 = r4[i0];

        d8 = $d6 - $d7;

        $i7 = i0 + 1;

        d9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>($i7);

        $i8 = i0 + 1;

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>($i8);

        goto label3;

     label2:
        i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d5 = r4[i1];

        d8 = $d4 - $d5;

        $i5 = i1 + 1;

        d9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getA(int)>($i5);

        $i6 = i1 + 1;

        d10 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: double getB(int)>($i6);

     label3:
        $d11 = d9 * d9;

        $d12 = 2.0 * d9;

        $d13 = $d12 * d10;

        $d14 = $d13 * d8;

        $d15 = $d11 + $d14;

        $d16 = d10 * d10;

        $d17 = $d16 * d8;

        $d18 = $d17 * d8;

        $d19 = $d15 + $d18;

        return $d19;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DQuadraticSplineDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.QuadraticSplineInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
