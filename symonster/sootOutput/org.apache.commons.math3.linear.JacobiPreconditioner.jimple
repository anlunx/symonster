public class org.apache.commons.math3.linear.JacobiPreconditioner extends org.apache.commons.math3.linear.RealLinearOperator
{
    private final org.apache.commons.math3.linear.ArrayRealVector diag;

    public void <init>(double[], boolean)
    {
        org.apache.commons.math3.linear.JacobiPreconditioner r0;
        double[] r1;
        boolean z0;
        org.apache.commons.math3.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: void <init>()>();

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, z0);

        r0.<org.apache.commons.math3.linear.JacobiPreconditioner: org.apache.commons.math3.linear.ArrayRealVector diag> = $r2;

        return;
    }

    public static org.apache.commons.math3.linear.JacobiPreconditioner create(org.apache.commons.math3.linear.RealLinearOperator) throws org.apache.commons.math3.linear.NonSquareOperatorException
    {
        org.apache.commons.math3.linear.RealLinearOperator r0;
        int i0, $i1, $i2, i3, i4;
        double[] r1;
        boolean $z0;
        org.apache.commons.math3.linear.ArrayRealVector $r2;
        org.apache.commons.math3.linear.JacobiPreconditioner $r3;
        org.apache.commons.math3.linear.RealVector $r4;
        double $d0, $d1;
        org.apache.commons.math3.linear.NonSquareOperatorException $r5;
        org.apache.commons.math3.linear.AbstractRealMatrix r6;

        r0 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: int getColumnDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: int getRowDimension()>();

        if $i1 == i0 goto label1;

        $r5 = new org.apache.commons.math3.linear.NonSquareOperatorException;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: int getRowDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareOperatorException: void <init>(int,int)>($i2, i0);

        throw $r5;

     label1:
        r1 = newarray (double)[i0];

        $z0 = r0 instanceof org.apache.commons.math3.linear.AbstractRealMatrix;

        if $z0 == 0 goto label4;

        r6 = (org.apache.commons.math3.linear.AbstractRealMatrix) r0;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $d1 = virtualinvoke r6.<org.apache.commons.math3.linear.AbstractRealMatrix: double getEntry(int,int)>(i3, i3);

        r1[i3] = $d1;

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        i4 = 0;

     label5:
        if i4 >= i0 goto label6;

        virtualinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void set(double)>(0.0);

        virtualinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void setEntry(int,double)>(i4, 1.0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r2);

        $d0 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i4);

        r1[i4] = $d0;

        i4 = i4 + 1;

        goto label5;

     label6:
        $r3 = new org.apache.commons.math3.linear.JacobiPreconditioner;

        specialinvoke $r3.<org.apache.commons.math3.linear.JacobiPreconditioner: void <init>(double[],boolean)>(r1, 0);

        return $r3;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.JacobiPreconditioner r0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner;

        $r1 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner: org.apache.commons.math3.linear.ArrayRealVector diag>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: int getDimension()>();

        return $i0;
    }

    public int getRowDimension()
    {
        org.apache.commons.math3.linear.JacobiPreconditioner r0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner;

        $r1 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner: org.apache.commons.math3.linear.ArrayRealVector diag>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: int getDimension()>();

        return $i0;
    }

    public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.JacobiPreconditioner r0;
        org.apache.commons.math3.linear.RealVector r1;
        org.apache.commons.math3.linear.ArrayRealVector $r2, $r4;
        double[] $r3, $r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        $r4 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner: org.apache.commons.math3.linear.ArrayRealVector diag>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] toArray()>();

        $r6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] ebeDivide(double[],double[])>($r3, $r5);

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>($r6, 0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealLinearOperator sqrt()
    {
        org.apache.commons.math3.linear.JacobiPreconditioner r0;
        org.apache.commons.math3.linear.ArrayRealVector r1, $r3;
        org.apache.commons.math3.analysis.function.Sqrt $r2;
        org.apache.commons.math3.linear.JacobiPreconditioner$1 $r4;

        r0 := @this: org.apache.commons.math3.linear.JacobiPreconditioner;

        $r3 = r0.<org.apache.commons.math3.linear.JacobiPreconditioner: org.apache.commons.math3.linear.ArrayRealVector diag>;

        $r2 = new org.apache.commons.math3.analysis.function.Sqrt;

        specialinvoke $r2.<org.apache.commons.math3.analysis.function.Sqrt: void <init>()>();

        r1 = virtualinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector map(org.apache.commons.math3.analysis.UnivariateFunction)>($r2);

        $r4 = new org.apache.commons.math3.linear.JacobiPreconditioner$1;

        specialinvoke $r4.<org.apache.commons.math3.linear.JacobiPreconditioner$1: void <init>(org.apache.commons.math3.linear.JacobiPreconditioner,org.apache.commons.math3.linear.RealVector)>(r0, r1);

        return $r4;
    }
}
