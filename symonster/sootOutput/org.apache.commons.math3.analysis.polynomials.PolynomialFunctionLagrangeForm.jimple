public class org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm extends java.lang.Object implements org.apache.commons.math3.analysis.UnivariateFunction
{
    private double[] coefficients;
    private final double[] x;
    private final double[] y;
    private boolean coefficientsComputed;

    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        double[][] $r7;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x> = $r3;

        $i1 = lengthof r2;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y> = $r4;

        $r5 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i2);

        $r6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i3);

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 0;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r1, r2, 0);

        if $z0 != 0 goto label1;

        $r9 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r7 = newarray (double[])[1];

        $r8 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $r7[0] = $r8;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>($r9, $r7);

        $r11 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>($r11, $r10, 1);

     label1:
        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double d0, $d1;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>($r2, $r1, d0);

        return $d1;
    }

    public int degree()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        return $i1;
    }

    public double[] getInterpolatingPoints()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getInterpolatingValues()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        double[] r1, $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $z0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: void computeCoefficients()>();

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public static double evaluate(double[], double[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0, r1, r2, r3;
        double d0, $d1, $d2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        double[][] $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r0, r1, 0);

        if $z0 == 0 goto label1;

        $d2 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>(r0, r1, d0);

        return $d2;

     label1:
        $i0 = lengthof r0;

        r2 = newarray (double)[$i0];

        $i1 = lengthof r1;

        r3 = newarray (double)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i2);

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, $i3);

        $r4 = newarray (double[])[1];

        $r4[0] = r3;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>(r2, $r4);

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r2, r3, 1);

        $d1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double evaluateInternal(double[],double[],double)>(r2, r3, d0);

        return $d1;
    }

    private static double evaluateInternal(double[], double[], double)
    {
        double[] r0, r1, r2, r3;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, d25;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i9, i10, i11, i12;
        byte $b4, $b8;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        i9 = 0;

        i0 = lengthof r0;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i0];

        d24 = #Infinity;

        i10 = 0;

     label1:
        if i10 >= i0 goto label3;

        $d20 = r1[i10];

        r2[i10] = $d20;

        $d21 = r1[i10];

        r3[i10] = $d21;

        $d22 = r0[i10];

        $d23 = d0 - $d22;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d23);

        $b8 = d1 cmpg d24;

        if $b8 >= 0 goto label2;

        i9 = i10;

        d24 = d1;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        d25 = r1[i9];

        i11 = 1;

     label4:
        if i11 >= i0 goto label9;

        i12 = 0;

     label5:
        $i1 = i0 - i11;

        if i12 >= $i1 goto label6;

        $d11 = r0[i12];

        d2 = $d11 - d0;

        $i5 = i11 + i12;

        $d12 = r0[$i5];

        d3 = $d12 - d0;

        $d14 = r0[i12];

        $i6 = i11 + i12;

        $d13 = r0[$i6];

        d4 = $d14 - $d13;

        $i7 = i12 + 1;

        $d16 = r2[$i7];

        $d15 = r3[i12];

        $d17 = $d16 - $d15;

        d5 = $d17 / d4;

        $d18 = d2 * d5;

        r2[i12] = $d18;

        $d19 = d3 * d5;

        r3[i12] = $d19;

        i12 = i12 + 1;

        goto label5;

     label6:
        $d8 = (double) i9;

        $i2 = i0 - i11;

        $i3 = $i2 + 1;

        $d6 = (double) $i3;

        $d7 = 0.5 * $d6;

        $b4 = $d8 cmpg $d7;

        if $b4 >= 0 goto label7;

        $d10 = r2[i9];

        d25 = d25 + $d10;

        goto label8;

     label7:
        i9 = i9 + -1;

        $d9 = r3[i9];

        d25 = d25 + $d9;

     label8:
        i11 = i11 + 1;

        goto label4;

     label9:
        return d25;
    }

    protected void computeCoefficients()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11, r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, d28;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: int degree()>();

        i0 = $i1 + 1;

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients> = $r1;

        i10 = 0;

     label01:
        if i10 >= i0 goto label02;

        $r10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $r10[i10] = 0.0;

        i10 = i10 + 1;

        goto label01;

     label02:
        $i2 = i0 + 1;

        r11 = newarray (double)[$i2];

        r11[0] = 1.0;

        i11 = 0;

     label03:
        if i11 >= i0 goto label06;

        i12 = i11;

     label04:
        if i12 <= 0 goto label05;

        $i9 = i12 - 1;

        $d25 = r11[$i9];

        $d23 = r11[i12];

        $r9 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d22 = $r9[i11];

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        r11[i12] = $d26;

        i12 = i12 + -1;

        goto label04;

     label05:
        $d20 = r11[0];

        $r8 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d18 = $r8[i11];

        $d19 = neg $d18;

        $d21 = $d20 * $d19;

        r11[0] = $d21;

        $i8 = i11 + 1;

        r11[$i8] = 1.0;

        i11 = i11 + 1;

        goto label03;

     label06:
        r12 = newarray (double)[i0];

        i13 = 0;

     label07:
        if i13 >= i0 goto label13;

        d27 = 1.0;

        i14 = 0;

     label08:
        if i14 >= i0 goto label10;

        if i13 == i14 goto label09;

        $r6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d16 = $r6[i13];

        $r7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d15 = $r7[i14];

        $d17 = $d16 - $d15;

        d27 = d27 * $d17;

     label09:
        i14 = i14 + 1;

        goto label08;

     label10:
        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] y>;

        $d0 = $r2[i13];

        d28 = $d0 / d27;

        $i3 = i0 - 1;

        $d1 = r11[i0];

        r12[$i3] = $d1;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $i4 = i0 - 1;

        $d4 = $r3[$i4];

        $i5 = i0 - 1;

        $d2 = r12[$i5];

        $d3 = d28 * $d2;

        $d5 = $d4 + $d3;

        $r3[$i4] = $d5;

        i15 = i0 - 2;

     label11:
        if i15 < 0 goto label12;

        $i6 = i15 + 1;

        $d9 = r11[$i6];

        $i7 = i15 + 1;

        $d7 = r12[$i7];

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] x>;

        $d6 = $r4[i13];

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        r12[i15] = $d10;

        $r5 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: double[] coefficients>;

        $d13 = $r5[i15];

        $d11 = r12[i15];

        $d12 = d28 * $d11;

        $d14 = $d13 + $d12;

        $r5[i15] = $d14;

        i15 = i15 + -1;

        goto label11;

     label12:
        i13 = i13 + 1;

        goto label07;

     label13:
        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean coefficientsComputed> = 1;

        return;
    }

    public static boolean verifyInterpolationArray(double[], double[], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0, r1;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r7;

     label1:
        $i2 = lengthof r0;

        if $i2 >= 2 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $i3 = lengthof r0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label2:
        $r2 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>(r0, $r2, 1, z0);

        return $z1;
    }
}
