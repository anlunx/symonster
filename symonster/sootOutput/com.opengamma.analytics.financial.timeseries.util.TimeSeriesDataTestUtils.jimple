public class com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils r0;

        r0 := @this: com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)
    {
        com.opengamma.timeseries.DoubleTimeSeries r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "time series");

        $z0 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "time series");

        return;
    }

    public static void testTimeSeriesSize(com.opengamma.timeseries.DoubleTimeSeries, int)
    {
        com.opengamma.timeseries.DoubleTimeSeries r0;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        i0 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "time series");

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Minumum length must be greater than zero");

        $i1 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if $i1 < i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time series must contain at least ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" values");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, $r6);

        return;
    }

    public static void testTimeSeriesDates(com.opengamma.timeseries.DoubleTimeSeries, com.opengamma.timeseries.DoubleTimeSeries)
    {
        com.opengamma.timeseries.DoubleTimeSeries r0, r1;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object[] r2, r3;
        java.lang.Object $r4, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r11;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r10, $r17;

        r0 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        r1 := @parameter1: com.opengamma.timeseries.DoubleTimeSeries;

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r0);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r1);

        i0 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $i1 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if i0 == $i1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time series were not the same length; have ");

        $i2 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $i3 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        r2 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object[] timesArray()>();

        r3 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object[] timesArray()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        $r5 = r2[i4];

        $r4 = r3[i4];

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time series did not contain the same dates at index ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return;
    }

    public static void testCloseEquals(com.opengamma.timeseries.DoubleTimeSeries, com.opengamma.timeseries.DoubleTimeSeries, double)
    {
        com.opengamma.timeseries.DoubleTimeSeries r0, r1;
        double d0, $d1, $d2, $d3, $d4;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object[] $r2, $r4, $r11;
        java.lang.Object $r3, $r5, $r12;
        boolean $z0, $z1;
        double[] $r6, $r7, $r15, $r18;
        java.lang.IllegalArgumentException $r8, $r21, $r26;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r31;
        java.lang.String $r20, $r25, $r32;

        r0 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        r1 := @parameter1: com.opengamma.timeseries.DoubleTimeSeries;

        d0 := @parameter2: double;

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r0);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r1);

        i0 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $i1 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if i0 == $i1 goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time series were not the same length; have ");

        $i2 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $i3 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r26;

     label1:
        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        $r2 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object[] timesArray()>();

        $r3 = $r2[i4];

        $r4 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object[] timesArray()>();

        $r5 = $r4[i4];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time series did not contain the same dates at index ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label3:
        $r6 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        $d1 = $r6[i4];

        $r7 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        $d2 = $r7[i4];

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>($d1, $d2, d0);

        if $z1 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time-series did not contain approximately-equal values at ");

        $r11 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object[] timesArray()>();

        $r12 = $r11[i4];

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = interfaceinvoke r0.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        $d3 = $r15[i4];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r18 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        $d4 = $r18[i4];

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r8;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }
}
