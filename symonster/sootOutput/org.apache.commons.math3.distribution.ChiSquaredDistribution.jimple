public class org.apache.commons.math3.distribution.ChiSquaredDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private final org.apache.commons.math3.distribution.GammaDistribution gamma;
    private final double solverAbsoluteAccuracy;

    public void <init>(double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(double,double)>(d0, 1.0E-9);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double d0, d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, d0, d1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(r1, d0, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.GammaDistribution $r2;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $r2 = new org.apache.commons.math3.distribution.GammaDistribution;

        $d2 = d0 / 2.0;

        specialinvoke $r2.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(double,double)>($d2, 2.0);

        r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: org.apache.commons.math3.distribution.GammaDistribution gamma> = $r2;

        r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double solverAbsoluteAccuracy> = d1;

        return;
    }

    public double getDegreesOfFreedom()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        org.apache.commons.math3.distribution.GammaDistribution $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: org.apache.commons.math3.distribution.GammaDistribution gamma>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double getShape()>();

        $d1 = $d0 * 2.0;

        return $d1;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: org.apache.commons.math3.distribution.GammaDistribution gamma>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double density(double)>(d0);

        return $d1;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: org.apache.commons.math3.distribution.GammaDistribution gamma>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double logDensity(double)>(d0);

        return $d1;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: org.apache.commons.math3.distribution.GammaDistribution gamma>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double cumulativeProbability(double)>(d0);

        return $d1;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double getDegreesOfFreedom()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double getDegreesOfFreedom()>();

        $d1 = 2.0 * $d0;

        return $d1;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.ChiSquaredDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ChiSquaredDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.ChiSquaredDistribution: long serialVersionUID> = -8352658048349159782L;

        <org.apache.commons.math3.distribution.ChiSquaredDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
