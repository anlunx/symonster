public abstract class com.opengamma.analytics.math.matrix.MatrixAlgebra extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.lang.NotImplementedException $r3;
        java.lang.IllegalArgumentException $r4, $r22;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r23, $r24, $r26, $r27, $r29;
        java.lang.Class $r7, $r10, $r25, $r28;
        java.lang.String $r12, $r30;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r13, $r14, $r17;
        double[] $r15, $r16, $r18, $r19, $r20, $r21, r34, r35, r36;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r31, $r32, $r33;
        double[][] r37, r38, r39;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label06;

        $z3 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z3 == 0 goto label05;

        $r31 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r34 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r32 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r35 = virtualinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i4 = lengthof r34;

        $i3 = lengthof r35;

        if i4 != $i3 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z4, "Can only add matrices of the same shape");

        r36 = newarray (double)[i4];

        i5 = 0;

     label03:
        if i5 >= i4 goto label04;

        $d4 = r34[i5];

        $d3 = r35[i5];

        $d5 = $d4 + $d3;

        r36[i5] = $d5;

        i5 = i5 + 1;

        goto label03;

     label04:
        $r33 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r36);

        return $r33;

     label05:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to add a ");

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r28 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r22;

     label06:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label16;

        $z2 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z2 == 0 goto label15;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r37 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        r38 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i6 = lengthof r37;

        $r15 = r37[0];

        i7 = lengthof $r15;

        $i0 = lengthof r38;

        if i6 != $i0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z5, "Can only add matrices of the same shape");

        $r16 = r37[0];

        $i1 = lengthof $r16;

        r39 = newmultiarray (double)[i6][$i1];

        i8 = 0;

     label09:
        if i8 >= i6 goto label14;

        $r18 = r38[i8];

        $i2 = lengthof $r18;

        if i7 != $i2 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z6, "Can only add matrices of the same shape");

        i9 = 0;

     label12:
        if i9 >= i7 goto label13;

        $r21 = r39[i8];

        $r19 = r37[i8];

        $d1 = $r19[i9];

        $r20 = r38[i8];

        $d0 = $r20[i9];

        $d2 = $d1 + $d0;

        $r21[i9] = $d2;

        i9 = i9 + 1;

        goto label12;

     label13:
        i8 = i8 + 1;

        goto label09;

     label14:
        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r39);

        return $r17;

     label15:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to add a ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label16:
        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.Matrix divide(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2, $r4;
        boolean $z0, $z1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r3;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Can only divide a 2D matrix");

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Can only perform division with a 2D matrix");

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix)>(r2);

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, $r3);

        return $r4;
    }

    public com.opengamma.analytics.math.matrix.Matrix kroneckerProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        double[][] r3, r4, r5;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        double d0, $d1, $d2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r8, $r11;
        double[] $r9, $r10, $r12, $r13, $r14;
        byte $b6;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label9;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label9;

        $r7 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        r4 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = lengthof r3;

        $r9 = r3[0];

        i1 = lengthof $r9;

        i2 = lengthof r4;

        $r10 = r4[0];

        i3 = lengthof $r10;

        i4 = i0 * i2;

        i5 = i1 * i3;

        r5 = newmultiarray (double)[i4][i5];

        i11 = 0;

     label1:
        if i11 >= i0 goto label8;

        i12 = 0;

     label2:
        if i12 >= i1 goto label7;

        $r12 = r3[i11];

        d0 = $r12[i12];

        $b6 = d0 cmpl 0.0;

        if $b6 == 0 goto label6;

        i13 = 0;

     label3:
        if i13 >= i2 goto label6;

        i14 = 0;

     label4:
        if i14 >= i3 goto label5;

        $i7 = i11 * i2;

        $i8 = $i7 + i13;

        $r14 = r5[$i8];

        $i9 = i12 * i3;

        $i10 = $i9 + i14;

        $r13 = r4[i13];

        $d1 = $r13[i14];

        $d2 = d0 * $d1;

        $r14[$i10] = $d2;

        i14 = i14 + 1;

        goto label4;

     label5:
        i13 = i13 + 1;

        goto label3;

     label6:
        i12 = i12 + 1;

        goto label2;

     label7:
        i11 = i11 + 1;

        goto label1;

     label8:
        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r11;

     label9:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only calculate the Kronecker product of two DoubleMatrix2D.");

        throw $r6;
    }

    public abstract com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix);

    public com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix, double)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1;
        org.apache.commons.lang.NotImplementedException $r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r3, $r5;
        double[] $r4, $r6, $r7, $r8, r11, r12;
        int $i0, $i1, i2, i3, i4, i5, i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r10;
        double[][] r13, r14;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label3;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r11 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i2 = lengthof r11;

        r12 = newarray (double)[i2];

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $d3 = r11[i3];

        $d4 = $d3 * d0;

        r12[i3] = $d4;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r12);

        return $r10;

     label3:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label8;

        $r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r13 = virtualinvoke $r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i4 = lengthof r13;

        $r4 = r13[0];

        $i0 = lengthof $r4;

        r14 = newmultiarray (double)[i4][$i0];

        i5 = 0;

     label4:
        if i5 >= i4 goto label7;

        i6 = 0;

     label5:
        $r6 = r13[0];

        $i1 = lengthof $r6;

        if i6 >= $i1 goto label6;

        $r8 = r14[i5];

        $r7 = r13[i5];

        $d1 = $r7[i6];

        $d2 = $d1 * d0;

        $r8[i6] = $d2;

        i6 = i6 + 1;

        goto label5;

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r14);

        return $r5;

     label8:
        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.Matrix subtract(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.lang.NotImplementedException $r3;
        java.lang.IllegalArgumentException $r4, $r22;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r23, $r24, $r26, $r27, $r29;
        java.lang.Class $r7, $r10, $r25, $r28;
        java.lang.String $r12, $r30;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r13, $r14, $r17;
        double[] $r15, $r16, $r18, $r19, $r20, $r21, r34, r35, r36;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r31, $r32, $r33;
        double[][] r37, r38, r39;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label06;

        $z3 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z3 == 0 goto label05;

        $r31 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r34 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r32 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r35 = virtualinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i4 = lengthof r34;

        $i3 = lengthof r35;

        if i4 != $i3 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z4, "Can only subtract matrices of the same shape");

        r36 = newarray (double)[i4];

        i5 = 0;

     label03:
        if i5 >= i4 goto label04;

        $d4 = r34[i5];

        $d3 = r35[i5];

        $d5 = $d4 - $d3;

        r36[i5] = $d5;

        i5 = i5 + 1;

        goto label03;

     label04:
        $r33 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r36);

        return $r33;

     label05:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to subtract a ");

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r28 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r22;

     label06:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label16;

        $z2 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z2 == 0 goto label15;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r37 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        r38 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i6 = lengthof r37;

        $r15 = r37[0];

        i7 = lengthof $r15;

        $i0 = lengthof r38;

        if i6 != $i0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z5, "Can only subtract matrices of the same shape");

        $r16 = r37[0];

        $i1 = lengthof $r16;

        r39 = newmultiarray (double)[i6][$i1];

        i8 = 0;

     label09:
        if i8 >= i6 goto label14;

        $r18 = r38[i8];

        $i2 = lengthof $r18;

        if i7 != $i2 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z6, "Can only subtract matrices of the same shape");

        i9 = 0;

     label12:
        if i9 >= i7 goto label13;

        $r21 = r39[i8];

        $r19 = r37[i8];

        $d1 = $r19[i9];

        $r20 = r38[i8];

        $d0 = $r20[i9];

        $d2 = $d1 - $d0;

        $r21[i9] = $d2;

        i9 = i9 + 1;

        goto label12;

     label13:
        i8 = i8 + 1;

        goto label09;

     label14:
        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r39);

        return $r17;

     label15:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to subtract a ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label16:
        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r3;
    }

    public abstract double getCondition(com.opengamma.analytics.math.matrix.Matrix);

    public abstract double getDeterminant(com.opengamma.analytics.math.matrix.Matrix);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix);

    public abstract double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D getOuterProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix);

    public abstract double getNorm1(com.opengamma.analytics.math.matrix.Matrix);

    public abstract double getNorm2(com.opengamma.analytics.math.matrix.Matrix);

    public abstract double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, int);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, double);

    public abstract double getTrace(com.opengamma.analytics.math.matrix.Matrix);

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix);

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D matrixTransposeMultiplyMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r6;
        int i0, i1, i2, i3, i4, i5;
        double[][] r3, r4;
        double[] $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;

        r0 := @this: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "a");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i1, i1);

        r3 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label8;

        d6 = 0.0;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r12 = r4[i3];

        $d4 = $r12[i2];

        $r13 = r4[i3];

        $d3 = $r13[i2];

        $d5 = $d4 * $d3;

        d6 = d6 + $d5;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r7 = r3[i2];

        $r7[i2] = d6;

        i4 = i2 + 1;

     label4:
        if i4 >= i1 goto label7;

        d7 = 0.0;

        i5 = 0;

     label5:
        if i5 >= i0 goto label6;

        $r10 = r4[i5];

        $d1 = $r10[i2];

        $r11 = r4[i5];

        $d0 = $r11[i4];

        $d2 = $d1 * $d0;

        d7 = d7 + $d2;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r8 = r3[i2];

        $r8[i4] = d7;

        $r9 = r3[i4];

        $r9[i2] = d7;

        i4 = i4 + 1;

        goto label4;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return $r6;
    }
}
