public class com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction extends java.lang.Object implements com.opengamma.analytics.math.integration.QuadratureWeightAndAbscissaFunction
{
    private static final com.opengamma.analytics.math.function.special.JacobiPolynomialFunction JACOBI;
    private static final com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOT_FINDER;
    private static final com.opengamma.analytics.math.function.Function1D GAMMA_FUNCTION;
    private final double _alpha;
    private final double _beta;
    private final double _c;

    public void <init>()
    {
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction r0;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction;

        specialinvoke r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: void <init>(double,double)>(0.0, 0.0);

        return;
    }

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction r0;
        double d0, d1, $d2, $d3, $d4;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha> = d0;

        r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta> = d1;

        $d3 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d2 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d4 = $d3 + $d2;

        r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _c> = $d4;

        return;
    }

    public com.opengamma.analytics.math.integration.GaussianQuadratureData generate(int)
    {
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction r0;
        int i0, $i1, $i2, i3;
        com.opengamma.util.tuple.Pair[] r1;
        com.opengamma.util.tuple.Pair r2, $r9;
        com.opengamma.analytics.math.function.DoubleFunction1D r3, r4, r5;
        double[] r6, r7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31;
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction $r8;
        java.lang.Object $r10, $r11, $r12, $r19, $r23, $r27, $r30, $r33;
        com.opengamma.analytics.math.integration.GaussianQuadratureData $r13;
        com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder $r14;
        java.lang.Double $r15, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r29, $r31, $r32, $r34;
        com.opengamma.analytics.math.function.Function1D $r17, $r21, $r25;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "n > 0");

        $r8 = <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction JACOBI>;

        $d2 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d1 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        r1 = virtualinvoke $r8.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.util.tuple.Pair[] getPolynomialsAndFirstDerivative(int,double,double)>(i0, $d2, $d1);

        r2 = r1[i0];

        $i1 = i0 - 1;

        $r9 = r1[$i1];

        $r10 = virtualinvoke $r9.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r3 = (com.opengamma.analytics.math.function.DoubleFunction1D) $r10;

        $r11 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r4 = (com.opengamma.analytics.math.function.DoubleFunction1D) $r11;

        $r12 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        r5 = (com.opengamma.analytics.math.function.DoubleFunction1D) $r12;

        r6 = newarray (double)[i0];

        r7 = newarray (double)[i0];

        d30 = 0.0;

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $i2 = 2 * i0;

        $d4 = (double) $i2;

        $d3 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _c>;

        d0 = $d4 + $d3;

        d31 = specialinvoke r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double getInitialRootGuess(double,int,int,double[])>(d30, i3, i0, r6);

        $r14 = <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOT_FINDER>;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d31);

        $r16 = virtualinvoke $r14.<com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder: java.lang.Double getRoot(com.opengamma.analytics.math.function.DoubleFunction1D,com.opengamma.analytics.math.function.DoubleFunction1D,java.lang.Double)>(r4, r5, $r15);

        d30 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        r6[i3] = d30;

        $r17 = <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.Function1D GAMMA_FUNCTION>;

        $d6 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d5 = (double) i0;

        $d7 = $d6 + $d5;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $r19 = virtualinvoke $r17.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r18);

        $r20 = (java.lang.Double) $r19;

        $d8 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $r21 = <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.Function1D GAMMA_FUNCTION>;

        $d10 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d9 = (double) i0;

        $d11 = $d10 + $d9;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r23 = virtualinvoke $r21.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r22);

        $r24 = (java.lang.Double) $r23;

        $d12 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $d13 = $d8 * $d12;

        $d14 = staticinvoke <org.apache.commons.math.util.MathUtils: double factorialDouble(int)>(i0);

        $d19 = $d13 / $d14;

        $r25 = <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.Function1D GAMMA_FUNCTION>;

        $d16 = (double) i0;

        $d15 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _c>;

        $d17 = $d16 + $d15;

        $d18 = $d17 + 1.0;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        $r27 = virtualinvoke $r25.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r26);

        $r28 = (java.lang.Double) $r27;

        $d20 = virtualinvoke $r28.<java.lang.Double: double doubleValue()>();

        $d21 = $d19 / $d20;

        $d23 = $d21 * d0;

        $d22 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _c>;

        $d24 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d22);

        $d25 = $d23 * $d24;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d30);

        $r30 = virtualinvoke r5.<com.opengamma.analytics.math.function.DoubleFunction1D: java.lang.Object evaluate(java.lang.Object)>($r29);

        $r31 = (java.lang.Double) $r30;

        $d26 = virtualinvoke $r31.<java.lang.Double: double doubleValue()>();

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d30);

        $r33 = virtualinvoke r3.<com.opengamma.analytics.math.function.DoubleFunction1D: java.lang.Object evaluate(java.lang.Object)>($r32);

        $r34 = (java.lang.Double) $r33;

        $d27 = virtualinvoke $r34.<java.lang.Double: double doubleValue()>();

        $d28 = $d26 * $d27;

        $d29 = $d25 / $d28;

        r7[i3] = $d29;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r13 = new com.opengamma.analytics.math.integration.GaussianQuadratureData;

        specialinvoke $r13.<com.opengamma.analytics.math.integration.GaussianQuadratureData: void <init>(double[],double[])>(r6, r7);

        return $r13;
    }

    private double getInitialRootGuess(double, int, int, double[])
    {
        com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, d146, d147, d148, d149, d150, d151, d152, d153, d154, d155, d156, d157, d158, d159, d160;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        double[] r1;

        r0 := @this: com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: double[];

        if i0 != 0 goto label1;

        $d124 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d123 = (double) i1;

        d146 = $d124 / $d123;

        $d126 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d125 = (double) i1;

        d147 = $d126 / $d125;

        $d127 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d134 = 1.0 + $d127;

        $i11 = i1 * i1;

        $i12 = 4 + $i11;

        $d128 = (double) $i12;

        $d132 = 2.78 / $d128;

        $d130 = 0.768 * d146;

        $d129 = (double) i1;

        $d131 = $d130 / $d129;

        $d133 = $d132 + $d131;

        d148 = $d134 * $d133;

        $d135 = 1.48 * d146;

        $d137 = 1.0 + $d135;

        $d136 = 0.96 * d147;

        $d140 = $d137 + $d136;

        $d138 = 0.452 * d146;

        $d139 = $d138 * d146;

        $d143 = $d140 + $d139;

        $d141 = 0.83 * d146;

        $d142 = $d141 * d147;

        d1 = $d143 + $d142;

        $d144 = d148 / d1;

        $d145 = 1.0 - $d144;

        return $d145;

     label1:
        if i0 != 1 goto label2;

        $d93 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d100 = 4.1 + $d93;

        $d94 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d98 = 1.0 + $d94;

        $d95 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d96 = 0.156 * $d95;

        $d97 = 1.0 + $d96;

        $d99 = $d98 * $d97;

        d149 = $d100 / $d99;

        $i10 = i1 - 8;

        $d101 = (double) $i10;

        $d105 = 0.06 * $d101;

        $d102 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d103 = 0.12 * $d102;

        $d104 = 1.0 + $d103;

        $d107 = $d105 * $d104;

        $d106 = (double) i1;

        $d108 = $d107 / $d106;

        d150 = 1.0 + $d108;

        $d109 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d111 = 0.012 * $d109;

        $d110 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d112 = staticinvoke <java.lang.Math: double abs(double)>($d110);

        $d113 = 0.25 * $d112;

        $d114 = 1.0 + $d113;

        $d116 = $d111 * $d114;

        $d115 = (double) i1;

        $d117 = $d116 / $d115;

        d151 = 1.0 + $d117;

        $d118 = 1.0 - d0;

        $d119 = $d118 * d149;

        $d120 = $d119 * d150;

        $d121 = $d120 * d151;

        $d122 = d0 - $d121;

        return $d122;

     label2:
        if i0 != 2 goto label3;

        $d68 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d69 = 0.28 * $d68;

        $d73 = 1.67 + $d69;

        $d70 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d71 = 0.37 * $d70;

        $d72 = 1.0 + $d71;

        d152 = $d73 / $d72;

        $i9 = i1 - 8;

        $d74 = (double) $i9;

        $d76 = 0.22 * $d74;

        $d75 = (double) i1;

        $d77 = $d76 / $d75;

        d153 = 1.0 + $d77;

        $d78 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d85 = 8.0 * $d78;

        $d79 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d81 = 6.28 + $d79;

        $d80 = (double) i1;

        $d83 = $d81 * $d80;

        $d82 = (double) i1;

        $d84 = $d83 * $d82;

        $d86 = $d85 / $d84;

        d154 = 1.0 + $d86;

        $d87 = r1[0];

        $d88 = $d87 - d0;

        $d89 = $d88 * d152;

        $d90 = $d89 * d153;

        $d91 = $d90 * d154;

        $d92 = d0 - $d91;

        return $d92;

     label3:
        $i2 = i1 - 2;

        if i0 != $i2 goto label4;

        $d37 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d38 = 0.235 * $d37;

        $d42 = 1.0 + $d38;

        $d39 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d40 = 0.119 * $d39;

        $d41 = 0.766 + $d40;

        d155 = $d42 / $d41;

        $d43 = (double) i1;

        $d44 = $d43 - 4.0;

        $d49 = 0.639 * $d44;

        $d45 = (double) i1;

        $d46 = $d45 - 4.0;

        $d47 = 0.71 * $d46;

        $d48 = 1.0 + $d47;

        $d50 = $d49 / $d48;

        $d51 = 1.0 + $d50;

        d156 = 1.0 / $d51;

        $d52 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d59 = 20.0 * $d52;

        $d53 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d55 = 7.5 + $d53;

        $d54 = (double) i1;

        $d57 = $d55 * $d54;

        $d56 = (double) i1;

        $d58 = $d57 * $d56;

        $d60 = $d59 / $d58;

        $d61 = 1.0 + $d60;

        d157 = 1.0 / $d61;

        $i8 = i1 - 4;

        $d62 = r1[$i8];

        $d63 = d0 - $d62;

        $d64 = $d63 * d155;

        $d65 = $d64 * d156;

        $d66 = $d65 * d157;

        $d67 = d0 + $d66;

        return $d67;

     label4:
        $i3 = i1 - 1;

        if i0 != $i3 goto label5;

        $d9 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d10 = 0.37 * $d9;

        $d14 = 1.0 + $d10;

        $d11 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _beta>;

        $d12 = 0.28 * $d11;

        $d13 = 1.67 + $d12;

        d158 = $d14 / $d13;

        $d15 = (double) i1;

        $d16 = $d15 - 8.0;

        $d18 = 0.22 * $d16;

        $d17 = (double) i1;

        $d19 = $d18 / $d17;

        $d20 = 1.0 + $d19;

        d159 = 1.0 / $d20;

        $d21 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d28 = 8.0 * $d21;

        $d22 = r0.<com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: double _alpha>;

        $d24 = 6.28 + $d22;

        $d23 = (double) i1;

        $d26 = $d24 * $d23;

        $d25 = (double) i1;

        $d27 = $d26 * $d25;

        $d29 = $d28 / $d27;

        $d30 = 1.0 + $d29;

        d160 = 1.0 / $d30;

        $i7 = i1 - 3;

        $d31 = r1[$i7];

        $d32 = d0 - $d31;

        $d33 = $d32 * d158;

        $d34 = $d33 * d159;

        $d35 = $d34 * d160;

        $d36 = d0 + $d35;

        return $d36;

     label5:
        $i4 = i0 - 1;

        $d2 = r1[$i4];

        $d5 = 3.0 * $d2;

        $i5 = i0 - 2;

        $d3 = r1[$i5];

        $d4 = 3.0 * $d3;

        $d7 = $d5 - $d4;

        $i6 = i0 - 3;

        $d6 = r1[$i6];

        $d8 = $d7 + $d6;

        return $d8;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction $r0;
        com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder $r1;
        com.opengamma.analytics.math.function.special.GammaFunction $r2;

        $r0 = new com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        specialinvoke $r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: void <init>()>();

        <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction JACOBI> = $r0;

        $r1 = new com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder;

        specialinvoke $r1.<com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder: void <init>(double)>(1.0E-12);

        <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOT_FINDER> = $r1;

        $r2 = new com.opengamma.analytics.math.function.special.GammaFunction;

        specialinvoke $r2.<com.opengamma.analytics.math.function.special.GammaFunction: void <init>()>();

        <com.opengamma.analytics.math.integration.GaussJacobiWeightAndAbscissaFunction: com.opengamma.analytics.math.function.Function1D GAMMA_FUNCTION> = $r2;

        return;
    }
}
