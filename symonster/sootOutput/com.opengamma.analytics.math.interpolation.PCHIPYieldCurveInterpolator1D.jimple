public class com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private static final com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r8, $r9, $r10;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle r3;
        double d1, $d2, $d3, $d4, $d5, $d6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4;
        boolean $z0, $z1;
        byte $b0, $b1;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r5;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r6;
        int[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle) r1;

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b0 = $d2 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "value must be zero or positive");

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b1 = $d3 cmpl 0.0;

        if $b1 != 0 goto label3;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r10;

     label3:
        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(1.0E-10, $d4);

        $r5 = <com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        r4 = virtualinvoke $r5.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r6, d1);

        $r7 = newarray (int)[1];

        $r7[0] = 0;

        $r8 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d5 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d6 = $d5 / d1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r9;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r11, $r13;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle r3;
        double d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        boolean $z0, $z1;
        byte $b0, $b1;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r6, $r8;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r7, $r9;
        int[] $r10, $r12;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle) r1;

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b0 = $d2 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "value must be zero or positive");

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b1 = $d3 cmpl 0.0;

        if $b1 != 0 goto label3;

        return 0.0;

     label3:
        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(1.0E-10, $d4);

        $r6 = <com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        r4 = virtualinvoke $r6.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r7, d1);

        $r8 = <com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        r5 = virtualinvoke $r8.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r9, d1);

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        $r11 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        $d5 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = newarray (int)[1];

        $r12[0] = 0;

        $r13 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r12);

        $d6 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d7 = $d6 / d1;

        $d8 = $d5 - $d7;

        $d9 = $d8 / d1;

        return $d9;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        double[] r1, r2, r3, r4;
        int i0, $i1;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "x and y different lengths");

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r3, r4);

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[],double[])>(r3, r4);

        return $r5;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        double[] r1, r2, r6, r7, r8;
        int i0, $i1, $i2, $i5, $i6, $i7, i8, i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b3, $b4;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if i0 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "x and y different lengths");

        $i2 = lengthof r2;

        if i0 != $i2 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "x and y different lengths");

        $d0 = r1[0];

        $b3 = $d0 cmpl 0.0;

        if $b3 < 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "first x-values cannot be negative");

        r6 = r1;

        $d1 = r1[0];

        $b4 = $d1 cmpl 0.0;

        if $b4 <= 0 goto label09;

        $i5 = i0 + 1;

        r7 = newarray (double)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r7, 1, i0);

        r6 = r7;

        $i6 = i0 + 1;

        r8 = newarray (double)[$i6];

        i8 = 1;

     label07:
        if i8 > i0 goto label08;

        $d6 = r7[i8];

        $i7 = i8 - 1;

        $d5 = r2[$i7];

        $d7 = $d6 * $d5;

        r8[i8] = $d7;

        i8 = i8 + 1;

        goto label07;

     label08:
        goto label11;

     label09:
        r8 = newarray (double)[i0];

        i9 = 1;

     label10:
        if i9 >= i0 goto label11;

        $d3 = r1[i9];

        $d2 = r2[i9];

        $d4 = $d3 * $d2;

        r8[i9] = $d4;

        i9 = i9 + 1;

        goto label10;

     label11:
        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r6, r8, 1);

        $r5 = new com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: void <init>()>();

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r4, $r5);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r0;

        <com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: long serialVersionUID> = 1L;

        $r0 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r0.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        <com.opengamma.analytics.math.interpolation.PCHIPYieldCurveInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC> = $r0;

        return;
    }
}
