public class com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND extends com.opengamma.analytics.math.interpolation.InterpolatorND
{
    private final com.opengamma.analytics.math.function.Function1D _basisFunction;
    private final boolean _useNormalized;

    public void <init>(com.opengamma.analytics.math.function.Function1D, boolean)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        com.opengamma.analytics.math.function.Function1D r1;
        boolean z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.InterpolatorND: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "basis function");

        r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction> = r1;

        r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized> = z0;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[])
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle r1;
        double[] r2, r5, r7;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle r3;
        java.util.List r4;
        com.opengamma.analytics.math.function.Function1D r6;
        int i0, i1;
        double d0, $d1, $d2, $d3, d4, d5, $d6;
        boolean $z0, $z1;
        java.lang.Double $r8, $r12, $r14;
        java.lang.Object $r9, $r11, $r13;
        com.opengamma.util.tuple.Pair $r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle;

        r2 := @parameter1: double[];

        virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: void validateInput(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle,double[])>(r1, r2);

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "RadialBasisFunctionInterpolatorND needs a RadialBasisFunctionInterpolatorDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle) r1;

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: java.util.List getData()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: double[] getWeights()>();

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: com.opengamma.analytics.math.function.Function1D getBasisFunction()>();

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        d4 = 0.0;

        d5 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (com.opengamma.util.tuple.Pair) $r9;

        $r11 = virtualinvoke $r10.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r7 = (double[]) $r11;

        $d1 = staticinvoke <com.opengamma.analytics.math.interpolation.DistanceCalculator: double getDistance(double[],double[])>(r2, r7);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r13 = virtualinvoke r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r12);

        $r14 = (java.lang.Double) $r13;

        d0 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $d2 = r5[i1];

        $d3 = $d2 * d0;

        d4 = d4 + $d3;

        d5 = d5 + d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $z1 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: boolean isNormalized()>();

        if $z1 == 0 goto label3;

        $d6 = d4 / d5;

        goto label4;

     label3:
        $d6 = d4;

     label4:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r8;
    }

    public java.util.Map getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[])
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle r1;
        double[] r2, r6, r7, r8, r30, r31;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle r3;
        java.util.List r4;
        com.opengamma.analytics.math.function.Function1D r5;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult $r11;
        java.util.HashMap $r12;
        java.lang.Object $r13, $r15, $r18, $r20, $r22, $r24, $r26, $r28;
        com.opengamma.util.tuple.Pair $r14, $r19, $r25;
        java.lang.Double $r16, $r21, $r23, $r27, $r29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d11;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "x array");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "RadialBasisFunctionInterpolatorNDSensitivityCalculator needs a RadialBasisFunctionInterpolatorDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle) r1;

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: java.util.List getData()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: com.opengamma.analytics.math.function.Function1D getBasisFunction()>();

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        r7 = newarray (double)[i0];

        d8 = 0.0;

        r8 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r18 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r19 = (com.opengamma.util.tuple.Pair) $r18;

        $r20 = virtualinvoke $r19.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r6 = (double[]) $r20;

        $d3 = staticinvoke <com.opengamma.analytics.math.interpolation.DistanceCalculator: double getDistance(double[],double[])>(r2, r6);

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r22 = virtualinvoke r5.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r21);

        $r23 = (java.lang.Double) $r22;

        $d4 = virtualinvoke $r23.<java.lang.Double: double doubleValue()>();

        r7[i1] = $d4;

        $z2 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: boolean isNormalized()>();

        if $z2 == 0 goto label4;

        $d5 = r7[i1];

        d8 = d8 + $d5;

        d9 = 0.0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r24 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r25 = (com.opengamma.util.tuple.Pair) $r24;

        $r26 = virtualinvoke $r25.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r30 = (double[]) $r26;

        $d6 = staticinvoke <com.opengamma.analytics.math.interpolation.DistanceCalculator: double getDistance(double[],double[])>(r30, r6);

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r28 = virtualinvoke r5.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r27);

        $r29 = (java.lang.Double) $r28;

        $d7 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        d9 = d9 + $d7;

        i2 = i2 + 1;

        goto label2;

     label3:
        r8[i1] = d9;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r11 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: com.opengamma.analytics.math.linearalgebra.DecompositionResult getDecompositionResult()>();

        r31 = interfaceinvoke $r11.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: double[] solve(double[])>(r7);

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>(int)>(i0);

        i3 = 0;

     label6:
        if i3 >= i0 goto label9;

        $z1 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: boolean isNormalized()>();

        if $z1 == 0 goto label7;

        $d1 = r31[i3];

        $d0 = r8[i3];

        $d2 = $d1 * $d0;

        d11 = $d2 / d8;

        goto label8;

     label7:
        d11 = r31[i3];

     label8:
        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r14 = (com.opengamma.util.tuple.Pair) $r13;

        $r15 = virtualinvoke $r14.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d11);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        i3 = i3 + 1;

        goto label6;

     label9:
        return $r12;
    }

    public com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle getDataBundle(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        double[] r1, r2, r3, r4;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle $r5;
        java.util.List $r6;
        boolean $z0;
        com.opengamma.analytics.math.function.Function1D $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = new com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: java.util.List transformData(double[],double[],double[],double[])>(r1, r2, r3, r4);

        $r7 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction>;

        $z0 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized>;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: void <init>(java.util.List,com.opengamma.analytics.math.function.Function1D,boolean)>($r6, $r7, $z0);

        return $r5;
    }

    public com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle getDataBundle(java.util.List)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        java.util.List r1;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle $r2;
        boolean $z0;
        com.opengamma.analytics.math.function.Function1D $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: java.util.List;

        $r2 = new com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle;

        $r3 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction>;

        $z0 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized>;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle: void <init>(java.util.List,com.opengamma.analytics.math.function.Function1D,boolean)>(r1, $r3, $z0);

        return $r2;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        com.opengamma.analytics.math.function.Function1D $r1;
        int $i1, $i2, $i3, i5, i7;
        boolean $z0;
        short $s6;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction>;

        $i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i5 = $i1 + $i2;

        $i3 = 31 * i5;

        $z0 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized>;

        if $z0 == 0 goto label1;

        $s6 = 1231;

        goto label2;

     label1:
        $s6 = 1237;

     label2:
        i7 = $i3 + $s6;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        com.opengamma.analytics.math.function.Function1D $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND) r1;

        $r6 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction>;

        $r5 = r2.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.function.Function1D _basisFunction>;

        $z0 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $z2 = r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized>;

        $z1 = r2.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: boolean _useNormalized>;

        if $z2 != $z1 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(java.util.List)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        java.util.List r1;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle getDataBundle(java.util.List)>(r1);

        return $r2;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        double[] r1, r2, r3, r4;
        com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: com.opengamma.analytics.math.interpolation.data.RadialBasisFunctionInterpolatorDataBundle getDataBundle(double[],double[],double[],double[])>(r1, r2, r3, r4);

        return $r5;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND r0;
        java.lang.Object r1, r2;
        double[] $r3;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle $r4;
        java.lang.Double $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle) r1;

        $r3 = (double[]) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunctionInterpolatorND: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle,double[])>($r4, $r3);

        return $r5;
    }
}
