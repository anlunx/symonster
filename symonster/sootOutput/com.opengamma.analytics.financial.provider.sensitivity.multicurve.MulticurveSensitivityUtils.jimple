public class com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils extends java.lang.Object
{

    protected void <init>()
    {
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils r0;

        r0 := @this: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map cleaned(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2, r24, r26;
        java.util.Map$Entry r3;
        java.util.List r4;
        java.util.HashMap $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9, $r10, $r13, $r15, $r17, $r20, $r22;
        java.util.ArrayList $r11;
        java.util.TreeSet $r12;
        int $i0, i4;
        double $d0, $d1, $d2, $d3, d4;
        com.opengamma.util.tuple.DoublesPair $r16, $r18, $r21, r25;
        java.lang.Double $r19, $r23, r27;
        long $l1, $l2;
        byte $b3;

        r0 := @parameter0: java.util.Map;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.List) $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.TreeSet;

        specialinvoke $r12.<java.util.TreeSet: void <init>()>();

        r24 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r22 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.opengamma.util.tuple.DoublesPair) $r22;

        $r23 = virtualinvoke r25.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r23);

        goto label2;

     label3:
        r26 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r15 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.Double) $r15;

        d4 = 0.0;

        i4 = 0;

     label5:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if i4 >= $i0 goto label7;

        $r17 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r18 = (com.opengamma.util.tuple.DoublesPair) $r17;

        $r19 = virtualinvoke $r18.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        $d1 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $d2 = virtualinvoke r27.<java.lang.Double: double doubleValue()>();

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label6;

        $r20 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r21 = (com.opengamma.util.tuple.DoublesPair) $r20;

        $d3 = $r21.<com.opengamma.util.tuple.DoublesPair: double second>;

        d4 = d4 + $d3;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        $d0 = virtualinvoke r27.<java.lang.Double: double doubleValue()>();

        $r16 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d0, d4);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label4;

     label8:
        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        goto label1;

     label9:
        return $r7;
    }

    public static java.util.Map cleaned(java.util.Map, double)
    {
        java.util.Map r0;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        java.util.Iterator r2, r23, r25;
        java.util.Map$Entry r3;
        java.util.List r4;
        java.util.HashMap $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9, $r10, $r13, $r15, $r17, $r19, $r21;
        java.util.ArrayList $r11;
        java.util.TreeSet $r12;
        int $i0, i5;
        byte $b1, $b4;
        com.opengamma.util.tuple.DoublesPair $r16, $r18, $r20, r24;
        long $l2, $l3;
        java.lang.Double $r22, r26;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.List) $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.TreeSet;

        specialinvoke $r12.<java.util.TreeSet: void <init>()>();

        r23 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r21 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.opengamma.util.tuple.DoublesPair) $r21;

        $r22 = virtualinvoke r24.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r22);

        goto label02;

     label03:
        r25 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.Double) $r15;

        d6 = 0.0;

        i5 = 0;

     label05:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if i5 >= $i0 goto label07;

        $r17 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r18 = (com.opengamma.util.tuple.DoublesPair) $r17;

        $d3 = virtualinvoke $r18.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $d4 = virtualinvoke r26.<java.lang.Double: double doubleValue()>();

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label06;

        $r19 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r20 = (com.opengamma.util.tuple.DoublesPair) $r19;

        $d5 = $r20.<com.opengamma.util.tuple.DoublesPair: double second>;

        d6 = d6 + $d5;

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d6);

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label08;

        $d2 = virtualinvoke r26.<java.lang.Double: double doubleValue()>();

        $r16 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d2, d6);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r16);

     label08:
        goto label04;

     label09:
        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        goto label01;

     label10:
        return $r7;
    }

    public static java.util.Map cleanedFwd(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2, r36, r38;
        java.util.Map$Entry r3;
        java.util.List r4;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r7, $r30, r37;
        com.opengamma.util.tuple.Triple r8, $r35, r39;
        java.util.HashMap $r9;
        java.util.Set $r10;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r11, $r12, $r15, $r17, $r19, $r21, $r23, $r25, $r29, $r31;
        java.util.ArrayList $r13;
        java.util.TreeSet $r14;
        int $i0, i1;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity $r18;
        java.lang.Double $r20, $r22, $r24, $r26, $r27, $r28, $r32, $r33, $r34;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;

        r0 := @parameter0: java.util.Map;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.List) $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.TreeSet;

        specialinvoke $r14.<java.util.TreeSet: void <init>()>();

        r36 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r31 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r31;

        $d7 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $d8 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $d9 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r35 = staticinvoke <com.opengamma.util.tuple.Triple: com.opengamma.util.tuple.Triple of(java.lang.Object,java.lang.Object,java.lang.Object)>($r32, $r33, $r34);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r35);

        goto label2;

     label3:
        r38 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r17 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.opengamma.util.tuple.Triple) $r17;

        d10 = 0.0;

        i1 = 0;

     label5:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label7;

        $r25 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r25;

        $d3 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $d4 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $d5 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        r8 = staticinvoke <com.opengamma.util.tuple.Triple: com.opengamma.util.tuple.Triple of(java.lang.Object,java.lang.Object,java.lang.Object)>($r26, $r27, $r28);

        $z4 = virtualinvoke r8.<com.opengamma.util.tuple.Triple: boolean equals(java.lang.Object)>(r39);

        if $z4 == 0 goto label6;

        $r29 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r30 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r29;

        $d6 = virtualinvoke $r30.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        d10 = d10 + $d6;

     label6:
        i1 = i1 + 1;

        goto label5;

     label7:
        $r18 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity;

        $r19 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getFirst()>();

        $r20 = (java.lang.Double) $r19;

        $d0 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $r21 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getSecond()>();

        $r22 = (java.lang.Double) $r21;

        $d1 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $r23 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getThird()>();

        $r24 = (java.lang.Double) $r23;

        $d2 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        specialinvoke $r18.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity: void <init>(double,double,double,double)>($d0, $d1, $d2, d10);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label4;

     label8:
        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r13);

        goto label1;

     label9:
        return $r9;
    }

    public static java.util.Map cleanedFwd(java.util.Map, double)
    {
        java.util.Map r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        java.util.Iterator r2, r36, r38;
        java.util.Map$Entry r3;
        java.util.List r4;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r7, $r30, r37;
        com.opengamma.util.tuple.Triple r8, $r35, r39;
        java.util.HashMap $r9;
        java.util.Set $r10;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r11, $r12, $r15, $r17, $r19, $r21, $r23, $r25, $r29, $r31;
        java.util.ArrayList $r13;
        java.util.TreeSet $r14;
        int $i0, i2;
        byte $b1;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity $r18;
        java.lang.Double $r20, $r22, $r24, $r26, $r27, $r28, $r32, $r33, $r34;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.List) $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.TreeSet;

        specialinvoke $r14.<java.util.TreeSet: void <init>()>();

        r36 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r31 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r31;

        $d9 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $d10 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        $d11 = virtualinvoke r37.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r35 = staticinvoke <com.opengamma.util.tuple.Triple: com.opengamma.util.tuple.Triple of(java.lang.Object,java.lang.Object,java.lang.Object)>($r32, $r33, $r34);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r35);

        goto label02;

     label03:
        r38 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r17 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.opengamma.util.tuple.Triple) $r17;

        d12 = 0.0;

        i2 = 0;

     label05:
        $i0 = interfaceinvoke r4.<java.util.List: int size()>();

        if i2 >= $i0 goto label07;

        $r25 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i2);

        r7 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r25;

        $d5 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $d6 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $d7 = virtualinvoke r7.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        r8 = staticinvoke <com.opengamma.util.tuple.Triple: com.opengamma.util.tuple.Triple of(java.lang.Object,java.lang.Object,java.lang.Object)>($r26, $r27, $r28);

        $z4 = virtualinvoke r8.<com.opengamma.util.tuple.Triple: boolean equals(java.lang.Object)>(r39);

        if $z4 == 0 goto label06;

        $r29 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r30 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r29;

        $d8 = virtualinvoke $r30.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        d12 = d12 + $d8;

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d12);

        $b1 = $d1 cmpl d0;

        if $b1 <= 0 goto label08;

        $r18 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity;

        $r19 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getFirst()>();

        $r20 = (java.lang.Double) $r19;

        $d2 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $r21 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getSecond()>();

        $r22 = (java.lang.Double) $r21;

        $d3 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $r23 = virtualinvoke r39.<com.opengamma.util.tuple.Triple: java.lang.Object getThird()>();

        $r24 = (java.lang.Double) $r23;

        $d4 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        specialinvoke $r18.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity: void <init>(double,double,double,double)>($d2, $d3, $d4, d12);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r18);

     label08:
        goto label04;

     label09:
        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r13);

        goto label01;

     label10:
        return $r9;
    }

    public static java.util.List plus(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $r3;
    }

    public static java.util.Map plus(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.HashMap $r5;
        java.util.Set $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r18;
        java.util.List $r17, $r19, $r20;
        java.util.Iterator r22, r25;
        java.util.Map$Entry r23, r26;
        java.lang.String r24, r27;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        r24 = (java.lang.String) $r13;

        $z3 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r24);

        if $z3 == 0 goto label2;

        $r16 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r24);

        $r19 = (java.util.List) $r18;

        $r20 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils: java.util.List plus(java.util.List,java.util.List)>($r17, $r19);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r20);

        goto label3;

     label2:
        $r14 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r14);

     label3:
        goto label1;

     label4:
        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        r27 = (java.lang.String) $r9;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r27);

        if $z2 != 0 goto label6;

        $r10 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r10);

     label6:
        goto label5;

     label7:
        return $r5;
    }

    public static java.util.Map plus(java.util.Map, java.lang.String, java.util.List)
    {
        java.util.Map r0;
        java.lang.String r1, r6;
        java.util.List r2, $r17, $r18;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.HashMap $r9;
        java.util.Set $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r12, $r13, $r14, $r16;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "sensitivity");

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r13;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        $r18 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils: java.util.List plus(java.util.List,java.util.List)>($r17, r2);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r18);

        goto label3;

     label2:
        $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r14);

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label5:
        return $r9;
    }

    public static java.util.Map plusFwd(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.HashMap $r3;
        java.util.Set $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7;
        java.lang.Object $r6, $r7, $r9, $r12, $r13, $r15, $r16, $r19, $r21, $r22;
        java.util.ArrayList $r8, $r14;
        java.util.List $r10, $r17, $r20;
        java.util.Iterator r23, r27, r29, r31, r35;
        java.util.Map$Entry r24, r32;
        java.lang.String r26, r33;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r28, r30, r36;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r13 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        r26 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        r27 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        $r22 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r22;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label02;

     label03:
        $z6 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r26);

        if $z6 == 0 goto label05;

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        $r20 = (java.util.List) $r19;

        r29 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label05;

        $r21 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r21;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r30);

        goto label04;

     label05:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r14);

        goto label01;

     label06:
        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r31 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r6 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        r33 = (java.lang.String) $r7;

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r33);

        if $z2 != 0 goto label10;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.List) $r9;

        r35 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r12 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r12;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r36);

        goto label08;

     label09:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, $r8);

     label10:
        goto label07;

     label11:
        return $r3;
    }

    public static java.util.Map multipliedBy(java.util.Map, double)
    {
        java.util.Map r0;
        double d0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;
        java.util.List $r10, $r11;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.List) $r9;

        $r11 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils: java.util.List multipliedBy(java.util.List,double)>($r10, d0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label1;

     label2:
        return $r5;
    }

    public static java.util.List multipliedBy(java.util.List, double)
    {
        java.util.List r0;
        double d0, $d1, $d2, $d3;
        java.util.Iterator r2;
        com.opengamma.util.tuple.DoublesPair r3, $r7;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.util.tuple.DoublesPair) $r6;

        $d3 = r3.<com.opengamma.util.tuple.DoublesPair: double first>;

        $d1 = r3.<com.opengamma.util.tuple.DoublesPair: double second>;

        $d2 = $d1 * d0;

        $r7 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d3, $d2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r5;
    }

    public static java.util.Map productOf(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.String r5;
        java.util.HashMap $r8;
        java.util.Set $r9;
        boolean $z0, $z1;
        java.lang.Object $r10, $r11, $r12, $r14;
        java.util.List $r13, $r15, $r16;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "sensitivity");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "sensitivity");

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r11;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.util.List) $r12;

        $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r15 = (java.util.List) $r14;

        $r16 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivityUtils: java.util.List productOf(java.util.List,java.util.List)>($r13, $r15);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r16);

     label2:
        goto label1;

     label3:
        return $r8;
    }

    public static java.util.List productOf(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i2;
        java.util.Iterator r3;
        com.opengamma.util.tuple.DoublesPair r4, $r8, $r10, $r11;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.opengamma.util.tuple.DoublesPair) $r6;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $d0 = r4.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r8 = (com.opengamma.util.tuple.DoublesPair) $r7;

        $d1 = $r8.<com.opengamma.util.tuple.DoublesPair: double first>;

        $b1 = $d0 cmpl $d1;

        if $b1 != 0 goto label3;

        $d2 = r4.<com.opengamma.util.tuple.DoublesPair: double first>;

        $d3 = r4.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r10 = (com.opengamma.util.tuple.DoublesPair) $r9;

        $d4 = $r10.<com.opengamma.util.tuple.DoublesPair: double second>;

        $d5 = $d3 * $d4;

        $r11 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d2, $d5);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return $r5;
    }

    public static java.util.Map multipliedByFwd(java.util.Map, double)
    {
        java.util.Map r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Iterator r2, r5;
        java.util.Map$Entry r3;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r6;
        java.util.HashMap $r7;
        java.util.Set $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11, $r13, $r15;
        java.util.ArrayList $r10;
        java.util.List $r12;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity $r16;

        r0 := @parameter0: java.util.Map;

        d0 := @parameter1: double;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.List) $r11;

        r5 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r15;

        $r16 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity;

        $d1 = virtualinvoke r6.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $d2 = virtualinvoke r6.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $d3 = virtualinvoke r6.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $d4 = virtualinvoke r6.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $d5 = $d4 * d0;

        specialinvoke $r16.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity: void <init>(double,double,double,double)>($d1, $d2, $d3, $d5);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label2;

     label3:
        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r10);

        goto label1;

     label4:
        return $r7;
    }

    public static java.util.Map productOfFwd(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.Iterator r3, r7;
        java.util.Map$Entry r4;
        java.lang.String r6;
        int i0, i3;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r8, $r22, $r26, $r31;
        java.util.HashMap $r9;
        java.util.Set $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r23, $r25, $r28, $r30;
        java.util.ArrayList $r12;
        java.util.List $r17, $r20, $r24, $r29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b1, $b2;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity $r27;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r13;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 == 0 goto label6;

        i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r16 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        r7 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r18;

        i3 = 0;

     label3:
        if i3 >= i0 goto label5;

        $d0 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r20 = (java.util.List) $r19;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i3);

        $r22 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r21;

        $d1 = virtualinvoke $r22.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $b1 = $d0 cmpl $d1;

        if $b1 != 0 goto label4;

        $d2 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $r23 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r24 = (java.util.List) $r23;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i3);

        $r26 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r25;

        $d3 = virtualinvoke $r26.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $b2 = $d2 cmpl $d3;

        if $b2 != 0 goto label4;

        $r27 = new com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity;

        $d4 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $d5 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        $d6 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        $d7 = virtualinvoke r8.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $r28 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r29 = (java.util.List) $r28;

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(i3);

        $r31 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r30;

        $d8 = virtualinvoke $r31.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $d9 = $d7 * $d8;

        specialinvoke $r27.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.SimplyCompoundedForwardSensitivity: void <init>(double,double,double,double)>($d4, $d5, $d6, $d9);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r27);

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r12);

        goto label1;

     label7:
        return $r9;
    }
}
