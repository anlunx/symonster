class org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 extends java.lang.Object implements java.util.Comparator
{
    final double[] val$target;
    final double[] val$weights;
    final org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer this$0;

    void <init>(org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer, double[], double[])
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer r1;
        double[] r2, r3;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        r1 := @parameter0: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer this$0> = r1;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$target> = r2;

        r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$weights> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.commons.math3.optimization.PointVectorValuePair, org.apache.commons.math3.optimization.PointVectorValuePair)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.PointVectorValuePair r1, r2;
        double $d0, $d1;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        r1 := @parameter0: org.apache.commons.math3.optimization.PointVectorValuePair;

        r2 := @parameter1: org.apache.commons.math3.optimization.PointVectorValuePair;

        if r1 != null goto label3;

        if r2 != null goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        return $b1;

     label3:
        if r2 != null goto label4;

        return -1;

     label4:
        $d0 = specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)>(r1);

        $d1 = specialinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)>(r2);

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;
    }

    private double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        org.apache.commons.math3.optimization.PointVectorValuePair r1;
        double[] r2, $r3, $r4;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        r1 := @parameter0: org.apache.commons.math3.optimization.PointVectorValuePair;

        r2 = virtualinvoke r1.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getValueRef()>();

        d6 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $d2 = r2[i1];

        $r3 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$target>;

        $d1 = $r3[i1];

        d0 = $d2 - $d1;

        $r4 = r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: double[] val$weights>;

        $d3 = $r4[i1];

        $d4 = $d3 * d0;

        $d5 = $d4 * d0;

        d6 = d6 + $d5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d6;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1 r0;
        java.lang.Object r1, r2;
        org.apache.commons.math3.optimization.PointVectorValuePair $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.commons.math3.optimization.PointVectorValuePair) r1;

        $r3 = (org.apache.commons.math3.optimization.PointVectorValuePair) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1: int compare(org.apache.commons.math3.optimization.PointVectorValuePair,org.apache.commons.math3.optimization.PointVectorValuePair)>($r4, $r3);

        return $i0;
    }
}
