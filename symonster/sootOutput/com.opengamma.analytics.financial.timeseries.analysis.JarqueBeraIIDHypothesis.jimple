public class com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis extends com.opengamma.analytics.financial.timeseries.analysis.IIDHypothesis
{
    private static final org.slf4j.Logger s_logger;
    private final com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _skewCalculator;
    private final com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _kurtosisCalculator;
    private final double _criticalValue;

    public void <init>(double)
    {
        com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis r0;
        double d0, $d1, $d2;
        com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator $r1, $r3;
        com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator $r2;
        com.opengamma.analytics.math.statistics.descriptive.SampleFisherKurtosisCalculator $r4;
        boolean $z0;
        com.opengamma.analytics.math.statistics.distribution.ChiSquareDistribution $r5;
        java.lang.Double $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.financial.timeseries.analysis.IIDHypothesis: void <init>()>();

        $r1 = new com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator;

        $r2 = new com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator;

        specialinvoke $r2.<com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator: void <init>()>();

        specialinvoke $r1.<com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator: void <init>(com.opengamma.analytics.math.function.Function)>($r2);

        r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _skewCalculator> = $r1;

        $r3 = new com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator;

        $r4 = new com.opengamma.analytics.math.statistics.descriptive.SampleFisherKurtosisCalculator;

        specialinvoke $r4.<com.opengamma.analytics.math.statistics.descriptive.SampleFisherKurtosisCalculator: void <init>()>();

        specialinvoke $r3.<com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator: void <init>(com.opengamma.analytics.math.function.Function)>($r4);

        r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _kurtosisCalculator> = $r3;

        $z0 = staticinvoke <com.opengamma.util.ArgumentChecker: boolean isInRangeExcludingLow(double,double,double)>(0.0, 1.0, d0);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Level must be between 0 and 1");

        throw $r7;

     label1:
        $r5 = new com.opengamma.analytics.math.statistics.distribution.ChiSquareDistribution;

        specialinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ChiSquareDistribution: void <init>(double)>(2.0);

        $d1 = 1.0 - d0;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $d2 = virtualinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ChiSquareDistribution: double getInverseCDF(java.lang.Double)>($r6);

        r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: double _criticalValue> = $d2;

        return;
    }

    public boolean testIID(com.opengamma.timeseries.DoubleTimeSeries)
    {
        com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis r0;
        com.opengamma.timeseries.DoubleTimeSeries r1;
        int i0, $i1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        com.opengamma.timeseries.DoubleTimeSeries[] $r2, $r5;
        com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator $r3, $r6;
        java.lang.Double $r4, $r7;
        byte $b2;
        org.slf4j.Logger $r8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis;

        r1 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $i1 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        if $i1 >= 1000 goto label1;

        $r8 = <com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: org.slf4j.Logger s_logger>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>("Use of this test is discouraged for time series with fewer than 1000 elements; the result will be inaccurate");

     label1:
        i0 = interfaceinvoke r1.<com.opengamma.timeseries.DoubleTimeSeries: int size()>();

        $r3 = r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _skewCalculator>;

        $r2 = newarray (com.opengamma.timeseries.DoubleTimeSeries)[1];

        $r2[0] = r1;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator: java.lang.Double evaluate(com.opengamma.timeseries.DoubleTimeSeries[])>($r2);

        $d3 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d3, 2.0);

        $r6 = r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator _kurtosisCalculator>;

        $r5 = newarray (com.opengamma.timeseries.DoubleTimeSeries)[1];

        $r5[0] = r1;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.financial.timeseries.analysis.DoubleTimeSeriesStatisticsCalculator: java.lang.Double evaluate(com.opengamma.timeseries.DoubleTimeSeries[])>($r5);

        $d4 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, 2.0);

        $d7 = (double) i0;

        $d5 = d1 / 4.0;

        $d6 = d0 + $d5;

        $d8 = $d7 * $d6;

        d2 = $d8 / 6.0;

        $d9 = r0.<com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: double _criticalValue>;

        $b2 = d2 cmpg $d9;

        if $b2 >= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/timeseries/analysis/JarqueBeraIIDHypothesis");

        <com.opengamma.analytics.financial.timeseries.analysis.JarqueBeraIIDHypothesis: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
