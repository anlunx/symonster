public abstract class org.apache.commons.math3.random.AbstractRandomGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomGenerator
{
    private double cachedNormalDeviate;

    public void <init>()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return;
    }

    public void clear()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return;
    }

    public void setSeed(int)
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: void setSeed(long)>($l1);

        return;
    }

    public void setSeed(int[])
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int[] r1;
        int i1, i2, i6;
        long $l3, $l4, l5;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        r1 := @parameter0: int[];

        l5 = 0L;

        i1 = lengthof r1;

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        i2 = r1[i6];

        $l4 = l5 * 4294967291L;

        $l3 = (long) i2;

        l5 = $l4 + $l3;

        i6 = i6 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: void setSeed(long)>(l5);

        return;
    }

    public abstract void setSeed(long);

    public void nextBytes(byte[])
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        byte[] r1;
        int $i0, $i1, $i3, i4, i5, i6;
        byte $b2;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        r1 := @parameter0: byte[];

        i4 = 0;

     label1:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label6;

        i5 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: int nextInt()>();

        i6 = 0;

     label2:
        if i6 >= 3 goto label5;

        if i6 <= 0 goto label3;

        i5 = i5 >> 8;

     label3:
        $i1 = i4;

        i4 = i4 + 1;

        $b2 = (byte) i5;

        r1[$i1] = $b2;

        $i3 = lengthof r1;

        if i4 != $i3 goto label4;

        return;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    public int nextInt()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d1 = 2.0 * $d0;

        $d2 = $d1 - 1.0;

        $d3 = $d2 * 2.147483647E9;

        $i0 = (int) $d3;

        return $i0;
    }

    public int nextInt(int)
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        int i0, i1, $i2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d1 = (double) i0;

        $d2 = $d0 * $d1;

        i1 = (int) $d2;

        if i1 >= i0 goto label2;

        $i2 = i1;

        goto label3;

     label2:
        $i2 = i0 - 1;

     label3:
        return $i2;
    }

    public long nextLong()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0, $d1, $d2, $d3;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d1 = 2.0 * $d0;

        $d2 = $d1 - 1.0;

        $d3 = $d2 * 9.223372036854776E18;

        $l0 = (long) $d3;

        return $l0;
    }

    public boolean nextBoolean()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $b0 = $d0 cmpg 0.5;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public float nextFloat()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0;
        float $f0;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public abstract double nextDouble();

    public double nextGaussian()
    {
        org.apache.commons.math3.random.AbstractRandomGenerator r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15;
        boolean $z0;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.random.AbstractRandomGenerator;

        $d0 = r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        d12 = r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate>;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = #NaN;

        return d12;

     label1:
        d13 = 0.0;

        d14 = 0.0;

        d15 = 1.0;

     label2:
        $b0 = d15 cmpl 1.0;

        if $b0 < 0 goto label3;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d7 = 2.0 * $d6;

        d13 = $d7 - 1.0;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double nextDouble()>();

        $d9 = 2.0 * $d8;

        d14 = $d9 - 1.0;

        $d11 = d13 * d13;

        $d10 = d14 * d14;

        d15 = $d11 + $d10;

        goto label2;

     label3:
        $b1 = d15 cmpl 0.0;

        if $b1 == 0 goto label4;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d15);

        $d4 = -2.0 * $d3;

        $d5 = $d4 / d15;

        d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

     label4:
        $d1 = d14 * d15;

        r0.<org.apache.commons.math3.random.AbstractRandomGenerator: double cachedNormalDeviate> = $d1;

        $d2 = d13 * d15;

        return $d2;
    }
}
