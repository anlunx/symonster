public final class com.opengamma.analytics.util.time.TimeCalculator extends java.lang.Object
{
    private static final com.opengamma.financial.convention.daycount.DayCount MODEL_DAYCOUNT;

    private void <init>()
    {
        com.opengamma.analytics.util.time.TimeCalculator r0;

        r0 := @this: com.opengamma.analytics.util.time.TimeCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double getTimeBetween(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.daycount.DayCount, com.opengamma.financial.convention.calendar.Calendar)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r4;
        com.opengamma.financial.convention.daycount.DayCount r2;
        com.opengamma.financial.convention.calendar.Calendar r3;
        boolean z0;
        org.threeten.bp.ZoneId $r8;
        double $d0, $d1, $d2;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.daycount.DayCount;

        r3 := @parameter3: com.opengamma.financial.convention.calendar.Calendar;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date2");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "day count");

        $r8 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZoneId getZone()>();

        r4 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withZoneSameInstant(org.threeten.bp.ZoneId)>($r8);

        z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r4);

        if z0 != 0 goto label1;

        $d2 = interfaceinvoke r2.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(r0, r4, r3);

        return $d2;

     label1:
        $d0 = interfaceinvoke r2.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.calendar.Calendar)>(r4, r0, r3);

        $d1 = -1.0 * $d0;

        return $d1;
    }

    public static double getTimeBetween(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, com.opengamma.financial.convention.daycount.DayCount)
    {
        org.threeten.bp.ZonedDateTime r0, r1, r3;
        com.opengamma.financial.convention.daycount.DayCount r2;
        boolean z0;
        org.threeten.bp.ZoneId $r7;
        double $d0, $d1, $d2;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        r2 := @parameter2: com.opengamma.financial.convention.daycount.DayCount;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date2");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "day count");

        $r7 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZoneId getZone()>();

        r3 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withZoneSameInstant(org.threeten.bp.ZoneId)>($r7);

        z0 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r3);

        if z0 != 0 goto label1;

        $d2 = interfaceinvoke r2.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r0, r3);

        return $d2;

     label1:
        $d0 = interfaceinvoke r2.<com.opengamma.financial.convention.daycount.DayCount: double getDayCountFraction(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r3, r0);

        $d1 = -1.0 * $d0;

        return $d1;
    }

    public static double getTimeBetween(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime)
    {
        org.threeten.bp.ZonedDateTime r0, r1;
        com.opengamma.financial.convention.daycount.DayCount $r3, $r5;
        com.opengamma.analytics.env.AnalyticsEnvironment $r4;
        double $d0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        $r3 = <com.opengamma.analytics.util.time.TimeCalculator: com.opengamma.financial.convention.daycount.DayCount MODEL_DAYCOUNT>;

        if $r3 == null goto label1;

        $r5 = <com.opengamma.analytics.util.time.TimeCalculator: com.opengamma.financial.convention.daycount.DayCount MODEL_DAYCOUNT>;

        goto label2;

     label1:
        $r4 = staticinvoke <com.opengamma.analytics.env.AnalyticsEnvironment: com.opengamma.analytics.env.AnalyticsEnvironment getInstance()>();

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.env.AnalyticsEnvironment: com.opengamma.financial.convention.daycount.DayCount getModelDayCount()>();

     label2:
        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime,com.opengamma.financial.convention.daycount.DayCount)>(r0, r1, $r5);

        return $d0;
    }

    public static double[] getTimeBetween(org.threeten.bp.ZonedDateTime[], org.threeten.bp.ZonedDateTime[])
    {
        org.threeten.bp.ZonedDateTime[] r0, r1;
        int i0, $i1, i2;
        double[] r2;
        org.threeten.bp.ZonedDateTime $r5, $r6;
        double $d0;
        boolean $z0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime[];

        r1 := @parameter1: org.threeten.bp.ZonedDateTime[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "First date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Second date");

        i0 = lengthof r0;

        $i1 = lengthof r1;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Number of dates should be equal");

        r2 = newarray (double)[i0];

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r6 = r0[i2];

        $r5 = r1[i2];

        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>($r6, $r5);

        r2[i2] = $d0;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static double[] getTimeBetween(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime[])
    {
        org.threeten.bp.ZonedDateTime r0, $r5;
        org.threeten.bp.ZonedDateTime[] r1;
        int i0, i1;
        double[] r2;
        double $d0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "First date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Second date");

        i0 = lengthof r1;

        r2 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r0, $r5);

        r2[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static double getTimeBetween(org.threeten.bp.LocalDate, org.threeten.bp.LocalDate)
    {
        org.threeten.bp.LocalDate r0, r1;
        org.threeten.bp.ZoneOffset $r4, $r6;
        org.threeten.bp.ZonedDateTime $r5, $r7;
        double $d0;

        r0 := @parameter0: org.threeten.bp.LocalDate;

        r1 := @parameter1: org.threeten.bp.LocalDate;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "date2");

        $r4 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        $r5 = virtualinvoke r0.<org.threeten.bp.LocalDate: org.threeten.bp.ZonedDateTime atStartOfDay(org.threeten.bp.ZoneId)>($r4);

        $r6 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        $r7 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.ZonedDateTime atStartOfDay(org.threeten.bp.ZoneId)>($r6);

        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>($r5, $r7);

        return $d0;
    }

    public static double getTimeBetween(org.threeten.bp.ZonedDateTime, org.threeten.bp.LocalDate)
    {
        org.threeten.bp.ZonedDateTime r0, r2, r3;
        org.threeten.bp.LocalDate r1;
        org.threeten.bp.ZoneOffset $r6, $r7;
        double $d0;

        r0 := @parameter0: org.threeten.bp.ZonedDateTime;

        r1 := @parameter1: org.threeten.bp.LocalDate;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "date2");

        $r6 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        r2 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.ZonedDateTime atStartOfDay(org.threeten.bp.ZoneId)>($r6);

        $r7 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        r3 = virtualinvoke r0.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withZoneSameInstant(org.threeten.bp.ZoneId)>($r7);

        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r3, r2);

        return $d0;
    }

    public static double getTimeBetween(org.threeten.bp.LocalDate, org.threeten.bp.ZonedDateTime)
    {
        org.threeten.bp.LocalDate r0;
        org.threeten.bp.ZonedDateTime r1, r2, r3;
        org.threeten.bp.ZoneOffset $r6, $r7;
        double $d0;

        r0 := @parameter0: org.threeten.bp.LocalDate;

        r1 := @parameter1: org.threeten.bp.ZonedDateTime;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "date1");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "date2");

        $r6 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        r2 = virtualinvoke r0.<org.threeten.bp.LocalDate: org.threeten.bp.ZonedDateTime atStartOfDay(org.threeten.bp.ZoneId)>($r6);

        $r7 = <org.threeten.bp.ZoneOffset: org.threeten.bp.ZoneOffset UTC>;

        r3 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withZoneSameInstant(org.threeten.bp.ZoneId)>($r7);

        $d0 = staticinvoke <com.opengamma.analytics.util.time.TimeCalculator: double getTimeBetween(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r2, r3);

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, r5;
        com.opengamma.financial.convention.daycount.DayCount $r2, $r3;
        java.util.MissingResourceException $r4;
        java.util.ResourceBundle r6;

        r5 = null;

     label1:
        $r0 = class "com/opengamma/analytics/util/time/TimeCalculator";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        r6 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>($r1);

        r5 = virtualinvoke r6.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("MODEL_DAYCOUNT");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        if r5 == null goto label5;

        $r2 = staticinvoke <com.opengamma.financial.convention.daycount.DayCountFactory: com.opengamma.financial.convention.daycount.DayCount of(java.lang.String)>(r5);

        if $r2 == null goto label5;

        $r3 = staticinvoke <com.opengamma.financial.convention.daycount.DayCountFactory: com.opengamma.financial.convention.daycount.DayCount of(java.lang.String)>(r5);

        <com.opengamma.analytics.util.time.TimeCalculator: com.opengamma.financial.convention.daycount.DayCount MODEL_DAYCOUNT> = $r3;

        goto label6;

     label5:
        <com.opengamma.analytics.util.time.TimeCalculator: com.opengamma.financial.convention.daycount.DayCount MODEL_DAYCOUNT> = null;

     label6:
        return;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }
}
