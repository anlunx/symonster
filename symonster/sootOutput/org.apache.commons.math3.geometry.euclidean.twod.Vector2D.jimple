public class org.apache.commons.math3.geometry.euclidean.twod.Vector2D extends java.lang.Object implements org.apache.commons.math3.geometry.Vector
{
    public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D ZERO;
    public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN;
    public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D POSITIVE_INFINITY;
    public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D NEGATIVE_INFINITY;
    private static final long serialVersionUID;
    private final double x;
    private final double y;

    public void <init>(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = d0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = d1;

        return;
    }

    public void <init>(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double[] r1;
        int $i0, $i1;
        double $d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 2 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i1 = lengthof r1;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i1, 2);

        throw $r2;

     label1:
        $d0 = r1[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = $d0;

        $d1 = r1[1];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = $d1;

        return;
    }

    public void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = d0 * $d1;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = $d2;

        $d3 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = d0 * $d3;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = $d4;

        return;
    }

    public void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1, r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d5 = d0 * $d2;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d4 = d1 * $d3;

        $d6 = $d5 + $d4;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = $d6;

        $d7 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d10 = d0 * $d7;

        $d8 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d9 = d1 * $d8;

        $d11 = $d10 + $d9;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = $d11;

        return;
    }

    public void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1, r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d3 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d6 = d0 * $d3;

        $d4 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d5 = d1 * $d4;

        $d9 = $d6 + $d5;

        $d7 = r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d8 = d2 * $d7;

        $d10 = $d9 + $d8;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = $d10;

        $d11 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d14 = d0 * $d11;

        $d12 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d13 = d1 * $d12;

        $d17 = $d14 + $d13;

        $d15 = r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d16 = d2 * $d15;

        $d18 = $d17 + $d16;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = $d18;

        return;
    }

    public void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1, r2, r3, r4;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d4 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d7 = d0 * $d4;

        $d5 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d6 = d1 * $d5;

        $d10 = $d7 + $d6;

        $d8 = r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d9 = d2 * $d8;

        $d13 = $d10 + $d9;

        $d11 = r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d12 = d3 * $d11;

        $d14 = $d13 + $d12;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x> = $d14;

        $d15 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d18 = d0 * $d15;

        $d16 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d17 = d1 * $d16;

        $d21 = $d18 + $d17;

        $d19 = r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d20 = d2 * $d19;

        $d24 = $d21 + $d20;

        $d22 = r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d23 = d3 * $d22;

        $d25 = $d24 + $d23;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y> = $d25;

        return;
    }

    public double getX()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        return $d0;
    }

    public double getY()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        return $d0;
    }

    public double[] toArray()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double[] $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = newarray (double)[2];

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $r1[0] = $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $r1[1] = $d1;

        return $r1;
    }

    public org.apache.commons.math3.geometry.Space getSpace()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D: org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D getInstance()>();

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getZero()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D ZERO>;

        return $r1;
    }

    public double getNorm1()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d4 = $d1 + $d3;

        return $d4;
    }

    public double getNorm()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        return $d7;
    }

    public double getNormSq()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        return $d6;
    }

    public double getNormInf()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d1, $d3);

        return $d4;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2, $r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d2 = $d0 + $d1;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d5 = $d3 + $d4;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d2, $d5);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d3 = d0 * $d2;

        $d4 = $d1 + $d3;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d6 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d7 = d0 * $d6;

        $d8 = $d5 + $d7;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d4, $d8);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2, $r3;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d5 = $d1 - $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = $d3 - $d2;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d5, $d4);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d3 = d0 * $d2;

        $d4 = $d1 - $d3;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d6 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d7 = d0 * $d6;

        $d8 = $d5 - $d7;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d4, $d8);

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;
        double d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $d1 = 1.0 / d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D scalarMultiply(double)>($d1);

        return $r1;
    }

    public static double angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getNorm()>();

        $d5 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getNorm()>();

        d0 = $d4 * $d5;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r1);

        d2 = d0 * 0.9999;

        $d6 = neg d2;

        $b1 = d1 cmpg $d6;

        if $b1 < 0 goto label2;

        $b3 = d1 cmpl d2;

        if $b3 <= 0 goto label4;

     label2:
        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d10 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d9 = neg $d7;

        $d8 = r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d12 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d11, $d10, $d9, $d8);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d12);

        $b2 = d1 cmpl 0.0;

        if $b2 < 0 goto label3;

        $d16 = d3 / d0;

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d16);

        return $d17;

     label3:
        $d13 = d3 / d0;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d13);

        $d15 = 3.141592653589793 - $d14;

        return $d15;

     label4:
        $d18 = d1 / d0;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d18);

        return $d19;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D negate()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d3 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d2 = neg $d1;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d3, $d2);

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d4 = d0 * $d1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d3 = d0 * $d2;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d4, $d3);

        return $r1;
    }

    public boolean isNaN()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        double $d0, $d1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean isNaN()>();

        if $z0 != 0 goto label2;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z1 != 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public double distance1(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d4 = $d3 - $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d6 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d7 = $d6 - $d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $d8 = d0 + d1;

        return $d8;
    }

    public double distance(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Point)>(r1);

        return $d0;
    }

    public double distance(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        org.apache.commons.math3.geometry.Point r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        d0 = $d3 - $d2;

        $d5 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        d1 = $d5 - $d4;

        $d7 = d0 * d0;

        $d6 = d1 * d1;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d8);

        return $d9;
    }

    public double distanceInf(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d4 = $d3 - $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d6 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d7 = $d6 - $d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d1);

        return $d8;
    }

    public double distanceSq(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d3 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        d0 = $d3 - $d2;

        $d5 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        d1 = $d5 - $d4;

        $d7 = d0 * d0;

        $d6 = d1 * d1;

        $d8 = $d7 + $d6;

        return $d8;
    }

    public double dotProduct(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        org.apache.commons.math3.geometry.Vector r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d3, $d2, $d1, $d0);

        return $d4;
    }

    public double crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1, r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d5 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d0 = $d4 - $d5;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d1 = $d6 - $d7;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d9 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d2 = $d8 - $d9;

        $d10 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d11 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        d3 = $d10 - $d11;

        $d12 = neg d2;

        $d13 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, d1, $d12, d3);

        return $d13;
    }

    public static double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r1);

        return $d0;
    }

    public static double distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distanceInf(org.apache.commons.math3.geometry.Vector)>(r1);

        return $d0;
    }

    public static double distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distanceSq(org.apache.commons.math3.geometry.Vector)>(r1);

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        if $z0 == 0 goto label5;

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $z1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean isNaN()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean isNaN()>();

        return $z2;

     label2:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $d0 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label3;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $d2 = r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $b1 = $d3 cmpl $d2;

        if $b1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        boolean $z0;
        double $d0, $d1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 542;

     label1:
        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double x>;

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        $i1 = 76 * $i0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double y>;

        $i2 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d1);

        $i3 = $i1 + $i2;

        $i4 = 122 * $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat: org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat getInstance()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r2;
    }

    public java.lang.String toString(java.text.NumberFormat)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0;
        java.text.NumberFormat r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: java.text.NumberFormat;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat: void <init>(java.text.NumberFormat)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat: java.lang.String format(org.apache.commons.math3.geometry.Vector)>(r0);

        return $r3;
    }

    public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D scalarMultiply(double)>(d0);

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D normalize()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Vector negate()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D negate()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r2;
        double d0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(double,org.apache.commons.math3.geometry.Vector)>(d0, r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r2;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r2;
        double d0;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(double,org.apache.commons.math3.geometry.Vector)>(d0, r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r2;
        org.apache.commons.math3.geometry.Vector r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(org.apache.commons.math3.geometry.Vector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Vector getZero()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getZero()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r0, $r1, $r2, $r3;

        <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: long serialVersionUID> = 266938651998679754L;

        $r0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(0.0, 0.0);

        <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D ZERO> = $r0;

        $r1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(#NaN, #NaN);

        <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN> = $r1;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(#Infinity, #Infinity);

        <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D POSITIVE_INFINITY> = $r2;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(#-Infinity, #-Infinity);

        <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NEGATIVE_INFINITY> = $r3;

        return;
    }
}
