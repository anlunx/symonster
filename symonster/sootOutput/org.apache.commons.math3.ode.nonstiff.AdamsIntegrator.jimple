public abstract class org.apache.commons.math3.ode.nonstiff.AdamsIntegrator extends org.apache.commons.math3.ode.MultistepIntegrator
{
    private final org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer;

    public void <init>(java.lang.String, int, int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsIntegrator r0;
        java.lang.String r1;
        int i0, i1;
        double d0, d1, d2, d3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsIntegrator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        d3 := @parameter6: double;

        specialinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>(r1, i0, i1, d0, d1, d2, d3);

        $r2 = staticinvoke <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer getInstance(int)>(i0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer> = $r2;

        return;
    }

    public void <init>(java.lang.String, int, int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsIntegrator r0;
        java.lang.String r1;
        int i0, i1;
        double d0, d1;
        double[] r2, r3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsIntegrator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r2 := @parameter5: double[];

        r3 := @parameter6: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.MultistepIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>(r1, i0, i1, d0, d1, r2, r3);

        $r4 = staticinvoke <org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer getInstance(int)>(i0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer> = $r4;

        return;
    }

    public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException;

    protected org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][])
    {
        org.apache.commons.math3.ode.nonstiff.AdamsIntegrator r0;
        double d0;
        double[] r1;
        double[][] r2, r3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer $r4;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsIntegrator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[][];

        r3 := @parameter3: double[][];

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double,double[],double[][],double[][])>(d0, r1, r2, r3);

        return $r5;
    }

    public org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsIntegrator r0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1, $r3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer $r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsIntegrator;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r2 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)>(r1);

        return $r3;
    }

    public void updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math3.ode.nonstiff.AdamsIntegrator r0;
        double[] r1, r2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r3;
        org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer $r4;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsIntegrator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer transformer>;

        virtualinvoke $r4.<org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(r1, r2, r3);

        return;
    }
}
