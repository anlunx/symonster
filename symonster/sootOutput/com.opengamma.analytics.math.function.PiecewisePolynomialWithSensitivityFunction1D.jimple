public class com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D extends com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MA;

    public void <init>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1;
        double d0, d1, $d2;
        double[] r2;
        int i0, i1, $i2, $i3, i4, i5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        boolean $z0, $z1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r5, $r9, r12, r13;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r6, $r8;
        com.opengamma.analytics.math.matrix.Matrix $r7, $r10;
        org.apache.commons.lang.NotImplementedException $r11;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "xKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xKey containing Infinity");

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i2 <= 1 goto label1;

        $r11 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r11.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r11;

     label1:
        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r2;

        i4 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i3 = i0 - 1;

        if i4 != $i3 goto label2;

        i4 = i4 + -1;

     label2:
        $d2 = r2[i4];

        d1 = d0 - $d2;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefficientSensitivity(int)>(i4);

        i1 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        r12 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(0);

        i5 = 1;

     label3:
        if i5 >= i1 goto label4;

        $r6 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>(r12, d1);

        r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r7;

        $r8 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i5);

        $r10 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r13, $r9);

        r12 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r10;

        i5 = i5 + 1;

        goto label3;

     label4:
        return r12;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D[] nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1;
        double[] r2, r19;
        int i0, i1, i2, $i3, $i4, i5, i6, i7, i8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r3;
        double d0, d1, $d2, $d3, $d4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r8, $r9, $r12, $r14, $r15, $r17;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r10, $r13;
        com.opengamma.analytics.math.matrix.Matrix $r11, $r16;
        org.apache.commons.lang.NotImplementedException $r18;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "null xKeys");

        i0 = lengthof r2;

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $d3 = r2[i5];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "xKey containing NaN");

        $d4 = r2[i5];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xKey containing Infinity");

        i5 = i5 + 1;

        goto label1;

     label2:
        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i3 <= 1 goto label3;

        $r18 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r18.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r18;

     label3:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r19 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = lengthof r19;

        i6 = 0;

     label4:
        if i6 >= i0 goto label8;

        d0 = r2[i6];

        i7 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r19, d0);

        $i4 = i1 - 1;

        if i7 != $i4 goto label5;

        i7 = i7 + -1;

     label5:
        $d2 = r19[i7];

        d1 = d0 - $d2;

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefficientSensitivity(int)>(i7);

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r8 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(0);

        r3[i6] = $r8;

        i8 = 1;

     label6:
        if i8 >= i2 goto label7;

        $r10 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r9 = r3[i6];

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r9, d1);

        $r12 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r11;

        r3[i6] = $r12;

        $r13 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r14 = r3[i6];

        $r15 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i8);

        $r16 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r14, $r15);

        $r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r16;

        r3[i6] = $r17;

        i8 = i8 + 1;

        goto label6;

     label7:
        i6 = i6 + 1;

        goto label4;

     label8:
        return r3;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1;
        double d0, d1, $d2, $d3, $d4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9;
        double[] r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r5, $r7, $r13, r17, r18;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r6, $r9, $r11, $r12;
        com.opengamma.analytics.math.matrix.Matrix $r8, $r10, $r14, $r15;
        org.apache.commons.lang.NotImplementedException $r16;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "xKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xKey containing Infinity");

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i2 <= 1 goto label1;

        $r16 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r16.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r16;

     label1:
        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if i0 >= 2 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "Polynomial degree is too low");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = lengthof r2;

        i7 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i3 = i1 - 1;

        if i7 != $i3 goto label4;

        i7 = i7 + -1;

     label4:
        $d2 = r2[i7];

        d1 = d0 - $d2;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefficientSensitivity(int)>(i7);

        $r6 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(0);

        $i4 = i0 - 1;

        $d3 = (double) $i4;

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r7, $d3);

        r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r8;

        i8 = 1;

     label5:
        $i9 = i0 - 1;

        if i8 >= $i9 goto label6;

        $r9 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>(r17, d1);

        r18 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r10;

        $r11 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r12 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i8);

        $i5 = i0 - 1;

        $i6 = $i5 - i8;

        $d4 = (double) $i6;

        $r14 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r13, $d4);

        $r15 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r18, $r14);

        r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r15;

        i8 = i8 + 1;

        goto label5;

     label6:
        return r17;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1, $r8;
        double[] r2, $r14, $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3, r4;
        double[][] r5, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r10, $r12, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] $r11;
        double $d0, $d1, $d2;
        org.apache.commons.lang.NotImplementedException $r17;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i3 <= 1 goto label1;

        $r17 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r17.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r17;

     label1:
        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if i0 >= 2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Polynomial degree is too low");

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getNumberOfIntervals()>();

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i1];

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCoefficientSensitivityAll()>();

        $r7 = r4[0];

        i2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i10 = 0;

     label4:
        if i10 >= i1 goto label9;

        $i6 = i0 - 1;

        r5 = newmultiarray (double)[$i6][i2];

        i11 = 0;

     label5:
        $i7 = i0 - 1;

        if i11 >= $i7 goto label8;

        i12 = 0;

     label6:
        if i12 >= i2 goto label7;

        $r14 = r5[i11];

        $i8 = i0 - 1;

        $i9 = $i8 - i11;

        $d0 = (double) $i9;

        $r13 = r4[i10];

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r16 = $r15[i11];

        $d1 = $r16[i12];

        $d2 = $d0 * $d1;

        $r14[i12] = $d2;

        i12 = i12 + 1;

        goto label6;

     label7:
        i11 = i11 + 1;

        goto label5;

     label8:
        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        r3[i10] = $r12;

        i10 = i10 + 1;

        goto label4;

     label9:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i4 = i0 - 1;

        $i5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r9, $r10, $i4, $i5, r3);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>($r8, r2);

        return $r11;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateTwiceNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1;
        double d0, d1, $d2, $d3, $d4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14;
        double[] r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r5, $r7, $r13, r17, r18;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r6, $r9, $r11, $r12;
        com.opengamma.analytics.math.matrix.Matrix $r8, $r10, $r14, $r15;
        org.apache.commons.lang.NotImplementedException $r16;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "xKey containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xKey containing Infinity");

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i2 <= 1 goto label1;

        $r16 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r16.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r16;

     label1:
        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if i0 >= 3 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "Polynomial degree is too low");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = lengthof r2;

        i12 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i3 = i1 - 1;

        if i12 != $i3 goto label4;

        i12 = i12 + -1;

     label4:
        $d2 = r2[i12];

        d1 = d0 - $d2;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefficientSensitivity(int)>(i12);

        $r6 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(0);

        $i5 = i0 - 1;

        $i4 = i0 - 2;

        $i6 = $i5 * $i4;

        $d3 = (double) $i6;

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r7, $d3);

        r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r8;

        i13 = 1;

     label5:
        $i14 = i0 - 2;

        if i13 >= $i14 goto label6;

        $r9 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>(r17, d1);

        r18 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r10;

        $r11 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r12 = <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i13);

        $i7 = i0 - 1;

        $i10 = $i7 - i13;

        $i8 = i0 - 2;

        $i9 = $i8 - i13;

        $i11 = $i10 * $i9;

        $d4 = (double) $i11;

        $r14 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r13, $d4);

        $r15 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r18, $r14);

        r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r15;

        i13 = i13 + 1;

        goto label5;

     label6:
        return r17;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateTwiceNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity, double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r1, $r8;
        double[] r2, $r14, $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3, r4;
        double[][] r5, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r10, $r12, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] $r11;
        double $d0, $d1, $d2;
        org.apache.commons.lang.NotImplementedException $r17;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null pp");

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        if $i3 <= 1 goto label1;

        $r17 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r17.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r17;

     label1:
        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if i0 >= 3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Polynomial degree is too low");

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getNumberOfIntervals()>();

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i1];

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCoefficientSensitivityAll()>();

        $r7 = r4[0];

        i2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i13 = 0;

     label4:
        if i13 >= i1 goto label9;

        $i6 = i0 - 2;

        r5 = newmultiarray (double)[$i6][i2];

        i14 = 0;

     label5:
        $i7 = i0 - 2;

        if i14 >= $i7 goto label8;

        i15 = 0;

     label6:
        if i15 >= i2 goto label7;

        $r14 = r5[i14];

        $i8 = i0 - 1;

        $i11 = $i8 - i14;

        $i9 = i0 - 2;

        $i10 = $i9 - i14;

        $i12 = $i11 * $i10;

        $d0 = (double) $i12;

        $r13 = r4[i13];

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r16 = $r15[i14];

        $d1 = $r16[i15];

        $d2 = $d0 * $d1;

        $r14[i15] = $d2;

        i15 = i15 + 1;

        goto label6;

     label7:
        i14 = i14 + 1;

        goto label5;

     label8:
        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        r3[i13] = $r12;

        i13 = i13 + 1;

        goto label4;

     label9:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i4 = i0 - 2;

        $i5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getDimensions()>();

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r9, $r10, $i4, $i5, r3);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>($r8, r2);

        return $r11;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.MatrixAlgebra MA> = $r0;

        return;
    }
}
