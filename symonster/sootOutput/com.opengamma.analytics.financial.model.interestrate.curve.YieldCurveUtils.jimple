public class com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils extends java.lang.Object
{
    private static final com.opengamma.analytics.math.curve.CurveSpreadFunction ADD_SPREAD;
    private static final com.opengamma.analytics.math.curve.CurveSpreadFunction MULTIPLY_SPREAD;
    public static final java.lang.String PARALLEL_SHIFT_NAME;
    public static final java.lang.String BUCKETED_SHIFT_NAME;
    public static final java.lang.String POINT_SHIFT_NAME;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils r0;

        r0 := @this: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withParallelShift(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, double, com.opengamma.analytics.ShiftType)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r2;
        double d0;
        com.opengamma.analytics.ShiftType r1;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        d0 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.ShiftType;

        $r2 = staticinvoke <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withParallelShift(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve,double,com.opengamma.analytics.ShiftType,java.lang.String)>(r0, d0, r1, "_WithParallelShift");

        return $r2;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withParallelShift(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, double, com.opengamma.analytics.ShiftType, java.lang.String)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r13, $r18;
        double d0, $d1;
        com.opengamma.analytics.ShiftType r1;
        java.lang.String r2, r3, $r9, $r28;
        com.opengamma.analytics.math.curve.DoublesCurve r4;
        java.lang.StringBuilder $r8, $r10, $r11, $r24, $r25, $r26, $r27;
        int[] $r12;
        int $i0, $i1;
        com.opengamma.analytics.math.curve.DoublesCurve[] $r14, $r19;
        com.opengamma.analytics.math.curve.CurveSpreadFunction $r15, $r20;
        com.opengamma.analytics.math.curve.ConstantDoublesCurve $r16, $r21;
        com.opengamma.analytics.math.curve.SpreadDoublesCurve $r17, $r22;
        java.lang.IllegalArgumentException $r23;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        d0 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.ShiftType;

        r2 := @parameter3: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "curve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "shift type");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "nameSuffix");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $r12 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils$1: int[] $SwitchMap$com$opengamma$analytics$ShiftType>;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.ShiftType: int ordinal()>();

        $i1 = $r12[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r18 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r20 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction ADD_SPREAD>;

        $r19 = newarray (com.opengamma.analytics.math.curve.DoublesCurve)[2];

        $r19[0] = r4;

        $r21 = staticinvoke <com.opengamma.analytics.math.curve.ConstantDoublesCurve: com.opengamma.analytics.math.curve.ConstantDoublesCurve 'from'(double)>(d0);

        $r19[1] = $r21;

        $r22 = staticinvoke <com.opengamma.analytics.math.curve.SpreadDoublesCurve: com.opengamma.analytics.math.curve.SpreadDoublesCurve 'from'(com.opengamma.analytics.math.curve.CurveSpreadFunction,java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve[])>($r20, r3, $r19);

        specialinvoke $r18.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r3, $r22);

        return $r18;

     label2:
        $r13 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r15 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction MULTIPLY_SPREAD>;

        $r14 = newarray (com.opengamma.analytics.math.curve.DoublesCurve)[2];

        $r14[0] = r4;

        $d1 = 1.0 + d0;

        $r16 = staticinvoke <com.opengamma.analytics.math.curve.ConstantDoublesCurve: com.opengamma.analytics.math.curve.ConstantDoublesCurve 'from'(double)>($d1);

        $r14[1] = $r16;

        $r17 = staticinvoke <com.opengamma.analytics.math.curve.SpreadDoublesCurve: com.opengamma.analytics.math.curve.SpreadDoublesCurve 'from'(com.opengamma.analytics.math.curve.CurveSpreadFunction,java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve[])>($r15, r3, $r14);

        specialinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r3, $r17);

        return $r13;

     label3:
        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle curve shift type ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for parallel shifts");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r23;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withBucketedShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, java.util.List, java.util.List, com.opengamma.analytics.ShiftType)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r4;
        java.util.List r1, r2;
        com.opengamma.analytics.ShiftType r3;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.ShiftType;

        $r4 = staticinvoke <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withBucketedShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve,java.util.List,java.util.List,com.opengamma.analytics.ShiftType,java.lang.String)>(r0, r1, r2, r3, "_WithBucketedShifts");

        return $r4;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withBucketedShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, java.util.List, java.util.List, com.opengamma.analytics.ShiftType, java.lang.String)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r26, $r38, $r55;
        java.util.List r1, r2;
        com.opengamma.analytics.ShiftType r3;
        java.lang.String r4, r5, $r17, $r54;
        com.opengamma.analytics.math.curve.DoublesCurve r6;
        java.util.Iterator r8, r9;
        com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator r10;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9;
        java.lang.StringBuilder $r16, $r18, $r19, $r50, $r51, $r52, $r53;
        boolean $z0, $z13, $z14, $z15;
        java.util.ArrayList $r20;
        java.lang.Object $r21, $r22, $r30, $r31, $r42, $r43;
        java.lang.Double $r23, $r32, $r44;
        int[] $r24;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, d20, $d21, $d22, d23;
        byte $b4, $b7;
        com.opengamma.util.tuple.DoublesPair $r25, $r33, $r34, $r35, $r36, $r37, $r45, $r46, $r47, $r48, r60, $r61, r62, $r64, r65;
        com.opengamma.analytics.math.curve.DoublesCurve[] $r27, $r39, $r56;
        com.opengamma.analytics.math.curve.CurveSpreadFunction $r28, $r40, $r57;
        com.opengamma.analytics.math.curve.SpreadDoublesCurve $r29, $r41, $r59;
        java.lang.IllegalArgumentException $r49;
        com.opengamma.analytics.math.curve.ConstantDoublesCurve $r58;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r63, r66;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.ShiftType;

        r4 := @parameter4: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "curve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r1, "buckets");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r2, "shifts");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != $i1 goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "must have one shift per bucket");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "shift type");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "nameSuffix");

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r55 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r57 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction ADD_SPREAD>;

        $r56 = newarray (com.opengamma.analytics.math.curve.DoublesCurve)[2];

        $r56[0] = r6;

        $r58 = staticinvoke <com.opengamma.analytics.math.curve.ConstantDoublesCurve: com.opengamma.analytics.math.curve.ConstantDoublesCurve 'from'(double)>(0.0);

        $r56[1] = $r58;

        $r59 = staticinvoke <com.opengamma.analytics.math.curve.SpreadDoublesCurve: com.opengamma.analytics.math.curve.SpreadDoublesCurve 'from'(com.opengamma.analytics.math.curve.CurveSpreadFunction,java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve[])>($r57, r5, $r56);

        specialinvoke $r55.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r5, $r59);

        return $r55;

     label03:
        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r9 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $r21 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r60 = (com.opengamma.util.tuple.DoublesPair) $r21;

        $r22 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.Double) $r22;

        d18 = virtualinvoke $r23.<java.lang.Double: double doubleValue()>();

        r10 = staticinvoke <com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolatorFactory: com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator getInterpolator(java.lang.String,java.lang.String)>("Step", "FlatExtrapolator");

        $r24 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils$1: int[] $SwitchMap$com$opengamma$analytics$ShiftType>;

        $i2 = virtualinvoke r3.<com.opengamma.analytics.ShiftType: int ordinal()>();

        $i3 = $r24[$i2];

        lookupswitch($i3)
        {
            case 1: goto label04;
            case 2: goto label10;
            default: goto label16;
        };

     label04:
        $d10 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $b7 = $d10 cmpl 0.0;

        if $b7 < 0 goto label05;

        $d17 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $i9 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, $d17);

        if $i9 == 0 goto label05;

        $r48 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(0.0, 0.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r48);

     label05:
        $d19 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $r61 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d19, d18);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r61);

     label06:
        $z14 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label09;

        $r42 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r62 = (com.opengamma.util.tuple.DoublesPair) $r42;

        $r43 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r44 = (java.lang.Double) $r43;

        d20 = virtualinvoke $r44.<java.lang.Double: double doubleValue()>();

        $d12 = virtualinvoke r62.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $d13 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $i8 = staticinvoke <java.lang.Double: int compare(double,double)>($d12, $d13);

        if $i8 == 0 goto label07;

        $d15 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $r46 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d15, 0.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r46);

        $d16 = virtualinvoke r62.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $r47 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d16, d20);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r47);

        goto label08;

     label07:
        $d14 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $r45 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d14, d20);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r45);

     label08:
        r60 = r62;

        goto label06;

     label09:
        $d11 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $r37 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d11, 0.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r37);

        r63 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D)>($r20, r10);

        $r38 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r40 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction ADD_SPREAD>;

        $r39 = newarray (com.opengamma.analytics.math.curve.DoublesCurve)[2];

        $r39[0] = r6;

        $r39[1] = r63;

        $r41 = staticinvoke <com.opengamma.analytics.math.curve.SpreadDoublesCurve: com.opengamma.analytics.math.curve.SpreadDoublesCurve 'from'(com.opengamma.analytics.math.curve.CurveSpreadFunction,java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve[])>($r40, r5, $r39);

        specialinvoke $r38.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r5, $r41);

        return $r38;

     label10:
        $d0 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $b4 = $d0 cmpl 0.0;

        if $b4 < 0 goto label11;

        $d9 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, $d9);

        if $i6 == 0 goto label11;

        $r36 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(0.0, 1.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r36);

     label11:
        $d21 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $d22 = 1.0 + d18;

        $r64 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d21, $d22);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r64);

     label12:
        $z15 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label15;

        $r30 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r65 = (com.opengamma.util.tuple.DoublesPair) $r30;

        $r31 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r32 = (java.lang.Double) $r31;

        d23 = virtualinvoke $r32.<java.lang.Double: double doubleValue()>();

        $d2 = virtualinvoke r65.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $d3 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $i5 = staticinvoke <java.lang.Double: int compare(double,double)>($d2, $d3);

        if $i5 == 0 goto label13;

        $d6 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $r34 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d6, 1.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r34);

        $d7 = virtualinvoke r65.<com.opengamma.util.tuple.DoublesPair: double getFirstDouble()>();

        $d8 = 1.0 + d23;

        $r35 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d7, $d8);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r35);

        goto label14;

     label13:
        $d4 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $d5 = 1.0 + d23;

        $r33 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d4, $d5);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r33);

     label14:
        r60 = r65;

        goto label12;

     label15:
        $d1 = virtualinvoke r60.<com.opengamma.util.tuple.DoublesPair: double getSecondDouble()>();

        $r25 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d1, 1.0);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r25);

        r66 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D)>($r20, r10);

        $r26 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r28 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction MULTIPLY_SPREAD>;

        $r27 = newarray (com.opengamma.analytics.math.curve.DoublesCurve)[2];

        $r27[0] = r6;

        $r27[1] = r66;

        $r29 = staticinvoke <com.opengamma.analytics.math.curve.SpreadDoublesCurve: com.opengamma.analytics.math.curve.SpreadDoublesCurve 'from'(com.opengamma.analytics.math.curve.CurveSpreadFunction,java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve[])>($r28, r5, $r27);

        specialinvoke $r26.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r5, $r29);

        return $r26;

     label16:
        $r49 = new java.lang.IllegalArgumentException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle curve shift type ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for bucketed shifts");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r54);

        throw $r49;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withPointShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, java.util.List, java.util.List, com.opengamma.analytics.ShiftType)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r4;
        java.util.List r1, r2;
        com.opengamma.analytics.ShiftType r3;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.ShiftType;

        $r4 = staticinvoke <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withPointShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve,java.util.List,java.util.List,com.opengamma.analytics.ShiftType,java.lang.String)>(r0, r1, r2, r3, "_WithPointShifts");

        return $r4;
    }

    public static com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve withPointShifts(com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve, java.util.List, java.util.List, com.opengamma.analytics.ShiftType, java.lang.String)
    {
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r0, $r27, $r29;
        java.util.List r1, r2;
        com.opengamma.analytics.ShiftType r3;
        java.lang.String r4, r5, $r16, $r37;
        int i0, $i1, $i2, $i3, $i4;
        double[] r6, r7;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r8, $r28;
        com.opengamma.analytics.math.curve.DoublesCurve $r13, $r26, $r30, $r31;
        boolean $z0, $z1;
        java.lang.StringBuilder $r15, $r17, $r18, $r33, $r34, $r35, $r36;
        java.lang.Double[] $r19, $r21, $r22, $r24;
        java.lang.Object[] $r20, $r23;
        int[] $r25;
        java.lang.IllegalArgumentException $r32;

        r0 := @parameter0: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.ShiftType;

        r4 := @parameter4: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "curve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r1, "times");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r2, "shifts");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "nameSuffix");

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "must have one shift per point");

        $r13 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z0 = $r13 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Can only perform points shifts on interpolated curves");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "shift type");

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r19 = newarray (java.lang.Double)[i0];

        $r20 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (java.lang.Double[]) $r20;

        r6 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($r21);

        $r22 = newarray (java.lang.Double)[i0];

        $r23 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        $r24 = (java.lang.Double[]) $r23;

        r7 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($r24);

        $r25 = <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils$1: int[] $SwitchMap$com$opengamma$analytics$ShiftType>;

        $i3 = virtualinvoke r3.<com.opengamma.analytics.ShiftType: int ordinal()>();

        $i4 = $r25[$i3];

        lookupswitch($i4)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        $r29 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r30 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $r31 = staticinvoke <com.opengamma.analytics.math.curve.CurveShiftFunctionFactory: com.opengamma.analytics.math.curve.DoublesCurve getShiftedCurve(com.opengamma.analytics.math.curve.Curve,double[],double[],java.lang.String)>($r30, r6, r7, r5);

        specialinvoke $r29.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r5, $r31);

        return $r29;

     label4:
        $r26 = virtualinvoke r0.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        r8 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r26;

        $r27 = new com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r28 = staticinvoke <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve getRelativeShiftedCurve(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double[],double[],java.lang.String)>(r8, r6, r7, r5);

        specialinvoke $r27.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: void <init>(java.lang.String,com.opengamma.analytics.math.curve.DoublesCurve)>(r5, $r28);

        return $r27;

     label5:
        $r32 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle curve shift type ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for point shifts");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r32;
    }

    private static com.opengamma.analytics.math.curve.InterpolatedDoublesCurve getRelativeShiftedCurve(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r0, $r13, $r26;
        double[] r1, r2, $r23, $r24;
        java.lang.String r3;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r6, $r9;
        java.lang.Double[] $r7, $r10;
        java.util.List $r8, $r11;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r12, $r25;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.lang.Double $r14, $r15, $r16, $r17, $r18, $r20, $r21;
        java.lang.Object $r19;

        r0 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: java.lang.String;

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $r23 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r24 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r25 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r26 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>($r23, $r24, $r25, r3);

        return $r26;

     label1:
        $r6 = new java.util.ArrayList;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double[] getXData()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        $r9 = new java.util.ArrayList;

        $r10 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double[] getYData()>();

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        i3 = 0;

     label2:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label5;

        $d0 = r1[i3];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        i0 = interfaceinvoke $r6.<java.util.List: int indexOf(java.lang.Object)>($r14);

        if i0 < 0 goto label3;

        $r19 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);

        $r20 = (java.lang.Double) $r19;

        $d7 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $d8 = r2[i3];

        $d9 = 1.0 + $d8;

        $d10 = $d7 * $d9;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        interfaceinvoke $r9.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r21);

        goto label4;

     label3:
        $d1 = r1[i3];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r15);

        $d2 = r1[i3];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r17 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>($r16);

        $d3 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $d4 = r2[i3];

        $d5 = 1.0 + $d4;

        $d6 = $d3 * $d5;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r18);

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $r12 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r13 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>($r6, $r9, $r12, r3);

        return $r13;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.curve.CurveSpreadFunction $r0, $r1;

        <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: java.lang.String POINT_SHIFT_NAME> = "_WithPointShifts";

        <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: java.lang.String BUCKETED_SHIFT_NAME> = "_WithBucketedShifts";

        <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: java.lang.String PARALLEL_SHIFT_NAME> = "_WithParallelShift";

        $r0 = staticinvoke <com.opengamma.analytics.math.curve.AddCurveSpreadFunction: com.opengamma.analytics.math.curve.CurveSpreadFunction getInstance()>();

        <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction ADD_SPREAD> = $r0;

        $r1 = staticinvoke <com.opengamma.analytics.math.curve.MultiplyCurveSpreadFunction: com.opengamma.analytics.math.curve.CurveSpreadFunction getInstance()>();

        <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurveUtils: com.opengamma.analytics.math.curve.CurveSpreadFunction MULTIPLY_SPREAD> = $r1;

        return;
    }
}
