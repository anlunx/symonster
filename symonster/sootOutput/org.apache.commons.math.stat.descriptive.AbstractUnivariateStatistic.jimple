public abstract class org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic extends java.lang.Object implements org.apache.commons.math.stat.descriptive.UnivariateStatistic
{
    private double[] storedData;

    public void <init>()
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setData(double[])
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r2;

     label2:
        r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData> = $r4;

        return;
    }

    public double[] getData()
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    protected double[] getDataRef()
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        return $r1;
    }

    public void setData(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, $r2, $r3;
        int i0, i1;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = newarray (double)[i1];

        r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData> = $r2;

        $r3 = r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, 0, i1);

        return;
    }

    public double evaluate()
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double[] storedData>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double evaluate(double[])>($r1);

        return $d0;
    }

    public double evaluate(double[])
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: boolean test(double[],int,int)>(r1, 0, 0);

        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: double evaluate(double[],int,int)>(r1, 0, $i0);

        return $d0;
    }

    public abstract double evaluate(double[], int, int);

    public abstract org.apache.commons.math.stat.descriptive.UnivariateStatistic copy();

    protected boolean test(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r6, $r9, $r12;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.math.exception.NotPositiveException $r5, $r8;
        java.lang.Integer $r7, $r10;
        org.apache.commons.math.exception.NullArgumentException $r11;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r11 = new org.apache.commons.math.exception.NullArgumentException;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INPUT_ARRAY>;

        specialinvoke $r11.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r12);

        throw $r11;

     label1:
        if i0 >= 0 goto label2;

        $r8 = new org.apache.commons.math.exception.NotPositiveException;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats START_POSITION>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r8.<org.apache.commons.math.exception.NotPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r9, $r10);

        throw $r8;

     label2:
        if i1 >= 0 goto label3;

        $r5 = new org.apache.commons.math.exception.NotPositiveException;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LENGTH>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r5.<org.apache.commons.math.exception.NotPositiveException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label3:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label4;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats SUBARRAY_ENDS_AFTER_ARRAY_END>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label4:
        if i1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    protected boolean test(double[], double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic r0;
        double[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, i9;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object[] $r3, $r6, $r11, $r16;
        org.apache.commons.math.exception.util.LocalizedFormats $r4, $r7, $r12, $r17, $r22;
        java.lang.IllegalArgumentException $r5, $r10, $r15, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b5, $b6;
        java.lang.Integer $r8, $r14, $r18;
        java.lang.Double $r9, $r13;
        org.apache.commons.math.exception.DimensionMismatchException $r20;
        org.apache.commons.math.exception.NullArgumentException $r21;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r2 != null goto label1;

        $r21 = new org.apache.commons.math.exception.NullArgumentException;

        $r22 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INPUT_ARRAY>;

        specialinvoke $r21.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r22);

        throw $r21;

     label1:
        $i3 = lengthof r2;

        $i2 = lengthof r1;

        if $i3 == $i2 goto label2;

        $r20 = new org.apache.commons.math.exception.DimensionMismatchException;

        $i8 = lengthof r2;

        $i7 = lengthof r1;

        specialinvoke $r20.<org.apache.commons.math.exception.DimensionMismatchException: void <init>(int,int)>($i8, $i7);

        throw $r20;

     label2:
        z3 = 0;

        i9 = i0;

     label3:
        $i4 = i0 + i1;

        if i9 >= $i4 goto label8;

        $d0 = r2[i9];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label4;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NAN_ELEMENT_AT_INDEX>;

        $r16 = newarray (java.lang.Object)[1];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r16[0] = $r18;

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r19;

     label4:
        $d1 = r2[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z2 == 0 goto label5;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r11 = newarray (java.lang.Object)[2];

        $d5 = r2[i9];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r11[1] = $r14;

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r15;

     label5:
        $d2 = r2[i9];

        $b5 = $d2 cmpg 0.0;

        if $b5 >= 0 goto label6;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_INDEX>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r6[0] = $r8;

        $d4 = r2[i9];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r6[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r10;

     label6:
        if z3 != 0 goto label7;

        $d3 = r2[i9];

        $b6 = $d3 cmpl 0.0;

        if $b6 <= 0 goto label7;

        z3 = 1;

     label7:
        i9 = i9 + 1;

        goto label3;

     label8:
        if z3 != 0 goto label9;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats WEIGHT_AT_LEAST_ONE_NON_ZERO>;

        $r3 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r5;

     label9:
        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: boolean test(double[],int,int)>(r1, i0, i1);

        return $z0;
    }
}
