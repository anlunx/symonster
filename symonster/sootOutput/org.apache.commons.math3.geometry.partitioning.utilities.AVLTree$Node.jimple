public class org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node extends java.lang.Object
{
    private java.lang.Comparable element;
    private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left;
    private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right;
    private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent;
    private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew;
    final org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0;

    void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, java.lang.Comparable, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r3;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r1;
        java.lang.Comparable r2;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r2 := @parameter1: java.lang.Comparable;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r2;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r3;

        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r4;

        return;
    }

    public java.lang.Comparable getElement()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0;
        java.lang.Comparable $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        return $r1;
    }

    int size()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, $r2, $r3, $r4;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $i3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

     label2:
        $i1 = 1 + $i3;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r3 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $i4 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

     label4:
        $i2 = $i1 + $i4;

        return $i2;
    }

    org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r2 = r0;

     label1:
        $r1 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 == null goto label2;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        goto label1;

     label2:
        return r2;
    }

    org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r2 = r0;

     label1:
        $r1 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 == null goto label2;

        r2 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        goto label1;

     label2:
        return r2;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getPrevious()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, $r2, $r3, $r4, $r5, r6, r7, $r8;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

        if r6 == null goto label1;

        return r6;

     label1:
        r7 = r0;

     label2:
        $r8 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r8 == null goto label4;

        $r2 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r7 == $r3 goto label3;

        $r4 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        return $r4;

     label3:
        r7 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label2;

     label4:
        return null;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNext()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, $r2, $r3, $r4, $r5, r6, r7, $r8;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

        if r6 == null goto label1;

        return r6;

     label1:
        r7 = r0;

     label2:
        $r8 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r8 == null goto label4;

        $r2 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r3 = $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if r7 == $r3 goto label3;

        $r4 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        return $r4;

     label3:
        r7 = r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label2;

     label4:
        return null;
    }

    boolean insert(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r3, $r4, $r5, $r7, $r8, $r9;
        java.lang.Comparable r1, $r2;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r6, $r10;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        $i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 >= 0 goto label4;

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r7 != null goto label1;

        $r9 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r10, r1, r0);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r9;

        $z3 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftGrown()>();

        return $z3;

     label1:
        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $z2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

        if $z2 == 0 goto label2;

        $z4 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftGrown()>();

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r3 != null goto label5;

        $r5 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r6, r1, r0);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r5;

        $z1 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightGrown()>();

        return $z1;

     label5:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $z0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

        if $z0 == 0 goto label6;

        $z5 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightGrown()>();

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    public void delete()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, r20, r21, $r22, $r23, r24;
        java.lang.Comparable $r4;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree $r17;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r1 != null goto label01;

        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r15 != null goto label01;

        $r16 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r16 != null goto label01;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = null;

        $r17 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree this$0>;

        staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$302(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>($r17, null);

        goto label20;

     label01:
        $r19 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r19 != null goto label04;

        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r12 != null goto label04;

        r20 = r0;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = null;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r14 = $r13.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r0 != $r14 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z3 = $z2;

        r21 = null;

        goto label11;

     label04:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r2 == null goto label05;

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r22 = virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

        goto label06;

     label05:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r22 = virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

     label06:
        r20 = $r22;

        $r4 = $r22.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r4;

        $r5 = $r22.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r6 = $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r22 != $r6 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z3 = $z4;

        $r7 = r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r7 == null goto label09;

        $r23 = r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        goto label10;

     label09:
        $r23 = r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

     label10:
        r21 = $r23;

     label11:
        r24 = r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if z3 == 0 goto label12;

        r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = r21;

        goto label13;

     label12:
        r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = r21;

     label13:
        if r21 == null goto label14;

        r21.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r24;

     label14:
        if z3 == 0 goto label15;

        $z1 = specialinvoke r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceLeftShrunk()>();

        if $z1 == 0 goto label20;

        goto label16;

     label15:
        $z0 = specialinvoke r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean rebalanceRightShrunk()>();

        if $z0 == 0 goto label20;

     label16:
        $r8 = r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        if $r8 != null goto label17;

        return;

     label17:
        $r9 = r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        $r10 = $r9.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if r24 != $r10 goto label18;

        $z5 = 1;

        goto label19;

     label18:
        $z5 = 0;

     label19:
        z3 = $z5;

        r24 = r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent>;

        goto label14;

     label20:
        return;
    }

    private boolean rebalanceLeftGrown()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r5, $r8, $r9, $r10, $r13, $r15, $r17, $r19, $r21, $r23, $r26;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r2, $r4, $r6, $r7, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r25, $r27, $r28;
        int[] $r3, $r11;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r3 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label8;
            default: goto label9;
        };

     label1:
        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r7 = $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r6 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        if $r7 != $r6 goto label2;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r24 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r24;

        $r26 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r25 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r26.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r25;

        goto label7;

     label2:
        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r9 = $r8.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r9.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        specialinvoke $r10.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r11 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i3 = $r11[$i2];

        lookupswitch($i3)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        $r17 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r16 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r17.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r16;

        $r19 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r18 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r19.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r18;

        goto label6;

     label4:
        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r12 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r13.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r12;

        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r14 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r15.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r14;

        goto label6;

     label5:
        $r21 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r20 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r21.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r20;

        $r23 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r22 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r23.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r22;

     label6:
        $r28 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r28;

     label7:
        return 0;

     label8:
        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r4;

        return 0;

     label9:
        $r27 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r27;

        return 1;
    }

    private boolean rebalanceRightGrown()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r4, $r7, $r8, $r9, $r12, $r14, $r16, $r18, $r20, $r22, $r25;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r2, $r5, $r6, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r24, $r26, $r27, $r28;
        int[] $r3, $r10;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r3 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label9;
        };

     label1:
        $r26 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r26;

        return 0;

     label2:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r6 = $r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r5 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        if $r6 != $r5 goto label3;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r23 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r23;

        $r25 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r24 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r25.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r24;

        goto label8;

     label3:
        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r8 = $r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r8.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r9 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r10 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i3 = $r10[$i2];

        lookupswitch($i3)
        {
            case 1: goto label4;
            case 2: goto label5;
            default: goto label6;
        };

     label4:
        $r16 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r15 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r16.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r15;

        $r18 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r17 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r18.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r17;

        goto label7;

     label5:
        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r11 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r12.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r11;

        $r14 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r13 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r14.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r13;

        goto label7;

     label6:
        $r20 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r19 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r19;

        $r22 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r21 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r22.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r21;

     label7:
        $r28 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r28;

     label8:
        return 0;

     label9:
        $r27 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r27;

        return 1;
    }

    private boolean rebalanceLeftShrunk()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r4, $r7, $r10, $r11, $r12, $r15, $r17, $r19, $r21, $r23, $r25, $r28, $r31;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r2, $r5, $r6, $r8, $r9, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r34;
        int[] $r3, $r13;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r3 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label9;
        };

     label1:
        $r32 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r32;

        return 1;

     label2:
        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r6 = $r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r5 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        if $r6 != $r5 goto label3;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r29 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r29;

        $r31 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r30 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r31.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r30;

        return 1;

     label3:
        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r9 = $r7.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r8 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        if $r9 != $r8 goto label4;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r26 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r26;

        $r28 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r27 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r28.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r27;

        return 0;

     label4:
        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r11 = $r10.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r1 = $r11.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        specialinvoke $r12.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        $r13 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i3 = $r13[$i2];

        lookupswitch($i3)
        {
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label5:
        $r19 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r18 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r19.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r18;

        $r21 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r20 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r21.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r20;

        goto label8;

     label6:
        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r14 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r15.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r14;

        $r17 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r16 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r17.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r16;

        goto label8;

     label7:
        $r23 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r22 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r23.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r22;

        $r25 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r24 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r25.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r24;

     label8:
        $r34 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r34;

        return 1;

     label9:
        $r33 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r33;

        return 0;
    }

    private boolean rebalanceRightShrunk()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r5, $r8, $r11, $r12, $r13, $r16, $r18, $r20, $r22, $r24, $r26, $r29, $r32;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew r1, $r2, $r4, $r6, $r7, $r9, $r10, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r28, $r30, $r31, $r33, $r34;
        int[] $r3, $r14;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r3 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label9;
        };

     label1:
        $r4 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r4;

        return 1;

     label2:
        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r7 = $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r6 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        if $r7 != $r6 goto label3;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r30 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r30;

        $r32 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r31 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r32.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r31;

        return 1;

     label3:
        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r10 = $r8.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r9 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        if $r10 != $r9 goto label4;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r27 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r27;

        $r29 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r28 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r29.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r28;

        return 0;

     label4:
        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r12 = $r11.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r1 = $r12.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew>;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        specialinvoke $r13.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCCW()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void rotateCW()>();

        $r14 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$utilities$AVLTree$Skew>;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: int ordinal()>();

        $i3 = $r14[$i2];

        lookupswitch($i3)
        {
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label5:
        $r20 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r19 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r20.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r19;

        $r22 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r21 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew RIGHT_HIGH>;

        $r22.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r21;

        goto label8;

     label6:
        $r16 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r15 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        $r16.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r15;

        $r18 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r17 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r18.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r17;

        goto label8;

     label7:
        $r24 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r23 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r24.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r23;

        $r26 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r25 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        $r26.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r25;

     label8:
        $r34 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew BALANCED>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r34;

        return 1;

     label9:
        $r33 = <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew LEFT_HIGH>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew skew> = $r33;

        return 0;
    }

    private void rotateCW()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.Comparable r1, $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r4 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r4;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r6 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r6;

        $r7 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r7;

        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r8;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = r2;

        $r9 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r9 == null goto label1;

        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r15.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label1:
        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r11 = $r10.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r11 == null goto label2;

        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r14 = $r12.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r14.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = $r13;

     label2:
        return;
    }

    private void rotateCCW()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.Comparable r1, $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r4 = $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = $r4;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r5.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element> = r1;

        r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r6 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r6;

        $r7 = r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right> = $r7;

        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = $r8;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left> = r2;

        $r9 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        if $r9 == null goto label1;

        $r15 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        $r15.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = r0;

     label1:
        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r11 = $r10.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        if $r11 == null goto label2;

        $r12 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r14 = $r12.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        $r14.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent> = $r13;

     label2:
        return;
    }

    static java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0;
        java.lang.Comparable $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable element>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node right>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node left>;

        return $r1;
    }
}
