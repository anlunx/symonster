public class org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
{
    private static final double DEFAULT_TOLERANCE;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>(d0);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, d0);

        return;
    }

    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.Collection r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, d0);

        return;
    }

    public void <init>(java.util.List, java.util.List, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.List r1, r2, $r3;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: java.util.List buildBoundary(java.util.List,java.util.List,double)>(r1, r2, d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>($r3, d0);

        return;
    }

    public void <init>(double, double, double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0, d1, d2, d3, d4, d5, d6;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree buildBoundary(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, d6);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r1, d6);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double)>(1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(double, double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0, d1, d2, d3, d4, d5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, 1.0E-10);

        return;
    }

    private static org.apache.commons.math3.geometry.partitioning.BSPTree buildBoundary(double, double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9;
        org.apache.commons.math3.geometry.partitioning.Region r6;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r7, $r10, $r13, $r16, $r19, $r22;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r25;
        org.apache.commons.math3.geometry.partitioning.Hyperplane[] $r26;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r27, $r28;
        java.lang.Boolean $r29;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $d7 = d1 - d6;

        $b0 = d0 cmpl $d7;

        if $b0 >= 0 goto label1;

        $d8 = d3 - d6;

        $b1 = d2 cmpl $d8;

        if $b1 >= 0 goto label1;

        $d9 = d5 - d6;

        $b2 = d4 cmpl $d9;

        if $b2 < 0 goto label2;

     label1:
        $r28 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r29 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r28.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r29);

        return $r28;

     label2:
        $r7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(d0, 0.0, 0.0);

        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r8, $r9, d6);

        $r10 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(d1, 0.0, 0.0);

        $r12 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r11, $r12, d6);

        $r13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r14 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, d2, 0.0);

        $r15 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J>;

        specialinvoke $r13.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r14, $r15, d6);

        $r16 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r17 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, d3, 0.0);

        $r18 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r17, $r18, d6);

        $r19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r20 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, d4);

        $r21 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K>;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r20, $r21, d6);

        $r22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $r23 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r23.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, d5);

        $r24 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        specialinvoke $r22.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r23, $r24, d6);

        $r25 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r25.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r26 = newarray (org.apache.commons.math3.geometry.partitioning.Hyperplane)[6];

        $r26[0] = $r7;

        $r26[1] = $r10;

        $r26[2] = $r13;

        $r26[3] = $r16;

        $r26[4] = $r19;

        $r26[5] = $r22;

        r6 = virtualinvoke $r25.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])>($r26);

        $r27 = interfaceinvoke r6.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        return $r27;
    }

    private static java.util.List buildBoundary(java.util.List, java.util.List, double)
    {
        java.util.List r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.util.ArrayList $r2;
        boolean $z0, $z2, z3, $z4;
        java.lang.Object $r3, $r5, $r7, $r9, $r13, $r21, $r22, $r32, $r33;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r6, $r8, $r10, $r34, r41, r46, r47, r53;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r11;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r12;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r14;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r15, $r23, $r35;
        java.lang.Object[] $r16, $r24, $r36;
        org.apache.commons.math3.exception.util.LocalizedFormats $r17, $r25, $r37;
        java.lang.Double $r18, $r19, $r20, $r26, $r27, $r28, $r29, $r30, $r31, $r38, $r39, $r40;
        byte $b11;
        int[][] r42, r43;
        int[] r44, r45, r50;
        java.util.Iterator r49;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r52;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        d0 := @parameter2: double;

        i12 = 0;

     label01:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i12 >= $i2 goto label05;

        $r32 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        r41 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r32;

        i13 = i12 + 1;

     label02:
        $i10 = interfaceinvoke r0.<java.util.List: int size()>();

        if i13 >= $i10 goto label04;

        $r33 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i13);

        $r34 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r33;

        $d10 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r41, $r34);

        $b11 = $d10 cmpg d0;

        if $b11 > 0 goto label03;

        $r35 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r37 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CLOSE_VERTICES>;

        $r36 = newarray (java.lang.Object)[3];

        $d11 = virtualinvoke r41.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r36[0] = $r38;

        $d12 = virtualinvoke r41.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $r36[1] = $r39;

        $d13 = virtualinvoke r41.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        $r36[2] = $r40;

        specialinvoke $r35.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r37, $r36);

        throw $r35;

     label03:
        i13 = i13 + 1;

        goto label02;

     label04:
        i12 = i12 + 1;

        goto label01;

     label05:
        r42 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: int[][] findReferences(java.util.List,java.util.List)>(r0, r1);

        r43 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: int[][] successors(java.util.List,java.util.List,int[][])>(r0, r1, r42);

        i14 = 0;

     label06:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        if i14 >= $i3 goto label15;

        r44 = r43[i14];

        i15 = lengthof r44;

        i16 = 0;

     label07:
        if i16 >= i15 goto label14;

        i17 = r44[i16];

        if i17 < 0 goto label13;

        z3 = 0;

        r45 = r43[i17];

        i18 = lengthof r45;

        i19 = 0;

     label08:
        if i19 >= i18 goto label12;

        i0 = r45[i19];

        if z3 != 0 goto label09;

        if i0 != i14 goto label10;

     label09:
        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        z3 = $z4;

        i19 = i19 + 1;

        goto label08;

     label12:
        if z3 != 0 goto label13;

        $r21 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i14);

        r46 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r21;

        $r22 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i17);

        r47 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r22;

        $r23 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r25 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EDGE_CONNECTED_TO_ONE_FACET>;

        $r24 = newarray (java.lang.Object)[6];

        $d4 = virtualinvoke r46.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r24[0] = $r26;

        $d5 = virtualinvoke r46.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r24[1] = $r27;

        $d6 = virtualinvoke r46.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r24[2] = $r28;

        $d7 = virtualinvoke r47.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $r24[3] = $r29;

        $d8 = virtualinvoke r47.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r24[4] = $r30;

        $d9 = virtualinvoke r47.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r24[5] = $r31;

        specialinvoke $r23.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r25, $r24);

        throw $r23;

     label13:
        i16 = i16 + 1;

        goto label07;

     label14:
        i14 = i14 + 1;

        goto label06;

     label15:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r49 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r3 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (int[]) $r3;

        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane;

        $i4 = r50[0];

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i4);

        $r6 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r5;

        $i5 = r50[1];

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i5);

        $r8 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r7;

        $i6 = r50[2];

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i6);

        $r10 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r9;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r6, $r8, $r10, d0);

        $i7 = lengthof r50;

        r52 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i7];

        i20 = 0;

     label17:
        $i8 = lengthof r50;

        if i20 >= $i8 goto label19;

        $i9 = r50[i20];

        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i9);

        r53 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r13;

        $z2 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r53);

        if $z2 != 0 goto label18;

        $r15 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r17 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_PLANE>;

        $r16 = newarray (java.lang.Object)[3];

        $d1 = virtualinvoke r53.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r16[0] = $r18;

        $d2 = virtualinvoke r53.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r16[1] = $r19;

        $d3 = virtualinvoke r53.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r16[2] = $r20;

        specialinvoke $r15.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r15;

     label18:
        $r14 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector)>(r53);

        r52[i20] = $r14;

        i20 = i20 + 1;

        goto label17;

     label19:
        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r12 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>(d0, r52);

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r4, $r12);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label16;

     label20:
        return $r2;
    }

    private static int[][] findReferences(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int[] r2, $r4, $r5, r12, r16, r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18;
        boolean $z0;
        java.lang.Object $r3, $r6;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        java.util.Iterator r11;
        int[][] r14;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i8 = 0;

        r11 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (int[]) $r6;

        $i4 = lengthof r12;

        if $i4 >= 3 goto label02;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WRONG_NUMBER_OF_POINTS>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $i7 = lengthof r12;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label02:
        i9 = lengthof r12;

        i10 = 0;

     label03:
        if i10 >= i9 goto label04;

        i11 = r12[i10];

        $i5 = r2[i11];

        $i6 = $i5 + 1;

        r2[i11] = $i6;

        i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i8, $i6);

        i10 = i10 + 1;

        goto label03;

     label04:
        goto label01;

     label05:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        r14 = newmultiarray (int)[$i1][i8];

        i12 = lengthof r14;

        i13 = 0;

     label06:
        if i13 >= i12 goto label07;

        r16 = r14[i13];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r16, -1);

        i13 = i13 + 1;

        goto label06;

     label07:
        i14 = 0;

     label08:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if i14 >= $i2 goto label13;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i14);

        r17 = (int[]) $r3;

        i15 = lengthof r17;

        i16 = 0;

     label09:
        if i16 >= i15 goto label12;

        i17 = r17[i16];

        i18 = 0;

     label10:
        if i18 >= i8 goto label11;

        $r5 = r14[i17];

        $i3 = $r5[i18];

        if $i3 < 0 goto label11;

        i18 = i18 + 1;

        goto label10;

     label11:
        $r4 = r14[i17];

        $r4[i18] = i14;

        i16 = i16 + 1;

        goto label09;

     label12:
        i14 = i14 + 1;

        goto label08;

     label13:
        return r14;
    }

    private static int[][] successors(java.util.List, java.util.List, int[][])
    {
        java.util.List r0, r1;
        int[][] r2, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20;
        int[] $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15, r27, r28;
        java.lang.Object $r10, $r14, $r16;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r17;
        java.lang.Object[] $r18;
        org.apache.commons.math3.exception.util.LocalizedFormats $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Double $r20, $r21, $r22, $r23, $r24, $r25;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: int[][];

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r6 = r2[0];

        $i1 = lengthof $r6;

        r3 = newmultiarray (int)[$i0][$i1];

        i15 = lengthof r3;

        i16 = 0;

     label01:
        if i16 >= i15 goto label02;

        r27 = r3[i16];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r27, -1);

        i16 = i16 + 1;

        goto label01;

     label02:
        i17 = 0;

     label03:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i17 >= $i2 goto label11;

        i18 = 0;

     label04:
        $r7 = r3[i17];

        $i3 = lengthof $r7;

        if i18 >= $i3 goto label10;

        $r8 = r2[i17];

        $i4 = $r8[i18];

        if $i4 < 0 goto label10;

        $r9 = r2[i17];

        $i5 = $r9[i18];

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i5);

        r28 = (int[]) $r10;

        i19 = 0;

     label05:
        $i6 = lengthof r28;

        if i19 >= $i6 goto label06;

        $i14 = r28[i19];

        if $i14 == i17 goto label06;

        i19 = i19 + 1;

        goto label05;

     label06:
        $r11 = r3[i17];

        $i8 = i19 + 1;

        $i7 = lengthof r28;

        $i9 = $i8 % $i7;

        $i10 = r28[$i9];

        $r11[i18] = $i10;

        i20 = 0;

     label07:
        if i20 >= i18 goto label09;

        $r12 = r3[i17];

        $i12 = $r12[i20];

        $r13 = r3[i17];

        $i11 = $r13[i18];

        if $i12 != $i11 goto label08;

        $r14 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i17);

        r4 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r14;

        $r15 = r3[i17];

        $i13 = $r15[i18];

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i13);

        r5 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r16;

        $r17 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r19 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACET_ORIENTATION_MISMATCH>;

        $r18 = newarray (java.lang.Object)[6];

        $d0 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r18[0] = $r20;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r18[1] = $r21;

        $d2 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r18[2] = $r22;

        $d3 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r18[3] = $r23;

        $d4 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r18[4] = $r24;

        $d5 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r18[5] = $r25;

        specialinvoke $r17.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r19, $r18);

        throw $r17;

     label08:
        i20 = i20 + 1;

        goto label07;

     label09:
        i18 = i18 + 1;

        goto label04;

     label10:
        i17 = i17 + 1;

        goto label03;

     label11:
        return r3;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }

    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r5, $r6;
        org.apache.commons.math3.geometry.Point $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void <init>(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)>(r0);

        virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r2);

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $b0 = $d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>(#Infinity);

        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r6);

        goto label2;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d2 = $d1 / 3.0;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>($d2);

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d4 = 4.0 * $d3;

        $d5 = 1.0 / $d4;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r5 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r4;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d5, $r5);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r3);

     label2:
        return;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        org.apache.commons.math3.geometry.euclidean.threed.Line r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        $r4 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>($r3, r1, r2);

        return $r4;
    }

    private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r5, r6, r11, r12;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, r8;
        org.apache.commons.math3.geometry.euclidean.threed.Line r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r4, r9, r13, r14, $r15;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r7;
        double d0, $d1, $d2, $d3, $d4;
        boolean z0, $z1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r10;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if r4 != null goto label1;

        return null;

     label1:
        r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r10 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r7 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r10;

        d0 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.Point)>(r2);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getTolerance()>();

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label4;

        r11 = r5;

        r12 = r6;

        goto label5;

     label4:
        r11 = r6;

        r12 = r5;

     label5:
        if z0 == 0 goto label6;

        r13 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2, r1);

        if r13 == null goto label6;

        return r13;

     label6:
        r14 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>(r11, r2, r3);

        if r14 == null goto label7;

        return r14;

     label7:
        if z0 != 0 goto label8;

        r8 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)>(r3);

        if r8 == null goto label8;

        $d3 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r8);

        $d4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r2);

        $b2 = $d3 cmpl $d4;

        if $b2 <= 0 goto label8;

        r9 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.partitioning.BSPTree)>(r8, r1);

        if r9 == null goto label8;

        return r9;

     label8:
        $r15 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Line)>(r12, r2, r3);

        return $r15;
    }

    private org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r3;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5, $r9, $r10, $r11, $r16, $r17, $r22;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r12, $r18;
        org.apache.commons.math3.geometry.partitioning.Region $r13, $r19;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r14, $r15, $r20, $r21;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r6;

        r3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r8 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r4 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r8;

        $r9 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r9 == null goto label1;

        $r17 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r18 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) $r17;

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r20 = interfaceinvoke $r19.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r3);

        $r21 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r20 != $r21 goto label1;

        $r22 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        return $r22;

     label1:
        $r10 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r10 == null goto label2;

        $r11 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r12 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) $r11;

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r14 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r3);

        $r15 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r14 != $r15 goto label2;

        $r16 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        return $r16;

     label2:
        return null;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r5;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r2;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform $r3;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Rotation)>(r1, r2);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r3);

        $r5 = (org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet) $r4;

        return $r5;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform $r2;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r2);

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet) $r3;

        return $r4;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    static void access$000(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>(d0);

        return;
    }

    static void access$100(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r1);

        return;
    }

    static void access$200(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>(d0);

        return;
    }

    static void access$300(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r1);

        return;
    }

    static void access$400(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        double d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setSize(double)>(d0);

        return;
    }

    static void access$500(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet, org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r1 := @parameter1: org.apache.commons.math3.geometry.Point;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
