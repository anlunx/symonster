public final class com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod extends java.lang.Object
{
    private static final com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod INSTANCE;
    private static final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION;

    public static com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod getInstance()
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod $r0;

        $r0 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r3;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, $d25, d26;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r4;
        double[] r5, r6, r7, r8, r45;
        com.opengamma.util.money.Currency $r11, $r12, $r13, $r16, $r19, $r20, $r21, $r22, $r31;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r14, $r17, $r28, $r30;
        java.lang.Double $r15, $r18, $r27, $r39, $r43;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r23, $r34;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r24, $r36, $r40;
        com.opengamma.analytics.math.function.Function1D $r25, $r37, $r41;
        java.lang.Object $r26, $r38, $r42;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r29;
        com.opengamma.util.money.CurrencyAmount[] $r32;
        com.opengamma.util.money.MultipleCurrencyAmount $r33;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r35;
        int i0, i1;
        com.opengamma.util.money.CurrencyAmount r46;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r11, $r12);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        r3 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r14.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        d0 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r13, $r15);

        $r16 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r17 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r17.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        d1 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r16, $r18);

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r19, $r20);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r21, $r22, $d8);

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r6 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r6[1];

        r7 = newarray (double)[3];

        r8 = newarray (double)[3];

        $r23 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r23.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r34 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d18 = r6[i0];

        specialinvoke $r34.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d18);

        $r35 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d19 = r5[i0];

        $d20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r35.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d19, $d20, 1);

        $r36 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r37 = virtualinvoke $r36.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r35);

        $r38 = virtualinvoke $r37.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r23);

        $r39 = (java.lang.Double) $r38;

        $d21 = virtualinvoke $r39.<java.lang.Double: double doubleValue()>();

        r7[i0] = $d21;

        $r40 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r41 = virtualinvoke $r40.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r35);

        $r42 = virtualinvoke $r41.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r34);

        $r43 = (java.lang.Double) $r42;

        $d22 = virtualinvoke $r43.<java.lang.Double: double doubleValue()>();

        r8[i0] = $d22;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r24 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>(r1);

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r23);

        $r27 = (java.lang.Double) $r26;

        d23 = virtualinvoke $r27.<java.lang.Double: double doubleValue()>();

        r45 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d3, d0, r5, r6);

        d24 = d23;

        i1 = 0;

     label3:
        if i1 >= 3 goto label4;

        $d16 = r45[i1];

        $d14 = r8[i1];

        $d13 = r7[i1];

        $d15 = $d14 - $d13;

        $d17 = $d16 * $d15;

        d24 = d24 + $d17;

        i1 = i1 + 2;

        goto label3;

     label4:
        $d12 = d24;

        $r28 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d9 = virtualinvoke $r29.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label5;

        $d25 = 1.0;

        goto label6;

     label5:
        $d25 = -1.0;

     label6:
        $d11 = $d10 * $d25;

        d26 = $d12 * $d11;

        $r30 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        r46 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r31, d26);

        $r32 = newarray (com.opengamma.util.money.CurrencyAmount)[1];

        $r32[0] = r46;

        $r33 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.CurrencyAmount[])>($r32);

        return $r33;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount currencyExposure(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r3;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, $d39, d40, d41, d42, $d43;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r4;
        double[] r5, r6, $r38, $r39, $r40, $r41, $r45, $r47, r50, r51;
        double[][] r7, r8;
        com.opengamma.util.money.CurrencyAmount[] r10;
        com.opengamma.util.money.Currency $r11, $r12, $r13, $r16, $r19, $r20, $r21, $r22, $r28, $r33;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.financial.forex.derivative.Forex $r14, $r17, $r25, $r27, $r29, $r32, $r34;
        java.lang.Double $r15, $r18;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r23, $r42;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r24, $r44, $r46;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r26, $r30, $r35;
        com.opengamma.util.money.CurrencyAmount $r31, $r36;
        com.opengamma.util.money.MultipleCurrencyAmount $r37;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r43;
        int i0, i1, i2;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r11, $r12);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        r3 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r14.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        d0 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r13, $r15);

        $r16 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r17 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r17.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        d1 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r16, $r18);

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r19, $r20);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r21, $r22, $d8);

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r6 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r6[1];

        r7 = newarray (double[])[3];

        r8 = newarray (double[])[3];

        $r23 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r23.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label01:
        if i0 >= 3 goto label02;

        $r42 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d35 = r6[i0];

        specialinvoke $r42.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d35);

        $r43 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d36 = r5[i0];

        $d37 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r43.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d36, $d37, 1);

        $r44 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r45 = virtualinvoke $r44.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r43, $r23);

        r7[i0] = $r45;

        $r46 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r47 = virtualinvoke $r46.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r43, $r42);

        r8[i0] = $r47;

        i0 = i0 + 2;

        goto label01;

     label02:
        $r24 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        r50 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>(r1, $r23);

        r51 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d3, d0, r5, r6);

        d38 = r50[0];

        i1 = 0;

     label03:
        if i1 >= 3 goto label04;

        $d33 = r51[i1];

        $r40 = r8[i1];

        $d31 = $r40[0];

        $r41 = r7[i1];

        $d30 = $r41[0];

        $d32 = $d31 - $d30;

        $d34 = $d33 * $d32;

        d38 = d38 + $d34;

        i1 = i1 + 2;

        goto label03;

     label04:
        $d29 = d38;

        $r25 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d9 = virtualinvoke $r26.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label05;

        $d39 = 1.0;

        goto label06;

     label05:
        $d39 = -1.0;

     label06:
        $d11 = $d10 * $d39;

        d40 = $d29 * $d11;

        d41 = r50[1];

        i2 = 0;

     label07:
        if i2 >= 3 goto label08;

        $d27 = r51[i2];

        $r38 = r8[i2];

        $d25 = $r38[1];

        $r39 = r7[i2];

        $d24 = $r39[1];

        $d26 = $d25 - $d24;

        $d28 = $d27 * $d26;

        d41 = d41 + $d28;

        i2 = i2 + 2;

        goto label07;

     label08:
        $d12 = d1 / d0;

        d42 = d41 * $d12;

        $z2 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z2 == 0 goto label09;

        $d43 = 1.0;

        goto label10;

     label09:
        $d43 = -1.0;

     label10:
        r10 = newarray (com.opengamma.util.money.CurrencyAmount)[2];

        $r27 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r29 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d13 = virtualinvoke $r30.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d15 = d42 * $d14;

        $d16 = $d15 * $d43;

        $r31 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r28, $d16);

        r10[0] = $r31;

        $r32 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r33 = virtualinvoke $r32.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $d17 = neg d42;

        $r34 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d18 = virtualinvoke $r35.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $d20 = $d17 * $d19;

        $d21 = $d20 * d2;

        $d22 = $d21 * $d43;

        $d23 = $d22 + d40;

        $r36 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r33, $d23);

        r10[1] = $r36;

        $r37 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.CurrencyAmount[])>(r10);

        return $r37;
    }

    public com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity presentValueBlackVolatilitySensitivity(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r3;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r4;
        double[] r5, r6, r7, r8, r9, r53, r54, r55;
        com.opengamma.util.tuple.DoublesPair r12;
        com.opengamma.util.money.Currency $r13, $r14, $r15, $r18, $r21, $r22, $r23, $r24, $r29, $r31;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r16, $r19, $r28, $r30, $r32;
        java.lang.Double $r17, $r20, $r34, $r42, $r46, $r50;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r25, $r37;
        com.opengamma.analytics.util.amount.SurfaceValue $r26;
        com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity $r27;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r33;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r38;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r39, $r43, $r47;
        com.opengamma.analytics.math.function.Function1D $r40, $r44, $r48;
        java.lang.Object $r41, $r45, $r49;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r13, $r14);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        r3 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r15 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $r16 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r16.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        d0 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r15, $r17);

        $r18 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r19.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        d1 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r18, $r20);

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r21, $r22);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r23 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r24 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r23, $r24, $d8);

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r6 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r6[1];

        r7 = newarray (double)[3];

        r8 = newarray (double)[3];

        r9 = newarray (double)[3];

        $r25 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r25.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r37 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d31 = r6[i0];

        specialinvoke $r37.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d31);

        $r38 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d32 = r5[i0];

        $d33 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r38.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d32, $d33, 1);

        $r39 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r40 = virtualinvoke $r39.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r38);

        $r41 = virtualinvoke $r40.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r25);

        $r42 = (java.lang.Double) $r41;

        $d34 = virtualinvoke $r42.<java.lang.Double: double doubleValue()>();

        r7[i0] = $d34;

        $r43 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r44 = virtualinvoke $r43.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r38);

        $r45 = virtualinvoke $r44.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r37);

        $r46 = (java.lang.Double) $r45;

        $d35 = virtualinvoke $r46.<java.lang.Double: double doubleValue()>();

        r8[i0] = $d35;

        $r47 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r48 = virtualinvoke $r47.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r38);

        $r49 = virtualinvoke $r48.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r37);

        $r50 = (java.lang.Double) $r49;

        $d36 = virtualinvoke $r50.<java.lang.Double: double doubleValue()>();

        r9[i0] = $d36;

        i0 = i0 + 2;

        goto label1;

     label2:
        r53 = newarray (double)[3];

        r54 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[],double[])>(r1, d3, d0, r5, r6, r53);

        r55 = newarray (double)[3];

        $d10 = r54[0];

        $d9 = r9[0];

        $d11 = $d10 * $d9;

        r55[0] = $d11;

        $d13 = r54[2];

        $d12 = r9[2];

        $d14 = $d13 * $d12;

        r55[2] = $d14;

        $d18 = r53[1];

        $d16 = r54[0];

        $d15 = r53[0];

        $d17 = $d16 * $d15;

        $d22 = $d18 - $d17;

        $d20 = r54[2];

        $d19 = r53[2];

        $d21 = $d20 * $d19;

        $d23 = $d22 - $d21;

        r55[1] = $d23;

        $r26 = new com.opengamma.analytics.util.amount.SurfaceValue;

        specialinvoke $r26.<com.opengamma.analytics.util.amount.SurfaceValue: void <init>()>();

        i1 = 0;

     label3:
        if i1 >= 3 goto label6;

        $d24 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        $d25 = r5[i1];

        r12 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d24, $d25);

        $d26 = r55[i1];

        $r32 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r33 = virtualinvoke $r32.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d27 = virtualinvoke $r33.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d28 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $d29 = $d26 * $d28;

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label4;

        $d37 = 1.0;

        goto label5;

     label4:
        $d37 = -1.0;

     label5:
        $d30 = $d29 * $d37;

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d30);

        virtualinvoke $r26.<com.opengamma.analytics.util.amount.SurfaceValue: void add(com.opengamma.util.tuple.DoublesPair,java.lang.Double)>(r12, $r34);

        i1 = i1 + 1;

        goto label3;

     label6:
        $r27 = new com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity;

        $r28 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r30 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        specialinvoke $r27.<com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity: void <init>(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,com.opengamma.analytics.util.amount.SurfaceValue)>($r29, $r31, $r26);

        return $r27;
    }

    public com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r3;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r4;
        double d0, d1, d2, d3, d4, d5, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d51, d52, d53, d54, d55, d56, d57, d58;
        double[] r5, r6, r10, r11, $r45, $r46, $r47, $r48, $r52, $r54, r57, r58;
        double[][] r7, r8;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity r15;
        com.opengamma.util.money.Currency $r16, $r17, $r18, $r19, $r21, $r23, $r25, $r26, $r34, $r39, $r43;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r20, $r29, $r42;
        java.lang.Double $r22, $r24;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r27, $r49;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r28, $r51, $r53;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r30;
        java.util.HashMap $r31;
        java.util.ArrayList $r32, $r37;
        com.opengamma.util.tuple.DoublesPair $r33, $r38;
        java.lang.String $r35, $r40;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity $r44;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r50;
        int i0, i1, i2;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r16 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r17 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r16, $r17);

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        r3 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r18 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d9 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.forex.BlackForexVannaVolgaProviderInterface: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r18, $r19, $d9);

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        d0 = virtualinvoke $r20.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d1 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r21, $r22);

        $r23 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d2 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>($r23, $r24);

        $r25 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r26 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d3 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r25, $r26);

        $d10 = d3 * d2;

        d4 = $d10 / d1;

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d4);

        r6 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d5 = r6[1];

        r7 = newarray (double[])[3];

        r8 = newarray (double[])[3];

        $r27 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r27.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d4, d1, d5);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r49 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d47 = r6[i0];

        specialinvoke $r49.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d4, d1, $d47);

        $r50 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d48 = r5[i0];

        $d49 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r50.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d48, $d49, 1);

        $r51 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r52 = virtualinvoke $r51.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r50, $r27);

        r7[i0] = $r52;

        $r53 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r54 = virtualinvoke $r53.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r50, $r49);

        r8[i0] = $r54;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r28 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        r57 = virtualinvoke $r28.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>(r1, $r27);

        r58 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d4, d1, r5, r6);

        $r29 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d11 = virtualinvoke $r30.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d12 = staticinvoke <java.lang.Math: double abs(double)>($d11);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label3;

        $d50 = 1.0;

        goto label4;

     label3:
        $d50 = -1.0;

     label4:
        d51 = $d12 * $d50;

        r10 = newarray (double)[3];

        r11 = newarray (double)[3];

        i1 = 0;

     label5:
        if i1 >= 3 goto label6;

        $d40 = r58[i1];

        $d41 = neg $d40;

        $d42 = $d41 * d51;

        $d43 = $d42 * 1.0;

        r10[i1] = $d43;

        $d44 = r58[i1];

        $d45 = $d44 * d51;

        $d46 = $d45 * 1.0;

        r11[i1] = $d46;

        i1 = i1 + 2;

        goto label5;

     label6:
        d52 = d51 * 1.0;

        $d13 = r57[1];

        d53 = $d13 * d52;

        $d14 = r57[0];

        $d15 = $d14 / d1;

        d54 = $d15 * d52;

        i2 = 0;

     label7:
        if i2 >= 3 goto label8;

        $r45 = r7[i2];

        $d27 = $r45[1];

        $d26 = r10[i2];

        $d28 = $d27 * $d26;

        d55 = d53 + $d28;

        $r46 = r8[i2];

        $d30 = $r46[1];

        $d29 = r11[i2];

        $d31 = $d30 * $d29;

        d53 = d55 + $d31;

        $r47 = r7[i2];

        $d32 = $r47[0];

        $d34 = $d32 / d1;

        $d33 = r10[i2];

        $d35 = $d34 * $d33;

        d56 = d54 + $d35;

        $r48 = r8[i2];

        $d36 = $r48[0];

        $d38 = $d36 / d1;

        $d37 = r11[i2];

        $d39 = $d38 * $d37;

        d54 = d56 + $d39;

        i2 = i2 + 2;

        goto label7;

     label8:
        $d16 = neg d3;

        $d18 = $d16 * d2;

        $d17 = d1 * d1;

        $d19 = $d18 / $d17;

        $d20 = $d19 * d53;

        d57 = d54 + $d20;

        $d21 = d3 / d1;

        d58 = $d21 * d53;

        $d22 = neg d0;

        $d23 = $d22 * d2;

        d7 = $d23 * d58;

        $d24 = neg d0;

        $d25 = $d24 * d1;

        d8 = $d25 * d57;

        $r31 = new java.util.HashMap;

        specialinvoke $r31.<java.util.HashMap: void <init>()>();

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        $r33 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d0, d7);

        interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r33);

        $r34 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r35 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: java.lang.String getName(com.opengamma.util.money.Currency)>($r34);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r32);

        $r37 = new java.util.ArrayList;

        specialinvoke $r37.<java.util.ArrayList: void <init>()>();

        $r38 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d0, d8);

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r38);

        $r39 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $r40 = interfaceinvoke r3.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: java.lang.String getName(com.opengamma.util.money.Currency)>($r39);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r37);

        r15 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity ofYieldDiscounting(java.util.Map)>($r31);

        $r42 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r43 = virtualinvoke $r42.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r44 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity of(com.opengamma.util.money.Currency,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity)>($r43, r15);

        return $r44;
    }

    public double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, double, double, double[], double[])
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        double d0, d1;
        double[] r2, r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        $r4 = newarray (double)[3];

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[],double[])>(r1, d0, d1, r2, r3, $r4);

        return $r5;
    }

    public double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, double, double, double[], double[], double[])
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38;
        double[] r2, r3, r4, r7, r18;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r8;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r9, $r14;
        com.opengamma.analytics.math.function.Function1D $r10, $r15;
        java.lang.Object $r11, $r16;
        java.lang.Double $r12, $r17;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r13;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        r4 := @parameter5: double[];

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getStrike()>();

        d3 = r3[1];

        $r8 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d0, d1, d3);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r13 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d35 = r2[i0];

        $d36 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r13.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d35, $d36, 1);

        $r14 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r13);

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        $r17 = (java.lang.Double) $r16;

        $d37 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        r4[i0] = $d37;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r9 = <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>(r1);

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        $r12 = (java.lang.Double) $r11;

        d38 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        r4[1] = d38;

        $d8 = r2[1];

        $d7 = r2[0];

        $d9 = $d8 / $d7;

        d4 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $d11 = r2[2];

        $d10 = r2[0];

        $d12 = $d11 / $d10;

        d5 = staticinvoke <java.lang.Math: double log(double)>($d12);

        $d14 = r2[2];

        $d13 = r2[1];

        $d15 = $d14 / $d13;

        d6 = staticinvoke <java.lang.Math: double log(double)>($d15);

        r7 = newarray (double)[3];

        i1 = 0;

     label3:
        if i1 >= 3 goto label4;

        $d32 = r2[i1];

        $d33 = $d32 / d2;

        $d34 = staticinvoke <java.lang.Math: double log(double)>($d33);

        r7[i1] = $d34;

        i1 = i1 + 1;

        goto label3;

     label4:
        r18 = newarray (double)[3];

        $d16 = r7[1];

        $d18 = d38 * $d16;

        $d17 = r7[2];

        $d22 = $d18 * $d17;

        $d19 = r4[0];

        $d20 = $d19 * d4;

        $d21 = $d20 * d5;

        $d23 = $d22 / $d21;

        r18[0] = $d23;

        $d24 = r7[0];

        $d26 = d38 * $d24;

        $d25 = r7[1];

        $d30 = $d26 * $d25;

        $d27 = r4[2];

        $d28 = $d27 * d5;

        $d29 = $d28 * d6;

        $d31 = $d30 / $d29;

        r18[2] = $d31;

        return r18;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod $r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r1;

        $r0 = new com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod;

        specialinvoke $r0.<com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: void <init>()>();

        <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod INSTANCE> = $r0;

        $r1 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: void <init>()>();

        <com.opengamma.analytics.financial.forex.provider.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION> = $r1;

        return;
    }
}
