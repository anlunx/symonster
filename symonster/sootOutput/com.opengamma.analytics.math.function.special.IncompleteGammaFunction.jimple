public class com.opengamma.analytics.math.function.special.IncompleteGammaFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final int _maxIter;
    private final double _eps;
    private final double _a;

    public void <init>(double)
    {
        com.opengamma.analytics.math.function.special.IncompleteGammaFunction r0;
        double d0;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteGammaFunction;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d0, "a");

        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: int _maxIter> = 100000;

        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _eps> = 1.0E-12;

        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _a> = d0;

        return;
    }

    public void <init>(double, int, double)
    {
        com.opengamma.analytics.math.function.special.IncompleteGammaFunction r0;
        double d0, d1;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteGammaFunction;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        d1 := @parameter2: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d0, "a");

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegative(double,java.lang.String)>(d1, "eps");

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least one iteration");

        throw $r1;

     label1:
        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: int _maxIter> = i0;

        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _eps> = d1;

        r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _a> = d0;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.function.special.IncompleteGammaFunction r0;
        java.lang.Double r1, $r3;
        double $d0, $d1, $d2, $d3;
        int $i0;
        org.apache.commons.math.MathException $r4;
        com.opengamma.analytics.math.MathException $r5;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteGammaFunction;

        r1 := @parameter0: java.lang.Double;

     label1:
        $d0 = r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _a>;

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: double _eps>;

        $i0 = r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: int _maxIter>;

        $d3 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaP(double,double,double,int)>($d0, $d1, $d2, $i0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r5.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.commons.math.MathException from label1 to label2 with label3;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.special.IncompleteGammaFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.special.IncompleteGammaFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
