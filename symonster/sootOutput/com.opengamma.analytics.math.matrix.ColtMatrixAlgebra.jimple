public class com.opengamma.analytics.math.matrix.ColtMatrixAlgebra extends com.opengamma.analytics.math.matrix.MatrixAlgebra
{
    private static final cern.colt.matrix.linalg.Algebra ALGEBRA;

    public void <init>()
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        specialinvoke r0.<com.opengamma.analytics.math.matrix.MatrixAlgebra: void <init>()>();

        return;
    }

    public double getCondition(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double cond(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find condition of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double getDeterminant(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double det(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find determinant of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8, $r9;
        cern.colt.matrix.linalg.Algebra $r10;
        cern.colt.matrix.DoubleFactory2D $r11;
        double[][] $r12, $r15;
        cern.colt.matrix.DoubleMatrix2D $r13, $r14;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r10 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r11 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r12 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r13 = virtualinvoke $r11.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r12);

        $r14 = virtualinvoke $r10.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D inverse(cern.colt.matrix.DoubleMatrix2D)>($r13);

        $r15 = virtualinvoke $r14.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r15);

        return $r8;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find inverse of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10;
        java.lang.Class $r6, $r9;
        java.lang.String $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r12, $r17;
        cern.colt.matrix.linalg.Algebra $r13;
        cern.colt.matrix.DoubleFactory1D $r14, $r18;
        double[] $r15, $r19;
        cern.colt.matrix.DoubleMatrix1D $r16, $r20;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label1;

        $r13 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r14 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r12 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r15 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r16 = virtualinvoke $r14.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r15);

        $r18 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r17 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r19 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r20 = virtualinvoke $r18.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r19);

        $d0 = virtualinvoke $r13.<cern.colt.matrix.linalg.Algebra: double mult(cern.colt.matrix.DoubleMatrix1D,cern.colt.matrix.DoubleMatrix1D)>($r16, $r20);

        return $d0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find the inner product of a ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2, $r29;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, $r6, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4, $r5;
        cern.colt.matrix.linalg.Algebra $r7, $r18;
        cern.colt.matrix.DoubleFactory2D $r8, $r12, $r19;
        double[][] $r9, $r13, $r16, $r20;
        cern.colt.matrix.DoubleMatrix2D $r10, $r14, $r15, $r21;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r17, $r22;
        cern.colt.matrix.DoubleFactory1D $r23;
        double[] $r24, $r27;
        cern.colt.matrix.DoubleMatrix1D $r25, $r26;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r28;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r28 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r28.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r2);

        return $r29;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label4;

        r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $z2 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z2 == 0 goto label2;

        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r18 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r19 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r20 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = virtualinvoke $r19.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r20);

        $r23 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r22 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r24 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r25 = virtualinvoke $r23.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r24);

        $r26 = virtualinvoke $r18.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix1D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix1D)>($r21, $r25);

        $r27 = virtualinvoke $r26.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r27);

        return $r17;

     label2:
        $z3 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z3 == 0 goto label3;

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r7 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r8 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r10 = virtualinvoke $r8.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r9);

        $r12 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r11 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        $r13 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r14 = virtualinvoke $r12.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r13);

        $r15 = virtualinvoke $r7.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>($r10, $r14);

        $r16 = virtualinvoke $r15.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r16);

        return $r6;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only have 1D or 2D matrix as second argument");

        throw $r5;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only multiply 2D and 1D matrices");

        throw $r4;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getOuterProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        cern.colt.matrix.DoubleMatrix2D r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11;
        java.lang.Class $r7, $r10;
        java.lang.String $r12;
        cern.colt.matrix.DoubleFactory2D $r13;
        int $i0, $i1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r19;
        cern.colt.matrix.linalg.Algebra $r15;
        cern.colt.matrix.DoubleFactory1D $r16, $r20;
        double[] $r17, $r21;
        cern.colt.matrix.DoubleMatrix1D $r18, $r22;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r24;
        double[][] $r25;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label1;

        $r13 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.matrix.Matrix: int getNumberOfElements()>();

        $i1 = interfaceinvoke r2.<com.opengamma.analytics.math.matrix.Matrix: int getNumberOfElements()>();

        r3 = virtualinvoke $r13.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(int,int)>($i0, $i1);

        $r15 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r16 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r17 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r18 = virtualinvoke $r16.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r17);

        $r20 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r19 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r21 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r22 = virtualinvoke $r20.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r21);

        virtualinvoke $r15.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D multOuter(cern.colt.matrix.DoubleMatrix1D,cern.colt.matrix.DoubleMatrix1D,cern.colt.matrix.DoubleMatrix2D)>($r18, $r22, r3);

        $r24 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r25 = virtualinvoke r3.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        specialinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r25);

        return $r24;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find the outer product of a ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;
    }

    public double getNorm1(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9, $r14;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0, $d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13;
        cern.colt.matrix.DoubleFactory1D $r15;
        double[] $r16;
        cern.colt.matrix.DoubleMatrix1D $r17;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r14 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r15 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r16 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r17 = virtualinvoke $r15.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r16);

        $d1 = virtualinvoke $r14.<cern.colt.matrix.linalg.Algebra: double norm1(cern.colt.matrix.DoubleMatrix1D)>($r17);

        return $d1;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label2;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double norm1(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find norm1 of DoubleMatrix1D or DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double getNorm2(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9, $r14;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0, $d1, $d2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13;
        cern.colt.matrix.DoubleFactory1D $r15;
        double[] $r16;
        cern.colt.matrix.DoubleMatrix1D $r17;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r14 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r15 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r16 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r17 = virtualinvoke $r15.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r16);

        $d1 = virtualinvoke $r14.<cern.colt.matrix.linalg.Algebra: double norm2(cern.colt.matrix.DoubleMatrix1D)>($r17);

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        return $d2;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label2;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double norm2(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find norm2 of DoubleMatrix1D or DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9, $r14;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0, $d1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13;
        cern.colt.matrix.DoubleFactory1D $r15;
        double[] $r16;
        cern.colt.matrix.DoubleMatrix1D $r17;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label1;

        $r14 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r15 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r16 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r17 = virtualinvoke $r15.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>($r16);

        $d1 = virtualinvoke $r14.<cern.colt.matrix.linalg.Algebra: double normInfinity(cern.colt.matrix.DoubleMatrix1D)>($r17);

        return $d1;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label2;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double normInfinity(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find normInfinity of DoubleMatrix1D or DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, int)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8, $r9;
        cern.colt.matrix.linalg.Algebra $r10;
        cern.colt.matrix.DoubleFactory2D $r11;
        double[][] $r12, $r15;
        cern.colt.matrix.DoubleMatrix2D $r13, $r14;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        i0 := @parameter1: int;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r10 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r11 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r12 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r13 = virtualinvoke $r11.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r12);

        $r14 = virtualinvoke $r10.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D pow(cern.colt.matrix.DoubleMatrix2D,int)>($r13, i0);

        $r15 = virtualinvoke $r14.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r15);

        return $r8;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find transpose of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, double)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double d0;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        d0 := @parameter1: double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getTrace(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8;
        cern.colt.matrix.linalg.Algebra $r9;
        cern.colt.matrix.DoubleFactory2D $r10;
        double[][] $r11;
        cern.colt.matrix.DoubleMatrix2D $r12;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r9 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r8 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r11 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r11);

        $d0 = virtualinvoke $r9.<cern.colt.matrix.linalg.Algebra: double trace(cern.colt.matrix.DoubleMatrix2D)>($r12);

        return $d0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find trace of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r8, $r9;
        cern.colt.matrix.linalg.Algebra $r10;
        cern.colt.matrix.DoubleFactory2D $r11;
        double[][] $r12, $r15;
        cern.colt.matrix.DoubleMatrix2D $r13, $r14;

        r0 := @this: com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label1;

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r10 = <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA>;

        $r11 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r12 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r13 = virtualinvoke $r11.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>($r12);

        $r14 = virtualinvoke $r10.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D transpose(cern.colt.matrix.DoubleMatrix2D)>($r13);

        $r15 = virtualinvoke $r14.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r15);

        return $r8;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find transpose of DoubleMatrix2D; have ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    static void <clinit>()
    {
        cern.colt.matrix.linalg.Algebra $r0;

        $r0 = new cern.colt.matrix.linalg.Algebra;

        specialinvoke $r0.<cern.colt.matrix.linalg.Algebra: void <init>()>();

        <com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: cern.colt.matrix.linalg.Algebra ALGEBRA> = $r0;

        return;
    }
}
