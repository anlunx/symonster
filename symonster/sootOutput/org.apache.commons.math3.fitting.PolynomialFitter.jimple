public class org.apache.commons.math3.fitting.PolynomialFitter extends org.apache.commons.math3.fitting.CurveFitter
{

    public void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)
    {
        org.apache.commons.math3.fitting.PolynomialFitter r0;
        org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer r1;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialFitter;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;

        specialinvoke r0.<org.apache.commons.math3.fitting.CurveFitter: void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)>(r1);

        return;
    }

    public double[] fit(int, double[])
    {
        org.apache.commons.math3.fitting.PolynomialFitter r0;
        int i0;
        double[] r1, $r3;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r2;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialFitter;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>(i0, $r2, r1);

        return $r3;
    }

    public double[] fit(double[])
    {
        org.apache.commons.math3.fitting.PolynomialFitter r0;
        double[] r1, $r3;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric $r2;

        r0 := @this: org.apache.commons.math3.fitting.PolynomialFitter;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[])>($r2, r1);

        return $r3;
    }
}
