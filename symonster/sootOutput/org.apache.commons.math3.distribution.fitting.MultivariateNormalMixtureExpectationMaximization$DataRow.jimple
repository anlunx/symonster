class org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow extends java.lang.Object implements java.lang.Comparable
{
    private final double[] row;
    private java.lang.Double mean;

    void <init>(double[])
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] r1;
        java.lang.Double $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row> = r1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r2;

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $d3 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d4 = r1[i2];

        $d5 = $d3 + $d4;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $i1 = lengthof r1;

        $d1 = (double) $i1;

        $d2 = $d0 / $d1;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean> = $r4;

        return;
    }

    public int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0, r1;
        java.lang.Double $r2, $r3;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 := @parameter0: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r3 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $r2 = r1.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: java.lang.Double mean>;

        $i0 = virtualinvoke $r3.<java.lang.Double: int compareTo(java.lang.Double)>($r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        $r2 = (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow) r1;

        $r3 = $r2.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean equals(double[],double[])>($r4, $r3);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }

    public double[] getRow()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] row>;

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)>($r2);

        return $i0;
    }
}
