public class com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private static final com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC;
    private final com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator _interp;
    private static final double SMALL;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        $r2 = new com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>(r1);

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator _interp> = $r2;

        return;
    }

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator, double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        double[] r2, r3;
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        $r4 = new com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator,double[],double[])>(r1, r2, r3);

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator _interp> = $r4;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r7;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r3;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r6;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data should be instance of Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle) r1;

        $r6 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle,java.lang.Double,com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D,double)>(r3, r2, $r6, 1.0E-14);

        return $r7;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r3;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r6;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data should be instance of Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle) r1;

        $r6 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle,java.lang.Double,com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D,double)>(r3, r2, $r6, 1.0E-14);

        return $d0;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r3;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r6;
        double[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data should be instance of Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle) r1;

        $r6 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC>;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle,java.lang.Double,com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D,double)>(r3, r2, $r6, 1.0E-14);

        return $r7;
    }

    java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle, java.lang.Double, com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D, double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r1;
        java.lang.Double r2, $r7, $r8, $r12;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, $r10;
        byte $b0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r5, $r9;
        int[] $r6, $r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        d0 := @parameter3: double;

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b0 = $d2 cmpg d0;

        if $b0 >= 0 goto label1;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult getPiecewisePolynomialResult()>();

        $d7 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r10 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r9, $d7);

        $r11 = newarray (int)[1];

        $r11[0] = 0;

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r11);

        return $r12;

     label1:
        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult getPiecewisePolynomialResult()>();

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r5, $d3);

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r6);

        $d4 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d5 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d6 = $d4 / $d5;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r8;
    }

    double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle, java.lang.Double, com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D, double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r1;
        java.lang.Double r2, $r9, $r11, $r15;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5, $r13;
        byte $b0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r6, $r7, $r12;
        int[] $r8, $r10, $r14;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        d0 := @parameter3: double;

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b0 = $d2 cmpg d0;

        if $b0 >= 0 goto label1;

        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult getPiecewisePolynomialResult()>();

        $d14 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r12, $d14);

        $r14 = newarray (int)[1];

        $r14[0] = 0;

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r14);

        $d15 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d16 = 0.5 * $d15;

        return $d16;

     label1:
        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult getPiecewisePolynomialResult()>();

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r6, $d3);

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult getPiecewisePolynomialResult()>();

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r7, $d4);

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        $r9 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r8);

        $d5 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d6 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 / $d6;

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        $r11 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        $d8 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d10 = $d8 / $d9;

        $d11 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d12 = $d10 / $d11;

        $d13 = $d7 - $d12;

        return $d13;
    }

    double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle, java.lang.Double, com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D, double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d25, d26, $d27, d29, d30;
        int i0, i4, i5;
        double[] r4, $r5, $r6, $r10, $r14, $r15, $r16, $r20, $r24;
        byte $b1, $b2, $b3;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult[] $r7, $r11, $r17, $r21;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r8, $r12, $r18, $r22;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r13, $r19, $r23;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        d0 := @parameter3: double;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: int size()>();

        r4 = newarray (double)[i0];

        d1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double getEps()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double getSmall()>();

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b1 = $d4 cmpg d0;

        if $b1 >= 0 goto label5;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r15 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double[] getValues()>();

        $d15 = $r15[i4];

        $d16 = staticinvoke <java.lang.Math: double abs(double)>($d15);

        $b3 = $d16 cmpg d2;

        if $b3 >= 0 goto label2;

        $d23 = d1;

        goto label3;

     label2:
        $r16 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double[] getValues()>();

        $d17 = $r16[i4];

        $d23 = $d17 * d1;

     label3:
        $r17 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult[] getPiecewisePolynomialResultUp()>();

        $r18 = $r17[i4];

        $d18 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r19 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r18, $d18);

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        d25 = $r20[0];

        $r21 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult[] getPiecewisePolynomialResultDw()>();

        $r22 = $r21[i4];

        $d19 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r23 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r22, $d19);

        $r24 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        d26 = $r24[0];

        $d20 = d25 - d26;

        $d21 = 0.5 * $d20;

        $d22 = $d21 / $d23;

        r4[i4] = $d22;

        i4 = i4 + 1;

        goto label1;

     label4:
        goto label9;

     label5:
        i5 = 0;

     label6:
        if i5 >= i0 goto label9;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double[] getValues()>();

        $d5 = $r5[i5];

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b2 = $d6 cmpg d2;

        if $b2 >= 0 goto label7;

        $d27 = d1;

        goto label8;

     label7:
        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: double[] getValues()>();

        $d7 = $r6[i5];

        $d27 = $d7 * d1;

     label8:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult[] getPiecewisePolynomialResultUp()>();

        $r8 = $r7[i5];

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r8, $d8);

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        d29 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult[] getPiecewisePolynomialResultDw()>();

        $r12 = $r11[i5];

        $d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r12, $d9);

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        d30 = $r14[0];

        $d10 = d29 - d30;

        $d11 = 0.5 * $d10;

        $d12 = $d11 / $d27;

        $d13 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d14 = $d12 / $d13;

        r4[i5] = $d14;

        i5 = i5 + 1;

        goto label6;

     label9:
        return r4;
    }

    protected double[] getFiniteDifferenceSensitivities(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Use the method, getNodeSensitivitiesForValue");

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 0);

        $r5 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator _interp>;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r4, $r5);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        $r5 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator _interp>;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DPiecewisePoynomialWithExtraKnotsDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r4, $r5);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D $r0;

        <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: double SMALL> = 1.0E-14;

        <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: long serialVersionUID> = 1L;

        $r0 = new com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D;

        specialinvoke $r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: void <init>()>();

        <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D FUNC> = $r0;

        return;
    }
}
