public abstract class org.apache.commons.math.distribution.AbstractIntegerDistribution extends org.apache.commons.math.distribution.AbstractDistribution implements org.apache.commons.math.distribution.IntegerDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.commons.math.random.RandomDataImpl randomData;

    protected void <init>()
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractDistribution: void <init>()>();

        $r1 = new org.apache.commons.math.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: org.apache.commons.math.random.RandomDataImpl randomData> = $r1;

        return;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        double d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        $i0 = (int) $d1;

        $d2 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>($i0);

        return $d2;
    }

    public double cumulativeProbability(double, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0, $b1;
        int $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label1:
        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        $b1 = $d2 cmpg d0;

        if $b1 >= 0 goto label2;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        $i4 = (int) $d6;

        $i5 = $i4 + 1;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d1);

        $i6 = (int) $d7;

        $d8 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int,int)>($i5, $i6);

        return $d8;

     label2:
        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        $i2 = (int) $d3;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d1);

        $i3 = (int) $d4;

        $d5 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int,int)>($i2, $i3);

        return $d5;
    }

    public abstract double cumulativeProbability(int) throws org.apache.commons.math.MathException;

    public double probability(double)
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        double d0, d1, $d2;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d0);

        $b0 = d1 cmpl d0;

        if $b0 != 0 goto label1;

        $i1 = (int) d0;

        $d2 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double probability(int)>($i1);

        return $d2;

     label1:
        return 0.0;
    }

    public double cumulativeProbability(int, int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        int i0, i1, $i2;
        double $d0, $d1, $d2;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>(i1);

        $i2 = i0 - 1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>($i2);

        $d2 = $d0 - $d1;

        return $d2;
    }

    public int inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        double d0, d1, d2;
        int i0, $i4, $i5, i7, i8;
        byte $b1, $b2, $b3, $b6;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label01;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label02;

     label01:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label02:
        i7 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: int getDomainLowerBound(double)>(d0);

        i8 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: int getDomainUpperBound(double)>(d0);

     label03:
        if i7 >= i8 goto label08;

        $i4 = i8 - i7;

        $i5 = $i4 / 2;

        i0 = i7 + $i5;

        d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>(i0);

        $b6 = d1 cmpl d0;

        if $b6 <= 0 goto label05;

        if i0 != i8 goto label04;

        i8 = i8 + -1;

        goto label07;

     label04:
        i8 = i0;

        goto label07;

     label05:
        if i0 != i7 goto label06;

        i7 = i7 + 1;

        goto label07;

     label06:
        i7 = i0;

     label07:
        goto label03;

     label08:
        d2 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>(i7);

     label09:
        $b3 = d2 cmpl d0;

        if $b3 <= 0 goto label10;

        i7 = i7 + -1;

        d2 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>(i7);

        goto label09;

     label10:
        return i7;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        long l0;
        org.apache.commons.math.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: org.apache.commons.math.random.RandomDataImpl randomData>;

        virtualinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: void reSeed(long)>(l0);

        return;
    }

    public int sample() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math.random.RandomDataImpl $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        $r1 = r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: org.apache.commons.math.random.RandomDataImpl randomData>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: int nextInversionDeviate(org.apache.commons.math.distribution.IntegerDistribution)>(r0);

        return $i0;
    }

    public int[] sample(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        int i0, $i1, i2;
        int[] r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_SAMPLE_SIZE>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

     label1:
        r1 = newarray (int)[i0];

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $i1 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: int sample()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    private double checkedCumulativeProbability(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;
        int i0;
        boolean $z0;
        org.apache.commons.math.MathException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        double d1;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        d1 = virtualinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>(i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 == 0 goto label1;

        $r1 = new org.apache.commons.math.MathException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label1:
        return d1;
    }

    protected abstract int getDomainLowerBound(double);

    protected abstract int getDomainUpperBound(double);

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math.distribution.AbstractIntegerDistribution r0;

        r0 := @this: org.apache.commons.math.distribution.AbstractIntegerDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.AbstractIntegerDistribution: long serialVersionUID> = -1146319659338487221L;

        return;
    }
}
