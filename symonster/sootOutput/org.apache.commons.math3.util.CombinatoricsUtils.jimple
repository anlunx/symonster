public final class org.apache.commons.math3.util.CombinatoricsUtils extends java.lang.Object
{
    static final long[] FACTORIALS;
    static final java.util.concurrent.atomic.AtomicReference STIRLING_S2;

    private void <init>()
    {
        org.apache.commons.math3.util.CombinatoricsUtils r0;

        r0 := @this: org.apache.commons.math3.util.CombinatoricsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long binomialCoefficient(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i3, $i4, $i5, $i6, $i12, $i13, $i19, $i23, i26, i27, i28, i29, i31, i32;
        long $l2, $l7, $l8, $l9, $l10, $l11, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l24, l25, l30, l33;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label01;

        if i1 != 0 goto label02;

     label01:
        return 1L;

     label02:
        if i1 == 1 goto label03;

        $i3 = i0 - 1;

        if i1 != $i3 goto label04;

     label03:
        $l2 = (long) i0;

        return $l2;

     label04:
        $i4 = i0 / 2;

        if i1 <= $i4 goto label05;

        $i23 = i0 - i1;

        $l24 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i0, $i23);

        return $l24;

     label05:
        l25 = 1L;

        if i0 > 61 goto label08;

        $i19 = i0 - i1;

        i26 = $i19 + 1;

        i27 = 1;

     label06:
        if i27 > i1 goto label07;

        $l20 = (long) i26;

        $l22 = l25 * $l20;

        $l21 = (long) i27;

        l25 = $l22 / $l21;

        i26 = i26 + 1;

        i27 = i27 + 1;

        goto label06;

     label07:
        goto label13;

     label08:
        if i0 > 66 goto label11;

        $i12 = i0 - i1;

        i28 = $i12 + 1;

        i29 = 1;

     label09:
        if i29 > i1 goto label10;

        $i13 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>(i28, i29);

        l30 = (long) $i13;

        $l14 = (long) i29;

        $l15 = $l14 / l30;

        $l18 = l25 / $l15;

        $l16 = (long) i28;

        $l17 = $l16 / l30;

        l25 = $l18 * $l17;

        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label09;

     label10:
        goto label13;

     label11:
        $i5 = i0 - i1;

        i31 = $i5 + 1;

        i32 = 1;

     label12:
        if i32 > i1 goto label13;

        $i6 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>(i31, i32);

        l33 = (long) $i6;

        $l7 = (long) i32;

        $l8 = $l7 / l33;

        $l11 = l25 / $l8;

        $l9 = (long) i31;

        $l10 = $l9 / l33;

        l25 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>($l11, $l10);

        i31 = i31 + 1;

        i32 = i32 + 1;

        goto label12;

     label13:
        return l25;
    }

    public static double binomialCoefficientDouble(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i7, i8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        long $l6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label1;

        if i1 != 0 goto label2;

     label1:
        return 1.0;

     label2:
        if i1 == 1 goto label3;

        $i2 = i0 - 1;

        if i1 != $i2 goto label4;

     label3:
        $d0 = (double) i0;

        return $d0;

     label4:
        $i3 = i0 / 2;

        if i1 <= $i3 goto label5;

        $i7 = i0 - i1;

        $d7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>(i0, $i7);

        return $d7;

     label5:
        if i0 >= 67 goto label6;

        $l6 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i0, i1);

        $d6 = (double) $l6;

        return $d6;

     label6:
        d8 = 1.0;

        i8 = 1;

     label7:
        if i8 > i1 goto label8;

        $i4 = i0 - i1;

        $i5 = $i4 + i8;

        $d4 = (double) $i5;

        $d3 = (double) i8;

        $d5 = $d4 / $d3;

        d8 = d8 * $d5;

        i8 = i8 + 1;

        goto label7;

     label8:
        $d1 = d8 + 0.5;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d1);

        return $d2;
    }

    public static double binomialCoefficientLog(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2, $i3, $i4, $i5, i7, i8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        long $l6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label01;

        if i1 != 0 goto label02;

     label01:
        return 0.0;

     label02:
        if i1 == 1 goto label03;

        $i2 = i0 - 1;

        if i1 != $i2 goto label04;

     label03:
        $d0 = (double) i0;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d1;

     label04:
        if i0 >= 67 goto label05;

        $l6 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i0, i1);

        $d9 = (double) $l6;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d9);

        return $d10;

     label05:
        if i0 >= 1030 goto label06;

        $d7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>(i0, i1);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d7);

        return $d8;

     label06:
        $i3 = i0 / 2;

        if i1 <= $i3 goto label07;

        $i5 = i0 - i1;

        $d6 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>(i0, $i5);

        return $d6;

     label07:
        d11 = 0.0;

        $i4 = i0 - i1;

        i7 = $i4 + 1;

     label08:
        if i7 > i0 goto label09;

        $d4 = (double) i7;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d4);

        d11 = d11 + $d5;

        i7 = i7 + 1;

        goto label08;

     label09:
        i8 = 2;

     label10:
        if i8 > i1 goto label11;

        $d2 = (double) i8;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        d11 = d11 - $d3;

        i8 = i8 + 1;

        goto label10;

     label11:
        return d11;
    }

    public static long factorial(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0;
        long[] $r0;
        long $l1;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        if i0 <= 20 goto label2;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r1;

     label2:
        $r0 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r0[i0];

        return $l1;
    }

    public static double factorialDouble(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int i0;
        double $d0, $d1, $d2, $d3, $d4;
        long[] $r0;
        long $l1;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        if i0 >= 21 goto label2;

        $r0 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r0[i0];

        $d4 = (double) $l1;

        return $d4;

     label2:
        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>(i0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        $d2 = $d1 + 0.5;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d2);

        return $d3;
    }

    public static double factorialLog(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int i0, i2;
        double $d0, $d1, $d2, $d3, d4;
        long[] $r0;
        long $l1;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        if i0 >= 21 goto label2;

        $r0 = <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS>;

        $l1 = $r0[i0];

        $d2 = (double) $l1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        return $d3;

     label2:
        d4 = 0.0;

        i2 = 2;

     label3:
        if i2 > i0 goto label4;

        $d0 = (double) i2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        d4 = d4 + $d1;

        i2 = i2 + 1;

        goto label3;

     label4:
        return d4;
    }

    public static long stirlingS2(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2, $i3, $i4, $i9, $i13, $i14, $i16, $i20, $i21, $i22, $i25, $i26, i31, i32, i36;
        java.util.concurrent.atomic.AtomicReference $r0, $r10;
        java.lang.Object $r1;
        long $l5, $l6, $l7, $l8, $l10, $l11, $l15, $l17, $l18, $l19, $l23, $l24, $l27, $l28, $l29, l33, $l34, l35;
        byte $b12;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r19, $r20, $r22;
        long[] $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r18;
        org.apache.commons.math3.exception.NotPositiveException $r21;
        long[][] r23;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= 0 goto label01;

        $r21 = new org.apache.commons.math3.exception.NotPositiveException;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r21.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r22);

        throw $r21;

     label01:
        if i1 <= i0 goto label02;

        $r18 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r18.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r19, $r20, 1);

        throw $r18;

     label02:
        $r0 = <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r23 = (long[][]) $r1;

        if r23 != null goto label07;

        r23 = newarray (long[])[26];

        $r9 = newarray (long)[1];

        $r9[0] = 1L;

        r23[0] = $r9;

        i31 = 1;

     label03:
        $i20 = lengthof r23;

        if i31 >= $i20 goto label06;

        $i21 = i31 + 1;

        $r11 = newarray (long)[$i21];

        r23[i31] = $r11;

        $r12 = r23[i31];

        $r12[0] = 0L;

        $r13 = r23[i31];

        $r13[1] = 1L;

        $r14 = r23[i31];

        $r14[i31] = 1L;

        i32 = 2;

     label04:
        if i32 >= i31 goto label05;

        $r17 = r23[i31];

        $l24 = (long) i32;

        $i22 = i31 - 1;

        $r15 = r23[$i22];

        $l23 = $r15[i32];

        $l28 = $l24 * $l23;

        $i25 = i31 - 1;

        $r16 = r23[$i25];

        $i26 = i32 - 1;

        $l27 = $r16[$i26];

        $l29 = $l28 + $l27;

        $r17[i32] = $l29;

        i32 = i32 + 1;

        goto label04;

     label05:
        i31 = i31 + 1;

        goto label03;

     label06:
        $r10 = <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r23);

     label07:
        $i2 = lengthof r23;

        if i0 >= $i2 goto label08;

        $r8 = r23[i0];

        $l19 = $r8[i1];

        return $l19;

     label08:
        if i1 != 0 goto label09;

        return 0L;

     label09:
        if i1 == 1 goto label10;

        if i1 != i0 goto label11;

     label10:
        return 1L;

     label11:
        if i1 != 2 goto label12;

        $i16 = i0 - 1;

        $l17 = 1L << $i16;

        $l18 = $l17 - 1L;

        return $l18;

     label12:
        $i3 = i0 - 1;

        if i1 != $i3 goto label13;

        $l15 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i0, 2);

        return $l15;

     label13:
        l33 = 0L;

        $i4 = i1 & 1;

        if $i4 != 0 goto label14;

        $l34 = 1L;

        goto label15;

     label14:
        $l34 = -1L;

     label15:
        l35 = $l34;

        i36 = 1;

     label16:
        if i36 > i1 goto label18;

        l35 = neg l35;

        $l7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i1, i36);

        $l8 = l35 * $l7;

        $i9 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int pow(int,int)>(i36, i0);

        $l10 = (long) $i9;

        $l11 = $l8 * $l10;

        l33 = l33 + $l11;

        $b12 = l33 cmp 0L;

        if $b12 >= 0 goto label17;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARGUMENT_OUTSIDE_DOMAIN>;

        $r3 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r6;

        $i13 = lengthof r23;

        $i14 = $i13 - 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r3[2] = $r7;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label17:
        i36 = i36 + 1;

        goto label16;

     label18:
        $l5 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i1);

        $l6 = l33 / $l5;

        return $l6;
    }

    public static java.util.Iterator combinationsIterator(int, int)
    {
        int i0, i1;
        org.apache.commons.math3.util.Combinations $r0;
        java.util.Iterator $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.apache.commons.math3.util.Combinations;

        specialinvoke $r0.<org.apache.commons.math3.util.Combinations: void <init>(int,int)>(i0, i1);

        $r1 = virtualinvoke $r0.<org.apache.commons.math3.util.Combinations: java.util.Iterator iterator()>();

        return $r1;
    }

    public static void checkBinomial(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotPositiveException
    {
        int i0, i1;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1, $r4;
        java.lang.Integer $r2, $r5, $r6;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_INVALID_PARAMETERS_ORDER>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r4, $r5, $r6, 1);

        throw $r3;

     label1:
        if i0 >= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BINOMIAL_NEGATIVE_PARAMETER>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label2:
        return;
    }

    static void <clinit>()
    {
        long[] $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r0 = newarray (long)[21];

        $r0[0] = 1L;

        $r0[1] = 1L;

        $r0[2] = 2L;

        $r0[3] = 6L;

        $r0[4] = 24L;

        $r0[5] = 120L;

        $r0[6] = 720L;

        $r0[7] = 5040L;

        $r0[8] = 40320L;

        $r0[9] = 362880L;

        $r0[10] = 3628800L;

        $r0[11] = 39916800L;

        $r0[12] = 479001600L;

        $r0[13] = 6227020800L;

        $r0[14] = 87178291200L;

        $r0[15] = 1307674368000L;

        $r0[16] = 20922789888000L;

        $r0[17] = 355687428096000L;

        $r0[18] = 6402373705728000L;

        $r0[19] = 121645100408832000L;

        $r0[20] = 2432902008176640000L;

        <org.apache.commons.math3.util.CombinatoricsUtils: long[] FACTORIALS> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <org.apache.commons.math3.util.CombinatoricsUtils: java.util.concurrent.atomic.AtomicReference STIRLING_S2> = $r1;

        return;
    }
}
