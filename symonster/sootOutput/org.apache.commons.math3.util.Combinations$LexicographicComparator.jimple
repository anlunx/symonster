class org.apache.commons.math3.util.Combinations$LexicographicComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int n;
    private final int k;

    public void <init>(int, int)
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n> = i0;

        r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k> = i1;

        return;
    }

    public int compare(int[], int[])
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int[] r1, r2, r3, r4;
        long l0, l1;
        int $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11;
        byte $b6, $b7;
        org.apache.commons.math3.exception.DimensionMismatchException $r5, $r6;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i3 = lengthof r1;

        $i2 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        if $i3 == $i2 goto label1;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i11 = lengthof r1;

        $i10 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i11, $i10);

        throw $r6;

     label1:
        $i5 = lengthof r2;

        $i4 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        if $i5 == $i4 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = lengthof r2;

        $i8 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int k>;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, $i8);

        throw $r5;

     label2:
        r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>(r1);

        staticinvoke <java.util.Arrays: void sort(int[])>(r3);

        r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[])>(r2);

        staticinvoke <java.util.Arrays: void sort(int[])>(r4);

        l0 = specialinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: long lexNorm(int[])>(r3);

        l1 = specialinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: long lexNorm(int[])>(r4);

        $b6 = l0 cmp l1;

        if $b6 >= 0 goto label3;

        return -1;

     label3:
        $b7 = l0 cmp l1;

        if $b7 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private long lexNorm(int[])
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i11;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r5;
        long $l9, l10;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        r1 := @parameter0: int[];

        l10 = 0L;

        i11 = 0;

     label1:
        $i1 = lengthof r1;

        if i11 >= $i1 goto label4;

        i0 = r1[i11];

        if i0 < 0 goto label2;

        $i4 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        if i0 < $i4 goto label3;

     label2:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i2 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        $i3 = $i2 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label3:
        $i6 = r1[i11];

        $i5 = r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int n>;

        $i7 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int pow(int,int)>($i5, i11);

        $i8 = $i6 * $i7;

        $l9 = (long) $i8;

        l10 = l10 + $l9;

        i11 = i11 + 1;

        goto label1;

     label4:
        return l10;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.util.Combinations$LexicographicComparator r0;
        java.lang.Object r1, r2;
        int[] $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Combinations$LexicographicComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (int[]) r1;

        $r3 = (int[]) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.util.Combinations$LexicographicComparator: int compare(int[],int[])>($r4, $r3);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.util.Combinations$LexicographicComparator: long serialVersionUID> = 20130906L;

        return;
    }
}
