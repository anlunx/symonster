public class org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer extends org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer
{
    private final org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula;
    private final org.apache.commons.math3.optimization.general.Preconditioner preconditioner;
    private final org.apache.commons.math3.analysis.solvers.UnivariateSolver solver;
    private double initialStep;
    private double[] point;

    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula r1;
        org.apache.commons.math3.optimization.SimpleValueChecker $r2;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        $r2 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r2.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.BrentSolver $r3;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        $r3 = new org.apache.commons.math3.analysis.solvers.BrentSolver;

        specialinvoke $r3.<org.apache.commons.math3.analysis.solvers.BrentSolver: void <init>()>();

        $r4 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optimization.general.Preconditioner)>(r1, r2, $r3, $r4);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r3;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula,org.apache.commons.math3.optimization.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optimization.general.Preconditioner)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.general.ConjugateGradientFormula, org.apache.commons.math3.optimization.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver, org.apache.commons.math3.optimization.general.Preconditioner)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula r1;
        org.apache.commons.math3.optimization.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r3;
        org.apache.commons.math3.optimization.general.Preconditioner r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.general.ConjugateGradientFormula;

        r2 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        r4 := @parameter3: org.apache.commons.math3.optimization.general.Preconditioner;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r2);

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula> = r1;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver> = r3;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner> = r4;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = 1.0;

        return;
    }

    public void setInitialStep(double)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        double d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = 1.0;

        goto label2;

     label1:
        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep> = d0;

     label2:
        return;
    }

    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.optimization.GoalType r2, $r9, $r20;
        int i0, $i1, $i2, $i3, i5, i6, i7, i8, i9, $i10, i11, i12, i13, i14;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27, d28, d29;
        org.apache.commons.math3.optimization.PointValuePair r3, $r14, r30;
        double[] r5, $r6, $r7, $r8, $r10, $r13, $r15, $r19, $r21, $r26, r27, r28, r29, $r31, r32;
        org.apache.commons.math3.optimization.general.Preconditioner $r11, $r22;
        java.lang.Object $r12, $r25;
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction $r16;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r17, $r18;
        org.apache.commons.math3.optimization.general.ConjugateGradientFormula $r23, $r24;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] getStartPoint()>();

        r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point> = $r6;

        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r7 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        i0 = lengthof $r7;

        $r8 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        r27 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r8);

        $r9 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if r2 != $r9 goto label02;

        i5 = 0;

     label01:
        if i5 >= i0 goto label02;

        $d24 = r27[i5];

        $d25 = neg $d24;

        r27[i5] = $d25;

        i5 = i5 + 1;

        goto label01;

     label02:
        $r11 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner>;

        $r10 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        r28 = interfaceinvoke $r11.<org.apache.commons.math3.optimization.general.Preconditioner: double[] precondition(double[],double[])>($r10, r27);

        $r12 = virtualinvoke r28.<java.lang.Object: java.lang.Object clone()>();

        r29 = (double[]) $r12;

        d26 = 0.0;

        i6 = 0;

     label03:
        if i6 >= i0 goto label04;

        $d22 = r27[i6];

        $d21 = r29[i6];

        $d23 = $d22 * $d21;

        d26 = d26 + $d23;

        i6 = i6 + 1;

        goto label03;

     label04:
        r30 = null;

        i7 = 0;

        i8 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: int getMaxEvaluations()>();

     label05:
        i7 = i7 + 1;

        $r13 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        d0 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double computeObjectiveValue(double[])>($r13);

        r3 = r30;

        $r14 = new org.apache.commons.math3.optimization.PointValuePair;

        $r15 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        specialinvoke $r14.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>($r15, d0);

        r30 = $r14;

        if r3 == null goto label06;

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i7, r3, $r14);

        if $z0 == 0 goto label06;

        return $r14;

     label06:
        $r16 = new org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction;

        specialinvoke $r16.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction: void <init>(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer,double[])>(r0, r29);

        $d3 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double initialStep>;

        d1 = specialinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($r16, 0.0, $d3);

        $r17 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        d2 = interfaceinvoke $r17.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>(i8, $r16, 0.0, d1, 1.0E-15);

        $r18 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i1 = interfaceinvoke $r18.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: int getEvaluations()>();

        i8 = i8 - $i1;

        i9 = 0;

     label07:
        $r31 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $i10 = lengthof $r31;

        if i9 >= $i10 goto label08;

        $r26 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        $d19 = $r26[i9];

        $d17 = r29[i9];

        $d18 = d2 * $d17;

        $d20 = $d19 + $d18;

        $r26[i9] = $d20;

        i9 = i9 + 1;

        goto label07;

     label08:
        $r19 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        r32 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>($r19);

        $r20 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if r2 != $r20 goto label10;

        i11 = 0;

     label09:
        if i11 >= i0 goto label10;

        $d15 = r32[i11];

        $d16 = neg $d15;

        r32[i11] = $d16;

        i11 = i11 + 1;

        goto label09;

     label10:
        d27 = d26;

        $r22 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.Preconditioner preconditioner>;

        $r21 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        r5 = interfaceinvoke $r22.<org.apache.commons.math3.optimization.general.Preconditioner: double[] precondition(double[],double[])>($r21, r32);

        d26 = 0.0;

        i12 = 0;

     label11:
        if i12 >= i0 goto label12;

        $d13 = r32[i12];

        $d12 = r5[i12];

        $d14 = $d13 * $d12;

        d26 = d26 + $d14;

        i12 = i12 + 1;

        goto label11;

     label12:
        $r24 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula>;

        $r23 = <org.apache.commons.math3.optimization.general.ConjugateGradientFormula: org.apache.commons.math3.optimization.general.ConjugateGradientFormula FLETCHER_REEVES>;

        if $r24 != $r23 goto label13;

        d28 = d26 / d27;

        goto label16;

     label13:
        d29 = 0.0;

        i13 = 0;

     label14:
        $i2 = lengthof r32;

        if i13 >= $i2 goto label15;

        $d10 = r32[i13];

        $d9 = r28[i13];

        $d11 = $d10 * $d9;

        d29 = d29 + $d11;

        i13 = i13 + 1;

        goto label14;

     label15:
        $d4 = d26 - d29;

        d28 = $d4 / d27;

     label16:
        r28 = r5;

        $i3 = i7 % i0;

        if $i3 == 0 goto label17;

        $b4 = d28 cmpg 0.0;

        if $b4 >= 0 goto label18;

     label17:
        $r25 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>();

        r29 = (double[]) $r25;

        goto label20;

     label18:
        i14 = 0;

     label19:
        if i14 >= i0 goto label20;

        $d7 = r5[i14];

        $d5 = r29[i14];

        $d6 = d28 * $d5;

        $d8 = $d7 + $d6;

        r29[i14] = $d8;

        i14 = i14 + 1;

        goto label19;

     label20:
        goto label05;
    }

    private double findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction, double, double)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, d8, d9;
        byte $b0, $b1;
        org.apache.commons.math3.exception.MathIllegalStateException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 = interfaceinvoke r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        d8 = d1;

     label1:
        $b0 = d8 cmpg 1.7976931348623157E308;

        if $b0 >= 0 goto label3;

        d3 = d0 + d8;

        d9 = interfaceinvoke r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d3);

        $d4 = d2 * d9;

        $b1 = $d4 cmpg 0.0;

        if $b1 > 0 goto label2;

        return d3;

     label2:
        $d5 = d2 / d9;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(2.0, $d5);

        d8 = d8 * $d6;

        goto label1;

     label3:
        $r2 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;
    }

    static double[] access$000(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer)
    {
        org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer r0;
        double[] $r1;

        r0 := @parameter0: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer: double[] point>;

        return $r1;
    }
}
