class org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    final org.apache.commons.math3.geometry.partitioning.RegionFactory this$0;

    private void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner: org.apache.commons.math3.geometry.partitioning.RegionFactory this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_SUB_MINUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>(null);

        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory, org.apache.commons.math3.geometry.partitioning.RegionFactory$1)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory r1;
        org.apache.commons.math3.geometry.partitioning.RegionFactory$1 r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.RegionFactory$1;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner: void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory)>(r1);

        return;
    }
}
