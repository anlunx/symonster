public class org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
{
    private final int dimension;
    private final java.util.List microsphere;
    private final double brightnessExponent;
    private final java.util.Map samples;

    public void <init>(double[][], double[], int, int, org.apache.commons.math3.random.UnitSphereRandomVectorGenerator) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        double[][] r1;
        double[] r2, r4, $r6, $r7, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        org.apache.commons.math3.random.UnitSphereRandomVectorGenerator r3;
        org.apache.commons.math3.exception.NullArgumentException $r5, $r18, $r19;
        double $d0, $d1;
        java.util.HashMap $r8;
        java.util.ArrayList $r9;
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement $r10;
        java.util.List $r11;
        org.apache.commons.math3.linear.ArrayRealVector $r13;
        java.util.Map $r14;
        java.lang.Double $r15;
        org.apache.commons.math3.exception.DimensionMismatchException $r17, $r20;
        org.apache.commons.math3.exception.NoDataException $r21;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label02:
        $i2 = lengthof r1;

        if $i2 != 0 goto label03;

        $r21 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r21.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r21;

     label03:
        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 == $i3 goto label04;

        $r20 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i13 = lengthof r1;

        $i12 = lengthof r2;

        specialinvoke $r20.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i13, $i12);

        throw $r20;

     label04:
        $r6 = r1[0];

        if $r6 != null goto label05;

        $r19 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r19.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r19;

     label05:
        $r7 = r1[0];

        $i5 = lengthof $r7;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension> = $i5;

        $d0 = (double) i0;

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double brightnessExponent> = $d0;

        $r8 = new java.util.HashMap;

        $i6 = lengthof r2;

        specialinvoke $r8.<java.util.HashMap: void <init>(int)>($i6);

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples> = $r8;

        i14 = 0;

     label06:
        $i7 = lengthof r1;

        if i14 >= $i7 goto label09;

        r4 = r1[i14];

        if r4 != null goto label07;

        $r18 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r18.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r18;

     label07:
        $i9 = lengthof r4;

        $i8 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension>;

        if $i9 == $i8 goto label08;

        $r17 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i11 = lengthof r4;

        $i10 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: int dimension>;

        specialinvoke $r17.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i11, $i10);

        throw $r17;

     label08:
        $r14 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples>;

        $r13 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r13.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r4);

        $d1 = r2[i14];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15);

        i14 = i14 + 1;

        goto label06;

     label09:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i1);

        r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere> = $r9;

        i15 = 0;

     label10:
        if i15 >= i1 goto label11;

        $r11 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        $r10 = new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        $r12 = virtualinvoke r3.<org.apache.commons.math3.random.UnitSphereRandomVectorGenerator: double[] nextVector()>();

        specialinvoke $r10.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void <init>(double[])>($r12);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        i15 = i15 + 1;

        goto label10;

     label11:
        return;
    }

    public double value(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        double[] r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14;
        java.util.Iterator r3, r22, r24, r27;
        java.util.Map$Entry r4, r25;
        org.apache.commons.math3.linear.ArrayRealVector $r5;
        java.util.List $r6, $r9, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r7;
        java.util.Set $r8;
        java.lang.Object $r10, $r11, $r13, $r14, $r17, $r19, $r21;
        java.lang.Double $r12, $r20;
        org.apache.commons.math3.linear.RealVector $r15, $r18, r26;
        byte $b0;
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r23, r28, r29;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        r1 := @parameter0: double[];

        $r5 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r5.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[])>(r1);

        $r6 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        r22 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r21 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r21;

        virtualinvoke r23.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void reset()>();

        goto label01;

     label02:
        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.Map samples>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r24 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r13 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (org.apache.commons.math3.linear.RealVector) $r14;

        r26 = virtualinvoke $r15.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector)>($r5);

        d0 = virtualinvoke r26.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $b0 = $d5 cmpg $d6;

        if $b0 >= 0 goto label04;

        $r19 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.Double) $r19;

        $d11 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        return $d11;

     label04:
        $r16 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        r27 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r17 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r17;

        $d7 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double brightnessExponent>;

        $d8 = neg $d7;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d8);

        $r18 = virtualinvoke r28.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: org.apache.commons.math3.linear.RealVector normal()>();

        $d9 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: double cosAngle(org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>(r26, $r18);

        $d10 = $d9 * d1;

        virtualinvoke r28.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: void store(double,java.util.Map$Entry)>($d10, r25);

        goto label05;

     label06:
        goto label03;

     label07:
        d12 = 0.0;

        d13 = 0.0;

        $r9 = r0.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction: java.util.List microsphere>;

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement) $r10;

        d14 = virtualinvoke r29.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double illumination()>();

        r4 = virtualinvoke r29.<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: java.util.Map$Entry sample()>();

        if r4 == null goto label09;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.Double) $r11;

        $d3 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d4 = d14 * $d3;

        d12 = d12 + $d4;

        d13 = d13 + d14;

     label09:
        goto label08;

     label10:
        $d2 = d12 / d13;

        return $d2;
    }

    private double cosAngle(org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction r0;
        org.apache.commons.math3.linear.RealVector r1, r2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r2);

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $d3 = $d1 * $d2;

        $d4 = $d0 / $d3;

        return $d4;
    }
}
