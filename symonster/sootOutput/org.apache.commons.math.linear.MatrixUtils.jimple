public class org.apache.commons.math.linear.MatrixUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math.linear.MatrixUtils r0;

        r0 := @this: org.apache.commons.math.linear.MatrixUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math.linear.RealMatrix createRealMatrix(int, int)
    {
        int i0, i1, $i2;
        org.apache.commons.math.linear.AbstractRealMatrix $r0;
        org.apache.commons.math.linear.Array2DRowRealMatrix r1;
        org.apache.commons.math.linear.BlockRealMatrix r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * i1;

        if $i2 > 4096 goto label1;

        r1 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        $r0 = r1;

        specialinvoke r1.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(int,int)>(i0, i1);

        goto label2;

     label1:
        r2 = new org.apache.commons.math.linear.BlockRealMatrix;

        $r0 = r2;

        specialinvoke r2.<org.apache.commons.math.linear.BlockRealMatrix: void <init>(int,int)>(i0, i1);

     label2:
        return $r0;
    }

    public static org.apache.commons.math.linear.FieldMatrix createFieldMatrix(org.apache.commons.math.Field, int, int)
    {
        org.apache.commons.math.Field r0;
        int i0, i1, $i2;
        org.apache.commons.math.linear.AbstractFieldMatrix $r1;
        org.apache.commons.math.linear.Array2DRowFieldMatrix r2;
        org.apache.commons.math.linear.BlockFieldMatrix r3;

        r0 := @parameter0: org.apache.commons.math.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 * i1;

        if $i2 > 4096 goto label1;

        r2 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = r2;

        specialinvoke r2.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.Field,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        r3 = new org.apache.commons.math.linear.BlockFieldMatrix;

        $r1 = r3;

        specialinvoke r3.<org.apache.commons.math.linear.BlockFieldMatrix: void <init>(org.apache.commons.math.Field,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public static org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])
    {
        double[][] r0;
        double[] $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math.linear.AbstractRealMatrix $r2;
        org.apache.commons.math.linear.Array2DRowRealMatrix r3;
        org.apache.commons.math.linear.BlockRealMatrix r4;

        r0 := @parameter0: double[][];

        $i1 = lengthof r0;

        $r1 = r0[0];

        $i0 = lengthof $r1;

        $i2 = $i1 * $i0;

        if $i2 > 4096 goto label1;

        r3 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        $r2 = r3;

        specialinvoke r3.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][])>(r0);

        goto label2;

     label1:
        r4 = new org.apache.commons.math.linear.BlockRealMatrix;

        $r2 = r4;

        specialinvoke r4.<org.apache.commons.math.linear.BlockRealMatrix: void <init>(double[][])>(r0);

     label2:
        return $r2;
    }

    public static org.apache.commons.math.linear.FieldMatrix createFieldMatrix(org.apache.commons.math.FieldElement[][])
    {
        org.apache.commons.math.FieldElement[][] r0;
        org.apache.commons.math.FieldElement[] $r1;
        int $i0, $i1, $i2;
        org.apache.commons.math.linear.AbstractFieldMatrix $r2;
        org.apache.commons.math.linear.Array2DRowFieldMatrix r3;
        org.apache.commons.math.linear.BlockFieldMatrix r4;

        r0 := @parameter0: org.apache.commons.math.FieldElement[][];

        $i1 = lengthof r0;

        $r1 = r0[0];

        $i0 = lengthof $r1;

        $i2 = $i1 * $i0;

        if $i2 > 4096 goto label1;

        r3 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r2 = r3;

        specialinvoke r3.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][])>(r0);

        goto label2;

     label1:
        r4 = new org.apache.commons.math.linear.BlockFieldMatrix;

        $r2 = r4;

        specialinvoke r4.<org.apache.commons.math.linear.BlockFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][])>(r0);

     label2:
        return $r2;
    }

    public static org.apache.commons.math.linear.RealMatrix createRealIdentityMatrix(int)
    {
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix r0;

        i0 := @parameter0: int;

        r0 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        interfaceinvoke r0.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static org.apache.commons.math.linear.FieldMatrix createFieldIdentityMatrix(org.apache.commons.math.Field, int)
    {
        org.apache.commons.math.Field r0;
        int i0, i1;
        org.apache.commons.math.FieldElement r1, r2;
        org.apache.commons.math.FieldElement[][] r3, $r10;
        org.apache.commons.math.FieldElement[] r4;
        java.lang.Object $r5, $r6, $r9;
        java.lang.Class $r7;
        int[] $r8;
        org.apache.commons.math.linear.Array2DRowFieldMatrix $r11;

        r0 := @parameter0: org.apache.commons.math.Field;

        i0 := @parameter1: int;

        $r5 = interfaceinvoke r0.<org.apache.commons.math.Field: java.lang.Object getZero()>();

        r1 = (org.apache.commons.math.FieldElement) $r5;

        $r6 = interfaceinvoke r0.<org.apache.commons.math.Field: java.lang.Object getOne()>();

        r2 = (org.apache.commons.math.FieldElement) $r6;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = newarray (int)[2];

        $r8[0] = i0;

        $r8[1] = i0;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r7, $r8);

        $r10 = (org.apache.commons.math.FieldElement[][]) $r9;

        r3 = (org.apache.commons.math.FieldElement[][]) $r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r4, r1);

        r4[i1] = r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r11 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r11.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r3, 0);

        return $r11;
    }

    public static org.apache.commons.math.linear.BigMatrix createBigIdentityMatrix(int)
    {
        int i0, i1;
        java.math.BigDecimal[][] r0;
        java.math.BigDecimal[] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3, $r4;

        i0 := @parameter0: int;

        r0 = newmultiarray (java.math.BigDecimal)[i0][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        $r3 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ZERO>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, $r3);

        $r4 = <org.apache.commons.math.linear.BigMatrixImpl: java.math.BigDecimal ONE>;

        r1[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r0, 0);

        return $r2;
    }

    public static org.apache.commons.math.linear.RealMatrix createRealDiagonalMatrix(double[])
    {
        double[] r0;
        org.apache.commons.math.linear.RealMatrix r1;
        int $i0, $i1, $i2, i3;
        double $d0;

        r0 := @parameter0: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>($i1, $i0);

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $d0 = r0[i3];

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i3, i3, $d0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math.linear.FieldMatrix createFieldDiagonalMatrix(org.apache.commons.math.FieldElement[])
    {
        org.apache.commons.math.FieldElement[] r0;
        org.apache.commons.math.linear.FieldMatrix r1;
        org.apache.commons.math.FieldElement $r2, $r4;
        org.apache.commons.math.Field $r3;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: org.apache.commons.math.FieldElement[];

        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.FieldElement: org.apache.commons.math.Field getField()>();

        $i1 = lengthof r0;

        $i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.FieldMatrix createFieldMatrix(org.apache.commons.math.Field,int,int)>($r3, $i1, $i0);

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $r4 = r0[i3];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math.FieldElement)>(i3, i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createBigMatrix(double[][])
    {
        double[][] r0;
        org.apache.commons.math.linear.BigMatrixImpl $r1;

        r0 := @parameter0: double[][];

        $r1 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r1.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(double[][])>(r0);

        return $r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createBigMatrix(java.math.BigDecimal[][])
    {
        java.math.BigDecimal[][] r0;
        org.apache.commons.math.linear.BigMatrixImpl $r1;

        r0 := @parameter0: java.math.BigDecimal[][];

        $r1 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r1.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][])>(r0);

        return $r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createBigMatrix(java.math.BigDecimal[][], boolean)
    {
        java.math.BigDecimal[][] r0;
        boolean z0;
        org.apache.commons.math.linear.BigMatrixImpl $r1;

        r0 := @parameter0: java.math.BigDecimal[][];

        z0 := @parameter1: boolean;

        $r1 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r1.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r0, z0);

        return $r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createBigMatrix(java.lang.String[][])
    {
        java.lang.String[][] r0;
        org.apache.commons.math.linear.BigMatrixImpl $r1;

        r0 := @parameter0: java.lang.String[][];

        $r1 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r1.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.lang.String[][])>(r0);

        return $r1;
    }

    public static org.apache.commons.math.linear.RealVector createRealVector(double[])
    {
        double[] r0;
        org.apache.commons.math.linear.ArrayRealVector $r1;

        r0 := @parameter0: double[];

        $r1 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r0, 1);

        return $r1;
    }

    public static org.apache.commons.math.linear.FieldVector createFieldVector(org.apache.commons.math.FieldElement[])
    {
        org.apache.commons.math.FieldElement[] r0;
        org.apache.commons.math.linear.ArrayFieldVector $r1;

        r0 := @parameter0: org.apache.commons.math.FieldElement[];

        $r1 = new org.apache.commons.math.linear.ArrayFieldVector;

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayFieldVector: void <init>(org.apache.commons.math.FieldElement[],boolean)>(r0, 1);

        return $r1;
    }

    public static org.apache.commons.math.linear.RealMatrix createRowRealMatrix(double[])
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(1, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(0, i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math.linear.FieldMatrix createRowFieldMatrix(org.apache.commons.math.FieldElement[])
    {
        org.apache.commons.math.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math.linear.FieldMatrix r1;
        org.apache.commons.math.FieldElement $r2, $r4;
        org.apache.commons.math.Field $r3;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: org.apache.commons.math.FieldElement[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r5 = newarray (java.lang.Object)[0];

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r7;

     label1:
        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.FieldElement: org.apache.commons.math.Field getField()>();

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.FieldMatrix createFieldMatrix(org.apache.commons.math.Field,int,int)>($r3, 1, i0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math.FieldElement)>(0, i1, $r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createRowBigMatrix(double[])
    {
        double[] r0;
        int i0, i1;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3;
        double $d0;
        java.math.BigDecimal[] $r4;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[1][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r1[0];

        $r3 = new java.math.BigDecimal;

        $d0 = r0[i1];

        specialinvoke $r3.<java.math.BigDecimal: void <init>(double)>($d0);

        $r4[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public static org.apache.commons.math.linear.BigMatrix createRowBigMatrix(java.math.BigDecimal[])
    {
        java.math.BigDecimal[] r0, $r2;
        int i0;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r3;

        r0 := @parameter0: java.math.BigDecimal[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[1][i0];

        $r2 = r1[0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, 0, i0);

        $r3 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r3.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r3;
    }

    public static org.apache.commons.math.linear.BigMatrix createRowBigMatrix(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, i1;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3;
        java.lang.String $r4;
        java.math.BigDecimal[] $r5;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[1][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[0];

        $r3 = new java.math.BigDecimal;

        $r4 = r0[i1];

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

        $r5[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public static org.apache.commons.math.linear.RealMatrix createColumnRealMatrix(double[])
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix r1;
        double $d0;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, 1);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i1, 0, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math.linear.FieldMatrix createColumnFieldMatrix(org.apache.commons.math.FieldElement[])
    {
        org.apache.commons.math.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math.linear.FieldMatrix r1;
        org.apache.commons.math.FieldElement $r2, $r4;
        org.apache.commons.math.Field $r3;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: org.apache.commons.math.FieldElement[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r5 = newarray (java.lang.Object)[0];

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r7;

     label1:
        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.FieldElement: org.apache.commons.math.Field getField()>();

        r1 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.FieldMatrix createFieldMatrix(org.apache.commons.math.Field,int,int)>($r3, i0, 1);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math.FieldElement)>(i1, 0, $r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static org.apache.commons.math.linear.BigMatrix createColumnBigMatrix(double[])
    {
        double[] r0;
        int i0, i1;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3;
        double $d0;
        java.math.BigDecimal[] $r4;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[i0][1];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r1[i1];

        $r3 = new java.math.BigDecimal;

        $d0 = r0[i1];

        specialinvoke $r3.<java.math.BigDecimal: void <init>(double)>($d0);

        $r4[0] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public static org.apache.commons.math.linear.BigMatrix createColumnBigMatrix(java.math.BigDecimal[])
    {
        java.math.BigDecimal[] r0, $r4;
        int i0, i1;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3;

        r0 := @parameter0: java.math.BigDecimal[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[i0][1];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r1[i1];

        $r3 = r0[i1];

        $r4[0] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public static org.apache.commons.math.linear.BigMatrix createColumnBigMatrix(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, i1;
        java.math.BigDecimal[][] r1;
        org.apache.commons.math.linear.BigMatrixImpl $r2;
        java.math.BigDecimal $r3;
        java.lang.String $r4;
        java.math.BigDecimal[] $r5;

        r0 := @parameter0: java.lang.String[];

        i0 = lengthof r0;

        r1 = newmultiarray (java.math.BigDecimal)[i0][1];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        $r3 = new java.math.BigDecimal;

        $r4 = r0[i1];

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

        $r5[0] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.BigMatrixImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.BigMatrixImpl: void <init>(java.math.BigDecimal[][],boolean)>(r1, 0);

        return $r2;
    }

    public static void checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int)
    {
        org.apache.commons.math.linear.AnyMatrix r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math.linear.MatrixIndexException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i3 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math.linear.MatrixIndexException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ROW_INDEX_OUT_OF_RANGE>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[1] = $r5;

        $i1 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r6;

        specialinvoke $r1.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        return;
    }

    public static void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AnyMatrix r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math.linear.MatrixIndexException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i3 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math.linear.MatrixIndexException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats COLUMN_INDEX_OUT_OF_RANGE>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[1] = $r5;

        $i1 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r6;

        specialinvoke $r1.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        return;
    }

    public static void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int, int, int, int)
    {
        org.apache.commons.math.linear.AnyMatrix r0;
        int i0, i1, i2, i3;
        org.apache.commons.math.linear.MatrixIndexException $r1, $r6;
        java.lang.Object[] $r2, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r8;
        java.lang.Integer $r4, $r5, $r9, $r10;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        if i0 <= i1 goto label1;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r10;

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label1:
        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i2);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i3);

        if i2 <= i3 goto label2;

        $r1 = new org.apache.commons.math.linear.MatrixIndexException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r2[1] = $r5;

        specialinvoke $r1.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        return;
    }

    public static void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int[], int[]) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AnyMatrix r0;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        org.apache.commons.math.linear.MatrixIndexException $r3, $r6;
        java.lang.Object[] $r4, $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r5, $r8;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        $i2 = $i1 * $i0;

        if $i2 != 0 goto label2;

        $i3 = lengthof r1;

        if $i3 != 0 goto label1;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_SELECTED_ROW_INDEX_ARRAY>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label1:
        $r3 = new org.apache.commons.math.linear.MatrixIndexException;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_SELECTED_COLUMN_INDEX_ARRAY>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label2:
        i4 = lengthof r1;

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        i6 = r1[i5];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i6);

        i5 = i5 + 1;

        goto label3;

     label4:
        i7 = lengthof r2;

        i8 = 0;

     label5:
        if i8 >= i7 goto label6;

        i9 = r2[i8];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i9);

        i8 = i8 + 1;

        goto label5;

     label6:
        return;
    }

    public static void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i6 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $i7 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        if $i6 == $i7 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_ADDITION_COMPATIBLE_MATRICES>;

        $r2 = newarray (java.lang.Object)[4];

        $i2 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r4;

        $i3 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r5;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[2] = $r6;

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[3] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r8;

     label2:
        return;
    }

    public static void checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i6 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $i7 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        if $i6 == $i7 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_SUBTRACTION_COMPATIBLE_MATRICES>;

        $r2 = newarray (java.lang.Object)[4];

        $i2 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r4;

        $i3 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r5;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[2] = $r6;

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[3] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r8;

     label2:
        return;
    }

    public static void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: org.apache.commons.math.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_MULTIPLICATION_COMPATIBLE_MATRICES>;

        $r2 = newarray (java.lang.Object)[4];

        $i2 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r4;

        $i3 = interfaceinvoke r0.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r5;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[2] = $r6;

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r2[3] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r8;

     label1:
        return;
    }

    public static org.apache.commons.math.linear.Array2DRowRealMatrix fractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)
    {
        org.apache.commons.math.linear.FieldMatrix r0;
        org.apache.commons.math.linear.MatrixUtils$FractionMatrixConverter $r2;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r4;

        r0 := @parameter0: org.apache.commons.math.linear.FieldMatrix;

        $r2 = new org.apache.commons.math.linear.MatrixUtils$FractionMatrixConverter;

        specialinvoke $r2.<org.apache.commons.math.linear.MatrixUtils$FractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math.linear.FieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor)>($r2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math.linear.MatrixUtils$FractionMatrixConverter: org.apache.commons.math.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r4;
    }

    public static org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)
    {
        org.apache.commons.math.linear.FieldMatrix r0;
        org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter $r2;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r4;

        r0 := @parameter0: org.apache.commons.math.linear.FieldMatrix;

        $r2 = new org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter;

        specialinvoke $r2.<org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math.linear.FieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor)>($r2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r4;
    }

    public static void serializeRealVector(org.apache.commons.math.linear.RealVector, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math.linear.RealVector r0;
        java.io.ObjectOutputStream r1;
        int i0, i1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.linear.RealVector;

        r1 := @parameter1: java.io.ObjectOutputStream;

        i0 = interfaceinvoke r0.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = interfaceinvoke r0.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void deserializeRealVector(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.io.ObjectInputStream r2;
        java.lang.reflect.Field r3;
        org.apache.commons.math.linear.ArrayRealVector $r4;
        java.lang.Class $r5;
        double $d0;
        java.lang.IllegalAccessException $r6;
        java.io.IOException $r7, $r10;
        java.lang.NoSuchFieldException $r9;
        int i0, i1;
        double[] r12;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.ObjectInputStream;

     label1:
        i0 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        r12 = newarray (double)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = virtualinvoke r2.<java.io.ObjectInputStream: double readDouble()>();

        r12[i1] = $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r12, 0);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>()>();

        virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>()>();

        virtualinvoke $r7.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

     label7:
        return;

        catch java.lang.NoSuchFieldException from label1 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label4 with label6;
    }

    public static void serializeRealMatrix(org.apache.commons.math.linear.RealMatrix, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math.linear.RealMatrix r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        r1 := @parameter1: java.io.ObjectOutputStream;

        i0 = interfaceinvoke r0.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r0.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = interfaceinvoke r0.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public static void deserializeRealMatrix(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.io.ObjectInputStream r2;
        double[][] r3;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r4;
        java.lang.Class $r5;
        double $d0;
        java.lang.IllegalAccessException $r6;
        java.io.IOException $r7, $r10;
        java.lang.NoSuchFieldException $r9;
        int i0, i1, i2, i3;
        double[] r12;
        java.lang.reflect.Field r14;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.ObjectInputStream;

     label1:
        i0 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        i1 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        r3 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r12 = r3[i2];

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $d0 = virtualinvoke r2.<java.io.ObjectInputStream: double readDouble()>();

        r12[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r4 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r3, 0);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r14 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r14.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r14.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>()>();

        virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r10;

     label8:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>()>();

        virtualinvoke $r7.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

     label9:
        return;

        catch java.lang.NoSuchFieldException from label1 to label6 with label7;
        catch java.lang.IllegalAccessException from label1 to label6 with label8;
    }
}
