public abstract class org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator extends org.apache.commons.math.ode.AbstractIntegrator
{
    protected final double scalAbsoluteTolerance;
    protected final double scalRelativeTolerance;
    protected final double[] vecAbsoluteTolerance;
    protected final double[] vecRelativeTolerance;
    protected int mainSetDimension;
    private double initialStep;
    private final double minStep;
    private final double maxStep;

    public void <init>(java.lang.String, double, double, double, double)
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        java.lang.String r1;
        double d0, d1, d2, d3, $d4, $d5;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void <init>(java.lang.String)>(r1);

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep> = $d4;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep> = $d5;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalAbsoluteTolerance> = d2;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalRelativeTolerance> = d3;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance> = null;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance> = null;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: void resetInternalState()>();

        return;
    }

    public void <init>(java.lang.String, double, double, double[], double[])
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        java.lang.String r1;
        double d0, d1;
        double[] r2, r3, $r5, $r7;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void <init>(java.lang.String)>(r1);

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep> = d0;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep> = d1;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalAbsoluteTolerance> = 0.0;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double scalRelativeTolerance> = 0.0;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance> = $r5;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance> = $r7;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: void resetInternalState()>();

        return;
    }

    public void setInitialStepSize(double)
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double d0, $d1, $d2;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $b1 = d0 cmpl $d2;

        if $b1 <= 0 goto label2;

     label1:
        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = -1.0;

        goto label3;

     label2:
        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep> = d0;

     label3:
        return;
    }

    protected void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1;
        double[] r2, r3, $r4, $r5, $r6, $r11, $r13, $r18;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.commons.math.ode.IntegratorException $r7, $r14;
        java.lang.Object[] $r8, $r15;
        org.apache.commons.math.exception.util.LocalizedFormats $r9, $r16;
        java.lang.Integer $r10, $r12, $r17, $r19;
        org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations $r20;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>(r1, d0, r2, d1, r3);

        $z0 = r1 instanceof org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;

        if $z0 == 0 goto label1;

        $r20 = (org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations) r1;

        $i9 = interfaceinvoke $r20.<org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations: int getMainSetDimension()>();

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension> = $i9;

        goto label2;

     label1:
        $i0 = interfaceinvoke r1.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: int getDimension()>();

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension> = $i0;

     label2:
        $r4 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        if $r4 == null goto label3;

        $r13 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        $i6 = lengthof $r13;

        $i5 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        if $i6 == $i5 goto label3;

        $r14 = new org.apache.commons.math.ode.IntegratorException;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r15 = newarray (java.lang.Object)[2];

        $i7 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r15[0] = $r17;

        $r18 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecAbsoluteTolerance>;

        $i8 = lengthof $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r15[1] = $r19;

        specialinvoke $r14.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label3:
        $r5 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        if $r5 == null goto label4;

        $r6 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        $i2 = lengthof $r6;

        $i1 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        if $i2 == $i1 goto label4;

        $r7 = new org.apache.commons.math.ode.IntegratorException;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r8 = newarray (java.lang.Object)[2];

        $i3 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: int mainSetDimension>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r10;

        $r11 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double[] vecRelativeTolerance>;

        $i4 = lengthof $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r8[1] = $r12;

        specialinvoke $r7.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r7;

     label4:
        return;
    }

    public double initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        boolean z0;
        int i0, $i2, $i4, i9, i10, $i11, i12;
        double[] r2, r3, r4, r5, r6;
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, d36, d37, d38, d39, $d40, d41, d42, d43, d44, d45, $d46, d47, d48;
        byte $b1, $b3, $b5, $b6, $b7, $b8;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: double[];

        d0 := @parameter4: double;

        r3 := @parameter5: double[];

        r4 := @parameter6: double[];

        r5 := @parameter7: double[];

        r6 := @parameter8: double[];

        $d2 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        $b1 = $d2 cmpl 0.0;

        if $b1 <= 0 goto label03;

        if z0 == 0 goto label01;

        $d35 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        goto label02;

     label01:
        $d34 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double initialStep>;

        $d35 = neg $d34;

     label02:
        return $d35;

     label03:
        d36 = 0.0;

        d37 = 0.0;

        i9 = 0;

     label04:
        $i2 = lengthof r2;

        if i9 >= $i2 goto label05;

        $d29 = r3[i9];

        $d28 = r2[i9];

        d38 = $d29 / $d28;

        $d30 = d38 * d38;

        d36 = d36 + $d30;

        $d32 = r4[i9];

        $d31 = r2[i9];

        d39 = $d32 / $d31;

        $d33 = d39 * d39;

        d37 = d37 + $d33;

        i9 = i9 + 1;

        goto label04;

     label05:
        $b3 = d36 cmpg 1.0E-10;

        if $b3 < 0 goto label06;

        $b8 = d37 cmpg 1.0E-10;

        if $b8 >= 0 goto label07;

     label06:
        $d40 = 1.0E-6;

        goto label08;

     label07:
        $d26 = d36 / d37;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d26);

        $d40 = 0.01 * $d27;

     label08:
        d41 = $d40;

        if z0 != 0 goto label09;

        d41 = neg $d40;

     label09:
        i10 = 0;

     label10:
        $i11 = lengthof r3;

        if i10 >= $i11 goto label11;

        $d24 = r3[i10];

        $d22 = r4[i10];

        $d23 = d41 * $d22;

        $d25 = $d24 + $d23;

        r5[i10] = $d25;

        i10 = i10 + 1;

        goto label10;

     label11:
        $d3 = d0 + d41;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: void computeDerivatives(double,double[],double[])>($d3, r5, r6);

        d42 = 0.0;

        i12 = 0;

     label12:
        $i4 = lengthof r2;

        if i12 >= $i4 goto label13;

        $d18 = r6[i12];

        $d17 = r4[i12];

        $d20 = $d18 - $d17;

        $d19 = r2[i12];

        d43 = $d20 / $d19;

        $d21 = d43 * d43;

        d42 = d42 + $d21;

        i12 = i12 + 1;

        goto label12;

     label13:
        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d42);

        d44 = $d4 / d41;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d37);

        d45 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d5, d44);

        $b5 = d45 cmpg 1.0E-15;

        if $b5 >= 0 goto label14;

        $d15 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d41);

        $d16 = 0.001 * $d15;

        $d46 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(1.0E-6, $d16);

        goto label15;

     label14:
        $d8 = 0.01 / d45;

        $d6 = (double) i0;

        $d7 = 1.0 / $d6;

        $d46 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d8, $d7);

     label15:
        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d41);

        $d10 = 100.0 * $d9;

        d47 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>($d10, $d46);

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d12 = 1.0E-12 * $d11;

        d48 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d47, $d12);

        $d13 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMinStep()>();

        $b6 = d48 cmpg $d13;

        if $b6 >= 0 goto label16;

        d48 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMinStep()>();

     label16:
        $d14 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMaxStep()>();

        $b7 = d48 cmpl $d14;

        if $b7 <= 0 goto label17;

        d48 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double getMaxStep()>();

     label17:
        if z0 != 0 goto label18;

        d48 = neg d48;

     label18:
        return d48;
    }

    protected double filterStep(double, boolean, boolean) throws org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, $d11;
        boolean z0, z1;
        byte $b0, $b1, $b2;
        org.apache.commons.math.ode.IntegratorException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r5;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        d10 = d0;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d2 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label4;

        if z1 == 0 goto label3;

        if z0 == 0 goto label1;

        $d11 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        goto label2;

     label1:
        $d9 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $d11 = neg $d9;

     label2:
        d10 = $d11;

        goto label4;

     label3:
        $r1 = new org.apache.commons.math.ode.IntegratorException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION>;

        $r2 = newarray (java.lang.Object)[2];

        $d7 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $r2[0] = $r4;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r2[1] = $r5;

        specialinvoke $r1.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label4:
        $d3 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $b1 = d10 cmpl $d3;

        if $b1 <= 0 goto label5;

        d10 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        goto label6;

     label5:
        $d4 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $d5 = neg $d4;

        $b2 = d10 cmpg $d5;

        if $b2 >= 0 goto label6;

        $d6 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        d10 = neg $d6;

     label6:
        return d10;
    }

    public abstract double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException;

    public double getCurrentStepStart()
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepStart>;

        return $d0;
    }

    protected void resetInternalState()
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepStart> = #NaN;

        $d1 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        $d2 = $d1 * $d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d2);

        r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double stepSize> = $d3;

        return;
    }

    public double getMinStep()
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double minStep>;

        return $d0;
    }

    public double getMaxStep()
    {
        org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: double maxStep>;

        return $d0;
    }
}
