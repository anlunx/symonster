public abstract class org.jcp.xml.dsig.internal.dom.ApacheTransform extends javax.xml.crypto.dsig.TransformService
{
    private static java.util.logging.Logger log;
    private com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform;
    protected org.w3c.dom.Document ownerDoc;
    protected org.w3c.dom.Element transformElem;
    protected javax.xml.crypto.dsig.spec.TransformParameterSpec params;

    public void <init>()
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        specialinvoke r0.<javax.xml.crypto.dsig.TransformService: void <init>()>();

        return;
    }

    public final java.security.spec.AlgorithmParameterSpec getParameterSpec()
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.dsig.spec.TransformParameterSpec $r1;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        $r1 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: javax.xml.crypto.dsig.spec.TransformParameterSpec params>;

        return $r1;
    }

    public void init(javax.xml.crypto.XMLStructure, javax.xml.crypto.XMLCryptoContext) throws java.security.InvalidAlgorithmParameterException
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.XMLStructure r1;
        javax.xml.crypto.XMLCryptoContext r2;
        javax.xml.crypto.dom.DOMStructure $r3;
        org.w3c.dom.Node $r4;
        org.w3c.dom.Element $r5, $r6;
        org.w3c.dom.Document $r7;
        boolean $z0;
        java.lang.ClassCastException $r8;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: javax.xml.crypto.XMLStructure;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        if r2 == null goto label1;

        $z0 = r2 instanceof javax.xml.crypto.dom.DOMCryptoContext;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.ClassCastException;

        specialinvoke $r8.<java.lang.ClassCastException: void <init>(java.lang.String)>("context must be of type DOMCryptoContext");

        throw $r8;

     label1:
        $r3 = (javax.xml.crypto.dom.DOMStructure) r1;

        $r4 = virtualinvoke $r3.<javax.xml.crypto.dom.DOMStructure: org.w3c.dom.Node getNode()>();

        $r5 = (org.w3c.dom.Element) $r4;

        r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem> = $r5;

        $r6 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem>;

        $r7 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Document getOwnerDocument(org.w3c.dom.Node)>($r6);

        r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Document ownerDoc> = $r7;

        return;
    }

    public void marshalParams(javax.xml.crypto.XMLStructure, javax.xml.crypto.XMLCryptoContext) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.XMLStructure r1;
        javax.xml.crypto.XMLCryptoContext r2;
        javax.xml.crypto.dom.DOMStructure $r3;
        org.w3c.dom.Node $r4;
        org.w3c.dom.Element $r5, $r6;
        org.w3c.dom.Document $r7;
        boolean $z0;
        java.lang.ClassCastException $r8;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: javax.xml.crypto.XMLStructure;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        if r2 == null goto label1;

        $z0 = r2 instanceof javax.xml.crypto.dom.DOMCryptoContext;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.ClassCastException;

        specialinvoke $r8.<java.lang.ClassCastException: void <init>(java.lang.String)>("context must be of type DOMCryptoContext");

        throw $r8;

     label1:
        $r3 = (javax.xml.crypto.dom.DOMStructure) r1;

        $r4 = virtualinvoke $r3.<javax.xml.crypto.dom.DOMStructure: org.w3c.dom.Node getNode()>();

        $r5 = (org.w3c.dom.Element) $r4;

        r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem> = $r5;

        $r6 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem>;

        $r7 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Document getOwnerDocument(org.w3c.dom.Node)>($r6);

        r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Document ownerDoc> = $r7;

        return;
    }

    public javax.xml.crypto.Data transform(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.Data r1, $r4;
        javax.xml.crypto.XMLCryptoContext r2;
        java.io.OutputStream $r3;
        java.lang.NullPointerException $r5;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("data must not be null");

        throw $r5;

     label1:
        $r3 = (java.io.OutputStream) null;

        $r4 = specialinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: javax.xml.crypto.Data transformIt(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)>(r1, r2, $r3);

        return $r4;
    }

    public javax.xml.crypto.Data transform(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext, java.io.OutputStream) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.Data r1, $r4;
        javax.xml.crypto.XMLCryptoContext r2;
        java.io.OutputStream r3;
        java.lang.NullPointerException $r5, $r6;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.io.OutputStream;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("data must not be null");

        throw $r6;

     label1:
        if r3 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("output stream must not be null");

        throw $r5;

     label2:
        $r4 = specialinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: javax.xml.crypto.Data transformIt(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream)>(r1, r2, r3);

        return $r4;
    }

    private javax.xml.crypto.Data transformIt(javax.xml.crypto.Data, javax.xml.crypto.XMLCryptoContext, java.io.OutputStream) throws javax.xml.crypto.dsig.TransformException
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        javax.xml.crypto.Data r1;
        javax.xml.crypto.XMLCryptoContext r2;
        java.io.OutputStream r3;
        org.w3c.dom.Document $r4, $r43;
        com.sun.org.apache.xml.internal.security.transforms.Transform $r5, $r11, $r14, $r42, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.logging.Level $r6, $r15, $r17, $r22, $r26, $r28, $r30, $r33, $r50, $r54;
        java.util.logging.Logger $r7, $r16, $r18, $r23, $r27, $r29, $r31, $r34, $r51, $r53;
        com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput $r8, $r21, $r24, r73, r77;
        javax.xml.crypto.OctetStreamData $r9;
        java.io.InputStream $r10;
        org.jcp.xml.dsig.internal.dom.ApacheNodeSetData $r12;
        org.jcp.xml.dsig.internal.dom.ApacheOctetStreamData $r13;
        javax.xml.crypto.NodeSetData $r19;
        java.util.Iterator $r20;
        org.w3c.dom.Node $r25;
        org.jcp.xml.dsig.internal.dom.ApacheData $r32;
        java.lang.String $r35, $r41, $r44, $r49, $r56, $r58, $r64, $r66, r72;
        javax.xml.crypto.dsig.TransformException $r36, $r59, $r61, $r68, $r70;
        java.lang.StringBuilder $r37, $r38, $r39, $r40, $r52, $r55, $r57, $r62, $r63, $r65;
        org.w3c.dom.Element $r45, $r48;
        org.w3c.dom.NodeList $r46;
        java.lang.Exception $r60, $r67, $r69;
        org.jcp.xml.dsig.internal.dom.DOMSubTreeData r74;
        java.util.Set r75;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: javax.xml.crypto.Data;

        r2 := @parameter1: javax.xml.crypto.XMLCryptoContext;

        r3 := @parameter2: java.io.OutputStream;

        $r4 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Document ownerDoc>;

        if $r4 != null goto label01;

        $r59 = new javax.xml.crypto.dsig.TransformException;

        specialinvoke $r59.<javax.xml.crypto.dsig.TransformException: void <init>(java.lang.String)>("transform must be marshalled");

        throw $r59;

     label01:
        $r5 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform>;

        if $r5 != null goto label05;

     label02:
        $r42 = new com.sun.org.apache.xml.internal.security.transforms.Transform;

        $r43 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Document ownerDoc>;

        $r44 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: java.lang.String getAlgorithm()>();

        $r45 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem>;

        $r46 = interfaceinvoke $r45.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        specialinvoke $r42.<com.sun.org.apache.xml.internal.security.transforms.Transform: void <init>(org.w3c.dom.Document,java.lang.String,org.w3c.dom.NodeList)>($r43, $r44, $r46);

        r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform> = $r42;

        $r47 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform>;

        $r48 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: org.w3c.dom.Element transformElem>;

        $r49 = interfaceinvoke r2.<javax.xml.crypto.XMLCryptoContext: java.lang.String getBaseURI()>();

        virtualinvoke $r47.<com.sun.org.apache.xml.internal.security.transforms.Transform: void setElement(org.w3c.dom.Element,java.lang.String)>($r48, $r49);

        $r51 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r50 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z12 = virtualinvoke $r51.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r50);

        if $z12 == 0 goto label03;

        $r53 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r54 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created transform for algorithm: ");

        $r56 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: java.lang.String getAlgorithm()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r54, $r58);

     label03:
        goto label05;

     label04:
        $r60 := @caughtexception;

        $r61 = new javax.xml.crypto.dsig.TransformException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find Transform for: ");

        $r64 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: java.lang.String getAlgorithm()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<javax.xml.crypto.dsig.TransformException: void <init>(java.lang.String,java.lang.Throwable)>($r66, $r60);

        throw $r61;

     label05:
        $z0 = staticinvoke <org.jcp.xml.dsig.internal.dom.Utils: boolean secureValidation(javax.xml.crypto.XMLCryptoContext)>(r2);

        if $z0 == 0 goto label06;

        r72 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: java.lang.String getAlgorithm()>();

        $r35 = "http://www.w3.org/TR/1999/REC-xslt-19991116";

        $z11 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z11 == 0 goto label06;

        $r36 = new javax.xml.crypto.dsig.TransformException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transform ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is forbidden when secure validation is enabled");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<javax.xml.crypto.dsig.TransformException: void <init>(java.lang.String)>($r41);

        throw $r36;

     label06:
        $z1 = r1 instanceof org.jcp.xml.dsig.internal.dom.ApacheData;

        if $z1 == 0 goto label08;

        $r31 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r30 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z10 = virtualinvoke $r31.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r30);

        if $z10 == 0 goto label07;

        $r34 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r33 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r34.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r33, "ApacheData = true");

     label07:
        $r32 = (org.jcp.xml.dsig.internal.dom.ApacheData) r1;

        r73 = interfaceinvoke $r32.<org.jcp.xml.dsig.internal.dom.ApacheData: com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput getXMLSignatureInput()>();

        goto label16;

     label08:
        $z2 = r1 instanceof javax.xml.crypto.NodeSetData;

        if $z2 == 0 goto label12;

        $r18 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r17 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z6 = virtualinvoke $r18.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r17);

        if $z6 == 0 goto label09;

        $r29 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r28 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r29.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r28, "isNodeSet() = true");

     label09:
        $z7 = r1 instanceof org.jcp.xml.dsig.internal.dom.DOMSubTreeData;

        if $z7 == 0 goto label11;

        $r23 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r22 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z8 = virtualinvoke $r23.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r22);

        if $z8 == 0 goto label10;

        $r27 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r26 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r27.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r26, "DOMSubTreeData = true");

     label10:
        r74 = (org.jcp.xml.dsig.internal.dom.DOMSubTreeData) r1;

        $r24 = new com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;

        $r25 = virtualinvoke r74.<org.jcp.xml.dsig.internal.dom.DOMSubTreeData: org.w3c.dom.Node getRoot()>();

        specialinvoke $r24.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: void <init>(org.w3c.dom.Node)>($r25);

        r73 = $r24;

        $z9 = virtualinvoke r74.<org.jcp.xml.dsig.internal.dom.DOMSubTreeData: boolean excludeComments()>();

        virtualinvoke $r24.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: void setExcludeComments(boolean)>($z9);

        goto label16;

     label11:
        $r19 = (javax.xml.crypto.NodeSetData) r1;

        $r20 = interfaceinvoke $r19.<javax.xml.crypto.NodeSetData: java.util.Iterator iterator()>();

        r75 = staticinvoke <org.jcp.xml.dsig.internal.dom.Utils: java.util.Set toNodeSet(java.util.Iterator)>($r20);

        $r21 = new com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;

        specialinvoke $r21.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: void <init>(java.util.Set)>(r75);

        r73 = $r21;

        goto label16;

     label12:
        $r7 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z3 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r6);

        if $z3 == 0 goto label13;

        $r16 = <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r15, "isNodeSet() = false");

     label13:
        $r8 = new com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput;

        $r9 = (javax.xml.crypto.OctetStreamData) r1;

        $r10 = virtualinvoke $r9.<javax.xml.crypto.OctetStreamData: java.io.InputStream getOctetStream()>();

        specialinvoke $r8.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: void <init>(java.io.InputStream)>($r10);

        r73 = $r8;

     label14:
        goto label16;

     label15:
        $r67 := @caughtexception;

        $r68 = new javax.xml.crypto.dsig.TransformException;

        specialinvoke $r68.<javax.xml.crypto.dsig.TransformException: void <init>(java.lang.Throwable)>($r67);

        throw $r68;

     label16:
        if r3 == null goto label18;

        $r14 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform>;

        r77 = virtualinvoke $r14.<com.sun.org.apache.xml.internal.security.transforms.Transform: com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput performTransform(com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput,java.io.OutputStream)>(r73, r3);

        $z4 = virtualinvoke r77.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: boolean isNodeSet()>();

        if $z4 != 0 goto label19;

        $z5 = virtualinvoke r77.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: boolean isElement()>();

        if $z5 != 0 goto label19;

     label17:
        return null;

     label18:
        $r11 = r0.<org.jcp.xml.dsig.internal.dom.ApacheTransform: com.sun.org.apache.xml.internal.security.transforms.Transform apacheTransform>;

        r77 = virtualinvoke $r11.<com.sun.org.apache.xml.internal.security.transforms.Transform: com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput performTransform(com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput)>(r73);

     label19:
        $z13 = virtualinvoke r77.<com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput: boolean isOctetStream()>();

        if $z13 == 0 goto label21;

        $r13 = new org.jcp.xml.dsig.internal.dom.ApacheOctetStreamData;

        specialinvoke $r13.<org.jcp.xml.dsig.internal.dom.ApacheOctetStreamData: void <init>(com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput)>(r77);

     label20:
        return $r13;

     label21:
        $r12 = new org.jcp.xml.dsig.internal.dom.ApacheNodeSetData;

        specialinvoke $r12.<org.jcp.xml.dsig.internal.dom.ApacheNodeSetData: void <init>(com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput)>(r77);

     label22:
        return $r12;

     label23:
        $r69 := @caughtexception;

        $r70 = new javax.xml.crypto.dsig.TransformException;

        specialinvoke $r70.<javax.xml.crypto.dsig.TransformException: void <init>(java.lang.Throwable)>($r69);

        throw $r70;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label23;
        catch java.lang.Exception from label18 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    public final boolean isFeatureSupported(java.lang.String)
    {
        org.jcp.xml.dsig.internal.dom.ApacheTransform r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: org.jcp.xml.dsig.internal.dom.ApacheTransform;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        staticinvoke <com.sun.org.apache.xml.internal.security.Init: void init()>();

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("org.jcp.xml.dsig.internal.dom");

        <org.jcp.xml.dsig.internal.dom.ApacheTransform: java.util.logging.Logger log> = $r0;

        return;
    }
}
