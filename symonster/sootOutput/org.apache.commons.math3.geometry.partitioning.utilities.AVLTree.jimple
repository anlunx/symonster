public class org.apache.commons.math3.geometry.partitioning.utilities.AVLTree extends java.lang.Object
{
    private org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top;

    public void <init>()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = null;

        return;
    }

    public void insert(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        if r1 == null goto label2;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r2 != null goto label1;

        $r4 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void <init>(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree,java.lang.Comparable,org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r0, r1, null);

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = $r4;

        goto label2;

     label1:
        $r3 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        virtualinvoke $r3.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: boolean insert(java.lang.Comparable)>(r1);

     label2:
        return;
    }

    public boolean delete(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r2, $r3;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        if r1 == null goto label4;

        r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotSmaller(java.lang.Comparable)>(r1);

     label1:
        if r4 == null goto label4;

        $r2 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r4);

        if $r2 != r1 goto label2;

        virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: void delete()>();

        return 1;

     label2:
        $r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r4);

        $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 <= 0 goto label3;

        return 0;

     label3:
        r4 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNext()>();

        goto label1;

     label4:
        return 0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: int size()>();

     label2:
        return $i0;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()>();

     label2:
        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()>();

     label2:
        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotSmaller(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r2;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r3, $r4, r5, r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        r5 = null;

        r6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

     label1:
        if r6 == null goto label5;

        $r2 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        $i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 >= 0 goto label3;

        $r4 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        if $r4 != null goto label2;

        return r5;

     label2:
        r6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        goto label1;

     label3:
        r5 = r6;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        if $r3 != null goto label4;

        return r6;

     label4:
        r6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        goto label1;

     label5:
        return null;
    }

    public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotLarger(java.lang.Comparable)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        java.lang.Comparable r1, $r2;
        int $i0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node $r3, $r4, r5, r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter0: java.lang.Comparable;

        r5 = null;

        r6 = r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top>;

     label1:
        if r6 == null goto label5;

        $r2 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: java.lang.Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        $i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i0 <= 0 goto label3;

        $r4 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        if $r4 != null goto label2;

        return r5;

     label2:
        r6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        goto label1;

     label3:
        r5 = r6;

        $r3 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        if $r3 != null goto label4;

        return r6;

     label4:
        r6 = staticinvoke <org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)>(r6);

        goto label1;

     label5:
        return null;
    }

    static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$302(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node)
    {
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree r0;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree;

        r1 := @parameter1: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node;

        r0.<org.apache.commons.math3.geometry.partitioning.utilities.AVLTree: org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node top> = r1;

        return r1;
    }
}
