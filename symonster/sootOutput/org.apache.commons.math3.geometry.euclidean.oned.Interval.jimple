public class org.apache.commons.math3.geometry.euclidean.oned.Interval extends java.lang.Object
{
    private final double lower;
    private final double upper;

    public void <init>(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower> = d0;

        r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper> = d1;

        return;
    }

    public double getInf()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower>;

        return $d0;
    }

    public double getLower()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        return $d0;
    }

    public double getSup()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper>;

        return $d0;
    }

    public double getUpper()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        return $d0;
    }

    public double getSize()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    public double getLength()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSize()>();

        return $d0;
    }

    public double getBarycenter()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper>;

        $d2 = $d1 + $d0;

        $d3 = 0.5 * $d2;

        return $d3;
    }

    public double getMidPoint()
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getBarycenter()>();

        return $d0;
    }

    public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(double, double)
    {
        org.apache.commons.math3.geometry.euclidean.oned.Interval r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.Interval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower>;

        $d3 = $d2 - d1;

        $b0 = d0 cmpg $d3;

        if $b0 < 0 goto label1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper>;

        $d5 = $d4 + d1;

        $b1 = d0 cmpl $d5;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        return $r1;

     label2:
        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double lower>;

        $d7 = $d6 + d1;

        $b2 = d0 cmpl $d7;

        if $b2 <= 0 goto label3;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double upper>;

        $d9 = $d8 - d1;

        $b3 = d0 cmpg $d9;

        if $b3 >= 0 goto label3;

        $r3 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        return $r3;

     label3:
        $r2 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location BOUNDARY>;

        return $r2;
    }
}
