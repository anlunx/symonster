public class org.apache.commons.math.analysis.solvers.LaguerreSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
{
    private final org.apache.commons.math.analysis.polynomials.PolynomialFunction p;

    public void <init>(org.apache.commons.math.analysis.UnivariateRealFunction) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        boolean $z0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r5;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(org.apache.commons.math.analysis.UnivariateRealFunction,int,double)>(r1, 100, 1.0E-6);

        $z0 = r1 instanceof org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.commons.math.analysis.polynomials.PolynomialFunction) r1;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.analysis.polynomials.PolynomialFunction p> = $r5;

        goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FUNCTION_NOT_POLYNOMIAL>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label2:
        return;
    }

    public void <init>()
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(int,double)>(100, 1.0E-6);

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.analysis.polynomials.PolynomialFunction p> = null;

        return;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction getPolynomialFunction()
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r1, $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        $r1 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r2 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.analysis.polynomials.PolynomialFunction p>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] getCoefficients()>();

        specialinvoke $r1.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r3);

        return $r1;
    }

    public double solve(double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        double d0, d1, $d2;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.analysis.polynomials.PolynomialFunction p>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($r1, d0, d1);

        return $d2;
    }

    public double solve(double, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        double d0, d1, d2, $d3;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.analysis.polynomials.PolynomialFunction p>;

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>($r1, d0, d1, d2);

        return $d3;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void setMaximalIterationCount(int)>(i0);

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>(r1, d0, d1, d2);

        return $d3;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $d3 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        $b0 = $d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d0;

     label1:
        $d4 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $b1 = $d4 cmpl 0.0;

        if $b1 != 0 goto label2;

        return d1;

     label2:
        $d5 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d2);

        $b2 = $d5 cmpl 0.0;

        if $b2 != 0 goto label3;

        return d2;

     label3:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void verifySequence(double,double,double)>(d0, d2, d1);

        $z0 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean isBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d2, r1);

        if $z0 == 0 goto label4;

        $d7 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d2);

        return $d7;

     label4:
        $d6 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d2, d1);

        return $d6;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void setMaximalIterationCount(int)>(i0);

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d1);

        return $d2;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[] r2;
        org.apache.commons.math.complex.Complex[] r3, r5;
        org.apache.commons.math.complex.Complex r4, $r7, $r9, $r10, $r11;
        boolean $z0, $z1, $z2;
        byte $b0, $b1;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r6;
        int $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.commons.math.ConvergenceException $r8;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $z0 = r1 instanceof org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        if $z0 != 0 goto label1;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FUNCTION_NOT_POLYNOMIAL>;

        $r12 = newarray (java.lang.Object)[0];

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r14;

     label1:
        $d2 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label2;

        return d0;

     label2:
        $d3 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $b1 = $d3 cmpl 0.0;

        if $b1 != 0 goto label3;

        return d1;

     label3:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        $r6 = (org.apache.commons.math.analysis.polynomials.PolynomialFunction) r1;

        r2 = virtualinvoke $r6.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double[] getCoefficients()>();

        $i2 = lengthof r2;

        r3 = newarray (org.apache.commons.math.complex.Complex)[$i2];

        i7 = 0;

     label4:
        $i3 = lengthof r2;

        if i7 >= $i3 goto label5;

        $r11 = new org.apache.commons.math.complex.Complex;

        $d10 = r2[i7];

        specialinvoke $r11.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d10, 0.0);

        r3[i7] = $r11;

        i7 = i7 + 1;

        goto label4;

     label5:
        $r7 = new org.apache.commons.math.complex.Complex;

        $d4 = d0 + d1;

        $d5 = 0.5 * $d4;

        specialinvoke $r7.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d5, 0.0);

        r4 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.complex.Complex solve(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex)>(r3, $r7);

        $z1 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean isRootOK(double,double,org.apache.commons.math.complex.Complex)>(d0, d1, r4);

        if $z1 == 0 goto label6;

        $d8 = virtualinvoke r4.<org.apache.commons.math.complex.Complex: double getReal()>();

        $i6 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount>;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void setResult(double,int)>($d8, $i6);

        $d9 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double result>;

        return $d9;

     label6:
        r5 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.complex.Complex[] solveAll(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex)>(r3, $r7);

        i8 = 0;

     label7:
        $i4 = lengthof r5;

        if i8 >= $i4 goto label9;

        $r9 = r5[i8];

        $z2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean isRootOK(double,double,org.apache.commons.math.complex.Complex)>(d0, d1, $r9);

        if $z2 == 0 goto label8;

        $r10 = r5[i8];

        $d6 = virtualinvoke $r10.<org.apache.commons.math.complex.Complex: double getReal()>();

        $i5 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount>;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: void setResult(double,int)>($d6, $i5);

        $d7 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double result>;

        return $d7;

     label8:
        i8 = i8 + 1;

        goto label7;

     label9:
        $r8 = new org.apache.commons.math.ConvergenceException;

        specialinvoke $r8.<org.apache.commons.math.ConvergenceException: void <init>()>();

        throw $r8;
    }

    protected boolean isRootOK(double, double, org.apache.commons.math.complex.Complex)
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        org.apache.commons.math.complex.Complex r1;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math.complex.Complex;

        $d3 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double relativeAccuracy>;

        $d4 = virtualinvoke r1.<org.apache.commons.math.complex.Complex: double abs()>();

        $d6 = $d3 * $d4;

        $d5 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double absoluteAccuracy>;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d6, $d5);

        $d7 = virtualinvoke r1.<org.apache.commons.math.complex.Complex: double getReal()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean isSequence(double,double,double)>(d0, $d7, d1);

        if $z0 == 0 goto label2;

        $d8 = virtualinvoke r1.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d8);

        $b0 = $d9 cmpg d2;

        if $b0 <= 0 goto label1;

        $d10 = virtualinvoke r1.<org.apache.commons.math.complex.Complex: double abs()>();

        $d11 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double functionValueAccuracy>;

        $b1 = $d10 cmpg $d11;

        if $b1 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public org.apache.commons.math.complex.Complex[] solveAll(double[], double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        double[] r1;
        double d0, $d1;
        org.apache.commons.math.complex.Complex[] r2, $r5;
        int $i0, $i1, i2;
        org.apache.commons.math.complex.Complex $r4, $r6;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math.complex.Complex)[$i0];

        $r4 = new org.apache.commons.math.complex.Complex;

        specialinvoke $r4.<org.apache.commons.math.complex.Complex: void <init>(double,double)>(d0, 0.0);

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r6 = new org.apache.commons.math.complex.Complex;

        $d1 = r1[i2];

        specialinvoke $r6.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d1, 0.0);

        r2[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.complex.Complex[] solveAll(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex)>(r2, $r4);

        return $r5;
    }

    public org.apache.commons.math.complex.Complex[] solveAll(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.complex.Complex[] r1, r3, r4, r13;
        org.apache.commons.math.complex.Complex r2, $r5, $r6, $r7, $r8, r14, r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        java.lang.Object[] $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        r2 := @parameter1: org.apache.commons.math.complex.Complex;

        $i1 = lengthof r1;

        i0 = $i1 - 1;

        i9 = 0;

        if i0 >= 1 goto label1;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NON_POSITIVE_POLYNOMIAL_DEGREE>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r12;

     label1:
        $i2 = i0 + 1;

        r3 = newarray (org.apache.commons.math.complex.Complex)[$i2];

        i10 = 0;

     label2:
        if i10 > i0 goto label3;

        $r8 = r1[i10];

        r3[i10] = $r8;

        i10 = i10 + 1;

        goto label2;

     label3:
        r13 = newarray (org.apache.commons.math.complex.Complex)[i0];

        i11 = 0;

     label4:
        if i11 >= i0 goto label7;

        $i3 = i0 - i11;

        $i4 = $i3 + 1;

        r4 = newarray (org.apache.commons.math.complex.Complex)[$i4];

        $i5 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, $i5);

        $r5 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: org.apache.commons.math.complex.Complex solve(org.apache.commons.math.complex.Complex[],org.apache.commons.math.complex.Complex)>(r4, r2);

        r13[i11] = $r5;

        $i6 = i0 - i11;

        r14 = r3[$i6];

        $i7 = i0 - i11;

        i12 = $i7 - 1;

     label5:
        if i12 < 0 goto label6;

        r15 = r3[i12];

        r3[i12] = r14;

        $r6 = r13[i11];

        $r7 = virtualinvoke r14.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r6);

        r14 = virtualinvoke r15.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r7);

        i12 = i12 + -1;

        goto label5;

     label6:
        $i8 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount>;

        i9 = i9 + $i8;

        i11 = i11 + 1;

        goto label4;

     label7:
        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean resultComputed> = 1;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount> = i9;

        return r13;
    }

    public org.apache.commons.math.complex.Complex solve(org.apache.commons.math.complex.Complex[], org.apache.commons.math.complex.Complex) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.LaguerreSolver r0;
        org.apache.commons.math.complex.Complex[] r1;
        org.apache.commons.math.complex.Complex r2, r5, r6, r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, $r39;
        int i0, $i1, $i2, $i3, $i4, i8, i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        org.apache.commons.math.MaxIterationsExceededException $r11;
        byte $b5, $b6, $b7;
        boolean $z0;
        java.lang.Object[] $r25;
        org.apache.commons.math.exception.util.LocalizedFormats $r26;
        java.lang.Integer $r27;
        java.lang.IllegalArgumentException $r28;

        r0 := @this: org.apache.commons.math.analysis.solvers.LaguerreSolver;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        r2 := @parameter1: org.apache.commons.math.complex.Complex;

        $i1 = lengthof r1;

        i0 = $i1 - 1;

        if i0 >= 1 goto label01;

        $r26 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NON_POSITIVE_POLYNOMIAL_DEGREE>;

        $r25 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r25[0] = $r27;

        $r28 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r26, $r25);

        throw $r28;

     label01:
        $r8 = new org.apache.commons.math.complex.Complex;

        $d0 = (double) i0;

        specialinvoke $r8.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d0, 0.0);

        $r9 = new org.apache.commons.math.complex.Complex;

        $i2 = i0 - 1;

        $d1 = (double) $i2;

        specialinvoke $r9.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d1, 0.0);

        i8 = 1;

        r29 = r2;

        $r10 = new org.apache.commons.math.complex.Complex;

        specialinvoke $r10.<org.apache.commons.math.complex.Complex: void <init>(double,double)>(#Infinity, #Infinity);

        r30 = $r10;

     label02:
        $i3 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int maximalIterationCount>;

        if i8 > $i3 goto label11;

        r31 = r1[i0];

        r32 = <org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex ZERO>;

        r33 = <org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex ZERO>;

        i9 = i0 - 1;

     label03:
        if i9 < 0 goto label04;

        $r21 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>(r33);

        r33 = virtualinvoke r32.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r21);

        $r22 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>(r32);

        r32 = virtualinvoke r31.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r22);

        $r23 = r1[i9];

        $r24 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>(r31);

        r31 = virtualinvoke $r23.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r24);

        i9 = i9 + -1;

        goto label03;

     label04:
        $r12 = new org.apache.commons.math.complex.Complex;

        specialinvoke $r12.<org.apache.commons.math.complex.Complex: void <init>(double,double)>(2.0, 0.0);

        r34 = virtualinvoke r33.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r12);

        $d2 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double relativeAccuracy>;

        $d3 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: double abs()>();

        $d5 = $d2 * $d3;

        $d4 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double absoluteAccuracy>;

        d13 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d5, $d4);

        $r13 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>(r30);

        $d6 = virtualinvoke $r13.<org.apache.commons.math.complex.Complex: double abs()>();

        $b5 = $d6 cmpg d13;

        if $b5 > 0 goto label05;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean resultComputed> = 1;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount> = i8;

        return r29;

     label05:
        $d7 = virtualinvoke r31.<org.apache.commons.math.complex.Complex: double abs()>();

        $d8 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double functionValueAccuracy>;

        $b6 = $d7 cmpg $d8;

        if $b6 > 0 goto label06;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: boolean resultComputed> = 1;

        r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int iterationCount> = i8;

        return r29;

     label06:
        r35 = virtualinvoke r32.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex)>(r31);

        r36 = virtualinvoke r35.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>(r35);

        $r14 = virtualinvoke r34.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex)>(r31);

        r37 = virtualinvoke r36.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r14);

        $r15 = virtualinvoke $r8.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>(r37);

        $r16 = virtualinvoke $r15.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>(r36);

        r38 = virtualinvoke $r9.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r16);

        r5 = virtualinvoke r38.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex sqrt()>();

        r6 = virtualinvoke r35.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>(r5);

        r7 = virtualinvoke r35.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>(r5);

        $d9 = virtualinvoke r6.<org.apache.commons.math.complex.Complex: double abs()>();

        $d10 = virtualinvoke r7.<org.apache.commons.math.complex.Complex: double abs()>();

        $b7 = $d9 cmpl $d10;

        if $b7 <= 0 goto label07;

        $r39 = r6;

        goto label08;

     label07:
        $r39 = r7;

     label08:
        $r17 = new org.apache.commons.math.complex.Complex;

        specialinvoke $r17.<org.apache.commons.math.complex.Complex: void <init>(double,double)>(0.0, 0.0);

        $z0 = virtualinvoke $r39.<org.apache.commons.math.complex.Complex: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label09;

        $r19 = new org.apache.commons.math.complex.Complex;

        $d12 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double absoluteAccuracy>;

        $d11 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: double absoluteAccuracy>;

        specialinvoke $r19.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d12, $d11);

        r29 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r19);

        $r20 = new org.apache.commons.math.complex.Complex;

        specialinvoke $r20.<org.apache.commons.math.complex.Complex: void <init>(double,double)>(#Infinity, #Infinity);

        r30 = $r20;

        goto label10;

     label09:
        r30 = r29;

        $r18 = virtualinvoke $r8.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex)>($r39);

        r29 = virtualinvoke r29.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r18);

     label10:
        i8 = i8 + 1;

        goto label02;

     label11:
        $r11 = new org.apache.commons.math.MaxIterationsExceededException;

        $i4 = r0.<org.apache.commons.math.analysis.solvers.LaguerreSolver: int maximalIterationCount>;

        specialinvoke $r11.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i4);

        throw $r11;
    }
}
