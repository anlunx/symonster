class org.apache.commons.math3.linear.BiDiagonalTransformer extends java.lang.Object
{
    private final double[][] householderVectors;
    private final double[] main;
    private final double[] secondary;
    private org.apache.commons.math3.linear.RealMatrix cachedU;
    private org.apache.commons.math3.linear.RealMatrix cachedB;
    private org.apache.commons.math3.linear.RealMatrix cachedV;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, i2, $i3;
        double[][] $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors> = $r2;

        $r3 = newarray (double)[i2];

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main> = $r3;

        $i3 = i2 - 1;

        $r4 = newarray (double)[$i3];

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary> = $r4;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU> = null;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB> = null;

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV> = null;

        if i0 < i1 goto label1;

        specialinvoke r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: void transformToUpperBiDiagonal()>();

        goto label2;

     label1:
        specialinvoke r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: void transformToLowerBiDiagonal()>();

     label2:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getU()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, i2, $i4, $i6, $i7, $i8, $i9, i11, i12, i13, i14, i15;
        byte b3, $b5, $b10;
        double[] r1, r3, $r7, $r8, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r20;
        double[][] r2, $r5, $r6, $r11, $r14, $r17;
        org.apache.commons.math3.linear.RealMatrix $r4, $r9, $r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU>;

        if $r4 != null goto label16;

        $r5 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r5;

        $r6 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r7 = $r6[0];

        i1 = lengthof $r7;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        i2 = lengthof $r8;

        if i0 < i1 goto label01;

        $b10 = 0;

        goto label02;

     label01:
        $b10 = 1;

     label02:
        b3 = $b10;

        if i0 < i1 goto label03;

        $r20 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        goto label04;

     label03:
        $r20 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

     label04:
        r1 = $r20;

        r2 = newmultiarray (double)[i0][i0];

        i11 = i0 - 1;

     label05:
        if i11 < i2 goto label06;

        $r19 = r2[i11];

        $r19[i11] = 1.0;

        i11 = i11 + -1;

        goto label05;

     label06:
        i12 = i2 - 1;

     label07:
        if i12 < b3 goto label14;

        $r11 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r3 = $r11[i12];

        $r12 = r2[i12];

        $r12[i12] = 1.0;

        $i4 = i12 - b3;

        $d0 = r3[$i4];

        $b5 = $d0 cmpl 0.0;

        if $b5 == 0 goto label13;

        i13 = i12;

     label08:
        if i13 >= i0 goto label13;

        d12 = 0.0;

        i14 = i12;

     label09:
        if i14 >= i0 goto label10;

        $r16 = r2[i14];

        $d10 = $r16[i13];

        $r17 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r18 = $r17[i14];

        $i9 = i12 - b3;

        $d9 = $r18[$i9];

        $d11 = $d10 * $d9;

        d12 = d12 - $d11;

        i14 = i14 + 1;

        goto label09;

     label10:
        $i6 = i12 - b3;

        $d2 = r1[$i6];

        $i7 = i12 - b3;

        $d1 = r3[$i7];

        $d3 = $d2 * $d1;

        d13 = d12 / $d3;

        i15 = i12;

     label11:
        if i15 >= i0 goto label12;

        $r13 = r2[i15];

        $d7 = $r13[i13];

        $d5 = neg d13;

        $r14 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r15 = $r14[i15];

        $i8 = i12 - b3;

        $d4 = $r15[$i8];

        $d6 = $d5 * $d4;

        $d8 = $d7 + $d6;

        $r13[i13] = $d8;

        i15 = i15 + 1;

        goto label11;

     label12:
        i13 = i13 + 1;

        goto label08;

     label13:
        i12 = i12 + -1;

        goto label07;

     label14:
        if b3 <= 0 goto label15;

        $r10 = r2[0];

        $r10[0] = 1.0;

     label15:
        $r9 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r2);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU> = $r9;

     label16:
        $r21 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedU>;

        return $r21;
    }

    public org.apache.commons.math3.linear.RealMatrix getB()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        double[][] r1, $r4, $r5;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3, $r8;
        double[] $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB>;

        if $r2 != null goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r4;

        $r5 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r6 = $r5[0];

        i1 = lengthof $r6;

        r1 = newmultiarray (double)[i0][i1];

        i8 = 0;

     label1:
        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $i2 = lengthof $r7;

        if i8 >= $i2 goto label4;

        $r10 = r1[i8];

        $r9 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $d0 = $r9[i8];

        $r10[i8] = $d0;

        if i0 >= i1 goto label2;

        if i8 <= 0 goto label3;

        $r15 = r1[i8];

        $i7 = i8 - 1;

        $r14 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $i6 = i8 - 1;

        $d2 = $r14[$i6];

        $r15[$i7] = $d2;

        goto label3;

     label2:
        $r11 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $i3 = lengthof $r11;

        $i4 = $i3 - 1;

        if i8 >= $i4 goto label3;

        $r13 = r1[i8];

        $i5 = i8 + 1;

        $r12 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $d1 = $r12[i8];

        $r13[$i5] = $d1;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        $r8 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB> = $r8;

     label5:
        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedB>;

        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix getV()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, i2, $i4, $i6, i8, i9, i10, i11, i12;
        byte b3, $b5, $b7;
        double[] r1, r3, $r7, $r8, $r10, $r12, $r13, $r14, $r15, $r16;
        double[][] r2, $r5, $r6, $r11;
        org.apache.commons.math3.linear.RealMatrix $r4, $r9, $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV>;

        if $r4 != null goto label16;

        $r5 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r5;

        $r6 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r7 = $r6[0];

        i1 = lengthof $r7;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        i2 = lengthof $r8;

        if i0 < i1 goto label01;

        $b7 = 1;

        goto label02;

     label01:
        $b7 = 0;

     label02:
        b3 = $b7;

        if i0 < i1 goto label03;

        $r16 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        goto label04;

     label03:
        $r16 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

     label04:
        r1 = $r16;

        r2 = newmultiarray (double)[i1][i1];

        i8 = i1 - 1;

     label05:
        if i8 < i2 goto label06;

        $r15 = r2[i8];

        $r15[i8] = 1.0;

        i8 = i8 + -1;

        goto label05;

     label06:
        i9 = i2 - 1;

     label07:
        if i9 < b3 goto label14;

        $r11 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i4 = i9 - b3;

        r3 = $r11[$i4];

        $r12 = r2[i9];

        $r12[i9] = 1.0;

        $d0 = r3[i9];

        $b5 = $d0 cmpl 0.0;

        if $b5 == 0 goto label13;

        i10 = i9;

     label08:
        if i10 >= i1 goto label13;

        d12 = 0.0;

        i11 = i9;

     label09:
        if i11 >= i1 goto label10;

        $r14 = r2[i11];

        $d10 = $r14[i10];

        $d9 = r3[i11];

        $d11 = $d10 * $d9;

        d12 = d12 - $d11;

        i11 = i11 + 1;

        goto label09;

     label10:
        $i6 = i9 - b3;

        $d2 = r1[$i6];

        $d1 = r3[i9];

        $d3 = $d2 * $d1;

        d13 = d12 / $d3;

        i12 = i9;

     label11:
        if i12 >= i1 goto label12;

        $r13 = r2[i12];

        $d7 = $r13[i10];

        $d5 = neg d13;

        $d4 = r3[i12];

        $d6 = $d5 * $d4;

        $d8 = $d7 + $d6;

        $r13[i10] = $d8;

        i12 = i12 + 1;

        goto label11;

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        i9 = i9 + -1;

        goto label07;

     label14:
        if b3 <= 0 goto label15;

        $r10 = r2[0];

        $r10[0] = 1.0;

     label15:
        $r9 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r2);

        r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV> = $r9;

     label16:
        $r17 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedV>;

        return $r17;
    }

    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        return $r1;
    }

    double[] getMainDiagonalRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        return $r1;
    }

    double[] getSecondaryDiagonalRef()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        return $r1;
    }

    boolean isUpperBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        double[][] $r1, $r2;
        double[] $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i1 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[0];

        $i0 = lengthof $r3;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void transformToUpperBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, $i4, $i5, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, i18;
        double[][] $r1, $r2, $r4, $r7, $r8, $r10, $r11, $r12;
        double[] $r3, $r5, $r6, $r9, $r13, r14, r15, r16, r17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, d28, d29, $d30, d31, d32, d33, d34, d35, $d36, d37, d38, d39;
        byte $b2, $b3, $b6, $b7;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r1;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r3 = $r2[0];

        i1 = lengthof $r3;

        i10 = 0;

     label01:
        if i10 >= i1 goto label22;

        d28 = 0.0;

        i11 = i10;

     label02:
        if i11 >= i0 goto label03;

        $r12 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r13 = $r12[i11];

        d29 = $r13[i10];

        $d27 = d29 * d29;

        d28 = d28 + $d27;

        i11 = i11 + 1;

        goto label02;

     label03:
        $r4 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r14 = $r4[i10];

        $d0 = r14[i10];

        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label04;

        $d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d28);

        $d30 = neg $d26;

        goto label05;

     label04:
        $d30 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d28);

     label05:
        d31 = $d30;

        $r5 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $r5[i10] = $d30;

        $b3 = $d30 cmpl 0.0;

        if $b3 == 0 goto label11;

        $d15 = r14[i10];

        $d16 = $d15 - $d30;

        r14[i10] = $d16;

        i12 = i10 + 1;

     label06:
        if i12 >= i1 goto label11;

        d32 = 0.0;

        i13 = i10;

     label07:
        if i13 >= i0 goto label08;

        $r11 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r15 = $r11[i13];

        $d24 = r15[i12];

        $d23 = r15[i10];

        $d25 = $d24 * $d23;

        d32 = d32 - $d25;

        i13 = i13 + 1;

        goto label07;

     label08:
        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r9 = $r8[i10];

        $d17 = $r9[i10];

        $d18 = d31 * $d17;

        d33 = d32 / $d18;

        i14 = i10;

     label09:
        if i14 >= i0 goto label10;

        $r10 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r16 = $r10[i14];

        $d21 = r16[i12];

        $d19 = r16[i10];

        $d20 = d33 * $d19;

        $d22 = $d21 - $d20;

        r16[i12] = $d22;

        i14 = i14 + 1;

        goto label09;

     label10:
        i12 = i12 + 1;

        goto label06;

     label11:
        $i4 = i1 - 1;

        if i10 >= $i4 goto label21;

        d34 = 0.0;

        i15 = i10 + 1;

     label12:
        if i15 >= i1 goto label13;

        d35 = r14[i15];

        $d14 = d35 * d35;

        d34 = d34 + $d14;

        i15 = i15 + 1;

        goto label12;

     label13:
        $i5 = i10 + 1;

        $d1 = r14[$i5];

        $b6 = $d1 cmpl 0.0;

        if $b6 <= 0 goto label14;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d34);

        $d36 = neg $d13;

        goto label15;

     label14:
        $d36 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d34);

     label15:
        d37 = $d36;

        $r6 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $r6[i10] = $d36;

        $b7 = $d36 cmpl 0.0;

        if $b7 == 0 goto label21;

        $i8 = i10 + 1;

        $d2 = r14[$i8];

        $d3 = $d2 - $d36;

        r14[$i8] = $d3;

        i16 = i10 + 1;

     label16:
        if i16 >= i0 goto label21;

        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r17 = $r7[i16];

        d38 = 0.0;

        i17 = i10 + 1;

     label17:
        if i17 >= i1 goto label18;

        $d11 = r17[i17];

        $d10 = r14[i17];

        $d12 = $d11 * $d10;

        d38 = d38 - $d12;

        i17 = i17 + 1;

        goto label17;

     label18:
        $i9 = i10 + 1;

        $d4 = r14[$i9];

        $d5 = d37 * $d4;

        d39 = d38 / $d5;

        i18 = i10 + 1;

     label19:
        if i18 >= i1 goto label20;

        $d8 = r17[i18];

        $d6 = r14[i18];

        $d7 = d39 * $d6;

        $d9 = $d8 - $d7;

        r17[i18] = $d9;

        i18 = i18 + 1;

        goto label19;

     label20:
        i16 = i16 + 1;

        goto label16;

     label21:
        i10 = i10 + 1;

        goto label01;

     label22:
        return;
    }

    private void transformToLowerBiDiagonal()
    {
        org.apache.commons.math3.linear.BiDiagonalTransformer r0;
        int i0, i1, $i4, $i5, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        double[] r1, $r4, $r6, $r8, $r12, $r15, r16, r17, r18, r19;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, $d30, d31, d32, d33, d34, d35, $d36, d37, d38, d39;
        double[][] $r2, $r3, $r5, $r7, $r9, $r10, $r11, $r13, $r14;
        byte $b2, $b3, $b6, $b7;

        r0 := @this: org.apache.commons.math3.linear.BiDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r2;

        $r3 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        i8 = 0;

     label01:
        if i8 >= i0 goto label22;

        $r5 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r1 = $r5[i8];

        d29 = 0.0;

        i9 = i8;

     label02:
        if i9 >= i1 goto label03;

        d0 = r1[i9];

        $d28 = d0 * d0;

        d29 = d29 + $d28;

        i9 = i9 + 1;

        goto label02;

     label03:
        $d1 = r1[i8];

        $b2 = $d1 cmpl 0.0;

        if $b2 <= 0 goto label04;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d29);

        $d30 = neg $d27;

        goto label05;

     label04:
        $d30 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d29);

     label05:
        d31 = $d30;

        $r6 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] main>;

        $r6[i8] = $d30;

        $b3 = $d30 cmpl 0.0;

        if $b3 == 0 goto label11;

        $d16 = r1[i8];

        $d17 = $d16 - $d30;

        r1[i8] = $d17;

        i10 = i8 + 1;

     label06:
        if i10 >= i0 goto label11;

        $r13 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r16 = $r13[i10];

        d32 = 0.0;

        i11 = i8;

     label07:
        if i11 >= i1 goto label08;

        $d25 = r16[i11];

        $d24 = r1[i11];

        $d26 = $d25 * $d24;

        d32 = d32 - $d26;

        i11 = i11 + 1;

        goto label07;

     label08:
        $r14 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r15 = $r14[i8];

        $d18 = $r15[i8];

        $d19 = d31 * $d18;

        d33 = d32 / $d19;

        i12 = i8;

     label09:
        if i12 >= i1 goto label10;

        $d22 = r16[i12];

        $d20 = r1[i12];

        $d21 = d33 * $d20;

        $d23 = $d22 - $d21;

        r16[i12] = $d23;

        i12 = i12 + 1;

        goto label09;

     label10:
        i10 = i10 + 1;

        goto label06;

     label11:
        $i4 = i0 - 1;

        if i8 >= $i4 goto label21;

        $r7 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $i5 = i8 + 1;

        r17 = $r7[$i5];

        d34 = 0.0;

        i13 = i8 + 1;

     label12:
        if i13 >= i0 goto label13;

        $r11 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        $r12 = $r11[i13];

        d35 = $r12[i8];

        $d15 = d35 * d35;

        d34 = d34 + $d15;

        i13 = i13 + 1;

        goto label12;

     label13:
        $d2 = r17[i8];

        $b6 = $d2 cmpl 0.0;

        if $b6 <= 0 goto label14;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d34);

        $d36 = neg $d14;

        goto label15;

     label14:
        $d36 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d34);

     label15:
        d37 = $d36;

        $r8 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[] secondary>;

        $r8[i8] = $d36;

        $b7 = $d36 cmpl 0.0;

        if $b7 == 0 goto label21;

        $d3 = r17[i8];

        $d4 = $d3 - $d36;

        r17[i8] = $d4;

        i14 = i8 + 1;

     label16:
        if i14 >= i1 goto label21;

        d38 = 0.0;

        i15 = i8 + 1;

     label17:
        if i15 >= i0 goto label18;

        $r10 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r18 = $r10[i15];

        $d12 = r18[i14];

        $d11 = r18[i8];

        $d13 = $d12 * $d11;

        d38 = d38 - $d13;

        i15 = i15 + 1;

        goto label17;

     label18:
        $d5 = r17[i8];

        $d6 = d37 * $d5;

        d39 = d38 / $d6;

        i16 = i8 + 1;

     label19:
        if i16 >= i0 goto label20;

        $r9 = r0.<org.apache.commons.math3.linear.BiDiagonalTransformer: double[][] householderVectors>;

        r19 = $r9[i16];

        $d9 = r19[i14];

        $d7 = r19[i8];

        $d8 = d39 * $d7;

        $d10 = $d9 - $d8;

        r19[i14] = $d10;

        i16 = i16 + 1;

        goto label19;

     label20:
        i14 = i14 + 1;

        goto label16;

     label21:
        i8 = i8 + 1;

        goto label01;

     label22:
        return;
    }
}
