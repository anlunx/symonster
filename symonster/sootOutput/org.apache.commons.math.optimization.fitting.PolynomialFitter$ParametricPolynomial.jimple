class org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial extends java.lang.Object implements org.apache.commons.math.optimization.fitting.ParametricRealFunction
{

    private void <init>()
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial r0;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[] gradient(double, double[])
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial r0;
        double d0, d1;
        double[] r1, r2;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $i0 = lengthof r1;

        r2 = newarray (double)[$i0];

        d1 = 1.0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        r2[i2] = d1;

        d1 = d1 * d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public double value(double, double[])
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial r0;
        double d0, $d1, $d2, d3;
        double[] r1;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d3 = 0.0;

        $i0 = lengthof r1;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $d2 = d3 * d0;

        $d1 = r1[i1];

        d3 = $d2 + $d1;

        i1 = i1 + -1;

        goto label1;

     label2:
        return d3;
    }

    void <init>(org.apache.commons.math.optimization.fitting.PolynomialFitter$1)
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial r0;
        org.apache.commons.math.optimization.fitting.PolynomialFitter$1 r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.PolynomialFitter$1;

        specialinvoke r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial: void <init>()>();

        return;
    }
}
