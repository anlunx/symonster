public class org.apache.commons.math3.util.Incrementor extends java.lang.Object
{
    private int maximalCount;
    private int count;
    private final org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback maxCountCallback;

    public void <init>()
    {
        org.apache.commons.math3.util.Incrementor r0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        specialinvoke r0.<org.apache.commons.math3.util.Incrementor: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math3.util.Incrementor r0;
        int i0;
        org.apache.commons.math3.util.Incrementor$1 $r1;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.util.Incrementor$1;

        specialinvoke $r1.<org.apache.commons.math3.util.Incrementor$1: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.util.Incrementor: void <init>(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>(i0, $r1);

        return;
    }

    public void <init>(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.Incrementor r0;
        int i0;
        org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.util.Incrementor: int count> = 0;

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.util.Incrementor: int maximalCount> = i0;

        r0.<org.apache.commons.math3.util.Incrementor: org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback maxCountCallback> = r1;

        return;
    }

    public void setMaximalCount(int)
    {
        org.apache.commons.math3.util.Incrementor r0;
        int i0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math3.util.Incrementor: int maximalCount> = i0;

        return;
    }

    public int getMaximalCount()
    {
        org.apache.commons.math3.util.Incrementor r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        $i0 = r0.<org.apache.commons.math3.util.Incrementor: int maximalCount>;

        return $i0;
    }

    public int getCount()
    {
        org.apache.commons.math3.util.Incrementor r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        $i0 = r0.<org.apache.commons.math3.util.Incrementor: int count>;

        return $i0;
    }

    public boolean canIncrement()
    {
        org.apache.commons.math3.util.Incrementor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        $i1 = r0.<org.apache.commons.math3.util.Incrementor: int count>;

        $i0 = r0.<org.apache.commons.math3.util.Incrementor: int maximalCount>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void incrementCount(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.Incrementor r0;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void incrementCount() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.util.Incrementor r0;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback $r1;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        $i0 = r0.<org.apache.commons.math3.util.Incrementor: int count>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math3.util.Incrementor: int count> = $i1;

        $i2 = r0.<org.apache.commons.math3.util.Incrementor: int maximalCount>;

        if $i1 <= $i2 goto label1;

        $r1 = r0.<org.apache.commons.math3.util.Incrementor: org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback maxCountCallback>;

        $i3 = r0.<org.apache.commons.math3.util.Incrementor: int maximalCount>;

        interfaceinvoke $r1.<org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback: void trigger(int)>($i3);

     label1:
        return;
    }

    public void resetCount()
    {
        org.apache.commons.math3.util.Incrementor r0;

        r0 := @this: org.apache.commons.math3.util.Incrementor;

        r0.<org.apache.commons.math3.util.Incrementor: int count> = 0;

        return;
    }
}
