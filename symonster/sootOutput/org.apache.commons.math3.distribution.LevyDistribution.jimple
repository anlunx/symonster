public class org.apache.commons.math3.distribution.LevyDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    private static final long serialVersionUID;
    private final double mu;
    private final double c;
    private final double halfC;

    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double d0, d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.LevyDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, d0, d1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double)
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu> = d0;

        r0.<org.apache.commons.math3.distribution.LevyDistribution: double c> = d1;

        $d2 = 0.5 * d1;

        r0.<org.apache.commons.math3.distribution.LevyDistribution: double halfC> = $d2;

        return;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        d0 := @parameter0: double;

        $d3 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        $b0 = d0 cmpg $d3;

        if $b0 >= 0 goto label1;

        return #NaN;

     label1:
        $d4 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        d1 = d0 - $d4;

        $d5 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double halfC>;

        d2 = $d5 / d1;

        $d6 = d2 / 3.141592653589793;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        $d8 = neg d2;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d8);

        $d10 = $d7 * $d9;

        $d11 = $d10 / d1;

        return $d11;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        d0 := @parameter0: double;

        $d3 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        $b0 = d0 cmpg $d3;

        if $b0 >= 0 goto label1;

        return #NaN;

     label1:
        $d4 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        d1 = d0 - $d4;

        $d5 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double halfC>;

        d2 = $d5 / d1;

        $d6 = d2 / 3.141592653589793;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d6);

        $d8 = 0.5 * $d7;

        $d9 = $d8 - d2;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d11 = $d9 - $d10;

        return $d11;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return #NaN;

     label1:
        $d4 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double halfC>;

        $d2 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        $d3 = d0 - $d2;

        $d5 = $d4 / $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = staticinvoke <org.apache.commons.math3.special.Erf: double erfc(double)>($d6);

        return $d7;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        d1 = staticinvoke <org.apache.commons.math3.special.Erf: double erfcInv(double)>(d0);

        $d5 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        $d3 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double halfC>;

        $d2 = d1 * d1;

        $d4 = $d3 / $d2;

        $d6 = $d5 + $d4;

        return $d6;
    }

    public double getScale()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double c>;

        return $d0;
    }

    public double getLocation()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return #Infinity;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return #Infinity;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.LevyDistribution: double mu>;

        return $d0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return 0;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.LevyDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.LevyDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.LevyDistribution: long serialVersionUID> = 20130314L;

        return;
    }
}
