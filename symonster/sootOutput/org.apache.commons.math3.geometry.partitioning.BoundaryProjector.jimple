class org.apache.commons.math3.geometry.partitioning.BoundaryProjector extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    private final org.apache.commons.math3.geometry.Point original;
    private org.apache.commons.math3.geometry.Point projected;
    private org.apache.commons.math3.geometry.partitioning.BSPTree leaf;
    private double offset;

    public void <init>(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf> = null;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = #Infinity;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r3;
        org.apache.commons.math3.geometry.Point $r4;
        double $d0;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r5, $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r4 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r4);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r6 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r6;

     label1:
        $r5 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order PLUS_SUB_MINUS>;

        return $r5;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        double d0, d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.geometry.Point r3, r5, $r7, $r8, $r10;
        java.util.List r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r6;
        byte $b0, $b1;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r9, $r11;
        java.util.Iterator r12, r14;
        org.apache.commons.math3.geometry.partitioning.Region r13, r15;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        r2 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        d0 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r7);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $b0 = $d2 cmpg $d3;

        if $b0 >= 0 goto label6;

        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        r3 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Hyperplane: org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)>($r8);

        r4 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: java.util.List boundaryRegions(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        z3 = 0;

        r12 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.commons.math3.geometry.partitioning.Region) $r11;

        if z3 != 0 goto label2;

        $z2 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: boolean belongsToPart(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r3, r2, r13);

        if $z2 == 0 goto label2;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = r3;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = $d5;

        z3 = 1;

     label2:
        goto label1;

     label3:
        if z3 != 0 goto label6;

        r14 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.commons.math3.geometry.partitioning.Region) $r9;

        r5 = specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point singularProjection(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r3, r2, r15);

        if r5 == null goto label5;

        $r10 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        d1 = interfaceinvoke $r10.<org.apache.commons.math3.geometry.Point: double distance(org.apache.commons.math3.geometry.Point)>(r5);

        $d4 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $b1 = d1 cmpg $d4;

        if $b1 >= 0 goto label5;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected> = r5;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = d1;

     label5:
        goto label4;

     label6:
        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf>;

        if $r2 != null goto label1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf> = r1;

     label1:
        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BoundaryProjection getProjection()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r1;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection $r4;
        org.apache.commons.math3.geometry.Point $r5, $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        $d0 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.partitioning.BSPTree leaf>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $d3 = -1.0;

        goto label2;

     label1:
        $d3 = 1.0;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double copySign(double,double)>($d0, $d3);

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset> = $d1;

        $r4 = new org.apache.commons.math3.geometry.partitioning.BoundaryProjection;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point original>;

        $r5 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: org.apache.commons.math3.geometry.Point projected>;

        $d2 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: double offset>;

        specialinvoke $r4.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: void <init>(org.apache.commons.math3.geometry.Point,org.apache.commons.math3.geometry.Point,double)>($r6, $r5, $d2);

        return $r4;
    }

    private java.util.List boundaryRegions(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r6, $r7;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(2);

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r3 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r5;

        $r6 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>($r6, $r4);

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryProjector: void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane,java.util.List)>($r7, $r4);

        return $r4;
    }

    private void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane, java.util.List)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        java.util.List r2;
        org.apache.commons.math3.geometry.partitioning.Region r3;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane $r4;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: java.util.List;

        if r1 == null goto label1;

        $r4 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        r3 = virtualinvoke $r4.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        if r3 == null goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        return;
    }

    private boolean belongsToPart(org.apache.commons.math3.geometry.Point, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1, $r5;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        org.apache.commons.math3.geometry.partitioning.Region r3;
        org.apache.commons.math3.geometry.partitioning.Embedding r4;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r4 = (org.apache.commons.math3.geometry.partitioning.Embedding) r2;

        $r5 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r6 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r5);

        $r7 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r6 == $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private org.apache.commons.math3.geometry.Point singularProjection(org.apache.commons.math3.geometry.Point, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryProjector r0;
        org.apache.commons.math3.geometry.Point r1, $r6, $r7, $r8, $r9;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2;
        org.apache.commons.math3.geometry.partitioning.Region r3;
        org.apache.commons.math3.geometry.partitioning.Embedding r4;
        org.apache.commons.math3.geometry.partitioning.BoundaryProjection r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r4 = (org.apache.commons.math3.geometry.partitioning.Embedding) r2;

        $r6 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        r5 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)>($r6);

        $r7 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        if $r7 != null goto label1;

        $r9 = null;

        goto label2;

     label1:
        $r8 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.BoundaryProjection: org.apache.commons.math3.geometry.Point getProjected()>();

        $r9 = interfaceinvoke r4.<org.apache.commons.math3.geometry.partitioning.Embedding: org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)>($r8);

     label2:
        return $r9;
    }
}
