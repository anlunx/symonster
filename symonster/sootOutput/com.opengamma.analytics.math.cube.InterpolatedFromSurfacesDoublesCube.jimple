public class com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube extends com.opengamma.analytics.math.cube.Cube
{
    private final com.opengamma.analytics.math.Plane _plane;
    private final double[] _points;
    private final com.opengamma.analytics.math.surface.Surface[] _surfaces;
    private final int _nSurfaces;
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator;

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 0);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.lang.Double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 0);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 0);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r3;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r3.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, 0);

        return $r3;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 0, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.lang.Double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 0, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 0, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube 'from'(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, 0, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 1);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.lang.Double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 1);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, r3, 1);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r3;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r3.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(r0, r1, r2, 1);

        return $r3;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 1, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.surface.Surface[] r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.lang.Double[],com.opengamma.analytics.math.surface.Surface[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 0, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r5;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, r3, 0, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube fromSorted(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        com.opengamma.analytics.math.Plane r0;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube $r4;

        r0 := @parameter0: com.opengamma.analytics.math.Plane;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter3: java.lang.String;

        $r4 = new com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: void <init>(com.opengamma.analytics.math.Plane,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(r0, r1, r2, 0, r3);

        return $r4;
    }

    public void <init>(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        double[] r2, $r5, $r9;
        com.opengamma.analytics.math.surface.Surface[] r3, $r7, $r8;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        int i0, $i1;
        java.lang.Object[] $r6;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = lengthof r3;

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.lang.Object[],java.lang.String)>(r3, "surfaces");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, i0);

        $r7 = (com.opengamma.analytics.math.surface.Surface[]) $r6;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r7;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label5;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r9, $r8);

     label5:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.lang.Double[] r2;
        com.opengamma.analytics.math.surface.Surface[] r3, $r6, $r7, $r22;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        int i0, $i1, i2;
        double[] $r5, $r8, $r20;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17;
        java.lang.Double $r10, $r19;
        java.lang.String $r13, $r18;
        com.opengamma.analytics.math.surface.Surface $r15, $r21;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = lengthof r3;

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r5 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r5;

        $r6 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r6;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r10 = r2[i2];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("point ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r10, $r13);

        $r15 = r3[i2];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("surface ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r15, $r18);

        $r20 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r19 = r2[i2];

        $d0 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $r20[i2] = $d0;

        $r22 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r21 = r3[i2];

        $r22[i2] = $r21;

        i2 = i2 + 1;

        goto label5;

     label6:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label7;

        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r7 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r8, $r7);

     label7:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.util.List r2, r3;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        int i0, $i1, i2;
        double[] $r5, $r8, $r9;
        com.opengamma.analytics.math.surface.Surface[] $r6, $r7, $r12;
        java.lang.Object $r10, $r13;
        java.lang.Double $r11;
        double $d0;
        com.opengamma.analytics.math.surface.Surface $r14;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection)>(r3);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r5 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r5;

        $r6 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r6;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r11 = (java.lang.Double) $r10;

        $d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r9[i2] = $d0;

        $r12 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r14 = (com.opengamma.analytics.math.surface.Surface) $r13;

        $r12[i2] = $r14;

        i2 = i2 + 1;

        goto label5;

     label6:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label7;

        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r7 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r8, $r7);

     label7:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.util.Map r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        double[] $r6, $r10, $r22;
        com.opengamma.analytics.math.surface.Surface[] $r7, $r9, $r25;
        java.util.Set $r8;
        java.lang.Object $r11, $r12, $r17, $r23, $r26;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19, $r20;
        java.lang.String $r16, $r21;
        java.lang.Double $r24;
        double $d0;
        com.opengamma.analytics.math.surface.Surface $r27;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "surfaces");

        i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r6 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r6;

        $r7 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r7;

        i1 = 0;

        $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("point ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r12, $r16);

        $r17 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("surface ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r17, $r21);

        $r22 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r23 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.Double) $r23;

        $d0 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $r22[i1] = $d0;

        $r25 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r26 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (com.opengamma.analytics.math.surface.Surface) $r26;

        $r25[i1] = $r27;

        i1 = i1 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z0 != 0 goto label5;

        $r10 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r10, $r9);

     label5:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        double[] r2, $r6, $r10;
        com.opengamma.analytics.math.surface.Surface[] r3, $r8, $r9;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        java.lang.String r5;
        int i0, $i1;
        java.lang.Object[] $r7;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        r5 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>(java.lang.String)>(r5);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = lengthof r3;

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.lang.Object[],java.lang.String)>(r3, "surfaces");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, i0);

        $r8 = (com.opengamma.analytics.math.surface.Surface[]) $r7;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r8;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label5;

        $r10 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r10, $r9);

     label5:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.lang.Double[], com.opengamma.analytics.math.surface.Surface[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.lang.Double[] r2;
        com.opengamma.analytics.math.surface.Surface[] r3, $r7, $r8, $r23;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        java.lang.String r5, $r14, $r19;
        int i0, $i1, i2;
        double[] $r6, $r9, $r21;
        java.lang.StringBuilder $r10, $r12, $r13, $r15, $r17, $r18;
        java.lang.Double $r11, $r20;
        com.opengamma.analytics.math.surface.Surface $r16, $r22;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: com.opengamma.analytics.math.surface.Surface[];

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        r5 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>(java.lang.String)>(r5);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = lengthof r3;

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r6 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r6;

        $r7 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r7;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r11 = r2[i2];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("point ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r11, $r14);

        $r16 = r3[i2];

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("surface ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r16, $r19);

        $r21 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r20 = r2[i2];

        $d0 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $r21[i2] = $d0;

        $r23 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r22 = r3[i2];

        $r23[i2] = $r22;

        i2 = i2 + 1;

        goto label5;

     label6:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label7;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r9, $r8);

     label7:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.util.List r2, r3;
        com.opengamma.analytics.math.interpolation.Interpolator1D r4;
        boolean z0, $z1, $z2;
        java.lang.String r5;
        int i0, $i1, i2;
        double[] $r6, $r9, $r10;
        com.opengamma.analytics.math.surface.Surface[] $r7, $r8, $r13;
        java.lang.Object $r11, $r14;
        java.lang.Double $r12;
        double $d0;
        com.opengamma.analytics.math.surface.Surface $r15;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter4: boolean;

        r5 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>(java.lang.String)>(r5);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "surfaces");

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if i0 != $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection)>(r2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.util.Collection)>(r3);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r6 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r6;

        $r7 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r7;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r10 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r12 = (java.lang.Double) $r11;

        $d0 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $r10[i2] = $d0;

        $r13 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r15 = (com.opengamma.analytics.math.surface.Surface) $r14;

        $r13[i2] = $r15;

        i2 = i2 + 1;

        goto label5;

     label6:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r4;

        if z0 != 0 goto label7;

        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r9, $r8);

     label7:
        return;
    }

    public void <init>(com.opengamma.analytics.math.Plane, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane r1;
        java.util.Map r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        boolean z0, $z1, $z2;
        java.lang.String r4, $r17, $r22;
        int i0, i1;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        double[] $r7, $r11, $r23;
        com.opengamma.analytics.math.surface.Surface[] $r8, $r10, $r26;
        java.util.Set $r9;
        java.lang.Object $r12, $r13, $r18, $r24, $r27;
        java.lang.StringBuilder $r14, $r15, $r16, $r19, $r20, $r21;
        java.lang.Double $r25;
        double $d0;
        com.opengamma.analytics.math.surface.Surface $r28;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.analytics.math.Plane;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: void <init>(java.lang.String)>(r4);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "plane");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "surfaces");

        i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z1);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane> = r1;

        $r7 = newarray (double)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points> = $r7;

        $r8 = newarray (com.opengamma.analytics.math.surface.Surface)[i0];

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces> = $r8;

        i1 = 0;

        $r9 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("point ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r13, $r17);

        $r18 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("surface ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r18, $r22);

        $r23 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r24 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r25 = (java.lang.Double) $r24;

        $d0 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        $r23[i1] = $d0;

        $r26 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r27 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (com.opengamma.analytics.math.surface.Surface) $r27;

        $r26[i1] = $r28;

        i1 = i1 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces> = i0;

        r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z0 != 0 goto label5;

        $r11 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r10 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r11, $r10);

     label5:
        return;
    }

    public java.lang.Double[] getXData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double[] getYData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double[] getZData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double[] getValues()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int size()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double getValue(java.lang.Double, java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Double r1, r2, r3, $r11, $r12, $r14, $r18, $r19, $r20, $r21, $r23;
        double[] r4, $r16, $r30;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        com.opengamma.analytics.math.surface.Surface[] r5, $r9;
        com.opengamma.analytics.math.surface.Surface r6, $r10;
        com.opengamma.analytics.math.Plane $r7, $r27;
        int[] $r8;
        java.lang.Object $r13, $r22;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r15;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r17;
        double $d0, d1, d2, d3;
        java.lang.IllegalArgumentException $r24;
        java.lang.StringBuilder $r25, $r26, $r28;
        java.lang.String $r29;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "z");

        $i2 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: int _nSurfaces>;

        r4 = newarray (double)[$i2];

        i6 = 0;

        $r8 = <com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube$1: int[] $SwitchMap$com$opengamma$analytics$math$Plane>;

        $r7 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        $i3 = virtualinvoke $r7.<com.opengamma.analytics.math.Plane: int ordinal()>();

        $i4 = $r8[$i3];

        tableswitch($i4)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d3 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        goto label5;

     label2:
        d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d2 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        goto label5;

     label3:
        d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d2 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        d3 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        goto label5;

     label4:
        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle type ");

        $r27 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label5:
        $r30 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        i0 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r30, d3);

        if i0 >= 0 goto label8;

        r5 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        i1 = lengthof r5;

        i7 = 0;

     label6:
        if i7 >= i1 goto label7;

        r6 = r5[i7];

        $i5 = i6;

        i6 = i6 + 1;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r22 = virtualinvoke r6.<com.opengamma.analytics.math.surface.Surface: java.lang.Object getZValue(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r23 = (java.lang.Double) $r22;

        $d0 = virtualinvoke $r23.<java.lang.Double: double doubleValue()>();

        r4[$i5] = $d0;

        i7 = i7 + 1;

        goto label6;

     label7:
        $r16 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r15 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r17 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D)>($r16, r4, $r15);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r19 = virtualinvoke $r17.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>($r18);

        return $r19;

     label8:
        $r9 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r10 = $r9[i0];

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r13 = virtualinvoke $r10.<com.opengamma.analytics.math.surface.Surface: java.lang.Object getZValue(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r14 = (java.lang.Double) $r13;

        return $r14;
    }

    public java.lang.Double getValue(com.opengamma.util.tuple.Triple)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.util.tuple.Triple r1;
        java.lang.Object $r2, $r4, $r6;
        java.lang.Double $r3, $r5, $r7, $r8;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.util.tuple.Triple;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "xyz");

        $r2 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getFirst()>();

        $r3 = (java.lang.Double) $r2;

        $r4 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getSecond()>();

        $r5 = (java.lang.Double) $r4;

        $r6 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getThird()>();

        $r7 = (java.lang.Double) $r6;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double getValue(java.lang.Double,java.lang.Double,java.lang.Double)>($r3, $r5, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.Plane getPlane()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.Plane $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        return $r1;
    }

    public double[] getPoints()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        return $r1;
    }

    public com.opengamma.analytics.math.surface.Surface[] getSurfaces()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.surface.Surface[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        return $r1;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        return $r1;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        com.opengamma.analytics.math.Plane $r2;
        double[] $r3;
        com.opengamma.analytics.math.surface.Surface[] $r4;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        i9 = specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: int hashCode()>();

        $i1 = 31 * i9;

        $r1 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $i2 = virtualinvoke $r1.<com.opengamma.analytics.math.interpolation.Interpolator1D: int hashCode()>();

        i10 = $i1 + $i2;

        $i3 = 31 * i10;

        $r2 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        $i4 = virtualinvoke $r2.<com.opengamma.analytics.math.Plane: int hashCode()>();

        i11 = $i3 + $i4;

        $i5 = 31 * i11;

        $r3 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r3);

        i12 = $i5 + $i6;

        $i7 = 31 * i12;

        $r4 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $i8 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r4);

        i13 = $i7 + $i8;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r3, $r4;
        com.opengamma.analytics.math.surface.Surface[] $r5, $r6;
        double[] $r7, $r8;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r9, $r10;
        com.opengamma.analytics.math.Plane $r11, $r12;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.opengamma.analytics.math.cube.Cube: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube) r1;

        $r6 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $r5 = r2.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.surface.Surface[] _surfaces>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $r7 = r2.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: double[] _points>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        $r10 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r9 = r2.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $z3 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        $r12 = r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        $r11 = r2.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: com.opengamma.analytics.math.Plane _plane>;

        if $r12 != $r11 goto label7;

        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        return $z4;
    }

    public volatile java.lang.Object getValue(com.opengamma.util.tuple.Triple)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        com.opengamma.util.tuple.Triple r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: com.opengamma.util.tuple.Triple;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double getValue(com.opengamma.util.tuple.Triple)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getValue(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Object r1, r2, r3;
        java.lang.Double $r4, $r5, $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (java.lang.Double) r1;

        $r5 = (java.lang.Double) r2;

        $r4 = (java.lang.Double) r3;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double getValue(java.lang.Double,java.lang.Double,java.lang.Double)>($r6, $r5, $r4);

        return $r7;
    }

    public volatile java.lang.Object[] getValues()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double[] getValues()>();

        return $r1;
    }

    public volatile java.lang.Object[] getZData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double[] getZData()>();

        return $r1;
    }

    public volatile java.lang.Object[] getYData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double[] getYData()>();

        return $r1;
    }

    public volatile java.lang.Object[] getXData()
    {
        com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.cube.InterpolatedFromSurfacesDoublesCube: java.lang.Double[] getXData()>();

        return $r1;
    }
}
