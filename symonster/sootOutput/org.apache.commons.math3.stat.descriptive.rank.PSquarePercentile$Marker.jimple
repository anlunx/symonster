class org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final long serialVersionUID;
    private int index;
    private double intMarkerPosition;
    private double desiredMarkerPosition;
    private double markerHeight;
    private double desiredMarkerIncrement;
    private transient org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next;
    private transient org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous;
    private final org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear;
    private transient org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear;

    private void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        org.apache.commons.math3.analysis.interpolation.NevilleInterpolator $r1;
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.analysis.interpolation.NevilleInterpolator;

        specialinvoke $r1.<org.apache.commons.math3.analysis.interpolation.NevilleInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear> = $r1;

        $r2 = new org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        specialinvoke $r2.<org.apache.commons.math3.analysis.interpolation.LinearInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear> = $r2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = r0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = r0;

        return;
    }

    private void <init>(double, double, double, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition> = d1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement> = d2;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition> = d3;

        return;
    }

    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = r1;

        return r0;
    }

    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = r1;

        return r0;
    }

    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker index(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index> = i0;

        return r0;
    }

    private void updateDesiredPosition()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d2 = $d1 + $d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition> = $d2;

        return;
    }

    private void incrementPosition(int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        int i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        i0 := @parameter0: int;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d0 = (double) i0;

        $d2 = $d1 + $d0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition> = $d2;

        return;
    }

    private double difference()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d2 = $d1 - $d0;

        return $d2;
    }

    private double estimate()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r5, $r6, $r8, $r9, $r11, $r12;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        boolean z0, z1, $z2, $z3, $z4;
        byte b0, $b2, $b3, $b4, $b5, $b6, $b7, $b10, $b11;
        double[] $r7, $r10, $r14, $r15;
        org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator $r13, $r17;
        int $i8, $i9;
        double[][] $r16;
        org.apache.commons.math3.analysis.UnivariateFunction r18, r19;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double difference()>();

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $d3 = $r5.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d4 = $d3 - $d2;

        $b2 = $d4 cmpl 1.0;

        if $b2 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z0 = $z3;

        $r6 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $d6 = $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d7 = $d6 - $d5;

        $b3 = $d7 cmpg -1.0;

        if $b3 >= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        z1 = $z4;

        $b4 = d0 cmpl 1.0;

        if $b4 < 0 goto label05;

        if z0 != 0 goto label06;

     label05:
        $b5 = d0 cmpg -1.0;

        if $b5 > 0 goto label12;

        if z1 == 0 goto label12;

     label06:
        $b6 = d0 cmpl 0.0;

        if $b6 < 0 goto label07;

        $b10 = 1;

        goto label08;

     label07:
        $b10 = -1;

     label08:
        b0 = $b10;

        $r7 = newarray (double)[3];

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $d8 = $r8.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $r7[0] = $d8;

        $d9 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $r7[1] = $d9;

        $r9 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $d10 = $r9.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $r7[2] = $d10;

        $r10 = newarray (double)[3];

        $r11 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $d11 = $r11.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r10[0] = $d11;

        $d12 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r10[1] = $d12;

        $r12 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $d13 = $r12.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r10[2] = $d13;

        $d15 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d14 = (double) $b10;

        d1 = $d15 + $d14;

        $r13 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator nonLinear>;

        r18 = interfaceinvoke $r13.<org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator: org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[],double[])>($r7, $r10);

        $d16 = interfaceinvoke r18.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = $d16;

        $d17 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $z2 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: boolean isEstimateBad(double[],double)>($r10, $d17);

        if $z2 == 0 goto label11;

        $d18 = $r7[1];

        $d19 = d1 - $d18;

        $b7 = $d19 cmpl 0.0;

        if $b7 <= 0 goto label09;

        $b11 = 1;

        goto label10;

     label09:
        $b11 = -1;

     label10:
        $r14 = newarray (double)[2];

        $d20 = $r7[1];

        $r14[0] = $d20;

        $i8 = 1 + $b11;

        $d21 = $r7[$i8];

        $r14[1] = $d21;

        $r15 = newarray (double)[2];

        $d22 = $r10[1];

        $r15[0] = $d22;

        $i9 = 1 + $b11;

        $d23 = $r10[$i9];

        $r15[1] = $d23;

        $r16 = newarray (double[])[1];

        $r16[0] = $r15;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],double[][])>($r14, $r16);

        $r17 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear>;

        r19 = interfaceinvoke $r17.<org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator: org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[],double[])>($r14, $r15);

        $d24 = interfaceinvoke r19.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d1);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = $d24;

     label11:
        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void incrementPosition(int)>(b0);

     label12:
        $d25 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        return $d25;
    }

    private boolean isEstimateBad(double[], double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double[] r1;
        double d0, $d1, $d2;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        $d1 = r1[0];

        $b0 = d0 cmpg $d1;

        if $b0 <= 0 goto label1;

        $d2 = r1[2];

        $b1 = d0 cmpl $d2;

        if $b1 < 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r2, $r3, $r4, $r5, $r6;
        java.lang.Object r1;
        boolean $z0, z1, $z2, $z4, $z6, $z8, $z10, $z12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: java.lang.Object;

        z1 = 0;

        if r0 != r1 goto label01;

        z1 = 1;

        goto label14;

     label01:
        if r1 == null goto label14;

        $z0 = r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        if $z0 == 0 goto label14;

        r2 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker) r1;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d0 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i0 != 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        if $z2 == 0 goto label04;

        $d7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d6 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $i7 = staticinvoke <java.lang.Double: int compare(double,double)>($d7, $d6);

        if $i7 != 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        if $z4 == 0 goto label06;

        $d5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d4 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d5, $d4);

        if $i6 != 0 goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        if $z6 == 0 goto label08;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d2 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $i5 = staticinvoke <java.lang.Double: int compare(double,double)>($d3, $d2);

        if $i5 != 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        if $z8 == 0 goto label10;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i4 = $r5.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r6 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i3 = $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        if $i4 != $i3 goto label10;

        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        if $z10 == 0 goto label12;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i2 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r4 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i1 = $r4.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        if $i2 != $i1 goto label12;

        $z12 = 1;

        goto label13;

     label12:
        $z12 = 0;

     label13:
        z1 = $z12;

     label14:
        return z1;
    }

    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r2, $r3;
        double[] $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = newarray (double)[6];

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $r1[0] = $d0;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $r1[1] = $d1;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $r1[2] = $d2;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $r1[3] = $d3;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i0 = $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d4 = (double) $i0;

        $r1[4] = $d4;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i1 = $r3.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d5 = (double) $i1;

        $r1[5] = $d5;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        java.io.ObjectInputStream r1;
        org.apache.commons.math3.analysis.interpolation.LinearInterpolator $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next> = r0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous> = r0;

        $r2 = new org.apache.commons.math3.analysis.interpolation.LinearInterpolator;

        specialinvoke $r2.<org.apache.commons.math3.analysis.interpolation.LinearInterpolator: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator linear> = $r2;

        return;
    }

    public java.lang.Object clone()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double)>($d3, $d2, $d1, $d0);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r7, $r9;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.Double $r2, $r3, $r4, $r5, $r6;
        java.lang.Integer $r8, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r1 = newarray (java.lang.Object)[7];

        $i0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $d0 = (double) $i0;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double intMarkerPosition>;

        $d2 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d1, 0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r1[1] = $r3;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerPosition>;

        $d4 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d3, 2);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r1[2] = $r4;

        $d5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        $d6 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d5, 2);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r1[3] = $r5;

        $d7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double desiredMarkerIncrement>;

        $d8 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int)>($d7, 2);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r1[4] = $r6;

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous>;

        $i1 = $r7.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[5] = $r8;

        $r9 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next>;

        $i2 = $r9.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: int index>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[6] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("index=%.0f,n=%.0f,np=%.2f,q=%.2f,dn=%.2f,prev=%d,next=%d", $r1);

        return $r11;
    }

    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r2 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $r2 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0, $r1;
        int i0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker index(int)>(i0);

        return $r1;
    }

    void <init>(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>()>();

        return;
    }

    void <init>(double, double, double, double, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double d0, d1, d2, d3;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        r1 := @parameter4: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        return;
    }

    static double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        d0 := @parameter1: double;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight> = d0;

        return d0;
    }

    static double access$600(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double estimate()>();

        return $d0;
    }

    static void access$700(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker, int)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        int i0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void incrementPosition(int)>(i0);

        return;
    }

    static void access$800(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: void updateDesiredPosition()>();

        return;
    }

    static double access$500(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: double markerHeight>;

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker: long serialVersionUID> = -3575879478288538431L;

        return;
    }
}
