class org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    private final double tolerance;
    private final java.util.List segments;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        double d0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: double tolerance> = d0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments> = $r1;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r2;
        org.apache.commons.math3.geometry.partitioning.NodesSet r3;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r2 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r4;

        r3 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()>();

        $r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r5 == null goto label1;

        $r8 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Iterable,boolean)>($r8, r1, r3, 0);

     label1:
        $r6 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Iterable,boolean)>($r7, r1, r3, 1);

     label2:
        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.BSPTree, java.lang.Iterable, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2, r11, r12;
        java.lang.Iterable r3;
        boolean z0, $z1, $z2, $z3;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r4;
        org.apache.commons.math3.geometry.euclidean.twod.Line r5, $r23;
        java.util.List r6, $r20, $r22;
        java.util.Iterator r7;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r8;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r9, $r24, $r25;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r13;
        org.apache.commons.math3.geometry.partitioning.Region $r14;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r15;
        java.lang.Object $r16;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r17, $r18;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment $r19, $r21;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 := @parameter2: java.lang.Iterable;

        z0 := @parameter3: boolean;

        r4 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r13 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r5 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r13;

        $r14 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r15 = (org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet) $r14;

        r6 = virtualinvoke $r15.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r16 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r16;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z2 == 0 goto label2;

        $r24 = null;

        goto label3;

     label2:
        $r17 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r17.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        $r24 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r17);

     label3:
        r9 = $r24;

        $d2 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d2);

        if $z3 == 0 goto label4;

        $r25 = null;

        goto label5;

     label4:
        $r18 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d3 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d3);

        $r25 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r18);

     label5:
        r11 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.lang.Iterable)>(r9, r3);

        r12 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.lang.Iterable)>($r25, r3);

        if z0 == 0 goto label6;

        $r22 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        $r21 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        $r23 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line getReverse()>();

        specialinvoke $r21.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r25, r9, $r23, r2, r12, r11);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label7;

     label6:
        $r20 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        $r19 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree)>(r9, $r25, r5, r2, r11, r12);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

     label7:
        goto label1;

     label8:
        return;
    }

    private org.apache.commons.math3.geometry.partitioning.BSPTree selectClosest(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, java.lang.Iterable)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1;
        java.lang.Iterable r2;
        java.util.Iterator r3;
        org.apache.commons.math3.geometry.partitioning.BSPTree r4, r8, $r9;
        double d0, $d1, $d2, d3;
        boolean $z0;
        byte $b0, $b1;
        java.lang.Object $r5;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r6;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: java.lang.Iterable;

        r8 = null;

        d3 = #Infinity;

        r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $d2 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>(r1);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b1 = d0 cmpg d3;

        if $b1 >= 0 goto label2;

        r8 = r4;

        d3 = d0;

     label2:
        goto label1;

     label3:
        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: double tolerance>;

        $b0 = d3 cmpg $d1;

        if $b0 > 0 goto label4;

        $r9 = r8;

        goto label5;

     label4:
        $r9 = null;

     label5:
        return $r9;
    }

    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List segments>;

        return $r1;
    }
}
