public class org.apache.commons.lang.StringUtils extends java.lang.Object
{
    public static final java.lang.String EMPTY;
    public static final int INDEX_NOT_FOUND;
    private static final int PAD_LIMIT;

    public void <init>()
    {
        org.apache.commons.lang.StringUtils r0;

        r0 := @this: org.apache.commons.lang.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEmpty(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isNotEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isBlank(java.lang.String)
    {
        java.lang.String r0;
        int $i1, i3;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return 1;

     label2:
        i3 = 0;

     label3:
        if i3 >= $i1 goto label5;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static boolean isNotBlank(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String clean(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        return $r1;
    }

    public static java.lang.String trim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        return $r1;
    }

    public static java.lang.String trimToNull(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static java.lang.String trimToEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        return $r1;
    }

    public static java.lang.String strip(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String stripToNull(java.lang.String)
    {
        int $i0;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r2 = null;

        goto label3;

     label2:
        $r2 = r1;

     label3:
        return $r2;
    }

    public static java.lang.String stripToEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

     label2:
        return $r1;
    }

    public static java.lang.String strip(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)>(r2, r0);

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)>(r3, r0);

        return $r1;
    }

    public static java.lang.String stripStart(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int $i1, $i2, $i4, i6;
        char $c3, $c5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        i6 = 0;

        if r1 != null goto label4;

     label3:
        if i6 == $i1 goto label6;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c5);

        if $z0 == 0 goto label6;

        i6 = i6 + 1;

        goto label3;

     label4:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label5;

        return r0;

     label5:
        if i6 == $i1 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i4 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c3);

        if $i4 == -1 goto label6;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i6);

        return $r2;
    }

    public static java.lang.String stripEnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int $i0, $i1, $i2, $i4, $i5, i7;
        char $c3, $c6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i7 = $i0;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        if r1 != null goto label4;

     label3:
        if i7 == 0 goto label6;

        $i5 = i7 - 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c6);

        if $z0 == 0 goto label6;

        i7 = i7 + -1;

        goto label3;

     label4:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label5;

        return r0;

     label5:
        if i7 == 0 goto label6;

        $i2 = i7 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i4 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c3);

        if $i4 == -1 goto label6;

        i7 = i7 + -1;

        goto label5;

     label6:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        return $r2;
    }

    public static java.lang.String[] stripAll(java.lang.String[])
    {
        java.lang.String[] r0, $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] stripAll(java.lang.String[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String[] stripAll(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0, r2;
        java.lang.String r1, $r3, $r4;
        int $i1, i2;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        r2 = newarray (java.lang.String)[$i1];

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        $r3 = r0[i2];

        $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>($r3, r1);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public static boolean equalsIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

     label3:
        return $z0;
    }

    public static int indexOf(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        boolean $z0;
        int $i1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c0);

        return $i1;
    }

    public static int indexOf(java.lang.String, char, int)
    {
        java.lang.String r0;
        char c0;
        int i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(c0, i1);

        return $i2;
    }

    public static int indexOf(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        return $i0;
    }

    public static int ordinalIndexOf(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.StringUtils: int ordinalIndexOf(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 0);

        return $i1;
    }

    private static int ordinalIndexOf(java.lang.String, java.lang.String, int, boolean)
    {
        java.lang.String r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 == null goto label01;

        if r1 == null goto label01;

        if i0 > 0 goto label02;

     label01:
        return -1;

     label02:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        if z0 == 0 goto label03;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label04;

     label03:
        $i4 = 0;

     label04:
        return $i4;

     label05:
        i5 = 0;

        if z0 == 0 goto label06;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label07;

     label06:
        $i6 = -1;

     label07:
        i7 = $i6;

     label08:
        if z0 == 0 goto label09;

        $i3 = i7 - 1;

        i7 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(r1, $i3);

        goto label10;

     label09:
        $i2 = i7 + 1;

        i7 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i2);

     label10:
        if i7 >= 0 goto label11;

        return i7;

     label11:
        i5 = i5 + 1;

        if i5 < i0 goto label08;

        return i7;
    }

    public static int indexOf(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 < $i3 goto label3;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        return $i4;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i0);

        return $i2;
    }

    public static int indexOfIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOfIgnoreCase(java.lang.String,java.lang.String,int)>(r0, r1, 0);

        return $i0;
    }

    public static int indexOfIgnoreCase(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i6 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        if i6 >= 0 goto label3;

        i6 = 0;

     label3:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        i0 = $i3 + 1;

        if i6 <= i0 goto label4;

        return -1;

     label4:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 != 0 goto label5;

        return i6;

     label5:
        i7 = i6;

     label6:
        if i7 >= i0 goto label8;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i7, r1, 0, $i5);

        if $z0 == 0 goto label7;

        return i7;

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        return -1;
    }

    public static int lastIndexOf(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        boolean $z0;
        int $i1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(c0);

        return $i1;
    }

    public static int lastIndexOf(java.lang.String, char, int)
    {
        java.lang.String r0;
        char c0;
        int i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(c0, i1);

        return $i2;
    }

    public static int lastIndexOf(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        return $i0;
    }

    public static int lastOrdinalIndexOf(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.StringUtils: int ordinalIndexOf(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 1);

        return $i1;
    }

    public static int lastIndexOf(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public static int lastIndexOfIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <org.apache.commons.lang.StringUtils: int lastIndexOfIgnoreCase(java.lang.String,java.lang.String,int)>(r0, r1, $i0);

        return $i1;
    }

    public static int lastIndexOfIgnoreCase(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        if i7 <= $i2 goto label3;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        i7 = $i5 - $i6;

     label3:
        if i7 >= 0 goto label4;

        return -1;

     label4:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 != 0 goto label5;

        return i7;

     label5:
        i8 = i7;

     label6:
        if i8 < 0 goto label8;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i8, r1, 0, $i4);

        if $z0 == 0 goto label7;

        return i8;

     label7:
        i8 = i8 + -1;

        goto label6;

     label8:
        return -1;
    }

    public static boolean contains(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        boolean $z0, $z1;
        int $i1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c0);

        if $i1 < 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean contains(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if $i0 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean containsIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = $i2 - i0;

        i3 = 0;

     label3:
        if i3 > i1 goto label5;

        $z0 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r1, 0, i0);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static int indexOfAny(java.lang.String, char[])
    {
        java.lang.String r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label8;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label7;

        $c5 = r1[i11];

        if $c5 != c4 goto label6;

        if i10 >= i1 goto label5;

        if i11 >= i3 goto label5;

        $z2 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label5;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != $c9 goto label6;

        return i10;

     label5:
        return i10;

     label6:
        i11 = i11 + 1;

        goto label4;

     label7:
        i10 = i10 + 1;

        goto label3;

     label8:
        return -1;
    }

    public static int indexOfAny(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;
        char[] $r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i0 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOfAny(java.lang.String,char[])>(r0, $r2);

        return $i0;
    }

    public static boolean containsAny(java.lang.String, char[])
    {
        java.lang.String r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = lengthof r1;

        i2 = i0 - 1;

        i3 = i1 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label9;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i1 goto label8;

        $c5 = r1[i11];

        if $c5 != c4 goto label7;

        $z2 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label6;

        if i11 != i3 goto label5;

        return 1;

     label5:
        if i10 >= i2 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != $c9 goto label7;

        return 1;

     label6:
        return 1;

     label7:
        i11 = i11 + 1;

        goto label4;

     label8:
        i10 = i10 + 1;

        goto label3;

     label9:
        return 0;
    }

    public static boolean containsAny(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean containsAny(java.lang.String,char[])>(r0, $r2);

        return $z0;
    }

    public static int indexOfAnyBut(java.lang.String, char[])
    {
        java.lang.String r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label8;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label6;

        $c5 = r1[i11];

        if $c5 != c4 goto label5;

        if i10 >= i1 goto label7;

        if i11 >= i3 goto label7;

        $z2 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != $c9 goto label5;

        goto label7;

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        return i10;

     label7:
        i10 = i10 + 1;

        goto label3;

     label8:
        return -1;
    }

    public static int indexOfAnyBut(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, $i3, $i4, $i5, $i6, i7;
        char c1, c2;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z2 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i7 = 0;

     label3:
        if i7 >= i0 goto label9;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c1);

        if $i3 < 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z0 = $z4;

        $i4 = i7 + 1;

        if $i4 >= i0 goto label7;

        $z3 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isHighSurrogate(char)>(c1);

        if $z3 == 0 goto label7;

        $i5 = i7 + 1;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        if $z4 == 0 goto label6;

        $i6 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c2);

        if $i6 >= 0 goto label6;

        return i7;

     label6:
        goto label8;

     label7:
        if z0 != 0 goto label8;

        return i7;

     label8:
        i7 = i7 + 1;

        goto label3;

     label9:
        return -1;
    }

    public static boolean containsOnly(java.lang.String, char[])
    {
        java.lang.String r0;
        char[] r1;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        if r1 == null goto label1;

        if r0 != null goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        return 1;

     label3:
        $i1 = lengthof r1;

        if $i1 != 0 goto label4;

        return 0;

     label4:
        $i2 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOfAnyBut(java.lang.String,char[])>(r0, r1);

        if $i2 != -1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public static boolean containsOnly(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean containsOnly(java.lang.String,char[])>(r0, $r2);

        return $z0;
    }

    public static boolean containsNone(java.lang.String, char[])
    {
        java.lang.String r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 1;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label9;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label8;

        $c5 = r1[i11];

        if $c5 != c4 goto label7;

        $z0 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isHighSurrogate(char)>(c4);

        if $z0 == 0 goto label6;

        if i11 != i3 goto label5;

        return 0;

     label5:
        if i10 >= i1 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != $c9 goto label7;

        return 0;

     label6:
        return 0;

     label7:
        i11 = i11 + 1;

        goto label4;

     label8:
        i10 = i10 + 1;

        goto label3;

     label9:
        return 1;
    }

    public static boolean containsNone(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean containsNone(java.lang.String,char[])>(r0, $r2);

        return $z0;
    }

    public static int indexOfAny(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        i0 = lengthof r1;

        i1 = 2147483647;

        i2 = 0;

     label3:
        if i2 >= i0 goto label7;

        r2 = r1[i2];

        if r2 != null goto label4;

        goto label6;

     label4:
        i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r2);

        if i3 != -1 goto label5;

        goto label6;

     label5:
        if i3 >= i1 goto label6;

        i1 = i3;

     label6:
        i2 = i2 + 1;

        goto label3;

     label7:
        if i1 != 2147483647 goto label8;

        $i4 = -1;

        goto label9;

     label8:
        $i4 = i1;

     label9:
        return $i4;
    }

    public static int lastIndexOfAny(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        i0 = lengthof r1;

        i1 = -1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r2 = r1[i2];

        if r2 != null goto label4;

        goto label5;

     label4:
        i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r2);

        if i3 <= i1 goto label5;

        i1 = i3;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return i1;
    }

    public static java.lang.String substring(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i1 + i2;

     label2:
        if i2 >= 0 goto label3;

        i2 = 0;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 <= $i0 goto label4;

        return "";

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        return $r1;
    }

    public static java.lang.String substring(java.lang.String, int, int)
    {
        java.lang.String r0, $r1;
        int $i0, $i1, $i2, i3, i4;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i4 >= 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = $i2 + i4;

     label2:
        if i3 >= 0 goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i1 + i3;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 <= $i0 goto label4;

        i4 = virtualinvoke r0.<java.lang.String: int length()>();

     label4:
        if i3 <= i4 goto label5;

        return "";

     label5:
        if i3 >= 0 goto label6;

        i3 = 0;

     label6:
        if i4 >= 0 goto label7;

        i4 = 0;

     label7:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        return $r1;
    }

    public static java.lang.String left(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 0 goto label2;

        return "";

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r1;
    }

    public static java.lang.String right(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 0 goto label2;

        return "";

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - i0;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        return $r1;
    }

    public static java.lang.String mid(java.lang.String, int, int)
    {
        java.lang.String r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 <= $i1 goto label3;

     label2:
        return "";

     label3:
        if i5 >= 0 goto label4;

        i5 = 0;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = i5 + i0;

        if $i2 > $i3 goto label5;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        return $r2;

     label5:
        $i4 = i5 + i0;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, $i4);

        return $r1;
    }

    public static java.lang.String substringBefore(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        return "";

     label3:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label4;

        return r0;

     label4:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static java.lang.String substringAfter(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        if r1 != null goto label2;

        return "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label3;

        return "";

     label3:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r2;
    }

    public static java.lang.String substringBeforeLast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        if i0 != -1 goto label3;

        return r0;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static java.lang.String substringAfterLast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        return "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        if i0 == -1 goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        if i0 != $i3 goto label4;

     label3:
        return "";

     label4:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        return $r2;
    }

    public static java.lang.String substringBetween(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r1);

        return $r2;
    }

    public static java.lang.String substringBetween(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 == -1 goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r2, $i3);

        if i1 == -1 goto label3;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, i1);

        return $r3;

     label3:
        return null;
    }

    public static java.lang.String[] substringsBetween(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r9;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r4;
        java.lang.String[] $r5, $r7, $r8, $r10;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label3;

        $r10 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r10;

     label3:
        i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label4:
        $i4 = i0 - i1;

        if i6 >= $i4 goto label7;

        i7 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i6);

        if i7 >= 0 goto label5;

        goto label7;

     label5:
        i8 = i7 + i2;

        i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r2, i8);

        if i3 >= 0 goto label6;

        goto label7;

     label6:
        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        i6 = i3 + i1;

        goto label4;

     label7:
        $z3 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label8;

        return null;

     label8:
        $i5 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i5];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static java.lang.String getNestedString(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r1);

        return $r2;
    }

    public static java.lang.String getNestedString(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static java.lang.String[] split(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>(r0, null, -1);

        return $r1;
    }

    public static java.lang.String[] split(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(r0, c0, 0);

        return $r1;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 0);

        return $r2;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 1);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 1);

        return $r2;
    }

    private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, $r4, $r10, $r11, $r12, $r13;
        int i0, i1, i2, $i3, i4, i5, i6;
        boolean z0, $z1;
        java.lang.String[] $r3, $r6, $r8, $r9, $r14;
        java.util.ArrayList $r5;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        $r14 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r14;

     label02:
        if r1 == null goto label03;

        $r4 = "";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label04;

     label03:
        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, null, i0, z0);

        return $r3;

     label04:
        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label05:
        if i6 >= i1 goto label11;

        i6 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i5);

        if i6 <= -1 goto label10;

        if i6 <= i5 goto label07;

        i4 = i4 + 1;

        if i4 != i0 goto label06;

        i6 = i1;

        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label05;

     label06:
        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        i5 = i6 + i2;

        goto label05;

     label07:
        if z0 == 0 goto label09;

        i4 = i4 + 1;

        if i4 != i0 goto label08;

        i6 = i1;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label09;

     label08:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>("");

     label09:
        i5 = i6 + i2;

        goto label05;

     label10:
        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        i6 = i1;

        goto label05;

     label11:
        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = newarray (java.lang.String)[$i3];

        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = (java.lang.String[]) $r8;

        return $r9;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, null, -1, 1);

        return $r1;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(r0, c0, 1);

        return $r1;
    }

    private static java.lang.String[] splitWorker(java.lang.String, char, boolean)
    {
        java.lang.String r0, $r3, $r4;
        char c0, $c2;
        boolean z0, z3, z4;
        int i1, i3, i4, $i5;
        java.util.ArrayList $r2;
        java.lang.String[] $r5, $r6, $r8, $r9;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label2;

        $r5 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r5;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        i4 = 0;

        z3 = 0;

        z4 = 0;

     label3:
        if i3 >= i1 goto label7;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 != c0 goto label6;

        if z3 != 0 goto label4;

        if z0 == 0 goto label5;

     label4:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        z3 = 0;

        z4 = 1;

     label5:
        i3 = i3 + 1;

        i4 = i3;

        goto label3;

     label6:
        z4 = 0;

        z3 = 1;

        i3 = i3 + 1;

        goto label3;

     label7:
        if z3 != 0 goto label8;

        if z0 == 0 goto label9;

        if z4 == 0 goto label9;

     label8:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label9:
        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i5];

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = (java.lang.String[]) $r8;

        return $r9;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 1);

        return $r2;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 1);

        return $r2;
    }

    private static java.lang.String[] splitWorker(java.lang.String, java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, $r4, $r5, $r6, $r7;
        int i0, i1, $i3, $i5, $i6, $i8, $i10, i11, i12, i13, $i14;
        boolean z0, $z4, z6, z7;
        char c2, $c4, $c7, $c9;
        java.util.ArrayList $r3;
        java.lang.String[] $r8, $r9, $r11, $r12;
        java.lang.Object[] $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        $r8 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r8;

     label02:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i11 = 1;

        i12 = 0;

        i13 = 0;

        z6 = 0;

        z7 = 0;

        if r1 != null goto label08;

     label03:
        if i12 >= i1 goto label20;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $z4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c9);

        if $z4 == 0 goto label07;

        if z6 != 0 goto label04;

        if z0 == 0 goto label06;

     label04:
        z7 = 1;

        $i10 = i11;

        i11 = i11 + 1;

        if $i10 != i0 goto label05;

        i12 = i1;

        z7 = 0;

     label05:
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        z6 = 0;

     label06:
        i12 = i12 + 1;

        i13 = i12;

        goto label03;

     label07:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label03;

     label08:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 != 1 goto label15;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

     label09:
        if i12 >= i1 goto label14;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        if $c7 != c2 goto label13;

        if z6 != 0 goto label10;

        if z0 == 0 goto label12;

     label10:
        z7 = 1;

        $i8 = i11;

        i11 = i11 + 1;

        if $i8 != i0 goto label11;

        i12 = i1;

        z7 = 0;

     label11:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        z6 = 0;

     label12:
        i12 = i12 + 1;

        i13 = i12;

        goto label09;

     label13:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label09;

     label14:
        goto label20;

     label15:
        if i12 >= i1 goto label20;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i5 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c4);

        if $i5 < 0 goto label19;

        if z6 != 0 goto label16;

        if z0 == 0 goto label18;

     label16:
        z7 = 1;

        $i6 = i11;

        i11 = i11 + 1;

        if $i6 != i0 goto label17;

        i12 = i1;

        z7 = 0;

     label17:
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        z6 = 0;

     label18:
        i12 = i12 + 1;

        i13 = i12;

        goto label15;

     label19:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label15;

     label20:
        if z6 != 0 goto label21;

        if z0 == 0 goto label22;

        if z7 == 0 goto label22;

     label21:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label22:
        $i14 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r9 = newarray (java.lang.String)[$i14];

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        $r12 = (java.lang.String[]) $r11;

        return $r12;
    }

    public static java.lang.String[] splitByCharacterType(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    private static java.lang.String[] splitByCharacterType(java.lang.String, boolean)
    {
        java.lang.String r0, $r4, $r9, $r11;
        boolean z0;
        char[] r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i9, i10, i11, i12, $i13;
        java.util.ArrayList $r3;
        char $c3, $c8;
        java.lang.String[] $r5, $r7, $r8, $r10;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

        $r10 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r10;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i10 = 0;

        $c3 = r1[0];

        i11 = staticinvoke <java.lang.Character: int getType(char)>($c3);

        i12 = 0 + 1;

     label3:
        $i4 = lengthof r1;

        if i12 >= $i4 goto label9;

        $c8 = r1[i12];

        i0 = staticinvoke <java.lang.Character: int getType(char)>($c8);

        if i0 != i11 goto label4;

        goto label8;

     label4:
        if z0 == 0 goto label6;

        if i0 != 2 goto label6;

        if i11 != 1 goto label6;

        i1 = i12 - 1;

        if i1 == i10 goto label5;

        $r9 = new java.lang.String;

        $i9 = i1 - i10;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r1, i10, $i9);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        i10 = i1;

     label5:
        goto label7;

     label6:
        $r11 = new java.lang.String;

        $i13 = i12 - i10;

        specialinvoke $r11.<java.lang.String: void <init>(char[],int,int)>(r1, i10, $i13);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        i10 = i12;

     label7:
        i11 = i0;

     label8:
        i12 = i12 + 1;

        goto label3;

     label9:
        $r4 = new java.lang.String;

        $i5 = lengthof r1;

        $i6 = $i5 - i10;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, i10, $i6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i7 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i7];

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static java.lang.String concatenate(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String join(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String join(java.lang.Object[], char)
    {
        java.lang.Object[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(java.lang.Object[], char, int, int)
    {
        java.lang.Object[] r0;
        char c0;
        int i1, i2, $i3, i5, $i6, i7, i8;
        java.lang.Object $r2, $r3, $r7, $r8;
        java.lang.String $r4, $r6;
        org.apache.commons.lang.text.StrBuilder $r5;

        r0 := @parameter0: java.lang.Object[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i5 = i2 - i1;

        if i5 > 0 goto label2;

        return "";

     label2:
        $r2 = r0[i1];

        if $r2 != null goto label3;

        $i6 = 16;

        goto label4;

     label3:
        $r3 = r0[i1];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $i6 = virtualinvoke $r4.<java.lang.String: int length()>();

     label4:
        $i3 = $i6 + 1;

        i7 = i5 * $i3;

        $r5 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r5.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(i7);

        i8 = i1;

     label5:
        if i8 >= i2 goto label8;

        if i8 <= i1 goto label6;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c0);

     label6:
        $r7 = r0[i8];

        if $r7 == null goto label7;

        $r8 = r0[i8];

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r8);

     label7:
        i8 = i8 + 1;

        goto label5;

     label8:
        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String join(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>(r0, r1, 0, $i0);

        return $r2;
    }

    public static java.lang.String join(java.lang.Object[], java.lang.String, int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3, i5, $i6, i7, i8;
        java.lang.Object $r2, $r3, $r7, $r8;
        java.lang.String $r4, $r6, r11;
        org.apache.commons.lang.text.StrBuilder $r5;

        r0 := @parameter0: java.lang.Object[];

        r11 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        if r11 != null goto label2;

        r11 = "";

     label2:
        i5 = i1 - i0;

        if i5 > 0 goto label3;

        return "";

     label3:
        $r2 = r0[i0];

        if $r2 != null goto label4;

        $i6 = 16;

        goto label5;

     label4:
        $r3 = r0[i0];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $i6 = virtualinvoke $r4.<java.lang.String: int length()>();

     label5:
        $i2 = virtualinvoke r11.<java.lang.String: int length()>();

        $i3 = $i6 + $i2;

        i7 = i5 * $i3;

        $r5 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r5.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(i7);

        i8 = i0;

     label6:
        if i8 >= i1 goto label9;

        if i8 <= i0 goto label7;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r11);

     label7:
        $r7 = r0[i8];

        if $r7 == null goto label8;

        $r8 = r0[i8];

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r8);

     label8:
        i8 = i8 + 1;

        goto label6;

     label9:
        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String join(java.util.Iterator, char)
    {
        java.util.Iterator r0;
        char c0;
        java.lang.Object r1, r3;
        boolean $z0, $z1, $z2;
        org.apache.commons.lang.text.StrBuilder $r4;
        java.lang.String $r5, $r9;

        r0 := @parameter0: java.util.Iterator;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return "";

     label2:
        r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r9 = staticinvoke <org.apache.commons.lang.ObjectUtils: java.lang.String toString(java.lang.Object)>(r1);

        return $r9;

     label3:
        $r4 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(256);

        if r1 == null goto label4;

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r1);

     label4:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c0);

        r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if r3 == null goto label5;

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r3);

     label5:
        goto label4;

     label6:
        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String join(java.util.Iterator, java.lang.String)
    {
        java.util.Iterator r0;
        java.lang.String r1, $r6, $r10;
        java.lang.Object r2, r4;
        boolean $z0, $z1, $z2;
        org.apache.commons.lang.text.StrBuilder $r5;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return "";

     label2:
        r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r10 = staticinvoke <org.apache.commons.lang.ObjectUtils: java.lang.String toString(java.lang.Object)>(r2);

        return $r10;

     label3:
        $r5 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r5.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(256);

        if r2 == null goto label4;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r2);

     label4:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        if r1 == null goto label5;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r1);

     label5:
        r4 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if r4 == null goto label6;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>(r4);

     label6:
        goto label4;

     label7:
        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String join(java.util.Collection, char)
    {
        java.util.Collection r0;
        char c0;
        java.util.Iterator $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.Collection;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Iterator,char)>($r1, c0);

        return $r2;
    }

    public static java.lang.String join(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1, $r3;
        java.util.Iterator $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($r2, r1);

        return $r3;
    }

    public static java.lang.String deleteSpaces(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.CharSetUtils: java.lang.String delete(java.lang.String,java.lang.String)>(r0, " \t\r\n\u0008");

        return $r1;
    }

    public static java.lang.String deleteWhitespace(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, $i2, i4, i5;
        char[] r1;
        boolean $z0, $z1;
        char $c1, $c3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[i0];

        i4 = 0;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label3;

        $i2 = i4;

        i4 = i4 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        r1[$i2] = $c3;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        if i4 != i0 goto label5;

        return r0;

     label5:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i4);

        return $r2;
    }

    public static java.lang.String removeStart(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeStartIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)>(r0, r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeEnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeEndIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean endsWithIgnoreCase(java.lang.String,java.lang.String)>(r0, r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String remove(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, "", -1);

        return $r2;
    }

    public static java.lang.String remove(java.lang.String, char)
    {
        java.lang.String r0, $r2;
        char c0, $c3, $c5;
        char[] r1;
        boolean $z0;
        int $i1, $i2, $i4, i6, i7;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c0);

        if $i1 != -1 goto label2;

     label1:
        return r0;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i6 = 0;

        i7 = 0;

     label3:
        $i2 = lengthof r1;

        if i7 >= $i2 goto label5;

        $c3 = r1[i7];

        if $c3 == c0 goto label4;

        $i4 = i6;

        i6 = i6 + 1;

        $c5 = r1[i7];

        r1[$i4] = $c5;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i6);

        return $r2;
    }

    public static java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, r2, 1);

        return $r3;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, r2, -1);

        return $r3;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, r2, $r4, $r6, $r7;
        int i0, $i1, i2, i3, i4, i5, $i6, i7, $i9, i10, $i11, $i12;
        boolean $z0, $z1;
        org.apache.commons.lang.text.StrBuilder $r8, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 != 0 goto label01;

        if r2 == null goto label01;

        if i2 != 0 goto label02;

     label01:
        return r0;

     label02:
        i3 = 0;

        i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, 0);

        if i4 != -1 goto label03;

        return r0;

     label03:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = $i1 - i0;

        if i5 >= 0 goto label04;

        $i6 = 0;

        goto label05;

     label04:
        $i6 = i5;

     label05:
        i7 = $i6;

        if i2 >= 0 goto label06;

        $i9 = 16;

        goto label08;

     label06:
        if i2 <= 64 goto label07;

        $i9 = 64;

        goto label08;

     label07:
        $i9 = i2;

     label08:
        i10 = i7 * $i9;

        $r10 = new org.apache.commons.lang.text.StrBuilder;

        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        $i12 = $i11 + i10;

        specialinvoke $r10.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i12);

     label09:
        if i4 == -1 goto label11;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        $r8 = virtualinvoke $r10.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r2);

        i3 = i4 + i0;

        i2 = i2 + -1;

        if i2 != 0 goto label10;

        goto label11;

     label10:
        i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i3);

        goto label09;

     label11:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke $r10.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r10.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r0, r1, r2, 0, 0);

        return $r3;
    }

    public static java.lang.String replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1, r2;
        int $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r0, r1, r2, 1, $i1);

        return $r3;
    }

    private static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int)
    {
        java.lang.String r0, $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r29, $r36, r38;
        java.lang.String[] r1, r2;
        boolean z0, $z1, $z2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, i20, i21, i23, i24, i25, i26, i27, i28, i29, i30, i32, i33, i34, i35;
        boolean[] r3;
        org.apache.commons.lang.text.StrBuilder $r4;
        char $c12, $c15;
        java.lang.IllegalArgumentException $r23;
        java.lang.StringBuffer $r24, $r25, $r26, $r27, $r28, $r31, $r32, $r33, $r34, $r35;
        java.lang.IllegalStateException $r30;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        if r0 == null goto label01;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 == 0 goto label01;

        if r1 == null goto label01;

        $i4 = lengthof r1;

        if $i4 == 0 goto label01;

        if r2 == null goto label01;

        $i5 = lengthof r2;

        if $i5 != 0 goto label02;

     label01:
        return r0;

     label02:
        if i0 >= 0 goto label03;

        $r30 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TimeToLive of ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is less than 0: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r36);

        throw $r30;

     label03:
        i1 = lengthof r1;

        i2 = lengthof r2;

        if i1 == i2 goto label04;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Search and Replace array lengths don\'t match: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" vs ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label04:
        r3 = newarray (boolean)[i1];

        i20 = -1;

        i21 = -1;

        i23 = 0;

     label05:
        if i23 >= i1 goto label10;

        $z2 = r3[i23];

        if $z2 != 0 goto label09;

        $r19 = r1[i23];

        if $r19 == null goto label09;

        $r20 = r1[i23];

        $i19 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i19 == 0 goto label09;

        $r21 = r2[i23];

        if $r21 != null goto label06;

        goto label09;

     label06:
        $r22 = r1[i23];

        i24 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r22);

        if i24 != -1 goto label07;

        r3[i23] = 1;

        goto label09;

     label07:
        if i20 == -1 goto label08;

        if i24 >= i20 goto label09;

     label08:
        i20 = i24;

        i21 = i23;

     label09:
        i23 = i23 + 1;

        goto label05;

     label10:
        if i20 != -1 goto label11;

        return r0;

     label11:
        i25 = 0;

        i26 = 0;

        i27 = 0;

     label12:
        $i6 = lengthof r1;

        if i27 >= $i6 goto label15;

        $r15 = r1[i27];

        if $r15 == null goto label14;

        $r16 = r2[i27];

        if $r16 != null goto label13;

        goto label14;

     label13:
        $r17 = r2[i27];

        $i16 = virtualinvoke $r17.<java.lang.String: int length()>();

        $r18 = r1[i27];

        $i17 = virtualinvoke $r18.<java.lang.String: int length()>();

        i28 = $i16 - $i17;

        if i28 <= 0 goto label14;

        $i18 = 3 * i28;

        i26 = i26 + $i18;

     label14:
        i27 = i27 + 1;

        goto label12;

     label15:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = $i7 / 5;

        i29 = staticinvoke <java.lang.Math: int min(int,int)>(i26, $i8);

        $r4 = new org.apache.commons.lang.text.StrBuilder;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        $i10 = $i9 + i29;

        specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i10);

     label16:
        if i20 == -1 goto label25;

        i30 = i25;

     label17:
        if i30 >= i20 goto label18;

        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i30);

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c15);

        i30 = i30 + 1;

        goto label17;

     label18:
        $r7 = r2[i21];

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r7);

        $r9 = r1[i21];

        $i13 = virtualinvoke $r9.<java.lang.String: int length()>();

        i25 = i20 + $i13;

        i20 = -1;

        i21 = -1;

        i32 = 0;

     label19:
        if i32 >= i1 goto label24;

        $z1 = r3[i32];

        if $z1 != 0 goto label23;

        $r10 = r1[i32];

        if $r10 == null goto label23;

        $r11 = r1[i32];

        $i14 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i14 == 0 goto label23;

        $r12 = r2[i32];

        if $r12 != null goto label20;

        goto label23;

     label20:
        $r13 = r1[i32];

        i33 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>($r13, i25);

        if i33 != -1 goto label21;

        r3[i32] = 1;

        goto label23;

     label21:
        if i20 == -1 goto label22;

        if i33 >= i20 goto label23;

     label22:
        i20 = i33;

        i21 = i32;

     label23:
        i32 = i32 + 1;

        goto label19;

     label24:
        goto label16;

     label25:
        i34 = virtualinvoke r0.<java.lang.String: int length()>();

        i35 = i25;

     label26:
        if i35 >= i34 goto label27;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i35);

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c12);

        i35 = i35 + 1;

        goto label26;

     label27:
        r38 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        if z0 != 0 goto label28;

        return r38;

     label28:
        $i11 = i0 - 1;

        $r5 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r38, r1, r2, z0, $i11);

        return $r5;
    }

    public static java.lang.String replaceChars(java.lang.String, char, char)
    {
        java.lang.String r0, $r1;
        char c0, c1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(c0, c1);

        return $r1;
    }

    public static java.lang.String replaceChars(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4, r7;
        int i0, i1, i3, i5;
        char c2, $c4;
        boolean $z0, $z1, z2;
        org.apache.commons.lang.text.StrBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        if r7 != null goto label3;

        r7 = "";

     label3:
        z2 = 0;

        i0 = virtualinvoke r7.<java.lang.String: int length()>();

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r3.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(i1);

        i5 = 0;

     label4:
        if i5 >= i1 goto label7;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c2);

        if i3 < 0 goto label5;

        z2 = 1;

        if i3 >= i0 goto label6;

        $c4 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i3);

        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c4);

        goto label6;

     label5:
        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c2);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        if z2 == 0 goto label8;

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r4;

     label8:
        return r0;
    }

    public static java.lang.String overlayString(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String r0, r1, $r3, $r6, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.lang.text.StrBuilder $r2, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = new org.apache.commons.lang.text.StrBuilder;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $i6 = $i5 - i1;

        $i7 = $i6 + 1;

        specialinvoke $r2.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i7);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

        $r7 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String overlay(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String r0, $r2, $r5, $r7, r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.commons.lang.text.StrBuilder $r1, $r3, $r4, $r6;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        if r8 != null goto label2;

        r8 = "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= 0 goto label3;

        i7 = 0;

     label3:
        if i7 <= i0 goto label4;

        i7 = i0;

     label4:
        if i8 >= 0 goto label5;

        i8 = 0;

     label5:
        if i8 <= i0 goto label6;

        i8 = i0;

     label6:
        if i7 <= i8 goto label7;

        i1 = i7;

        i7 = i8;

        i8 = i1;

     label7:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        $i2 = i0 + i7;

        $i3 = $i2 - i8;

        $i4 = virtualinvoke r8.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $i6 = $i5 + 1;

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i6);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        $r3 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r8);

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i8);

        $r6 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String chomp(java.lang.String)
    {
        java.lang.String r0, $r1;
        char c0, $c4, c5;
        boolean $z0;
        int $i1, $i2, $i3, i6;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 1 goto label4;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c5 == 13 goto label2;

        if c5 != 10 goto label3;

     label2:
        return "";

     label3:
        return r0;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = $i2 - 1;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if c0 != 10 goto label5;

        $i3 = i6 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 13 goto label6;

        i6 = i6 + -1;

        goto label6;

     label5:
        if c0 == 13 goto label6;

        i6 = i6 + 1;

     label6:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        return $r1;
    }

    public static java.lang.String chomp(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String chompLast(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String chompLast(java.lang.String,java.lang.String)>(r0, "\n");

        return $r1;
    }

    public static java.lang.String chompLast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i4 - $i5;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        return $r3;

     label2:
        return r0;
    }

    public static java.lang.String getChomp(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        if i0 != $i3 goto label1;

        return r1;

     label1:
        if i0 == -1 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r2;

     label2:
        return "";
    }

    public static java.lang.String prechomp(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r2;
    }

    public static java.lang.String getPrechomp(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label1;

        return "";

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;
    }

    public static java.lang.String chop(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, i1, $i3, $i5;
        char c2, $c4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= 2 goto label2;

        return "";

     label2:
        i1 = i0 - 1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 != 10 goto label3;

        $i3 = i1 - 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 13 goto label3;

        $i5 = i1 - 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        return $r2;

     label3:
        return r1;
    }

    public static java.lang.String chopNewline(java.lang.String)
    {
        java.lang.String r0, $r1;
        char c0, $c3;
        int $i1, $i2, i4;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = $i1 - 1;

        if i4 > 0 goto label1;

        return "";

     label1:
        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        if c0 != 10 goto label2;

        $i2 = i4 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 13 goto label3;

        i4 = i4 + -1;

        goto label3;

     label2:
        i4 = i4 + 1;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        return $r1;
    }

    public static java.lang.String escape(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeJava(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String repeat(java.lang.String, int)
    {
        java.lang.String r0, $r3, $r4, $r6, $r8;
        int i0, i1, i2, $i5, $i6, i8, i10, i11, i12;
        char c3, c4, $c7, c9;
        char[] r1, r2;
        org.apache.commons.lang.text.StrBuilder $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label01;

        return null;

     label01:
        if i0 > 0 goto label02;

        return "";

     label02:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 == 1 goto label03;

        if i1 != 0 goto label04;

     label03:
        return r0;

     label04:
        if i1 != 1 goto label05;

        if i0 > 8192 goto label05;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r8 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String padding(int,char)>(i0, $c7);

        return $r8;

     label05:
        i2 = i1 * i0;

        lookupswitch(i1)
        {
            case 1: goto label06;
            case 2: goto label09;
            default: goto label12;
        };

     label06:
        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        r1 = newarray (char)[i2];

        i8 = i0 - 1;

     label07:
        if i8 < 0 goto label08;

        r1[i8] = c3;

        i8 = i8 + -1;

        goto label07;

     label08:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1);

        return $r4;

     label09:
        c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        r2 = newarray (char)[i2];

        $i5 = i0 * 2;

        i10 = $i5 - 2;

     label10:
        if i10 < 0 goto label11;

        r2[i10] = c9;

        $i6 = i10 + 1;

        r2[$i6] = c4;

        i11 = i10 + -1;

        i10 = i11 + -1;

        goto label10;

     label11:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r2);

        return $r3;

     label12:
        $r5 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r5.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(i2);

        i12 = 0;

     label13:
        if i12 >= i0 goto label14;

        virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r0);

        i12 = i12 + 1;

        goto label13;

     label14:
        $r6 = virtualinvoke $r5.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String repeat(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, r2, $r3, $r7, $r8;
        int i0;
        java.lang.StringBuffer $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String repeat(java.lang.String,int)>(r0, i0);

        return $r3;

     label2:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String repeat(java.lang.String,int)>($r7, i0);

        $r8 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(r2, r1);

        return $r8;
    }

    private static java.lang.String padding(int, char) throws java.lang.IndexOutOfBoundsException
    {
        int i0, $i2, i3;
        char c1;
        char[] r0;
        java.lang.String $r1, $r6;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuffer $r3, $r4, $r5;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot pad a negative amount: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0 = newarray (char)[i0];

        i3 = 0;

     label2:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label3;

        r0[i3] = c1;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static java.lang.String rightPad(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String rightPad(java.lang.String, int, char)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4;
        int i0, i2, $i3;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - $i3;

        if i2 > 0 goto label2;

        return r0;

     label2:
        if i2 <= 8192 goto label3;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(r0, i0, $r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String padding(int,char)>(i2, c1);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String rightPad(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        int i0, i1, i2, i3, $i4, i7;
        char[] r1, r2;
        boolean $z0;
        char $c5, $c6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r9);

        if $z0 == 0 goto label2;

        r9 = " ";

     label2:
        i1 = virtualinvoke r9.<java.lang.String: int length()>();

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        if i1 != 1 goto label4;

        if i3 > 8192 goto label4;

        $c6 = virtualinvoke r9.<java.lang.String: char charAt(int)>(0);

        $r8 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r0, i0, $c6);

        return $r8;

     label4:
        if i3 != i1 goto label5;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>(r9);

        return $r7;

     label5:
        if i3 >= i1 goto label6;

        $r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        return $r6;

     label6:
        r1 = newarray (char)[i3];

        r2 = virtualinvoke r9.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label7:
        if i7 >= i3 goto label8;

        $i4 = i7 % i1;

        $c5 = r2[$i4];

        r1[i7] = $c5;

        i7 = i7 + 1;

        goto label7;

     label8:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        return $r4;
    }

    public static java.lang.String leftPad(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String leftPad(java.lang.String, int, char)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4;
        int i0, i2, $i3;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - $i3;

        if i2 > 0 goto label2;

        return r0;

     label2:
        if i2 <= 8192 goto label3;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(r0, i0, $r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String padding(int,char)>(i2, c1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String leftPad(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        int i0, i1, i2, i3, $i4, i7;
        char[] r1, r2;
        boolean $z0;
        char $c5, $c6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r9);

        if $z0 == 0 goto label2;

        r9 = " ";

     label2:
        i1 = virtualinvoke r9.<java.lang.String: int length()>();

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        if i1 != 1 goto label4;

        if i3 > 8192 goto label4;

        $c6 = virtualinvoke r9.<java.lang.String: char charAt(int)>(0);

        $r8 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, i0, $c6);

        return $r8;

     label4:
        if i3 != i1 goto label5;

        $r7 = virtualinvoke r9.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r7;

     label5:
        if i3 >= i1 goto label6;

        $r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r6;

     label6:
        r1 = newarray (char)[i3];

        r2 = virtualinvoke r9.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label7:
        if i7 >= i3 goto label8;

        $i4 = i7 % i1;

        $c5 = r2[$i4];

        r1[i7] = $c5;

        i7 = i7 + 1;

        goto label7;

     label8:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r4;
    }

    public static int length(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        return $i0;
    }

    public static java.lang.String center(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String center(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String center(java.lang.String, int, char)
    {
        int i0, i2, i3, $i4, $i5;
        char c1;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 == null goto label1;

        if i0 > 0 goto label2;

     label1:
        return r0;

     label2:
        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        $i4 = i3 / 2;

        $i5 = i2 + $i4;

        r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, $i5, c1);

        r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r1, i0, c1);

        return r2;
    }

    public static java.lang.String center(java.lang.String, int, java.lang.String)
    {
        int i0, i1, i2, $i3, $i4;
        boolean $z0;
        java.lang.String r0, r1, r2, r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if i0 > 0 goto label2;

     label1:
        return r0;

     label2:
        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        r1 = " ";

     label3:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - i1;

        if i2 > 0 goto label4;

        return r0;

     label4:
        $i3 = i2 / 2;

        $i4 = i1 + $i3;

        r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(r0, $i4, r1);

        r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(r2, i0, r1);

        return r3;
    }

    public static java.lang.String upperCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        return $r1;
    }

    public static java.lang.String upperCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        return $r2;
    }

    public static java.lang.String lowerCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    public static java.lang.String lowerCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r1);

        return $r2;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        int $i1;
        org.apache.commons.lang.text.StrBuilder $r1, $r2, $r4;
        char $c2, $c3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toTitleCase(char)>($c2);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c3);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String capitalise(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String capitalize(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String uncapitalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        int $i1;
        org.apache.commons.lang.text.StrBuilder $r1, $r2, $r4;
        char $c2, $c3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i1);

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>($c3);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String uncapitalise(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String uncapitalize(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String swapCase(java.lang.String)
    {
        java.lang.String r0, $r3;
        int $i1, i2;
        org.apache.commons.lang.text.StrBuilder $r2;
        boolean $z0, $z1, $z2;
        char c3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r2 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r2.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i1);

        i2 = 0;

     label3:
        if i2 >= $i1 goto label7;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c3);

        if $z0 == 0 goto label4;

        c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c3);

        goto label6;

     label4:
        $z1 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(c3);

        if $z1 == 0 goto label5;

        c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c3);

        goto label6;

     label5:
        $z2 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c3);

        if $z2 == 0 goto label6;

        c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c3);

     label6:
        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c3);

        i2 = i2 + 1;

        goto label3;

     label7:
        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String capitaliseAllWords(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.WordUtils: java.lang.String capitalize(java.lang.String)>(r0);

        return $r1;
    }

    public static int countMatches(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i2 = 0;

        i3 = 0;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i3);

        if $i0 == -1 goto label4;

        i2 = i2 + 1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = $i0 + $i1;

        goto label3;

     label4:
        return i2;
    }

    public static boolean isAlpha(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphaSpace(java.lang.String)
    {
        java.lang.String r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphanumeric(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphanumericSpace(java.lang.String)
    {
        java.lang.String r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAsciiPrintable(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.commons.lang.CharUtils: boolean isAsciiPrintable(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isNumeric(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isNumericSpace(java.lang.String)
    {
        java.lang.String r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isWhitespace(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAllLowerCase(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static boolean isAllUpperCase(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static java.lang.String defaultString(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.lang.String defaultString(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String defaultIfBlank(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String defaultIfEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String reverse(java.lang.String)
    {
        java.lang.String r0, $r3;
        org.apache.commons.lang.text.StrBuilder $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder reverse()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String reverseDelimited(java.lang.String, char)
    {
        java.lang.String r0, $r2;
        char c0;
        java.lang.String[] r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,char)>(r0, c0);

        staticinvoke <org.apache.commons.lang.ArrayUtils: void reverse(java.lang.Object[])>(r1);

        $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],char)>(r1, c0);

        return $r2;
    }

    public static java.lang.String reverseDelimitedString(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r4;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, r1);

        staticinvoke <org.apache.commons.lang.ArrayUtils: void reverse(java.lang.Object[])>(r2);

        if r1 != null goto label2;

        $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],char)>(r2, 32);

        return $r4;

     label2:
        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(r2, r1);

        return $r3;
    }

    public static java.lang.String abbreviate(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>(r0, 0, i0);

        return $r1;
    }

    public static java.lang.String abbreviate(java.lang.String, int, int)
    {
        java.lang.String r0, $r3, $r5, $r8, $r9, $r11, $r14, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        java.lang.StringBuffer $r1, $r2, $r4, $r6, $r7, $r10, $r13, $r15, $r16;
        java.lang.IllegalArgumentException $r12, $r18;

        r0 := @parameter0: java.lang.String;

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 4 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum abbreviation width is 4");

        throw $r18;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i16 <= $i2 goto label4;

        i16 = virtualinvoke r0.<java.lang.String: int length()>();

     label4:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i3 - i16;

        $i4 = i0 - 3;

        if $i5 >= $i4 goto label5;

        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        $i15 = i0 - 3;

        i16 = $i14 - $i15;

     label5:
        if i16 > 4 goto label6;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $i13 = i0 - 3;

        $r14 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;

     label6:
        if i0 >= 7 goto label7;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum abbreviation width with offset is 7");

        throw $r12;

     label7:
        $i6 = i0 - 3;

        $i7 = i16 + $i6;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i7 >= $i8 goto label8;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i16);

        $i12 = i0 - 3;

        $r9 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String abbreviate(java.lang.String,int)>($r8, $i12);

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label8:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        $i10 = i0 - 3;

        $i11 = $i9 - $i10;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i11);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String abbreviateMiddle(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, $r4, $r7, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;
        org.apache.commons.lang.text.StrBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i4 goto label3;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 + 2;

        if i0 >= $i6 goto label4;

     label3:
        return r0;

     label4:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = i0 - $i7;

        $i9 = i1 / 2;

        $i8 = i1 % 2;

        i2 = $i9 + $i8;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = i1 / 2;

        i3 = $i10 - $i11;

        $r3 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r3.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(i0);

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String difference(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        i0 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOfDifference(java.lang.String,java.lang.String)>(r0, r1);

        if i0 != -1 goto label3;

        return "";

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r2;
    }

    public static int indexOfDifference(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0, $i1, $i2, i5, $i6;
        char $c3, $c4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != r1 goto label1;

        return -1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        i5 = 0;

     label4:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i0 goto label6;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i2 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if $c3 == $c4 goto label5;

        goto label6;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 < $i6 goto label7;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i1 goto label8;

     label7:
        return i5;

     label8:
        return -1;
    }

    public static int indexOfDifference(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i2, $i4, $i5, i6, i7, i8, i9, i10, i11;
        char c1, $c3;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        boolean z0, z1;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label01;

        $i2 = lengthof r0;

        if $i2 > 1 goto label02;

     label01:
        return -1;

     label02:
        z0 = 0;

        z1 = 1;

        i0 = lengthof r0;

        i6 = 2147483647;

        i7 = 0;

        i8 = 0;

     label03:
        if i8 >= i0 goto label06;

        $r3 = r0[i8];

        if $r3 != null goto label04;

        z0 = 1;

        i6 = 0;

        goto label05;

     label04:
        z1 = 0;

        $r4 = r0[i8];

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i6);

        $r5 = r0[i8];

        $i5 = virtualinvoke $r5.<java.lang.String: int length()>();

        i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i7);

     label05:
        i8 = i8 + 1;

        goto label03;

     label06:
        if z1 != 0 goto label07;

        if i7 != 0 goto label08;

        if z0 != 0 goto label08;

     label07:
        return -1;

     label08:
        if i6 != 0 goto label09;

        return 0;

     label09:
        i9 = -1;

        i10 = 0;

     label10:
        if i10 >= i6 goto label15;

        $r1 = r0[0];

        c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i10);

        i11 = 1;

     label11:
        if i11 >= i0 goto label13;

        $r2 = r0[i11];

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i10);

        if $c3 == c1 goto label12;

        i9 = i10;

        goto label13;

     label12:
        i11 = i11 + 1;

        goto label11;

     label13:
        if i9 == -1 goto label14;

        goto label15;

     label14:
        i10 = i10 + 1;

        goto label10;

     label15:
        if i9 != -1 goto label16;

        if i6 == i7 goto label16;

        return i6;

     label16:
        return i9;
    }

    public static java.lang.String getCommonPrefix(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i1;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        return "";

     label2:
        i0 = staticinvoke <org.apache.commons.lang.StringUtils: int indexOfDifference(java.lang.String[])>(r0);

        if i0 != -1 goto label4;

        $r3 = r0[0];

        if $r3 != null goto label3;

        return "";

     label3:
        $r4 = r0[0];

        return $r4;

     label4:
        if i0 != 0 goto label5;

        return "";

     label5:
        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static int getLevenshteinDistance(java.lang.String, java.lang.String)
    {
        int[] r0, r5, r6;
        char c0, $c7;
        java.lang.IllegalArgumentException $r1;
        int $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;
        java.lang.String r2, r3, r4;
        byte $b23;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        if r2 == null goto label01;

        if r3 != null goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");

        throw $r1;

     label02:
        i18 = virtualinvoke r2.<java.lang.String: int length()>();

        i19 = virtualinvoke r3.<java.lang.String: int length()>();

        if i18 != 0 goto label03;

        return i19;

     label03:
        if i19 != 0 goto label04;

        return i18;

     label04:
        if i18 <= i19 goto label05;

        r4 = r2;

        r2 = r3;

        r3 = r4;

        i18 = i19;

        i19 = virtualinvoke r4.<java.lang.String: int length()>();

     label05:
        $i2 = i18 + 1;

        r5 = newarray (int)[$i2];

        $i3 = i18 + 1;

        r6 = newarray (int)[$i3];

        i20 = 0;

     label06:
        if i20 > i18 goto label07;

        r5[i20] = i20;

        i20 = i20 + 1;

        goto label06;

     label07:
        i21 = 1;

     label08:
        if i21 > i19 goto label13;

        $i5 = i21 - 1;

        c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i5);

        r6[0] = i21;

        i22 = 1;

     label09:
        if i22 > i18 goto label12;

        $i6 = i22 - 1;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i6);

        if $c7 != c0 goto label10;

        $b23 = 0;

        goto label11;

     label10:
        $b23 = 1;

     label11:
        $i8 = i22 - 1;

        $i9 = r6[$i8];

        $i12 = $i9 + 1;

        $i10 = r5[i22];

        $i11 = $i10 + 1;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i11);

        $i14 = i22 - 1;

        $i15 = r5[$i14];

        $i16 = $i15 + $b23;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i16);

        r6[i22] = $i17;

        i22 = i22 + 1;

        goto label09;

     label12:
        r0 = r5;

        r5 = r6;

        r6 = r0;

        i21 = i21 + 1;

        goto label08;

     label13:
        $i4 = r5[i18];

        return $i4;
    }

    public static boolean startsWith(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean startsWith(java.lang.String,java.lang.String,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean startsWith(java.lang.String,java.lang.String,boolean)>(r0, r1, 1);

        return $z0;
    }

    private static boolean startsWith(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r1 != null goto label4;

     label1:
        if r0 != null goto label2;

        if r1 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label5;

        return 0;

     label5:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(z0, 0, r1, 0, $i2);

        return $z1;
    }

    public static boolean startsWithAny(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        boolean $z0, $z1, $z2;
        int $i0, i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i1 = 0;

     label3:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label5;

        r2 = r1[i1];

        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean startsWith(java.lang.String,java.lang.String)>(r0, r2);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static boolean endsWith(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean endsWith(java.lang.String,java.lang.String,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean endsWith(java.lang.String,java.lang.String,boolean)>(r0, r1, 1);

        return $z0;
    }

    private static boolean endsWith(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r1 != null goto label4;

     label1:
        if r0 != null goto label2;

        if r1 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label5;

        return 0;

     label5:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        i0 = $i3 - $i4;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(z0, i0, r1, 0, $i5);

        return $z1;
    }

    public static java.lang.String normalizeSpace(java.lang.String)
    {
        char c0, $c5;
        int $i1, $i2, $i3, $i4, i6;
        org.apache.commons.lang.text.StrBuilder $r1;
        java.lang.String $r2, r5, r6;
        boolean $z0, $z1;

        r5 := @parameter0: java.lang.String;

        r6 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String)>(r5);

        if r6 == null goto label1;

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i1 > 2 goto label2;

     label1:
        return r6;

     label2:
        $r1 = new org.apache.commons.lang.text.StrBuilder;

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>($i2);

        i6 = 0;

     label3:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if i6 >= $i3 goto label6;

        c0 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i6);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c0);

        if $z0 == 0 goto label4;

        if i6 <= 0 goto label5;

        $i4 = i6 - 1;

        $c5 = virtualinvoke r6.<java.lang.String: char charAt(int)>($i4);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c5);

        if $z1 != 0 goto label5;

        virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(32);

        goto label5;

     label4:
        virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c0);

     label5:
        i6 = i6 + 1;

        goto label3;

     label6:
        $r2 = virtualinvoke $r1.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static boolean endsWithAny(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        boolean $z0, $z1, $z2;
        int $i0, i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i1 = 0;

     label3:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label5;

        r2 = r1[i1];

        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean endsWith(java.lang.String,java.lang.String)>(r0, r2);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.StringUtils: int PAD_LIMIT> = 8192;

        <org.apache.commons.lang.StringUtils: int INDEX_NOT_FOUND> = -1;

        <org.apache.commons.lang.StringUtils: java.lang.String EMPTY> = "";

        return;
    }
}
