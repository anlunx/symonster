public class org.apache.commons.math3.ml.clustering.DoublePoint extends java.lang.Object implements org.apache.commons.math3.ml.clustering.Clusterable, java.io.Serializable
{
    private static final long serialVersionUID;
    private final double[] point;

    public void <init>(double[])
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point> = r1;

        return;
    }

    public void <init>(int[])
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        double[] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point> = $r2;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        $i2 = r1[i3];

        $d0 = (double) $i2;

        $r3[i3] = $d0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public double[] getPoint()
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.commons.math3.ml.clustering.DoublePoint;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        $r2 = (org.apache.commons.math3.ml.clustering.DoublePoint) r1;

        $r3 = $r2.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r4, $r3);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.ml.clustering.DoublePoint r0;
        double[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.ml.clustering.DoublePoint;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.DoublePoint: double[] point>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.clustering.DoublePoint: long serialVersionUID> = 3946024775784901369L;

        return;
    }
}
