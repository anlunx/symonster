public class org.apache.commons.math3.optimization.direct.SimplexOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer implements org.apache.commons.math3.optimization.MultivariateOptimizer
{
    private org.apache.commons.math3.optimization.direct.AbstractSimplex simplex;

    public void <init>()
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        double d0, d1;
        org.apache.commons.math3.optimization.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.optimization.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleValueChecker: void <init>(double,double)>(d0, d1);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>($r1);

        return;
    }

    public void setSimplex(org.apache.commons.math3.optimization.direct.AbstractSimplex)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.direct.AbstractSimplex r1;
        org.apache.commons.math3.optimization.OptimizationData[] $r2;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r2 = newarray (org.apache.commons.math3.optimization.OptimizationData)[1];

        $r2[0] = r1;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>($r2);

        return;
    }

    protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        org.apache.commons.math3.optimization.OptimizationData[] r3;
        org.apache.commons.math3.optimization.PointValuePair $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        r3 := @parameter3: org.apache.commons.math3.optimization.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])>(r3);

        $r4 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.OptimizationData[])>(i0, r1, r2, r3);

        return $r4;
    }

    private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[])
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optimization.OptimizationData r3;
        boolean $z0;
        org.apache.commons.math3.optimization.direct.AbstractSimplex $r4;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.OptimizationData[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optimization.direct.AbstractSimplex;

        if $z0 == 0 goto label2;

        $r4 = (org.apache.commons.math3.optimization.direct.AbstractSimplex) r3;

        r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex> = $r4;

        goto label2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r3;
        org.apache.commons.math3.optimization.PointValuePair r4, $r17, $r19;
        org.apache.commons.math3.optimization.direct.AbstractSimplex $r5, $r10, $r12, $r13, $r14, $r15, $r16, $r18;
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$1 $r6;
        org.apache.commons.math3.optimization.GoalType $r7, $r8;
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 $r9;
        double[] $r11;
        int $i0, i1, i2;
        boolean $z1, $z2, z3, $z4;
        org.apache.commons.math3.exception.NullArgumentException $r20;
        org.apache.commons.math3.optimization.PointValuePair[] r21;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        $r5 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        if $r5 != null goto label1;

        $r20 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r20.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r20;

     label1:
        $r6 = new org.apache.commons.math3.optimization.direct.SimplexOptimizer$1;

        specialinvoke $r6.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$1: void <init>(org.apache.commons.math3.optimization.direct.SimplexOptimizer)>(r0);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        $r8 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if $r7 != $r8 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r9 = new org.apache.commons.math3.optimization.direct.SimplexOptimizer$2;

        specialinvoke $r9.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: void <init>(org.apache.commons.math3.optimization.direct.SimplexOptimizer,boolean)>(r0, $z2);

        $r10 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: double[] getStartPoint()>();

        virtualinvoke $r10.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void build(double[])>($r11);

        $r12 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        virtualinvoke $r12.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r6, $r9);

        r21 = null;

        i1 = 0;

        r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

     label4:
        if i1 <= 0 goto label9;

        z3 = 1;

        i2 = 0;

     label5:
        $r15 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $i0 = virtualinvoke $r15.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int getSize()>();

        if i2 >= $i0 goto label8;

        r4 = r21[i2];

        if z3 == 0 goto label6;

        $r18 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair getPoint(int)>(i2);

        $z1 = interfaceinvoke r3.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i1, r4, $r19);

        if $z1 == 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        z3 = $z4;

        i2 = i2 + 1;

        goto label5;

     label8:
        if z3 == 0 goto label9;

        $r16 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        $r17 = virtualinvoke $r16.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair getPoint(int)>(0);

        return $r17;

     label9:
        $r13 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        r21 = virtualinvoke $r13.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] getPoints()>();

        $r14 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer: org.apache.commons.math3.optimization.direct.AbstractSimplex simplex>;

        virtualinvoke $r14.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r6, $r9);

        i1 = i1 + 1;

        goto label4;
    }
}
