final class org.apache.commons.math3.analysis.FunctionUtils$19 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction
{
    final org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f;

    void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[] value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        double[] r1, $r3;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: double[] value(double[])>(r1);

        return $r3;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$19 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r1, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15;
        double[][] r2;
        double[] r4, $r12, r24, r25;
        int[] r5;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r6, $r7, $r11, $r13, $r14, $r15, $r16, $r18, $r20;
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction $r8, $r9;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.exception.DimensionMismatchException $r17, $r19;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r21;
        java.lang.Integer $r22, $r23;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$19;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $r6 = r1[0];

        i0 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r7 = r1[0];

        i1 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        i2 = lengthof r1;

        if i1 <= 1 goto label01;

        $r21 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r21.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r22, $r23, 1);

        throw $r21;

     label01:
        i11 = 0;

     label02:
        if i11 >= i2 goto label05;

        $r15 = r1[i11];

        $i7 = virtualinvoke $r15.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        if $i7 == i0 goto label03;

        $r19 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r20 = r1[i11];

        $i10 = virtualinvoke $r20.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        specialinvoke $r19.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, i0);

        throw $r19;

     label03:
        $r16 = r1[i11];

        $i8 = virtualinvoke $r16.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        if $i8 == i1 goto label04;

        $r17 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r18 = r1[i11];

        $i9 = virtualinvoke $r18.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r17.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, i1);

        throw $r17;

     label04:
        i11 = i11 + 1;

        goto label02;

     label05:
        r24 = newarray (double)[i2];

        i12 = 0;

     label06:
        if i12 >= i2 goto label07;

        $r14 = r1[i12];

        $d6 = virtualinvoke $r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r24[i12] = $d6;

        i12 = i12 + 1;

        goto label06;

     label07:
        $r8 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        r25 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: double[] value(double[])>(r24);

        $r9 = r0.<org.apache.commons.math3.analysis.FunctionUtils$19: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction val$f>;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction: org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()>();

        r2 = interfaceinvoke $r10.<org.apache.commons.math3.analysis.MultivariateMatrixFunction: double[][] value(double[])>(r24);

        $i3 = lengthof r25;

        r3 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[$i3];

        i13 = 0;

     label08:
        $i4 = lengthof r3;

        if i13 >= $i4 goto label13;

        $i5 = i0 + 1;

        r4 = newarray (double)[$i5];

        $d0 = r25[i13];

        r4[0] = $d0;

        r5 = newarray (int)[i0];

        i14 = 0;

     label09:
        if i14 >= i0 goto label12;

        r5[i14] = 1;

        i15 = 0;

     label10:
        if i15 >= i2 goto label11;

        $i6 = i14 + 1;

        $d1 = r4[$i6];

        $r12 = r2[i13];

        $d2 = $r12[i15];

        $r13 = r1[i15];

        $d3 = virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r5);

        $d4 = $d2 * $d3;

        $d5 = $d1 + $d4;

        r4[$i6] = $d5;

        i15 = i15 + 1;

        goto label10;

     label11:
        r5[i14] = 0;

        i14 = i14 + 1;

        goto label09;

     label12:
        $r11 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>(i0, i1, r4);

        r3[i13] = $r11;

        i13 = i13 + 1;

        goto label08;

     label13:
        return r3;
    }
}
