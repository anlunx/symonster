public class com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator extends com.opengamma.analytics.math.function.Function1D
{
    private static final com.opengamma.analytics.math.function.Function1D MEAN;

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator r0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(double[])
    {
        com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator r0;
        double[] r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20, d21;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.Double r2, $r5, $r6;
        com.opengamma.analytics.math.function.Function1D $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator;

        r1 := @parameter0: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        $i1 = lengthof r1;

        if $i1 < 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need at least three points to calculate sample skewness");

        d19 = 0.0;

        d20 = 0.0;

        $r3 = <com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEAN>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r5 = (java.lang.Double) $r4;

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        i0 = lengthof r1;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        $d14 = r1[i4];

        r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        $d15 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d1 = $d15 - d0;

        $d16 = d1 * d1;

        d20 = d20 + $d16;

        $d17 = d1 * d1;

        $d18 = $d17 * d1;

        d19 = d19 + $d18;

        i4 = i4 + 1;

        goto label3;

     label4:
        i5 = lengthof r1;

        $i2 = i5 - 1;

        $d2 = (double) $i2;

        d21 = d20 / $d2;

        $d3 = (double) i5;

        $d4 = $d3 - 1.0;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d6 = $d5 * d19;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 1.5);

        $d8 = (double) i5;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d11 = $d7 * $d9;

        $i3 = i5 - 2;

        $d10 = (double) $i3;

        $d12 = $d11 * $d10;

        $d13 = $d6 / $d12;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        return $r6;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator r0;
        java.lang.Object r1;
        double[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (double[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator: java.lang.Double evaluate(double[])>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.statistics.descriptive.MeanCalculator $r0;

        $r0 = new com.opengamma.analytics.math.statistics.descriptive.MeanCalculator;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.descriptive.MeanCalculator: void <init>()>();

        <com.opengamma.analytics.math.statistics.descriptive.SampleSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEAN> = $r0;

        return;
    }
}
