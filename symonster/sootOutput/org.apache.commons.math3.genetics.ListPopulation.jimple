public abstract class org.apache.commons.math3.genetics.ListPopulation extends java.lang.Object implements org.apache.commons.math3.genetics.Population
{
    private java.util.List chromosomes;
    private int populationLimit;

    public void <init>(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        int i0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.apache.commons.math3.genetics.ListPopulation: void <init>(java.util.List,int)>($r1, i0);

        return;
    }

    public void <init>(java.util.List, int) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List r1, $r3;
        int i0, $i1, $i2;
        java.util.ArrayList $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r9;
        java.lang.Integer $r6, $r7, $r10;
        org.apache.commons.math3.exception.NotPositiveException $r8;
        org.apache.commons.math3.exception.NullArgumentException $r11;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r11 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r11.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r11;

     label1:
        if i0 > 0 goto label2;

        $r8 = new org.apache.commons.math3.exception.NotPositiveException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_LIMIT_NOT_POSITIVE>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r8.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r9, $r10);

        throw $r8;

     label2:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 <= i0 goto label3;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE>;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r5, $r6, $r7, 0);

        throw $r4;

     label3:
        r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit> = i0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes> = $r2;

        $r3 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void setChromosomes(java.util.List) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6, $r7;
        org.apache.commons.math3.exception.NullArgumentException $r8;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        r1 := @parameter0: java.util.List;

        if r1 != null goto label1;

        $r8 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r8.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r8;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        if $i0 <= $i1 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE>;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r5, $r6, $r7, 0);

        throw $r4;

     label2:
        $r2 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void addChromosomes(java.util.Collection) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.Collection r1;
        java.util.List $r2, $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i3 = $i0 + $i1;

        $i2 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        if $i3 <= $i2 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE>;

        $r5 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i4 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r6, $r7, $r8, 0);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.util.List getChromosomes()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    protected java.util.List getChromosomeList()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        return $r1;
    }

    public void addChromosome(org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        org.apache.commons.math3.genetics.Chromosome r1;
        java.util.List $r2, $r3, $r5;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        $r2 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        if $i0 < $i1 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE>;

        $r5 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r6, $r7, $r8, 0);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public org.apache.commons.math3.genetics.Chromosome getFittestChromosome()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.Iterator r1;
        org.apache.commons.math3.genetics.Chromosome r2, r7;
        java.util.List $r3, $r5;
        java.lang.Object $r4, $r6;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r3 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (org.apache.commons.math3.genetics.Chromosome) $r4;

        $r5 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.genetics.Chromosome) $r6;

        $i0 = virtualinvoke r2.<org.apache.commons.math3.genetics.Chromosome: int compareTo(org.apache.commons.math3.genetics.Chromosome)>(r7);

        if $i0 <= 0 goto label2;

        r7 = r2;

     label2:
        goto label1;

     label3:
        return r7;
    }

    public int getPopulationLimit()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $i0 = r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit>;

        return $i0;
    }

    public void setPopulationLimit(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        int i0, $i1, $i2;
        java.util.List $r1, $r4;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        java.lang.Integer $r3, $r5, $r8;
        org.apache.commons.math3.exception.NotPositiveException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.NotPositiveException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_LIMIT_NOT_POSITIVE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r5, 1);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.genetics.ListPopulation: int populationLimit> = i0;

        return;
    }

    public int getPopulationSize()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r1 = r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List chromosomes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.genetics.ListPopulation r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.math3.genetics.ListPopulation;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.genetics.ListPopulation: java.util.List getChromosomes()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
