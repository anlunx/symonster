public class com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter extends java.lang.Object
{
    private static final com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHTING_FUNCTION;
    private static final org.slf4j.Logger s_logger;
    private static final com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL;
    private final com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightingFunction;
    private final boolean _globalBetaSearch;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHTING_FUNCTION>;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightingFunction> = $r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: boolean _globalBetaSearch> = 1;

        return;
    }

    public void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "weighting function");

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightingFunction> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: boolean _globalBetaSearch> = 0;

        return;
    }

    public final com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] getFittedfModelParameters(double, double[], double, double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        double d0, d1, d2, $d3, $d4, $d5, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d21;
        double[] r1, r2, $r17, $r25, $r35, r43, r45, r46, r47, r48, r49;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, i11, i12;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] r3;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform r6, r8;
        java.lang.Object[] $r11, $r13;
        java.lang.Integer $r12, $r14, $r15;
        byte $b3, $b9, $b10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r16, $r24, $r34, r44;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedLogNormalModelFitter $r18, $r21;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r19, $r22;
        java.util.BitSet $r20;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData $r23, $r33;
        java.lang.StringBuilder $r26, $r28, $r29, $r30, $r31, $r36, $r38, $r39, $r40;
        org.slf4j.Logger $r27, $r37;
        java.lang.String $r32, $r41;
        boolean $z0, $z1, $z2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "strikes");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "implied volatilities");

        i0 = lengthof r1;

        if i0 <= 2 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[0] = $r12;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "cannot fit less than three points; have {}", $r11);

        $i1 = lengthof r2;

        if $i1 != i0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $r13 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[1] = $r15;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "#strikes != # vols; have {} and {}", $r13);

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: void validateStrikes(double[])>(r1);

        d16 = 0.0;

        d17 = 0.0;

        i11 = 0;

     label05:
        if i11 >= i0 goto label06;

        d2 = r2[i11];

        d16 = d16 + d2;

        $d15 = d2 * d2;

        d17 = d17 + $d15;

        i11 = i11 + 1;

        goto label05;

     label06:
        $d4 = d16 * d16;

        $d3 = (double) i0;

        $d5 = $d4 / $d3;

        d18 = d17 - $d5;

        $b3 = d18 cmpg 0.0;

        if $b3 > 0 goto label07;

        goto label08;

     label07:
        staticinvoke <java.lang.Math: double sqrt(double)>(d18);

        $i4 = i0 - 1;

        $d7 = (double) $i4;

     label08:
        $d8 = (double) i0;

        d21 = d16 / $d8;

        $r16 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r17 = newarray (double)[4];

        $r17[0] = d21;

        $r17[1] = 0.03;

        $r17[2] = 0.4;

        $r17[3] = 0.4;

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r17);

        $i5 = i0 - 2;

        r3 = newarray (com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)[$i5];

        r43 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r43, 1.0E-4);

        $r18 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedLogNormalModelFitter;

        $r19 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL>;

        specialinvoke $r18.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedLogNormalModelFitter: void <init>(double,double[],double,double[],double[],com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,boolean)>(d0, r1, d1, r2, r43, $r19, 2, 1);

        $r20 = new java.util.BitSet;

        specialinvoke $r20.<java.util.BitSet: void <init>()>();

        if i0 == 3 goto label09;

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: boolean _globalBetaSearch>;

        if $z0 != 0 goto label10;

     label09:
        virtualinvoke $r20.<java.util.BitSet: void set(int)>(1);

     label10:
        r6 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,java.util.BitSet)>($r16, $r20);

        if i0 != 3 goto label12;

        $d11 = virtualinvoke r6.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: double getChiSq()>();

        $d12 = (double) i0;

        $d13 = $d11 / $d12;

        $b10 = $d13 cmpl 1.0;

        if $b10 <= 0 goto label11;

        $r37 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: org.slf4j.Logger s_logger>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" points is ");

        $d14 = virtualinvoke r6.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: double getChiSq()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d14);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("chi^2 on SABR fit to ", $r41);

     label11:
        $r33 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r34 = virtualinvoke r6.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: com.opengamma.analytics.math.matrix.DoubleMatrix1D getModelParameters()>();

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        specialinvoke $r33.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[])>($r35);

        r3[0] = $r33;

        goto label15;

     label12:
        r44 = virtualinvoke r6.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: com.opengamma.analytics.math.matrix.DoubleMatrix1D getModelParameters()>();

        virtualinvoke $r20.<java.util.BitSet: void set(int)>(2);

        r45 = newarray (double)[4];

        r46 = newarray (double)[4];

        i12 = 0;

     label13:
        $i6 = i0 - 2;

        if i12 >= $i6 goto label15;

        $i7 = i12 + 3;

        r47 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r1, i12, $i7);

        $i8 = i12 + 3;

        r48 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, i12, $i8);

        r49 = newarray (double)[3];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r49, 1.0E-4);

        $r21 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedLogNormalModelFitter;

        $r22 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL>;

        specialinvoke $r21.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedLogNormalModelFitter: void <init>(double,double[],double,double[],double[],com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,boolean)>(d0, r47, d1, r48, r49, $r22, 2, 1);

        r8 = virtualinvoke $r21.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,java.util.BitSet)>(r44, $r20);

        $d9 = virtualinvoke r8.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: double getChiSq()>();

        $b9 = $d9 cmpl 3.0;

        if $b9 <= 0 goto label14;

        $r27 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: org.slf4j.Logger s_logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("chi^2 on 3-point SABR fit #");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $d10 = virtualinvoke r8.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: double getChiSq()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d10);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String)>($r32);

     label14:
        $r23 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r24 = virtualinvoke r8.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: com.opengamma.analytics.math.matrix.DoubleMatrix1D getModelParameters()>();

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        specialinvoke $r23.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[])>($r25);

        r3[i12] = $r23;

        i12 = i12 + 1;

        goto label13;

     label15:
        return r3;
    }

    public com.opengamma.analytics.math.function.Function1D getVolDiffFunc(double, double[], double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        double d0, d1, d2;
        double[] r1, r2;
        com.opengamma.analytics.math.function.Function1D r3;
        int i0;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r4;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$1 $r5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        d2 := @parameter4: double;

        $r4 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL>;

        r3 = virtualinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d0, r1, d1);

        i0 = lengthof r1;

        $r5 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$1;

        specialinvoke $r5.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$1: void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter,double,com.opengamma.analytics.math.function.Function1D,int,double[])>(r0, d2, r3, i0, r2);

        return $r5;
    }

    public com.opengamma.analytics.math.function.Function1D getVolJacFunc(double, double[], double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        double d0, d1, d2;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D r2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r3;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2 $r4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r3 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL>;

        r2 = virtualinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double,double[],double)>(d0, r1, d1);

        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter,double,com.opengamma.analytics.math.function.Function1D)>(r0, d2, r2);

        return $r4;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double, double[], double, double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        double d0, d1;
        double[] r1, r2;
        int i0;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] r3;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3 $r4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        i0 = lengthof r1;

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] getFittedfModelParameters(double,double[],double,double[])>(d0, r1, d1, r2);

        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter,double,double[],com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[],double,int)>(r0, d1, r1, r3, d0, i0);

        return $r4;
    }

    private void validateStrikes(double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        double[] r1;
        int i0, $i1, $i3, $i4, i5;
        double $d0, $d1, $d2, $d3;
        byte $b2;
        java.lang.Object[] $r2;
        java.lang.Double $r3, $r5;
        java.lang.Integer $r4, $r6;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        i5 = 1;

     label1:
        if i5 >= i0 goto label4;

        $d1 = r1[i5];

        $i1 = i5 - 1;

        $d0 = r1[$i1];

        $b2 = $d1 cmpl $d0;

        if $b2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r2 = newarray (java.lang.Object)[4];

        $i3 = i5 - 1;

        $d2 = r1[$i3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r2[0] = $r3;

        $i4 = i5 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[1] = $r4;

        $d3 = r1[i5];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r2[2] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r2[3] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "strikes must be in ascending order; have {} (element {}) and {} (element {})", $r2);

        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    static com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r0;

        $r0 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL>;

        return $r0;
    }

    static com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction access$100(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r1;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightingFunction>;

        return $r1;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.SineWeightingFunction $r0;
        org.slf4j.Logger $r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r2;

        $r0 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunctionFactory: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.SineWeightingFunction SINE_WEIGHTING_FUNCTION>;

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHTING_FUNCTION> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/model/volatility/smile/fitting/sabr/PiecewiseSABRFitterRootFinder");

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: org.slf4j.Logger s_logger> = $r1;

        $r2 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction getInstance()>();

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction MODEL> = $r2;

        return;
    }
}
