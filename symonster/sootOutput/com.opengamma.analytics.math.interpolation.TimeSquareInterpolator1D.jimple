public class com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private static final double EPS;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r6, $r7, $r8, $r9, $r10, $r11;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b0;
        int $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Value to be interpolated must not be null");

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b0 = $d8 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Value should be stricly positive");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Data bundle must not be null");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $i1 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: int getLowerBoundIndex()>();

        $i2 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i3 = $i2 - 1;

        if $i1 != $i3 goto label3;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        return $r11;

     label3:
        $r8 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        d2 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        d3 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d11 = d2 - $d9;

        $d10 = d2 - d0;

        d4 = $d11 / $d10;

        $d12 = d0 * d1;

        d5 = $d12 * d1;

        $d13 = d2 * d3;

        d6 = $d13 * d3;

        $d16 = d4 * d5;

        $d14 = 1.0 - d4;

        $d15 = $d14 * d6;

        d7 = $d16 + $d15;

        $d17 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d18 = d7 / $d17;

        $d19 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d19);

        return $r10;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        int i0, $i2, $i3, $i4, $i5, $i8, i9;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32;
        byte $b1, $b6, $b7;
        double[] $r5, $r6, $r7, $r8;
        org.apache.commons.lang.NotImplementedException $r9;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Value to be interpolated must not be null");

        $d8 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b1 = $d8 cmpl 0.0;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Value should be stricly positive");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Data bundle must not be null");

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i2 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i3 = $i2 - 1;

        if i0 != $i3 goto label3;

        $i8 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i9 = $i8 - 2;

        goto label4;

     label3:
        i9 = i0;

     label4:
        $r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        d0 = $r5[i9];

        $r6 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        d1 = $r6[i9];

        $r7 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $i4 = i9 + 1;

        d2 = $r7[$i4];

        $r8 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $i5 = i9 + 1;

        d3 = $r8[$i5];

        $b6 = d1 cmpg 1.0E-10;

        if $b6 < 0 goto label5;

        $b7 = d3 cmpg 1.0E-10;

        if $b7 >= 0 goto label6;

     label5:
        $r9 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r9.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("node sensitivity not implemented when one node is 0 value");

        throw $r9;

     label6:
        $d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d11 = d2 - $d9;

        $d10 = d2 - d0;

        d4 = $d11 / $d10;

        $d12 = d0 * d1;

        d5 = $d12 * d1;

        $d13 = d2 * d3;

        d6 = $d13 * d3;

        $d16 = d4 * d5;

        $d14 = 1.0 - d4;

        $d15 = $d14 * d6;

        d7 = $d16 + $d15;

        $d17 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d18 = d7 / $d17;

        $d19 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $d23 = neg $d19;

        $d20 = neg d5;

        $d22 = $d20 + d6;

        $d21 = d2 - d0;

        $d24 = $d22 / $d21;

        $d25 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d26 = d7 / $d25;

        $d27 = staticinvoke <java.lang.Math: double sqrt(double)>($d26);

        $d28 = $d24 / $d27;

        $d29 = $d23 + $d28;

        $d30 = 0.5 * $d29;

        $d31 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d32 = $d30 / $d31;

        return $d32;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r7, $r8, $r9, $r10;
        int i0, i1, $i2, $i5, $i6;
        double[] r3;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r4;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d10, d11, d12, d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32;
        byte $b3, $b4;
        org.apache.commons.lang.NotImplementedException $r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Value to be interpolated must not be null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Data bundle must not be null");

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r3 = newarray (double)[i0];

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        i1 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: int getLowerBoundIndex()>();

        $i2 = i0 - 1;

        if i1 != $i2 goto label1;

        $i6 = i0 - 1;

        r3[$i6] = 1.0;

        return r3;

     label1:
        $r9 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $r10 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        d3 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $b3 = d1 cmpg 1.0E-10;

        if $b3 < 0 goto label2;

        $b4 = d3 cmpg 1.0E-10;

        if $b4 >= 0 goto label3;

     label2:
        $r11 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r11.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("node sensitivity not implemented when one node is 0 value");

        throw $r11;

     label3:
        $d15 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d17 = d2 - $d15;

        $d16 = d2 - d0;

        d4 = $d17 / $d16;

        $d18 = d0 * d1;

        d5 = $d18 * d1;

        $d19 = d2 * d3;

        d6 = $d19 * d3;

        $d22 = d4 * d5;

        $d20 = 1.0 - d4;

        $d21 = $d20 * d6;

        d7 = $d22 + $d21;

        $d23 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d24 = d7 / $d23;

        d8 = staticinvoke <java.lang.Math: double sqrt(double)>($d24);

        $d25 = 0.5 / d8;

        $d26 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d27 = $d25 / $d26;

        d10 = $d27 * 1.0;

        d11 = d4 * d10;

        $d28 = 1.0 - d4;

        d12 = $d28 * d10;

        $d29 = 2.0 * d2;

        $d30 = $d29 * d3;

        d13 = $d30 * d12;

        $d31 = 2.0 * d0;

        $d32 = $d31 * d1;

        d14 = $d32 * d11;

        r3[i1] = d14;

        $i5 = i1 + 1;

        r3[$i5] = d13;

        return r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        double[] r1, r2;
        int i0, i2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;
        double $d0;
        byte $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d0 = r2[i2];

        $b1 = $d0 cmpl 0.0;

        if $b1 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "All values in y must be positive");

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        double[] r1, r2;
        int i0, i2;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;
        double $d0;
        byte $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d0 = r2[i2];

        $b1 = $d0 cmpl 0.0;

        if $b1 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "All values in y must be positive");

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        return $r4;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D: double EPS> = 1.0E-10;

        <com.opengamma.analytics.math.interpolation.TimeSquareInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
