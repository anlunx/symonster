public class org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer extends org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer
{
    private final org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer optimizer;
    private final java.util.List optima;

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer, int, org.apache.commons.math3.random.RandomVectorGenerator) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer r1;
        int i0;
        org.apache.commons.math3.random.RandomVectorGenerator r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.math3.random.RandomVectorGenerator;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.BaseMultivariateOptimizer,int,org.apache.commons.math3.random.RandomVectorGenerator)>(r1, i0, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.List optima> = $r3;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer optimizer> = r1;

        return;
    }

    public org.apache.commons.math3.optim.PointValuePair[] getOptima()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        java.util.List $r1, $r4;
        java.util.Comparator $r2;
        org.apache.commons.math3.optim.PointValuePair[] $r3, $r6;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.List optima>;

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.Comparator getPairComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.List optima>;

        $r3 = newarray (org.apache.commons.math3.optim.PointValuePair)[0];

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r6 = (org.apache.commons.math3.optim.PointValuePair[]) $r5;

        return $r6;
    }

    protected void store(org.apache.commons.math3.optim.PointValuePair)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.PointValuePair;

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.List optima>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void clear()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: java.util.List optima>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    private java.util.Comparator getPairComparator()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1 $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        $r1 = new org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1;

        specialinvoke $r1.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer)>(r0);

        return $r1;
    }

    protected volatile void store(java.lang.Object)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        java.lang.Object r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.optim.PointValuePair) r1;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: void store(org.apache.commons.math3.optim.PointValuePair)>($r2);

        return;
    }

    public volatile java.lang.Object[] getOptima()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair[] $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair[] getOptima()>();

        return $r1;
    }

    static org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer access$000(org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer $r1;

        r0 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer optimizer>;

        return $r1;
    }
}
