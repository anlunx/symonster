public class org.apache.commons.math3.stat.descriptive.moment.Variance extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable, org.apache.commons.math3.stat.descriptive.WeightedEvaluation
{
    private static final long serialVersionUID;
    protected org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment;
    protected boolean incMoment;
    private boolean isBiasCorrected;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.moment.SecondMoment)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 0;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = r1;

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = z0;

        return;
    }

    public void <init>(boolean, org.apache.commons.math3.stat.descriptive.moment.SecondMoment)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.moment.SecondMoment;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 0;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = r1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = z0;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.moment.Variance) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = null;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = 1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = 1;

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Variance: void copy(org.apache.commons.math3.stat.descriptive.moment.Variance,org.apache.commons.math3.stat.descriptive.moment.Variance)>(r1, r0);

        return;
    }

    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double d0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void increment(double)>(d0);

     label1:
        return;
    }

    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l2, $l4, $l5;
        byte $b1, $b3;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l2 = $r2.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $b3 = $l2 cmp 1L;

        if $b3 != 0 goto label2;

        return 0.0;

     label2:
        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $d5 = $r5.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: double m2>;

        $r6 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l5 = $r6.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $d3 = (double) $l5;

        $d4 = $d3 - 1.0;

        $d6 = $d5 / $d4;

        return $d6;

     label3:
        $r3 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $d1 = $r3.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: double m2>;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l4 = $r4.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long n>;

        $d0 = (double) $l4;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: long getN()>();

        return $l0;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: void clear()>();

     label1:
        return;
    }

    public double evaluate(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1;
        int $i0;
        double $d0;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],int,int)>(r1, 0, $i0);

        return $d0;
    }

    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1;
        int i0, i1;
        double d0, d1;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d1 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: void clear()>();

        if i1 != 1 goto label1;

        d1 = 0.0;

        goto label2;

     label1:
        if i1 <= 1 goto label2;

        $r3 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],int,int)>(r1, i0, i1);

        d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double,int,int)>(r1, d0, i0, i1);

     label2:
        return d1;
    }

    public double evaluate(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1, r2;
        int i0, i1;
        double d0, d1;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.Mean $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        d1 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],double[],int,int)>(r1, r2, i0, i1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: void clear()>();

        if i1 != 1 goto label1;

        d1 = 0.0;

        goto label2;

     label1:
        if i1 <= 1 goto label2;

        $r4 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[],int,int)>(r1, r2, i0, i1);

        d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],double,int,int)>(r1, r2, d0, i0, i1);

     label2:
        return d1;
    }

    public double evaluate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1, r2;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],int,int)>(r1, r2, 0, $i0);

        return $d0;
    }

    public double evaluate(double[], double, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d13, d14, d15;
        int i0, i1, $i2, i3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        d10 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label5;

        if i1 != 1 goto label1;

        d10 = 0.0;

        goto label5;

     label1:
        if i1 <= 1 goto label5;

        d11 = 0.0;

        d13 = 0.0;

        i3 = i0;

     label2:
        $i2 = i0 + i1;

        if i3 >= $i2 goto label3;

        $d8 = r1[i3];

        d14 = $d8 - d0;

        $d9 = d14 * d14;

        d11 = d11 + $d9;

        d13 = d13 + d14;

        i3 = i3 + 1;

        goto label2;

     label3:
        d15 = (double) i1;

        $z1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z1 == 0 goto label4;

        $d4 = d13 * d13;

        $d5 = $d4 / d15;

        $d7 = d11 - $d5;

        $d6 = d15 - 1.0;

        d10 = $d7 / $d6;

        goto label5;

     label4:
        $d1 = d13 * d13;

        $d2 = $d1 / d15;

        $d3 = d11 - $d2;

        d10 = $d3 / d15;

     label5:
        return d10;
    }

    public double evaluate(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1;
        double d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double,int,int)>(r1, d0, 0, $i0);

        return $d1;
    }

    public double evaluate(double[], double[], double, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1, r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d18, d19, d20;
        int i0, i1, $i2, $i3, i4, i5;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        d15 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean test(double[],double[],int,int)>(r1, r2, i0, i1);

        if $z0 == 0 goto label7;

        if i1 != 1 goto label1;

        d15 = 0.0;

        goto label7;

     label1:
        if i1 <= 1 goto label7;

        d16 = 0.0;

        d18 = 0.0;

        i4 = i0;

     label2:
        $i2 = i0 + i1;

        if i4 >= $i2 goto label3;

        $d9 = r1[i4];

        d19 = $d9 - d0;

        $d11 = r2[i4];

        $d10 = d19 * d19;

        $d12 = $d11 * $d10;

        d16 = d16 + $d12;

        $d13 = r2[i4];

        $d14 = $d13 * d19;

        d18 = d18 + $d14;

        i4 = i4 + 1;

        goto label2;

     label3:
        d20 = 0.0;

        i5 = i0;

     label4:
        $i3 = i0 + i1;

        if i5 >= $i3 goto label5;

        $d8 = r2[i5];

        d20 = d20 + $d8;

        i5 = i5 + 1;

        goto label4;

     label5:
        $z1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        if $z1 == 0 goto label6;

        $d4 = d18 * d18;

        $d5 = $d4 / d20;

        $d7 = d16 - $d5;

        $d6 = d20 - 1.0;

        d15 = $d7 / $d6;

        goto label7;

     label6:
        $d1 = d18 * d18;

        $d2 = $d1 / d20;

        $d3 = d16 - $d2;

        d15 = $d3 / d20;

     label7:
        return d15;
    }

    public double evaluate(double[], double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        double[] r1, r2;
        double d0, $d1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        $i0 = lengthof r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double evaluate(double[],double[],double,int,int)>(r1, r2, d0, 0, $i0);

        return $d1;
    }

    public boolean isBiasCorrected()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        return $z0;
    }

    public void setBiasCorrected(boolean)
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = z0;

        return;
    }

    public org.apache.commons.math3.stat.descriptive.moment.Variance copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Variance: void copy(org.apache.commons.math3.stat.descriptive.moment.Variance,org.apache.commons.math3.stat.descriptive.moment.Variance)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.moment.Variance, org.apache.commons.math3.stat.descriptive.moment.Variance) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, r1;
        double[] $r2;
        org.apache.commons.math3.stat.descriptive.moment.SecondMoment $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Variance;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.moment.Variance;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: void setData(double[])>($r2);

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.SecondMoment: org.apache.commons.math3.stat.descriptive.moment.SecondMoment copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.SecondMoment moment> = $r4;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected>;

        r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean isBiasCorrected> = $z0;

        $z1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment>;

        r1.<org.apache.commons.math3.stat.descriptive.moment.Variance: boolean incMoment> = $z1;

        return;
    }

    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.Variance copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Variance r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Variance;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Variance: org.apache.commons.math3.stat.descriptive.moment.Variance copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.moment.Variance: long serialVersionUID> = -9111962718267217978L;

        return;
    }
}
