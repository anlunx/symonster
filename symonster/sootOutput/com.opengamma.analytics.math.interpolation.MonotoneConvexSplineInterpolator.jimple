public class com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private double[] _time;
    private double[] _spotRates;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time> = null;

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates> = null;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r18, $r20, r22;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, i12, i13, i14, i15, i16, i17, i18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3, r23;
        double[][] $r13, $r17, $r19;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b7, $b9, $b10, $b11;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, " xValues length = yValues length");

        $i3 = lengthof r1;

        if $i3 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i12 = 0;

     label05:
        if i12 >= i0 goto label06;

        $d9 = r1[i12];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d10 = r1[i12];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d10);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        $d11 = r2[i12];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d11);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yData containing NaN");

        $d12 = r2[i12];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d12);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yData containing Infinity");

        i12 = i12 + 1;

        goto label05;

     label06:
        i13 = 0;

     label07:
        if i13 >= i0 goto label12;

        i14 = i13 + 1;

     label08:
        if i14 >= i0 goto label11;

        $d8 = r1[i13];

        $d7 = r1[i14];

        $b11 = $d8 cmpl $d7;

        if $b11 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i14 = i14 + 1;

        goto label08;

     label11:
        i13 = i13 + 1;

        goto label07;

     label12:
        i15 = 0;

     label13:
        if i15 >= i0 goto label17;

        $d5 = r1[i15];

        $b9 = $d5 cmpl 0.0;

        if $b9 != 0 goto label16;

        $d6 = r2[i15];

        $b10 = $d6 cmpl 0.0;

        if $b10 != 0 goto label14;

        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "r_i * t_i = 0 if t_i =0");

     label16:
        i15 = i15 + 1;

        goto label13;

     label17:
        r22 = newarray (double)[i0];

        i16 = 0;

     label18:
        if i16 >= i0 goto label21;

        $i8 = i16;

        $d2 = r1[i16];

        $b7 = $d2 cmpl 0.0;

        if $b7 != 0 goto label19;

        $d13 = 0.0;

        goto label20;

     label19:
        $d4 = r2[i16];

        $d3 = r1[i16];

        $d13 = $d4 / $d3;

     label20:
        r22[$i8] = $d13;

        i16 = i16 + 1;

        goto label18;

     label21:
        $r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time> = $r6;

        $r7 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r22, i0);

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates> = $r7;

        $r9 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r8 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r9, $r8);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r10 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates>;

        r23 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>($r11, $r10);

        $r12 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r13 = virtualinvoke r23.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D integration(double[],double[][])>($r12, $r13);

        i17 = 0;

     label22:
        $i4 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        if i17 >= $i4 goto label25;

        i18 = 0;

     label23:
        $i6 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        if i18 >= $i6 goto label24;

        $r17 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i17];

        $d0 = $r18[i18];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r19 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r20 = $r19[i17];

        $d1 = $r20[i18];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i18 = i18 + 1;

        goto label23;

     label24:
        i17 = i17 + 1;

        goto label22;

     label25:
        $r14 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r16 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r16);

        $i5 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        specialinvoke $r14.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r15, r3, $i5, 1);

        return $r14;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1;
        double[][] r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method with multidimensional yValues is not supported");

        throw $r3;
    }

    public double interpolate(double[], double[], double)
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r5, r8;
        double d0, d1, $d2, $d3, $d4;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        int i0, $i1, $i3, i5, i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r6, $r7;
        byte $b2, $b4;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i1 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i0 = $i1 + 1;

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r5 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i5 = 0;

        $d2 = r5[1];

        $b2 = d0 cmpg $d2;

        if $b2 > 0 goto label1;

        i5 = 0;

        goto label4;

     label1:
        i6 = 1;

     label2:
        $i3 = i0 - 1;

        if i6 >= $i3 goto label4;

        $d4 = r5[i6];

        $b4 = $d4 cmpg d0;

        if $b4 >= 0 goto label3;

        i5 = i6;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i5);

        r8 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d3 = r5[i5];

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>(r8, d0, $d3);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large/small data values or xKey");

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large/small data values or xKey");

        return d1;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D interpolate(double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3, r4, r7, r12;
        int i0, i1, $i2, $i4, i6, i7, i8;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b3, $b5;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x");

        i0 = lengthof r3;

        r4 = newarray (double)[i0];

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        r6 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i2 = virtualinvoke r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = $i2 + 1;

        $r9 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r7 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i6 = 0;

     label1:
        if i6 >= i0 goto label6;

        i7 = 0;

        $d1 = r3[i6];

        $d0 = r7[1];

        $b3 = $d1 cmpg $d0;

        if $b3 > 0 goto label2;

        i7 = 0;

        goto label5;

     label2:
        i8 = 1;

     label3:
        $i4 = i1 - 1;

        if i8 >= $i4 goto label5;

        $d8 = r7[i8];

        $d7 = r3[i6];

        $b5 = $d8 cmpg $d7;

        if $b5 >= 0 goto label4;

        i7 = i8;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        $r11 = virtualinvoke r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i7);

        r12 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d3 = r3[i6];

        $d2 = r7[i7];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>(r12, $d3, $d2);

        r4[i6] = $d4;

        $d5 = r4[i6];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large/small data values or xKey");

        $d6 = r4[i6];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large/small data values or xKey");

        i6 = i6 + 1;

        goto label1;

     label6:
        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        return $r10;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D interpolate(double[], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r7, $r9, $r12, $r14, $r15, $r16, $r17, $r18, r19;
        double[][] r3, r4;
        int i0, i1, i2, $i3, $i5, i7, i8, i9, i10;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r6, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b4, $b6;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "xMatrix");

        $r9 = r3[0];

        i0 = lengthof $r9;

        i1 = lengthof r3;

        r4 = newmultiarray (double)[i1][i0];

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        r6 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i3 = virtualinvoke r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i2 = $i3 + 1;

        $r10 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r7 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i7 = 0;

     label1:
        if i7 >= i1 goto label8;

        i8 = 0;

     label2:
        if i8 >= i0 goto label7;

        i9 = 0;

        $r12 = r3[i7];

        $d1 = $r12[i8];

        $d0 = r7[1];

        $b4 = $d1 cmpg $d0;

        if $b4 > 0 goto label3;

        i9 = 0;

        goto label6;

     label3:
        i10 = 1;

     label4:
        $i5 = i2 - 1;

        if i10 >= $i5 goto label6;

        $d8 = r7[i10];

        $r18 = r3[i7];

        $d7 = $r18[i8];

        $b6 = $d8 cmpg $d7;

        if $b6 >= 0 goto label5;

        i9 = i10;

     label5:
        i10 = i10 + 1;

        goto label4;

     label6:
        $r13 = virtualinvoke r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i9);

        r19 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r15 = r4[i7];

        $r14 = r3[i7];

        $d3 = $r14[i8];

        $d2 = r7[i9];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>(r19, $d3, $d2);

        $r15[i8] = $d4;

        $r16 = r4[i7];

        $d5 = $r16[i8];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r17 = r4[i7];

        $d6 = $r17[i8];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i8 = i8 + 1;

        goto label2;

     label7:
        i7 = i7 + 1;

        goto label1;

     label8:
        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        return $r11;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolateFwds(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r15, $r17, r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, i12, i13, i14, i15, i16, i17, i18;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r12;
        double[][] $r14, $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b7, $b9, $b10, $b11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r20;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, " xValues length = yValues length");

        $i3 = lengthof r1;

        if $i3 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i12 = 0;

     label05:
        if i12 >= i0 goto label06;

        $d9 = r1[i12];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d10 = r1[i12];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d10);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        $d11 = r2[i12];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d11);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yData containing NaN");

        $d12 = r2[i12];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d12);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yData containing Infinity");

        i12 = i12 + 1;

        goto label05;

     label06:
        i13 = 0;

     label07:
        if i13 >= i0 goto label12;

        i14 = i13 + 1;

     label08:
        if i14 >= i0 goto label11;

        $d8 = r1[i13];

        $d7 = r1[i14];

        $b11 = $d8 cmpl $d7;

        if $b11 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i14 = i14 + 1;

        goto label08;

     label11:
        i13 = i13 + 1;

        goto label07;

     label12:
        i15 = 0;

     label13:
        if i15 >= i0 goto label17;

        $d5 = r1[i15];

        $b9 = $d5 cmpl 0.0;

        if $b9 != 0 goto label16;

        $d6 = r2[i15];

        $b10 = $d6 cmpl 0.0;

        if $b10 != 0 goto label14;

        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "r_i * t_i = 0 if t_i =0");

     label16:
        i15 = i15 + 1;

        goto label13;

     label17:
        r19 = newarray (double)[i0];

        i16 = 0;

     label18:
        if i16 >= i0 goto label21;

        $i8 = i16;

        $d2 = r1[i16];

        $b7 = $d2 cmpl 0.0;

        if $b7 != 0 goto label19;

        $d13 = 0.0;

        goto label20;

     label19:
        $d4 = r2[i16];

        $d3 = r1[i16];

        $d13 = $d4 / $d3;

     label20:
        r19[$i8] = $d13;

        i16 = i16 + 1;

        goto label18;

     label21:
        $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time> = $r5;

        $r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r19, i0);

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates> = $r6;

        $r8 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r7 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>($r8, $r7);

        $r10 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r9 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates>;

        r20 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>($r10, $r9);

        i17 = 0;

     label22:
        $i4 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        if i17 >= $i4 goto label25;

        i18 = 0;

     label23:
        $i6 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        if i18 >= $i6 goto label24;

        $r14 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r15 = $r14[i17];

        $d0 = $r15[i18];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r16 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r17 = $r16[i17];

        $d1 = $r17[i18];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i18 = i18 + 1;

        goto label23;

     label24:
        i17 = i17 + 1;

        goto label22;

     label25:
        $r11 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r13 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r13);

        $i5 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        specialinvoke $r11.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r12, r20, $i5, 1);

        return $r11;
    }

    public double interpolateFwds(double[], double[], double)
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r5, r8;
        double d0, d1, $d2, $d3, $d4;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        int i0, $i1, $i3, i5, i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r6, $r7;
        byte $b2, $b4;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolateFwds(double[],double[])>(r1, r2);

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i1 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i0 = $i1 + 1;

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r5 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i5 = 0;

        $d2 = r5[1];

        $b2 = d0 cmpg $d2;

        if $b2 > 0 goto label1;

        i5 = 0;

        goto label4;

     label1:
        i6 = 1;

     label2:
        $i3 = i0 - 1;

        if i6 >= $i3 goto label4;

        $d4 = r5[i6];

        $b4 = $d4 cmpg d0;

        if $b4 >= 0 goto label3;

        i5 = i6;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i5);

        r8 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d3 = r5[i5];

        d1 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>(r8, d0, $d3);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large/small data values or xKey");

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large/small data values or xKey");

        return d1;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D interpolateFwds(double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3, r6, r7, r12;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r5;
        int i0, i1, $i2, $i4, i6, i7, i8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b3, $b5;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x");

        r4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolateFwds(double[],double[])>(r1, r2);

        r5 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $i2 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i0 = $i2 + 1;

        $r9 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r6 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = lengthof r3;

        r7 = newarray (double)[i1];

        i6 = 0;

     label1:
        if i6 >= i1 goto label6;

        i7 = 0;

        $d1 = r3[i6];

        $d0 = r6[1];

        $b3 = $d1 cmpg $d0;

        if $b3 > 0 goto label2;

        i7 = 0;

        goto label5;

     label2:
        i8 = 1;

     label3:
        $i4 = i0 - 1;

        if i8 >= $i4 goto label5;

        $d6 = r6[i8];

        $d5 = r3[i6];

        $b5 = $d6 cmpg $d5;

        if $b5 >= 0 goto label4;

        i7 = i8;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        $r11 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i7);

        r12 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d3 = r3[i6];

        $d2 = r6[i7];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>(r12, $d3, $d2);

        r7[i6] = $d4;

        i6 = i6 + 1;

        goto label1;

     label6:
        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r7);

        return $r10;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D interpolateFwds(double[], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, $r6, $r8, $r10;
        double[][] r3, r4;
        int i0, i1, i2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "xMatrix");

        $r6 = r3[0];

        i0 = lengthof $r6;

        i1 = lengthof r3;

        r4 = newmultiarray (double)[i1][i0];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r8 = r3[i2];

        $r9 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D interpolateFwds(double[],double[],double[])>(r1, r2, $r8);

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r4[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        return $r7;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D integration(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        double[][] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $r4 = r2[0];

        $i2 = lengthof $r4;

        i0 = $i2 + 1;

        i1 = lengthof r1;

        r3 = newmultiarray (double)[i1][i0];

        $r5 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _spotRates>;

        $d1 = $r5[0];

        $r6 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $d0 = $r6[0];

        d12 = $d1 * $d0;

        i12 = 0;

     label1:
        $i3 = i1 - 1;

        if i12 >= $i3 goto label2;

        $r14 = r3[i12];

        $r13 = r2[i12];

        $d5 = $r13[0];

        $d6 = $d5 / 3.0;

        $r14[0] = $d6;

        $r16 = r3[i12];

        $r15 = r2[i12];

        $d7 = $r15[1];

        $d8 = $d7 / 2.0;

        $r16[1] = $d8;

        $r18 = r3[i12];

        $r17 = r2[i12];

        $d9 = $r17[2];

        $r18[2] = $d9;

        $r19 = r3[i12];

        $r19[3] = d12;

        $r20 = r3[i12];

        $i11 = i12 + 1;

        $d11 = r1[$i11];

        $d10 = r1[i12];

        d12 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>($r20, $d11, $d10);

        i12 = i12 + 1;

        goto label1;

     label2:
        $i4 = i1 - 1;

        $r7 = r3[$i4];

        $r7[0] = 0.0;

        $i5 = i1 - 1;

        $r8 = r3[$i5];

        $r8[1] = 0.0;

        $i6 = i1 - 1;

        $r10 = r3[$i6];

        $i7 = i1 - 2;

        $r9 = r2[$i7];

        $i8 = i1 - 1;

        $d3 = r1[$i8];

        $i9 = i1 - 2;

        $d2 = r1[$i9];

        $d4 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double getValue(double[],double,double)>($r9, $d3, $d2);

        $r10[2] = $d4;

        $i10 = i1 - 1;

        $r11 = r3[$i10];

        $r11[3] = d12;

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r12;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3, r4, $r12, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r29, $r30, $r33, $r35;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i18, i22, i23, i24;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, d95, d96, d97, d98, d99, d100, d101, d102, d103, d104, d105;
        java.util.ArrayList $r9, $r10;
        java.lang.Double $r11, $r18, $r21, $r22, $r25, $r26, $r28, $r31, $r32, $r34, $r36;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r13;
        java.lang.Object $r14, $r17;
        byte $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b19, $b20, $b21;
        boolean $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        double[][] r44;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] discFwdsFinder(double[],double[])>(r1, r2);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] fwdsFinder(double[],double[])>(r1, r3);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        i18 = 0;

     label01:
        $i1 = i0 - 1;

        if i18 >= $i1 goto label20;

        $d8 = r4[i18];

        $d7 = r3[i18];

        d95 = $d8 - $d7;

        $i5 = i18 + 1;

        $d10 = r4[$i5];

        $d9 = r3[i18];

        d0 = $d10 - $d9;

        $d12 = -4.0 * d95;

        $d11 = 2.0 * d0;

        d1 = $d12 - $d11;

        $d14 = 2.0 * d95;

        $d13 = 4.0 * d0;

        d2 = $d14 + $d13;

        $i6 = i18 + 1;

        $d16 = r1[$i6];

        $d15 = r1[i18];

        d3 = $d16 - $d15;

        d4 = r3[i18];

        $d17 = staticinvoke <java.lang.Math: double abs(double)>(d95);

        $b7 = $d17 cmpg 1.0E-13;

        if $b7 > 0 goto label02;

        $r35 = newarray (double)[3];

        $r35[0] = 0.0;

        $r35[1] = 0.0;

        $r35[2] = d4;

        $d94 = r1[i18];

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d94);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r36);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r35);

        goto label19;

     label02:
        $d18 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b8 = $d18 cmpg 1.0E-13;

        if $b8 > 0 goto label03;

        $r33 = newarray (double)[3];

        $r33[0] = 0.0;

        $r33[1] = 0.0;

        $r33[2] = d4;

        $d93 = r1[i18];

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d93);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r34);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r33);

        goto label19;

     label03:
        $b9 = d95 cmpl 0.0;

        if $b9 <= 0 goto label04;

        $b17 = d0 cmpl 0.0;

        if $b17 <= 0 goto label04;

        $z19 = 1;

        goto label05;

     label04:
        $z19 = 0;

     label05:
        $b19 = d95 cmpg 0.0;

        if $b19 >= 0 goto label06;

        $b16 = d0 cmpg 0.0;

        if $b16 >= 0 goto label06;

        $z20 = 1;

        goto label07;

     label06:
        $z20 = 0;

     label07:
        $z21 = $z19 | $z20;

        if $z21 == 0 goto label08;

        $d65 = d0 + d95;

        d96 = d0 / $d65;

        $d66 = 2.0 * d0;

        $d67 = d95 + $d66;

        $d68 = $d67 * d95;

        d97 = $d68 / d0;

        $d69 = 2.0 * d95;

        $d70 = d0 + $d69;

        $d71 = $d70 * d0;

        d98 = $d71 / d95;

        $d73 = r1[i18];

        $d72 = d3 * d96;

        d99 = $d73 + $d72;

        $r29 = newarray (double)[3];

        $d75 = d97 / d0;

        $d74 = d95 + d0;

        $d76 = $d75 * $d74;

        $d77 = $d76 / d3;

        $d78 = $d77 / d3;

        $r29[0] = $d78;

        $d79 = -2.0 * d97;

        $d80 = $d79 / d3;

        $r29[1] = $d80;

        $d81 = d95 + d4;

        $r29[2] = $d81;

        $r30 = newarray (double)[3];

        $d82 = d95 + d0;

        $d83 = d98 * $d82;

        $d84 = $d83 / d95;

        $d85 = $d84 / d3;

        $d86 = $d85 / d3;

        $r30[0] = $d86;

        $r30[1] = 0.0;

        $d87 = neg d95;

        $d89 = $d87 * d0;

        $d88 = d0 + d95;

        $d90 = $d89 / $d88;

        $d91 = $d90 + d4;

        $r30[2] = $d91;

        $d92 = r1[i18];

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d92);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d99);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r32);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r29);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r30);

        goto label19;

     label08:
        $b10 = d1 cmpl 0.0;

        if $b10 < 0 goto label09;

        $b15 = d2 cmpl 0.0;

        if $b15 < 0 goto label09;

        $z22 = 1;

        goto label10;

     label09:
        $z22 = 0;

     label10:
        $b20 = d1 cmpg 0.0;

        if $b20 > 0 goto label11;

        $b14 = d2 cmpg 0.0;

        if $b14 > 0 goto label11;

        $z23 = 1;

        goto label12;

     label11:
        $z23 = 0;

     label12:
        $z24 = $z22 | $z23;

        if $z24 == 0 goto label13;

        $r27 = newarray (double)[3];

        $d55 = 3.0 * d95;

        $d54 = 3.0 * d0;

        $d56 = $d55 + $d54;

        $d57 = $d56 / d3;

        $d58 = $d57 / d3;

        $r27[0] = $d58;

        $d60 = -4.0 * d95;

        $d59 = 2.0 * d0;

        $d61 = $d60 - $d59;

        $d62 = $d61 / d3;

        $r27[1] = $d62;

        $d63 = d95 + d4;

        $r27[2] = $d63;

        $d64 = r1[i18];

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d64);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r28);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r27);

        goto label19;

     label13:
        $b11 = d95 cmpg 0.0;

        if $b11 >= 0 goto label14;

        $d53 = -2.0 * d95;

        $b13 = d0 cmpl $d53;

        if $b13 < 0 goto label14;

        $z25 = 1;

        goto label15;

     label14:
        $z25 = 0;

     label15:
        $b21 = d95 cmpl 0.0;

        if $b21 <= 0 goto label16;

        $d52 = -2.0 * d95;

        $b12 = d0 cmpg $d52;

        if $b12 > 0 goto label16;

        $z26 = 1;

        goto label17;

     label16:
        $z26 = 0;

     label17:
        $z27 = $z25 | $z26;

        if $z27 == 0 goto label18;

        $d37 = 2.0 * d95;

        $d39 = d0 + $d37;

        $d38 = d0 - d95;

        d100 = $d39 / $d38;

        $d41 = r1[i18];

        $d40 = d3 * d100;

        d101 = $d41 + $d40;

        $d42 = d0 - d95;

        $d43 = $d42 / 3.0;

        d102 = $d43 / d95;

        $r23 = newarray (double)[3];

        $r23[0] = 0.0;

        $r23[1] = 0.0;

        $d44 = d95 + d4;

        $r23[2] = $d44;

        $r24 = newarray (double)[3];

        $d46 = d102 * d102;

        $d45 = d0 - d95;

        $d47 = $d46 * $d45;

        $d48 = $d47 / d3;

        $d49 = $d48 / d3;

        $r24[0] = $d49;

        $r24[1] = 0.0;

        $d50 = d95 + d4;

        $r24[2] = $d50;

        $d51 = r1[i18];

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d51);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d101);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

        goto label19;

     label18:
        $d20 = 3.0 * d0;

        $d19 = d0 - d95;

        d103 = $d20 / $d19;

        $d22 = r1[i18];

        $d21 = d3 * d103;

        d104 = $d22 + $d21;

        $d23 = d95 - d0;

        $d24 = $d23 / 3.0;

        d105 = $d24 / d0;

        $r19 = newarray (double)[3];

        $d26 = d105 * d105;

        $d25 = d95 - d0;

        $d27 = $d26 * $d25;

        $d28 = $d27 / d3;

        $d29 = $d28 / d3;

        $r19[0] = $d29;

        $d31 = 2.0 * d105;

        $d30 = d95 - d0;

        $d32 = $d31 * $d30;

        $d33 = $d32 / d3;

        $r19[1] = $d33;

        $d34 = d95 + d4;

        $r19[2] = $d34;

        $r20 = newarray (double)[3];

        $r20[0] = 0.0;

        $r20[1] = 0.0;

        $d35 = d0 + d4;

        $r20[2] = $d35;

        $d36 = r1[i18];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d36);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d104);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label19:
        i18 = i18 + 1;

        goto label01;

     label20:
        $i2 = i0 - 1;

        $d5 = r1[$i2];

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        i22 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r12 = newarray (double)[i22];

        r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time> = $r12;

        i23 = 0;

     label21:
        if i23 >= i22 goto label22;

        $r16 = r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] _time>;

        $r17 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i23);

        $r18 = (java.lang.Double) $r17;

        $d6 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        $r16[i23] = $d6;

        i23 = i23 + 1;

        goto label21;

     label22:
        $i3 = i22 - 1;

        r44 = newmultiarray (double)[$i3][3];

        i24 = 0;

     label23:
        $i4 = i22 - 1;

        if i24 >= $i4 goto label24;

        $r14 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i24);

        $r15 = (double[]) $r14;

        r44[i24] = $r15;

        i24 = i24 + 1;

        goto label23;

     label24:
        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r44);

        return $r13;
    }

    private double[] discFwdsFinder(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r3 = newarray (double)[$i1];

        i6 = 0;

     label1:
        $i2 = i0 - 1;

        if i6 >= $i2 goto label2;

        $i3 = i6 + 1;

        $d1 = r2[$i3];

        $i4 = i6 + 1;

        $d0 = r1[$i4];

        $d5 = $d1 * $d0;

        $d3 = r2[i6];

        $d2 = r1[i6];

        $d4 = $d3 * $d2;

        $d9 = $d5 - $d4;

        $i5 = i6 + 1;

        $d7 = r1[$i5];

        $d6 = r1[i6];

        $d8 = $d7 - $d6;

        $d10 = $d9 / $d8;

        r3[i6] = $d10;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[] fwdsFinder(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i12 = 1;

     label1:
        $i1 = i0 - 1;

        if i12 >= $i1 goto label2;

        $d11 = r1[i12];

        $i5 = i12 - 1;

        $d10 = r1[$i5];

        $d13 = $d11 - $d10;

        $d12 = r2[i12];

        $d17 = $d13 * $d12;

        $i6 = i12 + 1;

        $d15 = r1[$i6];

        $i7 = i12 - 1;

        $d14 = r1[$i7];

        $d16 = $d15 - $d14;

        $d27 = $d17 / $d16;

        $i8 = i12 + 1;

        $d19 = r1[$i8];

        $d18 = r1[i12];

        $d21 = $d19 - $d18;

        $i9 = i12 - 1;

        $d20 = r2[$i9];

        $d25 = $d21 * $d20;

        $i10 = i12 + 1;

        $d23 = r1[$i10];

        $i11 = i12 - 1;

        $d22 = r1[$i11];

        $d24 = $d23 - $d22;

        $d26 = $d25 / $d24;

        $d28 = $d27 + $d26;

        r3[i12] = $d28;

        i12 = i12 + 1;

        goto label1;

     label2:
        $d0 = r2[0];

        $d3 = 1.5 * $d0;

        $d1 = r3[1];

        $d2 = 0.5 * $d1;

        $d4 = $d3 - $d2;

        r3[0] = $d4;

        $i4 = i0 - 1;

        $i2 = i0 - 2;

        $d5 = r2[$i2];

        $d8 = 1.5 * $d5;

        $i3 = i0 - 2;

        $d6 = r3[$i3];

        $d7 = 0.5 * $d6;

        $d9 = $d8 - $d7;

        r3[$i4] = $d9;

        $r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double[] fwdsModifier(double[],double[])>(r2, r3);

        return $r4;
    }

    private double[] fwdsModifier(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r2;

        r3 = newarray (double)[i0];

        $d2 = r2[0];

        $d0 = r1[0];

        $d1 = 2.0 * $d0;

        $d3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double boundFunc(double,double,double)>(0.0, $d2, $d1);

        r3[0] = $d3;

        i6 = 1;

     label1:
        $i1 = i0 - 1;

        if i6 >= $i1 goto label2;

        $d12 = r2[i6];

        $i5 = i6 - 1;

        $d8 = r1[$i5];

        $d11 = 2.0 * $d8;

        $d9 = r1[i6];

        $d10 = 2.0 * $d9;

        $d13 = staticinvoke <java.lang.Math: double min(double,double)>($d11, $d10);

        $d14 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double boundFunc(double,double,double)>(0.0, $d12, $d13);

        r3[i6] = $d14;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i4 = i0 - 1;

        $i2 = i0 - 1;

        $d6 = r2[$i2];

        $i3 = i0 - 2;

        $d4 = r1[$i3];

        $d5 = 2.0 * $d4;

        $d7 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator: double boundFunc(double,double,double)>(0.0, $d6, $d5);

        r3[$i4] = $d7;

        return r3;
    }

    private double boundFunc(double, double, double)
    {
        com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator r0;
        double d0, d1, d2, $d3, $d4;

        r0 := @this: com.opengamma.analytics.math.interpolation.MonotoneConvexSplineInterpolator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        $d4 = staticinvoke <java.lang.Math: double min(double,double)>($d3, d2);

        return $d4;
    }
}
