class org.apache.commons.math3.linear.SymmLQ$State extends java.lang.Object
{
    static final double CBRT_MACH_PREC;
    static final double MACH_PREC;
    private final org.apache.commons.math3.linear.RealLinearOperator a;
    private final org.apache.commons.math3.linear.RealVector b;
    private final boolean check;
    private final double delta;
    private double beta;
    private double beta1;
    private double bstep;
    private double cgnorm;
    private double dbar;
    private double gammaZeta;
    private double gbar;
    private double gmax;
    private double gmin;
    private final boolean goodb;
    private boolean hasConverged;
    private double lqnorm;
    private final org.apache.commons.math3.linear.RealLinearOperator m;
    private double minusEpsZeta;
    private final org.apache.commons.math3.linear.RealVector mb;
    private double oldb;
    private org.apache.commons.math3.linear.RealVector r1;
    private org.apache.commons.math3.linear.RealVector r2;
    private double rnorm;
    private final double shift;
    private double snprod;
    private double tnorm;
    private org.apache.commons.math3.linear.RealVector wbar;
    private final org.apache.commons.math3.linear.RealVector xL;
    private org.apache.commons.math3.linear.RealVector y;
    private double ynorm2;
    private boolean bIsNull;

    public void <init>(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, boolean, double, double, boolean)
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealLinearOperator r1, r2;
        org.apache.commons.math3.linear.RealVector r3, $r6;
        boolean z0, z1;
        double d0, d1;
        org.apache.commons.math3.linear.ArrayRealVector $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        r1 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        r2 := @parameter1: org.apache.commons.math3.linear.RealLinearOperator;

        r3 := @parameter2: org.apache.commons.math3.linear.RealVector;

        z0 := @parameter3: boolean;

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        z1 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a> = r1;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m> = r2;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b> = r3;

        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        $i0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i0);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL> = $r4;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb> = z0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift> = d0;

        if r2 != null goto label1;

        $r6 = r3;

        goto label2;

     label1:
        $r6 = virtualinvoke r2.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r3);

     label2:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb> = $r6;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged> = 0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check> = z1;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double delta> = d1;

        return;
    }

    private static void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.linear.NonSelfAdjointOperatorException
    {
        org.apache.commons.math3.linear.RealLinearOperator r0;
        org.apache.commons.math3.linear.RealVector r1, r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math3.exception.util.ExceptionContext r5;
        byte $b0;
        org.apache.commons.math3.linear.NonSelfAdjointOperatorException $r6;
        java.lang.Double $r7;

        r0 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter3: org.apache.commons.math3.linear.RealVector;

        d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r2);

        d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r3);

        $d3 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d5 = d0 + $d3;

        $d4 = <org.apache.commons.math3.linear.SymmLQ$State: double CBRT_MACH_PREC>;

        d2 = $d5 * $d4;

        $d6 = d0 - d1;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d6);

        $b0 = $d7 cmpl d2;

        if $b0 <= 0 goto label1;

        $r6 = new org.apache.commons.math3.linear.NonSelfAdjointOperatorException;

        specialinvoke $r6.<org.apache.commons.math3.linear.NonSelfAdjointOperatorException: void <init>()>();

        r5 = virtualinvoke $r6.<org.apache.commons.math3.linear.NonSelfAdjointOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", r0);

        virtualinvoke r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector1", r1);

        virtualinvoke r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector2", r2);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        virtualinvoke r5.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("threshold", $r7);

        throw $r6;

     label1:
        return;
    }

    private static void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException
    {
        org.apache.commons.math3.linear.RealLinearOperator r0;
        org.apache.commons.math3.linear.RealVector r1;
        org.apache.commons.math3.exception.util.ExceptionContext r3;
        org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException $r4;

        r0 := @parameter0: org.apache.commons.math3.linear.RealLinearOperator;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r4 = new org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException;

        specialinvoke $r4.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: void <init>()>();

        r3 = virtualinvoke $r4.<org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        virtualinvoke r3.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("operator", r0);

        virtualinvoke r3.<org.apache.commons.math3.exception.util.ExceptionContext: void setValue(java.lang.String,java.lang.Object)>("vector", r1);

        throw $r4;
    }

    private static void daxpy(double, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.linear.RealVector r0, r1;
        int i0, i1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d2 = d0 * $d1;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d4 = $d2 + $d3;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, $d4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void daxpbypz(double, org.apache.commons.math3.linear.RealVector, double, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.linear.RealVector r0, r1, r2;
        int i0, i1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.linear.RealVector;

        d1 := @parameter2: double;

        r1 := @parameter3: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter4: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d4 = d0 * $d3;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d6 = d1 * $d5;

        $d7 = $d4 + $d6;

        $d8 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        d2 = $d7 + $d8;

        virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, d2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void refineSolution(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, i3, i4, i5;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27, $d28, d30, d31, d32, d33;
        byte $b1, $b2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        i0 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $d6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        $d5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b1 = $d6 cmpg $d5;

        if $b1 >= 0 goto label04;

        $z1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z1 != 0 goto label01;

        $r10 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setSubVector(int,org.apache.commons.math3.linear.RealVector)>(0, $r10);

        goto label11;

     label01:
        $d23 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        $d22 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        d26 = $d23 / $d22;

        i3 = 0;

     label02:
        if i3 >= i0 goto label03;

        $r8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb>;

        d0 = virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $r9 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        d2 = virtualinvoke $r9.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $d24 = d26 * d0;

        $d25 = d2 + $d24;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i3, $d25);

        i3 = i3 + 1;

        goto label02;

     label03:
        goto label11;

     label04:
        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $d8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $b2 = $d8 cmpl 0.0;

        if $b2 != 0 goto label05;

        $d21 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d28 = d27 * $d21;

        goto label06;

     label05:
        $d28 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

     label06:
        $d9 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        d1 = $d9 / $d28;

        $d12 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        $d10 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d11 = $d10 * d1;

        $d14 = $d12 + $d11;

        $d13 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        d3 = $d14 / $d13;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z0 != 0 goto label09;

        i4 = 0;

     label07:
        if i4 >= i0 goto label08;

        $r6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        d30 = virtualinvoke $r6.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i4);

        $r7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        d31 = virtualinvoke $r7.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i4);

        $d19 = d1 * d31;

        $d20 = d30 + $d19;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i4, $d20);

        i4 = i4 + 1;

        goto label07;

     label08:
        goto label11;

     label09:
        i5 = 0;

     label10:
        if i5 >= i0 goto label11;

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        d32 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i5);

        $r4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        d33 = virtualinvoke $r4.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i5);

        $r5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector mb>;

        d4 = virtualinvoke $r5.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i5);

        $d15 = d1 * d33;

        $d17 = d32 + $d15;

        $d16 = d3 * d4;

        $d18 = $d17 + $d16;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i5, $d18);

        i5 = i5 + 1;

        goto label10;

     label11:
        return;
    }

    void init()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r3, $r4, $r6, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r25, $r26, $r28, $r30, $r31, $r34, $r35, $r36, $r38, $r41, $r42, $r43, $r44, $r46, $r47, $r48;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33;
        org.apache.commons.math3.linear.RealLinearOperator $r5, $r7, $r8, $r10, $r20, $r24, $r27, $r29, $r32, $r33, $r37, $r39, $r40;
        byte $b0, $b1, $b3;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.linear.ArrayRealVector $r23;
        int $i2;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: void set(double)>(0.0);

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1> = $r4;

        $r5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r5 != null goto label01;

        $r44 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector b>;

        $r46 = virtualinvoke $r44.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        goto label02;

     label01:
        $r7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r46 = virtualinvoke $r7.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r6);

     label02:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r46;

        $r8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r8 == null goto label03;

        $z2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check>;

        if $z2 == 0 goto label03;

        $r40 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r41 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r42 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r39 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r38 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r43 = virtualinvoke $r39.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r38);

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r40, $r41, $r42, $r43);

     label03:
        $r47 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r48 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d32 = virtualinvoke $r47.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r48);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1> = $d32;

        $d33 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b3 = $d33 cmpg 0.0;

        if $b3 >= 0 goto label04;

        $r37 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r36 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r37, $r36);

     label04:
        $d3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b0 = $d3 cmpl 0.0;

        if $b0 != 0 goto label05;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull> = 1;

        return;

     label05:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull> = 0;

        $d4 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1> = $d5;

        $r9 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d7 = 1.0 / $d6;

        r1 = virtualinvoke $r9.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>($d7);

        $r10 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r11;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean check>;

        if $z0 == 0 goto label06;

        $r33 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r34 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r32 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r31 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r35 = virtualinvoke $r32.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r31);

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($r33, r1, $r34, $r35);

     label06:
        $d8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift>;

        $d9 = neg $d8;

        $r12 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d9, r1, $r12);

        $r13 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r13);

        $d11 = neg d0;

        $d10 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $d12 = $d11 / $d10;

        $r15 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r14 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d12, $r15, $r14);

        $r16 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r16);

        d2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $d13 = neg d1;

        $d14 = $d13 / d2;

        $r17 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d14, r1, $r17);

        $r18 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2> = $r19;

        $r20 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r20 == null goto label07;

        $r29 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r28 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r30 = virtualinvoke $r29.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r28);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r30;

     label07:
        $d15 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb> = $d15;

        $r22 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r21 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d16 = virtualinvoke $r22.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r21);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d16;

        $d17 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $b1 = $d17 cmpg 0.0;

        if $b1 >= 0 goto label08;

        $r27 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r26 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r27, $r26);

     label08:
        $d18 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d18);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d19;

        $d20 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm> = $d20;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar> = d0;

        $d21 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar> = $d21;

        $d22 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta> = $d22;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta> = 0.0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep> = 0.0;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod> = 1.0;

        $d26 = d0 * d0;

        $d24 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d23 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d25 = $d24 * $d23;

        $d27 = $d26 + $d25;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm> = $d27;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2> = 0.0;

        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d29 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d30 = $d28 + $d29;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax> = $d30;

        $d31 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin> = $d31;

        $z1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean goodb>;

        if $z1 == 0 goto label09;

        $r23 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r24 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $i2 = virtualinvoke $r24.<org.apache.commons.math3.linear.RealLinearOperator: int getRowDimension()>();

        specialinvoke $r23.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>($i2);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar> = $r23;

        $r25 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        virtualinvoke $r25.<org.apache.commons.math3.linear.RealVector: void set(double)>(0.0);

        goto label10;

     label09:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar> = r1;

     label10:
        specialinvoke r0.<org.apache.commons.math3.linear.SymmLQ$State: void updateNorms()>();

        return;
    }

    void update()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        org.apache.commons.math3.linear.RealVector r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r25;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85;
        int i0, i2;
        org.apache.commons.math3.linear.RealLinearOperator $r3, $r12, $r21, $r24;
        byte $b1;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $r2 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d12 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d13 = 1.0 / $d12;

        r1 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>($d13);

        $r3 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator a>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>(r1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r4;

        $d14 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double shift>;

        $d19 = neg $d14;

        $d15 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d17 = neg $d15;

        $d16 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d18 = $d17 / $d16;

        $r6 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1>;

        $r5 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpbypz(double,org.apache.commons.math3.linear.RealVector,double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d19, r1, $d18, $r6, $r5);

        $r7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r7);

        $d21 = neg d0;

        $d20 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d22 = $d21 / $d20;

        $r9 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void daxpy(double,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector)>($d22, $r9, $r8);

        $r10 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r1> = $r10;

        $r11 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2> = $r11;

        $r12 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        if $r12 == null goto label1;

        $r24 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r23 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r25 = virtualinvoke $r24.<org.apache.commons.math3.linear.RealLinearOperator: org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)>($r23);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y> = $r25;

     label1:
        $d23 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb> = $d23;

        $r14 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector r2>;

        $r13 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        $d24 = virtualinvoke $r14.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r13);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d24;

        $d25 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $b1 = $d25 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $r21 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealLinearOperator m>;

        $r20 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector y>;

        staticinvoke <org.apache.commons.math3.linear.SymmLQ$State: void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator,org.apache.commons.math3.linear.RealVector)>($r21, $r20);

     label2:
        $d26 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d26);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta> = $d27;

        $d37 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        $d31 = d0 * d0;

        $d29 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d28 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d30 = $d29 * $d28;

        $d35 = $d31 + $d30;

        $d33 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d32 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d34 = $d33 * $d32;

        $d36 = $d35 + $d34;

        $d38 = $d37 + $d36;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm> = $d38;

        $d40 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $d39 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $d44 = $d40 * $d39;

        $d42 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d41 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        $d43 = $d42 * $d41;

        $d45 = $d44 + $d43;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d45);

        $d46 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        d2 = $d46 / d1;

        $d47 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double oldb>;

        d3 = $d47 / d1;

        $d48 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar>;

        $d50 = d2 * $d48;

        $d49 = d3 * d0;

        d4 = $d50 + $d49;

        $d51 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar>;

        $d53 = d3 * $d51;

        $d52 = d2 * d0;

        $d54 = $d53 - $d52;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar> = $d54;

        $d55 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        d5 = d3 * $d55;

        $d57 = neg d2;

        $d56 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d58 = $d57 * $d56;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double dbar> = $d58;

        $d59 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        d6 = $d59 / d1;

        d7 = d6 * d2;

        d8 = d6 * d3;

        $r15 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        i0 = virtualinvoke $r15.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r16 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        d9 = virtualinvoke $r16.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        d10 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r17 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        d11 = virtualinvoke $r17.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $r18 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector xL>;

        $d79 = d11 * d7;

        $d81 = d9 + $d79;

        $d80 = d10 * d8;

        $d82 = $d81 + $d80;

        virtualinvoke $r18.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d82);

        $r19 = r0.<org.apache.commons.math3.linear.SymmLQ$State: org.apache.commons.math3.linear.RealVector wbar>;

        $d84 = d11 * d3;

        $d83 = d10 * d2;

        $d85 = $d84 - $d83;

        virtualinvoke $r19.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d85);

        i2 = i2 + 1;

        goto label3;

     label4:
        $d63 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep>;

        $d60 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d61 = $d60 * d2;

        $d62 = $d61 * d6;

        $d64 = $d63 + $d62;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double bstep> = $d64;

        $d65 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d66 = $d65 * d3;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod> = $d66;

        $d67 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        $d68 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d67, d1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax> = $d68;

        $d69 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        $d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d69, d1);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin> = $d70;

        $d72 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2>;

        $d71 = d6 * d6;

        $d73 = $d72 + $d71;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2> = $d73;

        $d75 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        $d74 = d4 * d6;

        $d76 = $d75 - $d74;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta> = $d76;

        $d77 = neg d5;

        $d78 = $d77 * d6;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta> = $d78;

        specialinvoke r0.<org.apache.commons.math3.linear.SymmLQ$State: void updateNorms()>();

        return;
    }

    private void updateNorms()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double d0, d1, d2, d3, d4, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, d46;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        org.apache.commons.math3.linear.SingularOperatorException $r2;
        org.apache.commons.math3.linear.IllConditionedOperatorException $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $d7 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double tnorm>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $d8 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double ynorm2>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d8);

        $d9 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d2 = d0 * $d9;

        $d11 = d0 * d1;

        $d10 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        d3 = $d11 * $d10;

        $d13 = d0 * d1;

        $d12 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double delta>;

        d4 = $d13 * $d12;

        $d14 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

        $b0 = $d14 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d45 = d2;

        goto label2;

     label1:
        $d45 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gbar>;

     label2:
        $d16 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        $d15 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gammaZeta>;

        $d20 = $d16 * $d15;

        $d18 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        $d17 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double minusEpsZeta>;

        $d19 = $d18 * $d17;

        $d21 = $d20 + $d19;

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d21);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm> = $d22;

        $d24 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double snprod>;

        $d23 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        d6 = $d24 * $d23;

        $d25 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d26 = d6 * $d25;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d45);

        $d28 = $d26 / $d27;

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm> = $d28;

        $d30 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        $d29 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b1 = $d30 cmpg $d29;

        if $b1 > 0 goto label3;

        $d44 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        $d43 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        d46 = $d44 / $d43;

        goto label4;

     label3:
        $d31 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmax>;

        $d32 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double gmin>;

        $d33 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d45);

        $d34 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d32, $d33);

        d46 = $d31 / $d34;

     label4:
        $d35 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d36 = d46 * $d35;

        $b2 = $d36 cmpl 0.1;

        if $b2 < 0 goto label5;

        $r3 = new org.apache.commons.math3.linear.IllConditionedOperatorException;

        specialinvoke $r3.<org.apache.commons.math3.linear.IllConditionedOperatorException: void <init>(double)>(d46);

        throw $r3;

     label5:
        $d37 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta1>;

        $b3 = $d37 cmpg d3;

        if $b3 > 0 goto label6;

        $r2 = new org.apache.commons.math3.linear.SingularOperatorException;

        specialinvoke $r2.<org.apache.commons.math3.linear.SingularOperatorException: void <init>()>();

        throw $r2;

     label6:
        $d39 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $d38 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double lqnorm>;

        $d40 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>($d39, $d38);

        r0.<org.apache.commons.math3.linear.SymmLQ$State: double rnorm> = $d40;

        $d41 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b4 = $d41 cmpg d3;

        if $b4 <= 0 goto label7;

        $d42 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double cgnorm>;

        $b5 = $d42 cmpg d4;

        if $b5 > 0 goto label8;

     label7:
        $z0 = 1;

        goto label9;

     label8:
        $z0 = 0;

     label9:
        r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged> = $z0;

        return;
    }

    boolean hasConverged()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean hasConverged>;

        return $z0;
    }

    boolean bEqualsNullVector()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $z0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: boolean bIsNull>;

        return $z0;
    }

    boolean betaEqualsZero()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $d1 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double beta>;

        $d0 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $b0 = $d1 cmpg $d0;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    double getNormOfResidual()
    {
        org.apache.commons.math3.linear.SymmLQ$State r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.SymmLQ$State;

        $d0 = r0.<org.apache.commons.math3.linear.SymmLQ$State: double rnorm>;

        return $d0;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC> = $d0;

        $d1 = <org.apache.commons.math3.linear.SymmLQ$State: double MACH_PREC>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d1);

        <org.apache.commons.math3.linear.SymmLQ$State: double CBRT_MACH_PREC> = $d2;

        return;
    }
}
