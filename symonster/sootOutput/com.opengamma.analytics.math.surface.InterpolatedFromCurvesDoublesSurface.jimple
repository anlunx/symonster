public class com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface extends com.opengamma.analytics.math.surface.Surface
{
    private final double[] _points;
    private final int _nCurves;
    private final com.opengamma.analytics.math.curve.Curve[] _curves;
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator;
    private final boolean _xzCurves;

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 0);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.lang.Double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.lang.Double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 0);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.util.List r0, r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 0);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.util.Map r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.Map;

        r1 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r2 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, 0);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 0, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.lang.Double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.lang.Double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 0, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.util.List r0, r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 0, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface 'from'(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.util.Map r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.Map;

        r1 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter3: java.lang.String;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, 0, r2);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 1);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.lang.Double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.lang.Double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 1);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.util.List r0, r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, r2, 1);

        return $r3;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D)
    {
        boolean z0;
        java.util.Map r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.Map;

        r1 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        $r2 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>(z0, r0, r1, 1);

        return $r2;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 1, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.lang.Double[] r0;
        com.opengamma.analytics.math.curve.Curve[] r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Double[];

        r1 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.lang.Double[],com.opengamma.analytics.math.curve.Curve[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 1, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.util.List r0, r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter4: java.lang.String;

        $r4 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r4.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, r2, 1, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface fromSorted(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, java.lang.String)
    {
        boolean z0;
        java.util.Map r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        java.lang.String r2;
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.Map;

        r1 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter3: java.lang.String;

        $r3 = new com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        specialinvoke $r3.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: void <init>(boolean,java.util.Map,com.opengamma.analytics.math.interpolation.Interpolator1D,boolean,java.lang.String)>(z0, r0, r1, 1, r2);

        return $r3;
    }

    public void <init>(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        double[] r1, $r5, $r6;
        com.opengamma.analytics.math.curve.Curve[] r2, $r4, $r8;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r7;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        i0 = lengthof r1;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.lang.Object[],java.lang.String)>(r2, "curves");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $r6 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i0);

        $r8 = (com.opengamma.analytics.math.curve.Curve[]) $r7;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r8;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = i0;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label3;

        $r5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r5, $r4);

     label3:
        return;
    }

    public void <init>(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.curve.Curve[] r2, $r5, $r7;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.Double r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        double[] $r6, $r13, $r14;
        java.lang.StringBuilder $r8, $r10, $r11;
        com.opengamma.analytics.math.curve.Curve $r9;
        java.lang.String $r12;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        $i3 = lengthof r1;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i3;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = r2;

        $i4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r14 = newarray (double)[$i4];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r14;

        i5 = 0;

     label3:
        $i6 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        if i5 >= $i6 goto label4;

        r4 = r1[i5];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "x");

        $r7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r9 = $r7[i5];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("curve ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r9, $r12);

        $r13 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r13[i5] = $d0;

        i5 = i5 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label5;

        $r6 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r6, $r5);

     label5:
        return;
    }

    public void <init>(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.Double r4;
        com.opengamma.analytics.math.curve.Curve r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        com.opengamma.analytics.math.curve.Curve[] $r6, $r11, $r13;
        double[] $r7, $r10, $r12;
        java.lang.Object $r8, $r9;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i3;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $i4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r12 = newarray (double)[$i4];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r12;

        $i5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r13 = newarray (com.opengamma.analytics.math.curve.Curve)[$i5];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r13;

        i6 = 0;

     label3:
        $i7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        if i6 >= $i7 goto label4;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (java.lang.Double) $r8;

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        r5 = (com.opengamma.analytics.math.curve.Curve) $r9;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "curve");

        $r10 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r10[i6] = $d0;

        $r11 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r11[i6] = r5;

        i6 = i6 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label5;

        $r7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r6 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r7, $r6);

     label5:
        return;
    }

    public void <init>(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Double r5;
        com.opengamma.analytics.math.curve.Curve r6;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r7, $r11, $r15;
        com.opengamma.analytics.math.curve.Curve[] $r8, $r10, $r16;
        java.util.Set $r9;
        java.lang.Object $r12, $r13, $r14;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter3: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "curves");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "interpolator");

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Map,java.lang.String)>(r1, "curves");

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i0;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $i1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r7 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r7;

        $i2 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r8 = newarray (com.opengamma.analytics.math.curve.Curve)[$i2];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r8;

        i4 = 0;

        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.Double) $r13;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (com.opengamma.analytics.math.curve.Curve) $r14;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r6, "curve");

        $r15 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r15[i4] = $d0;

        $r16 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $i3 = i4;

        i4 = i4 + 1;

        $r16[$i3] = r6;

        goto label1;

     label2:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r2;

        if z1 != 0 goto label3;

        $r11 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r10 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r11, $r10);

     label3:
        return;
    }

    public void <init>(boolean, double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        double[] r1, $r6, $r7;
        com.opengamma.analytics.math.curve.Curve[] r2, $r5, $r9;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r8;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>(java.lang.String)>(r4);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        i0 = lengthof r1;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void noNullElements(java.lang.Object[],java.lang.String)>(r2, "curves");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $r7 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i0);

        $r9 = (com.opengamma.analytics.math.curve.Curve[]) $r8;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r9;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = i0;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label3;

        $r6 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r6, $r5);

     label3:
        return;
    }

    public void <init>(boolean, java.lang.Double[], com.opengamma.analytics.math.curve.Curve[], com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.lang.Double[] r1;
        com.opengamma.analytics.math.curve.Curve[] r2, $r7, $r10, $r12;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        java.lang.Double r5;
        com.opengamma.analytics.math.curve.Curve r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        double[] $r8, $r9, $r11;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: com.opengamma.analytics.math.curve.Curve[];

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>(java.lang.String)>(r4);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        $i3 = lengthof r1;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i3;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $i4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r11 = newarray (double)[$i4];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r11;

        $i5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r12 = newarray (com.opengamma.analytics.math.curve.Curve)[$i5];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r12;

        i6 = 0;

     label3:
        $i7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        if i6 >= $i7 goto label4;

        r5 = r1[i6];

        r6 = r2[i6];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r6, "curve");

        $r9 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r9[i6] = $d0;

        $r10 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r10[i6] = r6;

        i6 = i6 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label5;

        $r8 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r8, $r7);

     label5:
        return;
    }

    public void <init>(boolean, java.util.List, java.util.List, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.util.List r1, r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D r3;
        java.lang.String r4;
        java.lang.Double r5;
        com.opengamma.analytics.math.curve.Curve r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        com.opengamma.analytics.math.curve.Curve[] $r7, $r12, $r14;
        double[] $r8, $r11, $r13;
        java.lang.Object $r9, $r10;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter4: boolean;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>(java.lang.String)>(r4);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "points");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "curves");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z2);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "interpolator");

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i3;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $i4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r13 = newarray (double)[$i4];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r13;

        $i5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r14 = newarray (com.opengamma.analytics.math.curve.Curve)[$i5];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r14;

        i6 = 0;

     label3:
        $i7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        if i6 >= $i7 goto label4;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r5 = (java.lang.Double) $r9;

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i6);

        r6 = (com.opengamma.analytics.math.curve.Curve) $r10;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r6, "curve");

        $r11 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $r11[i6] = $d0;

        $r12 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r12[i6] = r6;

        i6 = i6 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r3;

        if z1 != 0 goto label5;

        $r8 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r7 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r8, $r7);

     label5:
        return;
    }

    public void <init>(boolean, java.util.Map, com.opengamma.analytics.math.interpolation.Interpolator1D, boolean, java.lang.String)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean z0, z1, $z2;
        java.util.Map r1;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.lang.String r3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.lang.Double r6;
        com.opengamma.analytics.math.curve.Curve r7;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r8, $r12, $r16;
        com.opengamma.analytics.math.curve.Curve[] $r9, $r11, $r17;
        java.util.Set $r10;
        java.lang.Object $r13, $r14, $r15;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: com.opengamma.analytics.math.interpolation.Interpolator1D;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>(java.lang.String)>(r3);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "curves");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "interpolator");

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Map,java.lang.String)>(r1, "curves");

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves> = $i0;

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves> = z0;

        $i1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r8 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points> = $r8;

        $i2 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        $r9 = newarray (com.opengamma.analytics.math.curve.Curve)[$i2];

        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves> = $r9;

        i4 = 0;

        $r10 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.Double) $r14;

        $r15 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (com.opengamma.analytics.math.curve.Curve) $r15;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r6, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r7, "curve");

        $r16 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $r16[i4] = $d0;

        $r17 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $i3 = i4;

        i4 = i4 + 1;

        $r17[$i3] = r7;

        goto label1;

     label2:
        r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r2;

        if z1 != 0 goto label3;

        $r12 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r11 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],java.lang.Object[])>($r12, $r11);

     label3:
        return;
    }

    public java.lang.Double getZValue(java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.Double r1, r2, $r8, $r12, $r14, $r19, $r23, $r25;
        double[] r3, $r4, $r10, $r15, $r21;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8, i9;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        com.opengamma.analytics.math.curve.Curve[] $r5, $r16, r26, r28;
        com.opengamma.analytics.math.curve.Curve $r6, $r17, r27, r29;
        java.lang.Object $r7, $r13, $r18, $r24;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r9, $r20;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r11, $r22;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        $i0 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: int _nCurves>;

        r3 = newarray (double)[$i0];

        i3 = 0;

        $z0 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves>;

        if $z0 == 0 goto label4;

        $r15 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        i4 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r15, $d2);

        if i4 >= 0 goto label3;

        r26 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        i5 = lengthof r26;

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        r27 = r26[i6];

        $i2 = i3;

        i3 = i3 + 1;

        $r24 = virtualinvoke r27.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>(r1);

        $r25 = (java.lang.Double) $r24;

        $d3 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        r3[$i2] = $d3;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r21 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r20 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r22 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D)>($r21, r3, $r20);

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>(r2);

        return $r23;

     label3:
        $r16 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r17 = $r16[i4];

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>(r1);

        $r19 = (java.lang.Double) $r18;

        return $r19;

     label4:
        $r4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        i7 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r4, $d0);

        if i7 >= 0 goto label7;

        r28 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        i8 = lengthof r28;

        i9 = 0;

     label5:
        if i9 >= i8 goto label6;

        r29 = r28[i9];

        $i1 = i3;

        i3 = i3 + 1;

        $r13 = virtualinvoke r29.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>(r2);

        $r14 = (java.lang.Double) $r13;

        $d1 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        r3[$i1] = $d1;

        i9 = i9 + 1;

        goto label5;

     label6:
        $r10 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r9 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r11 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D)>($r10, r3, $r9);

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>(r1);

        return $r12;

     label7:
        $r5 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r6 = $r5[i7];

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>(r2);

        $r8 = (java.lang.Double) $r7;

        return $r8;
    }

    public java.lang.Double getZValue(com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        com.opengamma.util.tuple.Pair r1;
        java.lang.Object $r2, $r4;
        java.lang.Double $r3, $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.Pair;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r3 = (java.lang.Double) $r2;

        $r4 = virtualinvoke r1.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $r5 = (java.lang.Double) $r4;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r3, $r5);

        return $r6;
    }

    public java.lang.Double[] getXData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double[] getYData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Double[] getZData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int size()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        return $r1;
    }

    public double[] getPoints()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        return $r1;
    }

    public com.opengamma.analytics.math.curve.Curve[] getCurves()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        com.opengamma.analytics.math.curve.Curve[] $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        return $r1;
    }

    public boolean isXZCurves()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $z0 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves>;

        return $z0;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        com.opengamma.analytics.math.curve.Curve[] $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i13;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r2;
        double[] $r3;
        boolean $z0;
        short $s12;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        i8 = specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: int hashCode()>();

        $i1 = 31 * i8;

        $r1 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        i9 = $i1 + $i2;

        $i3 = 31 * i9;

        $r2 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $i4 = virtualinvoke $r2.<com.opengamma.analytics.math.interpolation.Interpolator1D: int hashCode()>();

        i10 = $i3 + $i4;

        $i5 = 31 * i10;

        $r3 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r3);

        i11 = $i5 + $i6;

        $i7 = 31 * i11;

        $z0 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves>;

        if $z0 == 0 goto label1;

        $s12 = 1231;

        goto label2;

     label1:
        $s12 = 1237;

     label2:
        i13 = $i7 + $s12;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class $r3, $r4;
        com.opengamma.analytics.math.curve.Curve[] $r5, $r6;
        double[] $r7, $r8;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface) r1;

        $r6 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $r5 = r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.curve.Curve[] _curves>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $r7 = r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: double[] _points>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        $z4 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves>;

        $z3 = r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: boolean _xzCurves>;

        if $z4 == $z3 goto label6;

        return 0;

     label6:
        $r10 = r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r9 = r2.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $z5 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        return $z5;
    }

    public volatile java.lang.Object getZValue(com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        com.opengamma.util.tuple.Pair r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        r1 := @parameter0: com.opengamma.util.tuple.Pair;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double getZValue(com.opengamma.util.tuple.Pair)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getZValue(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double getZValue(java.lang.Double,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object[] getZData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double[] getZData()>();

        return $r1;
    }

    public volatile java.lang.Object[] getYData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double[] getYData()>();

        return $r1;
    }

    public volatile java.lang.Object[] getXData()
    {
        com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface r0;
        java.lang.Double[] $r1;

        r0 := @this: com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.surface.InterpolatedFromCurvesDoublesSurface: java.lang.Double[] getXData()>();

        return $r1;
    }
}
