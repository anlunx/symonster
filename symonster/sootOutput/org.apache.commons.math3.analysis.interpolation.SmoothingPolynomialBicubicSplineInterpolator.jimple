public class org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator extends org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator
{
    private final org.apache.commons.math3.fitting.PolynomialFitter xFitter;
    private final int xDegree;
    private final org.apache.commons.math3.fitting.PolynomialFitter yFitter;
    private final int yDegree;

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int)>(3);

        return;
    }

    public void <init>(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int,int)>(i0, i0);

        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int i0, i1;
        org.apache.commons.math3.optim.SimpleVectorValueChecker $r2;
        double $d1, $d2, $d3, $d4;
        org.apache.commons.math3.fitting.PolynomialFitter $r3, $r5;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer $r4, $r6;
        org.apache.commons.math3.exception.NotPositiveException $r7, $r9;
        java.lang.Integer $r8, $r10;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: void <init>()>();

        if i0 >= 0 goto label1;

        $r9 = new org.apache.commons.math3.exception.NotPositiveException;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r9.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r10);

        throw $r9;

     label1:
        if i1 >= 0 goto label2;

        $r7 = new org.apache.commons.math3.exception.NotPositiveException;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r7.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r8);

        throw $r7;

     label2:
        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int xDegree> = i0;

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int yDegree> = i1;

        $r2 = new org.apache.commons.math3.optim.SimpleVectorValueChecker;

        $d1 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d4 = 100.0 * $d1;

        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d3 = 100.0 * $d2;

        specialinvoke $r2.<org.apache.commons.math3.optim.SimpleVectorValueChecker: void <init>(double,double)>($d4, $d3);

        $r3 = new org.apache.commons.math3.fitting.PolynomialFitter;

        $r4 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optim.ConvergenceChecker)>(0, $r2);

        specialinvoke $r3.<org.apache.commons.math3.fitting.PolynomialFitter: void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)>($r4);

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter> = $r3;

        $r5 = new org.apache.commons.math3.fitting.PolynomialFitter;

        $r6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;

        specialinvoke $r6.<org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optim.ConvergenceChecker)>(0, $r2);

        specialinvoke $r5.<org.apache.commons.math3.fitting.PolynomialFitter: void <init>(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)>($r6);

        r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter> = $r5;

        return;
    }

    public org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] r1, r2, $r6, $r9, $r11, $r12, $r14, $r17, $r19, $r20, $r22, $r24;
        double[][] r3, r28, r31;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction r4, $r8, $r16, r29;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math3.fitting.PolynomialFitter $r7, $r10, $r13, $r15, $r18, $r21;
        org.apache.commons.math3.exception.DimensionMismatchException $r23, $r25;
        org.apache.commons.math3.exception.NoDataException $r26;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r27, r30;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        $i2 = lengthof r1;

        if $i2 == 0 goto label01;

        $i3 = lengthof r2;

        if $i3 == 0 goto label01;

        $i4 = lengthof r3;

        if $i4 != 0 goto label02;

     label01:
        $r26 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r26.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r26;

     label02:
        $i6 = lengthof r1;

        $i5 = lengthof r3;

        if $i6 == $i5 goto label03;

        $r25 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i14 = lengthof r1;

        $i13 = lengthof r3;

        specialinvoke $r25.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i14, $i13);

        throw $r25;

     label03:
        i0 = lengthof r1;

        i1 = lengthof r2;

        i15 = 0;

     label04:
        if i15 >= i0 goto label06;

        $r22 = r3[i15];

        $i11 = lengthof $r22;

        if $i11 == i1 goto label05;

        $r23 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r24 = r3[i15];

        $i12 = lengthof $r24;

        specialinvoke $r23.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i12, i1);

        throw $r23;

     label05:
        i15 = i15 + 1;

        goto label04;

     label06:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r2);

        r27 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i1];

        i16 = 0;

     label07:
        if i16 >= i1 goto label10;

        $r15 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        virtualinvoke $r15.<org.apache.commons.math3.fitting.PolynomialFitter: void clearObservations()>();

        i17 = 0;

     label08:
        if i17 >= i0 goto label09;

        $r21 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        $d7 = r1[i17];

        $r20 = r3[i17];

        $d6 = $r20[i16];

        virtualinvoke $r21.<org.apache.commons.math3.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d7, $d6);

        i17 = i17 + 1;

        goto label08;

     label09:
        $r16 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r18 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter xFitter>;

        $i9 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int xDegree>;

        $i10 = $i9 + 1;

        $r17 = newarray (double)[$i10];

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(double[])>($r17);

        specialinvoke $r16.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r19);

        r27[i16] = $r16;

        i16 = i16 + 1;

        goto label07;

     label10:
        r28 = newmultiarray (double)[i0][i1];

        i18 = 0;

     label11:
        if i18 >= i1 goto label14;

        r29 = r27[i18];

        i19 = 0;

     label12:
        if i19 >= i0 goto label13;

        $r14 = r28[i19];

        $d4 = r1[i19];

        $d5 = virtualinvoke r29.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d4);

        $r14[i18] = $d5;

        i19 = i19 + 1;

        goto label12;

     label13:
        i18 = i18 + 1;

        goto label11;

     label14:
        r30 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i0];

        i20 = 0;

     label15:
        if i20 >= i0 goto label18;

        $r7 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        virtualinvoke $r7.<org.apache.commons.math3.fitting.PolynomialFitter: void clearObservations()>();

        i21 = 0;

     label16:
        if i21 >= i1 goto label17;

        $r13 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        $d3 = r2[i21];

        $r12 = r28[i20];

        $d2 = $r12[i21];

        virtualinvoke $r13.<org.apache.commons.math3.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d3, $d2);

        i21 = i21 + 1;

        goto label16;

     label17:
        $r8 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        $r10 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.fitting.PolynomialFitter yFitter>;

        $i7 = r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: int yDegree>;

        $i8 = $i7 + 1;

        $r9 = newarray (double)[$i8];

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.fitting.PolynomialFitter: double[] fit(double[])>($r9);

        specialinvoke $r8.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r11);

        r30[i20] = $r8;

        i20 = i20 + 1;

        goto label15;

     label18:
        r31 = newmultiarray (double)[i0][i1];

        i22 = 0;

     label19:
        if i22 >= i0 goto label22;

        r4 = r30[i22];

        i23 = 0;

     label20:
        if i23 >= i1 goto label21;

        $r6 = r31[i22];

        $d0 = r2[i23];

        $d1 = virtualinvoke r4.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d0);

        $r6[i23] = $d1;

        i23 = i23 + 1;

        goto label20;

     label21:
        i22 = i22 + 1;

        goto label19;

     label22:
        $r5 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>(r1, r2, r31);

        return $r5;
    }

    public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] r1, r2;
        double[][] r3;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $r4;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>(r1, r2, r3);

        return $r4;
    }
}
