public class org.apache.commons.math3.geometry.partitioning.BoundaryAttribute extends java.lang.Object
{
    private final org.apache.commons.math3.geometry.partitioning.SubHyperplane plusOutside;
    private final org.apache.commons.math3.geometry.partitioning.SubHyperplane plusInside;
    private final org.apache.commons.math3.geometry.partitioning.NodesSet splitters;

    public void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.NodesSet)>(r1, r2, null);

        return;
    }

    void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.NodesSet)
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, r2;
        org.apache.commons.math3.geometry.partitioning.NodesSet r3;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.NodesSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane plusOutside> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane plusInside> = r2;

        r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet splitters> = r3;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane plusOutside>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane plusInside>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.partitioning.NodesSet getSplitters()
    {
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r0;
        org.apache.commons.math3.geometry.partitioning.NodesSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;

        $r1 = r0.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.NodesSet splitters>;

        return $r1;
    }
}
