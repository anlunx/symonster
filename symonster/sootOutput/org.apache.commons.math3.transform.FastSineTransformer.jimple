public class org.apache.commons.math3.transform.FastSineTransformer extends java.lang.Object implements org.apache.commons.math3.transform.RealTransformer, java.io.Serializable
{
    static final long serialVersionUID;
    private final org.apache.commons.math3.transform.DstNormalization normalization;

    public void <init>(org.apache.commons.math3.transform.DstNormalization)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        org.apache.commons.math3.transform.DstNormalization r1;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        r1 := @parameter0: org.apache.commons.math3.transform.DstNormalization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.transform.FastSineTransformer: org.apache.commons.math3.transform.DstNormalization normalization> = r1;

        return;
    }

    public double[] transform(double[], org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        double[] r1, $r6, $r7, $r8, $r9, $r10;
        org.apache.commons.math3.transform.TransformType r2, $r5;
        org.apache.commons.math3.transform.DstNormalization $r3, $r4;
        int $i0, $i1;
        double $d0, $d1, $d2, d3, d4;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.transform.TransformType;

        $r4 = r0.<org.apache.commons.math3.transform.FastSineTransformer: org.apache.commons.math3.transform.DstNormalization normalization>;

        $r3 = <org.apache.commons.math3.transform.DstNormalization: org.apache.commons.math3.transform.DstNormalization ORTHOGONAL_DST_I>;

        if $r4 != $r3 goto label1;

        $i1 = lengthof r1;

        $d1 = (double) $i1;

        $d2 = 2.0 / $d1;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>(r1);

        $r10 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[] scaleArray(double[],double)>($r9, d3);

        return $r10;

     label1:
        $r5 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType FORWARD>;

        if r2 != $r5 goto label2;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>(r1);

        return $r8;

     label2:
        $i0 = lengthof r1;

        $d0 = (double) $i0;

        d4 = 2.0 / $d0;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] fst(double[])>(r1);

        $r7 = staticinvoke <org.apache.commons.math3.transform.TransformUtils: double[] scaleArray(double[],double)>($r6, d4);

        return $r7;
    }

    public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int, org.apache.commons.math3.transform.TransformType)
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1;
        int i0;
        org.apache.commons.math3.transform.TransformType r2;
        double[] r3, $r4;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 := @parameter4: org.apache.commons.math3.transform.TransformType;

        r3 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: double[] sample(org.apache.commons.math3.analysis.UnivariateFunction,double,double,int)>(r1, d0, d1, i0);

        r3[0] = 0.0;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.transform.FastSineTransformer: double[] transform(double[],org.apache.commons.math3.transform.TransformType)>(r3, r2);

        return $r4;
    }

    protected double[] fst(double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.transform.FastSineTransformer r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25;
        long $l3;
        boolean $z0;
        byte $b4;
        org.apache.commons.math3.transform.FastFourierTransformer $r4;
        org.apache.commons.math3.transform.DftNormalization $r5;
        org.apache.commons.math3.transform.TransformType $r6;
        org.apache.commons.math3.complex.Complex $r7, $r8, $r9;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r10, $r14;
        java.lang.Object[] $r11, $r15;
        org.apache.commons.math3.exception.util.LocalizedFormats $r12, $r16;
        java.lang.Double $r13;
        java.lang.Integer $r17;
        org.apache.commons.math3.complex.Complex[] r19;

        r0 := @this: org.apache.commons.math3.transform.FastSineTransformer;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        r2 = newarray (double)[$i1];

        $i2 = lengthof r1;

        $l3 = (long) $i2;

        $z0 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: boolean isPowerOfTwo(long)>($l3);

        if $z0 != 0 goto label1;

        $r14 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r16 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r15 = newarray (java.lang.Object)[1];

        $i17 = lengthof r1;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r15[0] = $r17;

        specialinvoke $r14.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label1:
        $d1 = r1[0];

        $b4 = $d1 cmpl 0.0;

        if $b4 == 0 goto label2;

        $r10 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ELEMENT_NOT_ZERO>;

        $r11 = newarray (java.lang.Object)[1];

        $d24 = r1[0];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        $r11[0] = $r13;

        specialinvoke $r10.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label2:
        i0 = lengthof r1;

        if i0 != 1 goto label3;

        r2[0] = 0.0;

        return r2;

     label3:
        r3 = newarray (double)[i0];

        r3[0] = 0.0;

        $i6 = i0 >> 1;

        $i5 = i0 >> 1;

        $d2 = r1[$i5];

        $d3 = 2.0 * $d2;

        r3[$i6] = $d3;

        i18 = 1;

     label4:
        $i7 = i0 >> 1;

        if i18 >= $i7 goto label5;

        $d11 = (double) i18;

        $d13 = $d11 * 3.141592653589793;

        $d12 = (double) i0;

        $d14 = $d13 / $d12;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d14);

        $d17 = r1[i18];

        $i14 = i0 - i18;

        $d16 = r1[$i14];

        $d18 = $d17 + $d16;

        d25 = $d15 * $d18;

        $d20 = r1[i18];

        $i15 = i0 - i18;

        $d19 = r1[$i15];

        $d21 = $d20 - $d19;

        d0 = 0.5 * $d21;

        $d22 = d25 + d0;

        r3[i18] = $d22;

        $i16 = i0 - i18;

        $d23 = d25 - d0;

        r3[$i16] = $d23;

        i18 = i18 + 1;

        goto label4;

     label5:
        $r4 = new org.apache.commons.math3.transform.FastFourierTransformer;

        $r5 = <org.apache.commons.math3.transform.DftNormalization: org.apache.commons.math3.transform.DftNormalization STANDARD>;

        specialinvoke $r4.<org.apache.commons.math3.transform.FastFourierTransformer: void <init>(org.apache.commons.math3.transform.DftNormalization)>($r5);

        $r6 = <org.apache.commons.math3.transform.TransformType: org.apache.commons.math3.transform.TransformType FORWARD>;

        r19 = virtualinvoke $r4.<org.apache.commons.math3.transform.FastFourierTransformer: org.apache.commons.math3.complex.Complex[] transform(double[],org.apache.commons.math3.transform.TransformType)>(r3, $r6);

        r2[0] = 0.0;

        $r7 = r19[0];

        $d4 = virtualinvoke $r7.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d5 = 0.5 * $d4;

        r2[1] = $d5;

        i19 = 1;

     label6:
        $i8 = i0 >> 1;

        if i19 >= $i8 goto label7;

        $i9 = 2 * i19;

        $r8 = r19[i19];

        $d6 = virtualinvoke $r8.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d7 = neg $d6;

        r2[$i9] = $d7;

        $i10 = 2 * i19;

        $i11 = $i10 + 1;

        $r9 = r19[i19];

        $d8 = virtualinvoke $r9.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $i12 = 2 * i19;

        $i13 = $i12 - 1;

        $d9 = r2[$i13];

        $d10 = $d8 + $d9;

        r2[$i11] = $d10;

        i19 = i19 + 1;

        goto label6;

     label7:
        return r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.transform.FastSineTransformer: long serialVersionUID> = 20120211L;

        return;
    }
}
