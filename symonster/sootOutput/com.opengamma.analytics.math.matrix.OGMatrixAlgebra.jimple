public class com.opengamma.analytics.math.matrix.OGMatrixAlgebra extends com.opengamma.analytics.math.matrix.MatrixAlgebra
{

    public void <init>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke r0.<com.opengamma.analytics.math.matrix.MatrixAlgebra: void <init>()>();

        return;
    }

    public double getCondition(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getDeterminant(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        double[] r3, r4;
        int i0, $i1, i2;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;
        java.lang.Class $r8, $r11;
        java.lang.String $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r15;
        double $d0, $d1, $d2, d3;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label5;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label5;

        $r14 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r3 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r4 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r3;

        $i1 = lengthof r4;

        if i0 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "Matrix size mismacth");

        d3 = 0.0;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $d1 = r3[i2];

        $d0 = r4[i2];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i2 = i2 + 1;

        goto label3;

     label4:
        return d3;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find inner product of DoubleMatrix1D; have ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getInverse(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getNorm1(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getNorm2(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double[] r2;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        org.apache.commons.lang.NotImplementedException $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label3;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r2 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r2;

        d4 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d2 = r2[i1];

        $d1 = r2[i1];

        $d3 = $d2 * $d1;

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        return $d0;

     label3:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label4;

        $r9 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r9.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r9;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find norm2 of a DoubleMatrix1D; have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public double getNormInfinity(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getOuterProduct(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        double[] r3, r4, $r18;
        int i0, i1, i2, i3;
        double[][] r5;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        java.lang.Class $r9, $r12;
        java.lang.String $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r15, $r16;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r17;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z0 == 0 goto label5;

        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z1 == 0 goto label5;

        $r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        r3 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r16 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        r4 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r3;

        i1 = lengthof r4;

        r5 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r18 = r5[i2];

        $d1 = r3[i2];

        $d0 = r4[i3];

        $d2 = $d1 * $d0;

        $r18[i3] = $d2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r17;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only find outer product of DoubleMatrix1D; have ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r6;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, int)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        int i0;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        i0 := @parameter1: int;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getTrace(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double[][] r2;
        int i0, $i1, i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.Class $r6;
        java.lang.String $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9;
        double[] $r10, $r11;
        double $d0, d1;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z0 == 0 goto label5;

        $r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = lengthof r2;

        $r10 = r2[0];

        $i1 = lengthof $r10;

        if i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Matrix not square");

        d1 = 0.0;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r11 = r2[i2];

        $d0 = $r11[i2];

        d1 = d1 + $d0;

        i2 = i2 + 1;

        goto label3;

     label4:
        return d1;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only take the trace of DoubleMatrix2D; have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double[][] r2, r3;
        int i0, i1, i2, i3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Class $r7;
        java.lang.String $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10, $r12;
        double[] $r11, $r13, $r14;
        double $d0;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r15;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.IdentityMatrix;

        if $z0 == 0 goto label1;

        $r15 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r1;

        return $r15;

     label1:
        $z1 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z1 == 0 goto label6;

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        r2 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = lengthof r2;

        $r11 = r2[0];

        i1 = lengthof $r11;

        r3 = newmultiarray (double)[i1][i0];

        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r14 = r3[i2];

        $r13 = r2[i3];

        $d0 = $r13[i2];

        $r14[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r12;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only take transpose of DoubleMatrix2D; have ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix, com.opengamma.analytics.math.matrix.Matrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.IllegalArgumentException $r3, $r27, $r42;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r28, $r29, $r31, $r32, $r34, $r43, $r44, $r46, $r47, $r49;
        java.lang.Class $r6, $r9, $r30, $r33, $r45, $r48;
        java.lang.String $r11, $r35, $r50;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r16, $r18, $r19, $r20, $r37, $r38, $r51, $r53;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r14, $r15, $r17, $r22, $r23, $r24, $r26, $r40, $r41, $r54, $r56;
        com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix $r21, $r25;
        com.opengamma.analytics.math.matrix.IdentityMatrix $r36, $r39, $r52, $r55, $r57, $r58, $r59;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.Matrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "m1");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "m2");

        $z0 = r1 instanceof com.opengamma.analytics.math.matrix.IdentityMatrix;

        if $z0 == 0 goto label04;

        $z14 = r2 instanceof com.opengamma.analytics.math.matrix.IdentityMatrix;

        if $z14 == 0 goto label01;

        $r58 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r1;

        $r57 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r2;

        $r59 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.IdentityMatrix multiply(com.opengamma.analytics.math.matrix.IdentityMatrix,com.opengamma.analytics.math.matrix.IdentityMatrix)>($r58, $r57);

        return $r59;

     label01:
        $z15 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z15 == 0 goto label02;

        $r55 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r1;

        $r54 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r56 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.IdentityMatrix,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r55, $r54);

        return $r56;

     label02:
        $z16 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z16 == 0 goto label03;

        $r52 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r1;

        $r51 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        $r53 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.IdentityMatrix,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r52, $r51);

        return $r53;

     label03:
        $r42 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can only handle IdentityMatrix by DoubleMatrix2D or DoubleMatrix1D, have ");

        $r45 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r48 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r50);

        throw $r42;

     label04:
        $z1 = r2 instanceof com.opengamma.analytics.math.matrix.IdentityMatrix;

        if $z1 == 0 goto label07;

        $z12 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z12 == 0 goto label05;

        $r40 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r39 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r2;

        $r41 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.IdentityMatrix)>($r40, $r39);

        return $r41;

     label05:
        $z13 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z13 == 0 goto label06;

        $r37 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r36 = (com.opengamma.analytics.math.matrix.IdentityMatrix) r2;

        $r38 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.IdentityMatrix)>($r37, $r36);

        return $r38;

     label06:
        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can only handle  DoubleMatrix2D or DoubleMatrix1D by IdentityMatrix, have ");

        $r30 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r33 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r27;

     label07:
        $z2 = r1 instanceof com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        if $z2 == 0 goto label08;

        $z11 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z11 == 0 goto label08;

        $r25 = (com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix) r1;

        $r24 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r26 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r25, $r24);

        return $r26;

     label08:
        $z3 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z3 == 0 goto label09;

        $z10 = r2 instanceof com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        if $z10 == 0 goto label09;

        $r22 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r21 = (com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix) r2;

        $r23 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix)>($r22, $r21);

        return $r23;

     label09:
        $z4 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z4 == 0 goto label10;

        $z9 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z9 == 0 goto label10;

        $r19 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r18 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        $r20 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r19, $r18);

        return $r20;

     label10:
        $z5 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z5 == 0 goto label11;

        $z8 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z8 == 0 goto label11;

        $r16 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r1;

        $r15 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r17 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r16, $r15);

        return $r17;

     label11:
        $z6 = r1 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if $z6 == 0 goto label12;

        $z7 = r2 instanceof com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        if $z7 == 0 goto label12;

        $r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r12 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) r2;

        $r14 = specialinvoke r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r13, $r12);

        return $r14;

     label12:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only multiply two DoubleMatrix2D; a DoubleMatrix2D and a DoubleMatrix1D; or a DoubleMatrix1D and a DoubleMatrix2D. have ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D getPower(com.opengamma.analytics.math.matrix.Matrix, double)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.Matrix r1;
        double d0;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.Matrix;

        d0 := @parameter1: double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.IdentityMatrix, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.IdentityMatrix r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.IdentityMatrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "size of identity matrix ({}) does not match number or rows of m ({})", $r3);

        return r2;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.IdentityMatrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1;
        com.opengamma.analytics.math.matrix.IdentityMatrix r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.IdentityMatrix;

        $i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "size of identity matrix ({}) does not match number or columns of m ({})", $r3);

        return r1;
    }

    private com.opengamma.analytics.math.matrix.IdentityMatrix multiply(com.opengamma.analytics.math.matrix.IdentityMatrix, com.opengamma.analytics.math.matrix.IdentityMatrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.IdentityMatrix r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.IdentityMatrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.IdentityMatrix;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "size of identity matrix 1 ({}) does not match size of identity matrix 2 ({})", $r3);

        return r1;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r2, $r18;
        double[][] r3, r4, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        double[] $r6, $r17, $r19, $r20, $r21;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r16;
        double $d0, $d1, $d2, d3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = lengthof r4;

        $r6 = r3[0];

        $i3 = lengthof $r6;

        if $i3 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matrix size mismatch. m1 is ");

        $i4 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by ");

        $i5 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but m2 is ");

        $i6 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by ");

        $i7 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, $r16);

        i1 = lengthof r3;

        $r17 = r4[0];

        i2 = lengthof $r17;

        r5 = newmultiarray (double)[i1][i2];

        i8 = 0;

     label3:
        if i8 >= i1 goto label8;

        i9 = 0;

     label4:
        if i9 >= i2 goto label7;

        d3 = 0.0;

        i10 = 0;

     label5:
        if i10 >= i0 goto label6;

        $r20 = r3[i8];

        $d1 = $r20[i10];

        $r21 = r4[i10];

        $d0 = $r21[i9];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i10 = i10 + 1;

        goto label5;

     label6:
        $r19 = r5[i8];

        $r19[i9] = d3;

        i9 = i9 + 1;

        goto label4;

     label7:
        i8 = i8 + 1;

        goto label3;

     label8:
        $r18 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r18;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.IdentityMatrix, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.IdentityMatrix r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.IdentityMatrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "size of identity matrix ({}) does not match size of vector ({})", $r3);

        return r2;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.IdentityMatrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.IdentityMatrix r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.IdentityMatrix;

        $i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.IdentityMatrix: int getSize()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "size of identity matrix ({}) does not match size of vector ({})", $r3);

        return r1;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, $r7;
        double[][] r3;
        double[] r4, r5, $r6, $r8;
        int i0, i1, $i2, i3, i4;
        double $d0, $d1, $d2, d3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r4;

        $r6 = r3[0];

        $i2 = lengthof $r6;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Matrix/vector size mismatch");

        i1 = lengthof r3;

        r5 = newarray (double)[i1];

        i3 = 0;

     label3:
        if i3 >= i1 goto label6;

        d3 = 0.0;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $r8 = r3[i3];

        $d1 = $r8[i4];

        $d0 = r4[i4];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i4 = i4 + 1;

        goto label4;

     label5:
        r5[i3] = d3;

        i3 = i3 + 1;

        goto label3;

     label6:
        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        return $r7;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, $r8;
        double[] r3, r4, r5, r6, r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getLowerSubDiagonalData()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getDiagonalData()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getUpperSubDiagonalData()>();

        r6 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r6;

        $i1 = lengthof r4;

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Matrix/vector size mismatch");

        r7 = newarray (double)[i0];

        $d1 = r4[0];

        $d0 = r6[0];

        $d5 = $d1 * $d0;

        $d3 = r5[0];

        $d2 = r6[1];

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        r7[0] = $d6;

        $i6 = i0 - 1;

        $i2 = i0 - 1;

        $d8 = r4[$i2];

        $i3 = i0 - 1;

        $d7 = r6[$i3];

        $d12 = $d8 * $d7;

        $i4 = i0 - 2;

        $d10 = r3[$i4];

        $i5 = i0 - 2;

        $d9 = r6[$i5];

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        r7[$i6] = $d13;

        i10 = 1;

     label3:
        $i11 = i0 - 1;

        if i10 >= $i11 goto label4;

        $i7 = i10 - 1;

        $d15 = r3[$i7];

        $i8 = i10 - 1;

        $d14 = r6[$i8];

        $d19 = $d15 * $d14;

        $d17 = r4[i10];

        $d16 = r6[i10];

        $d18 = $d17 * $d16;

        $d23 = $d19 + $d18;

        $d21 = r5[i10];

        $i9 = i10 + 1;

        $d20 = r6[$i9];

        $d22 = $d21 * $d20;

        $d24 = $d23 + $d22;

        r7[i10] = $d24;

        i10 = i10 + 1;

        goto label3;

     label4:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r7);

        return $r8;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2;
        double[] r3, r5, $r6, $r8;
        double[][] r4;
        int i0, i1, $i2, i3, i4;
        double $d0, $d1, $d2, d3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = lengthof r3;

        $i2 = lengthof r4;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Matrix/vector size mismatch");

        $r6 = r4[0];

        i1 = lengthof $r6;

        r5 = newarray (double)[i1];

        i3 = 0;

     label3:
        if i3 >= i1 goto label6;

        d3 = 0.0;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $d1 = r3[i4];

        $r8 = r4[i4];

        $d0 = $r8[i3];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i4 = i4 + 1;

        goto label4;

     label5:
        r5[i3] = d3;

        i3 = i3 + 1;

        goto label3;

     label6:
        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        return $r7;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D multiply(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix)
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r8;
        com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix r2;
        double[] r3, r4, r5, r6, r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        r3 = virtualinvoke r2.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getLowerSubDiagonalData()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getDiagonalData()>();

        r5 = virtualinvoke r2.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: double[] getUpperSubDiagonalData()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r6;

        $i1 = lengthof r4;

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Matrix/vector size mismatch");

        r7 = newarray (double)[i0];

        $d1 = r4[0];

        $d0 = r6[0];

        $d5 = $d1 * $d0;

        $d3 = r3[0];

        $d2 = r6[1];

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        r7[0] = $d6;

        $i6 = i0 - 1;

        $i2 = i0 - 1;

        $d8 = r4[$i2];

        $i3 = i0 - 1;

        $d7 = r6[$i3];

        $d12 = $d8 * $d7;

        $i4 = i0 - 2;

        $d10 = r5[$i4];

        $i5 = i0 - 2;

        $d9 = r6[$i5];

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        r7[$i6] = $d13;

        i10 = 1;

     label3:
        $i11 = i0 - 1;

        if i10 >= $i11 goto label4;

        $d15 = r3[i10];

        $i7 = i10 + 1;

        $d14 = r6[$i7];

        $d19 = $d15 * $d14;

        $d17 = r4[i10];

        $d16 = r6[i10];

        $d18 = $d17 * $d16;

        $d23 = $d19 + $d18;

        $i8 = i10 - 1;

        $d21 = r5[$i8];

        $i9 = i10 - 1;

        $d20 = r6[$i9];

        $d22 = $d21 * $d20;

        $d24 = $d23 + $d22;

        r7[i10] = $d24;

        i10 = i10 + 1;

        goto label3;

     label4:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r7);

        return $r8;
    }
}
