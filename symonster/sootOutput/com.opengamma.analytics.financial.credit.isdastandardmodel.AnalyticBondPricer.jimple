public class com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer extends java.lang.Object
{
    private static final com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOTFINDER;
    private final com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer _pricer;

    public void <init>()
    {
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer r0;
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer $r1;

        r0 := @this: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer;

        specialinvoke $r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer: void <init>()>();

        r0.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer _pricer> = $r1;

        return;
    }

    public double getEquivalentCDSSpread(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic, com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve, double, com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType, com.opengamma.analytics.financial.credit.isdastandardmodel.CDSAnalytic)
    {
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer r0;
        com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic r1;
        com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve r2;
        double d0, d1, $d2, $d3;
        com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType r3;
        com.opengamma.analytics.financial.credit.isdastandardmodel.CDSAnalytic r4;
        com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantCreditCurve $r6;
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer $r7;

        r0 := @this: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer;

        r1 := @parameter0: com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic;

        r2 := @parameter1: com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType;

        r4 := @parameter4: com.opengamma.analytics.financial.credit.isdastandardmodel.CDSAnalytic;

        d1 = virtualinvoke r0.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: double getHazardRate(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic,com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve,double,com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)>(r1, r2, d0, r3);

        $r6 = new com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantCreditCurve;

        $d2 = virtualinvoke r4.<com.opengamma.analytics.financial.credit.isdastandardmodel.CDSAnalytic: double getProtectionEnd()>();

        specialinvoke $r6.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantCreditCurve: void <init>(double,double)>($d2, d1);

        $r7 = r0.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer _pricer>;

        $d3 = virtualinvoke $r7.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticCDSPricer: double parSpread(com.opengamma.analytics.financial.credit.isdastandardmodel.CDSAnalytic,com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve,com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantCreditCurve)>(r4, r2, $r6);

        return $d3;
    }

    public double getHazardRate(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic, com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve, double, com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)
    {
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer r0;
        com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic r1;
        com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve r2;
        double d0, d1, $d4, $d5, $d6, $d7, $d8;
        com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType r3, $r9;
        com.opengamma.analytics.math.function.Function1D r4;
        byte $b0, $b1, $b2, $b3;
        java.lang.Double $r6, $r8, $r12, $r13;
        java.lang.Object $r7;
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$1 $r10;
        com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder $r11;
        java.lang.IllegalArgumentException $r14, $r22;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28;
        java.lang.String $r21, $r29;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer;

        r1 := @parameter0: com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic;

        r2 := @parameter1: com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Bond price must be positive");

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.math.function.Function1D getBondPriceForHazardRateFunction(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic,com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve,com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)>(r1, r2, r3);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r6);

        $r8 = (java.lang.Double) $r7;

        d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $b1 = d0 cmpl d1;

        if $b1 != 0 goto label3;

        return 0.0;

     label3:
        $b2 = d0 cmpl d1;

        if $b2 <= 0 goto label4;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bond price of ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", is greater that zero-risk price of ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". It is not possible to imply a hazard rate for this bond. Please check inputs");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label4:
        $r9 = <com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType: com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType DIRTY>;

        if r3 != $r9 goto label5;

        $d8 = d0;

        goto label6;

     label5:
        $d4 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getAccruedInterest()>();

        $d8 = d0 + $d4;

     label6:
        $d5 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getRecoveryRate()>();

        $b3 = $d8 cmpg $d5;

        if $b3 > 0 goto label7;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The dirty price of ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" give, is less than the bond\'s recovery rate of ");

        $d7 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getRecoveryRate()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please check inputs");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label7:
        $r10 = new com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$1;

        specialinvoke $r10.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$1: void <init>(com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer,com.opengamma.analytics.math.function.Function1D,double)>(r0, r4, d0);

        $r11 = <com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOTFINDER>;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.01);

        $r13 = virtualinvoke $r11.<com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder: java.lang.Double getRoot(com.opengamma.analytics.math.function.Function1D,java.lang.Double)>($r10, $r12);

        $d6 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        return $d6;
    }

    public double bondPriceForHazardRate(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic, com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve, double, com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)
    {
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer r0;
        com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic r1;
        com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve r2;
        double d0, $d1;
        com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType r3;
        com.opengamma.analytics.math.function.Function1D $r4;
        java.lang.Double $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer;

        r1 := @parameter0: com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic;

        r2 := @parameter1: com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.math.function.Function1D getBondPriceForHazardRateFunction(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic,com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve,com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)>(r1, r2, r3);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = virtualinvoke $r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r5);

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        return $d1;
    }

    public com.opengamma.analytics.math.function.Function1D getBondPriceForHazardRateFunction(com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic, com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve, com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType)
    {
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer r0;
        com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic r1;
        com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve r2;
        com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        double[] r4, r5, r6, $r10, $r11, $r13, r14;
        com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$2 $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer;

        r1 := @parameter0: com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic;

        r2 := @parameter1: com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve;

        r3 := @parameter2: com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "bond");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yieldCurve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "cleanOrDirty");

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: int getnPayments()>();

        r4 = newarray (double)[i0];

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $d2 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getPaymentAmount(int)>(i7);

        $d3 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getPaymentTime(int)>(i7);

        $d4 = virtualinvoke r2.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve: double getDiscountFactor(double)>($d3);

        $d5 = $d2 * $d4;

        r4[i7] = $d5;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i2 = i0 - 1;

        d6 = virtualinvoke r1.<com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic: double getPaymentTime(int)>($i2);

        $r10 = virtualinvoke r2.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve: double[] getKnotTimes()>();

        i8 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r10, d6);

        if i8 < 0 goto label3;

        $i5 = i8 + 1;

        r14 = newarray (double)[$i5];

        $r13 = virtualinvoke r2.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve: double[] getKnotTimes()>();

        $i6 = i8 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r14, 0, $i6);

        goto label4;

     label3:
        $i3 = i8 + 1;

        i9 = neg $i3;

        $i4 = i9 + 1;

        r14 = newarray (double)[$i4];

        $r11 = virtualinvoke r2.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve: double[] getKnotTimes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r14, 0, i9);

        r14[i9] = d6;

     label4:
        r5 = r14;

        i1 = lengthof r14;

        r6 = newarray (double)[i1];

        i10 = 0;

     label5:
        if i10 >= i1 goto label6;

        $d0 = r5[i10];

        $d1 = virtualinvoke r2.<com.opengamma.analytics.financial.credit.isdastandardmodel.ISDACompliantYieldCurve: double getRT(double)>($d0);

        r6[i10] = $d1;

        i10 = i10 + 1;

        goto label5;

     label6:
        $r12 = new com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$2;

        specialinvoke $r12.<com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer$2: void <init>(com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer,com.opengamma.analytics.financial.credit.isdastandardmodel.PriceType,com.opengamma.analytics.financial.credit.isdastandardmodel.BondAnalytic,int,double[],int,double[],double[])>(r0, r3, r1, i0, r4, i1, r5, r6);

        return $r12;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder $r0;

        $r0 = new com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder;

        specialinvoke $r0.<com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder: void <init>()>();

        <com.opengamma.analytics.financial.credit.isdastandardmodel.AnalyticBondPricer: com.opengamma.analytics.math.rootfinding.NewtonRaphsonSingleRootFinder ROOTFINDER> = $r0;

        return;
    }
}
