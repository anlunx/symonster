public class com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final double _scaleFactor;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction: double _scaleFactor> = 1.0;

        return;
    }

    public void <init>(double)
    {
        com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction r0;
        double d0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction;

        d0 := @parameter0: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scale factor must be greater than zero");

        throw $r1;

     label1:
        r0.<com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction: double _scaleFactor> = d0;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction r0;
        java.lang.Double r1, $r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r3;

     label1:
        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d3 = $d1 * $d2;

        $d4 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d5 = r0.<com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction: double _scaleFactor>;

        $d6 = $d4 / $d5;

        $d7 = staticinvoke <java.lang.Math: double log(double)>($d6);

        $d8 = $d3 * $d7;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        return $r2;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ThinPlateSplineRadialBasisFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
