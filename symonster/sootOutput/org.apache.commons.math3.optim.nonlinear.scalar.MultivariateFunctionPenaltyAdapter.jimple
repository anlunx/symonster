public class org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
{
    private final org.apache.commons.math3.analysis.MultivariateFunction bounded;
    private final double[] lower;
    private final double[] upper;
    private final double offset;
    private final double[] scale;

    public void <init>(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double, double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        double[] r2, r3, r4, $r6, $r8, $r10;
        double d0, $d1, $d2, $d3, $d4;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i10;
        java.lang.Object $r5, $r7, $r9;
        byte $b5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r11;
        java.lang.Double $r12, $r13;
        org.apache.commons.math3.exception.DimensionMismatchException $r14, $r15;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

        r4 := @parameter4: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r3);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r4);

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        $r15 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = lengthof r2;

        $i8 = lengthof r3;

        specialinvoke $r15.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, $i8);

        throw $r15;

     label1:
        $i3 = lengthof r2;

        $i2 = lengthof r4;

        if $i3 == $i2 goto label2;

        $r14 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i7 = lengthof r2;

        $i6 = lengthof r4;

        specialinvoke $r14.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i7, $i6);

        throw $r14;

     label2:
        i10 = 0;

     label3:
        $i4 = lengthof r2;

        if i10 >= $i4 goto label5;

        $d2 = r3[i10];

        $d1 = r2[i10];

        $b5 = $d2 cmpl $d1;

        if $b5 >= 0 goto label4;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $d3 = r3[i10];

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $d4 = r2[i10];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r12, $r13, 1);

        throw $r11;

     label4:
        i10 = i10 + 1;

        goto label3;

     label5:
        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded> = r1;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r5;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower> = $r6;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (double[]) $r7;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper> = $r8;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double offset> = d0;

        $r9 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (double[]) $r9;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale> = $r10;

        return;
    }

    public double value(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter r0;
        double[] r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, i5, i6, $i7;
        org.apache.commons.math3.analysis.MultivariateFunction $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20, $d21;
        byte $b1, $b2, $b3, $b4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;

        r1 := @parameter0: double[];

        i5 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $i0 = lengthof $r2;

        if i5 >= $i0 goto label9;

        $d2 = r1[i5];

        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d1 = $r4[i5];

        $b1 = $d2 cmpg $d1;

        if $b1 < 0 goto label2;

        $d18 = r1[i5];

        $r11 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d17 = $r11[i5];

        $b4 = $d18 cmpl $d17;

        if $b4 <= 0 goto label8;

     label2:
        d19 = 0.0;

        i6 = i5;

     label3:
        $r12 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $i7 = lengthof $r12;

        if i6 >= $i7 goto label7;

        $d6 = r1[i6];

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d5 = $r5[i6];

        $b2 = $d6 cmpg $d5;

        if $b2 >= 0 goto label4;

        $r9 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $d16 = $r9[i6];

        $r10 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] lower>;

        $d14 = $r10[i6];

        $d13 = r1[i6];

        $d15 = $d14 - $d13;

        d20 = $d16 * $d15;

        goto label6;

     label4:
        $d8 = r1[i6];

        $r6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d7 = $r6[i6];

        $b3 = $d8 cmpl $d7;

        if $b3 <= 0 goto label5;

        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] scale>;

        $d12 = $r7[i6];

        $d10 = r1[i6];

        $r8 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double[] upper>;

        $d9 = $r8[i6];

        $d11 = $d10 - $d9;

        d20 = $d12 * $d11;

        goto label6;

     label5:
        d20 = 0.0;

     label6:
        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d20);

        d19 = d19 + $d21;

        i6 = i6 + 1;

        goto label3;

     label7:
        $d3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: double offset>;

        $d4 = $d3 + d19;

        return $d4;

     label8:
        i5 = i5 + 1;

        goto label1;

     label9:
        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded>;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r1);

        return $d0;
    }
}
