public class org.apache.commons.math.ode.ContinuousOutputModel extends java.lang.Object implements org.apache.commons.math.ode.sampling.StepHandler, java.io.Serializable
{
    private static final long serialVersionUID;
    private double initialTime;
    private double finalTime;
    private boolean forward;
    private int index;
    private java.util.List steps;

    public void <init>()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps> = $r1;

        virtualinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: void reset()>();

        return;
    }

    public void append(org.apache.commons.math.ode.ContinuousOutputModel) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0, r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        java.util.List $r2, $r3, $r6, $r8, $r9, $r10, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        double[] $r4, $r5, $r25, $r27;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.lang.Object $r7, $r11, $r13;
        byte $b5;
        org.apache.commons.math.ode.sampling.StepInterpolator $r12, $r15, r30, r32;
        java.lang.Object[] $r16, $r20, $r23;
        org.apache.commons.math.exception.util.LocalizedFormats $r17, $r21, $r24;
        java.lang.Double $r18;
        java.lang.IllegalArgumentException $r19, $r22, $r29;
        java.lang.Integer $r26, $r28;
        java.util.Iterator r31;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        r1 := @parameter0: org.apache.commons.math.ode.ContinuousOutputModel;

        $r2 = r1.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

        $d9 = r1.<org.apache.commons.math.ode.ContinuousOutputModel: double initialTime>;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double initialTime> = $d9;

        $z4 = r1.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward>;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward> = $z4;

        goto label5;

     label2:
        $r4 = virtualinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i2 = lengthof $r4;

        $r5 = virtualinvoke r1.<org.apache.commons.math.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i3 = lengthof $r5;

        if $i2 == $i3 goto label3;

        $r24 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r23 = newarray (java.lang.Object)[2];

        $r25 = virtualinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i9 = lengthof $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r23[0] = $r26;

        $r27 = virtualinvoke r1.<org.apache.commons.math.ode.ContinuousOutputModel: double[] getInterpolatedState()>();

        $i10 = lengthof $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r23[1] = $r28;

        $r29 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r24, $r23);

        throw $r29;

     label3:
        $z1 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward>;

        $z0 = r1.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward>;

        $z2 = $z1 ^ $z0;

        if $z2 == 0 goto label4;

        $r21 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats PROPAGATION_DIRECTION_MISMATCH>;

        $r20 = newarray (java.lang.Object)[0];

        $r22 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r21, $r20);

        throw $r22;

     label4:
        $r6 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i4 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i4);

        r30 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r7;

        d10 = interfaceinvoke r30.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        d0 = interfaceinvoke r30.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        d1 = d10 - d0;

        $d3 = virtualinvoke r1.<org.apache.commons.math.ode.ContinuousOutputModel: double getInitialTime()>();

        d2 = $d3 - d10;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d2);

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d6 = 0.001 * $d5;

        $b5 = $d4 cmpl $d6;

        if $b5 <= 0 goto label5;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats HOLE_BETWEEN_MODELS_TIME_RANGES>;

        $r16 = newarray (java.lang.Object)[1];

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d2);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r16[0] = $r18;

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r19;

     label5:
        $r8 = r1.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        r31 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z5 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r13 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r13;

        $r14 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $r15 = interfaceinvoke r32.<org.apache.commons.math.ode.sampling.StepInterpolator: org.apache.commons.math.ode.sampling.StepInterpolator copy()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label6;

     label7:
        $r9 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i6 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = $i7;

        $r10 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i8 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i8);

        $r12 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r11;

        $d7 = interfaceinvoke $r12.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double finalTime> = $d7;

        return;
    }

    public boolean requiresDenseOutput()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        return 1;
    }

    public void reset()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double initialTime> = #NaN;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double finalTime> = #NaN;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward> = 1;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = 0;

        $r1 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1, $r4;
        boolean z0, $z2;
        java.util.List $r2, $r3, $r5;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $d1 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double initialTime> = $d1;

        $z2 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: boolean isForward()>();

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward> = $z2;

     label1:
        $r3 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $r4 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: org.apache.commons.math.ode.sampling.StepInterpolator copy()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        if z0 == 0 goto label2;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: double finalTime> = $d0;

        $r5 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = $i2;

     label2:
        return;
    }

    public double getInitialTime()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        $d0 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: double initialTime>;

        return $d0;
    }

    public double getFinalTime()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        $d0 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: double finalTime>;

        return $d0;
    }

    public double getInterpolatedTime()
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math.ode.sampling.StepInterpolator $r3;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        $r1 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r2;

        $d0 = interfaceinvoke $r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double getInterpolatedTime()>();

        return $d0;
    }

    public void setInterpolatedTime(double)
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, d44, d45, d46;
        org.apache.commons.math.ode.sampling.StepInterpolator r1, r2, r3, r4, $r12, $r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, i28, i29, i30;
        java.util.List $r5, $r7, $r8, $r10, $r13, $r16, $r18;
        java.lang.Object $r6, $r9, $r11, $r14, $r17, $r19;
        byte $b15, $b26;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        d0 := @parameter0: double;

        i28 = 0;

        $r5 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        r1 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r6;

        $d8 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d9 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d10 = $d8 + $d9;

        d44 = 0.5 * $d10;

        $r7 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        i29 = $i3 - 1;

        $r8 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i29);

        r2 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r9;

        $d11 = interfaceinvoke r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d12 = interfaceinvoke r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d13 = $d11 + $d12;

        d45 = 0.5 * $d13;

        $i4 = specialinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math.ode.sampling.StepInterpolator)>(d0, r1);

        if $i4 > 0 goto label01;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = 0;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        return;

     label01:
        $i5 = specialinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math.ode.sampling.StepInterpolator)>(d0, r2);

        if $i5 < 0 goto label02;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = i29;

        interfaceinvoke r2.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        return;

     label02:
        $i6 = i29 - i28;

        if $i6 <= 5 goto label11;

        $r16 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i13 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>($i13);

        r3 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r17;

        i0 = specialinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math.ode.sampling.StepInterpolator)>(d0, r3);

        if i0 >= 0 goto label03;

        i29 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $d41 = interfaceinvoke r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d42 = interfaceinvoke r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d43 = $d41 + $d42;

        d45 = 0.5 * $d43;

        goto label05;

     label03:
        if i0 <= 0 goto label04;

        i28 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $d14 = interfaceinvoke r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d15 = interfaceinvoke r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d16 = $d14 + $d15;

        d44 = 0.5 * $d16;

        goto label05;

     label04:
        interfaceinvoke r3.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        return;

     label05:
        $i14 = i28 + i29;

        i1 = $i14 / 2;

        $r18 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r19;

        $d17 = interfaceinvoke r4.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d18 = interfaceinvoke r4.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d19 = $d17 + $d18;

        d1 = 0.5 * $d19;

        $d20 = d1 - d44;

        $d21 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d20);

        $b15 = $d21 cmpg 1.0E-6;

        if $b15 < 0 goto label06;

        $d22 = d45 - d1;

        $d23 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d22);

        $b26 = $d23 cmpg 1.0E-6;

        if $b26 >= 0 goto label07;

     label06:
        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = i1;

        goto label08;

     label07:
        d46 = d45 - d1;

        d2 = d1 - d44;

        d3 = d45 - d44;

        d4 = d0 - d45;

        d5 = d0 - d1;

        d6 = d0 - d44;

        $d24 = d5 * d6;

        $d26 = $d24 * d2;

        $d25 = (double) i29;

        $d31 = $d26 * $d25;

        $d27 = d4 * d6;

        $d29 = $d27 * d3;

        $d28 = (double) i1;

        $d30 = $d29 * $d28;

        $d36 = $d31 - $d30;

        $d32 = d4 * d5;

        $d34 = $d32 * d46;

        $d33 = (double) i28;

        $d35 = $d34 * $d33;

        $d39 = $d36 + $d35;

        $d37 = d46 * d2;

        $d38 = $d37 * d3;

        d7 = $d39 / $d38;

        $d40 = staticinvoke <org.apache.commons.math.util.FastMath: double rint(double)>(d7);

        $i27 = (int) $d40;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = $i27;

     label08:
        $i19 = i28 + 1;

        $i16 = 9 * i28;

        $i17 = $i16 + i29;

        $i18 = $i17 / 10;

        i30 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>($i19, $i18);

        $i23 = i29 - 1;

        $i20 = 9 * i29;

        $i21 = i28 + $i20;

        $i22 = $i21 / 10;

        i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i23, $i22);

        $i24 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        if $i24 >= i30 goto label09;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = i30;

        goto label10;

     label09:
        $i25 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        if $i25 <= i2 goto label10;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = i2;

     label10:
        goto label02;

     label11:
        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = i28;

     label12:
        $i7 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        if $i7 > i29 goto label13;

        $r13 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i9 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i9);

        $r15 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r14;

        $i10 = specialinvoke r0.<org.apache.commons.math.ode.ContinuousOutputModel: int locatePoint(double,org.apache.commons.math.ode.sampling.StepInterpolator)>(d0, $r15);

        if $i10 <= 0 goto label13;

        $i11 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $i12 = $i11 + 1;

        r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index> = $i12;

        goto label12;

     label13:
        $r10 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i8 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i8);

        $r12 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r11;

        interfaceinvoke $r12.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        return;
    }

    public double[] getInterpolatedState() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        int $i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math.ode.sampling.StepInterpolator $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        $r1 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: java.util.List steps>;

        $i0 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: int index>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        return $r4;
    }

    private int locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math.ode.ContinuousOutputModel r0;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        boolean $z0;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: org.apache.commons.math.ode.ContinuousOutputModel;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.ode.sampling.StepInterpolator;

        $z0 = r0.<org.apache.commons.math.ode.ContinuousOutputModel: boolean forward>;

        if $z0 == 0 goto label3;

        $d3 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $b2 = d0 cmpg $d3;

        if $b2 >= 0 goto label1;

        return -1;

     label1:
        $d4 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b3 = d0 cmpl $d4;

        if $b3 <= 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $d1 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $b0 = d0 cmpl $d1;

        if $b0 <= 0 goto label4;

        return -1;

     label4:
        $d2 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b1 = d0 cmpg $d2;

        if $b1 >= 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.ode.ContinuousOutputModel: long serialVersionUID> = -1417964919405031606L;

        return;
    }
}
