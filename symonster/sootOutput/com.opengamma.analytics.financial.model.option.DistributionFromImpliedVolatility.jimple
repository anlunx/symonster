public class com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility extends java.lang.Object implements com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution
{
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL;
    private static final double EPS;
    private final double _f;
    private final double _rootT;
    private final com.opengamma.analytics.math.function.Function1D _volFunc;

    public void <init>(double, double, com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double d0, d1, $d2;
        com.opengamma.analytics.math.function.Function1D r1;
        byte $b0, $b1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "maturity <= 0");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "forward <= 0");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "implied vol function");

        r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _f> = d0;

        r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.function.Function1D _volFunc> = r1;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT> = $d2;

        return;
    }

    public double getPDF(java.lang.Double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Double r1, $r4;
        double[] r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Double;

        $d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double[] getSigmas(double)>($d5);

        $d6 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d8 = r2[1];

        $d7 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d9 = $d8 * $d7;

        d0 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getD1(double,double)>($d6, $d9);

        $d10 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getSigmaPrime(double[],double)>(r2, $d10);

        $d11 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d2 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getSigmaDoublePrime(double[],double)>(r2, $d11);

        $d12 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d13 = r2[1];

        d3 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getD1Prime(double,double,double)>($d12, $d13, d1);

        $d14 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d15 = $d14 * d1;

        d4 = d3 - $d15;

        $d16 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _f>;

        $d17 = neg $d16;

        $r3 = <com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d18 = interfaceinvoke $r3.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r4);

        $d23 = $d17 * $d18;

        $d22 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d19 = d0 * d3;

        $d20 = $d19 * d1;

        $d21 = $d20 - d2;

        $d24 = $d22 * $d21;

        $d25 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d26 = d4 / $d25;

        $d27 = $d24 + $d26;

        $d28 = $d23 * $d27;

        return $d28;
    }

    public double getCDF(java.lang.Double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Double r1, $r4, $r6;
        double[] r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r3, $r5;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Double;

        $d3 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double[] getSigmas(double)>($d3);

        $d4 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d6 = r2[1];

        $d5 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d7 = $d6 * $d5;

        d0 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getD1(double,double)>($d4, $d7);

        $d9 = r2[1];

        $d8 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d10 = $d9 * $d8;

        d1 = d0 - $d10;

        $d11 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d2 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getSigmaPrime(double[],double)>(r2, $d11);

        $r3 = <com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d12 = neg d1;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $d13 = interfaceinvoke $r3.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r4);

        $d14 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _f>;

        $r5 = <com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d15 = interfaceinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r6);

        $d16 = $d14 * $d15;

        $d18 = $d16 * d2;

        $d17 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d19 = $d18 * $d17;

        $d20 = $d13 + $d19;

        return $d20;
    }

    public double getInverseCDF(java.lang.Double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Double r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double nextRandom()
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        org.apache.commons.lang.NotImplementedException $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        $r1 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r1.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r1;
    }

    private double[] getSigmas(double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double d0, d1, d2, $d3, $d4, $d5;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2, $r6, $r10;
        java.lang.Double $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.Object $r4, $r8, $r12;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        d0 := @parameter0: double;

        r1 = newarray (double)[3];

        $r2 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.function.Function1D _volFunc>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = virtualinvoke $r2.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r3);

        $r5 = (java.lang.Double) $r4;

        $d3 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        r1[1] = $d3;

        d1 = d0 * 1.01;

        d2 = d0 * 0.99;

        $r6 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.function.Function1D _volFunc>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r7);

        $r9 = (java.lang.Double) $r8;

        $d4 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        r1[2] = $d4;

        $r10 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.function.Function1D _volFunc>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d5 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        r1[0] = $d5;

        return r1;
    }

    private double getSigmaPrime(double[], double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        $d2 = r1[2];

        $d1 = r1[0];

        $d3 = $d2 - $d1;

        $d4 = $d3 / 2.0;

        $d5 = $d4 / d0;

        $d6 = $d5 / 0.01;

        return $d6;
    }

    private double getSigmaDoublePrime(double[], double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        $d2 = r1[2];

        $d1 = r1[0];

        $d5 = $d2 + $d1;

        $d3 = r1[1];

        $d4 = 2.0 * $d3;

        $d6 = $d5 - $d4;

        $d7 = $d6 / d0;

        $d8 = $d7 / d0;

        $d9 = $d8 / 0.01;

        $d10 = $d9 / 0.01;

        return $d10;
    }

    private double getD1(double, double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d3 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _f>;

        $d4 = $d3 / d0;

        $d5 = staticinvoke <java.lang.Math: double log(double)>($d4);

        $d6 = d1 * d1;

        $d7 = $d6 / 2.0;

        d2 = $d5 + $d7;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d2, 0.0, 1.0E-16);

        if $z0 == 0 goto label1;

        return 0.0;

     label1:
        $d8 = d2 / d1;

        return $d8;
    }

    private double getD1Prime(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d4 = -1.0 / d0;

        $d6 = $d4 / d1;

        $d5 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d9 = $d6 / $d5;

        $d7 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _f>;

        $d8 = $d7 / d0;

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $d11 = $d10 / d1;

        $d13 = $d11 / d1;

        $d12 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d16 = $d13 / $d12;

        $d14 = r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double _rootT>;

        $d15 = 0.5 * $d14;

        $d17 = $d16 - $d15;

        $d18 = $d17 * d2;

        d3 = $d9 - $d18;

        return d3;
    }

    public volatile double getInverseCDF(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getInverseCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getCDF(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getPDF(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double getPDF(java.lang.Double)>($r2);

        return $d0;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r0;

        <com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: double EPS> = 0.01;

        $r0 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        <com.opengamma.analytics.financial.model.option.DistributionFromImpliedVolatility: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL> = $r0;

        return;
    }
}
