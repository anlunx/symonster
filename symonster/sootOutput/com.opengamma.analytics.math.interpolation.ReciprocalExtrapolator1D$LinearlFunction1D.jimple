class com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D extends com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D
{

    private void <init>()
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        specialinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction1D: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double d0, $d1, $d2;
        double[] r2, r4, r5;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r8, $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r2;

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r4 = newarray (double)[i1];

        i5 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i2 = i0 - 1;

        if i5 != $i2 goto label1;

        i5 = i5 + -1;

     label1:
        i6 = 0;

     label2:
        if i6 >= i1 goto label3;

        $i3 = i1 * i5;

        $i4 = $i3 + i6;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>($i4);

        r5 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d1 = r2[i5];

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D: double getValue(double[],double,double)>(r5, d0, $d1);

        r4[i6] = $d2;

        i6 = i6 + 1;

        goto label2;

     label3:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        return $r8;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double d0, $d1;
        double[] r2, r3, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r8, $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r2 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        i0 = $i3 + 1;

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r3 = newarray (double)[i2];

        i8 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int getLowerBoundIndex(double[],double)>(r2, d0);

        $i4 = i0 - 1;

        if i8 != $i4 goto label1;

        i8 = i8 + -1;

     label1:
        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        i9 = 0;

     label2:
        if i9 >= i2 goto label3;

        $i5 = i2 * i8;

        $i6 = $i5 + i9;

        $r9 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>($i6);

        r5 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i7 = i1 - 2;

        $d1 = r5[$i7];

        r3[i9] = $d1;

        i9 = i9 + 1;

        goto label2;

     label3:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        return $r8;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateTwice(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double)
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1;
        double d0;
        int i0;
        double[] r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getDimensions()>();

        r2 = newarray (double)[i0];

        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        return $r4;
    }

    protected double getValue(double[], double, double)
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;
        double[] r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        int i0, $i1, $i2;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 = lengthof r1;

        $i1 = i0 - 2;

        $d4 = r1[$i1];

        $d3 = d0 - d1;

        $d6 = $d4 * $d3;

        $i2 = i0 - 1;

        $d5 = r1[$i2];

        d2 = $d6 + $d5;

        return d2;
    }

    void <init>(com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$1)
    {
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D r0;
        com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$1 r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$1;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.ReciprocalExtrapolator1D$LinearlFunction1D: void <init>()>();

        return;
    }
}
