public abstract class com.opengamma.analytics.math.surface.Surface extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicLong ATOMIC;
    private final java.lang.String _name;

    public void <init>()
    {
        com.opengamma.analytics.math.surface.Surface r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        java.lang.String $r2;

        r0 := @this: com.opengamma.analytics.math.surface.Surface;

        $r1 = <com.opengamma.analytics.math.surface.Surface: java.util.concurrent.atomic.AtomicLong ATOMIC>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke r0.<com.opengamma.analytics.math.surface.Surface: void <init>(java.lang.String)>($r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        com.opengamma.analytics.math.surface.Surface r0;
        java.lang.String r1;

        r0 := @this: com.opengamma.analytics.math.surface.Surface;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name> = r1;

        return;
    }

    public java.lang.String getName()
    {
        com.opengamma.analytics.math.surface.Surface r0;
        java.lang.String $r1;

        r0 := @this: com.opengamma.analytics.math.surface.Surface;

        $r1 = r0.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name>;

        return $r1;
    }

    public abstract java.lang.Object[] getXData();

    public abstract java.lang.Object[] getYData();

    public abstract java.lang.Object[] getZData();

    public abstract int size();

    public abstract java.lang.Object getZValue(java.lang.Object, java.lang.Object);

    public abstract java.lang.Object getZValue(com.opengamma.util.tuple.Pair);

    public int hashCode()
    {
        com.opengamma.analytics.math.surface.Surface r0;
        java.lang.String $r1, $r2;
        int $i1, $i3, i4;

        r0 := @this: com.opengamma.analytics.math.surface.Surface;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name>;

        $i3 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.surface.Surface r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.surface.Surface;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.surface.Surface) r1;

        $r6 = r0.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name>;

        $r5 = r2.<com.opengamma.analytics.math.surface.Surface: java.lang.String _name>;

        $z0 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        return $z0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <com.opengamma.analytics.math.surface.Surface: java.util.concurrent.atomic.AtomicLong ATOMIC> = $r0;

        return;
    }
}
