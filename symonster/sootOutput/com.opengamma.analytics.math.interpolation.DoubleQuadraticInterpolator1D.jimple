public class com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;
    private static final com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHT_FUNCTION;
    private final com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        $r1 = <com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHT_FUNCTION>;

        r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction> = $r1;

        return;
    }

    public void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null weight function");

        r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction> = r1;

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        double[] r4, r5;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, d26;
        boolean $z0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r8;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r19, r20, r21, r22;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data bundle is of wrong type");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle) r1;

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i1 = i0 + 1;

        $i3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i2 = $i3 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        if i0 != i2 goto label1;

        $d24 = r5[i2];

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        return $r18;

     label1:
        if i0 != 0 goto label2;

        r19 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>(0);

        $d22 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d23 = r4[1];

        d25 = $d22 - $d23;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d25);

        $r17 = virtualinvoke r19.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r16);

        return $r17;

     label2:
        if i1 != i2 goto label3;

        $i6 = i2 - 2;

        r20 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>($i6);

        $d20 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $i7 = i2 - 1;

        $d21 = r4[$i7];

        d26 = $d20 - $d21;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d26);

        $r15 = virtualinvoke r20.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r14);

        return $r15;

     label3:
        $i4 = i0 - 1;

        r21 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>($i4);

        $i5 = i1 - 1;

        r22 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>($i5);

        $r8 = r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction>;

        $d2 = r4[i1];

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d7 = $d2 - $d3;

        $d5 = r4[i1];

        $d4 = r4[i0];

        $d6 = $d5 - $d4;

        $d8 = $d7 / $d6;

        d0 = virtualinvoke $r8.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double)>($d8);

        $d9 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d10 = r4[i0];

        $d11 = $d9 - $d10;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r10 = virtualinvoke r21.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r9);

        $d12 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d13 = d0 * $d12;

        $d14 = 1.0 - d0;

        $d15 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d16 = r4[i1];

        $d17 = $d15 - $d16;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d17);

        $r12 = virtualinvoke r22.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r11);

        $d18 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d19 = $d14 * $d18;

        d1 = $d13 + $d19;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        return $r13;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        double[] r4;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r5, r6, r22, r23, r24, r25;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41;
        boolean $z0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data bundle is of wrong type");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle) r1;

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i1 = i0 + 1;

        $i3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i2 = $i3 - 1;

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        if i2 != 0 goto label1;

        return 0.0;

     label1:
        if i0 == 0 goto label2;

        if i2 != 1 goto label3;

     label2:
        r22 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadraticFirstDerivative(int)>(0);

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d3 = r4[1];

        d40 = $d2 - $d3;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d40);

        $r10 = virtualinvoke r22.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r9);

        $d4 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        return $d4;

     label3:
        if i1 < i2 goto label4;

        $i8 = i2 - 2;

        r23 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadraticFirstDerivative(int)>($i8);

        $d37 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $i9 = i2 - 1;

        $d38 = r4[$i9];

        d41 = $d37 - $d38;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d41);

        $r21 = virtualinvoke r23.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r20);

        $d39 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        return $d39;

     label4:
        $i4 = i0 - 1;

        r24 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>($i4);

        $i5 = i1 - 1;

        r25 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadratic(int)>($i5);

        $i6 = i0 - 1;

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadraticFirstDerivative(int)>($i6);

        $i7 = i1 - 1;

        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: com.opengamma.analytics.math.function.RealPolynomialFunction1D getQuadraticFirstDerivative(int)>($i7);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction>;

        $d5 = r4[i1];

        $d6 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d10 = $d5 - $d6;

        $d8 = r4[i1];

        $d7 = r4[i0];

        $d9 = $d8 - $d7;

        $d11 = $d10 / $d9;

        d0 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double)>($d11);

        $d12 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d13 = r4[i0];

        $d14 = $d12 - $d13;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        $r13 = virtualinvoke r5.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r12);

        $d15 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d16 = d0 * $d15;

        $d17 = 1.0 - d0;

        $d18 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d19 = r4[i1];

        $d20 = $d18 - $d19;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d20);

        $r15 = virtualinvoke r6.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r14);

        $d21 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d22 = $d17 * $d21;

        $d23 = $d16 + $d22;

        $d24 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d25 = r4[i1];

        $d26 = $d24 - $d25;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d26);

        $r17 = virtualinvoke r25.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r16);

        $d27 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $d28 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d29 = r4[i0];

        $d30 = $d28 - $d29;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d30);

        $r19 = virtualinvoke r24.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r18);

        $d31 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d35 = $d27 - $d31;

        $d33 = r4[i1];

        $d32 = r4[i0];

        $d34 = $d33 - $d32;

        $d36 = $d35 / $d34;

        d1 = $d23 + $d36;

        return d1;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        double[] r4, r5, r6, r9, r10, r11;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        boolean $z0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r8;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "data bundle is of wrong type");

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle) r1;

        i0 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        i1 = i0 + 1;

        i2 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: int size()>();

        r4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        r5 = newarray (double)[i2];

        if i0 != 0 goto label1;

        $d31 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r9 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: double[] getQuadraticSensitivities(double[],double,int)>(r4, $d31, 1);

        $d32 = r9[0];

        r5[0] = $d32;

        $d33 = r9[1];

        r5[1] = $d33;

        $d34 = r9[2];

        r5[2] = $d34;

        return r5;

     label1:
        $i3 = i2 - 1;

        if i1 != $i3 goto label2;

        $d27 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $i7 = i2 - 2;

        r10 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: double[] getQuadraticSensitivities(double[],double,int)>(r4, $d27, $i7);

        $i8 = i2 - 3;

        $d28 = r10[0];

        r5[$i8] = $d28;

        $i9 = i2 - 2;

        $d29 = r10[1];

        r5[$i9] = $d29;

        $i10 = i2 - 1;

        $d30 = r10[2];

        r5[$i10] = $d30;

        return r5;

     label2:
        if i1 != i2 goto label3;

        $i6 = i2 - 1;

        r5[$i6] = 1.0;

        return r5;

     label3:
        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: double[] getQuadraticSensitivities(double[],double,int)>(r4, $d1, i0);

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: double[] getQuadraticSensitivities(double[],double,int)>(r4, $d2, i1);

        $r8 = r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction _weightFunction>;

        $d3 = r4[i1];

        $d4 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d8 = $d3 - $d4;

        $d6 = r4[i1];

        $d5 = r4[i0];

        $d7 = $d6 - $d5;

        $d9 = $d8 / $d7;

        d0 = virtualinvoke $r8.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double)>($d9);

        $i4 = i0 - 1;

        $d10 = r11[0];

        $d11 = d0 * $d10;

        r5[$i4] = $d11;

        $d12 = r11[1];

        $d16 = d0 * $d12;

        $d14 = 1.0 - d0;

        $d13 = r6[0];

        $d15 = $d14 * $d13;

        $d17 = $d16 + $d15;

        r5[i0] = $d17;

        $d18 = r11[2];

        $d22 = d0 * $d18;

        $d20 = 1.0 - d0;

        $d19 = r6[1];

        $d21 = $d20 * $d19;

        $d23 = $d22 + $d21;

        r5[i1] = $d23;

        $i5 = i1 + 1;

        $d25 = 1.0 - d0;

        $d24 = r6[2];

        $d26 = $d25 * $d24;

        r5[$i5] = $d26;

        return r5;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle $r3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle;

        $r4 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)>($r4);

        return $r3;
    }

    private double[] getQuadraticSensitivities(double[], double, int)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        double[] r1, r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        int i0, $i1, $i2;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        r2 = newarray (double)[3];

        $d4 = r1[i0];

        d1 = d0 - $d4;

        $d6 = r1[i0];

        $i1 = i0 - 1;

        $d5 = r1[$i1];

        d2 = $d6 - $d5;

        $i2 = i0 + 1;

        $d8 = r1[$i2];

        $d7 = r1[i0];

        d3 = $d8 - $d7;

        $d9 = d1 - d3;

        $d10 = d1 * $d9;

        $d12 = $d10 / d2;

        $d11 = d2 + d3;

        $d13 = $d12 / $d11;

        r2[0] = $d13;

        $d14 = d3 - d2;

        $d15 = $d14 - d1;

        $d16 = d1 * $d15;

        $d17 = $d16 / d2;

        $d18 = $d17 / d3;

        $d19 = 1.0 + $d18;

        r2[1] = $d19;

        $d20 = d2 + d1;

        $d22 = d1 * $d20;

        $d21 = d2 + d3;

        $d23 = $d22 / $d21;

        $d24 = $d23 / d3;

        r2[2] = $d24;

        return r2;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle getDataBundleFromSortedArrays(double[],double[])>(r1, r2);

        return $r3;
    }

    public volatile com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDoubleQuadraticDataBundle getDataBundle(double[],double[])>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.LinearWeightingFunction $r0;

        <com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: long serialVersionUID> = 1L;

        $r0 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunctionFactory: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.LinearWeightingFunction LINEAR_WEIGHTING_FUNCTION>;

        <com.opengamma.analytics.math.interpolation.DoubleQuadraticInterpolator1D: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction DEFAULT_WEIGHT_FUNCTION> = $r0;

        return;
    }
}
