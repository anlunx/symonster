public class org.apache.commons.math.special.Beta extends java.lang.Object
{
    private static final double DEFAULT_EPSILON;

    private void <init>()
    {
        org.apache.commons.math.special.Beta r0;

        r0 := @this: org.apache.commons.math.special.Beta;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double regularizedBeta(double, double, double) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, 1.0E-14, 2147483647);

        return $d3;
    }

    public static double regularizedBeta(double, double, double, double) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d4 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, d3, 2147483647);

        return $d4;
    }

    public static double regularizedBeta(double, double, double, int) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, $d3;
        int i0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $d3 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double,double,int)>(d0, d1, d2, 1.0E-14, i0);

        return $d3;
    }

    public static double regularizedBeta(double, double, double, double, int) throws org.apache.commons.math.MathException
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23;
        int i0;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b3, $b4, $b5;
        org.apache.commons.math.special.Beta$1 $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        i0 := @parameter4: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z2 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 > 0 goto label1;

        $b3 = d1 cmpg 0.0;

        if $b3 <= 0 goto label1;

        $b4 = d2 cmpg 0.0;

        if $b4 > 0 goto label2;

     label1:
        d23 = #NaN;

        goto label4;

     label2:
        $d6 = d1 + 1.0;

        $d4 = d1 + d2;

        $d5 = $d4 + 2.0;

        $d7 = $d6 / $d5;

        $b5 = d0 cmpl $d7;

        if $b5 <= 0 goto label3;

        $d21 = 1.0 - d0;

        $d22 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double,double,int)>($d21, d2, d1, d3, i0);

        d23 = 1.0 - $d22;

        goto label4;

     label3:
        $r1 = new org.apache.commons.math.special.Beta$1;

        specialinvoke $r1.<org.apache.commons.math.special.Beta$1: void <init>(double,double)>(d2, d1);

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d0);

        $d10 = d1 * $d8;

        $d9 = 1.0 - d0;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d9);

        $d12 = d2 * $d11;

        $d13 = $d10 + $d12;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d15 = $d13 - $d14;

        $d16 = staticinvoke <org.apache.commons.math.special.Beta: double logBeta(double,double,double,int)>(d1, d2, d3, i0);

        $d17 = $d15 - $d16;

        $d18 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d17);

        $d19 = $d18 * 1.0;

        $d20 = virtualinvoke $r1.<org.apache.commons.math.util.ContinuedFraction: double evaluate(double,double,int)>(d0, d3, i0);

        d23 = $d19 / $d20;

     label4:
        return d23;
    }

    public static double logBeta(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math.special.Beta: double logBeta(double,double,double,int)>(d0, d1, 1.0E-14, 2147483647);

        return $d2;
    }

    public static double logBeta(double, double, double, int)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8;
        int i0;
        boolean $z0, $z1;
        byte $b1, $b2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d1 cmpg 0.0;

        if $b2 > 0 goto label2;

     label1:
        d8 = #NaN;

        goto label3;

     label2:
        $d3 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>(d0);

        $d4 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>(d1);

        $d6 = $d3 + $d4;

        $d5 = d0 + d1;

        $d7 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d5);

        d8 = $d6 - $d7;

     label3:
        return d8;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.special.Beta: double DEFAULT_EPSILON> = 1.0E-14;

        return;
    }
}
