public abstract class org.apache.commons.math3.optim.BaseOptimizer extends java.lang.Object
{
    protected final org.apache.commons.math3.util.Incrementor evaluations;
    protected final org.apache.commons.math3.util.Incrementor iterations;
    private final org.apache.commons.math3.optim.ConvergenceChecker checker;

    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker,int,int)>(r1, 0, 2147483647);

        return;
    }

    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker, int, int)
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;
        int i0, i1;
        org.apache.commons.math3.util.Incrementor $r2, $r4;
        org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback $r3;
        org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback $r5;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.optim.ConvergenceChecker checker> = r1;

        $r2 = new org.apache.commons.math3.util.Incrementor;

        $r3 = new org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback;

        specialinvoke $r3.<org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback: void <init>(org.apache.commons.math3.optim.BaseOptimizer$1)>(null);

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>(i0, $r3);

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        $r4 = new org.apache.commons.math3.util.Incrementor;

        $r5 = new org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback;

        specialinvoke $r5.<org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback: void <init>(org.apache.commons.math3.optim.BaseOptimizer$1)>(null);

        specialinvoke $r4.<org.apache.commons.math3.util.Incrementor: void <init>(int,org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback)>(i1, $r5);

        r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations> = $r4;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getIterations()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.optim.ConvergenceChecker checker>;

        return $r1;
    }

    public transient java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.util.Incrementor $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        $r2 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r3 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object doOptimize()>();

        return $r4;
    }

    public java.lang.Object optimize() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r2 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object doOptimize()>();

        return $r3;
    }

    protected abstract java.lang.Object doOptimize();

    protected void incrementEvaluationCount() throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        return;
    }

    protected void incrementIterationCount() throws org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        return;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        int i0, $i1, $i2, i3;
        org.apache.commons.math3.optim.OptimizationData r3;
        boolean $z0, $z1;
        org.apache.commons.math3.optim.MaxIter $r4;
        org.apache.commons.math3.util.Incrementor $r5, $r7;
        org.apache.commons.math3.optim.MaxEval $r6;

        r0 := @this: org.apache.commons.math3.optim.BaseOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r3 = r1[i3];

        $z0 = r3 instanceof org.apache.commons.math3.optim.MaxEval;

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $r6 = (org.apache.commons.math3.optim.MaxEval) r3;

        $i2 = virtualinvoke $r6.<org.apache.commons.math3.optim.MaxEval: int getMaxEval()>();

        virtualinvoke $r7.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i2);

        goto label3;

     label2:
        $z1 = r3 instanceof org.apache.commons.math3.optim.MaxIter;

        if $z1 == 0 goto label3;

        $r5 = r0.<org.apache.commons.math3.optim.BaseOptimizer: org.apache.commons.math3.util.Incrementor iterations>;

        $r4 = (org.apache.commons.math3.optim.MaxIter) r3;

        $i1 = virtualinvoke $r4.<org.apache.commons.math3.optim.MaxIter: int getMaxIter()>();

        virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i1);

        goto label3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }
}
