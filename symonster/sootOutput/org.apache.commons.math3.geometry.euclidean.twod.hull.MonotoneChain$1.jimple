class org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 extends java.lang.Object implements java.util.Comparator
{
    final org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain this$0;

    void <init>(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 r0;
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, r2;
        double d0, $d1, $d2, $d3, $d4;
        int i0, $i1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain this$0>;

        d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: double getTolerance()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        i0 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d1, $d2, d0);

        if i0 != 0 goto label1;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $i1 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d3, $d4, d0);

        return $i1;

     label1:
        return i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 r0;
        java.lang.Object r1, r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r1;

        $r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1: int compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r4, $r3);

        return $i0;
    }
}
