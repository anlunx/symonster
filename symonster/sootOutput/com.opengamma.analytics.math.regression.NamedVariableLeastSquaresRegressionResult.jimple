public class com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult extends com.opengamma.analytics.math.regression.LeastSquaresRegressionResult
{
    private static final org.slf4j.Logger s_logger;
    private final java.util.List _independentVariableNames;
    private final com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result;
    private static final java.lang.String INTERCEPT_STRING;

    public void <init>(java.util.List, com.opengamma.analytics.math.regression.LeastSquaresRegressionResult)
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0;
        java.util.List r1, $r5, $r8;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r2;
        java.util.ArrayList $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;
        double[] $r4, $r7;
        java.lang.IllegalArgumentException $r6, $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        specialinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: void <init>(com.opengamma.analytics.math.regression.LeastSquaresRegressionResult)>(r2);

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("List of independent variable names was null");

        throw $r10;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames> = $r3;

        $z0 = virtualinvoke r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = virtualinvoke r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getBetas()>();

        $i3 = lengthof $r7;

        $i4 = $i3 - 1;

        if $i2 == $i4 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of variable name array did not match number of results in the regression");

        throw $r9;

     label2:
        $r8 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("Intercept");

        goto label4;

     label3:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = virtualinvoke r2.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: double[] getBetas()>();

        $i1 = lengthof $r4;

        if $i0 == $i1 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of variable name array did not match number of results in the regression");

        throw $r6;

     label4:
        $r5 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result> = r2;

        return;
    }

    public java.util.List getIndependentVariableNames()
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        return $r1;
    }

    public com.opengamma.analytics.math.regression.LeastSquaresRegressionResult getResult()
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r1;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        $r1 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        return $r1;
    }

    public java.lang.Double getPredictedValue(java.util.Map)
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0;
        java.util.Map r1;
        double[] r2;
        java.util.Iterator r3;
        java.lang.String r4, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7;
        java.util.List $r5;
        java.lang.Double $r6, $r15, $r19;
        java.lang.Object $r7, $r13, $r14;
        java.lang.IllegalArgumentException $r8, $r16, $r17, $r20;
        java.lang.StringBuilder $r9, $r10, $r11;
        double $d0, $d1, $d2, $d3, d4;
        org.slf4j.Logger $r18;
        byte $b6;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        r1 := @parameter0: java.util.Map;

        if r1 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map was null");

        throw $r20;

     label01:
        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r18 = <com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: org.slf4j.Logger s_logger>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>("Map was empty: returning 0");

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r19;

     label02:
        r2 = virtualinvoke r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: double[] getBetas()>();

        d4 = 0.0;

        $z1 = virtualinvoke r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z1 == 0 goto label03;

        $i3 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i4 = lengthof r2;

        $i5 = $i4 - 1;

        if $i3 >= $i5 goto label04;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of named variables in map was smaller than that in regression");

        throw $r17;

     label03:
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = lengthof r2;

        if $i0 >= $i1 goto label04;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of named variables in map was smaller than that in regression");

        throw $r16;

     label04:
        $z2 = virtualinvoke r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: boolean hasIntercept()>();

        if $z2 == 0 goto label05;

        $b6 = 1;

        goto label06;

     label05:
        $b6 = 0;

     label06:
        i7 = $b6;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List getIndependentVariableNames()>();

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label12;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("Intercept");

        if $z3 == 0 goto label08;

        $d3 = r2[0];

        d4 = d4 + $d3;

        goto label11;

     label08:
        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z4 == 0 goto label09;

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        if $r13 != null goto label10;

     label09:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not have value for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label10:
        $i2 = i7;

        i7 = i7 + 1;

        $d0 = r2[$i2];

        $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r15 = (java.lang.Double) $r14;

        $d1 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 * $d1;

        d4 = d4 + $d2;

     label11:
        goto label07;

     label12:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        return $r6;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0;
        java.util.List $r1, $r2;
        int $i1, $i2, i3, $i4, i5, $i6, i7;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        i3 = specialinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: int hashCode()>();

        $i1 = 31 * i3;

        $r1 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        if $r1 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        $i4 = interfaceinvoke $r2.<java.util.List: int hashCode()>();

     label2:
        i5 = $i1 + $i4;

        $i2 = 31 * i5;

        $r3 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        if $r3 != null goto label3;

        $i6 = 0;

        goto label4;

     label3:
        $r4 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        $i6 = virtualinvoke $r4.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: int hashCode()>();

     label4:
        i7 = $i2 + $i6;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;
        java.util.List $r5, $r6, $r7, $r12;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r8, $r9, $r10, $r11;

        r0 := @this: com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult) r1;

        $r5 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        if $r5 != null goto label4;

        $r12 = r2.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        if $r12 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        $r6 = r2.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.util.List _independentVariableNames>;

        $z1 = interfaceinvoke $r7.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r8 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        if $r8 != null goto label6;

        $r11 = r2.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        if $r11 == null goto label7;

        return 0;

     label6:
        $r10 = r0.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        $r9 = r2.<com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult _result>;

        $z2 = virtualinvoke $r10.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: java.lang.String INTERCEPT_STRING> = "Intercept";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/math/regression/NamedVariableLeastSquaresRegressionResult");

        <com.opengamma.analytics.math.regression.NamedVariableLeastSquaresRegressionResult: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
