class com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1 extends com.opengamma.analytics.math.function.Function1D
{
    final com.opengamma.analytics.math.function.Function1D val$func;
    final int val$n;
    final double[] val$impliedVols;
    final com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder, com.opengamma.analytics.math.function.Function1D, int, double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder r1;
        com.opengamma.analytics.math.function.Function1D r2;
        int i0;
        double[] r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder;

        r2 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        i0 := @parameter2: int;

        r3 := @parameter3: double[];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: com.opengamma.analytics.math.function.Function1D val$func> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: int val$n> = i0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: double[] val$impliedVols> = r3;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1 r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r16;
        double d0, d1, d2, $d3, $d4, $d5;
        double[] r4, r5, $r12, $r17;
        int[] $r6, $r8, $r10;
        java.lang.Double $r7, $r9, $r11;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r13;
        com.opengamma.analytics.math.function.Function1D $r14;
        java.lang.Object $r15;
        int $i0, $i1, i2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r6);

        d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r8);

        d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $r10 = newarray (int)[1];

        $r10[0] = 2;

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = newarray (double)[4];

        $r12[0] = d0;

        $r12[1] = 0.0;

        $r12[2] = d1;

        $r12[3] = d2;

        $r13 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        specialinvoke $r13.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double[])>($r12);

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: com.opengamma.analytics.math.function.Function1D val$func>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r13);

        r4 = (double[]) $r15;

        $i0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: int val$n>;

        r5 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: int val$n>;

        if i2 >= $i1 goto label2;

        $d4 = r4[i2];

        $r17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: double[] val$impliedVols>;

        $d3 = $r17[i2];

        $d5 = $d4 - $d3;

        r5[i2] = $d5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r16 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        return $r16;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1 r0;
        java.lang.Object r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseSABRFitterRootFinder$1: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r2);

        return $r3;
    }
}
