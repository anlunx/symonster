public class org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer
{
    private org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex;

    public void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        double d0, d1;
        org.apache.commons.math3.optim.SimpleValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.optim.SimpleValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optim.SimpleValueChecker: void <init>(double,double)>(d0, d1);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>($r1);

        return;
    }

    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected org.apache.commons.math3.optim.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r3;
        org.apache.commons.math3.optim.PointValuePair r4, $r16, $r18;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1 $r5;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r6, $r7;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2 $r8;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex $r9, $r11, $r12, $r13, $r14, $r15, $r17;
        double[] $r10;
        int $i1, $i2, i3;
        boolean $z1, $z2, z3, $z4;
        org.apache.commons.math3.optim.PointValuePair[] r19;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void checkParameters()>();

        $r5 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1;

        specialinvoke $r5.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer)>(r0);

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        $r7 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if $r6 != $r7 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r8 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2;

        specialinvoke $r8.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer,boolean)>(r0, $z2);

        $r9 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getStartPoint()>();

        virtualinvoke $r9.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void build(double[])>($r10);

        $r11 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        virtualinvoke $r11.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r5, $r8);

        r19 = null;

        r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

     label3:
        $i2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: int getIterations()>();

        if $i2 <= 0 goto label8;

        z3 = 1;

        i3 = 0;

     label4:
        $r14 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $i1 = virtualinvoke $r14.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: int getSize()>();

        if i3 >= $i1 goto label7;

        r4 = r19[i3];

        if z3 == 0 goto label5;

        $r17 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(i3);

        $z1 = interfaceinvoke r3.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(0, r4, $r18);

        if $z1 == 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        z3 = $z4;

        i3 = i3 + 1;

        goto label4;

     label7:
        if z3 == 0 goto label8;

        $r15 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        return $r16;

     label8:
        $r12 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        r19 = virtualinvoke $r12.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: org.apache.commons.math3.optim.PointValuePair[] getPoints()>();

        $r13 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        virtualinvoke $r13.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void iterate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>($r5, $r8);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: void incrementIterationCount()>();

        goto label3;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r3;
        boolean $z0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;

        if $z0 == 0 goto label2;

        $r4 = (org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex) r3;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex> = $r4;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex $r1;
        double[] $r2, $r6;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        org.apache.commons.math3.exception.NullArgumentException $r7;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex simplex>;

        if $r1 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getLowerBound()>();

        if $r2 != null goto label2;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: double[] getUpperBound()>();

        if $r6 == null goto label3;

     label2:
        $r3 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label3:
        return;
    }

    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }
}
