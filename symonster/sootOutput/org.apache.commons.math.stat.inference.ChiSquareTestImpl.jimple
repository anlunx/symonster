public class org.apache.commons.math.stat.inference.ChiSquareTestImpl extends java.lang.Object implements org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest
{
    private org.apache.commons.math.distribution.ChiSquaredDistribution distribution;

    public void <init>()
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        $r1 = new org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void <init>(double)>(1.0);

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void <init>(org.apache.commons.math.distribution.ChiSquaredDistribution)>($r1);

        return;
    }

    public void <init>(org.apache.commons.math.distribution.ChiSquaredDistribution)
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        org.apache.commons.math.distribution.ChiSquaredDistribution r1;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.ChiSquaredDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void setDistribution(org.apache.commons.math.distribution.ChiSquaredDistribution)>(r1);

        return;
    }

    public double chiSquare(double[], long[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        double[] r1;
        long[] r2;
        int $i0, $i1, $i2, $i3, $i8, $i9, $i10, i11, i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19, d20, d21;
        byte $b4;
        long $l5, $l6, $l7;
        java.lang.Object[] $r3, $r8;
        org.apache.commons.math.exception.util.LocalizedFormats $r4, $r9;
        java.lang.Integer $r5, $r6, $r10, $r11;
        java.lang.IllegalArgumentException $r7, $r12;
        boolean z0;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r8 = newarray (java.lang.Object)[2];

        $i10 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r8[1] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r12;

     label1:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label2;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r3 = newarray (java.lang.Object)[2];

        $i8 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r3[0] = $r5;

        $i9 = lengthof r2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r3[1] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r7;

     label2:
        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkPositive(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkNonNegative(long[])>(r2);

        d16 = 0.0;

        d17 = 0.0;

        i11 = 0;

     label3:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label4;

        $d14 = r1[i11];

        d16 = d16 + $d14;

        $l7 = r2[i11];

        $d15 = (double) $l7;

        d17 = d17 + $d15;

        i11 = i11 + 1;

        goto label3;

     label4:
        d18 = 1.0;

        z0 = 0;

        $d0 = d16 - d17;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $b4 = $d1 cmpl 1.0E-5;

        if $b4 <= 0 goto label5;

        d18 = d17 / d16;

        z0 = 1;

     label5:
        d19 = 0.0;

        i12 = 0;

     label6:
        $i13 = lengthof r2;

        if i12 >= $i13 goto label9;

        if z0 == 0 goto label7;

        $l6 = r2[i12];

        $d9 = (double) $l6;

        $d7 = r1[i12];

        $d8 = d18 * $d7;

        d20 = $d9 - $d8;

        $d12 = d20 * d20;

        $d10 = r1[i12];

        $d11 = d18 * $d10;

        $d13 = $d12 / $d11;

        d19 = d19 + $d13;

        goto label8;

     label7:
        $l5 = r2[i12];

        $d3 = (double) $l5;

        $d2 = r1[i12];

        d21 = $d3 - $d2;

        $d5 = d21 * d21;

        $d4 = r1[i12];

        $d6 = $d5 / $d4;

        d19 = d19 + $d6;

     label8:
        i12 = i12 + 1;

        goto label6;

     label9:
        return d19;
    }

    public double chiSquareTest(double[], long[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        double[] r1;
        long[] r2;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math.distribution.ChiSquaredDistribution $r3, $r4;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $r3 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        interfaceinvoke $r3.<org.apache.commons.math.distribution.ChiSquaredDistribution: void setDegreesOfFreedom(double)>($d1);

        $r4 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquare(double[],long[])>(r1, r2);

        $d3 = interfaceinvoke $r4.<org.apache.commons.math.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean chiSquareTest(double[], long[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        double[] r1;
        long[] r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        java.lang.IllegalArgumentException $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r3 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        $r3[2] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r8;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquareTest(double[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public double chiSquare(long[][]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        int i0, i1, i7, i8, i9, i10;
        double[] r2, r3;
        long[] $r4, $r5, $r6, $r7, $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d19;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkArray(long[][])>(r1);

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i1];

        d16 = 0.0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        i8 = 0;

     label2:
        if i8 >= i1 goto label3;

        $d10 = r2[i7];

        $r7 = r1[i7];

        $l4 = $r7[i8];

        $d9 = (double) $l4;

        $d11 = $d10 + $d9;

        r2[i7] = $d11;

        $d13 = r3[i8];

        $r8 = r1[i7];

        $l5 = $r8[i8];

        $d12 = (double) $l5;

        $d14 = $d13 + $d12;

        r3[i8] = $d14;

        $r9 = r1[i7];

        $l6 = $r9[i8];

        $d15 = (double) $l6;

        d16 = d16 + $d15;

        i8 = i8 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        d17 = 0.0;

        i9 = 0;

     label5:
        if i9 >= i0 goto label8;

        i10 = 0;

     label6:
        if i10 >= i1 goto label7;

        $d1 = r2[i9];

        $d0 = r3[i10];

        $d2 = $d1 * $d0;

        d19 = $d2 / d16;

        $r5 = r1[i9];

        $l2 = $r5[i10];

        $d3 = (double) $l2;

        $d6 = $d3 - d19;

        $r6 = r1[i9];

        $l3 = $r6[i10];

        $d4 = (double) $l3;

        $d5 = $d4 - d19;

        $d7 = $d6 * $d5;

        $d8 = $d7 / d19;

        d17 = d17 + $d8;

        i10 = i10 + 1;

        goto label6;

     label7:
        i9 = i9 + 1;

        goto label5;

     label8:
        return d17;
    }

    public double chiSquareTest(long[][]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int $i0, $i1;
        long[] $r2;
        org.apache.commons.math.distribution.ChiSquaredDistribution $r3, $r4;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkArray(long[][])>(r1);

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        $d4 = $d1 - 1.0;

        $r2 = r1[0];

        $i1 = lengthof $r2;

        $d2 = (double) $i1;

        $d3 = $d2 - 1.0;

        d0 = $d4 * $d3;

        $r3 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        interfaceinvoke $r3.<org.apache.commons.math.distribution.ChiSquaredDistribution: void setDegreesOfFreedom(double)>(d0);

        $r4 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        $d5 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquare(long[][])>(r1);

        $d6 = interfaceinvoke $r4.<org.apache.commons.math.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d5);

        $d7 = 1.0 - $d6;

        return $d7;
    }

    public boolean chiSquareTest(long[][], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        double d0, $d1;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        $r2[2] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r7;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquareTest(long[][])>(r1);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public double chiSquareDataSetsComparison(long[], long[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[] r1, r2;
        int $i0, $i1, $i2, $i3, $i15, $i16, $i17, i20, i21, $i22;
        byte $b4, $b5, $b6, $b8, $b12;
        long $l7, $l9, $l10, $l11, $l13, $l14, l18, l19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d13, d14, d15;
        java.lang.Object[] $r3, $r7, $r11, $r15, $r20;
        org.apache.commons.math.exception.util.LocalizedFormats $r4, $r8, $r12, $r16, $r21;
        java.lang.Integer $r5, $r9, $r13, $r17, $r18, $r22, $r23;
        java.lang.IllegalArgumentException $r6, $r10, $r14, $r19, $r24;
        boolean $z1, z2;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label01;

        $r21 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r20 = newarray (java.lang.Object)[2];

        $i17 = lengthof r1;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r20[0] = $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r20[1] = $r23;

        $r24 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r21, $r20);

        throw $r24;

     label01:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label02;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r15 = newarray (java.lang.Object)[2];

        $i15 = lengthof r1;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r15[0] = $r17;

        $i16 = lengthof r2;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r15[1] = $r18;

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r19;

     label02:
        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkNonNegative(long[])>(r1);

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkNonNegative(long[])>(r2);

        l18 = 0L;

        l19 = 0L;

        d8 = 0.0;

        i20 = 0;

     label03:
        $i3 = lengthof r1;

        if i20 >= $i3 goto label04;

        $l13 = r1[i20];

        l18 = l18 + $l13;

        $l14 = r2[i20];

        l19 = l19 + $l14;

        i20 = i20 + 1;

        goto label03;

     label04:
        $b4 = l18 cmp 0L;

        if $b4 != 0 goto label05;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OBSERVED_COUNTS_ALL_ZERO>;

        $r11 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11[0] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r14;

     label05:
        $b5 = l19 cmp 0L;

        if $b5 != 0 goto label06;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OBSERVED_COUNTS_ALL_ZERO>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r7[0] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r10;

     label06:
        $b6 = l18 cmp l19;

        if $b6 == 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z2 = $z1;

        if $z1 == 0 goto label09;

        $d6 = (double) l18;

        $d5 = (double) l19;

        $d7 = $d6 / $d5;

        d8 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d7);

     label09:
        d9 = 0.0;

        i21 = 0;

     label10:
        $i22 = lengthof r1;

        if i21 >= $i22 goto label14;

        $l7 = r1[i21];

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label11;

        $l11 = r2[i21];

        $b12 = $l11 cmp 0L;

        if $b12 != 0 goto label11;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        $r3[0] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r6;

     label11:
        $l9 = r1[i21];

        d13 = (double) $l9;

        $l10 = r2[i21];

        d14 = (double) $l10;

        if z2 == 0 goto label12;

        $d4 = d13 / d8;

        $d3 = d14 * d8;

        d15 = $d4 - $d3;

        goto label13;

     label12:
        d15 = d13 - d14;

     label13:
        $d1 = d15 * d15;

        $d0 = d13 + d14;

        $d2 = $d1 / $d0;

        d9 = d9 + $d2;

        i21 = i21 + 1;

        goto label10;

     label14:
        return d9;
    }

    public double chiSquareTestDataSetsComparison(long[], long[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[] r1, r2;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math.distribution.ChiSquaredDistribution $r3, $r4;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $r3 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        interfaceinvoke $r3.<org.apache.commons.math.distribution.ChiSquaredDistribution: void setDegreesOfFreedom(double)>($d1);

        $r4 = r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquareDataSetsComparison(long[],long[])>(r1, r2);

        $d3 = interfaceinvoke $r4.<org.apache.commons.math.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean chiSquareTestDataSetsComparison(long[], long[], double) throws java.lang.IllegalArgumentException, org.apache.commons.math.MathException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[] r1, r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r3 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        $r3[2] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r8;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: double chiSquareTestDataSetsComparison(long[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private void checkArray(long[][]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        int $i0, $i1, $i2, $i3;
        long[] $r2, $r4;
        java.lang.Object[] $r3, $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r5, $r10;
        java.lang.Integer $r6, $r7, $r11, $r12;
        java.lang.IllegalArgumentException $r8, $r13;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r9 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r9[1] = $r12;

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r13;

     label1:
        $r2 = r1[0];

        $i1 = lengthof $r2;

        if $i1 >= 2 goto label2;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = r1[0];

        $i2 = lengthof $r4;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3[1] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r3);

        throw $r8;

     label2:
        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkRectangular(long[][])>(r1);

        specialinvoke r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: void checkNonNegative(long[][])>(r1);

        return;
    }

    private void checkRectangular(long[][])
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        long[] $r2, $r3, $r5, $r8;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        i5 = 1;

     label1:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $r2 = r1[i5];

        $i2 = lengthof $r2;

        $r3 = r1[0];

        $i1 = lengthof $r3;

        if $i2 == $i1 goto label2;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = r1[i5];

        $i3 = lengthof $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r7;

        $r8 = r1[0];

        $i4 = lengthof $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r4[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r4);

        throw $r10;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkPositive(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        double[] r1;
        int $i0, i2;
        double $d0, $d1;
        byte $b1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        java.lang.Double $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: double[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $d0 = r1[i2];

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_ELEMENT_AT_INDEX>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[0] = $r4;

        $d1 = r1[i2];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkNonNegative(long[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[] r1;
        int $i0, i4;
        long $l1, $l3;
        byte $b2;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        java.lang.Long $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[];

        i4 = 0;

     label1:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label3;

        $l1 = r1[i4];

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_INDEX>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r2[0] = $r4;

        $l3 = r1[i4];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkNonNegative(long[][]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        long[][] r1;
        int $i0, $i1, i5, i6;
        long[] $r2, $r3, $r8;
        long $l2, $l4;
        byte $b3;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6, $r7;
        java.lang.Long $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: long[][];

        i5 = 0;

     label1:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label5;

        i6 = 0;

     label2:
        $r2 = r1[i5];

        $i1 = lengthof $r2;

        if i6 >= $i1 goto label4;

        $r3 = r1[i5];

        $l2 = $r3[i6];

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label3;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_2D_INDEX>;

        $r4 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r4[1] = $r7;

        $r8 = r1[i5];

        $l4 = $r8[i6];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r4[2] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r10;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    public void setDistribution(org.apache.commons.math.distribution.ChiSquaredDistribution)
    {
        org.apache.commons.math.stat.inference.ChiSquareTestImpl r0;
        org.apache.commons.math.distribution.ChiSquaredDistribution r1;

        r0 := @this: org.apache.commons.math.stat.inference.ChiSquareTestImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.ChiSquaredDistribution;

        r0.<org.apache.commons.math.stat.inference.ChiSquareTestImpl: org.apache.commons.math.distribution.ChiSquaredDistribution distribution> = r1;

        return;
    }
}
