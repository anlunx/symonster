public class com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator extends com.opengamma.analytics.math.function.Function1D
{
    private static final com.opengamma.analytics.math.function.Function1D MEDIAN;

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator r0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(double[])
    {
        com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator r0;
        double[] r1, r2, r14, r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        com.opengamma.analytics.math.function.Function1D $r3, $r6, $r9;
        java.lang.Object $r4, $r7, $r10;
        java.lang.Double $r5, $r8, $r11, $r12, $r13;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator;

        r1 := @parameter0: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        i0 = lengthof r1;

        if i0 < 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Need at least three points to calculate interquartile range");

        if i0 != 3 goto label3;

        $d10 = r1[2];

        $d8 = r1[1];

        $d9 = 2.0 * $d8;

        $d12 = $d10 - $d9;

        $d11 = r1[0];

        $d13 = $d12 + $d11;

        $d14 = $d13 / 2.0;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        return $r13;

     label3:
        r2 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        staticinvoke <java.util.Arrays: void sort(double[])>(r2);

        $i1 = i0 % 2;

        if $i1 != 0 goto label4;

        $i5 = i0 / 2;

        r14 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 0, $i5);

        $i6 = i0 / 2;

        r15 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, $i6, i0);

        goto label5;

     label4:
        $i2 = i0 / 2;

        $i3 = $i2 + 1;

        r14 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 0, $i3);

        $i4 = i0 / 2;

        r15 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, $i4, i0);

     label5:
        $r3 = <com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEDIAN>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r14);

        $r5 = (java.lang.Double) $r4;

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r6 = <com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEDIAN>;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r8 = (java.lang.Double) $r7;

        d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = <com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEDIAN>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r15);

        $r11 = (java.lang.Double) $r10;

        d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d3 = 2.0 * d1;

        $d4 = d0 - $d3;

        $d6 = $d4 + d2;

        $d5 = d2 - d0;

        $d7 = $d6 / $d5;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        return $r12;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator r0;
        java.lang.Object r1;
        double[] $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (double[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator: java.lang.Double evaluate(double[])>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.statistics.descriptive.MedianCalculator $r0;

        $r0 = new com.opengamma.analytics.math.statistics.descriptive.MedianCalculator;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.descriptive.MedianCalculator: void <init>()>();

        <com.opengamma.analytics.math.statistics.descriptive.QuartileSkewnessCalculator: com.opengamma.analytics.math.function.Function1D MEDIAN> = $r0;

        return;
    }
}
