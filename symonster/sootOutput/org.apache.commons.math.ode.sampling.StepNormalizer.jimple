public class org.apache.commons.math.ode.sampling.StepNormalizer extends java.lang.Object implements org.apache.commons.math.ode.sampling.StepHandler
{
    private double h;
    private final org.apache.commons.math.ode.sampling.FixedStepHandler handler;
    private double lastTime;
    private double[] lastState;
    private double[] lastDerivatives;
    private boolean forward;

    public void <init>(double, org.apache.commons.math.ode.sampling.FixedStepHandler)
    {
        org.apache.commons.math.ode.sampling.StepNormalizer r0;
        double d0, $d1;
        org.apache.commons.math.ode.sampling.FixedStepHandler r1;

        r0 := @this: org.apache.commons.math.ode.sampling.StepNormalizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.ode.sampling.FixedStepHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double h> = $d1;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: org.apache.commons.math.ode.sampling.FixedStepHandler handler> = r1;

        virtualinvoke r0.<org.apache.commons.math.ode.sampling.StepNormalizer: void reset()>();

        return;
    }

    public boolean requiresDenseOutput()
    {
        org.apache.commons.math.ode.sampling.StepNormalizer r0;

        r0 := @this: org.apache.commons.math.ode.sampling.StepNormalizer;

        return 1;
    }

    public void reset()
    {
        org.apache.commons.math.ode.sampling.StepNormalizer r0;

        r0 := @this: org.apache.commons.math.ode.sampling.StepNormalizer;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime> = #NaN;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState> = null;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives> = null;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: boolean forward> = 1;

        return;
    }

    public void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.sampling.StepNormalizer r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        double[] $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14;
        org.apache.commons.math.ode.sampling.FixedStepHandler $r5, $r8;
        int $i0, $i1;
        byte $b2, $b3, $b4;
        java.lang.Object $r16, $r19;

        r0 := @this: org.apache.commons.math.ode.sampling.StepNormalizer;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState>;

        if $r2 != null goto label03;

        $d5 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime> = $d5;

        $d6 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d6);

        $r15 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Object clone()>();

        $r17 = (double[]) $r16;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState> = $r17;

        $r18 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Object clone()>();

        $r20 = (double[]) $r19;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives> = $r20;

        $d7 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d8 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        $b3 = $d7 cmpl $d8;

        if $b3 < 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: boolean forward> = $z4;

        $z3 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: boolean forward>;

        if $z3 != 0 goto label03;

        $d9 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double h>;

        $d10 = neg $d9;

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double h> = $d10;

     label03:
        $d11 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        $d12 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double h>;

        d13 = $d11 + $d12;

        $z1 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: boolean forward>;

        $d14 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b4 = d13 cmpl $d14;

        if $b4 <= 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        z6 = $z1 ^ $z5;

     label06:
        if z6 == 0 goto label09;

        $r8 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: org.apache.commons.math.ode.sampling.FixedStepHandler handler>;

        $d1 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        $r7 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState>;

        $r6 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        interfaceinvoke $r8.<org.apache.commons.math.ode.sampling.FixedStepHandler: void handleStep(double,double[],double[],boolean)>($d1, $r7, $r6, 0);

        r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime> = d13;

        $d2 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d2);

        $r9 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r11 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState>;

        $r10 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState>;

        $i0 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, $i0);

        $r12 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r14 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $r13 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        $i1 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r14, 0, $i1);

        $d3 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double h>;

        d13 = d13 + $d3;

        $z2 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: boolean forward>;

        $d4 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $b2 = d13 cmpl $d4;

        if $b2 <= 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        z6 = $z2 ^ $z7;

        goto label06;

     label09:
        if z0 == 0 goto label10;

        $r5 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: org.apache.commons.math.ode.sampling.FixedStepHandler handler>;

        $d0 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double lastTime>;

        $r4 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastState>;

        $r3 = r0.<org.apache.commons.math.ode.sampling.StepNormalizer: double[] lastDerivatives>;

        interfaceinvoke $r5.<org.apache.commons.math.ode.sampling.FixedStepHandler: void handleStep(double,double[],double[],boolean)>($d0, $r4, $r3, 1);

     label10:
        return;
    }
}
