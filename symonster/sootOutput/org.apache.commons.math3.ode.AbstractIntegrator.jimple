public abstract class org.apache.commons.math3.ode.AbstractIntegrator extends java.lang.Object implements org.apache.commons.math3.ode.FirstOrderIntegrator
{
    protected java.util.Collection stepHandlers;
    protected double stepStart;
    protected double stepSize;
    protected boolean isLastStep;
    protected boolean resetOccurred;
    private java.util.Collection eventsStates;
    private boolean statesInitialized;
    private final java.lang.String name;
    private org.apache.commons.math3.util.Incrementor evaluations;
    private transient org.apache.commons.math3.ode.ExpandableStatefulODE expandable;

    public void <init>(java.lang.String)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.lang.String r1;
        java.util.ArrayList $r2, $r3;
        org.apache.commons.math3.util.Incrementor $r4, $r5;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.lang.String name> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers> = $r2;

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: double stepStart> = #NaN;

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: double stepSize> = #NaN;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates> = $r3;

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean statesInitialized> = 0;

        $r4 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r4.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations> = $r4;

        virtualinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void setMaxEvaluations(int)>(-1);

        $r5 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r5.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        return;
    }

    protected void <init>()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        specialinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void <init>(java.lang.String)>(null);

        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.lang.String name>;

        return $r1;
    }

    public void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.sampling.StepHandler r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepHandler;

        $r2 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Collection getStepHandlers()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public void clearStepHandlers()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public void addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.events.EventHandler r1;
        double d0, d1;
        int i0;
        org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver $r2;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.events.EventHandler;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        $r2 = new org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;

        specialinvoke $r2.<org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver: void <init>(double,int)>(d1, 5);

        virtualinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void addEventHandler(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)>(r1, d0, d1, i0, $r2);

        return;
    }

    public void addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.events.EventHandler r1;
        double d0, d1;
        int i0;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r2;
        org.apache.commons.math3.ode.events.EventState $r3;
        java.util.Collection $r4;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.events.EventHandler;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 := @parameter4: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        $r3 = new org.apache.commons.math3.ode.events.EventState;

        specialinvoke $r3.<org.apache.commons.math3.ode.events.EventState: void <init>(org.apache.commons.math3.ode.events.EventHandler,double,double,int,org.apache.commons.math3.analysis.solvers.UnivariateSolver)>(r1, d0, d1, i0, r2);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        return;
    }

    public java.util.Collection getEventHandlers()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.util.Iterator r2;
        org.apache.commons.math3.ode.events.EventState r3;
        java.util.ArrayList $r4;
        java.util.Collection $r5, $r6, $r7;
        int $i0;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.commons.math3.ode.events.EventHandler $r9;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        $i0 = interfaceinvoke $r5.<java.util.Collection: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.ode.events.EventState) $r8;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler getEventHandler()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r7 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r4);

        return $r7;
    }

    public void clearEventHandlers()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public double getCurrentStepStart()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $d0 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: double stepStart>;

        return $d0;
    }

    public double getCurrentSignedStepsize()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $d0 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: double stepSize>;

        return $d0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        int i0, $i1;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        if i0 >= 0 goto label1;

        $i1 = 2147483647;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>($i1);

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    protected void initIntegration(double, double[], double)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        double d0, d1;
        double[] r1;
        org.apache.commons.math3.util.Incrementor $r2;
        java.util.Collection $r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r7;
        org.apache.commons.math3.ode.events.EventHandler $r8;
        java.util.Iterator r9, r11;
        org.apache.commons.math3.ode.events.EventState r10;
        org.apache.commons.math3.ode.sampling.StepHandler r12;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r3 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r9 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.commons.math3.ode.events.EventState) $r6;

        $r7 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        virtualinvoke r10.<org.apache.commons.math3.ode.events.EventState: void setExpandable(org.apache.commons.math3.ode.ExpandableStatefulODE)>($r7);

        $r8 = virtualinvoke r10.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler getEventHandler()>();

        interfaceinvoke $r8.<org.apache.commons.math3.ode.events.EventHandler: void init(double,double[],double)>(d0, r1, d1);

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.commons.math3.ode.sampling.StepHandler) $r5;

        interfaceinvoke r12.<org.apache.commons.math3.ode.sampling.StepHandler: void init(double,double[],double)>(d0, r1, d1);

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void setStateInitialized(boolean)>(0);

        return;
    }

    protected void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable> = r1;

        return;
    }

    protected org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        return $r1;
    }

    protected org.apache.commons.math3.util.Incrementor getEvaluationsCounter()
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        return $r1;
    }

    public double integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, $d2;
        double[] r2, r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r7, $r8;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        $i0 = lengthof r2;

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        if $i0 == $i1 goto label1;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i7 = lengthof r2;

        $i8 = interfaceinvoke r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i7, $i8);

        throw $r8;

     label1:
        $i2 = lengthof r3;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        if $i2 == $i3 goto label2;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r3;

        $i6 = interfaceinvoke r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i6);

        throw $r7;

     label2:
        $r5 = new org.apache.commons.math3.ode.ExpandableStatefulODE;

        specialinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations)>(r1);

        virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>(d0);

        virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setPrimaryState(double[])>(r2);

        virtualinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>($r5, d1);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getPrimaryState()>();

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r3, 0, $i4);

        $d2 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        return $d2;
    }

    public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException;

    public void computeDerivatives(double, double[], double[]) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        double d0;
        double[] r1, r2;
        org.apache.commons.math3.util.Incrementor $r3;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r4;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $r3 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        $r4 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        virtualinvoke $r4.<org.apache.commons.math3.ode.ExpandableStatefulODE: void computeDerivatives(double,double[],double[])>(d0, r1, r2);

        return;
    }

    protected void setStateInitialized(boolean)
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean statesInitialized> = z0;

        return;
    }

    protected double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r1;
        double[] r2, r3, $r10, $r18, $r22, $r31, r42, r50;
        double d0, d1, d2, d3;
        org.apache.commons.math3.ode.EquationsMapper r4, $r9, $r21, r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z17, $z18, $z19, $z21, $z22, $z23, z24, $z25, $z26, $z27, $z28;
        java.util.TreeSet $r5;
        org.apache.commons.math3.ode.AbstractIntegrator$1 $r6;
        java.util.Collection $r7, $r12, $r13, $r24, $r25, $r26, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, i8, i9, i10, i11, i12, i13;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r8, $r11, $r20, $r23;
        java.lang.Object $r14, $r16, $r19, $r27, $r28, $r29, $r32, $r34;
        java.util.Iterator r35, r38, r40, r44, r46, r48, r53, r55;
        org.apache.commons.math3.ode.events.EventState r36, r39, r41, r45, r49, r54;
        byte $b6;
        org.apache.commons.math3.ode.EquationsMapper[] r43, r51;
        org.apache.commons.math3.ode.sampling.StepHandler r47, r56;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

        d2 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double getGlobalPreviousTime()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double getGlobalCurrentTime()>();

        $z0 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean statesInitialized>;

        if $z0 != 0 goto label03;

        $r33 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r35 = interfaceinvoke $r33.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z21 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label02;

        $r34 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.apache.commons.math3.ode.events.EventState) $r34;

        virtualinvoke r36.<org.apache.commons.math3.ode.events.EventState: void reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        goto label01;

     label02:
        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean statesInitialized> = 1;

     label03:
        $z1 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean isForward()>();

        if $z1 == 0 goto label04;

        $b6 = 1;

        goto label05;

     label04:
        $b6 = -1;

     label05:
        $r5 = new java.util.TreeSet;

        $r6 = new org.apache.commons.math3.ode.AbstractIntegrator$1;

        specialinvoke $r6.<org.apache.commons.math3.ode.AbstractIntegrator$1: void <init>(org.apache.commons.math3.ode.AbstractIntegrator,int)>(r0, $b6);

        specialinvoke $r5.<java.util.TreeSet: void <init>(java.util.Comparator)>($r6);

        $r7 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z22 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label08;

        $r32 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.apache.commons.math3.ode.events.EventState) $r32;

        $z19 = virtualinvoke r39.<org.apache.commons.math3.ode.events.EventState: boolean evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        if $z19 == 0 goto label07;

        interfaceinvoke $r5.<java.util.SortedSet: boolean add(java.lang.Object)>(r39);

     label07:
        goto label06;

     label08:
        $z2 = interfaceinvoke $r5.<java.util.SortedSet: boolean isEmpty()>();

        if $z2 != 0 goto label26;

        r40 = interfaceinvoke $r5.<java.util.SortedSet: java.util.Iterator iterator()>();

        $r19 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.apache.commons.math3.ode.events.EventState) $r19;

        interfaceinvoke r40.<java.util.Iterator: void remove()>();

        d3 = virtualinvoke r41.<org.apache.commons.math3.ode.events.EventState: double getEventTime()>();

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setSoftPreviousTime(double)>(d2);

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setSoftCurrentTime(double)>(d3);

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d3);

        $i2 = lengthof r2;

        r42 = newarray (double)[$i2];

        $r20 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        $r21 = virtualinvoke $r20.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r22 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke $r21.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r22, r42);

        i8 = 0;

        $r23 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        r43 = virtualinvoke $r23.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i9 = lengthof r43;

        i10 = 0;

     label09:
        if i10 >= i9 goto label10;

        r4 = r43[i10];

        $i5 = i8;

        i8 = i8 + 1;

        $r31 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedSecondaryState(int)>($i5);

        virtualinvoke r4.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r31, r42);

        i10 = i10 + 1;

        goto label09;

     label10:
        $r24 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r44 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z9 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label15;

        $r29 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (org.apache.commons.math3.ode.events.EventState) $r29;

        virtualinvoke r45.<org.apache.commons.math3.ode.events.EventState: void stepAccepted(double,double[])>(d3, r42);

        $z17 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        if $z17 != 0 goto label12;

        $z18 = virtualinvoke r45.<org.apache.commons.math3.ode.events.EventState: boolean stop()>();

        if $z18 == 0 goto label13;

     label12:
        $z23 = 1;

        goto label14;

     label13:
        $z23 = 0;

     label14:
        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep> = $z23;

        goto label11;

     label15:
        $r25 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r46 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z10 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label17;

        $r28 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (org.apache.commons.math3.ode.sampling.StepHandler) $r28;

        $z16 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        interfaceinvoke r47.<org.apache.commons.math3.ode.sampling.StepHandler: void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator,boolean)>(r1, $z16);

        goto label16;

     label17:
        $z11 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        if $z11 == 0 goto label18;

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r42, 0, r2, 0, $i4);

        return d3;

     label18:
        z24 = 0;

        $r26 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r48 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

     label19:
        $z12 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label23;

        $r27 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.commons.math3.ode.events.EventState) $r27;

        if z24 != 0 goto label20;

        $z15 = virtualinvoke r49.<org.apache.commons.math3.ode.events.EventState: boolean reset(double,double[])>(d3, r42);

        if $z15 == 0 goto label21;

     label20:
        $z25 = 1;

        goto label22;

     label21:
        $z25 = 0;

     label22:
        z24 = $z25;

        goto label19;

     label23:
        if z24 == 0 goto label24;

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d3);

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r42, 0, r2, 0, $i3);

        virtualinvoke r0.<org.apache.commons.math3.ode.AbstractIntegrator: void computeDerivatives(double,double[],double[])>(d3, r2, r3);

        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean resetOccurred> = 1;

        return d3;

     label24:
        d2 = d3;

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setSoftPreviousTime(double)>(d3);

        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setSoftCurrentTime(double)>(d1);

        $z13 = virtualinvoke r41.<org.apache.commons.math3.ode.events.EventState: boolean evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        if $z13 == 0 goto label25;

        interfaceinvoke $r5.<java.util.SortedSet: boolean add(java.lang.Object)>(r41);

     label25:
        goto label08;

     label26:
        virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d1);

        $i0 = lengthof r2;

        r50 = newarray (double)[$i0];

        $r8 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r10 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke $r9.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r10, r50);

        i11 = 0;

        $r11 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        r51 = virtualinvoke $r11.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i12 = lengthof r51;

        i13 = 0;

     label27:
        if i13 >= i12 goto label28;

        r52 = r51[i13];

        $i1 = i11;

        i11 = i11 + 1;

        $r18 = virtualinvoke r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedSecondaryState(int)>($i1);

        virtualinvoke r52.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r18, r50);

        i13 = i13 + 1;

        goto label27;

     label28:
        $r12 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r53 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label29:
        $z3 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label33;

        $r16 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (org.apache.commons.math3.ode.events.EventState) $r16;

        virtualinvoke r54.<org.apache.commons.math3.ode.events.EventState: void stepAccepted(double,double[])>(d1, r50);

        $z7 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        if $z7 != 0 goto label30;

        $z8 = virtualinvoke r54.<org.apache.commons.math3.ode.events.EventState: boolean stop()>();

        if $z8 == 0 goto label31;

     label30:
        $z26 = 1;

        goto label32;

     label31:
        $z26 = 0;

     label32:
        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep> = $z26;

        goto label29;

     label33:
        $z4 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        if $z4 != 0 goto label34;

        $z6 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d1, d0, 1);

        if $z6 == 0 goto label35;

     label34:
        $z27 = 1;

        goto label36;

     label35:
        $z27 = 0;

     label36:
        r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep> = $z27;

        $r13 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r55 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label37:
        $z28 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label38;

        $r14 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.apache.commons.math3.ode.sampling.StepHandler) $r14;

        $z5 = r0.<org.apache.commons.math3.ode.AbstractIntegrator: boolean isLastStep>;

        interfaceinvoke r56.<org.apache.commons.math3.ode.sampling.StepHandler: void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator,boolean)>(r1, $z5);

        goto label37;

     label38:
        return d1;
    }

    protected void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.AbstractIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r5;

        r0 := @this: org.apache.commons.math3.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        d0 := @parameter1: double;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, $d5);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>($d6);

        d1 = 1000.0 * $d7;

        $d8 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $d9 = $d8 - d0;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d9);

        $b0 = d2 cmpg d1;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_INTEGRATION_INTERVAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        return;
    }
}
