public class org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex extends org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex
{
    private static final double DEFAULT_RHO;
    private static final double DEFAULT_KHI;
    private static final double DEFAULT_GAMMA;
    private static final double DEFAULT_SIGMA;
    private final double rho;
    private final double khi;
    private final double gamma;
    private final double sigma;

    public void <init>(int)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double)>(i0, 1.0);

        return;
    }

    public void <init>(int, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double,double,double,double,double)>(i0, d0, 1.0, 2.0, 0.5, 0.5);

        return;
    }

    public void <init>(int, double, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int i0;
        double d0, d1, d2, d3, d4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(int,double)>(i0, d0);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = d3;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = d4;

        return;
    }

    public void <init>(int, double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        int i0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(int,double,double,double,double,double)>(i0, 1.0, d0, d1, d2, d3);

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(double[],double,double,double,double)>(r1, 1.0, 2.0, 0.5, 0.5);

        return;
    }

    public void <init>(double[], double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[] r1;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[])>(r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = d3;

        return;
    }

    public void <init>(double[][])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void <init>(double[][],double,double,double,double)>(r1, 1.0, 2.0, 0.5, 0.5);

        return;
    }

    public void <init>(double[][], double, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        double[][] r1;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex: void <init>(double[][])>(r1);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho> = d0;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi> = d1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma> = d2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma> = d3;

        return;
    }

    public void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        java.util.Comparator r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        org.apache.commons.math3.optim.PointValuePair r3, r4, r5, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        double[] r6, r7, r8, r9, r18, r20, r22, r24, r26;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, d45;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        i0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: int getDimension()>();

        r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        $i1 = i0 - 1;

        r4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>($i1);

        r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(i0);

        r6 = virtualinvoke r5.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        r7 = newarray (double)[i0];

        i9 = 0;

     label01:
        if i9 >= i0 goto label04;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(i9);

        r8 = virtualinvoke $r17.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        i10 = 0;

     label02:
        if i10 >= i0 goto label03;

        $d43 = r7[i10];

        $d42 = r8[i10];

        $d44 = $d43 + $d42;

        r7[i10] = $d44;

        i10 = i10 + 1;

        goto label02;

     label03:
        i9 = i9 + 1;

        goto label01;

     label04:
        $d0 = (double) i0;

        d45 = 1.0 / $d0;

        i11 = 0;

     label05:
        if i11 >= i0 goto label06;

        $d40 = r7[i11];

        $d41 = $d40 * d45;

        r7[i11] = $d41;

        i11 = i11 + 1;

        goto label05;

     label06:
        r18 = newarray (double)[i0];

        i12 = 0;

     label07:
        if i12 >= i0 goto label08;

        $d38 = r7[i12];

        $d36 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double rho>;

        $d34 = r7[i12];

        $d33 = r6[i12];

        $d35 = $d34 - $d33;

        $d37 = $d36 * $d35;

        $d39 = $d38 + $d37;

        r18[i12] = $d39;

        i12 = i12 + 1;

        goto label07;

     label08:
        $r10 = new org.apache.commons.math3.optim.PointValuePair;

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r18);

        specialinvoke $r10.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r18, $d1, 0);

        $i2 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, $r10);

        if $i2 > 0 goto label09;

        $i8 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r10, r4);

        if $i8 >= 0 goto label09;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>($r10, r2);

        goto label26;

     label09:
        $i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r10, r3);

        if $i3 >= 0 goto label14;

        r20 = newarray (double)[i0];

        i13 = 0;

     label10:
        if i13 >= i0 goto label11;

        $d31 = r7[i13];

        $d29 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double khi>;

        $d27 = r18[i13];

        $d26 = r7[i13];

        $d28 = $d27 - $d26;

        $d30 = $d29 * $d28;

        $d32 = $d31 + $d30;

        r20[i13] = $d32;

        i13 = i13 + 1;

        goto label10;

     label11:
        $r16 = new org.apache.commons.math3.optim.PointValuePair;

        $d25 = interfaceinvoke r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r20);

        specialinvoke $r16.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r20, $d25, 0);

        $i7 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r16, $r10);

        if $i7 >= 0 goto label12;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>($r16, r2);

        goto label13;

     label12:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>($r10, r2);

     label13:
        goto label26;

     label14:
        $i4 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r10, r5);

        if $i4 >= 0 goto label18;

        r22 = newarray (double)[i0];

        i14 = 0;

     label15:
        if i14 >= i0 goto label16;

        $d23 = r7[i14];

        $d21 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma>;

        $d19 = r18[i14];

        $d18 = r7[i14];

        $d20 = $d19 - $d18;

        $d22 = $d21 * $d20;

        $d24 = $d23 + $d22;

        r22[i14] = $d24;

        i14 = i14 + 1;

        goto label15;

     label16:
        $r15 = new org.apache.commons.math3.optim.PointValuePair;

        $d17 = interfaceinvoke r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r22);

        specialinvoke $r15.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r22, $d17, 0);

        $i6 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r15, $r10);

        if $i6 > 0 goto label17;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>($r15, r2);

        return;

     label17:
        goto label21;

     label18:
        r24 = newarray (double)[i0];

        i15 = 0;

     label19:
        if i15 >= i0 goto label20;

        $d15 = r7[i15];

        $d13 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double gamma>;

        $d11 = r7[i15];

        $d10 = r6[i15];

        $d12 = $d11 - $d10;

        $d14 = $d13 * $d12;

        $d16 = $d15 - $d14;

        r24[i15] = $d16;

        i15 = i15 + 1;

        goto label19;

     label20:
        $r11 = new org.apache.commons.math3.optim.PointValuePair;

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r24);

        specialinvoke $r11.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r24, $d2, 0);

        $i5 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r11, r5);

        if $i5 >= 0 goto label21;

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair,java.util.Comparator)>($r11, r2);

        return;

     label21:
        $r12 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(0);

        r26 = virtualinvoke $r12.<org.apache.commons.math3.optim.PointValuePair: double[] getPointRef()>();

        i16 = 1;

     label22:
        if i16 > i0 goto label25;

        $r13 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: org.apache.commons.math3.optim.PointValuePair getPoint(int)>(i16);

        r9 = virtualinvoke $r13.<org.apache.commons.math3.optim.PointValuePair: double[] getPoint()>();

        i17 = 0;

     label23:
        if i17 >= i0 goto label24;

        $d8 = r26[i17];

        $d6 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double sigma>;

        $d4 = r9[i17];

        $d3 = r26[i17];

        $d5 = $d4 - $d3;

        $d7 = $d6 * $d5;

        $d9 = $d8 + $d7;

        r9[i17] = $d9;

        i17 = i17 + 1;

        goto label23;

     label24:
        $r14 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke $r14.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double,boolean)>(r9, #NaN, 0);

        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void setPoint(int,org.apache.commons.math3.optim.PointValuePair)>(i16, $r14);

        i16 = i16 + 1;

        goto label22;

     label25:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: void evaluate(org.apache.commons.math3.analysis.MultivariateFunction,java.util.Comparator)>(r1, r2);

     label26:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double DEFAULT_SIGMA> = 0.5;

        <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double DEFAULT_GAMMA> = 0.5;

        <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double DEFAULT_KHI> = 2.0;

        <org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex: double DEFAULT_RHO> = 1.0;

        return;
    }
}
