public class com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction extends com.opengamma.analytics.math.function.VectorFunction
{
    private final double[] _samplePoints;
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator;
    private final double[] _knots;

    public void <init>(double[], com.opengamma.analytics.math.interpolation.Interpolator1D, double[])
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        double[] r1, r3, $r8, $r10;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        int i0, $i1, i3;
        java.lang.Object $r7, $r9;
        double $d0, $d1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r3 := @parameter2: double[];

        specialinvoke r0.<com.opengamma.analytics.math.function.VectorFunction: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r1, "samplePoints");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "interpolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r3, "knots");

        i0 = lengthof r3;

        i3 = 1;

     label1:
        if i3 >= i0 goto label4;

        $d1 = r3[i3];

        $i1 = i3 - 1;

        $d0 = r3[$i1];

        $b2 = $d1 cmpl $d0;

        if $b2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "knot points must be strictly ascending");

        i3 = i3 + 1;

        goto label1;

     label4:
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (double[]) $r7;

        r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints> = $r8;

        r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r2;

        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (double[]) $r9;

        r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _knots> = $r10;

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D calculateJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r2;
        int i0, i1, i2;
        double[][] r4;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r5, $r12;
        double[] $r6, $r7, $r8, $r9, $r11, $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10;
        double $d0;
        java.lang.Double $r13;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r5 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r6 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _knots>;

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[],double[])>($r6, $r7);

        $r8 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints>;

        i0 = lengthof $r8;

        $r9 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _knots>;

        i1 = lengthof $r9;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i0, i1);

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r12 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r11 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints>;

        $d0 = $r11[i2];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r14 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r2, $r13);

        r4[i2] = $r14;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r10;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r9;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r2;
        int i0, i1;
        double[] r4, $r6, $r7, $r8, $r10;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r5, $r11;
        double $d0, $d1;
        java.lang.Double $r12, $r13;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r5 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r6 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _knots>;

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[],double[])>($r6, $r7);

        $r8 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints>;

        i0 = lengthof $r8;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int)>(i0);

        r4 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r11 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r10 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints>;

        $d0 = $r10[i1];

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r13 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r2, $r12);

        $d1 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        r4[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r9;
    }

    public int getLengthOfDomain()
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        double[] $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        $r1 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _knots>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getLengthOfRange()
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        double[] $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        $r1 = r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: double[] _samplePoints>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction r0;
        java.lang.Object r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r2);

        return $r3;
    }
}
