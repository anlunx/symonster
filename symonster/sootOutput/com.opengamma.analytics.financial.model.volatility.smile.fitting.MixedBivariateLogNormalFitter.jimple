public class com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter extends java.lang.Object
{
    private static final org.slf4j.Logger s_logger;
    private static final int ITRMAX;
    private static final double EPS_1;
    private static final double EPS_2;
    private static final double TAU;
    private double _shift;
    private double[] _paramsGuess;
    private double _finalSqu;
    private double _iniSqu;
    private final java.util.Random _randObj;
    private final com.opengamma.analytics.math.linearalgebra.Decomposition _luObj;
    private final com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction _volfunc;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        java.util.Random $r1;
        com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons $r2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: java.util.Random _randObj> = $r1;

        $r2 = new com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons;

        specialinvoke $r2.<com.opengamma.analytics.math.linearalgebra.LUDecompositionCommons: void <init>()>();

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: com.opengamma.analytics.math.linearalgebra.Decomposition _luObj> = $r2;

        $r3 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction getInstance()>();

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction _volfunc> = $r3;

        return;
    }

    public void doFit(double[], double[], double[], double, double, double, int, int, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, r4, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, r53, r54, r55, r57, r58, r59, r61, r62, r64, r66;
        double d0, d1, d2, d3, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, d94, d95, d96;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46;
        double[][] r5, r56, r60, r63, r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, z22, z23;
        byte $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20;
        org.slf4j.Logger $r17;
        java.util.Random $r41;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        d3 := @parameter8: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "paramsGuess");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "dataStrikes");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "dataVolatilities");

        i2 = lengthof r1;

        i3 = lengthof r2;

        if i1 >= i3 goto label01;

        $z15 = 1;

        goto label02;

     label01:
        $z15 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z15, "(dataX length) < (dataX length + dataY length)");

        $i7 = lengthof r2;

        $i6 = lengthof r3;

        if $i7 != $i6 goto label03;

        $z16 = 1;

        goto label04;

     label03:
        $z16 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z16, "dataStrikes not the same length as dataVols");

        $i8 = 5 * i0;

        $i9 = $i8 - 3;

        if i2 != $i9 goto label05;

        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z17, "5 * N -3 free parameters");

        i21 = 0;

     label07:
        if i21 >= i3 goto label08;

        $d89 = r2[i21];

        $z11 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d89);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z11, "dataStrikes containing NaN");

        $d90 = r2[i21];

        $z12 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d90);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z12, "dataStrikes containing Infinity");

        $d91 = r3[i21];

        $z13 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d91);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z13, "dataVolatilities containing NaN");

        $d92 = r3[i21];

        $z14 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d92);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z14, "dataVolatilities containing Infinity");

        i21 = i21 + 1;

        goto label07;

     label08:
        i22 = 0;

     label09:
        if i22 >= i2 goto label10;

        $d87 = r1[i22];

        $z9 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d87);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z9, "paramsGuess containing NaN");

        $d88 = r1[i22];

        $z10 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d88);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "paramsGuess containing Infinity");

        i22 = i22 + 1;

        goto label09;

     label10:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "timeToExpiry containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "timeToExpiry containing Infinity");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "forwardX containing NaN");

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "forwardX containing Infinity");

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "forwardY containing NaN");

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "forwardY containing Infinity");

        $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z6, "paramsGuessCorrection containing NaN");

        $z7 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z7, "paramsGuessCorrection containing Infinity");

        $b10 = d0 cmpl 0.0;

        if $b10 <= 0 goto label11;

        $z18 = 1;

        goto label12;

     label11:
        $z18 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z18, "timeToExpiry should be positive");

        $b11 = d1 cmpl 0.0;

        if $b11 <= 0 goto label13;

        $z19 = 1;

        goto label14;

     label13:
        $z19 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z19, "forwardX should be positive");

        $b12 = d2 cmpl 0.0;

        if $b12 <= 0 goto label15;

        $z20 = 1;

        goto label16;

     label15:
        $z20 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z20, "forwardY should be positive");

        $b13 = d3 cmpl 0.0;

        if $b13 <= 0 goto label17;

        $z21 = 1;

        goto label18;

     label17:
        $z21 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z21, "paramsGuessCorrection should be positive");

        r53 = newarray (double)[i3];

        r54 = newarray (double)[i3];

        r55 = newarray (double)[i3];

        r56 = newmultiarray (double)[i3][i2];

        r4 = newarray (double)[i2];

        r5 = newmultiarray (double)[i2][i2];

        $r9 = newarray (double)[i2];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess> = $r9;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess> = r1;

        r57 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i3);

        r58 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r3, i3);

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r4, 0.0);

        i23 = 0;

     label19:
        if i23 >= i2 goto label20;

        $r52 = r5[i23];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r52, 0.0);

        i23 = i23 + 1;

        goto label19;

     label20:
        i24 = 0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = 0.0;

        d94 = 2.0;

        z22 = 0;

        r59 = newarray (double)[i2];

        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r60 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[][] exactFunctionDerivative(double[],double[],double,double,double,int,int)>($r10, r57, d0, d1, d2, i0, i1);

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r61 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r11, r57, r58, d0, d1, d2, i0, i1);

        i25 = 0;

     label21:
        if i25 >= i2 goto label24;

        i26 = 0;

     label22:
        if i26 >= i3 goto label23;

        $d85 = r4[i25];

        $r51 = r60[i26];

        $d81 = $r51[i25];

        $d83 = neg $d81;

        $d82 = r61[i26];

        $d84 = $d83 * $d82;

        $d86 = $d85 + $d84;

        r4[i25] = $d86;

        i26 = i26 + 1;

        goto label22;

     label23:
        i25 = i25 + 1;

        goto label21;

     label24:
        i27 = 0;

     label25:
        if i27 >= i2 goto label30;

        i28 = 0;

     label26:
        if i28 >= i2 goto label29;

        i29 = 0;

     label27:
        if i29 >= i3 goto label28;

        $r48 = r5[i27];

        $d79 = $r48[i28];

        $r49 = r60[i29];

        $d77 = $r49[i27];

        $r50 = r60[i29];

        $d76 = $r50[i28];

        $d78 = $d77 * $d76;

        $d80 = $d79 + $d78;

        $r48[i28] = $d80;

        i29 = i29 + 1;

        goto label27;

     label28:
        i28 = i28 + 1;

        goto label26;

     label29:
        i27 = i27 + 1;

        goto label25;

     label30:
        i30 = 0;

     label31:
        if i30 >= i2 goto label33;

        $r46 = r5[i30];

        $d74 = $r46[i30];

        $d73 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $b20 = $d74 cmpl $d73;

        if $b20 <= 0 goto label32;

        $r47 = r5[i30];

        $d75 = $r47[i30];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d75;

     label32:
        i30 = i30 + 1;

        goto label31;

     label33:
        $d8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d9 = 0.001 * $d8;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d9;

        $r12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r13 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r12, r57, r58, d0, d1, d2, i0, i1);

        $d10 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>($r13);

        $d11 = 0.5 * $d10;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _iniSqu> = $d11;

        $d12 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNorm(double[])>(r4);

        $b14 = $d12 cmpg 1.0E-14;

        if $b14 > 0 goto label34;

        z22 = 1;

        $r45 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r62 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r45, r57, r58, d0, d1, d2, i0, i1);

        $d71 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>(r62);

        $d72 = 0.5 * $d71;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _finalSqu> = $d72;

     label34:
        if z22 != 0 goto label77;

        if i24 >= 10000 goto label77;

        i24 = i24 + 1;

        z23 = 0;

     label35:
        if z23 != 0 goto label59;

        r59 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] theMatrixEqnSolver(double[],double[],double[],double[][],double,double,double,int,int)>(r57, r58, r4, r5, d0, d1, d2, i0, i1);

        i31 = 0;

        i32 = 0;

     label36:
        if i32 >= i2 goto label39;

        $r44 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $d69 = $r44[i32];

        $d68 = r59[i32];

        d95 = $d69 + $d68;

        $b19 = d95 cmpg 0.0;

        if $b19 <= 0 goto label37;

        $d70 = r59[i32];

        $z8 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d70);

        if $z8 == 0 goto label38;

     label37:
        i31 = i31 + 1;

     label38:
        i32 = i32 + 1;

        goto label36;

     label39:
        if i31 != 0 goto label40;

        z23 = 1;

        goto label58;

     label40:
        staticinvoke <java.util.Arrays: void fill(double[],double)>(r4, 0.0);

        i33 = 0;

     label41:
        if i33 >= i2 goto label42;

        $r43 = r5[i33];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r43, 0.0);

        i33 = i33 + 1;

        goto label41;

     label42:
        i34 = 0;

     label43:
        if i34 >= i2 goto label44;

        $r42 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r41 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: java.util.Random _randObj>;

        $d65 = virtualinvoke $r41.<java.util.Random: double nextDouble()>();

        $d66 = 0.01 + $d65;

        $d67 = d3 * $d66;

        $r42[i34] = $d67;

        i34 = i34 + 1;

        goto label43;

     label44:
        $r33 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r63 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[][] exactFunctionDerivative(double[],double[],double,double,double,int,int)>($r33, r57, d0, d1, d2, i0, i1);

        $r34 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r64 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r34, r57, r58, d0, d1, d2, i0, i1);

        i35 = 0;

     label45:
        if i35 >= i2 goto label48;

        i36 = 0;

     label46:
        if i36 >= i3 goto label47;

        $d63 = r4[i35];

        $r40 = r63[i36];

        $d59 = $r40[i35];

        $d61 = neg $d59;

        $d60 = r64[i36];

        $d62 = $d61 * $d60;

        $d64 = $d63 + $d62;

        r4[i35] = $d64;

        i36 = i36 + 1;

        goto label46;

     label47:
        i35 = i35 + 1;

        goto label45;

     label48:
        i37 = 0;

     label49:
        if i37 >= i2 goto label54;

        i38 = 0;

     label50:
        if i38 >= i2 goto label53;

        i39 = 0;

     label51:
        if i39 >= i3 goto label52;

        $r37 = r5[i37];

        $d57 = $r37[i38];

        $r38 = r63[i39];

        $d55 = $r38[i37];

        $r39 = r63[i39];

        $d54 = $r39[i38];

        $d56 = $d55 * $d54;

        $d58 = $d57 + $d56;

        $r37[i38] = $d58;

        i39 = i39 + 1;

        goto label51;

     label52:
        i38 = i38 + 1;

        goto label50;

     label53:
        i37 = i37 + 1;

        goto label49;

     label54:
        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = 0.0;

        i40 = 0;

     label55:
        if i40 >= i2 goto label57;

        $r35 = r5[i40];

        $d52 = $r35[i40];

        $d51 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $b18 = $d52 cmpl $d51;

        if $b18 <= 0 goto label56;

        $r36 = r5[i40];

        $d53 = $r36[i40];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d53;

     label56:
        i40 = i40 + 1;

        goto label55;

     label57:
        $d49 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d50 = 0.001 * $d49;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d50;

     label58:
        goto label35;

     label59:
        $d13 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNorm(double[])>(r59);

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $d14 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNorm(double[])>($r14);

        $d15 = $d14 + 1.0E-14;

        $d16 = 1.0E-14 * $d15;

        $b15 = $d13 cmpg $d16;

        if $b15 > 0 goto label60;

        z22 = 1;

        $r29 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r30 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] addVectors(double[],double[])>($r29, r59);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess> = $r30;

        $r31 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r32 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r31, r57, r58, d0, d1, d2, i0, i1);

        $d47 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>($r32);

        $d48 = 0.5 * $d47;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _finalSqu> = $d48;

        goto label75;

     label60:
        d96 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getGainRatio(double[],double[],double[],double[],double,double,double,int,int)>(r59, r57, r58, r4, d0, d1, d2, i0, i1);

        $r15 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r16 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] addVectors(double[],double[])>($r15, r59);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess> = $r16;

        $b16 = d96 cmpl 0.0;

        if $b16 <= 0 goto label74;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r4, 0.0);

        i41 = 0;

     label61:
        if i41 >= i2 goto label62;

        $r28 = r5[i41];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r28, 0.0);

        i41 = i41 + 1;

        goto label61;

     label62:
        $r20 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r65 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[][] exactFunctionDerivative(double[],double[],double,double,double,int,int)>($r20, r57, d0, d1, d2, i0, i1);

        $r21 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r66 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r21, r57, r58, d0, d1, d2, i0, i1);

        i42 = 0;

     label63:
        if i42 >= i2 goto label66;

        i43 = 0;

     label64:
        if i43 >= i3 goto label65;

        $d45 = r4[i42];

        $r27 = r65[i43];

        $d41 = $r27[i42];

        $d43 = neg $d41;

        $d42 = r66[i43];

        $d44 = $d43 * $d42;

        $d46 = $d45 + $d44;

        r4[i42] = $d46;

        i43 = i43 + 1;

        goto label64;

     label65:
        i42 = i42 + 1;

        goto label63;

     label66:
        i44 = 0;

     label67:
        if i44 >= i2 goto label72;

        i45 = 0;

     label68:
        if i45 >= i2 goto label71;

        i46 = 0;

     label69:
        if i46 >= i3 goto label70;

        $r24 = r5[i44];

        $d39 = $r24[i45];

        $r25 = r65[i46];

        $d37 = $r25[i44];

        $r26 = r65[i46];

        $d36 = $r26[i45];

        $d38 = $d37 * $d36;

        $d40 = $d39 + $d38;

        $r24[i45] = $d40;

        i46 = i46 + 1;

        goto label69;

     label70:
        i45 = i45 + 1;

        goto label68;

     label71:
        i44 = i44 + 1;

        goto label67;

     label72:
        $d21 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNorm(double[])>(r4);

        $b17 = $d21 cmpg 1.0E-14;

        if $b17 > 0 goto label73;

        $r22 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r23 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r22, r57, r58, d0, d1, d2, i0, i1);

        $d34 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>($r23);

        $d35 = 0.5 * $d34;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _finalSqu> = $d35;

        z22 = 1;

     label73:
        $d31 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d22 = 2.0 * d96;

        $d25 = $d22 - 1.0;

        $d23 = 2.0 * d96;

        $d24 = $d23 - 1.0;

        $d28 = $d25 * $d24;

        $d26 = 2.0 * d96;

        $d27 = $d26 - 1.0;

        $d29 = $d28 * $d27;

        $d30 = 1.0 - $d29;

        $d32 = staticinvoke <java.lang.Math: double max(double,double)>(0.3333333333333333, $d30);

        $d33 = $d31 * $d32;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d33;

        d94 = 2.0;

        goto label75;

     label74:
        $d17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d18 = $d17 * d94;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d18;

        d94 = 2.0 * d94;

     label75:
        if i24 != 10000 goto label76;

        $r17 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: org.slf4j.Logger s_logger>;

        interfaceinvoke $r17.<org.slf4j.Logger: void error(java.lang.String)>("Too Many Iterations");

        $r18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r19 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r18, r57, r58, d0, d1, d2, i0, i1);

        $d19 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>($r19);

        $d20 = 0.5 * $d19;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _finalSqu> = $d20;

     label76:
        goto label34;

     label77:
        return;
    }

    public double getInitialSq()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        $d0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _iniSqu>;

        return $d0;
    }

    public double getFinalSq()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        $d0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _finalSqu>;

        return $d0;
    }

    public double[] getParams()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        return $r1;
    }

    private double getGainRatio(double[], double[], double[], double[], double, double, double, int, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, r4;
        double d0, d1, d2, $d3, $d4, $d5;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        d2 := @parameter6: double;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        $d3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double exactFunctionDiff(double[],double[],double[],double,double,double,int,int)>(r1, r2, r3, d0, d1, d2, i0, i1);

        $d4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double apprxFunctionDiff(double[],double[])>(r1, r4);

        $d5 = $d3 / $d4;

        return $d5;
    }

    private double apprxFunctionDiff(double[], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        d8 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r1[i1];

        $d6 = 0.5 * $d0;

        $d2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d1 = r1[i1];

        $d4 = $d2 * $d1;

        $d3 = r2[i1];

        $d5 = $d4 + $d3;

        $d7 = $d6 * $d5;

        d8 = d8 + $d7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d8;
    }

    private double exactFunctionDiff(double[], double[], double[], double, double, double, int, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, r4, $r5, $r6, r7, r8, r9, r10;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, i3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        i2 = lengthof r1;

        i3 = lengthof r2;

        $r5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r5, r2, r3, d0, d1, d2, i0, i1);

        r7 = newarray (double)[i2];

        r8 = newarray (double)[i3];

        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        r9 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] addVectors(double[],double[])>($r6, r1);

        r10 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>(r9, r2, r3, d0, d1, d2, i0, i1);

        $d3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>(r4);

        $d4 = $d3 / 2.0;

        $d5 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>(r10);

        $d6 = $d5 / 2.0;

        $d7 = $d4 - $d6;

        return $d7;
    }

    private double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, d4, d5, $d7, $d8, $d9, $d10, $d11, $d12, d14;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r2;
        boolean z0;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r3;
        byte $b0, $b1, $b2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction _volfunc>;

        d1 = virtualinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getPrice(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>(r1, d0, r2);

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d4 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        z0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: boolean isCall()>();

        if z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = -1;

     label2:
        $d8 = (double) $b2;

        $d7 = d0 - d2;

        $d9 = $d8 * $d7;

        d5 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $d9);

        d14 = d1 - d5;

        $b0 = d14 cmpg 0.0;

        if $b0 > 0 goto label3;

        d14 = 0.0;

     label3:
        $d10 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2);

        $b1 = d14 cmpl $d10;

        if $b1 < 0 goto label4;

        $d12 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2);

        d14 = 0.99 * $d12;

     label4:
        $d11 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double impliedVolatility(double,double,double,double,double)>(d14, d0, d4, d3, 0.3);

        return $d11;
    }

    private double[] exactFunctionValue(double[], double[], double[], double, double, double, int, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, r4, r5, r7;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData $r8, $r9;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r10, $r11;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        i2 = lengthof r2;

        $i4 = 3 * i0;

        i3 = $i4 - 2;

        r4 = newarray (double)[i3];

        r5 = newarray (double)[i3];

        i26 = 0;

     label01:
        if i26 >= i0 goto label02;

        $d16 = r1[i26];

        r4[i26] = $d16;

        i26 = i26 + 1;

        goto label01;

     label02:
        i27 = 0;

     label03:
        $i5 = i0 - 1;

        if i27 >= $i5 goto label04;

        $i19 = i27 + i0;

        $i17 = 2 * i0;

        $i18 = i27 + $i17;

        $d14 = r1[$i18];

        r4[$i19] = $d14;

        $i20 = 2 * i0;

        $i21 = i27 + $i20;

        $i25 = $i21 - 1;

        $i22 = 3 * i0;

        $i23 = i27 + $i22;

        $i24 = $i23 - 1;

        $d15 = r1[$i24];

        r4[$i25] = $d15;

        i27 = i27 + 1;

        goto label03;

     label04:
        i28 = 0;

     label05:
        if i28 >= i0 goto label06;

        $i16 = i28 + i0;

        $d13 = r1[$i16];

        r5[i28] = $d13;

        i28 = i28 + 1;

        goto label05;

     label06:
        i29 = 0;

     label07:
        $i6 = i0 - 1;

        if i29 >= $i6 goto label08;

        $i9 = i29 + i0;

        $i7 = 2 * i0;

        $i8 = i29 + $i7;

        $d11 = r1[$i8];

        r5[$i9] = $d11;

        $i10 = 2 * i0;

        $i11 = i29 + $i10;

        $i15 = $i11 - 1;

        $i12 = 4 * i0;

        $i13 = i29 + $i12;

        $i14 = $i13 - 2;

        $d12 = r1[$i14];

        r5[$i15] = $d12;

        i29 = i29 + 1;

        goto label07;

     label08:
        $r8 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        specialinvoke $r8.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r4, 1);

        $r9 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        specialinvoke $r9.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r5, 1);

        r7 = newarray (double)[i2];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r7, 0.0);

        i30 = 0;

     label09:
        if i30 >= i1 goto label10;

        $r11 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d7 = r2[i30];

        specialinvoke $r11.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d7, d0, 1);

        $d8 = r3[i30];

        $d9 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r11, d1, $r8);

        $d10 = $d8 - $d9;

        r7[i30] = $d10;

        i30 = i30 + 1;

        goto label09;

     label10:
        i31 = i1;

     label11:
        if i31 >= i2 goto label12;

        $r10 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = r2[i31];

        specialinvoke $r10.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, d0, 1);

        $d4 = r3[i31];

        $d5 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r10, d2, $r9);

        $d6 = $d4 - $d5;

        r7[i31] = $d6;

        i31 = i31 + 1;

        goto label11;

     label12:
        return r7;
    }

    private double[][] exactFunctionDerivative(double[], double[], double, double, double, int, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, r4, r7, r8, r9, r10, r11, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, r32;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, d111, d112;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70;
        double[][] r6, r12, r13, r14, r15;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData $r16, $r17;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r18, $r24;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        i2 = lengthof r2;

        i3 = lengthof r1;

        $i5 = 3 * i0;

        i4 = $i5 - 2;

        r3 = newarray (double)[i4];

        r4 = newarray (double)[i4];

        i52 = 0;

     label01:
        if i52 >= i0 goto label02;

        $d110 = r1[i52];

        r3[i52] = $d110;

        i52 = i52 + 1;

        goto label01;

     label02:
        i53 = 0;

     label03:
        $i6 = i0 - 1;

        if i53 >= $i6 goto label04;

        $i45 = i53 + i0;

        $i43 = 2 * i0;

        $i44 = i53 + $i43;

        $d108 = r1[$i44];

        r3[$i45] = $d108;

        $i46 = 2 * i0;

        $i47 = i53 + $i46;

        $i51 = $i47 - 1;

        $i48 = 3 * i0;

        $i49 = i53 + $i48;

        $i50 = $i49 - 1;

        $d109 = r1[$i50];

        r3[$i51] = $d109;

        i53 = i53 + 1;

        goto label03;

     label04:
        i54 = 0;

     label05:
        if i54 >= i0 goto label06;

        $i42 = i54 + i0;

        $d107 = r1[$i42];

        r4[i54] = $d107;

        i54 = i54 + 1;

        goto label05;

     label06:
        i55 = 0;

     label07:
        $i7 = i0 - 1;

        if i55 >= $i7 goto label08;

        $i35 = i55 + i0;

        $i33 = 2 * i0;

        $i34 = i55 + $i33;

        $d105 = r1[$i34];

        r4[$i35] = $d105;

        $i36 = 2 * i0;

        $i37 = i55 + $i36;

        $i41 = $i37 - 1;

        $i38 = 4 * i0;

        $i39 = i55 + $i38;

        $i40 = $i39 - 2;

        $d106 = r1[$i40];

        r4[$i41] = $d106;

        i55 = i55 + 1;

        goto label07;

     label08:
        $r16 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        specialinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r3, 1);

        $r17 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        specialinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r4, 1);

        r6 = newmultiarray (double)[i2][i3];

        i56 = 0;

     label09:
        if i56 >= i2 goto label10;

        $r30 = r6[i56];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r30, 0.0);

        i56 = i56 + 1;

        goto label09;

     label10:
        r32 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getWeights()>();

        r7 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getWeights()>();

        r8 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r9 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r10 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        r11 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        r12 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getWeightsJacobian()>();

        r13 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getWeightsJacobian()>();

        r14 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getRelativeForwardsJacobian()>();

        r15 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getRelativeForwardsJacobian()>();

        i57 = 0;

     label11:
        if i57 >= i1 goto label24;

        $r24 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d54 = r2[i57];

        specialinvoke $r24.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d54, d0, 1);

        d111 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r24, d1, $r16);

        i58 = 0;

     label12:
        if i58 >= i0 goto label15;

        i59 = i58;

     label13:
        if i59 >= i0 goto label14;

        $r29 = r6[i57];

        $d97 = $r29[i58];

        $d92 = neg d1;

        $d91 = r32[i59];

        $d98 = $d92 * $d91;

        $d96 = r10[i59];

        $d93 = r2[i57];

        $d95 = $d93 / d1;

        $d94 = r8[i59];

        $d99 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>($d96, $d95, d0, $d94);

        $d101 = $d98 * $d99;

        $d100 = r2[i57];

        $d102 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d1, $d100, d0, d111);

        $d103 = $d101 / $d102;

        $d104 = $d97 + $d103;

        $r29[i58] = $d104;

        i59 = i59 + 1;

        goto label13;

     label14:
        i58 = i58 + 1;

        goto label12;

     label15:
        i60 = 2 * i0;

     label16:
        $i23 = 3 * i0;

        $i24 = $i23 - 1;

        if i60 >= $i24 goto label19;

        i61 = 0;

     label17:
        if i61 >= i0 goto label18;

        $r27 = r6[i57];

        $d73 = $r27[i60];

        $d74 = neg d1;

        $d72 = r10[i61];

        $d69 = r2[i57];

        $d71 = $d69 / d1;

        $d70 = r8[i61];

        $d75 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d72, $d71, d0, $d70, 1);

        $d80 = r10[i61];

        $d79 = r10[i61];

        $d76 = r2[i57];

        $d78 = $d76 / d1;

        $d77 = r8[i61];

        $d81 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>($d79, $d78, d0, $d77, 1);

        $d82 = $d80 * $d81;

        $d83 = $d75 - $d82;

        $d85 = $d74 * $d83;

        $r28 = r12[i61];

        $i31 = 2 * i0;

        $i32 = i60 - $i31;

        $d84 = $r28[$i32];

        $d87 = $d85 * $d84;

        $d86 = r2[i57];

        $d88 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d1, $d86, d0, d111);

        $d89 = $d87 / $d88;

        $d90 = $d73 + $d89;

        $r27[i60] = $d90;

        i61 = i61 + 1;

        goto label17;

     label18:
        i60 = i60 + 1;

        goto label16;

     label19:
        $i25 = 3 * i0;

        i62 = $i25 - 1;

     label20:
        $i26 = 4 * i0;

        $i27 = $i26 - 2;

        if i62 >= $i27 goto label23;

        i63 = 0;

     label21:
        if i63 >= i0 goto label22;

        $r25 = r6[i57];

        $d59 = $r25[i62];

        $d60 = neg d1;

        $d58 = r10[i63];

        $d55 = r2[i57];

        $d57 = $d55 / d1;

        $d56 = r8[i63];

        $d61 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>($d58, $d57, d0, $d56, 1);

        $d63 = $d60 * $d61;

        $r26 = r14[i63];

        $i28 = 3 * i0;

        $i29 = $i28 - 1;

        $i30 = i62 - $i29;

        $d62 = $r26[$i30];

        $d65 = $d63 * $d62;

        $d64 = r2[i57];

        $d66 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d1, $d64, d0, d111);

        $d67 = $d65 / $d66;

        $d68 = $d59 + $d67;

        $r25[i62] = $d68;

        i63 = i63 + 1;

        goto label21;

     label22:
        i62 = i62 + 1;

        goto label20;

     label23:
        i57 = i57 + 1;

        goto label11;

     label24:
        i64 = i1;

     label25:
        if i64 >= i2 goto label38;

        $r18 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = r2[i64];

        specialinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, d0, 1);

        d112 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r18, d2, $r17);

        i65 = i0;

     label26:
        $i8 = 2 * i0;

        if i65 >= $i8 goto label29;

        i66 = i65;

     label27:
        $i19 = 2 * i0;

        if i66 >= $i19 goto label28;

        $r23 = r6[i64];

        $d46 = $r23[i65];

        $d41 = neg d2;

        $i20 = i66 - i0;

        $d40 = r7[$i20];

        $d47 = $d41 * $d40;

        $i21 = i66 - i0;

        $d45 = r11[$i21];

        $d42 = r2[i64];

        $d44 = $d42 / d2;

        $i22 = i66 - i0;

        $d43 = r9[$i22];

        $d48 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>($d45, $d44, d0, $d43);

        $d50 = $d47 * $d48;

        $d49 = r2[i64];

        $d51 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d2, $d49, d0, d112);

        $d52 = $d50 / $d51;

        $d53 = $d46 + $d52;

        $r23[i65] = $d53;

        i66 = i66 + 1;

        goto label27;

     label28:
        i65 = i65 + 1;

        goto label26;

     label29:
        i67 = 2 * i0;

     label30:
        $i9 = 3 * i0;

        $i10 = $i9 - 1;

        if i67 >= $i10 goto label33;

        i68 = 0;

     label31:
        if i68 >= i0 goto label32;

        $r21 = r6[i64];

        $d22 = $r21[i67];

        $d23 = neg d2;

        $d21 = r11[i68];

        $d18 = r2[i64];

        $d20 = $d18 / d2;

        $d19 = r9[i68];

        $d24 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d21, $d20, d0, $d19, 1);

        $d29 = r11[i68];

        $d28 = r11[i68];

        $d25 = r2[i64];

        $d27 = $d25 / d2;

        $d26 = r9[i68];

        $d30 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>($d28, $d27, d0, $d26, 1);

        $d31 = $d29 * $d30;

        $d32 = $d24 - $d31;

        $d34 = $d23 * $d32;

        $r22 = r13[i68];

        $i17 = 2 * i0;

        $i18 = i67 - $i17;

        $d33 = $r22[$i18];

        $d36 = $d34 * $d33;

        $d35 = r2[i64];

        $d37 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d2, $d35, d0, d112);

        $d38 = $d36 / $d37;

        $d39 = $d22 + $d38;

        $r21[i67] = $d39;

        i68 = i68 + 1;

        goto label31;

     label32:
        i67 = i67 + 1;

        goto label30;

     label33:
        $i11 = 4 * i0;

        i69 = $i11 - 2;

     label34:
        $i12 = 5 * i0;

        $i13 = $i12 - 3;

        if i69 >= $i13 goto label37;

        i70 = 0;

     label35:
        if i70 >= i0 goto label36;

        $r19 = r6[i64];

        $d8 = $r19[i69];

        $d9 = neg d2;

        $d7 = r11[i70];

        $d4 = r2[i64];

        $d6 = $d4 / d2;

        $d5 = r9[i70];

        $d10 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>($d7, $d6, d0, $d5, 1);

        $d12 = $d9 * $d10;

        $r20 = r15[i70];

        $i14 = 4 * i0;

        $i15 = $i14 - 2;

        $i16 = i69 - $i15;

        $d11 = $r20[$i16];

        $d14 = $d12 * $d11;

        $d13 = r2[i64];

        $d15 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d2, $d13, d0, d112);

        $d16 = $d14 / $d15;

        $d17 = $d8 + $d16;

        $r19[i69] = $d17;

        i70 = i70 + 1;

        goto label35;

     label36:
        i69 = i69 + 1;

        goto label34;

     label37:
        i64 = i64 + 1;

        goto label25;

     label38:
        return r6;
    }

    private double[] theMatrixEqnSolver(double[], double[], double[], double[][], double, double, double, int, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        double[][] r4, r5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        int i0, i1, i2, i4, i5;
        byte $b3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        d2 := @parameter6: double;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        i2 = lengthof r3;

        r5 = newmultiarray (double)[i2][i2];

        i4 = 0;

     label1:
        if i4 >= i2 goto label2;

        $r11 = r4[i4];

        $r12 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r11, i2);

        r5[i4] = $r12;

        i4 = i4 + 1;

        goto label1;

     label2:
        d10 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNorm(double[])>(r3);

        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] _paramsGuess>;

        $r7 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] exactFunctionValue(double[],double[],double[],double,double,double,int,int)>($r6, r1, r2, d0, d1, d2, i0, i1);

        $d4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double getVecNormSq(double[])>($r7);

        d3 = 0.01 * $d4;

        $b3 = d10 cmpg d3;

        if $b3 > 0 goto label3;

        $d8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d9 = 0.001 * $d8;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift> = $d9;

     label3:
        i5 = 0;

     label4:
        if i5 >= i2 goto label5;

        $r10 = r5[i5];

        $r9 = r5[i5];

        $d6 = $r9[i5];

        $d5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double _shift>;

        $d7 = $d6 + $d5;

        $r10[i5] = $d7;

        i5 = i5 + 1;

        goto label4;

     label5:
        $r8 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] decompSol(double[][],double[])>(r5, r3);

        return $r8;
    }

    protected double[] decompSol(double[][], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[][] r1, r4, r5;
        double[] r2, r6, $r17, $r18;
        com.opengamma.analytics.math.linearalgebra.LUDecompositionResult r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r10, $r11, $r13;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r8;
        java.lang.Object $r9;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r14, $r16;
        com.opengamma.analytics.math.matrix.Matrix $r15;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        $r8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: com.opengamma.analytics.math.linearalgebra.Decomposition _luObj>;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r1);

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>($r7);

        r3 = (com.opengamma.analytics.math.linearalgebra.LUDecompositionResult) $r9;

        $r10 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getL()>();

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r11 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getU()>();

        r5 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        $r13 = interfaceinvoke r3.<com.opengamma.analytics.math.linearalgebra.LUDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getP()>();

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        $r15 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r13, $r14);

        $r16 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r15;

        r6 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r17 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] forwardSubstitution(double[][],double[])>(r4, r6);

        $r18 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double[] backSubstitution(double[][],double[])>(r5, $r17);

        return $r18;
    }

    private double[] forwardSubstitution(double[][], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[][] r1;
        double[] r2, r3, $r4, $r5, $r6;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $d1 = r2[i1];

        $r4 = r1[i1];

        $d0 = $r4[i1];

        d7 = $d1 / $d0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r5 = r1[i1];

        $d3 = $r5[i2];

        $d2 = r3[i2];

        $d5 = $d3 * $d2;

        $r6 = r1[i1];

        $d4 = $r6[i1];

        $d6 = $d5 / $d4;

        d7 = d7 - $d6;

        i2 = i2 + 1;

        goto label2;

     label3:
        r3[i1] = d7;

        i1 = i1 + 1;

        goto label1;

     label4:
        return r3;
    }

    private double[] backSubstitution(double[][], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[][] r1;
        double[] r2, r3, $r4, $r5, $r6;
        int i0, i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = i0 - 1;

     label1:
        if i1 <= -1 goto label4;

        $d1 = r2[i1];

        $r4 = r1[i1];

        $d0 = $r4[i1];

        d7 = $d1 / $d0;

        i2 = i1 + 1;

     label2:
        if i2 >= i0 goto label3;

        $r5 = r1[i1];

        $d3 = $r5[i2];

        $d2 = r3[i2];

        $d5 = $d3 * $d2;

        $r6 = r1[i1];

        $d4 = $r6[i1];

        $d6 = $d5 / $d4;

        d7 = d7 - $d6;

        i2 = i2 + 1;

        goto label2;

     label3:
        r3[i1] = d7;

        i1 = i1 + -1;

        goto label1;

     label4:
        return r3;
    }

    private double getVecNorm(double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1;
        int i0, i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        d4 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d2 = r1[i1];

        $d1 = r1[i1];

        $d3 = $d2 * $d1;

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        return $d0;
    }

    private double getVecNormSq(double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1;
        int i0, i1;
        double $d0, $d1, $d2, d3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        d3 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r1[i1];

        $d0 = r1[i1];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d3;
    }

    private double[] addVectors(double[], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter r0;
        double[] r1, r2, r3;
        int i0, i1;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r1[i1];

        $d0 = r2[i1];

        $d2 = $d1 + $d0;

        r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double TAU> = 0.001;

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double EPS_2> = 1.0E-14;

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: double EPS_1> = 1.0E-14;

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: int ITRMAX> = 10000;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/model/volatility/smile/fitting/MixedBivariateLogNormalFitter");

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.MixedBivariateLogNormalFitter: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
