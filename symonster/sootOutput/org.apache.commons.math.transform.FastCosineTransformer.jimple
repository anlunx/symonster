public class org.apache.commons.math.transform.FastCosineTransformer extends java.lang.Object implements org.apache.commons.math.transform.RealTransformer
{

    public void <init>()
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[] transform(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        double[] r1, $r2;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r1);

        return $r2;
    }

    public double[] transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1;
        int i0;
        double[] r2, $r3;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r2);

        return $r3;
    }

    public double[] transform2(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        double[] r1, $r2, $r3;
        double d0, $d1, $d2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $i1 = $i0 - 1;

        $d1 = (double) $i1;

        $d2 = 2.0 / $d1;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d2);

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r1);

        $r3 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] scaleArray(double[],double)>($r2, d0);

        return $r3;
    }

    public double[] transform2(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4;
        int i0, $i1;
        double[] r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $i1 = i0 - 1;

        $d3 = (double) $i1;

        $d4 = 2.0 / $d3;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d4);

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r2);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] scaleArray(double[],double)>($r3, d2);

        return $r4;
    }

    public double[] inversetransform(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        double[] r1, $r2, $r3;
        double d0, $d1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $i1 = $i0 - 1;

        $d1 = (double) $i1;

        d0 = 2.0 / $d1;

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r1);

        $r3 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] scaleArray(double[],double)>($r2, d0);

        return $r3;
    }

    public double[] inversetransform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3;
        int i0, $i1;
        double[] r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $i1 = i0 - 1;

        $d3 = (double) $i1;

        d2 = 2.0 / $d3;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] fct(double[])>(r2);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] scaleArray(double[],double)>($r3, d2);

        return $r4;
    }

    public double[] inversetransform2(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        double[] r1, $r2;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] transform2(double[])>(r1);

        return $r2;
    }

    public double[] inversetransform2(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1;
        int i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastCosineTransformer: double[] transform2(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        return $r2;
    }

    protected double[] fct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastCosineTransformer r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, d45, d46;
        long $l3;
        boolean $z0;
        org.apache.commons.math.transform.FastFourierTransformer $r4;
        org.apache.commons.math.complex.Complex $r5, $r6, $r7, $r8;
        java.lang.Object[] $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11;
        java.lang.IllegalArgumentException $r12;
        org.apache.commons.math.complex.Complex[] r14;

        r0 := @this: org.apache.commons.math.transform.FastCosineTransformer;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        r2 = newarray (double)[$i1];

        $i2 = lengthof r1;

        i0 = $i2 - 1;

        $l3 = (long) i0;

        $z0 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: boolean isPowerOf2(long)>($l3);

        if $z0 != 0 goto label1;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POWER_OF_TWO_PLUS_ONE>;

        $r9 = newarray (java.lang.Object)[1];

        $i18 = lengthof r1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r9[0] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r12;

     label1:
        if i0 != 1 goto label2;

        $d38 = r1[0];

        $d37 = r1[1];

        $d39 = $d38 + $d37;

        $d40 = 0.5 * $d39;

        r2[0] = $d40;

        $d42 = r1[0];

        $d41 = r1[1];

        $d43 = $d42 - $d41;

        $d44 = 0.5 * $d43;

        r2[1] = $d44;

        return r2;

     label2:
        r3 = newarray (double)[i0];

        $d3 = r1[0];

        $d2 = r1[i0];

        $d4 = $d3 + $d2;

        $d5 = 0.5 * $d4;

        r3[0] = $d5;

        $i5 = i0 >> 1;

        $i4 = i0 >> 1;

        $d6 = r1[$i4];

        r3[$i5] = $d6;

        $d8 = r1[0];

        $d7 = r1[i0];

        $d9 = $d8 - $d7;

        d45 = 0.5 * $d9;

        i19 = 1;

     label3:
        $i6 = i0 >> 1;

        if i19 >= $i6 goto label4;

        $d17 = r1[i19];

        $i14 = i0 - i19;

        $d16 = r1[$i14];

        $d18 = $d17 + $d16;

        d46 = 0.5 * $d18;

        $d19 = (double) i19;

        $d21 = $d19 * 3.141592653589793;

        $d20 = (double) i0;

        $d22 = $d21 / $d20;

        $d23 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>($d22);

        $d25 = r1[i19];

        $i15 = i0 - i19;

        $d24 = r1[$i15];

        $d26 = $d25 - $d24;

        d0 = $d23 * $d26;

        $d27 = (double) i19;

        $d29 = $d27 * 3.141592653589793;

        $d28 = (double) i0;

        $d30 = $d29 / $d28;

        $d31 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>($d30);

        $d33 = r1[i19];

        $i16 = i0 - i19;

        $d32 = r1[$i16];

        $d34 = $d33 - $d32;

        d1 = $d31 * $d34;

        $d35 = d46 - d0;

        r3[i19] = $d35;

        $i17 = i0 - i19;

        $d36 = d46 + d0;

        r3[$i17] = $d36;

        d45 = d45 + d1;

        i19 = i19 + 1;

        goto label3;

     label4:
        $r4 = new org.apache.commons.math.transform.FastFourierTransformer;

        specialinvoke $r4.<org.apache.commons.math.transform.FastFourierTransformer: void <init>()>();

        r14 = virtualinvoke $r4.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] transform(double[])>(r3);

        $r5 = r14[0];

        $d10 = virtualinvoke $r5.<org.apache.commons.math.complex.Complex: double getReal()>();

        r2[0] = $d10;

        r2[1] = d45;

        i20 = 1;

     label5:
        $i7 = i0 >> 1;

        if i20 >= $i7 goto label6;

        $i9 = 2 * i20;

        $r7 = r14[i20];

        $d12 = virtualinvoke $r7.<org.apache.commons.math.complex.Complex: double getReal()>();

        r2[$i9] = $d12;

        $i10 = 2 * i20;

        $i13 = $i10 + 1;

        $i11 = 2 * i20;

        $i12 = $i11 - 1;

        $d13 = r2[$i12];

        $r8 = r14[i20];

        $d14 = virtualinvoke $r8.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d15 = $d13 - $d14;

        r2[$i13] = $d15;

        i20 = i20 + 1;

        goto label5;

     label6:
        $i8 = i0 >> 1;

        $r6 = r14[$i8];

        $d11 = virtualinvoke $r6.<org.apache.commons.math.complex.Complex: double getReal()>();

        r2[i0] = $d11;

        return r2;
    }
}
