class org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction extends java.lang.Object
{
    private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f;
    final org.apache.commons.math3.fitting.CurveFitter this$0;

    public void <init>(org.apache.commons.math3.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction)
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.fitting.CurveFitter r1;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: org.apache.commons.math3.fitting.CurveFitter;

        r2 := @parameter1: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.fitting.CurveFitter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f> = r2;

        return;
    }

    public org.apache.commons.math3.optim.nonlinear.vector.ModelFunction getModelFunction()
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.optim.nonlinear.vector.ModelFunction $r1;
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1 $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        $r1 = new org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;

        $r2 = new org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1;

        specialinvoke $r2.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1: void <init>(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)>(r0);

        specialinvoke $r1.<org.apache.commons.math3.optim.nonlinear.vector.ModelFunction: void <init>(org.apache.commons.math3.analysis.MultivariateVectorFunction)>($r2);

        return $r1;
    }

    public org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian getModelFunctionJacobian()
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian $r1;
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2 $r2;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        $r1 = new org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;

        $r2 = new org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2;

        specialinvoke $r2.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2: void <init>(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)>(r0);

        specialinvoke $r1.<org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian: void <init>(org.apache.commons.math3.analysis.MultivariateMatrixFunction)>($r2);

        return $r1;
    }

    static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r1;

        r0 := @parameter0: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        $r1 = r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        return $r1;
    }
}
