public abstract class org.apache.commons.math.ode.AbstractIntegrator extends java.lang.Object implements org.apache.commons.math.ode.FirstOrderIntegrator
{
    protected java.util.Collection stepHandlers;
    protected double stepStart;
    protected double stepSize;
    protected boolean isLastStep;
    protected boolean resetOccurred;
    private java.util.Collection eventsStates;
    private boolean statesInitialized;
    private final java.lang.String name;
    private int maxEvaluations;
    private int evaluations;
    private transient org.apache.commons.math.ode.FirstOrderDifferentialEquations equations;

    public void <init>(java.lang.String)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.lang.String r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.AbstractIntegrator: java.lang.String name> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers> = $r2;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: double stepStart> = #NaN;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: double stepSize> = #NaN;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates> = $r3;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean statesInitialized> = 0;

        virtualinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void setMaxEvaluations(int)>(-1);

        virtualinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void resetEvaluations()>();

        return;
    }

    protected void <init>()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        specialinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void <init>(java.lang.String)>(null);

        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.lang.String name>;

        return $r1;
    }

    public void addStepHandler(org.apache.commons.math.ode.sampling.StepHandler)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        org.apache.commons.math.ode.sampling.StepHandler r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepHandler;

        $r2 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Collection getStepHandlers()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public void clearStepHandlers()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public void addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        org.apache.commons.math.ode.events.EventHandler r1;
        double d0, d1;
        int i0;
        org.apache.commons.math.ode.events.EventState $r2;
        java.util.Collection $r3;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.events.EventHandler;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        $r3 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        $r2 = new org.apache.commons.math.ode.events.EventState;

        specialinvoke $r2.<org.apache.commons.math.ode.events.EventState: void <init>(org.apache.commons.math.ode.events.EventHandler,double,double,int)>(r1, d0, d1, i0);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        return;
    }

    public java.util.Collection getEventHandlers()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.util.Iterator r2;
        org.apache.commons.math.ode.events.EventState r3;
        java.util.ArrayList $r4;
        java.util.Collection $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.commons.math.ode.events.EventHandler $r8;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.ode.events.EventState) $r7;

        $r8 = virtualinvoke r3.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler getEventHandler()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r4);

        return $r6;
    }

    public void clearEventHandlers()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r1 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    protected boolean requiresDenseOutput()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        java.util.Iterator r1;
        org.apache.commons.math.ode.sampling.StepHandler r2;
        java.util.Collection $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $r3 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r4 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.ode.sampling.StepHandler) $r5;

        $z2 = interfaceinvoke r2.<org.apache.commons.math.ode.sampling.StepHandler: boolean requiresDenseOutput()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public double getCurrentStepStart()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: double stepStart>;

        return $d0;
    }

    public double getCurrentSignedStepsize()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: double stepSize>;

        return $d0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        int i0, $i1;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = 2147483647;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        r0.<org.apache.commons.math.ode.AbstractIntegrator: int maxEvaluations> = $i1;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $i0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        $i0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: int evaluations>;

        return $i0;
    }

    protected void resetEvaluations()
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: int evaluations> = 0;

        return;
    }

    protected void setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: org.apache.commons.math.ode.FirstOrderDifferentialEquations equations> = r1;

        return;
    }

    public void computeDerivatives(double, double[], double[]) throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        double d0;
        double[] r1, r2;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations $r3;
        org.apache.commons.math.ode.DerivativeException $r4;
        org.apache.commons.math.MaxEvaluationsExceededException $r5;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $i0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: int evaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.ode.AbstractIntegrator: int maxEvaluations>;

        if $i1 <= $i2 goto label1;

        $r4 = new org.apache.commons.math.ode.DerivativeException;

        $r5 = new org.apache.commons.math.MaxEvaluationsExceededException;

        $i3 = r0.<org.apache.commons.math.ode.AbstractIntegrator: int maxEvaluations>;

        specialinvoke $r5.<org.apache.commons.math.MaxEvaluationsExceededException: void <init>(int)>($i3);

        specialinvoke $r4.<org.apache.commons.math.ode.DerivativeException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.commons.math.ode.AbstractIntegrator: org.apache.commons.math.ode.FirstOrderDifferentialEquations equations>;

        interfaceinvoke $r3.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>(d0, r1, r2);

        return;
    }

    protected void setStateInitialized(boolean)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        boolean z0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean statesInitialized> = z0;

        return;
    }

    protected double acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator, double[], double[], double) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        org.apache.commons.math.ode.sampling.AbstractStepInterpolator r1;
        double[] r2, r3, r5, r35;
        double d0, d1, d2, d3;
        java.lang.Throwable r4;
        java.util.Iterator r6, r28, r31, r33, r36, r38;
        org.apache.commons.math.ode.sampling.StepHandler r7, r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z18, $z19, $z20, $z21, $z22, $z23;
        java.util.TreeSet $r8;
        org.apache.commons.math.ode.AbstractIntegrator$1 $r9;
        java.util.Collection $r10, $r11, $r12, $r18, $r21;
        java.lang.Object $r13, $r15, $r17, $r19, $r20, $r22;
        int $i0, $i1;
        org.apache.commons.math.ConvergenceException $r23;
        org.apache.commons.math.ode.IntegratorException $r24, $r26;
        org.apache.commons.math.ode.events.EventException $r25;
        org.apache.commons.math.ode.DerivativeException $r27;
        org.apache.commons.math.ode.events.EventState r29, r32, r34, r37;
        byte $b2;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.AbstractStepInterpolator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        d0 := @parameter3: double;

     label01:
        d2 = virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: double getGlobalPreviousTime()>();

        d1 = virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: double getGlobalCurrentTime()>();

        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean resetOccurred> = 0;

        $z0 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean statesInitialized>;

        if $z0 != 0 goto label04;

        $r21 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r28 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z18 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label03;

        $r22 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.commons.math.ode.events.EventState) $r22;

        virtualinvoke r29.<org.apache.commons.math.ode.events.EventState: void reinitializeBegin(org.apache.commons.math.ode.sampling.StepInterpolator)>(r1);

        goto label02;

     label03:
        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean statesInitialized> = 1;

     label04:
        $z1 = virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: boolean isForward()>();

        if $z1 == 0 goto label05;

        $b2 = 1;

        goto label06;

     label05:
        $b2 = -1;

     label06:
        $r8 = new java.util.TreeSet;

        $r9 = new org.apache.commons.math.ode.AbstractIntegrator$1;

        specialinvoke $r9.<org.apache.commons.math.ode.AbstractIntegrator$1: void <init>(org.apache.commons.math.ode.AbstractIntegrator,int)>(r0, $b2);

        specialinvoke $r8.<java.util.TreeSet: void <init>(java.util.Comparator)>($r9);

        $r10 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z20 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label09;

        $r20 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.apache.commons.math.ode.events.EventState) $r20;

        $z16 = virtualinvoke r32.<org.apache.commons.math.ode.events.EventState: boolean evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator)>(r1);

        if $z16 == 0 goto label08;

        interfaceinvoke $r8.<java.util.SortedSet: boolean add(java.lang.Object)>(r32);

     label08:
        goto label07;

     label09:
        $z2 = interfaceinvoke $r8.<java.util.SortedSet: boolean isEmpty()>();

        if $z2 != 0 goto label17;

        r33 = interfaceinvoke $r8.<java.util.SortedSet: java.util.Iterator iterator()>();

        $r17 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.commons.math.ode.events.EventState) $r17;

        interfaceinvoke r33.<java.util.Iterator: void remove()>();

        d3 = virtualinvoke r34.<org.apache.commons.math.ode.events.EventState: double getEventTime()>();

        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setSoftPreviousTime(double)>(d2);

        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setSoftCurrentTime(double)>(d3);

        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d3);

        r5 = virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r34.<org.apache.commons.math.ode.events.EventState: void stepAccepted(double,double[])>(d3, r5);

        $z9 = virtualinvoke r34.<org.apache.commons.math.ode.events.EventState: boolean stop()>();

        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep> = $z9;

        $r18 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r6 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z10 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label11;

        $r19 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math.ode.sampling.StepHandler) $r19;

        $z15 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep>;

        interfaceinvoke r7.<org.apache.commons.math.ode.sampling.StepHandler: void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator,boolean)>(r1, $z15);

        goto label10;

     label11:
        $z11 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep>;

        if $z11 == 0 goto label13;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r2, 0, $i1);

     label12:
        return d3;

     label13:
        $z12 = virtualinvoke r34.<org.apache.commons.math.ode.events.EventState: boolean reset(double,double[])>(d3, r5);

        if $z12 == 0 goto label15;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r2, 0, $i0);

        virtualinvoke r0.<org.apache.commons.math.ode.AbstractIntegrator: void computeDerivatives(double,double[],double[])>(d3, r2, r3);

        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean resetOccurred> = 1;

     label14:
        return d3;

     label15:
        d2 = d3;

        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setSoftPreviousTime(double)>(d3);

        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setSoftCurrentTime(double)>(d1);

        $z13 = virtualinvoke r34.<org.apache.commons.math.ode.events.EventState: boolean evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator)>(r1);

        if $z13 == 0 goto label16;

        interfaceinvoke $r8.<java.util.SortedSet: boolean add(java.lang.Object)>(r34);

     label16:
        goto label09;

     label17:
        virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d1);

        r35 = virtualinvoke r1.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: double[] getInterpolatedState()>();

        $r11 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection eventsStates>;

        r36 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label18:
        $z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label22;

        $r15 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.apache.commons.math.ode.events.EventState) $r15;

        virtualinvoke r37.<org.apache.commons.math.ode.events.EventState: void stepAccepted(double,double[])>(d1, r35);

        $z7 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep>;

        if $z7 != 0 goto label19;

        $z8 = virtualinvoke r37.<org.apache.commons.math.ode.events.EventState: boolean stop()>();

        if $z8 == 0 goto label20;

     label19:
        $z21 = 1;

        goto label21;

     label20:
        $z21 = 0;

     label21:
        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep> = $z21;

        goto label18;

     label22:
        $z4 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep>;

        if $z4 != 0 goto label23;

        $z6 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double,int)>(d1, d0, 1);

        if $z6 == 0 goto label24;

     label23:
        $z22 = 1;

        goto label25;

     label24:
        $z22 = 0;

     label25:
        r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep> = $z22;

        $r12 = r0.<org.apache.commons.math.ode.AbstractIntegrator: java.util.Collection stepHandlers>;

        r38 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label26:
        $z23 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z23 == 0 goto label27;

        $r13 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.apache.commons.math.ode.sampling.StepHandler) $r13;

        $z5 = r0.<org.apache.commons.math.ode.AbstractIntegrator: boolean isLastStep>;

        interfaceinvoke r39.<org.apache.commons.math.ode.sampling.StepHandler: void handleStep(org.apache.commons.math.ode.sampling.StepInterpolator,boolean)>(r1, $z5);

        goto label26;

     label27:
        return d1;

     label28:
        $r25 := @caughtexception;

        r4 = virtualinvoke $r25.<org.apache.commons.math.ode.events.EventException: java.lang.Throwable getCause()>();

        if r4 == null goto label29;

        $z19 = r4 instanceof org.apache.commons.math.ode.DerivativeException;

        if $z19 == 0 goto label29;

        $r27 = (org.apache.commons.math.ode.DerivativeException) r4;

        throw $r27;

     label29:
        $r26 = new org.apache.commons.math.ode.IntegratorException;

        specialinvoke $r26.<org.apache.commons.math.ode.IntegratorException: void <init>(java.lang.Throwable)>($r25);

        throw $r26;

     label30:
        $r23 := @caughtexception;

        $r24 = new org.apache.commons.math.ode.IntegratorException;

        specialinvoke $r24.<org.apache.commons.math.ode.IntegratorException: void <init>(java.lang.Throwable)>($r23);

        throw $r24;

        catch org.apache.commons.math.ode.events.EventException from label01 to label12 with label28;
        catch org.apache.commons.math.ode.events.EventException from label13 to label14 with label28;
        catch org.apache.commons.math.ode.events.EventException from label15 to label27 with label28;
        catch org.apache.commons.math.ConvergenceException from label01 to label12 with label30;
        catch org.apache.commons.math.ConvergenceException from label13 to label14 with label30;
        catch org.apache.commons.math.ConvergenceException from label15 to label27 with label30;
    }

    protected void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        double[] r2, r3;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8;
        byte $b4;
        org.apache.commons.math.ode.IntegratorException $r4, $r8, $r13;
        java.lang.Object[] $r5, $r9, $r14;
        org.apache.commons.math.exception.util.LocalizedFormats $r6, $r10, $r15;
        java.lang.Double $r7;
        java.lang.Integer $r11, $r12, $r16, $r17;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        $i0 = interfaceinvoke r1.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $i1 = lengthof r2;

        if $i0 == $i1 goto label1;

        $r13 = new org.apache.commons.math.ode.IntegratorException;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r14 = newarray (java.lang.Object)[2];

        $i7 = interfaceinvoke r1.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r14[0] = $r16;

        $i8 = lengthof r2;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r14[1] = $r17;

        specialinvoke $r13.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

     label1:
        $i2 = interfaceinvoke r1.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $i3 = lengthof r3;

        if $i2 == $i3 goto label2;

        $r8 = new org.apache.commons.math.ode.IntegratorException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r9 = newarray (java.lang.Object)[2];

        $i5 = interfaceinvoke r1.<org.apache.commons.math.ode.FirstOrderDifferentialEquations: int getDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r9[0] = $r11;

        $i6 = lengthof r3;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r9[1] = $r12;

        specialinvoke $r8.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label2:
        $d2 = d1 - d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d4, $d5);

        $d7 = 1.0E-12 * $d6;

        $b4 = $d3 cmpg $d7;

        if $b4 > 0 goto label3;

        $r4 = new org.apache.commons.math.ode.IntegratorException;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TOO_SMALL_INTEGRATION_INTERVAL>;

        $r5 = newarray (java.lang.Object)[1];

        $d8 = d1 - d0;

        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d8);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r5[0] = $r7;

        specialinvoke $r4.<org.apache.commons.math.ode.IntegratorException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label3:
        return;
    }

    protected org.apache.commons.math.ode.events.CombinedEventsManager addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager)
    {
        org.apache.commons.math.ode.AbstractIntegrator r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math.ode.events.CombinedEventsManager r1, $r5;
        java.util.Iterator r3;
        org.apache.commons.math.ode.events.EventState r4;
        java.util.Collection $r6;
        boolean $z0;
        org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker $r7;
        java.lang.Object $r8;
        org.apache.commons.math.ode.events.EventHandler $r9;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.AbstractIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math.ode.events.CombinedEventsManager;

        $r5 = new org.apache.commons.math.ode.events.CombinedEventsManager;

        specialinvoke $r5.<org.apache.commons.math.ode.events.CombinedEventsManager: void <init>()>();

        $r6 = virtualinvoke r1.<org.apache.commons.math.ode.events.CombinedEventsManager: java.util.Collection getEventsStates()>();

        r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math.ode.events.EventState) $r8;

        $r9 = virtualinvoke r4.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler getEventHandler()>();

        $d6 = virtualinvoke r4.<org.apache.commons.math.ode.events.EventState: double getMaxCheckInterval()>();

        $d7 = virtualinvoke r4.<org.apache.commons.math.ode.events.EventState: double getConvergence()>();

        $i0 = virtualinvoke r4.<org.apache.commons.math.ode.events.EventState: int getMaxIterationCount()>();

        virtualinvoke $r5.<org.apache.commons.math.ode.events.CombinedEventsManager: void addEventHandler(org.apache.commons.math.ode.events.EventHandler,double,double,int)>($r9, $d6, $d7, $i0);

        goto label1;

     label2:
        $r7 = new org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker;

        specialinvoke $r7.<org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker: void <init>(double)>(d1);

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d2, $d3);

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double ulp(double)>($d4);

        virtualinvoke $r5.<org.apache.commons.math.ode.events.CombinedEventsManager: void addEventHandler(org.apache.commons.math.ode.events.EventHandler,double,double,int)>($r7, #Infinity, $d5, 100);

        return $r5;
    }
}
