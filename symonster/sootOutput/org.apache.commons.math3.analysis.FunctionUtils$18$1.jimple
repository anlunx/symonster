class org.apache.commons.math3.analysis.FunctionUtils$18$1 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateMatrixFunction
{
    final org.apache.commons.math3.analysis.FunctionUtils$18 this$0;

    void <init>(org.apache.commons.math3.analysis.FunctionUtils$18)
    {
        org.apache.commons.math3.analysis.FunctionUtils$18$1 r0;
        org.apache.commons.math3.analysis.FunctionUtils$18 r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$18$1;

        r1 := @parameter0: org.apache.commons.math3.analysis.FunctionUtils$18;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$18$1: org.apache.commons.math3.analysis.FunctionUtils$18 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[][] value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$18$1 r0;
        double[] r1, $r8;
        int i0, $i1, $i2, i3, i4, i5;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2, r10;
        double[][] r3;
        int[] r4;
        org.apache.commons.math3.analysis.FunctionUtils$18 $r5;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction $r6;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r7, $r9;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$18$1;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r9 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = r1[i3];

        specialinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(i0, 1, i3, $d1);

        r2[i3] = $r9;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.analysis.FunctionUtils$18$1: org.apache.commons.math3.analysis.FunctionUtils$18 this$0>;

        $r6 = $r5.<org.apache.commons.math3.analysis.FunctionUtils$18: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction val$f>;

        r10 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $i1 = lengthof r10;

        r3 = newmultiarray (double)[$i1][i0];

        r4 = newarray (int)[i0];

        i4 = 0;

     label3:
        $i2 = lengthof r10;

        if i4 >= $i2 goto label6;

        i5 = 0;

     label4:
        if i5 >= i0 goto label5;

        r4[i5] = 1;

        $r8 = r3[i4];

        $r7 = r10[i4];

        $d0 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        $r8[i5] = $d0;

        r4[i5] = 0;

        i5 = i5 + 1;

        goto label4;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        return r3;
    }
}
