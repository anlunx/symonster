public class com.opengamma.analytics.math.interpolation.CubicSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.CubicSplineInterpolator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineInterpolator r0;
        double[] r1, r2, $r12, $r14, r16, r17, r18, r19;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i15, i16, i17, i18, i19, $i20, $i21, i22;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver $r6;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r7, $r9, $r20;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r21;
        double[][] $r11, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver $r15;
        byte $b13;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $i6 = lengthof r2;

        if $i7 != $i6 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i14 = lengthof r1;

        if $i14 <= 1 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i15 = 0;

     label07:
        if i15 >= i0 goto label08;

        $d8 = r1[i15];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d8);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xData containing NaN");

        $d9 = r1[i15];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xData containing Infinity");

        i15 = i15 + 1;

        goto label07;

     label08:
        i16 = 0;

     label09:
        if i16 >= i1 goto label10;

        $d6 = r2[i16];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yData containing NaN");

        $d7 = r2[i16];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yData containing Infinity");

        i16 = i16 + 1;

        goto label09;

     label10:
        i17 = 0;

     label11:
        if i17 >= i0 goto label16;

        i18 = i17 + 1;

     label12:
        if i18 >= i0 goto label15;

        $d5 = r1[i17];

        $d4 = r1[i18];

        $b13 = $d5 cmpl $d4;

        if $b13 != 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "Data should be distinct");

        i18 = i18 + 1;

        goto label12;

     label15:
        i17 = i17 + 1;

        goto label11;

     label16:
        r16 = newarray (double)[i0];

        r17 = newarray (double)[i0];

        r18 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $i8 = lengthof r1;

        $i10 = $i8 + 2;

        $i9 = lengthof r2;

        if $i10 != $i9 goto label17;

        $r15 = new com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver;

        $d3 = r2[0];

        $i11 = i0 + 1;

        $d2 = r2[$i11];

        specialinvoke $r15.<com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver: void <init>(double,double)>($d3, $d2);

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r15;

        $i12 = i0 + 1;

        r19 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i12);

        goto label18;

     label17:
        $r6 = new com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        specialinvoke $r6.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r6;

        r19 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

     label18:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r18, r19);

        $r7 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        r3 = virtualinvoke $r7.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r18, r19);

        i2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i19 = 0;

     label19:
        $r20 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r18);

        $i20 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i21 = $i20 - 1;

        if i19 >= $i21 goto label22;

        i22 = 0;

     label20:
        if i22 >= i2 goto label21;

        $r11 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = $r11[i19];

        $d0 = $r12[i22];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r14 = $r13[i19];

        $d1 = $r14[i22];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i22 = i22 + 1;

        goto label20;

     label21:
        i19 = i19 + 1;

        goto label19;

     label22:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r9 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r18);

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r10, r3, i2, 1);

        return $r8;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineInterpolator r0;
        double[] r1, $r5, $r6, $r7, $r8, $r18, $r19, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, r32, r34, r35, r36, r37;
        double[][] r2, r33, r39;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33;
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10, $r12, $r13, $r17, $r20;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r11, $r15;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r16, $r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver $r25;
        byte $b17;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r38;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r5 = r2[0];

        $i3 = lengthof $r5;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $r6 = r2[0];

        $i6 = lengthof $r6;

        if $i7 != $i6 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValuesMatrix\'s row vector length) or (xValues length + 2 = yValuesMatrix\'s row vector length)");

        $i18 = lengthof r1;

        if $i18 <= 1 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 1");

        i0 = lengthof r1;

        $r7 = r2[0];

        i1 = lengthof $r7;

        i2 = lengthof r2;

        i19 = 0;

     label07:
        if i19 >= i0 goto label08;

        $d8 = r1[i19];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d8);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xData containing NaN");

        $d9 = r1[i19];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d9);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xData containing Infinity");

        i19 = i19 + 1;

        goto label07;

     label08:
        i20 = 0;

     label09:
        if i20 >= i1 goto label12;

        i21 = 0;

     label10:
        if i21 >= i2 goto label11;

        $r30 = r2[i21];

        $d6 = $r30[i20];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValuesMatrix containing NaN");

        $r31 = r2[i21];

        $d7 = $r31[i20];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing Infinity");

        i21 = i21 + 1;

        goto label10;

     label11:
        i20 = i20 + 1;

        goto label09;

     label12:
        i22 = 0;

     label13:
        if i22 >= i2 goto label20;

        i23 = 0;

     label14:
        if i23 >= i0 goto label19;

        i24 = i23 + 1;

     label15:
        if i24 >= i0 goto label18;

        $d5 = r1[i23];

        $d4 = r1[i24];

        $b17 = $d5 cmpl $d4;

        if $b17 != 0 goto label16;

        $z10 = 1;

        goto label17;

     label16:
        $z10 = 0;

     label17:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "Data should be distinct");

        i24 = i24 + 1;

        goto label15;

     label18:
        i23 = i23 + 1;

        goto label14;

     label19:
        i22 = i22 + 1;

        goto label13;

     label20:
        r32 = newarray (double)[i0];

        r33 = newmultiarray (double)[i2][i0];

        $i8 = lengthof r1;

        $i10 = $i8 + 2;

        $r8 = r2[0];

        $i9 = lengthof $r8;

        if $i10 != $i9 goto label25;

        r34 = newarray (double)[i2];

        r35 = newarray (double)[i2];

        i25 = 0;

     label21:
        if i25 >= i2 goto label22;

        $r28 = r2[i25];

        $d2 = $r28[0];

        r34[i25] = $d2;

        $r29 = r2[i25];

        $i16 = i0 + 1;

        $d3 = $r29[$i16];

        r35[i25] = $d3;

        i25 = i25 + 1;

        goto label21;

     label22:
        $r25 = new com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver;

        specialinvoke $r25.<com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver: void <init>(double[],double[])>(r34, r35);

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r25;

        i26 = 0;

     label23:
        if i26 >= i2 goto label24;

        r32 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r26 = r2[i26];

        $i15 = i0 + 1;

        r36 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r26, 1, $i15);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r32, r36);

        $r27 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r36, i0);

        r33[i26] = $r27;

        i26 = i26 + 1;

        goto label23;

     label24:
        goto label27;

     label25:
        $r9 = new com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r9;

        i27 = 0;

     label26:
        if i27 >= i2 goto label27;

        r32 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r23 = r2[i27];

        r37 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r23, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r32, r37);

        $r24 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r37, i0);

        r33[i27] = $r24;

        i27 = i27 + 1;

        goto label26;

     label27:
        $r11 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r33);

        r38 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[],com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r32, $r10);

        $r12 = r38[0];

        i28 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r13 = r38[0];

        i29 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i11 = i2 * i28;

        r39 = newmultiarray (double)[$i11][i29];

        i30 = 0;

     label28:
        if i30 >= i28 goto label31;

        i31 = 0;

     label29:
        if i31 >= i2 goto label30;

        $i13 = i2 * i30;

        $i14 = $i13 + i31;

        $r20 = r38[i31];

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i30);

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r39[$i14] = $r22;

        i31 = i31 + 1;

        goto label29;

     label30:
        i30 = i30 + 1;

        goto label28;

     label31:
        i32 = 0;

     label32:
        $i12 = i2 * i28;

        if i32 >= $i12 goto label35;

        i33 = 0;

     label33:
        if i33 >= i29 goto label34;

        $r18 = r39[i32];

        $d0 = $r18[i33];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r19 = r39[i32];

        $d1 = $r19[i33];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i33 = i33 + 1;

        goto label33;

     label34:
        i32 = i32 + 1;

        goto label32;

     label35:
        $r14 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r15 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r32);

        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r39);

        specialinvoke $r14.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r16, $r17, i29, i2);

        return $r14;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineInterpolator r0;
        double[] r1, r2, r13, r14;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, i18, i19, i20, i21, i22, i23, i24, i25, i26;
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver $r5;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r6, $r8;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;
        int[] $r10;
        java.lang.Double $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver $r12;
        byte $b16;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r15, r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r16, r17;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i5 = lengthof r1;

        $i4 = lengthof r2;

        if $i5 != $i4 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        $i6 = lengthof r1;

        $i8 = $i6 + 2;

        $i7 = lengthof r2;

        if $i8 != $i7 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        $z7 = $z5 | $z6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i17 = lengthof r1;

        if $i17 <= 1 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i18 = 0;

     label07:
        if i18 >= i0 goto label08;

        $d7 = r1[i18];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing NaN");

        $d8 = r1[i18];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d8);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xData containing Infinity");

        i18 = i18 + 1;

        goto label07;

     label08:
        i19 = 0;

     label09:
        if i19 >= i1 goto label10;

        $d5 = r2[i19];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "yData containing NaN");

        $d6 = r2[i19];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yData containing Infinity");

        i19 = i19 + 1;

        goto label09;

     label10:
        i20 = 0;

     label11:
        if i20 >= i0 goto label16;

        i21 = i20 + 1;

     label12:
        if i21 >= i0 goto label15;

        $d4 = r1[i20];

        $d3 = r1[i21];

        $b16 = $d4 cmpl $d3;

        if $b16 != 0 goto label13;

        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z9, "Data should be distinct");

        i21 = i21 + 1;

        goto label12;

     label15:
        i20 = i20 + 1;

        goto label11;

     label16:
        r13 = newarray (double)[i0];

        $i9 = lengthof r1;

        $i11 = $i9 + 2;

        $i10 = lengthof r2;

        if $i11 != $i10 goto label17;

        $r12 = new com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver;

        $d2 = r2[0];

        $i14 = i0 + 1;

        $d1 = r2[$i14];

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.CubicSplineClampedSolver: void <init>(double,double)>($d2, $d1);

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r12;

        $i15 = i0 + 1;

        r14 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i15);

        goto label18;

     label17:
        $r5 = new com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r5;

        r14 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

     label18:
        $r6 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        r15 = virtualinvoke $r6.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[])>(r1, r14);

        i2 = lengthof r15;

        i22 = 0;

     label19:
        if i22 >= i2 goto label24;

        r16 = r15[i22];

        i23 = virtualinvoke r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i3 = virtualinvoke r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i24 = 0;

     label20:
        if i24 >= i23 goto label23;

        i25 = 0;

     label21:
        if i25 >= i3 goto label22;

        $r10 = newarray (int)[2];

        $r10[0] = i24;

        $r10[1] = i25;

        $r11 = virtualinvoke r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r10);

        $d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i25 = i25 + 1;

        goto label21;

     label22:
        i24 = i24 + 1;

        goto label20;

     label23:
        i22 = i22 + 1;

        goto label19;

     label24:
        r17 = r15[0];

        $i12 = i2 - 1;

        r18 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i12];

        $i13 = i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 1, r18, 0, $i13);

        i26 = virtualinvoke r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r7 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r8 = r0.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r1);

        specialinvoke $r7.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r9, r17, i26, 1, r18);

        return $r7;
    }
}
