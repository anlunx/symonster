public class org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;
        double[] r1, r2, r3, r4;
        int $i0, $i1, $i2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm $r5;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r1, r2, 1);

        $i0 = lengthof r1;

        $i1 = $i0 - 1;

        r3 = newarray (double)[$i1];

        $i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, $i2);

        r4 = staticinvoke <org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator: double[] computeDividedDifference(double[],double[])>(r1, r2);

        $r5 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;

        specialinvoke $r5.<org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm: void <init>(double[],double[])>(r4, r3);

        return $r5;
    }

    protected static double[] computeDividedDifference(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0, r1, r2, r3;
        int i0, $i1, $i2, $i3, i4, i5;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.Object $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm: boolean verifyInterpolationArray(double[],double[],boolean)>(r0, r1, 1);

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i0 = lengthof r0;

        r3 = newarray (double)[i0];

        $d1 = r2[0];

        r3[0] = $d1;

        i4 = 1;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        $i1 = i0 - i4;

        if i5 >= $i1 goto label3;

        $i2 = i5 + i4;

        $d4 = r0[$i2];

        $d3 = r0[i5];

        d0 = $d4 - $d3;

        $i3 = i5 + 1;

        $d6 = r2[$i3];

        $d5 = r2[i5];

        $d7 = $d6 - $d5;

        $d8 = $d7 / d0;

        r2[i5] = $d8;

        i5 = i5 + 1;

        goto label2;

     label3:
        $d2 = r2[0];

        r3[i4] = $d2;

        i4 = i4 + 1;

        goto label1;

     label4:
        return r3;
    }

    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator r0;
        double[] r1, r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm interpolate(double[],double[])>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator: long serialVersionUID> = 107049519551235069L;

        return;
    }
}
