public abstract class org.apache.commons.math3.optim.BaseMultivariateOptimizer extends org.apache.commons.math3.optim.BaseOptimizer
{
    private double[] start;
    private double[] lowerBound;
    private double[] upperBound;

    protected void <init>(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r1);

        return;
    }

    public transient java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r3;
        org.apache.commons.math3.optim.SimpleBounds r4;
        boolean $z0, $z1;
        double[] $r5, $r6, $r8;
        org.apache.commons.math3.optim.InitialGuess $r7;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.BaseOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optim.InitialGuess;

        if $z0 == 0 goto label2;

        $r7 = (org.apache.commons.math3.optim.InitialGuess) r3;

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.optim.InitialGuess: double[] getInitialGuess()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start> = $r8;

        goto label3;

     label2:
        $z1 = r3 instanceof org.apache.commons.math3.optim.SimpleBounds;

        if $z1 == 0 goto label3;

        r4 = (org.apache.commons.math3.optim.SimpleBounds) r3;

        $r5 = virtualinvoke r4.<org.apache.commons.math3.optim.SimpleBounds: double[] getLower()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound> = $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.optim.SimpleBounds: double[] getUpper()>();

        r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound> = $r6;

        goto label3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        specialinvoke r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: void checkParameters()>();

        return;
    }

    public double[] getStartPoint()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    public double[] getLowerBound()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    public double[] getUpperBound()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        double[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

     label2:
        return $r4;
    }

    private void checkParameters()
    {
        org.apache.commons.math3.optim.BaseMultivariateOptimizer r0;
        int i0, $i1, $i3, $i4, $i6, i7, i8;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r20;
        byte $b2, $b5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r8;
        java.lang.Double $r9, $r10, $r17, $r18;
        org.apache.commons.math3.exception.DimensionMismatchException $r11, $r19;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r16;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optim.BaseMultivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        if $r1 == null goto label8;

        $r2 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        i0 = lengthof $r2;

        $r3 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        if $r3 == null goto label4;

        $r13 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $i4 = lengthof $r13;

        if $i4 == i0 goto label1;

        $r19 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r20 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        $i6 = lengthof $r20;

        specialinvoke $r19.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, i0);

        throw $r19;

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label4;

        $r14 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        d0 = $r14[i7];

        $r15 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] lowerBound>;

        d1 = $r15[i7];

        $b5 = d0 cmpg d1;

        if $b5 >= 0 goto label3;

        $r16 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r16.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r17, $r18, 1);

        throw $r16;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        $r4 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        if $r4 == null goto label8;

        $r5 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $i1 = lengthof $r5;

        if $i1 == i0 goto label5;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r12 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        $i3 = lengthof $r12;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r11;

     label5:
        i8 = 0;

     label6:
        if i8 >= i0 goto label8;

        $r6 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] start>;

        d2 = $r6[i8];

        $r7 = r0.<org.apache.commons.math3.optim.BaseMultivariateOptimizer: double[] upperBound>;

        d3 = $r7[i8];

        $b2 = d2 cmpl d3;

        if $b2 <= 0 goto label7;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r9, $r10, 1);

        throw $r8;

     label7:
        i8 = i8 + 1;

        goto label6;

     label8:
        return;
    }
}
