public final class org.apache.commons.math.util.MathUtils extends java.lang.Object
{
    public static final double EPSILON;
    public static final double SAFE_MIN;
    public static final double TWO_PI;
    private static final byte NB;
    private static final short NS;
    private static final byte PB;
    private static final short PS;
    private static final byte ZB;
    private static final short ZS;
    private static final int NAN_GAP;
    private static final long SGN_MASK;
    private static final int SGN_MASK_FLOAT;
    private static final long[] FACTORIALS;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.commons.math.util.MathUtils r0;

        r0 := @this: org.apache.commons.math.util.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int addAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r3;
        java.lang.ArithmeticException $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 + $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long addAndCheck(long, long)
    {
        long l0, l1, $l2;
        org.apache.commons.math.exception.util.LocalizedFormats $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $l2 = staticinvoke <org.apache.commons.math.util.MathUtils: long addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)>(l0, l1, $r0);

        return $l2;
    }

    private static long addAndCheck(long, long, org.apache.commons.math.exception.util.Localizable)
    {
        long l0, l1, $l4, $l7, l9;
        org.apache.commons.math.exception.util.Localizable r0;
        byte $b2, $b3, $b5, $b6, $b8;
        java.lang.Object[] $r1, $r5;
        java.lang.Long $r2, $r3, $r6, $r7;
        java.lang.ArithmeticException $r4, $r8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: org.apache.commons.math.exception.util.Localizable;

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label1;

        l9 = staticinvoke <org.apache.commons.math.util.MathUtils: long addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)>(l1, l0, r0);

        goto label6;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label4;

        $b6 = l1 cmp 0L;

        if $b6 >= 0 goto label3;

        $l7 = -9223372036854775808L - l1;

        $b8 = $l7 cmp l0;

        if $b8 > 0 goto label2;

        l9 = l0 + l1;

        goto label6;

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r5[1] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>(r0, $r5);

        throw $r8;

     label3:
        l9 = l0 + l1;

        goto label6;

     label4:
        $l4 = 9223372036854775807L - l1;

        $b5 = l0 cmp $l4;

        if $b5 > 0 goto label5;

        l9 = l0 + l1;

        goto label6;

     label5:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>(r0, $r1);

        throw $r4;

     label6:
        return l9;
    }

    public static long binomialCoefficient(int, int)
    {
        int i0, i1, $i3, $i4, $i5, $i6, $i12, $i13, $i19, $i23, i26, i27, i28, i29, i31, i32;
        long $l2, $l7, $l8, $l9, $l10, $l11, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l24, l25, l30, l33;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label01;

        if i1 != 0 goto label02;

     label01:
        return 1L;

     label02:
        if i1 == 1 goto label03;

        $i3 = i0 - 1;

        if i1 != $i3 goto label04;

     label03:
        $l2 = (long) i0;

        return $l2;

     label04:
        $i4 = i0 / 2;

        if i1 <= $i4 goto label05;

        $i23 = i0 - i1;

        $l24 = staticinvoke <org.apache.commons.math.util.MathUtils: long binomialCoefficient(int,int)>(i0, $i23);

        return $l24;

     label05:
        l25 = 1L;

        if i0 > 61 goto label08;

        $i19 = i0 - i1;

        i26 = $i19 + 1;

        i27 = 1;

     label06:
        if i27 > i1 goto label07;

        $l20 = (long) i26;

        $l22 = l25 * $l20;

        $l21 = (long) i27;

        l25 = $l22 / $l21;

        i26 = i26 + 1;

        i27 = i27 + 1;

        goto label06;

     label07:
        goto label13;

     label08:
        if i0 > 66 goto label11;

        $i12 = i0 - i1;

        i28 = $i12 + 1;

        i29 = 1;

     label09:
        if i29 > i1 goto label10;

        $i13 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i28, i29);

        l30 = (long) $i13;

        $l14 = (long) i29;

        $l15 = $l14 / l30;

        $l18 = l25 / $l15;

        $l16 = (long) i28;

        $l17 = $l16 / l30;

        l25 = $l18 * $l17;

        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label09;

     label10:
        goto label13;

     label11:
        $i5 = i0 - i1;

        i31 = $i5 + 1;

        i32 = 1;

     label12:
        if i32 > i1 goto label13;

        $i6 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i31, i32);

        l33 = (long) $i6;

        $l7 = (long) i32;

        $l8 = $l7 / l33;

        $l11 = l25 / $l8;

        $l9 = (long) i31;

        $l10 = $l9 / l33;

        l25 = staticinvoke <org.apache.commons.math.util.MathUtils: long mulAndCheck(long,long)>($l11, $l10);

        i31 = i31 + 1;

        i32 = i32 + 1;

        goto label12;

     label13:
        return l25;
    }

    public static double binomialCoefficientDouble(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i7, i8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        long $l6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label1;

        if i1 != 0 goto label2;

     label1:
        return 1.0;

     label2:
        if i1 == 1 goto label3;

        $i2 = i0 - 1;

        if i1 != $i2 goto label4;

     label3:
        $d0 = (double) i0;

        return $d0;

     label4:
        $i3 = i0 / 2;

        if i1 <= $i3 goto label5;

        $i7 = i0 - i1;

        $d7 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientDouble(int,int)>(i0, $i7);

        return $d7;

     label5:
        if i0 >= 67 goto label6;

        $l6 = staticinvoke <org.apache.commons.math.util.MathUtils: long binomialCoefficient(int,int)>(i0, i1);

        $d6 = (double) $l6;

        return $d6;

     label6:
        d8 = 1.0;

        i8 = 1;

     label7:
        if i8 > i1 goto label8;

        $i4 = i0 - i1;

        $i5 = $i4 + i8;

        $d4 = (double) $i5;

        $d3 = (double) i8;

        $d5 = $d4 / $d3;

        d8 = d8 * $d5;

        i8 = i8 + 1;

        goto label7;

     label8:
        $d1 = d8 + 0.5;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d1);

        return $d2;
    }

    public static double binomialCoefficientLog(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, i7, i8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        long $l6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkBinomial(int,int)>(i0, i1);

        if i0 == i1 goto label01;

        if i1 != 0 goto label02;

     label01:
        return 0.0;

     label02:
        if i1 == 1 goto label03;

        $i2 = i0 - 1;

        if i1 != $i2 goto label04;

     label03:
        $d0 = (double) i0;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d0);

        return $d1;

     label04:
        if i0 >= 67 goto label05;

        $l6 = staticinvoke <org.apache.commons.math.util.MathUtils: long binomialCoefficient(int,int)>(i0, i1);

        $d9 = (double) $l6;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d9);

        return $d10;

     label05:
        if i0 >= 1030 goto label06;

        $d7 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientDouble(int,int)>(i0, i1);

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d7);

        return $d8;

     label06:
        $i3 = i0 / 2;

        if i1 <= $i3 goto label07;

        $i5 = i0 - i1;

        $d6 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientLog(int,int)>(i0, $i5);

        return $d6;

     label07:
        d11 = 0.0;

        $i4 = i0 - i1;

        i7 = $i4 + 1;

     label08:
        if i7 > i0 goto label09;

        $d4 = (double) i7;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d4);

        d11 = d11 + $d5;

        i7 = i7 + 1;

        goto label08;

     label09:
        i8 = 2;

     label10:
        if i8 > i1 goto label11;

        $d2 = (double) i8;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d2);

        d11 = d11 - $d3;

        i8 = i8 + 1;

        goto label10;

     label11:
        return d11;
    }

    private static void checkBinomial(int, int) throws java.lang.IllegalArgumentException
    {
        int i0, i1;
        java.lang.Object[] $r0, $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r1, $r5;
        java.lang.Integer $r2, $r6, $r7;
        java.lang.IllegalArgumentException $r3, $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats BINOMIAL_INVALID_PARAMETERS_ORDER>;

        $r4 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r7;

        $r8 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r8;

     label1:
        if i0 >= 0 goto label2;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats BINOMIAL_NEGATIVE_PARAMETER>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r3;

     label2:
        return;
    }

    public static int compareTo(double, double, double)
    {
        double d0, d1, d2;
        boolean $z0;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double,double)>(d0, d1, d2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        return -1;

     label2:
        return 1;
    }

    public static double cosh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>(d0);

        $d2 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d2);

        $d4 = $d1 + $d3;

        $d5 = $d4 / 2.0;

        return $d5;
    }

    public static boolean equals(float, float)
    {
        float f0, f1;
        boolean $z0, $z1, $z2;
        byte $b0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 != 0 goto label2;

     label1:
        $b0 = f0 cmpl f1;

        if $b0 != 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public static boolean equalsIncludingNaN(float, float)
    {
        float f0, f1;
        boolean $z0, $z1, $z2, $z3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(float,float,int)>(f0, f1, 1);

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static boolean equals(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;
        boolean $z0, $z1;
        byte $b0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(float,float,int)>(f0, f1, 1);

        if $z0 != 0 goto label1;

        $f3 = f1 - f0;

        $f4 = staticinvoke <org.apache.commons.math.util.FastMath: float abs(float)>($f3);

        $b0 = $f4 cmpg f2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equalsIncludingNaN(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;
        boolean $z0, $z1;
        byte $b0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(float,float)>(f0, f1);

        if $z0 != 0 goto label1;

        $f3 = f1 - f0;

        $f4 = staticinvoke <org.apache.commons.math.util.FastMath: float abs(float)>($f3);

        $b0 = $f4 cmpg f2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equals(float, float, int)
    {
        float f0, f1;
        int i0, $i1, $i2, i3, i4;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        $z1 = <org.apache.commons.math.util.MathUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i0 < 4194304 goto label2;

     label1:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        if i3 >= 0 goto label3;

        i3 = -2147483648 - i3;

     label3:
        if i4 >= 0 goto label4;

        i4 = -2147483648 - i4;

     label4:
        $i1 = i3 - i4;

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>($i1);

        if $i2 > i0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        if $z4 == 0 goto label7;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z2 != 0 goto label7;

        $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z3 != 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        return $z5;
    }

    public static boolean equalsIncludingNaN(float, float, int)
    {
        float f0, f1;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(float,float,int)>(f0, f1, i0);

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static boolean equals(float[], float[])
    {
        float[] r0, r1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $f1 = r0[i3];

        $f0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(float,float)>($f1, $f0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equalsIncludingNaN(float[], float[])
    {
        float[] r0, r1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $f1 = r0[i3];

        $f0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(float,float)>($f1, $f0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equals(double, double)
    {
        double d0, d1;
        boolean $z0, $z1, $z2;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label2;

     label1:
        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public static boolean equalsIncludingNaN(double, double)
    {
        double d0, d1;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double,int)>(d0, d1, 1);

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static boolean equals(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;
        boolean $z0, $z1;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double)>(d0, d1);

        if $z0 != 0 goto label1;

        $d3 = d1 - d0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        $b0 = $d4 cmpg d2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equalsIncludingNaN(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;
        boolean $z0, $z1;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(double,double)>(d0, d1);

        if $z0 != 0 goto label1;

        $d3 = d1 - d0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        $b0 = $d4 cmpg d2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equals(double, double, int)
    {
        double d0, d1;
        int i0;
        boolean $z0, $z1;
        byte $b1, $b2, $b6;
        long $l3, $l4, $l5, l7, l8;
        java.lang.AssertionError $r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $z0 = <org.apache.commons.math.util.MathUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i0 < 4194304 goto label2;

     label1:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b1 = l7 cmp 0L;

        if $b1 >= 0 goto label3;

        l7 = -9223372036854775808L - l7;

     label3:
        $b2 = l8 cmp 0L;

        if $b2 >= 0 goto label4;

        l8 = -9223372036854775808L - l8;

     label4:
        $l3 = l7 - l8;

        $l4 = staticinvoke <org.apache.commons.math.util.FastMath: long abs(long)>($l3);

        $l5 = (long) i0;

        $b6 = $l4 cmp $l5;

        if $b6 > 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    public static boolean equalsIncludingNaN(double, double, int)
    {
        double d0, d1;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double,int)>(d0, d1, i0);

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static boolean equals(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $d1 = r0[i3];

        $d0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equals(double,double)>($d1, $d0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equalsIncludingNaN(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $d1 = r0[i3];

        $d0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(double,double)>($d1, $d0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static long factorial(int)
    {
        int i0;
        long[] $r0;
        long $l1;
        java.lang.ArithmeticException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        java.lang.IllegalArgumentException $r5;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r5;

     label1:
        if i0 <= 20 goto label2;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("factorial value is too large to fit in a long");

        throw $r1;

     label2:
        $r0 = <org.apache.commons.math.util.MathUtils: long[] FACTORIALS>;

        $l1 = $r0[i0];

        return $l1;
    }

    public static double factorialDouble(int)
    {
        int i0;
        double $d0, $d1, $d2, $d3, $d4;
        long $l1;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r3;

     label1:
        if i0 >= 21 goto label2;

        $l1 = staticinvoke <org.apache.commons.math.util.MathUtils: long factorial(int)>(i0);

        $d4 = (double) $l1;

        return $d4;

     label2:
        $d0 = staticinvoke <org.apache.commons.math.util.MathUtils: double factorialLog(int)>(i0);

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d0);

        $d2 = $d1 + 0.5;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d2);

        return $d3;
    }

    public static double factorialLog(int)
    {
        int i0, i2;
        double $d0, $d1, $d2, $d3, d4;
        long $l1;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FACTORIAL_NEGATIVE_PARAMETER>;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r3;

     label1:
        if i0 >= 21 goto label2;

        $l1 = staticinvoke <org.apache.commons.math.util.MathUtils: long factorial(int)>(i0);

        $d2 = (double) $l1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d2);

        return $d3;

     label2:
        d4 = 0.0;

        i2 = 2;

     label3:
        if i2 > i0 goto label4;

        $d0 = (double) i2;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d0);

        d4 = d4 + $d1;

        i2 = i2 + 1;

        goto label3;

     label4:
        return d4;
    }

    public static int gcd(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i15, $i16, i17, $i18;
        java.lang.Object[] $r0, $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r1, $r6;
        java.lang.Integer $r2, $r3, $r7, $r8;
        java.lang.ArithmeticException $r4, $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i12 = i0;

        i13 = i1;

        if i0 == 0 goto label01;

        if i1 != 0 goto label04;

     label01:
        if i0 == -2147483648 goto label02;

        if i1 != -2147483648 goto label03;

     label02:
        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label03:
        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>(i0);

        $i3 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>(i1);

        $i4 = $i2 + $i3;

        return $i4;

     label04:
        if i0 <= 0 goto label05;

        i12 = neg i0;

     label05:
        if i1 <= 0 goto label06;

        i13 = neg i1;

     label06:
        i14 = 0;

     label07:
        $i15 = i12 & 1;

        if $i15 != 0 goto label08;

        $i11 = i13 & 1;

        if $i11 != 0 goto label08;

        if i14 >= 31 goto label08;

        i12 = i12 / 2;

        i13 = i13 / 2;

        i14 = i14 + 1;

        goto label07;

     label08:
        if i14 != 31 goto label09;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label09:
        $i5 = i12 & 1;

        if $i5 != 1 goto label10;

        $i16 = i13;

        goto label11;

     label10:
        $i6 = i12 / 2;

        $i16 = neg $i6;

     label11:
        i17 = $i16;

     label12:
        $i18 = i17 & 1;

        if $i18 != 0 goto label13;

        i17 = i17 / 2;

        goto label12;

     label13:
        if i17 <= 0 goto label14;

        i12 = neg i17;

        goto label15;

     label14:
        i13 = i17;

     label15:
        $i7 = i13 - i12;

        i17 = $i7 / 2;

        if i17 != 0 goto label12;

        $i9 = neg i12;

        $i8 = 1 << i14;

        $i10 = $i9 * $i8;

        return $i10;
    }

    public static long gcd(long, long)
    {
        long l0, l1, $l5, $l6, $l7, $l11, $l13, $l15, $l17, $l18, $l19, $l20, l22, l23, $l25, $l27, l28, $l29;
        byte $b2, $b3, $b4, $b8, $b9, $b10, $b12, $b14, $b16, $b21, $b26, $b30;
        java.lang.Object[] $r0, $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r1, $r6;
        java.lang.Long $r2, $r3, $r7, $r8;
        java.lang.ArithmeticException $r4, $r9;
        int i24;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l22 = l0;

        l23 = l1;

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label01;

        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label04;

     label01:
        $b3 = l0 cmp -9223372036854775808L;

        if $b3 == 0 goto label02;

        $b4 = l1 cmp -9223372036854775808L;

        if $b4 != 0 goto label03;

     label02:
        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label03:
        $l5 = staticinvoke <org.apache.commons.math.util.FastMath: long abs(long)>(l0);

        $l6 = staticinvoke <org.apache.commons.math.util.FastMath: long abs(long)>(l1);

        $l7 = $l5 + $l6;

        return $l7;

     label04:
        $b9 = l0 cmp 0L;

        if $b9 <= 0 goto label05;

        l22 = neg l0;

     label05:
        $b10 = l1 cmp 0L;

        if $b10 <= 0 goto label06;

        l23 = neg l1;

     label06:
        i24 = 0;

     label07:
        $l25 = l22 & 1L;

        $b26 = $l25 cmp 0L;

        if $b26 != 0 goto label08;

        $l20 = l23 & 1L;

        $b21 = $l20 cmp 0L;

        if $b21 != 0 goto label08;

        if i24 >= 63 goto label08;

        l22 = l22 / 2L;

        l23 = l23 / 2L;

        i24 = i24 + 1;

        goto label07;

     label08:
        if i24 != 63 goto label09;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label09:
        $l11 = l22 & 1L;

        $b12 = $l11 cmp 1L;

        if $b12 != 0 goto label10;

        $l27 = l23;

        goto label11;

     label10:
        $l13 = l22 / 2L;

        $l27 = neg $l13;

     label11:
        l28 = $l27;

     label12:
        $l29 = l28 & 1L;

        $b30 = $l29 cmp 0L;

        if $b30 != 0 goto label13;

        l28 = l28 / 2L;

        goto label12;

     label13:
        $b14 = l28 cmp 0L;

        if $b14 <= 0 goto label14;

        l22 = neg l28;

        goto label15;

     label14:
        l23 = l28;

     label15:
        $l15 = l23 - l22;

        l28 = $l15 / 2L;

        $b16 = l28 cmp 0L;

        if $b16 != 0 goto label12;

        $l18 = neg l22;

        $l17 = 1L << i24;

        $l19 = $l18 * $l17;

        return $l19;
    }

    public static int hash(double)
    {
        double d0;
        java.lang.Double $r0;
        int $i0;

        d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        $i0 = virtualinvoke $r0.<java.lang.Double: int hashCode()>();

        return $i0;
    }

    public static int hash(double[])
    {
        double[] r0;
        int $i0;

        r0 := @parameter0: double[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>(r0);

        return $i0;
    }

    public static byte indicator(byte)
    {
        byte b0, $b1;

        b0 := @parameter0: byte;

        if b0 < 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;
    }

    public static double indicator(double)
    {
        double d0, $d1;
        boolean $z0;
        byte $b0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label2;

        $d1 = 1.0;

        goto label3;

     label2:
        $d1 = -1.0;

     label3:
        return $d1;
    }

    public static float indicator(float)
    {
        float f0, $f1;
        boolean $z0;
        byte $b0;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return #NaNF;

     label1:
        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label2;

        $f1 = 1.0F;

        goto label3;

     label2:
        $f1 = -1.0F;

     label3:
        return $f1;
    }

    public static int indicator(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;
    }

    public static long indicator(long)
    {
        long l0, $l2;
        byte $b1;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $l2 = 1L;

        goto label2;

     label1:
        $l2 = -1L;

     label2:
        return $l2;
    }

    public static short indicator(short)
    {
        short s0;
        byte $b1;

        s0 := @parameter0: short;

        if s0 < 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;
    }

    public static int lcm(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r3;
        java.lang.ArithmeticException $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = staticinvoke <org.apache.commons.math.util.MathUtils: int gcd(int,int)>(i0, i1);

        $i4 = i0 / $i3;

        $i5 = staticinvoke <org.apache.commons.math.util.MathUtils: int mulAndCheck(int,int)>($i4, i1);

        i2 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>($i5);

        if i2 != -2147483648 goto label3;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LCM_OVERFLOW_32_BITS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label3:
        return i2;
    }

    public static long lcm(long, long)
    {
        long l0, l1, l2, $l5, $l6, $l7;
        byte $b3, $b4, $b8;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Long $r2, $r3;
        java.lang.ArithmeticException $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label1;

        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label2;

     label1:
        return 0L;

     label2:
        $l5 = staticinvoke <org.apache.commons.math.util.MathUtils: long gcd(long,long)>(l0, l1);

        $l6 = l0 / $l5;

        $l7 = staticinvoke <org.apache.commons.math.util.MathUtils: long mulAndCheck(long,long)>($l6, l1);

        l2 = staticinvoke <org.apache.commons.math.util.FastMath: long abs(long)>($l7);

        $b8 = l2 cmp -9223372036854775808L;

        if $b8 != 0 goto label3;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LCM_OVERFLOW_64_BITS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label3:
        return l2;
    }

    public static double log(double, double)
    {
        double d0, d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d0);

        $d4 = $d2 / $d3;

        return $d4;
    }

    public static int mulAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: mul");

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long mulAndCheck(long, long)
    {
        long l0, l1, $l5, $l9, $l11, l13;
        byte $b2, $b3, $b4, $b6, $b7, $b8, $b10, $b12;
        java.lang.ArithmeticException $r1, $r2, $r3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label1;

        l13 = staticinvoke <org.apache.commons.math.util.MathUtils: long mulAndCheck(long,long)>(l1, l0);

        goto label9;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label6;

        $b7 = l1 cmp 0L;

        if $b7 >= 0 goto label3;

        $l11 = 9223372036854775807L / l1;

        $b12 = l0 cmp $l11;

        if $b12 < 0 goto label2;

        l13 = l0 * l1;

        goto label9;

     label2:
        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: multiply");

        throw $r3;

     label3:
        $b8 = l1 cmp 0L;

        if $b8 <= 0 goto label5;

        $l9 = -9223372036854775808L / l1;

        $b10 = $l9 cmp l0;

        if $b10 > 0 goto label4;

        l13 = l0 * l1;

        goto label9;

     label4:
        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: multiply");

        throw $r2;

     label5:
        l13 = 0L;

        goto label9;

     label6:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label8;

        $l5 = 9223372036854775807L / l1;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label7;

        l13 = l0 * l1;

        goto label9;

     label7:
        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: multiply");

        throw $r1;

     label8:
        l13 = 0L;

     label9:
        return l13;
    }

    public static double nextAfter(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        long l0, l1, l2, l3, $l7, $l8, $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, $l18;
        boolean $z0, $z1;
        byte $b4, $b5, $b6, $b13, $b19;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        return d0;

     label2:
        $b4 = d0 cmpl 0.0;

        if $b4 != 0 goto label5;

        $b19 = d1 cmpg 0.0;

        if $b19 >= 0 goto label3;

        $d8 = -4.9E-324;

        goto label4;

     label3:
        $d8 = 4.9E-324;

     label4:
        return $d8;

     label5:
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        l1 = l0 & -9223372036854775808L;

        l2 = l0 & 9218868437227405312L;

        l3 = l0 & 4503599627370495L;

        $d2 = d1 - d0;

        $d3 = d0 * $d2;

        $b5 = $d3 cmpl 0.0;

        if $b5 < 0 goto label7;

        $b13 = l3 cmp 4503599627370495L;

        if $b13 != 0 goto label6;

        $l17 = l2 + 4503599627370496L;

        $l18 = l1 | $l17;

        $d7 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l18);

        return $d7;

     label6:
        $l15 = l1 | l2;

        $l14 = l3 + 1L;

        $l16 = $l15 | $l14;

        $d6 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l16);

        return $d6;

     label7:
        $b6 = l3 cmp 0L;

        if $b6 != 0 goto label8;

        $l10 = l2 - 4503599627370496L;

        $l11 = l1 | $l10;

        $l12 = $l11 | 4503599627370495L;

        $d5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l12);

        return $d5;

     label8:
        $l8 = l1 | l2;

        $l7 = l3 - 1L;

        $l9 = $l8 | $l7;

        $d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l9);

        return $d4;
    }

    public static double scalb(double, int)
    {
        double d0, $d1;
        int i0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double scalb(double,int)>(d0, i0);

        return $d1;
    }

    public static double normalizeAngle(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 + 3.141592653589793;

        $d3 = $d2 - d1;

        $d4 = $d3 / 6.283185307179586;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d4);

        $d6 = 6.283185307179586 * $d5;

        $d7 = d0 - $d6;

        return $d7;
    }

    public static double[] normalizeArray(double[], double) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        int i0, i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b1;
        java.lang.Object[] $r2, $r5, $r10, $r13;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r6, $r11, $r14;
        java.lang.ArithmeticException $r4, $r9;
        java.lang.Double $r7;
        java.lang.Integer $r8;
        java.lang.IllegalArgumentException $r12, $r15;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label01;

        $r14 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NORMALIZE_INFINITE>;

        $r13 = newarray (java.lang.Object)[0];

        $r15 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r14, $r13);

        throw $r15;

     label01:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label02;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NORMALIZE_NAN>;

        $r10 = newarray (java.lang.Object)[0];

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r12;

     label02:
        d9 = 0.0;

        i0 = lengthof r0;

        r1 = newarray (double)[i0];

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        $d5 = r0[i2];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        if $z3 == 0 goto label04;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r5 = newarray (java.lang.Object)[2];

        $d8 = r0[i2];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label04:
        $d6 = r0[i2];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        if $z4 != 0 goto label05;

        $d7 = r0[i2];

        d9 = d9 + $d7;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        $b1 = d9 cmpl 0.0;

        if $b1 != 0 goto label07;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ARRAY_SUMS_TO_ZERO>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label07:
        i3 = 0;

     label08:
        if i3 >= i0 goto label11;

        $d1 = r0[i3];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z2 == 0 goto label09;

        r1[i3] = #NaN;

        goto label10;

     label09:
        $d2 = r0[i3];

        $d3 = $d2 * d0;

        $d4 = $d3 / d9;

        r1[i3] = $d4;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        return r1;
    }

    public static double round(double, int)
    {
        double d0, $d1;
        int i0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = staticinvoke <org.apache.commons.math.util.MathUtils: double round(double,int,int)>(d0, i0, 4);

        return $d1;
    }

    public static double round(double, int, int)
    {
        double d0, $d1;
        int i0, i1;
        java.math.BigDecimal $r1, $r3;
        java.lang.String $r2;
        java.lang.NumberFormatException $r4;
        boolean $z0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = new java.math.BigDecimal;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(i0, i1);

        $d1 = virtualinvoke $r3.<java.math.BigDecimal: double doubleValue()>();

     label2:
        return $d1;

     label3:
        $r4 := @caughtexception;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label4;

        return d0;

     label4:
        return #NaN;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static float round(float, int)
    {
        float f0, $f1;
        int i0;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $f1 = staticinvoke <org.apache.commons.math.util.MathUtils: float round(float,int,int)>(f0, i0, 4);

        return $f1;
    }

    public static float round(float, int, int)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f1 = staticinvoke <org.apache.commons.math.util.MathUtils: float indicator(float)>(f0);

        $d0 = (double) i0;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>(10.0, $d0);

        $f3 = (float) $d1;

        f2 = $f3 * f1;

        $f4 = f0 * f2;

        $d3 = (double) $f4;

        $d2 = (double) f1;

        $d4 = staticinvoke <org.apache.commons.math.util.MathUtils: double roundUnscaled(double,double,int)>($d3, $d2, i1);

        $f5 = (float) $d4;

        $f6 = $f5 / f2;

        return $f6;
    }

    private static double roundUnscaled(double, double, int)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19, d20, d21;
        int i0;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        java.lang.ArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        d16 := @parameter0: double;

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label15;
            case 1: goto label03;
            case 2: goto label01;
            case 3: goto label04;
            case 4: goto label12;
            case 5: goto label06;
            case 6: goto label08;
            case 7: goto label14;
            default: goto label16;
        };

     label01:
        $b1 = d0 cmpl -1.0;

        if $b1 != 0 goto label02;

        $d2 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #-Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d2);

        goto label17;

     label02:
        $d1 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d1);

        goto label17;

     label03:
        $d14 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #-Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d14);

        goto label17;

     label04:
        $b8 = d0 cmpl -1.0;

        if $b8 != 0 goto label05;

        $d13 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d13);

        goto label17;

     label05:
        $d12 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #-Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d12);

        goto label17;

     label06:
        d17 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #-Infinity);

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d17);

        d18 = d17 - $d10;

        $b6 = d18 cmpl 0.5;

        if $b6 <= 0 goto label07;

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d17);

        goto label17;

     label07:
        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d17);

        goto label17;

     label08:
        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d16);

        d19 = d16 - $d4;

        $b3 = d19 cmpl 0.5;

        if $b3 <= 0 goto label09;

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d16);

        goto label17;

     label09:
        $b4 = d19 cmpg 0.5;

        if $b4 >= 0 goto label10;

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d16);

        goto label17;

     label10:
        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d16);

        $d6 = $d5 / 2.0;

        $d7 = staticinvoke <java.lang.Math: double floor(double)>(d16);

        $d8 = $d7 / 2.0;

        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d8);

        $b5 = $d6 cmpl $d9;

        if $b5 != 0 goto label11;

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d16);

        goto label17;

     label11:
        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d16);

        goto label17;

     label12:
        d20 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #Infinity);

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d20);

        d21 = d20 - $d11;

        $b7 = d21 cmpl 0.5;

        if $b7 < 0 goto label13;

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>(d20);

        goto label17;

     label13:
        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d20);

        goto label17;

     label14:
        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>(d16);

        $b2 = d16 cmpl $d3;

        if $b2 == 0 goto label17;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Inexact result from rounding");

        throw $r0;

     label15:
        $d15 = staticinvoke <org.apache.commons.math.util.MathUtils: double nextAfter(double,double)>(d16, #Infinity);

        d16 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d15);

        goto label17;

     label16:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INVALID_ROUNDING_METHOD>;

        $r1 = newarray (java.lang.Object)[17];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r1[1] = "ROUND_CEILING";

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[2] = $r4;

        $r1[3] = "ROUND_DOWN";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[4] = $r5;

        $r1[5] = "ROUND_FLOOR";

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r1[6] = $r6;

        $r1[7] = "ROUND_HALF_DOWN";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[8] = $r7;

        $r1[9] = "ROUND_HALF_EVEN";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r1[10] = $r8;

        $r1[11] = "ROUND_HALF_UP";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[12] = $r9;

        $r1[13] = "ROUND_UNNECESSARY";

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r1[14] = $r10;

        $r1[15] = "ROUND_UP";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[16] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r12;

     label17:
        return d16;
    }

    public static byte sign(byte)
    {
        byte b0, $b1;

        b0 := @parameter0: byte;

        if b0 != 0 goto label1;

        $b1 = 0;

        goto label3;

     label1:
        if b0 <= 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;
    }

    public static double sign(double)
    {
        double d0, $d1;
        boolean $z0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        $d1 = 0.0;

        goto label4;

     label2:
        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $d1 = 1.0;

        goto label4;

     label3:
        $d1 = -1.0;

     label4:
        return $d1;
    }

    public static float sign(float)
    {
        float f0, $f1;
        boolean $z0;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return #NaNF;

     label1:
        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $f1 = 0.0F;

        goto label4;

     label2:
        $b1 = f0 cmpl 0.0F;

        if $b1 <= 0 goto label3;

        $f1 = 1.0F;

        goto label4;

     label3:
        $f1 = -1.0F;

     label4:
        return $f1;
    }

    public static int sign(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $b1 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;
    }

    public static long sign(long)
    {
        long l0, $l3;
        byte $b1, $b2;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l3 = 0L;

        goto label3;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label2;

        $l3 = 1L;

        goto label3;

     label2:
        $l3 = -1L;

     label3:
        return $l3;
    }

    public static short sign(short)
    {
        short s0;
        byte $b1;

        s0 := @parameter0: short;

        if s0 != 0 goto label1;

        $b1 = 0;

        goto label3;

     label1:
        if s0 <= 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;
    }

    public static double sinh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>(d0);

        $d2 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d2);

        $d4 = $d1 - $d3;

        $d5 = $d4 / 2.0;

        return $d5;
    }

    public static int subAndCheck(int, int)
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r3;
        java.lang.ArithmeticException $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 - $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long subAndCheck(long, long)
    {
        long l0, l1, $l3, l5;
        byte $b2, $b4;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.ArithmeticException $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label2;

        $b4 = l0 cmp 0L;

        if $b4 >= 0 goto label1;

        l5 = l0 - l1;

        goto label3;

     label1:
        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow: subtract");

        throw $r2;

     label2:
        $l3 = neg l1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        l5 = staticinvoke <org.apache.commons.math.util.MathUtils: long addAndCheck(long,long,org.apache.commons.math.exception.util.Localizable)>(l0, $l3, $r1);

     label3:
        return l5;
    }

    public static int pow(int, int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1, i2, i3, i4;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i2 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label1:
        i3 = 1;

        i4 = i0;

     label2:
        if i2 == 0 goto label4;

        $i1 = i2 & 1;

        if $i1 == 0 goto label3;

        i3 = i3 * i4;

     label3:
        i4 = i4 * i4;

        i2 = i2 >> 1;

        goto label2;

     label4:
        return i3;
    }

    public static int pow(int, long) throws java.lang.IllegalArgumentException
    {
        int i0, i6, i7;
        byte $b1, $b2, $b4;
        long $l3, l5;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Integer $r2;
        java.lang.Long $r3;
        java.lang.IllegalArgumentException $r4;

        i0 := @parameter0: int;

        l5 := @parameter1: long;

        $b1 = l5 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label1:
        i6 = 1;

        i7 = i0;

     label2:
        $b2 = l5 cmp 0L;

        if $b2 == 0 goto label4;

        $l3 = l5 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        i6 = i6 * i7;

     label3:
        i7 = i7 * i7;

        l5 = l5 >> 1;

        goto label2;

     label4:
        return i6;
    }

    public static long pow(long, int) throws java.lang.IllegalArgumentException
    {
        long l0, l3, l4;
        int $i1, i2;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Long $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        l0 := @parameter0: long;

        i2 := @parameter1: int;

        if i2 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label1:
        l3 = 1L;

        l4 = l0;

     label2:
        if i2 == 0 goto label4;

        $i1 = i2 & 1;

        if $i1 == 0 goto label3;

        l3 = l3 * l4;

     label3:
        l4 = l4 * l4;

        i2 = i2 >> 1;

        goto label2;

     label4:
        return l3;
    }

    public static long pow(long, long) throws java.lang.IllegalArgumentException
    {
        long l0, $l3, l5, l6, l7;
        byte $b1, $b2, $b4;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Long $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        l0 := @parameter0: long;

        l5 := @parameter1: long;

        $b1 = l5 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label1:
        l6 = 1L;

        l7 = l0;

     label2:
        $b2 = l5 cmp 0L;

        if $b2 == 0 goto label4;

        $l3 = l5 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        l6 = l6 * l7;

     label3:
        l7 = l7 * l7;

        l5 = l5 >> 1;

        goto label2;

     label4:
        return l6;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, int) throws java.lang.IllegalArgumentException
    {
        java.math.BigInteger r0, $r1;
        int i0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r5;

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        return $r1;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, long) throws java.lang.IllegalArgumentException
    {
        java.math.BigInteger r0, r5, r6;
        byte $b0, $b1, $b3;
        long $l2, l4;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.math.BigInteger;

        l4 := @parameter1: long;

        $b0 = l4 cmp 0L;

        if $b0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r0;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r1[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r5 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r6 = r0;

     label2:
        $b1 = l4 cmp 0L;

        if $b1 == 0 goto label4;

        $l2 = l4 & 1L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

     label3:
        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        l4 = l4 >> 1;

        goto label2;

     label4:
        return r5;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, java.math.BigInteger) throws java.lang.IllegalArgumentException
    {
        java.math.BigInteger r0, $r1, $r2, r6, r7, r8;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.math.BigInteger;

        r6 := @parameter1: java.math.BigInteger;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 >= 0 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POWER_NEGATIVE_PARAMETERS>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r3[1] = r6;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r5;

     label1:
        r7 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r8 = r0;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>(r6);

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r6.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z1 == 0 goto label3;

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r8);

     label3:
        r8 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r8);

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        goto label2;

     label4:
        return r7;
    }

    public static double distance1(double[], double[])
    {
        double[] r0, r1;
        int $i0, i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d0 = r1[i1];

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public static int distance1(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label2;

        $i2 = r0[i6];

        $i1 = r1[i6];

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>($i3);

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public static double distance(double[], double[])
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        int $i0, i1;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d5 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d3 = r0[i1];

        $d2 = r1[i1];

        d0 = $d3 - $d2;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public static double distance(int[], int[])
    {
        int[] r0, r1;
        double d0, $d1, $d2, d3;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        d3 = 0.0;

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $i2 = r0[i4];

        $i1 = r1[i4];

        $i3 = $i2 - $i1;

        d0 = (double) $i3;

        $d2 = d0 * d0;

        d3 = d3 + $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d3);

        return $d1;
    }

    public static double distanceInf(double[], double[])
    {
        double[] r0, r1;
        int $i0, i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d0 = r1[i1];

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d4, $d3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public static int distanceInf(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label2;

        $i2 = r0[i6];

        $i1 = r1[i6];

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <org.apache.commons.math.util.FastMath: int abs(int)>($i3);

        i5 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>(i5, $i4);

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public static void checkOrder(double[], org.apache.commons.math.util.MathUtils$OrderDirection, boolean)
    {
        double[] r0;
        org.apache.commons.math.util.MathUtils$OrderDirection r1;
        boolean z0, z1;
        int i0, $i1, $i2, i7;
        int[] $r2;
        double $d0, $d1, $d2, $d3, $d4, d5;
        byte $b3, $b4, $b5, $b6;
        org.apache.commons.math.exception.NonMonotonousSequenceException $r3;
        java.lang.Double $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math.util.MathUtils$OrderDirection;

        z0 := @parameter2: boolean;

        d5 = r0[0];

        z1 = 1;

        i0 = lengthof r0;

        i7 = 1;

     label1:
        if i7 >= i0 goto label9;

        $r2 = <org.apache.commons.math.util.MathUtils$1: int[] $SwitchMap$org$apache$commons$math$util$MathUtils$OrderDirection>;

        $i1 = virtualinvoke r1.<org.apache.commons.math.util.MathUtils$OrderDirection: int ordinal()>();

        $i2 = $r2[$i1];

        lookupswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label4;
            default: goto label6;
        };

     label2:
        if z0 == 0 goto label3;

        $d4 = r0[i7];

        $b6 = $d4 cmpg d5;

        if $b6 > 0 goto label7;

        z1 = 0;

        goto label7;

     label3:
        $d3 = r0[i7];

        $b5 = $d3 cmpg d5;

        if $b5 >= 0 goto label7;

        z1 = 0;

        goto label7;

     label4:
        if z0 == 0 goto label5;

        $d2 = r0[i7];

        $b4 = $d2 cmpl d5;

        if $b4 < 0 goto label7;

        z1 = 0;

        goto label7;

     label5:
        $d0 = r0[i7];

        $b3 = $d0 cmpl d5;

        if $b3 <= 0 goto label7;

        z1 = 0;

        goto label7;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label7:
        if z1 != 0 goto label8;

        $r3 = new org.apache.commons.math.exception.NonMonotonousSequenceException;

        $d1 = r0[i7];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        specialinvoke $r3.<org.apache.commons.math.exception.NonMonotonousSequenceException: void <init>(java.lang.Number,java.lang.Number,int,org.apache.commons.math.util.MathUtils$OrderDirection,boolean)>($r4, $r5, i7, r1, z0);

        throw $r3;

     label8:
        d5 = r0[i7];

        i7 = i7 + 1;

        goto label1;

     label9:
        return;
    }

    public static void checkOrder(double[])
    {
        double[] r0;
        org.apache.commons.math.util.MathUtils$OrderDirection $r1;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math.util.MathUtils$OrderDirection: org.apache.commons.math.util.MathUtils$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)>(r0, $r1, 1);

        return;
    }

    public static void checkOrder(double[], int, boolean)
    {
        double[] r0;
        int i0;
        boolean z0;
        org.apache.commons.math.util.MathUtils$OrderDirection $r1, $r2;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 <= 0 goto label1;

        $r2 = <org.apache.commons.math.util.MathUtils$OrderDirection: org.apache.commons.math.util.MathUtils$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)>(r0, $r2, z0);

        goto label2;

     label1:
        $r1 = <org.apache.commons.math.util.MathUtils$OrderDirection: org.apache.commons.math.util.MathUtils$OrderDirection DECREASING>;

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkOrder(double[],org.apache.commons.math.util.MathUtils$OrderDirection,boolean)>(r0, $r1, z0);

     label2:
        return;
    }

    public static double safeNorm(double[])
    {
        double[] r0;
        double d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36;
        int $i0, $i1, i11;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10;

        r0 := @parameter0: double[];

        d27 = 0.0;

        d28 = 0.0;

        d29 = 0.0;

        d30 = 0.0;

        d31 = 0.0;

        $i0 = lengthof r0;

        d2 = (double) $i0;

        d3 = 1.304E19 / d2;

        i11 = 0;

     label01:
        $i1 = lengthof r0;

        if i11 >= $i1 goto label08;

        $d19 = r0[i11];

        d4 = staticinvoke <java.lang.Math: double abs(double)>($d19);

        $b5 = d4 cmpg 3.834E-20;

        if $b5 < 0 goto label02;

        $b10 = d4 cmpl d3;

        if $b10 <= 0 goto label06;

     label02:
        $b6 = d4 cmpl 3.834E-20;

        if $b6 <= 0 goto label04;

        $b9 = d4 cmpl d30;

        if $b9 <= 0 goto label03;

        d32 = d30 / d4;

        $d24 = d27 * d32;

        $d25 = $d24 * d32;

        d27 = 1.0 + $d25;

        d30 = d4;

        goto label07;

     label03:
        d33 = d4 / d30;

        $d23 = d33 * d33;

        d27 = d27 + $d23;

        goto label07;

     label04:
        $b7 = d4 cmpl d31;

        if $b7 <= 0 goto label05;

        d34 = d31 / d4;

        $d21 = d29 * d34;

        $d22 = $d21 * d34;

        d29 = 1.0 + $d22;

        d31 = d4;

        goto label07;

     label05:
        $b8 = d4 cmpl 0.0;

        if $b8 == 0 goto label07;

        d35 = d4 / d31;

        $d20 = d35 * d35;

        d29 = d29 + $d20;

        goto label07;

     label06:
        $d26 = d4 * d4;

        d28 = d28 + $d26;

     label07:
        i11 = i11 + 1;

        goto label01;

     label08:
        $b2 = d27 cmpl 0.0;

        if $b2 == 0 goto label09;

        $d15 = d28 / d30;

        $d16 = $d15 / d30;

        $d17 = d27 + $d16;

        $d18 = staticinvoke <java.lang.Math: double sqrt(double)>($d17);

        d36 = d30 * $d18;

        goto label12;

     label09:
        $b3 = d28 cmpl 0.0;

        if $b3 != 0 goto label10;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>(d29);

        d36 = d31 * $d14;

        goto label12;

     label10:
        $b4 = d28 cmpl d31;

        if $b4 < 0 goto label11;

        $d10 = d31 / d28;

        $d9 = d31 * d29;

        $d11 = $d10 * $d9;

        $d12 = 1.0 + $d11;

        $d13 = d28 * $d12;

        d36 = staticinvoke <java.lang.Math: double sqrt(double)>($d13);

        goto label12;

     label11:
        $d6 = d28 / d31;

        $d5 = d31 * d29;

        $d7 = $d6 + $d5;

        $d8 = d31 * $d7;

        d36 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

     label12:
        return d36;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        long[] $r1;

        <org.apache.commons.math.util.MathUtils: int SGN_MASK_FLOAT> = -2147483648;

        <org.apache.commons.math.util.MathUtils: long SGN_MASK> = -9223372036854775808L;

        <org.apache.commons.math.util.MathUtils: int NAN_GAP> = 4194304;

        <org.apache.commons.math.util.MathUtils: short ZS> = 0;

        <org.apache.commons.math.util.MathUtils: byte ZB> = 0;

        <org.apache.commons.math.util.MathUtils: short PS> = 1;

        <org.apache.commons.math.util.MathUtils: byte PB> = 1;

        <org.apache.commons.math.util.MathUtils: short NS> = -1;

        <org.apache.commons.math.util.MathUtils: byte NB> = -1;

        <org.apache.commons.math.util.MathUtils: double TWO_PI> = 6.283185307179586;

        <org.apache.commons.math.util.MathUtils: double SAFE_MIN> = 2.2250738585072014E-308;

        <org.apache.commons.math.util.MathUtils: double EPSILON> = 1.1102230246251565E-16;

        $r0 = class "org/apache/commons/math/util/MathUtils";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.commons.math.util.MathUtils: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (long)[21];

        $r1[0] = 1L;

        $r1[1] = 1L;

        $r1[2] = 2L;

        $r1[3] = 6L;

        $r1[4] = 24L;

        $r1[5] = 120L;

        $r1[6] = 720L;

        $r1[7] = 5040L;

        $r1[8] = 40320L;

        $r1[9] = 362880L;

        $r1[10] = 3628800L;

        $r1[11] = 39916800L;

        $r1[12] = 479001600L;

        $r1[13] = 6227020800L;

        $r1[14] = 87178291200L;

        $r1[15] = 1307674368000L;

        $r1[16] = 20922789888000L;

        $r1[17] = 355687428096000L;

        $r1[18] = 6402373705728000L;

        $r1[19] = 121645100408832000L;

        $r1[20] = 2432902008176640000L;

        <org.apache.commons.math.util.MathUtils: long[] FACTORIALS> = $r1;

        return;
    }
}
