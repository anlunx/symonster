public class com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle extends java.lang.Object
{
    private final java.util.List _derivatives;
    private final double[] _marketValues;
    private final com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves;
    private final java.util.LinkedHashMap _unknownCurveNodePoints;
    private final java.util.LinkedHashMap _unknownCurveInterpolators;
    private final int _totalNodes;
    private final java.util.List _names;
    private final boolean _useFiniteDifferenceByDefault;
    private final com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix;

    private void <init>(java.util.List, double[], com.opengamma.analytics.financial.interestrate.YieldCurveBundle, java.util.LinkedHashMap, java.util.LinkedHashMap, boolean, com.opengamma.analytics.financial.forex.method.FXMatrix, int, java.util.List)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List r1, r7;
        double[] r2;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r3;
        java.util.LinkedHashMap r4, r5;
        boolean z0;
        com.opengamma.analytics.financial.forex.method.FXMatrix r6;
        int i0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: java.util.LinkedHashMap;

        z0 := @parameter5: boolean;

        r6 := @parameter6: com.opengamma.analytics.financial.forex.method.FXMatrix;

        i0 := @parameter7: int;

        r7 := @parameter8: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives> = r1;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues> = r2;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves> = r3;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints> = r4;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators> = r5;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault> = z0;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = r6;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: int _totalNodes> = i0;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _names> = r7;

        return;
    }

    public void <init>(java.util.List, double[], com.opengamma.analytics.financial.interestrate.YieldCurveBundle, java.util.LinkedHashMap, java.util.LinkedHashMap, boolean, com.opengamma.analytics.financial.forex.method.FXMatrix)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List r1, $r47;
        double[] r2, r61;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r3;
        java.util.LinkedHashMap r4, r5;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7;
        com.opengamma.analytics.financial.forex.method.FXMatrix r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.Object[] $r14;
        java.lang.Integer $r15, $r16;
        java.util.Set $r18, $r19, $r50;
        java.util.ArrayList $r20;
        java.util.Collection $r21;
        java.lang.IllegalArgumentException $r22, $r48, $r49, $r52;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r27, $r28, $r36, $r37, $r38, $r42, $r43, $r44;
        java.lang.String $r29, $r39, $r45, r54, r59;
        java.lang.Object $r30, $r31, $r32, $r33, $r34, $r35, $r41, $r51;
        java.util.Iterator r53, r55, r56, r60;
        java.util.Map$Entry r57, r58;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: double[];

        r3 := @parameter2: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: java.util.LinkedHashMap;

        z0 := @parameter5: boolean;

        r6 := @parameter6: com.opengamma.analytics.financial.forex.method.FXMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "derivatives");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r1, "derivatives");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "market values null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "unknown curve node points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r5, "unknown curve interpolators");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Map notEmpty(java.util.Map,java.lang.String)>(r4, "unknown curve node points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Map notEmpty(java.util.Map,java.lang.String)>(r5, "unknown curve interpolators");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = lengthof r2;

        if $i0 != $i1 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $r14 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r14[0] = $r15;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r14[1] = $r16;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z7, "marketValues wrong length; must be one par rate per derivative (have {} values for {} derivatives", $r14);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r6, "FX matrix");

        if r3 == null goto label06;

        $r50 = virtualinvoke r3.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        r53 = interfaceinvoke $r50.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r51 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.lang.String) $r51;

        $z6 = virtualinvoke r5.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r54);

        if $z6 == 0 goto label04;

        $r52 = new java.lang.IllegalArgumentException;

        specialinvoke $r52.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Curve name in known set matches one to be solved for");

        throw $r52;

     label04:
        goto label03;

     label05:
        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves> = r3;

        goto label07;

     label06:
        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves> = null;

     label07:
        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives> = r1;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues> = r2;

        $i4 = virtualinvoke r4.<java.util.LinkedHashMap: int size()>();

        $i5 = virtualinvoke r5.<java.util.LinkedHashMap: int size()>();

        if $i4 == $i5 goto label08;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of unknown curves not the same as curve interpolators");

        throw $r49;

     label08:
        $r18 = virtualinvoke r4.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r55 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

        $r19 = virtualinvoke r5.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r56 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _names> = $r20;

     label09:
        $z1 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r31 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.util.Map$Entry) $r31;

        $r32 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r58 = (java.util.Map$Entry) $r32;

        $r33 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getKey()>();

        r59 = (java.lang.String) $r33;

        $r34 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z3 = virtualinvoke r59.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z3 != 0 goto label10;

        $r48 = new java.lang.IllegalArgumentException;

        specialinvoke $r48.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Names must be the same");

        throw $r48;

     label10:
        $r35 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("curve node points for ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r35, $r39);

        $r41 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interpolator for ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r41, $r45);

        $r47 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _names>;

        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>(r59);

        goto label09;

     label11:
        i9 = 0;

        $r21 = virtualinvoke r4.<java.util.LinkedHashMap: java.util.Collection values()>();

        r60 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r30 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (double[]) $r30;

        $i8 = lengthof r61;

        i9 = i9 + $i8;

        goto label12;

     label13:
        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        if i9 <= $i6 goto label14;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total number of nodes (");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is greater than the number of instruments (");

        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label14:
        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: int _totalNodes> = i9;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints> = r4;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators> = r5;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault> = z0;

        r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = r6;

        return;
    }

    public static com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle withAllCurves(java.util.List, double[], com.opengamma.analytics.financial.interestrate.YieldCurveBundle, java.util.LinkedHashMap, java.util.LinkedHashMap, boolean, com.opengamma.analytics.financial.forex.method.FXMatrix)
    {
        java.util.List r0;
        double[] r1, r57;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        java.util.LinkedHashMap r3, r4;
        boolean z0, $z1, $z4, $z5, $z6, $z7, $z8, $z9;
        com.opengamma.analytics.financial.forex.method.FXMatrix r5;
        java.util.Iterator r6, r52, r54, r56, r59;
        java.util.Map$Entry r7, r8;
        java.lang.String r9, $r34, $r40, r53, r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.Object[] $r17;
        java.lang.Integer $r18, $r19;
        java.util.Collection $r21;
        java.util.ArrayList $r22;
        java.util.Set $r23, $r24, $r43, $r45, $r49;
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle $r25;
        java.lang.Object $r26, $r27, $r28, $r29, $r30, $r36, $r44, $r46, $r50;
        java.lang.StringBuilder $r31, $r32, $r33, $r37, $r38, $r39;
        java.lang.IllegalArgumentException $r42, $r48, $r51;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r47;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: double[];

        r2 := @parameter2: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        r3 := @parameter3: java.util.LinkedHashMap;

        r4 := @parameter4: java.util.LinkedHashMap;

        z0 := @parameter5: boolean;

        r5 := @parameter6: com.opengamma.analytics.financial.forex.method.FXMatrix;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r0, "derivatives");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Iterable noNulls(java.lang.Iterable,java.lang.String)>(r0, "derivatives");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "market values null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "unknown curve node points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "unknown curve interpolators");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Map notEmpty(java.util.Map,java.lang.String)>(r3, "unknown curve node points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Map notEmpty(java.util.Map,java.lang.String)>(r4, "unknown curve interpolators");

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = lengthof r1;

        if $i0 != $i1 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $r17 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r17[0] = $r18;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r17[1] = $r19;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z7, "marketValues wrong length; must be one par rate per derivative (have {} values for {} derivatives", $r17);

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r5, "FX matrix");

        if r2 == null goto label05;

        $r49 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        r52 = interfaceinvoke $r49.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r50 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.lang.String) $r50;

        $z6 = virtualinvoke r4.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r53);

        if $z6 == 0 goto label04;

        $r51 = new java.lang.IllegalArgumentException;

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Curve name in known set matches one to be solved for");

        throw $r51;

     label04:
        goto label03;

     label05:
        $i4 = virtualinvoke r3.<java.util.LinkedHashMap: int size()>();

        $i5 = virtualinvoke r4.<java.util.LinkedHashMap: int size()>();

        if $i4 == $i5 goto label06;

        $r48 = new java.lang.IllegalArgumentException;

        specialinvoke $r48.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of unknown curves not the same as curve interpolators");

        throw $r48;

     label06:
        i8 = 0;

        if r2 == null goto label08;

        $r45 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        r54 = interfaceinvoke $r45.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r46 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.lang.String) $r46;

        $r47 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r55);

        $i7 = virtualinvoke $r47.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: int getNumberOfParameters()>();

        i8 = i8 + $i7;

        goto label07;

     label08:
        $r21 = virtualinvoke r3.<java.util.LinkedHashMap: java.util.Collection values()>();

        r56 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r44 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (double[]) $r44;

        $i6 = lengthof r57;

        i8 = i8 + $i6;

        goto label09;

     label10:
        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        if r2 == null goto label11;

        $r43 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        interfaceinvoke $r22.<java.util.List: boolean addAll(java.util.Collection)>($r43);

     label11:
        $r23 = virtualinvoke r3.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r59 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

        $r24 = virtualinvoke r4.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z9 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label14;

        $r26 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r26;

        $r27 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r28;

        $r29 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z1 != 0 goto label13;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Names must be the same");

        throw $r42;

     label13:
        $r30 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("curve node points for ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r30, $r34);

        $r36 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interpolator for ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>($r36, $r40);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label12;

     label14:
        $r25 = new com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        specialinvoke $r25.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: void <init>(java.util.List,double[],com.opengamma.analytics.financial.interestrate.YieldCurveBundle,java.util.LinkedHashMap,java.util.LinkedHashMap,boolean,com.opengamma.analytics.financial.forex.method.FXMatrix,int,java.util.List)>(r0, r1, r2, r3, r4, z0, r5, i8, $r22);

        return $r25;
    }

    public java.util.List getDerivatives()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        return $r1;
    }

    public com.opengamma.analytics.financial.interestrate.YieldCurveBundle getKnownCurves()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        return $r1;
    }

    public java.util.LinkedHashMap getUnknownCurveNodePoints()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        return $r1;
    }

    public java.util.LinkedHashMap getUnknownCurveInterpolators()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators>;

        return $r1;
    }

    public int getNumInstruments()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int getTotalNodes()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $i0 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: int _totalNodes>;

        return $i0;
    }

    public com.opengamma.analytics.financial.interestrate.InstrumentDerivative getDerivative(int)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative $r3;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.opengamma.analytics.financial.interestrate.InstrumentDerivative) $r2;

        return $r3;
    }

    public double getMarketValue(int)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues>;

        $d0 = $r1[i0];

        return $d0;
    }

    public boolean useFiniteDifferenceForNodeSensitivities()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $z0 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault>;

        return $z0;
    }

    public com.opengamma.analytics.financial.forex.method.FXMatrix getFXMatrix()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        return $r1;
    }

    public double[] getCurveNodePointsForCurve(java.lang.String)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.lang.String r1, $r11;
        double[] r2;
        java.util.LinkedHashMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "name");

        $r4 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (double[]) $r5;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data for name ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        return r2;
    }

    public int getNumberOfPointsForCurve(java.lang.String)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.lang.String r1, $r10;
        java.util.LinkedHashMap $r3, $r15;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle $r4, $r11, $r13;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.Boolean $r12;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r14;
        int $i0, $i1;
        java.lang.Object $r16;
        double[] $r17;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "name");

        $r3 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $z0 = virtualinvoke $r3.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r15 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $r16 = virtualinvoke $r15.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r17 = (double[]) $r16;

        $i1 = lengthof $r17;

        return $i1;

     label1:
        $r4 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        if $r4 == null goto label2;

        $r11 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.lang.Boolean containsName(java.lang.String)>(r1);

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        $r13 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r1);

        $i0 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: int getNumberOfParameters()>();

        return $i0;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data for name ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolatorForCurve(java.lang.String)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.lang.String r1, $r11;
        com.opengamma.analytics.math.interpolation.Interpolator1D r2;
        java.util.LinkedHashMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "name");

        $r4 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.opengamma.analytics.math.interpolation.Interpolator1D) $r5;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data for name ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        return r2;
    }

    public java.util.List getCurveNames()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _names>;

        return $r1;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0;
        java.util.List $r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, $i15, i16, i17, i18, i19, i21, i22;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle $r2, $r3;
        double[] $r4;
        java.util.LinkedHashMap $r5, $r6;
        boolean $z0;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r7;
        short $s20;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        $i2 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        i14 = $i1 + $i2;

        $i3 = 31 * i14;

        $r2 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        if $r2 != null goto label1;

        $i15 = 0;

        goto label2;

     label1:
        $r3 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        $i15 = virtualinvoke $r3.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: int hashCode()>();

     label2:
        i16 = $i3 + $i15;

        $i4 = 31 * i16;

        $r4 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues>;

        $i5 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r4);

        i17 = $i4 + $i5;

        $i6 = 31 * i17;

        $r5 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators>;

        $i7 = virtualinvoke $r5.<java.util.LinkedHashMap: int hashCode()>();

        i18 = $i6 + $i7;

        $i8 = 31 * i18;

        $r6 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $i9 = virtualinvoke $r6.<java.util.LinkedHashMap: int hashCode()>();

        i19 = $i8 + $i9;

        $i10 = 31 * i19;

        $z0 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault>;

        if $z0 == 0 goto label3;

        $s20 = 1231;

        goto label4;

     label3:
        $s20 = 1237;

     label4:
        i21 = $i10 + $s20;

        $i11 = 31 * i21;

        $r7 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $i12 = virtualinvoke $r7.<com.opengamma.analytics.financial.forex.method.FXMatrix: int hashCode()>();

        i22 = $i11 + $i12;

        return i22;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double[] $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r7, $r8;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle $r9, $r10;
        java.util.LinkedHashMap $r11, $r12, $r13, $r14;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r15, $r16;

        r0 := @this: com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 != null goto label02;

        return 0;

     label02:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label03;

        return 0;

     label03:
        r2 = (com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle) r1;

        $r6 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues>;

        $r5 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: double[] _marketValues>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        $r8 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        $r7 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.List _derivatives>;

        $z1 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z1 != 0 goto label05;

        return 0;

     label05:
        $r10 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        $r9 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle _knownCurves>;

        $z2 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z2 != 0 goto label06;

        return 0;

     label06:
        $r12 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators>;

        $r11 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveInterpolators>;

        $z3 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11);

        if $z3 != 0 goto label07;

        return 0;

     label07:
        $r14 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $r13 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: java.util.LinkedHashMap _unknownCurveNodePoints>;

        $z4 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r13);

        if $z4 != 0 goto label08;

        return 0;

     label08:
        $z6 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault>;

        $z5 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: boolean _useFiniteDifferenceByDefault>;

        if $z6 == $z5 goto label09;

        return 0;

     label09:
        $r16 = r0.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $r15 = r2.<com.opengamma.analytics.financial.interestrate.MultipleYieldCurveFinderDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $z7 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15);

        if $z7 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }
}
