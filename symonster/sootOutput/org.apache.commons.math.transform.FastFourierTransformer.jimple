public class org.apache.commons.math.transform.FastFourierTransformer extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots;

    public void <init>()
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r1;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity;

        specialinvoke $r1.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void <init>()>();

        r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots> = $r1;

        return;
    }

    public org.apache.commons.math.complex.Complex[] transform(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        double[] r1;
        org.apache.commons.math.complex.Complex[] $r2;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.commons.math.complex.Complex[] transform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1;
        int i0;
        double[] r2;
        org.apache.commons.math.complex.Complex[] $r3;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r2, 0);

        return $r3;
    }

    public org.apache.commons.math.complex.Complex[] transform(org.apache.commons.math.complex.Complex[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.complex.Complex[] r1, $r3;
        int $i0;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r2;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        $r2 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $i0 = lengthof r1;

        virtualinvoke $r2.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[])>(r1);

        return $r3;
    }

    public org.apache.commons.math.complex.Complex[] transform2(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        double[] r1;
        double d0, $d1, $d2;
        int $i0;
        org.apache.commons.math.complex.Complex[] $r2, $r3;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        d0 = 1.0 / $d2;

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r1, 0);

        $r3 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r2, d0);

        return $r3;
    }

    public org.apache.commons.math.complex.Complex[] transform2(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4;
        int i0;
        double[] r2;
        org.apache.commons.math.complex.Complex[] $r3, $r4;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $d3 = (double) i0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d3);

        d2 = 1.0 / $d4;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r2, 0);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d2);

        return $r4;
    }

    public org.apache.commons.math.complex.Complex[] transform2(org.apache.commons.math.complex.Complex[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.complex.Complex[] r1, $r3, $r4;
        double d0, $d1, $d2;
        int $i0, $i1;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r2;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        $r2 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $i0 = lengthof r1;

        virtualinvoke $r2.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i0);

        $i1 = lengthof r1;

        $d1 = (double) $i1;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        d0 = 1.0 / $d2;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[])>(r1);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d0);

        return $r4;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        double[] r1;
        double d0, $d1;
        int $i0;
        org.apache.commons.math.complex.Complex[] $r2, $r3;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        d0 = 1.0 / $d1;

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r1, 1);

        $r3 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r2, d0);

        return $r3;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3;
        int i0;
        double[] r2;
        org.apache.commons.math.complex.Complex[] $r3, $r4;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $d3 = (double) i0;

        d2 = 1.0 / $d3;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r2, 1);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d2);

        return $r4;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform(org.apache.commons.math.complex.Complex[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.complex.Complex[] r1, $r3, $r4;
        double d0, $d1;
        int $i0, $i1, $i2;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r2;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        $r2 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $i0 = lengthof r1;

        $i1 = neg $i0;

        virtualinvoke $r2.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i1);

        $i2 = lengthof r1;

        $d1 = (double) $i2;

        d0 = 1.0 / $d1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[])>(r1);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d0);

        return $r4;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform2(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        double[] r1;
        double d0, $d1, $d2;
        int $i0;
        org.apache.commons.math.complex.Complex[] $r2, $r3;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        d0 = 1.0 / $d2;

        $r2 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r1, 1);

        $r3 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r2, d0);

        return $r3;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform2(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4;
        int i0;
        double[] r2;
        org.apache.commons.math.complex.Complex[] $r3, $r4;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,int)>(r1, d0, d1, i0);

        $d3 = (double) i0;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d3);

        d2 = 1.0 / $d4;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(double[],boolean)>(r2, 1);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d2);

        return $r4;
    }

    public org.apache.commons.math.complex.Complex[] inversetransform2(org.apache.commons.math.complex.Complex[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.complex.Complex[] r1, $r3, $r4;
        double d0, $d1, $d2;
        int $i0, $i1, $i2;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r2;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        $r2 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $i0 = lengthof r1;

        $i1 = neg $i0;

        virtualinvoke $r2.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i1);

        $i2 = lengthof r1;

        $d1 = (double) $i2;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        d0 = 1.0 / $d2;

        $r3 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[])>(r1);

        $r4 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>($r3, d0);

        return $r4;
    }

    protected org.apache.commons.math.complex.Complex[] fft(double[], boolean) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        double[] r1;
        boolean z0;
        org.apache.commons.math.complex.Complex[] r2, r3, $r16, r29;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13;
        org.apache.commons.math.complex.Complex r4, r5, r6, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r8, $r9, $r21, $r22;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: void verifyDataSet(double[])>(r1);

        $i1 = lengthof r1;

        r2 = newarray (org.apache.commons.math.complex.Complex)[$i1];

        $i2 = lengthof r1;

        if $i2 != 1 goto label1;

        $r28 = new org.apache.commons.math.complex.Complex;

        $d13 = r1[0];

        specialinvoke $r28.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d13, 0.0);

        r2[0] = $r28;

        return r2;

     label1:
        $i3 = lengthof r1;

        i0 = $i3 >> 1;

        r3 = newarray (org.apache.commons.math.complex.Complex)[i0];

        i10 = 0;

     label2:
        if i10 >= i0 goto label3;

        $r27 = new org.apache.commons.math.complex.Complex;

        $i7 = 2 * i10;

        $d12 = r1[$i7];

        $i8 = 2 * i10;

        $i9 = $i8 + 1;

        $d11 = r1[$i9];

        specialinvoke $r27.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d12, $d11);

        r3[i10] = $r27;

        i10 = i10 + 1;

        goto label2;

     label3:
        $r8 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        if z0 == 0 goto label4;

        $i11 = neg i0;

        goto label5;

     label4:
        $i11 = i0;

     label5:
        virtualinvoke $r8.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i11);

        r29 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[])>(r3);

        $r9 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        if z0 == 0 goto label6;

        $i12 = -2 * i0;

        goto label7;

     label6:
        $i12 = 2 * i0;

     label7:
        virtualinvoke $r9.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: void computeOmega(int)>($i12);

        $r10 = new org.apache.commons.math.complex.Complex;

        $r11 = r29[0];

        $d0 = virtualinvoke $r11.<org.apache.commons.math.complex.Complex: double getReal()>();

        $r12 = r29[0];

        $d1 = virtualinvoke $r12.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d2 = $d0 + $d1;

        $d3 = 2.0 * $d2;

        specialinvoke $r10.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d3, 0.0);

        r2[0] = $r10;

        $r13 = new org.apache.commons.math.complex.Complex;

        $r14 = r29[0];

        $d4 = virtualinvoke $r14.<org.apache.commons.math.complex.Complex: double getReal()>();

        $r15 = r29[0];

        $d5 = virtualinvoke $r15.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d6 = $d4 - $d5;

        $d7 = 2.0 * $d6;

        specialinvoke $r13.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d7, 0.0);

        r2[i0] = $r13;

        i13 = 1;

     label8:
        if i13 >= i0 goto label9;

        $i4 = i0 - i13;

        $r17 = r29[$i4];

        r4 = virtualinvoke $r17.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex conjugate()>();

        $r18 = r29[i13];

        r5 = virtualinvoke $r18.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>(r4);

        $r19 = r29[i13];

        r6 = virtualinvoke $r19.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>(r4);

        $r20 = new org.apache.commons.math.complex.Complex;

        $r21 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $d8 = virtualinvoke $r21.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: double getOmegaImaginary(int)>(i13);

        $d9 = neg $d8;

        $r22 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $d10 = virtualinvoke $r22.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: double getOmegaReal(int)>(i13);

        specialinvoke $r20.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d9, $d10);

        $r23 = virtualinvoke r6.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r20);

        $r24 = virtualinvoke r5.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r23);

        r2[i13] = $r24;

        $i5 = 2 * i0;

        $i6 = $i5 - i13;

        $r25 = r2[i13];

        $r26 = virtualinvoke $r25.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex conjugate()>();

        r2[$i6] = $r26;

        i13 = i13 + 1;

        goto label8;

     label9:
        $r16 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[],double)>(r2, 0.5);

        return $r16;
    }

    protected org.apache.commons.math.complex.Complex[] fft(org.apache.commons.math.complex.Complex[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.complex.Complex[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33;
        org.apache.commons.math.complex.Complex r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, r42, r43, r44, r45, r46, $r47, $r48;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity $r5, $r6, $r30, $r31;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.complex.Complex[];

        i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math.complex.Complex)[i0];

        staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: void verifyDataSet(java.lang.Object[])>(r1);

        if i0 != 1 goto label01;

        $r41 = r1[0];

        r2[0] = $r41;

        return r2;

     label01:
        if i0 != 2 goto label02;

        $r36 = r1[0];

        $r35 = r1[1];

        $r37 = virtualinvoke $r36.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r35);

        r2[0] = $r37;

        $r39 = r1[0];

        $r38 = r1[1];

        $r40 = virtualinvoke $r39.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r38);

        r2[1] = $r40;

        return r2;

     label02:
        i25 = 0;

        i26 = 0;

     label03:
        if i26 >= i0 goto label06;

        $r34 = r1[i25];

        r2[i26] = $r34;

        i27 = i0 >> 1;

     label04:
        if i25 < i27 goto label05;

        if i27 <= 0 goto label05;

        i25 = i25 - i27;

        i27 = i27 >> 1;

        goto label04;

     label05:
        i25 = i25 + i27;

        i26 = i26 + 1;

        goto label03;

     label06:
        i28 = 0;

     label07:
        if i28 >= i0 goto label12;

        $r17 = r2[i28];

        $i16 = i28 + 1;

        $r16 = r2[$i16];

        r42 = virtualinvoke $r17.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r16);

        $i17 = i28 + 2;

        $r19 = r2[$i17];

        $i18 = i28 + 3;

        $r18 = r2[$i18];

        r43 = virtualinvoke $r19.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r18);

        $r21 = r2[i28];

        $i19 = i28 + 1;

        $r20 = r2[$i19];

        r44 = virtualinvoke $r21.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r20);

        $i20 = i28 + 2;

        $r23 = r2[$i20];

        $i21 = i28 + 3;

        $r22 = r2[$i21];

        r45 = virtualinvoke $r23.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r22);

        $r24 = <org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex I>;

        $r25 = virtualinvoke r45.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r24);

        r46 = virtualinvoke r44.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r25);

        $r26 = <org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex I>;

        $r27 = virtualinvoke r45.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex)>($r26);

        r3 = virtualinvoke r44.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r27);

        $r28 = virtualinvoke r42.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>(r43);

        r2[i28] = $r28;

        $i22 = i28 + 2;

        $r29 = virtualinvoke r42.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>(r43);

        r2[$i22] = $r29;

        $i23 = i28 + 1;

        $r30 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $z0 = virtualinvoke $r30.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: boolean isForward()>();

        if $z0 == 0 goto label08;

        $r47 = r3;

        goto label09;

     label08:
        $r47 = r46;

     label09:
        r2[$i23] = $r47;

        $i24 = i28 + 3;

        $r31 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        $z1 = virtualinvoke $r31.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: boolean isForward()>();

        if $z1 == 0 goto label10;

        $r48 = r46;

        goto label11;

     label10:
        $r48 = r3;

     label11:
        r2[$i24] = $r48;

        i28 = i28 + 4;

        goto label07;

     label12:
        i29 = 4;

     label13:
        if i29 >= i0 goto label18;

        $i1 = i29 << 1;

        i30 = i0 / $i1;

        i31 = 0;

     label14:
        if i31 >= i0 goto label17;

        i32 = 0;

     label15:
        if i32 >= i29 goto label16;

        i33 = i32 * i30;

        $r5 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        d11 = virtualinvoke $r5.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: double getOmegaReal(int)>(i33);

        $r6 = r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity roots>;

        d0 = virtualinvoke $r6.<org.apache.commons.math.transform.FastFourierTransformer$RootsOfUnity: double getOmegaImaginary(int)>(i33);

        $r7 = new org.apache.commons.math.complex.Complex;

        $i3 = i29 + i31;

        $i4 = $i3 + i32;

        $r8 = r2[$i4];

        $d1 = virtualinvoke $r8.<org.apache.commons.math.complex.Complex: double getReal()>();

        $d2 = $d1 * d11;

        $i5 = i29 + i31;

        $i6 = $i5 + i32;

        $r9 = r2[$i6];

        $d3 = virtualinvoke $r9.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d4 = $d3 * d0;

        $d5 = $d2 - $d4;

        $i7 = i29 + i31;

        $i8 = $i7 + i32;

        $r10 = r2[$i8];

        $d6 = virtualinvoke $r10.<org.apache.commons.math.complex.Complex: double getReal()>();

        $d7 = $d6 * d0;

        $i9 = i29 + i31;

        $i10 = $i9 + i32;

        $r11 = r2[$i10];

        $d8 = virtualinvoke $r11.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d9 = $d8 * d11;

        $d10 = $d7 + $d9;

        specialinvoke $r7.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d5, $d10);

        $i11 = i29 + i31;

        $i13 = $i11 + i32;

        $i12 = i31 + i32;

        $r12 = r2[$i12];

        $r13 = virtualinvoke $r12.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex)>($r7);

        r2[$i13] = $r13;

        $i15 = i31 + i32;

        $i14 = i31 + i32;

        $r14 = r2[$i14];

        $r15 = virtualinvoke $r14.<org.apache.commons.math.complex.Complex: org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex)>($r7);

        r2[$i15] = $r15;

        i32 = i32 + 1;

        goto label15;

     label16:
        $i2 = i29 << 1;

        i31 = i31 + $i2;

        goto label14;

     label17:
        i29 = i29 << 1;

        goto label13;

     label18:
        return r2;
    }

    public static double[] sample(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, int) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.analysis.UnivariateRealFunction r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int i0, i1;
        double[] r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        if i0 > 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_NUMBER_OF_SAMPLES>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r5;

     label1:
        staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: void verifyInterval(double,double)>(d0, d1);

        r1 = newarray (double)[i0];

        $d4 = d1 - d0;

        $d3 = (double) i0;

        d2 = $d4 / $d3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d5 = (double) i1;

        $d6 = $d5 * d2;

        $d7 = d0 + $d6;

        $d8 = interfaceinvoke r0.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>($d7);

        r1[i1] = $d8;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static double[] scaleArray(double[], double)
    {
        double[] r0;
        double d0, $d1, $d2;
        int $i0, i1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d2 = $d1 * d0;

        r0[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static org.apache.commons.math.complex.Complex[] scaleArray(org.apache.commons.math.complex.Complex[], double)
    {
        org.apache.commons.math.complex.Complex[] r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0, i1;
        org.apache.commons.math.complex.Complex $r1, $r2, $r3;

        r0 := @parameter0: org.apache.commons.math.complex.Complex[];

        d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = new org.apache.commons.math.complex.Complex;

        $r2 = r0[i1];

        $d1 = virtualinvoke $r2.<org.apache.commons.math.complex.Complex: double getReal()>();

        $d2 = d0 * $d1;

        $r3 = r0[i1];

        $d3 = virtualinvoke $r3.<org.apache.commons.math.complex.Complex: double getImaginary()>();

        $d4 = d0 * $d3;

        specialinvoke $r1.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d2, $d4);

        r0[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static boolean isPowerOf2(long)
    {
        long l0, $l2, $l3;
        byte $b1, $b4;
        boolean $z0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l2 = l0 - 1L;

        $l3 = l0 & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void verifyDataSet(double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0;
        int $i0, $i2;
        long $l1;
        boolean $z0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $l1 = (long) $i0;

        $z0 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: boolean isPowerOf2(long)>($l1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r1 = newarray (java.lang.Object)[1];

        $i2 = lengthof r0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        return;
    }

    public static void verifyDataSet(java.lang.Object[]) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] r0, $r1;
        int $i0, $i2;
        long $l1;
        boolean $z0;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $l1 = (long) $i0;

        $z0 = staticinvoke <org.apache.commons.math.transform.FastFourierTransformer: boolean isPowerOf2(long)>($l1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r1 = newarray (java.lang.Object)[1];

        $i2 = lengthof r0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        return;
    }

    public static void verifyInterval(double, double) throws java.lang.IllegalArgumentException
    {
        double d0, d1;
        byte $b0;
        java.lang.Object[] $r0;
        org.apache.commons.math.exception.util.LocalizedFormats $r1;
        java.lang.Double $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r1 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ENDPOINTS_NOT_AN_INTERVAL>;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r0[1] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r1, $r0);

        throw $r4;

     label1:
        return;
    }

    public java.lang.Object mdfft(java.lang.Object, boolean) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        java.lang.Object r1, $r5, $r6;
        boolean z0;
        org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r2, $r4;
        int[] r3, $r7;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r4 = new org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        specialinvoke $r4.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void <init>(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object clone()>();

        r2 = (org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix) $r5;

        r3 = virtualinvoke r2.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] getDimensionSizes()>();

        i1 = 0;

     label1:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label2;

        $r7 = newarray (int)[0];

        specialinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: void mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,boolean,int,int[])>(r2, z0, i1, $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r2.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object getArray()>();

        return $r6;
    }

    private void mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix, boolean, int, int[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.transform.FastFourierTransformer r0;
        org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r1;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, i15;
        int[] r2, r3, r9;
        org.apache.commons.math.complex.Complex $r4, $r6;
        org.apache.commons.math.complex.Complex[] r7, r8;

        r0 := @this: org.apache.commons.math.transform.FastFourierTransformer;

        r1 := @parameter0: org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: int[];

        r3 = virtualinvoke r1.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] getDimensionSizes()>();

        $i2 = lengthof r2;

        $i1 = lengthof r3;

        if $i2 != $i1 goto label07;

        $i10 = r3[i0];

        r7 = newarray (org.apache.commons.math.complex.Complex)[$i10];

        i12 = 0;

     label01:
        $i11 = r3[i0];

        if i12 >= $i11 goto label02;

        r2[i0] = i12;

        $r6 = virtualinvoke r1.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math.complex.Complex get(int[])>(r2);

        r7[i12] = $r6;

        i12 = i12 + 1;

        goto label01;

     label02:
        if z0 == 0 goto label03;

        r8 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] transform2(org.apache.commons.math.complex.Complex[])>(r7);

        goto label04;

     label03:
        r8 = virtualinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: org.apache.commons.math.complex.Complex[] inversetransform2(org.apache.commons.math.complex.Complex[])>(r7);

     label04:
        i13 = 0;

     label05:
        $i14 = r3[i0];

        if i13 >= $i14 goto label06;

        r2[i0] = i13;

        $r4 = r8[i13];

        virtualinvoke r1.<org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math.complex.Complex set(org.apache.commons.math.complex.Complex,int[])>($r4, r2);

        i13 = i13 + 1;

        goto label05;

     label06:
        goto label10;

     label07:
        $i3 = lengthof r2;

        $i4 = $i3 + 1;

        r9 = newarray (int)[$i4];

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r9, 0, $i5);

        $i6 = lengthof r2;

        if $i6 != i0 goto label08;

        r9[i0] = 0;

        specialinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: void mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,boolean,int,int[])>(r1, z0, i0, r9);

        goto label10;

     label08:
        i15 = 0;

     label09:
        $i7 = lengthof r2;

        $i8 = r3[$i7];

        if i15 >= $i8 goto label10;

        $i9 = lengthof r2;

        r9[$i9] = i15;

        specialinvoke r0.<org.apache.commons.math.transform.FastFourierTransformer: void mdfft(org.apache.commons.math.transform.FastFourierTransformer$MultiDimensionalComplexMatrix,boolean,int,int[])>(r1, z0, i0, r9);

        i15 = i15 + 1;

        goto label09;

     label10:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.transform.FastFourierTransformer: long serialVersionUID> = 5138259215438106000L;

        return;
    }
}
