public class org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory extends java.lang.Object
{
    private final org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendre;
    private final org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendreHighPrecision;
    private final org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory hermite;

    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory $r1;
        org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory $r2;
        org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory;

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendre> = $r1;

        $r2 = new org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory;

        specialinvoke $r2.<org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendreHighPrecision> = $r2;

        $r3 = new org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory;

        specialinvoke $r3.<org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory hermite> = $r3;

        return;
    }

    public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendre(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        int i0;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator $r1;
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory $r2;
        org.apache.commons.math3.util.Pair $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendre>;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory,int)>($r2, i0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(org.apache.commons.math3.util.Pair)>($r3);

        return $r1;
    }

    public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendre(int, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        int i0;
        double d0, d1;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator $r1;
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory $r2;
        org.apache.commons.math3.util.Pair $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendre>;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory,int)>($r2, i0);

        $r4 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair transform(org.apache.commons.math3.util.Pair,double,double)>($r3, d0, d1);

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(org.apache.commons.math3.util.Pair)>($r4);

        return $r1;
    }

    public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        int i0;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator $r1;
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory $r2;
        org.apache.commons.math3.util.Pair $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendreHighPrecision>;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory,int)>($r2, i0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(org.apache.commons.math3.util.Pair)>($r3);

        return $r1;
    }

    public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        int i0;
        double d0, d1;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator $r1;
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory $r2;
        org.apache.commons.math3.util.Pair $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory legendreHighPrecision>;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory,int)>($r2, i0);

        $r4 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair transform(org.apache.commons.math3.util.Pair,double,double)>($r3, d0, d1);

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(org.apache.commons.math3.util.Pair)>($r4);

        return $r1;
    }

    public org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator hermite(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory r0;
        int i0;
        org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator $r1;
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory $r2;
        org.apache.commons.math3.util.Pair $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory hermite>;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory,int)>($r2, i0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator: void <init>(org.apache.commons.math3.util.Pair)>($r3);

        return $r1;
    }

    private static org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory r0;
        int i0;
        org.apache.commons.math3.util.Pair $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory: org.apache.commons.math3.util.Pair getRule(int)>(i0);

        return $r1;
    }

    private static org.apache.commons.math3.util.Pair transform(org.apache.commons.math3.util.Pair, double, double)
    {
        org.apache.commons.math3.util.Pair r0, $r5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        double[] r1, r2;
        java.lang.Object $r3, $r4;
        int $i0, i1;

        r0 := @parameter0: org.apache.commons.math3.util.Pair;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        r1 = (double[]) $r3;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        r2 = (double[]) $r4;

        $d4 = d1 - d0;

        d2 = $d4 / 2.0;

        d3 = d0 + d2;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d5 = r1[i1];

        $d6 = $d5 * d2;

        $d7 = $d6 + d3;

        r1[i1] = $d7;

        $d8 = r2[i1];

        $d9 = $d8 * d2;

        r2[i1] = $d9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new org.apache.commons.math3.util.Pair;

        specialinvoke $r5.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r5;
    }
}
