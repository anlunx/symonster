public class org.apache.commons.math.linear.Array2DRowFieldMatrix extends org.apache.commons.math.linear.AbstractFieldMatrix implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected org.apache.commons.math.FieldElement[][] data;

    public void <init>(org.apache.commons.math.Field)
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.Field r1;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.Field;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math.Field)>(r1);

        return;
    }

    public void <init>(org.apache.commons.math.Field, int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.Field r1;
        int i0, i1;
        org.apache.commons.math.FieldElement[][] $r2;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math.Field,int,int)>(r1, i0, i1);

        $r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>(r1, i0, i1);

        r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data> = $r2;

        return;
    }

    public void <init>(org.apache.commons.math.FieldElement[][]) throws java.lang.IllegalArgumentException, java.lang.NullPointerException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] r1;
        org.apache.commons.math.Field $r2;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[][];

        $r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field extractField(org.apache.commons.math.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math.Field)>($r2);

        specialinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void copyIn(org.apache.commons.math.FieldElement[][])>(r1);

        return;
    }

    public void <init>(org.apache.commons.math.FieldElement[][], boolean) throws java.lang.IllegalArgumentException, java.lang.NullPointerException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] r1;
        boolean z0;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math.Field $r2;
        org.apache.commons.math.FieldElement[] $r3, $r4, $r8;
        java.lang.Object[] $r5, $r11, $r14;
        org.apache.commons.math.exception.util.LocalizedFormats $r6, $r12, $r15;
        java.lang.Integer $r7, $r9;
        java.lang.IllegalArgumentException $r10, $r13, $r16;
        java.lang.NullPointerException $r17;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[][];

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field extractField(org.apache.commons.math.FieldElement[][])>(r1);

        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math.Field)>($r2);

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void copyIn(org.apache.commons.math.FieldElement[][])>(r1);

        goto label8;

     label1:
        if r1 != null goto label2;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>()>();

        throw $r17;

     label2:
        i0 = lengthof r1;

        if i0 != 0 goto label3;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r14 = newarray (java.lang.Object)[0];

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r16;

     label3:
        $r3 = r1[0];

        i1 = lengthof $r3;

        if i1 != 0 goto label4;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r11 = newarray (java.lang.Object)[0];

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r13;

     label4:
        i4 = 1;

     label5:
        if i4 >= i0 goto label7;

        $r4 = r1[i4];

        $i2 = lengthof $r4;

        if $i2 == i1 goto label6;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r7;

        $r8 = r1[i4];

        $i3 = lengthof $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r10;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data> = r1;

     label8:
        return;
    }

    public void <init>(org.apache.commons.math.FieldElement[])
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[] r1, $r7;
        int i0, i1;
        org.apache.commons.math.Field $r2, $r3;
        org.apache.commons.math.FieldElement[][] $r4, $r5;
        org.apache.commons.math.FieldElement $r6;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[];

        $r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field extractField(org.apache.commons.math.FieldElement[])>(r1);

        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void <init>(org.apache.commons.math.Field)>($r2);

        i0 = lengthof r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $r4 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r3, i0, 1);

        r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r7 = $r5[i1];

        $r6 = r1[i1];

        $r7[0] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math.linear.FieldMatrix createMatrix(int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, $r1;
        int i0, i1;
        org.apache.commons.math.Field $r2;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.Field,int,int)>($r2, i0, i1);

        return $r1;
    }

    public org.apache.commons.math.linear.FieldMatrix copy()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, $r1;
        org.apache.commons.math.FieldElement[][] $r2;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r2 = specialinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] copyOut()>();

        specialinvoke $r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>($r2, 0);

        return $r1;
    }

    public org.apache.commons.math.linear.FieldMatrix add(org.apache.commons.math.linear.FieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, $r3, $r4;
        org.apache.commons.math.linear.FieldMatrix r1, $r6;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math.linear.Array2DRowFieldMatrix) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.linear.Array2DRowFieldMatrix add(org.apache.commons.math.linear.Array2DRowFieldMatrix)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: org.apache.commons.math.linear.FieldMatrix add(org.apache.commons.math.linear.FieldMatrix)>(r1);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.Array2DRowFieldMatrix add(org.apache.commons.math.linear.Array2DRowFieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, r1, $r7;
        int i0, i1, i2, i3;
        org.apache.commons.math.FieldElement[][] r2, $r8, $r9;
        org.apache.commons.math.FieldElement[] r3, r4, r5;
        org.apache.commons.math.Field $r6;
        org.apache.commons.math.FieldElement $r10, $r11, $r13;
        java.lang.Object $r12;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkAdditionCompatible(org.apache.commons.math.linear.FieldMatrix)>(r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r6, i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r8 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r3 = $r8[i2];

        $r9 = r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r4 = $r9[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r11 = r3[i3];

        $r10 = r4[i3];

        $r12 = interfaceinvoke $r11.<org.apache.commons.math.FieldElement: java.lang.Object add(java.lang.Object)>($r10);

        $r13 = (org.apache.commons.math.FieldElement) $r12;

        r5[i3] = $r13;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r7.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r2, 0);

        return $r7;
    }

    public org.apache.commons.math.linear.FieldMatrix subtract(org.apache.commons.math.linear.FieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, $r3, $r4;
        org.apache.commons.math.linear.FieldMatrix r1, $r6;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math.linear.Array2DRowFieldMatrix) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.linear.Array2DRowFieldMatrix subtract(org.apache.commons.math.linear.Array2DRowFieldMatrix)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: org.apache.commons.math.linear.FieldMatrix subtract(org.apache.commons.math.linear.FieldMatrix)>(r1);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.Array2DRowFieldMatrix subtract(org.apache.commons.math.linear.Array2DRowFieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, r1, $r7;
        int i0, i1, i2, i3;
        org.apache.commons.math.FieldElement[][] r2, $r8, $r9;
        org.apache.commons.math.FieldElement[] r3, r4, r5;
        org.apache.commons.math.Field $r6;
        org.apache.commons.math.FieldElement $r10, $r11, $r13;
        java.lang.Object $r12;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkSubtractionCompatible(org.apache.commons.math.linear.FieldMatrix)>(r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r6, i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r8 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r3 = $r8[i2];

        $r9 = r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r4 = $r9[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r11 = r3[i3];

        $r10 = r4[i3];

        $r12 = interfaceinvoke $r11.<org.apache.commons.math.FieldElement: java.lang.Object subtract(java.lang.Object)>($r10);

        $r13 = (org.apache.commons.math.FieldElement) $r12;

        r5[i3] = $r13;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r7 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r7.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r2, 0);

        return $r7;
    }

    public org.apache.commons.math.linear.FieldMatrix multiply(org.apache.commons.math.linear.FieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, $r3, $r4;
        org.apache.commons.math.linear.FieldMatrix r1, $r6;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrix;

     label1:
        $r3 = (org.apache.commons.math.linear.Array2DRowFieldMatrix) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.linear.Array2DRowFieldMatrix multiply(org.apache.commons.math.linear.Array2DRowFieldMatrix)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: org.apache.commons.math.linear.FieldMatrix multiply(org.apache.commons.math.linear.FieldMatrix)>(r1);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.Array2DRowFieldMatrix multiply(org.apache.commons.math.linear.Array2DRowFieldMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0, r1, $r6;
        int i0, i1, i2, i3, i4, i5;
        org.apache.commons.math.FieldElement[][] r2, $r7, $r10;
        org.apache.commons.math.FieldElement[] r3, r4, $r11;
        org.apache.commons.math.Field $r5, $r8;
        java.lang.Object $r9, $r14, $r15;
        org.apache.commons.math.FieldElement $r12, $r13, r16;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkMultiplicationCompatible(org.apache.commons.math.linear.FieldMatrix)>(r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r5, i0, i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        $r7 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r3 = $r7[i3];

        r4 = r2[i3];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        $r8 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $r9 = interfaceinvoke $r8.<org.apache.commons.math.Field: java.lang.Object getZero()>();

        r16 = (org.apache.commons.math.FieldElement) $r9;

        i5 = 0;

     label3:
        if i5 >= i2 goto label4;

        $r13 = r3[i5];

        $r10 = r1.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r11 = $r10[i5];

        $r12 = $r11[i4];

        $r14 = interfaceinvoke $r13.<org.apache.commons.math.FieldElement: java.lang.Object multiply(java.lang.Object)>($r12);

        $r15 = interfaceinvoke r16.<org.apache.commons.math.FieldElement: java.lang.Object add(java.lang.Object)>($r14);

        r16 = (org.apache.commons.math.FieldElement) $r15;

        i5 = i5 + 1;

        goto label3;

     label4:
        r4[i4] = r16;

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r6 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r6.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.FieldElement[][] getData()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] $r1;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = specialinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] copyOut()>();

        return $r1;
    }

    public org.apache.commons.math.FieldElement[][] getDataRef()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] $r1;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        return $r1;
    }

    public void setSubMatrix(org.apache.commons.math.FieldElement[][], int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] r1, $r2, $r5, $r6, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.commons.math.FieldElement[] $r3, $r7, $r9, $r10, $r14;
        org.apache.commons.math.Field $r4;
        java.lang.Object[] $r11, $r17, $r20, $r23, $r27;
        org.apache.commons.math.exception.util.LocalizedFormats $r12, $r18, $r21, $r24, $r28;
        java.lang.Integer $r13, $r15, $r25, $r29;
        java.lang.IllegalArgumentException $r16, $r19, $r22;
        java.lang.IllegalStateException $r26, $r30;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        if $r2 != null goto label8;

        if i0 <= 0 goto label1;

        $r28 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FIRST_ROWS_NOT_INITIALIZED_YET>;

        $r27 = newarray (java.lang.Object)[1];

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r27[0] = $r29;

        $r30 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r28, $r27);

        throw $r30;

     label1:
        if i1 <= 0 goto label2;

        $r24 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats FIRST_COLUMNS_NOT_INITIALIZED_YET>;

        $r23 = newarray (java.lang.Object)[1];

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r23[0] = $r25;

        $r26 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r24, $r23);

        throw $r26;

     label2:
        i2 = lengthof r1;

        if i2 != 0 goto label3;

        $r21 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r20 = newarray (java.lang.Object)[0];

        $r22 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r21, $r20);

        throw $r22;

     label3:
        $r3 = r1[0];

        i3 = lengthof $r3;

        if i3 != 0 goto label4;

        $r18 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r17 = newarray (java.lang.Object)[0];

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r18, $r17);

        throw $r19;

     label4:
        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $i4 = lengthof r1;

        $r5 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r4, $i4, i3);

        r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data> = $r5;

        i9 = 0;

     label5:
        $r6 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $i5 = lengthof $r6;

        if i9 >= $i5 goto label7;

        $r7 = r1[i9];

        $i6 = lengthof $r7;

        if $i6 == i3 goto label6;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r11[0] = $r13;

        $r14 = r1[i9];

        $i8 = lengthof $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r11[1] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r16;

     label6:
        $r10 = r1[i9];

        $r8 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $i7 = i9 + i0;

        $r9 = $r8[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, i1, i3);

        i9 = i9 + 1;

        goto label5;

     label7:
        goto label9;

     label8:
        specialinvoke r0.<org.apache.commons.math.linear.AbstractFieldMatrix: void setSubMatrix(org.apache.commons.math.FieldElement[][],int,int)>(r1, i0, i1);

     label9:
        return;
    }

    public org.apache.commons.math.FieldElement getEntry(int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        int i0, i1, $i2, $i3;
        org.apache.commons.math.FieldElement[][] $r2;
        org.apache.commons.math.FieldElement[] $r3;
        org.apache.commons.math.FieldElement $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        org.apache.commons.math.linear.MatrixIndexException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r3 = $r2[i0];

        $r4 = $r3[i1];

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY>;

        $r7 = newarray (java.lang.Object)[4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r10;

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[2] = $r11;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[3] = $r12;

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setEntry(int, int, org.apache.commons.math.FieldElement) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        int i0, i1, $i2, $i3;
        org.apache.commons.math.FieldElement r1;
        org.apache.commons.math.FieldElement[][] $r3;
        org.apache.commons.math.FieldElement[] $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        org.apache.commons.math.linear.MatrixIndexException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math.FieldElement;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r4 = $r3[i0];

        $r4[i1] = r1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.linear.MatrixIndexException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY>;

        $r7 = newarray (java.lang.Object)[4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r10;

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[2] = $r11;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[3] = $r12;

        specialinvoke $r6.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void addToEntry(int, int, org.apache.commons.math.FieldElement) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        int i0, i1, $i2, $i3;
        org.apache.commons.math.FieldElement r1, $r6, $r9;
        org.apache.commons.math.FieldElement[][] $r3, $r4;
        org.apache.commons.math.FieldElement[] $r5, $r7;
        java.lang.Object $r8;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        org.apache.commons.math.linear.MatrixIndexException $r11;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.Integer $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math.FieldElement;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r7 = $r3[i0];

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r5 = $r4[i0];

        $r6 = $r5[i1];

        $r8 = interfaceinvoke $r6.<org.apache.commons.math.FieldElement: java.lang.Object add(java.lang.Object)>(r1);

        $r9 = (org.apache.commons.math.FieldElement) $r8;

        $r7[i1] = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.commons.math.linear.MatrixIndexException;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY>;

        $r12 = newarray (java.lang.Object)[4];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[1] = $r15;

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r12[2] = $r16;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[3] = $r17;

        specialinvoke $r11.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r11;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void multiplyEntry(int, int, org.apache.commons.math.FieldElement) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        int i0, i1, $i2, $i3;
        org.apache.commons.math.FieldElement r1, $r6, $r9;
        org.apache.commons.math.FieldElement[][] $r3, $r4;
        org.apache.commons.math.FieldElement[] $r5, $r7;
        java.lang.Object $r8;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        org.apache.commons.math.linear.MatrixIndexException $r11;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.Integer $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math.FieldElement;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r7 = $r3[i0];

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r5 = $r4[i0];

        $r6 = $r5[i1];

        $r8 = interfaceinvoke $r6.<org.apache.commons.math.FieldElement: java.lang.Object multiply(java.lang.Object)>(r1);

        $r9 = (org.apache.commons.math.FieldElement) $r8;

        $r7[i1] = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.commons.math.linear.MatrixIndexException;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_SUCH_MATRIX_ENTRY>;

        $r12 = newarray (java.lang.Object)[4];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[1] = $r15;

        $i2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r12[2] = $r16;

        $i3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[3] = $r17;

        specialinvoke $r11.<org.apache.commons.math.linear.MatrixIndexException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r11;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public int getRowDimension()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] $r1, $r2, $r4;
        org.apache.commons.math.FieldElement[] $r3, $r5;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        $r1 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r3 = $r2[0];

        if $r3 != null goto label2;

     label1:
        $i0 = 0;

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r5 = $r4[0];

        $i0 = lengthof $r5;

     label3:
        return $i0;
    }

    public org.apache.commons.math.FieldElement[] operate(org.apache.commons.math.FieldElement[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[] r1, r2, r3;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.Field $r4, $r6;
        org.apache.commons.math.FieldElement[][] $r5;
        java.lang.Object $r7, $r10, $r11;
        org.apache.commons.math.FieldElement $r8, $r9, r17;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.Integer $r14, $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r12 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[1] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r16;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[] buildArray(org.apache.commons.math.Field,int)>($r4, i0);

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        $r5 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r3 = $r5[i4];

        $r6 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math.Field: java.lang.Object getZero()>();

        r17 = (org.apache.commons.math.FieldElement) $r7;

        i5 = 0;

     label3:
        if i5 >= i1 goto label4;

        $r9 = r3[i5];

        $r8 = r1[i5];

        $r10 = interfaceinvoke $r9.<org.apache.commons.math.FieldElement: java.lang.Object multiply(java.lang.Object)>($r8);

        $r11 = interfaceinvoke r17.<org.apache.commons.math.FieldElement: java.lang.Object add(java.lang.Object)>($r10);

        r17 = (org.apache.commons.math.FieldElement) $r11;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = r17;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math.FieldElement[] preMultiply(org.apache.commons.math.FieldElement[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[] r1, r2, $r7;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.Field $r3, $r4;
        java.lang.Object $r5, $r10, $r11;
        org.apache.commons.math.FieldElement[][] $r6;
        org.apache.commons.math.FieldElement $r8, $r9, r17;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.Integer $r14, $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r12 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[1] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r16;

     label1:
        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        r2 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[] buildArray(org.apache.commons.math.Field,int)>($r3, i1);

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math.Field: java.lang.Object getZero()>();

        r17 = (org.apache.commons.math.FieldElement) $r5;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $r6 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r7 = $r6[i5];

        $r9 = $r7[i4];

        $r8 = r1[i5];

        $r10 = interfaceinvoke $r9.<org.apache.commons.math.FieldElement: java.lang.Object multiply(java.lang.Object)>($r8);

        $r11 = interfaceinvoke r17.<org.apache.commons.math.FieldElement: java.lang.Object add(java.lang.Object)>($r10);

        r17 = (org.apache.commons.math.FieldElement) $r11;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = r17;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math.FieldElement walkInRowOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5, $r6;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i4];

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $r5 = r2[i5];

        $r6 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement visit(int,int,org.apache.commons.math.FieldElement)>(i4, i5, $r5);

        r2[i5] = $r6;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInRowOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i4];

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $r5 = r2[i5];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math.FieldElement)>(i4, i5, $r5);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInRowOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5, $r6;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i6];

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $r5 = r2[i7];

        $r6 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement visit(int,int,org.apache.commons.math.FieldElement)>(i6, i7, $r5);

        r2[i7] = $r6;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInRowOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i6];

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $r5 = r2[i7];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math.FieldElement)>(i6, i7, $r5);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInColumnOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5, $r6;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i5];

        $r5 = r2[i4];

        $r6 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement visit(int,int,org.apache.commons.math.FieldElement)>(i5, i4, $r5);

        r2[i4] = $r6;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInColumnOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.FieldElement $r2, $r5;
        org.apache.commons.math.FieldElement[][] $r3;
        org.apache.commons.math.FieldElement[] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r4 = $r3[i5];

        $r5 = $r4[i4];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math.FieldElement)>(i5, i4, $r5);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r2;
    }

    public org.apache.commons.math.FieldElement walkInColumnOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        org.apache.commons.math.FieldElement[] r2;
        org.apache.commons.math.FieldElement $r3, $r5, $r6;
        org.apache.commons.math.FieldElement[][] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        r2 = $r4[i7];

        $r5 = r2[i6];

        $r6 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement visit(int,int,org.apache.commons.math.FieldElement)>(i7, i6, $r5);

        r2[i6] = $r6;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r3 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixChangingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r3;
    }

    public org.apache.commons.math.FieldElement walkInColumnOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.linear.FieldMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        org.apache.commons.math.FieldElement $r2, $r5;
        org.apache.commons.math.FieldElement[][] $r3;
        org.apache.commons.math.FieldElement[] $r4;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.FieldMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void checkSubMatrixIndex(int,int,int,int)>(i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r4 = $r3[i7];

        $r5 = $r4[i6];

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: void visit(int,int,org.apache.commons.math.FieldElement)>(i7, i6, $r5);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrixPreservingVisitor: org.apache.commons.math.FieldElement end()>();

        return $r2;
    }

    private org.apache.commons.math.FieldElement[][] copyOut()
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        int i0, $i1, $i2, i3;
        org.apache.commons.math.FieldElement[][] r1, $r3, $r4;
        org.apache.commons.math.Field $r2;
        org.apache.commons.math.FieldElement[] $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getRowDimension()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.Field getField()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: int getColumnDimension()>();

        r1 = staticinvoke <org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] buildArray(org.apache.commons.math.Field,int,int)>($r2, i0, $i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r7 = $r3[i3];

        $r6 = r1[i3];

        $r4 = r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: org.apache.commons.math.FieldElement[][] data>;

        $r5 = $r4[i3];

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void copyIn(org.apache.commons.math.FieldElement[][])
    {
        org.apache.commons.math.linear.Array2DRowFieldMatrix r0;
        org.apache.commons.math.FieldElement[][] r1;

        r0 := @this: org.apache.commons.math.linear.Array2DRowFieldMatrix;

        r1 := @parameter0: org.apache.commons.math.FieldElement[][];

        virtualinvoke r0.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void setSubMatrix(org.apache.commons.math.FieldElement[][],int,int)>(r1, 0, 0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.linear.Array2DRowFieldMatrix: long serialVersionUID> = 7260756672015356458L;

        return;
    }
}
