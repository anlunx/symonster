public final class org.joda.time.MonthDay extends org.joda.time.base.BasePartial implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.joda.time.DateTimeFieldType[] FIELD_TYPES;
    private static final org.joda.time.format.DateTimeFormatter PARSER;
    public static final int MONTH_OF_YEAR;
    public static final int DAY_OF_MONTH;

    public static org.joda.time.MonthDay now()
    {
        org.joda.time.MonthDay $r0;

        $r0 = new org.joda.time.MonthDay;

        specialinvoke $r0.<org.joda.time.MonthDay: void <init>()>();

        return $r0;
    }

    public static org.joda.time.MonthDay now(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.MonthDay $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Zone must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MonthDay;

        specialinvoke $r1.<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>(r0);

        return $r1;
    }

    public static org.joda.time.MonthDay now(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.MonthDay $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.Chronology;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Chronology must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MonthDay;

        specialinvoke $r1.<org.joda.time.MonthDay: void <init>(org.joda.time.Chronology)>(r0);

        return $r1;
    }

    public static org.joda.time.MonthDay parse(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.MonthDay $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.joda.time.MonthDay: org.joda.time.format.DateTimeFormatter PARSER>;

        $r2 = staticinvoke <org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>(r0, $r1);

        return $r2;
    }

    public static org.joda.time.MonthDay parse(java.lang.String, org.joda.time.format.DateTimeFormatter)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter r1;
        org.joda.time.LocalDate r2;
        org.joda.time.MonthDay $r3;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.joda.time.format.DateTimeFormatter;

        r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>(r0);

        $r3 = new org.joda.time.MonthDay;

        $i0 = virtualinvoke r2.<org.joda.time.LocalDate: int getMonthOfYear()>();

        $i1 = virtualinvoke r2.<org.joda.time.LocalDate: int getDayOfMonth()>();

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(int,int)>($i0, $i1);

        return $r3;
    }

    public static org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar r0;
        org.joda.time.MonthDay $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MonthDay;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        specialinvoke $r1.<org.joda.time.MonthDay: void <init>(int,int)>($i1, $i2);

        return $r1;
    }

    public static org.joda.time.MonthDay fromDateFields(java.util.Date)
    {
        java.util.Date r0;
        org.joda.time.MonthDay $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MonthDay;

        $i0 = virtualinvoke r0.<java.util.Date: int getMonth()>();

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.util.Date: int getDate()>();

        specialinvoke $r1.<org.joda.time.MonthDay: void <init>(int,int)>($i1, $i2);

        return $r1;
    }

    public void <init>()
    {
        org.joda.time.MonthDay r0;

        r0 := @this: org.joda.time.MonthDay;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>()>();

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.MonthDay r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>($r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>(r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.MonthDay r0;
        long l0;

        r0 := @this: org.joda.time.MonthDay;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long)>(l0);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0;
        long l0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MonthDay;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>(l0, r1);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.MonthDay r0;
        java.lang.Object r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, null, $r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r3;
        org.joda.time.format.DateTimeFormatter $r4;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, $r3, $r4);

        return;
    }

    public void <init>(int, int)
    {
        org.joda.time.MonthDay r0;
        int i0, i1;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.joda.time.MonthDay: void <init>(int,int,org.joda.time.Chronology)>(i0, i1, null);

        return;
    }

    public void <init>(int, int, org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0;
        int i0, i1;
        org.joda.time.Chronology r1;
        int[] $r2;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.joda.time.Chronology;

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i1;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>($r2, r1);

        return;
    }

    void <init>(org.joda.time.MonthDay, int[])
    {
        org.joda.time.MonthDay r0, r1;
        int[] r2;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.MonthDay;

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>(r1, r2);

        return;
    }

    void <init>(org.joda.time.MonthDay, org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0, r1;
        org.joda.time.Chronology r2;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.MonthDay;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>(r1, r2);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.MonthDay r0, $r4;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.Chronology $r2, $r5, $r6;
        boolean $z0;

        r0 := @this: org.joda.time.MonthDay;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new org.joda.time.MonthDay;

        $r5 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        specialinvoke $r4.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>(r0, $r6);

        return $r4;

     label1:
        return r0;
    }

    public int size()
    {
        org.joda.time.MonthDay r0;

        r0 := @this: org.joda.time.MonthDay;

        return 2;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0;
        int i0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeField $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.Chronology;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r3;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        return $r2;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.MonthDay r0;
        int i0;
        org.joda.time.DateTimeFieldType[] $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = <org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r2 = $r1[i0];

        return $r2;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.MonthDay r0;
        org.joda.time.DateTimeFieldType[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.MonthDay;

        $r1 = <org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.joda.time.DateTimeFieldType[]) $r2;

        $r4 = (org.joda.time.DateTimeFieldType[]) $r3;

        return $r4;
    }

    public org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.MonthDay r0, $r3;
        org.joda.time.Chronology $r2, r5, r6, r7;
        int[] $r4;

        r0 := @this: org.joda.time.MonthDay;

        r5 := @parameter0: org.joda.time.Chronology;

        r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r5);

        r7 = virtualinvoke r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        if r7 != $r2 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>(r0, r7);

        $r4 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        virtualinvoke r7.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r3, $r4);

        return $r3;
    }

    public org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.MonthDay r0, $r3;
        org.joda.time.DateTimeFieldType r1;
        int i0, i1, $i2;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = virtualinvoke r0.<org.joda.time.MonthDay: int getValue(int)>(i1);

        if i0 != $i2 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.MonthDay r0, $r3;
        org.joda.time.DurationFieldType r1;
        int i0, i1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i0 != 0 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.MonthDay r0, $r3;
        org.joda.time.ReadablePeriod r1;
        int i0, i1, $i2, $i3, $i4, i5;
        org.joda.time.DurationFieldType r2;
        org.joda.time.DateTimeField $r4;
        int[] r5;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r5 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        i5 = 0;

     label3:
        $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

        if i5 >= $i2 goto label5;

        r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        i1 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOf(org.joda.time.DurationFieldType)>(r2);

        if i1 < 0 goto label4;

        $r4 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, i0);

        r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r5, $i4);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.MonthDay plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.MonthDay r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.MonthDay plusMonths(int)
    {
        org.joda.time.MonthDay r0, $r2;
        int i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.MonthDay plusDays(int)
    {
        org.joda.time.MonthDay r0, $r2;
        int i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.MonthDay minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.MonthDay r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, -1);

        return $r2;
    }

    public org.joda.time.MonthDay minusMonths(int)
    {
        org.joda.time.MonthDay r0, $r2;
        int i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.MonthDay minusDays(int)
    {
        org.joda.time.MonthDay r0, $r2;
        int i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.LocalDate toLocalDate(int)
    {
        org.joda.time.MonthDay r0;
        int i0, $i1, $i2;
        org.joda.time.LocalDate $r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        $r1 = new org.joda.time.LocalDate;

        $i1 = virtualinvoke r0.<org.joda.time.MonthDay: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.MonthDay: int getDayOfMonth()>();

        $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>(i0, $i1, $i2, $r2);

        return $r1;
    }

    public int getMonthOfYear()
    {
        org.joda.time.MonthDay r0;
        int $i0;

        r0 := @this: org.joda.time.MonthDay;

        $i0 = virtualinvoke r0.<org.joda.time.MonthDay: int getValue(int)>(0);

        return $i0;
    }

    public int getDayOfMonth()
    {
        org.joda.time.MonthDay r0;
        int $i0;

        r0 := @this: org.joda.time.MonthDay;

        $i0 = virtualinvoke r0.<org.joda.time.MonthDay: int getValue(int)>(1);

        return $i0;
    }

    public org.joda.time.MonthDay withMonthOfYear(int)
    {
        org.joda.time.MonthDay r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        r4 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        $r1 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 0, r4, i0);

        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.MonthDay withDayOfMonth(int)
    {
        org.joda.time.MonthDay r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.MonthDay;

        i0 := @parameter0: int;

        r4 = virtualinvoke r0.<org.joda.time.MonthDay: int[] getValues()>();

        $r1 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, r4, i0);

        $r3 = new org.joda.time.MonthDay;

        specialinvoke $r3.<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.MonthDay$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.MonthDay r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.MonthDay$Property $r2;
        int $i0;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 = new org.joda.time.MonthDay$Property;

        $i0 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        specialinvoke $r2.<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>(r0, $i0);

        return $r2;
    }

    public org.joda.time.MonthDay$Property monthOfYear()
    {
        org.joda.time.MonthDay r0;
        org.joda.time.MonthDay$Property $r1;

        r0 := @this: org.joda.time.MonthDay;

        $r1 = new org.joda.time.MonthDay$Property;

        specialinvoke $r1.<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>(r0, 0);

        return $r1;
    }

    public org.joda.time.MonthDay$Property dayOfMonth()
    {
        org.joda.time.MonthDay r0;
        org.joda.time.MonthDay$Property $r1;

        r0 := @this: org.joda.time.MonthDay;

        $r1 = new org.joda.time.MonthDay$Property;

        specialinvoke $r1.<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>(r0, 1);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.joda.time.MonthDay r0;
        java.util.ArrayList $r2;
        org.joda.time.DateTimeFieldType $r3, $r4;
        org.joda.time.format.DateTimeFormatter $r5;
        java.lang.String $r6;

        r0 := @this: org.joda.time.MonthDay;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>($r2, 1, 1);

        $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r6;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.MonthDay r0;
        java.lang.String r1, $r3, $r4;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.joda.time.MonthDay: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.MonthDay r0;
        java.lang.String r1, $r5, $r6;
        java.util.Locale r2;
        org.joda.time.format.DateTimeFormatter $r3, $r4;

        r0 := @this: org.joda.time.MonthDay;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 != null goto label1;

        $r6 = virtualinvoke r0.<org.joda.time.MonthDay: java.lang.String toString()>();

        return $r6;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r5;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeFieldType[] $r0;
        org.joda.time.DateTimeFieldType $r1, $r2;
        org.joda.time.format.DateTimeFormatterBuilder $r3, $r6, $r9;
        org.joda.time.format.DateTimeFormatter $r4, $r7, $r10;
        org.joda.time.format.DateTimeParser $r5, $r8;

        <org.joda.time.MonthDay: int DAY_OF_MONTH> = 1;

        <org.joda.time.MonthDay: int MONTH_OF_YEAR> = 0;

        <org.joda.time.MonthDay: long serialVersionUID> = 2954560699050434609L;

        $r0 = newarray (org.joda.time.DateTimeFieldType)[2];

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r0[0] = $r1;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $r0[1] = $r2;

        <org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> = $r0;

        $r3 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>();

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>();

        $r6 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>($r5);

        $r7 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("--MM-dd");

        $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>();

        $r9 = virtualinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>($r8);

        $r10 = virtualinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        <org.joda.time.MonthDay: org.joda.time.format.DateTimeFormatter PARSER> = $r10;

        return;
    }
}
