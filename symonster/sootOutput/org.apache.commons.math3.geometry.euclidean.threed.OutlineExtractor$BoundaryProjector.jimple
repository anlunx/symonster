class org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    private org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected;
    private final double tolerance;
    final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor r1;
        double d0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r3;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor;

        d0 := @parameter1: double;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r3 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r4);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r3, d0);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected> = $r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance> = d0;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r2;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r2 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r3;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 == null goto label1;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r7, 0);

     label1:
        $r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r6, 1);

     label2:
        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1, r49;
        boolean z0, z1, $z2, $z4, $z5;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane r2;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r4, $r8, $r10, $r23, $r25, $r29, $r31, r47;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7;
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor $r9, $r22, $r24, $r28, $r30;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.partitioning.Region $r11, $r17;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r12, $r14, $r16, $r18;
        java.util.ArrayList $r13;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r15;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r19, $r20, $r21, $r26, $r27, $r37, $r38, $r39, r48;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, $i22, i23, i24, $i25, $i26;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r32, $r33, $r35;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r34, $r36;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] r40, r41, r45;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r42, r43, r46;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        z0 := @parameter1: boolean;

        r2 = (org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane) r1;

        $r7 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r7;

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r10 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r9);

        d0 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r10);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b0 = $d1 cmpl 0.001;

        if $b0 <= 0 goto label23;

        $r11 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r12 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) $r11;

        r40 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        $z2 = $z4 ^ z0;

        if $z2 == 0 goto label10;

        $i7 = lengthof r40;

        r41 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[$i7];

        i17 = 0;

     label03:
        $i8 = lengthof r40;

        if i17 >= $i8 goto label09;

        r42 = r40[i17];

        $i9 = lengthof r42;

        r43 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i9];

        $r37 = r42[0];

        if $r37 != null goto label06;

        r43[0] = null;

        i18 = 1;

     label04:
        $i14 = lengthof r42;

        if i18 >= $i14 goto label05;

        $i15 = lengthof r42;

        $i16 = $i15 - i18;

        $r39 = r42[$i16];

        r43[i18] = $r39;

        i18 = i18 + 1;

        goto label04;

     label05:
        goto label08;

     label06:
        i19 = 0;

     label07:
        $i10 = lengthof r42;

        if i19 >= $i10 goto label08;

        $i12 = lengthof r42;

        $i11 = i19 + 1;

        $i13 = $i12 - $i11;

        $r38 = r42[$i13];

        r43[i19] = $r38;

        i19 = i19 + 1;

        goto label07;

     label08:
        r41[i17] = r43;

        i17 = i17 + 1;

        goto label03;

     label09:
        r40 = r41;

     label10:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r45 = r40;

        i20 = lengthof r40;

        i21 = 0;

     label11:
        if i21 >= i20 goto label22;

        r46 = r45[i21];

        $r19 = r46[0];

        if $r19 == null goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        z1 = $z5;

        if $z5 == 0 goto label14;

        $i6 = lengthof r46;

        $i22 = $i6 - 1;

        goto label15;

     label14:
        $i22 = 1;

     label15:
        i23 = $i22;

        $r20 = r46[$i22];

        r47 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r20);

        $i3 = $i22 + 1;

        $i2 = lengthof r46;

        i24 = $i3 % $i2;

        $r21 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r23 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r22);

        $d3 = virtualinvoke r47.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r23);

        $r24 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r25 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r24);

        $d4 = virtualinvoke r47.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r25);

        specialinvoke $r21.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d3, $d4);

        r48 = $r21;

     label16:
        $i25 = lengthof r46;

        if i24 >= $i25 goto label21;

        $r26 = r46[i24];

        r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r26);

        $r27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $r28 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r29 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r28);

        $d5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r29);

        $r30 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor this$0>;

        $r31 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor: org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor)>($r30);

        $d6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r31);

        specialinvoke $r27.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d5, $d6);

        $r32 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke $r32.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r48, $r27, $d7);

        r49 = virtualinvoke $r32.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        if z1 != 0 goto label17;

        if i23 == 1 goto label18;

     label17:
        $d8 = virtualinvoke $r32.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        d12 = $d8 + 1.5707963267948966;

        $r33 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke $r33.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)>(r48, d12, $d9);

        $r34 = interfaceinvoke r49.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r33);

        r49 = virtualinvoke $r34.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

     label18:
        if z1 != 0 goto label19;

        $i4 = lengthof r46;

        $i5 = $i4 - 1;

        if i24 == $i5 goto label20;

     label19:
        $d10 = virtualinvoke $r32.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        d13 = $d10 + 1.5707963267948966;

        $r35 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke $r35.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)>($r27, d13, $d11);

        $r36 = interfaceinvoke r49.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r35);

        r49 = virtualinvoke $r36.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

     label20:
        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r49);

        $i26 = i24;

        i24 = i24 + 1;

        i23 = $i26;

        r48 = $r27;

        goto label16;

     label21:
        i21 = i21 + 1;

        goto label11;

     label22:
        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: double tolerance>;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>($r13, $d2);

        $r15 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r15.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        $r16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected>;

        $r17 = virtualinvoke $r15.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)>($r16, $r14);

        $r18 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) $r17;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected> = $r18;

     label23:
        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet getProjected()
    {
        org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected>;

        return $r1;
    }
}
