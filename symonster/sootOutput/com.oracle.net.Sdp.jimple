public final class com.oracle.net.Sdp extends java.lang.Object
{
    private static final java.lang.reflect.Constructor serverSocketCtor;
    private static final java.lang.reflect.Constructor socketImplCtor;

    private void <init>()
    {
        com.oracle.net.Sdp r0;

        r0 := @this: com.oracle.net.Sdp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void setAccessible(java.lang.reflect.AccessibleObject)
    {
        java.lang.reflect.AccessibleObject r0;
        com.oracle.net.Sdp$1 $r1;

        r0 := @parameter0: java.lang.reflect.AccessibleObject;

        $r1 = new com.oracle.net.Sdp$1;

        specialinvoke $r1.<com.oracle.net.Sdp$1: void <init>(java.lang.reflect.AccessibleObject)>(r0);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        return;
    }

    private static java.net.SocketImpl createSocketImpl()
    {
        java.lang.Object[] $r0;
        java.lang.reflect.Constructor $r1;
        java.lang.Object $r2;
        java.net.SocketImpl $r3;
        java.lang.reflect.InvocationTargetException $r4;
        java.lang.AssertionError $r5, $r7, $r9;
        java.lang.IllegalAccessException $r6;
        java.lang.InstantiationException $r8;

     label1:
        $r1 = <com.oracle.net.Sdp: java.lang.reflect.Constructor socketImplCtor>;

        $r0 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0);

        $r3 = (java.net.SocketImpl) $r2;

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r7;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static java.net.Socket openSocket() throws java.io.IOException
    {
        java.net.SocketImpl r0;
        com.oracle.net.Sdp$SdpSocket $r1;

        r0 = staticinvoke <com.oracle.net.Sdp: java.net.SocketImpl createSocketImpl()>();

        $r1 = new com.oracle.net.Sdp$SdpSocket;

        specialinvoke $r1.<com.oracle.net.Sdp$SdpSocket: void <init>(java.net.SocketImpl)>(r0);

        return $r1;
    }

    public static java.net.ServerSocket openServerSocket() throws java.io.IOException
    {
        java.net.SocketImpl r0;
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Object $r4;
        java.net.ServerSocket $r5;
        java.lang.reflect.InvocationTargetException $r6;
        boolean $z0, $z1;
        java.lang.RuntimeException $r7, $r8;
        java.io.IOException $r9;
        java.lang.IllegalAccessException $r10;
        java.lang.AssertionError $r11, $r13;
        java.lang.InstantiationException $r12;

        r0 = staticinvoke <com.oracle.net.Sdp: java.net.SocketImpl createSocketImpl()>();

     label1:
        $r3 = <com.oracle.net.Sdp: java.lang.reflect.Constructor serverSocketCtor>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

        $r5 = (java.net.ServerSocket) $r4;

     label2:
        return $r5;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r11;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r13;

     label5:
        $r6 := @caughtexception;

        r1 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z0 = r1 instanceof java.io.IOException;

        if $z0 == 0 goto label6;

        $r9 = (java.io.IOException) r1;

        throw $r9;

     label6:
        $z1 = r1 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label7;

        $r8 = (java.lang.RuntimeException) r1;

        throw $r8;

     label7:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static java.nio.channels.SocketChannel openSocketChannel() throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.channels.SocketChannel $r1;

        r0 = staticinvoke <sun.net.sdp.SdpSupport: java.io.FileDescriptor createSocket()>();

        $r1 = staticinvoke <sun.nio.ch.Secrets: java.nio.channels.SocketChannel newSocketChannel(java.io.FileDescriptor)>(r0);

        return $r1;
    }

    public static java.nio.channels.ServerSocketChannel openServerSocketChannel() throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.channels.ServerSocketChannel $r1;

        r0 = staticinvoke <sun.net.sdp.SdpSupport: java.io.FileDescriptor createSocket()>();

        $r1 = staticinvoke <sun.nio.ch.Secrets: java.nio.channels.ServerSocketChannel newServerSocketChannel(java.io.FileDescriptor)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0, $r4;
        java.lang.Class $r1, r14;
        java.lang.reflect.Constructor $r2, $r3, $r5, $r6;
        java.lang.ClassNotFoundException $r7;
        java.lang.AssertionError $r8, $r10, $r12;
        java.lang.NoSuchMethodException $r9, $r11;

     label1:
        $r1 = class "java/net/ServerSocket";

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/net/SocketImpl";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r0);

        <com.oracle.net.Sdp: java.lang.reflect.Constructor serverSocketCtor> = $r2;

        $r3 = <com.oracle.net.Sdp: java.lang.reflect.Constructor serverSocketCtor>;

        staticinvoke <com.oracle.net.Sdp: void setAccessible(java.lang.reflect.AccessibleObject)>($r3);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r12;

     label4:
        r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.net.SdpSocketImpl", 1, null);

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r4);

        <com.oracle.net.Sdp: java.lang.reflect.Constructor socketImplCtor> = $r5;

        $r6 = <com.oracle.net.Sdp: java.lang.reflect.Constructor socketImplCtor>;

        staticinvoke <com.oracle.net.Sdp: void setAccessible(java.lang.reflect.AccessibleObject)>($r6);

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r8;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r10;

     label8:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.NoSuchMethodException from label4 to label5 with label7;
    }
}
