public class org.apache.commons.math.analysis.interpolation.LoessInterpolator extends java.lang.Object implements org.apache.commons.math.analysis.interpolation.UnivariateRealInterpolator, java.io.Serializable
{
    public static final double DEFAULT_BANDWIDTH;
    public static final int DEFAULT_ROBUSTNESS_ITERS;
    public static final double DEFAULT_ACCURACY;
    private static final long serialVersionUID;
    private final double bandwidth;
    private final int robustnessIters;
    private final double accuracy;

    public void <init>()
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double bandwidth> = 0.3;

        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: int robustnessIters> = 2;

        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double accuracy> = 1.0E-12;

        return;
    }

    public void <init>(double, int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: void <init>(double,int,double)>(d0, i0, 1.0E-12);

        return;
    }

    public void <init>(double, int, double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double d0, d1;
        int i0;
        byte $b1, $b2;
        org.apache.commons.math.MathException $r1, $r5;
        java.lang.Object[] $r2, $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r7;
        java.lang.Double $r4;
        java.lang.Integer $r8;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        d1 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = d0 cmpg 0.0;

        if $b1 < 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math.MathException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats BANDWIDTH_OUT_OF_INTERVAL>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double bandwidth> = d0;

        if i0 >= 0 goto label3;

        $r5 = new org.apache.commons.math.MathException;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_ROBUSTNESS_ITERATIONS>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        specialinvoke $r5.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label3:
        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: int robustnessIters> = i0;

        r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double accuracy> = d1;

        return;
    }

    public final org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double[] r1, r2, $r4;
        org.apache.commons.math.analysis.interpolation.SplineInterpolator $r3;
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction $r5;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new org.apache.commons.math.analysis.interpolation.SplineInterpolator;

        specialinvoke $r3.<org.apache.commons.math.analysis.interpolation.SplineInterpolator: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[])>(r1, r2);

        $r5 = virtualinvoke $r3.<org.apache.commons.math.analysis.interpolation.SplineInterpolator: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r1, $r4);

        return $r5;
    }

    public final double[] smooth(double[], double[], double[]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double[] r1, r2, r3, r4, r5, r6, r7, $r19, $r20;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i13, $i14, i15, i16, i17, i18, i19, i20;
        double d0, d1, d2, d3, d4, d5, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, d59, d60, d61, d62, d63, $d64, d65, d66, d67, d68, d69;
        org.apache.commons.math.exception.util.LocalizedFormats $r9, $r10, $r11, $r15, $r23, $r26;
        int[] $r12;
        byte $b9, $b10, $b11, $b12;
        org.apache.commons.math.MathException $r13, $r21, $r24;
        java.lang.Object[] $r14, $r22, $r25;
        java.lang.Integer $r16, $r27, $r28;
        java.lang.Double $r17, $r18;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 == $i3 goto label01;

        $r24 = new org.apache.commons.math.MathException;

        $r26 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS>;

        $r25 = newarray (java.lang.Object)[2];

        $i13 = lengthof r1;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r25[0] = $r27;

        $i14 = lengthof r2;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r25[1] = $r28;

        specialinvoke $r24.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r26, $r25);

        throw $r24;

     label01:
        i0 = lengthof r1;

        if i0 != 0 goto label02;

        $r21 = new org.apache.commons.math.MathException;

        $r23 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats LOESS_EXPECTS_AT_LEAST_ONE_POINT>;

        $r22 = newarray (java.lang.Object)[0];

        specialinvoke $r21.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r23, $r22);

        throw $r21;

     label02:
        $r9 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NON_REAL_FINITE_ABSCISSA>;

        staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[],org.apache.commons.math.exception.util.Localizable)>(r1, $r9);

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NON_REAL_FINITE_ORDINATE>;

        staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[],org.apache.commons.math.exception.util.Localizable)>(r2, $r10);

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NON_REAL_FINITE_WEIGHT>;

        staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: void checkAllFiniteReal(double[],org.apache.commons.math.exception.util.Localizable)>(r3, $r11);

        staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: void checkStrictlyIncreasing(double[])>(r1);

        if i0 != 1 goto label03;

        $r20 = newarray (double)[1];

        $d58 = r2[0];

        $r20[0] = $d58;

        return $r20;

     label03:
        if i0 != 2 goto label04;

        $r19 = newarray (double)[2];

        $d56 = r2[0];

        $r19[0] = $d56;

        $d57 = r2[1];

        $r19[1] = $d57;

        return $r19;

     label04:
        $d12 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double bandwidth>;

        $d11 = (double) i0;

        $d13 = $d12 * $d11;

        i1 = (int) $d13;

        if i1 >= 2 goto label05;

        $r13 = new org.apache.commons.math.MathException;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TOO_SMALL_BANDWIDTH>;

        $r14 = newarray (java.lang.Object)[3];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[0] = $r16;

        $d53 = (double) i0;

        $d54 = 2.0 / $d53;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d54);

        $r14[1] = $r17;

        $d55 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double bandwidth>;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d55);

        $r14[2] = $r18;

        specialinvoke $r13.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

     label05:
        r4 = newarray (double)[i0];

        r5 = newarray (double)[i0];

        r6 = newarray (double)[i0];

        r7 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r7, 1.0);

        i15 = 0;

     label06:
        $i5 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: int robustnessIters>;

        if i15 > $i5 goto label24;

        $r12 = newarray (int)[2];

        $r12[0] = 0;

        $i6 = i1 - 1;

        $r12[1] = $i6;

        i16 = 0;

     label07:
        if i16 >= i0 goto label17;

        d0 = r1[i16];

        if i16 <= 0 goto label08;

        staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: void updateBandwidthInterval(double[],double[],int,int[])>(r1, r3, i16, $r12);

     label08:
        i17 = $r12[0];

        i2 = $r12[1];

        $d21 = r1[i16];

        $d20 = r1[i17];

        $d25 = $d21 - $d20;

        $d23 = r1[i2];

        $d22 = r1[i16];

        $d24 = $d23 - $d22;

        $b11 = $d25 cmpl $d24;

        if $b11 <= 0 goto label09;

        i18 = i17;

        goto label10;

     label09:
        i18 = i2;

     label10:
        d59 = 0.0;

        d60 = 0.0;

        d61 = 0.0;

        d62 = 0.0;

        d63 = 0.0;

        $d26 = r1[i18];

        $d27 = $d26 - d0;

        $d28 = 1.0 / $d27;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d28);

        i19 = i17;

     label11:
        if i19 > i2 goto label14;

        d2 = r1[i19];

        d4 = r2[i19];

        if i19 >= i16 goto label12;

        $d64 = d0 - d2;

        goto label13;

     label12:
        $d64 = d2 - d0;

     label13:
        $d45 = $d64 * d1;

        $d46 = staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: double tricube(double)>($d45);

        $d47 = r7[i19];

        $d49 = $d46 * $d47;

        $d48 = r3[i19];

        d8 = $d49 * $d48;

        d9 = d2 * d8;

        d59 = d59 + d8;

        d60 = d60 + d9;

        $d50 = d2 * d9;

        d61 = d61 + $d50;

        $d51 = d4 * d8;

        d62 = d62 + $d51;

        $d52 = d4 * d9;

        d63 = d63 + $d52;

        i19 = i19 + 1;

        goto label11;

     label14:
        d65 = d60 / d59;

        d3 = d62 / d59;

        d5 = d63 / d59;

        d7 = d61 / d59;

        $d29 = d65 * d65;

        $d30 = d7 - $d29;

        $d31 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d30);

        $d32 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d31);

        $d33 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double accuracy>;

        $b12 = $d32 cmpg $d33;

        if $b12 >= 0 goto label15;

        d66 = 0.0;

        goto label16;

     label15:
        $d34 = d65 * d3;

        $d37 = d5 - $d34;

        $d35 = d65 * d65;

        $d36 = d7 - $d35;

        d66 = $d37 / $d36;

     label16:
        $d38 = d66 * d65;

        d10 = d3 - $d38;

        $d39 = d66 * d0;

        $d40 = $d39 + d10;

        r4[i16] = $d40;

        $d42 = r2[i16];

        $d41 = r4[i16];

        $d43 = $d42 - $d41;

        $d44 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d43);

        r5[i16] = $d44;

        i16 = i16 + 1;

        goto label07;

     label17:
        $i7 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: int robustnessIters>;

        if i15 != $i7 goto label18;

        goto label24;

     label18:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r6, 0, i0);

        staticinvoke <java.util.Arrays: void sort(double[])>(r6);

        $i8 = i0 / 2;

        d67 = r6[$i8];

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d67);

        $d15 = r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double accuracy>;

        $b9 = $d14 cmpg $d15;

        if $b9 >= 0 goto label19;

        goto label24;

     label19:
        i20 = 0;

     label20:
        if i20 >= i0 goto label23;

        $d17 = r5[i20];

        $d16 = 6.0 * d67;

        d68 = $d17 / $d16;

        $b10 = d68 cmpl 1.0;

        if $b10 < 0 goto label21;

        r7[i20] = 0.0;

        goto label22;

     label21:
        $d18 = d68 * d68;

        d69 = 1.0 - $d18;

        $d19 = d69 * d69;

        r7[i20] = $d19;

     label22:
        i20 = i20 + 1;

        goto label20;

     label23:
        i15 = i15 + 1;

        goto label06;

     label24:
        return r4;
    }

    public final double[] smooth(double[], double[]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double[] r1, r2, r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.commons.math.MathException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r7;
        java.lang.Integer $r8, $r9;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r5 = new org.apache.commons.math.MathException;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS>;

        $r6 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[0] = $r8;

        $i4 = lengthof r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label1:
        $i2 = lengthof r1;

        r3 = newarray (double)[$i2];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 1.0);

        $r4 = virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: double[] smooth(double[],double[],double[])>(r1, r2, r3);

        return $r4;
    }

    private static void updateBandwidthInterval(double[], double[], int, int[])
    {
        double[] r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i7;
        int[] r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b6;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        r2 := @parameter3: int[];

        i1 = r2[0];

        i2 = r2[1];

        i3 = staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: int nextNonzero(double[],int)>(r1, i2);

        $i5 = lengthof r0;

        if i3 >= $i5 goto label1;

        $d1 = r0[i3];

        $d0 = r0[i0];

        $d5 = $d1 - $d0;

        $d3 = r0[i0];

        $d2 = r0[i1];

        $d4 = $d3 - $d2;

        $b6 = $d5 cmpg $d4;

        if $b6 >= 0 goto label1;

        $i7 = r2[0];

        i4 = staticinvoke <org.apache.commons.math.analysis.interpolation.LoessInterpolator: int nextNonzero(double[],int)>(r1, $i7);

        r2[0] = i4;

        r2[1] = i3;

     label1:
        return;
    }

    private static int nextNonzero(double[], int)
    {
        double[] r0;
        int i0, $i1, i3;
        double $d0;
        byte $b2;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i3 = i0 + 1;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $d0 = r0[i3];

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i3;
    }

    private static double tricube(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d2 = d0 * d0;

        $d3 = $d2 * d0;

        d1 = 1.0 - $d3;

        $d4 = d1 * d1;

        $d5 = $d4 * d1;

        return $d5;
    }

    private static void checkAllFiniteReal(double[], org.apache.commons.math.exception.util.Localizable) throws org.apache.commons.math.MathException
    {
        double[] r0;
        org.apache.commons.math.exception.util.Localizable r1;
        double d0;
        int $i0, i1;
        boolean $z0, $z1;
        org.apache.commons.math.MathException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.Double $r5;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math.exception.util.Localizable;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label4;

        d0 = r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label3;

     label2:
        $r2 = new org.apache.commons.math.MathException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[1] = $r5;

        specialinvoke $r2.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>(r1, $r3);

        throw $r2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private static void checkStrictlyIncreasing(double[]) throws org.apache.commons.math.MathException
    {
        double[] r0;
        int $i0, $i1, $i3, $i4, i5;
        double $d0, $d1, $d2, $d3;
        byte $b2;
        org.apache.commons.math.MathException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r6;
        java.lang.Double $r5, $r7;

        r0 := @parameter0: double[];

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label3;

        if i5 < 1 goto label2;

        $i1 = i5 - 1;

        $d1 = r0[$i1];

        $d0 = r0[i5];

        $b2 = $d1 cmpl $d0;

        if $b2 < 0 goto label2;

        $r1 = new org.apache.commons.math.MathException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_ORDER_ABSCISSA_ARRAY>;

        $r2 = newarray (java.lang.Object)[4];

        $i3 = i5 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[0] = $r4;

        $i4 = i5 - 1;

        $d2 = r0[$i4];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r2[2] = $r6;

        $d3 = r0[i5];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r2[3] = $r7;

        specialinvoke $r1.<org.apache.commons.math.MathException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public volatile org.apache.commons.math.analysis.UnivariateRealFunction interpolate(double[], double[]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.LoessInterpolator r0;
        double[] r1, r2;
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math.analysis.interpolation.LoessInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.LoessInterpolator: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.analysis.interpolation.LoessInterpolator: long serialVersionUID> = 5204927143605193821L;

        <org.apache.commons.math.analysis.interpolation.LoessInterpolator: double DEFAULT_ACCURACY> = 1.0E-12;

        <org.apache.commons.math.analysis.interpolation.LoessInterpolator: int DEFAULT_ROBUSTNESS_ITERS> = 2;

        <org.apache.commons.math.analysis.interpolation.LoessInterpolator: double DEFAULT_BANDWIDTH> = 0.3;

        return;
    }
}
