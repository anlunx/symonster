public abstract class com.opengamma.analytics.math.regression.LeastSquaresRegression extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][], double[][], double[], boolean);

    protected void checkData(double[][], double[][], double[])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[][] r1, r2;
        double[] r3, r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.IllegalArgumentException $r7, $r8, $r9;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[];

        virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegression: void checkData(double[][],double[])>(r1, r3);

        if r2 == null goto label5;

        $i2 = lengthof r2;

        if $i2 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No data in weights array");

        throw $r9;

     label1:
        $i4 = lengthof r2;

        $i3 = lengthof r1;

        if $i4 == $i3 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Independent variable and weight arrays are not the same length");

        throw $r8;

     label2:
        $r6 = r2[0];

        i0 = lengthof $r6;

        i1 = lengthof r2;

        i6 = 0;

     label3:
        if i6 >= i1 goto label5;

        r5 = r2[i6];

        $i5 = lengthof r5;

        if $i5 == i0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a rectangular array of weight");

        throw $r7;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        return;
    }

    protected void checkData(double[][], double[], double[])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[][] r1;
        double[] r2, r3;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        virtualinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegression: void checkData(double[][],double[])>(r1, r3);

        if r2 == null goto label2;

        $i0 = lengthof r2;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No data in weights array");

        throw $r5;

     label1:
        $i2 = lengthof r2;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Independent variable and weight arrays are not the same length");

        throw $r4;

     label2:
        return;
    }

    protected void checkData(double[][], double[])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[][] r1;
        double[] r2, r4, $r5, $r6, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.IllegalArgumentException $r7, $r16, $r17, $r24, $r25, $r26, $r27;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r14, $r18, $r19, $r20, $r21, $r22;
        java.lang.String $r15, $r23;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        if r1 != null goto label1;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Independent variable array was null");

        throw $r27;

     label1:
        if r2 != null goto label2;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dependent variable array was null");

        throw $r26;

     label2:
        $i2 = lengthof r1;

        if $i2 != 0 goto label3;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No data in independent variable array");

        throw $r25;

     label3:
        $i3 = lengthof r2;

        if $i3 != 0 goto label4;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No data in dependent variable array");

        throw $r24;

     label4:
        $i5 = lengthof r1;

        $i4 = lengthof r2;

        if $i5 == $i4 goto label5;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dependent and independent variable arrays are not the same length: have ");

        $i11 = lengthof r1;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $i12 = lengthof r2;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label5:
        $r5 = r1[0];

        i0 = lengthof $r5;

        i1 = lengthof r1;

        i13 = 0;

     label6:
        if i13 >= i1 goto label8;

        r4 = r1[i13];

        $i10 = lengthof r4;

        if $i10 == i0 goto label7;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need a rectangular array of independent variables");

        throw $r16;

     label7:
        i13 = i13 + 1;

        goto label6;

     label8:
        $i7 = lengthof r2;

        $r6 = r1[0];

        $i6 = lengthof $r6;

        if $i7 > $i6 goto label9;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient data; there are ");

        $i8 = lengthof r2;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" variables but only ");

        $r12 = r1[0];

        $i9 = lengthof $r12;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data points");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label9:
        return;
    }

    protected double[][] addInterceptVariable(double[][], boolean)
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[][] r1, r2, $r12;
        boolean z0;
        double[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11, i12;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[][];

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i8 = lengthof r1;

        $r11 = r1[0];

        $i6 = lengthof $r11;

        $i7 = $i6 + 1;

        $r12 = newmultiarray (double)[$i8][$i7];

        goto label2;

     label1:
        $i1 = lengthof r1;

        $r3 = r1[0];

        $i0 = lengthof $r3;

        $r12 = newmultiarray (double)[$i1][$i0];

     label2:
        r2 = $r12;

        i9 = 0;

     label3:
        $i10 = lengthof r1;

        if i9 >= $i10 goto label9;

        if z0 == 0 goto label6;

        $r7 = r2[i9];

        $r7[0] = 1.0;

        i11 = 1;

     label4:
        $r8 = r1[0];

        $i3 = lengthof $r8;

        $i4 = $i3 + 1;

        if i11 >= $i4 goto label5;

        $r10 = r2[i9];

        $r9 = r1[i9];

        $i5 = i11 - 1;

        $d1 = $r9[$i5];

        $r10[i11] = $d1;

        i11 = i11 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        i12 = 0;

     label7:
        $r4 = r1[0];

        $i2 = lengthof $r4;

        if i12 >= $i2 goto label8;

        $r6 = r2[i9];

        $r5 = r1[i9];

        $d0 = $r5[i12];

        $r6[i12] = $d0;

        i12 = i12 + 1;

        goto label7;

     label8:
        i9 = i9 + 1;

        goto label3;

     label9:
        return r2;
    }

    protected double[][] convertArray(double[][])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[][] r1, r2;
        double[] $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[][];

        $i1 = lengthof r1;

        $r3 = r1[0];

        $i0 = lengthof $r3;

        r2 = newmultiarray (double)[$i1][$i0];

        i4 = 0;

     label1:
        $i2 = lengthof r2;

        if i4 >= $i2 goto label4;

        i5 = 0;

     label2:
        $r4 = r2[0];

        $i3 = lengthof $r4;

        if i5 >= $i3 goto label3;

        $r6 = r2[i4];

        $r5 = r1[i4];

        $d0 = $r5[i5];

        $r6[i5] = $d0;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r2;
    }

    protected double[] convertArray(double[])
    {
        com.opengamma.analytics.math.regression.LeastSquaresRegression r0;
        double[] r1, r2;
        int $i0, $i1, i2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.LeastSquaresRegression;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        r2 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $d0 = r1[i2];

        r2[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }
}
