public class com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction extends java.lang.Object implements com.opengamma.analytics.math.curve.CurveShiftFunction
{

    public void <init>()
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r8;
        double d0;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARALLEL_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double,java.lang.String)>(r1, d0, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double, java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r9;
        double d0, d1, $d2;
        java.lang.String r2;
        double[] r3, r4, r5;
        int i0, $i1, $i2, i3, i4;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r8;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $i1 = lengthof r4;

        r5 = newarray (double)[$i1];

        i3 = 0;

        i0 = lengthof r4;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        d1 = r4[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $d2 = d1 + d0;

        r5[$i2] = $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r9 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>(r3, r5, $r8, r2);

        return $r9;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double, double)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r8;
        double d0, d1;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SINGLE_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double,double,java.lang.String)>(r1, d0, d1, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r10, $r13;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.String r2;
        double[] r3, r4, r5, $r11, r14, r15;
        int i0, i1, $i2, $i3, i4;
        java.lang.Double $r7, $r8;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r9, $r12;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        i0 = lengthof r3;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r3, d0);

        if i1 < 0 goto label1;

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        r14 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r11, i0);

        $d6 = r14[i1];

        $d7 = $d6 + d1;

        r14[i1] = $d7;

        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r13 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>(r3, r14, $r12, r2);

        return $r13;

     label1:
        $i2 = i0 + 1;

        r15 = newarray (double)[$i2];

        $i3 = i0 + 1;

        r5 = newarray (double)[$i3];

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $d4 = r3[i4];

        r15[i4] = $d4;

        $d5 = r4[i4];

        r5[i4] = $d5;

        i4 = i4 + 1;

        goto label2;

     label3:
        r15[i0] = d0;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>($r7);

        $d2 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d3 = $d2 + d1;

        r5[i0] = $d3;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r10 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>(r15, r5, $r9, r2);

        return $r10;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double[], double[])
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r10;
        double[] r2, r3;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MULTIPLE_POINT_SHIFT_");

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double[],double[],java.lang.String)>(r1, r2, r3, $r9);

        return $r10;
    }

    public com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve, double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r1, $r20, $r33;
        double[] r2, r3, $r30, $r31;
        java.lang.String r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object[] $r10;
        java.lang.Integer $r11, $r12;
        java.util.ArrayList $r13, $r16;
        java.lang.Double[] $r14, $r17;
        java.util.List $r15, $r18;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r19, $r32;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.Double $r21, $r22, $r23, $r24, $r25, $r27, $r28;
        java.lang.Object $r26;
        boolean $z2;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "curve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "x shifts");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "y shifts");

        $i2 = lengthof r2;

        $i1 = lengthof r3;

        if $i2 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r10 = newarray (java.lang.Object)[2];

        $i3 = lengthof r2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10[0] = $r11;

        $i4 = lengthof r3;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r10[1] = $r12;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "number of x shifts {} must equal number of y shifts {}", $r10);

        $i5 = lengthof r2;

        if $i5 != 0 goto label3;

        $r30 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getXDataAsPrimitive()>();

        $r31 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: double[] getYDataAsPrimitive()>();

        $r32 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r33 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>($r30, $r31, $r32, r4);

        return $r33;

     label3:
        $r13 = new java.util.ArrayList;

        $r14 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double[] getXData()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r15);

        $r16 = new java.util.ArrayList;

        $r17 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double[] getYData()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r18);

        i7 = 0;

     label4:
        $i6 = lengthof r2;

        if i7 >= $i6 goto label7;

        $d0 = r2[i7];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        i0 = interfaceinvoke $r13.<java.util.List: int indexOf(java.lang.Object)>($r21);

        if i0 < 0 goto label5;

        $r26 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i0);

        $r27 = (java.lang.Double) $r26;

        $d6 = virtualinvoke $r27.<java.lang.Double: double doubleValue()>();

        $d7 = r3[i7];

        $d8 = $d6 + $d7;

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        interfaceinvoke $r16.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r28);

        goto label6;

     label5:
        $d1 = r2[i7];

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r22);

        $d2 = r2[i7];

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r24 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: java.lang.Double getYValue(java.lang.Double)>($r23);

        $d3 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $d4 = r3[i7];

        $d5 = $d3 + $d4;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r25);

     label6:
        i7 = i7 + 1;

        goto label4;

     label7:
        $r19 = virtualinvoke r1.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        $r20 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve 'from'(java.util.List,java.util.List,com.opengamma.analytics.math.interpolation.Interpolator1D,java.lang.String)>($r13, $r16, $r19, r4);

        return $r20;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double[] r2, r3;
        java.lang.String r4;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.lang.String;

        $r5 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double[],double[],java.lang.String)>($r5, r2, r3, r4);

        return $r6;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double[], double[])
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double[] r2, r3;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        $r4 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double[],double[])>($r4, r2, r3);

        return $r5;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double d0, d1;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.String;

        $r3 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double,double,java.lang.String)>($r3, d0, d1, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double, double)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double d0, d1;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r2 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double,double)>($r2, d0, d1);

        return $r3;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double, java.lang.String)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double d0;
        java.lang.String r2;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        $r3 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double,java.lang.String)>($r3, d0, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.curve.Curve evaluate(com.opengamma.analytics.math.curve.Curve, double)
    {
        com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction r0;
        com.opengamma.analytics.math.curve.Curve r1;
        double d0;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.curve.Curve;

        d0 := @parameter1: double;

        $r2 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.curve.InterpolatedCurveShiftFunction: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve evaluate(com.opengamma.analytics.math.curve.InterpolatedDoublesCurve,double)>($r2, d0);

        return $r3;
    }
}
