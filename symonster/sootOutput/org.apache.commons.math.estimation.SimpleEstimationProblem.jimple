public class org.apache.commons.math.estimation.SimpleEstimationProblem extends java.lang.Object implements org.apache.commons.math.estimation.EstimationProblem
{
    private final java.util.List parameters;
    private final java.util.List measurements;

    public void <init>()
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List measurements> = $r2;

        return;
    }

    public org.apache.commons.math.estimation.EstimatedParameter[] getAllParameters()
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        java.util.List $r1, $r2;
        int $i0;
        org.apache.commons.math.estimation.EstimatedParameter[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        $r2 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters>;

        $r1 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.math.estimation.EstimatedParameter)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.commons.math.estimation.EstimatedParameter[]) $r4;

        return $r5;
    }

    public org.apache.commons.math.estimation.EstimatedParameter[] getUnboundParameters()
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        java.util.Iterator r2;
        org.apache.commons.math.estimation.EstimatedParameter r3;
        java.util.ArrayList $r4;
        java.util.List $r5, $r6;
        int $i0, $i1;
        boolean $z0, $z1;
        org.apache.commons.math.estimation.EstimatedParameter[] $r7, $r9;
        java.lang.Object[] $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.estimation.EstimatedParameter) $r10;

        $z1 = virtualinvoke r3.<org.apache.commons.math.estimation.EstimatedParameter: boolean isBound()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r7 = newarray (org.apache.commons.math.estimation.EstimatedParameter)[$i1];

        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.apache.commons.math.estimation.EstimatedParameter[]) $r8;

        return $r9;
    }

    public org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        java.util.List $r1, $r2;
        int $i0;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        $r2 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List measurements>;

        $r1 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List measurements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.math.estimation.WeightedMeasurement)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.commons.math.estimation.WeightedMeasurement[]) $r4;

        return $r5;
    }

    protected void addParameter(org.apache.commons.math.estimation.EstimatedParameter)
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        org.apache.commons.math.estimation.EstimatedParameter r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimatedParameter;

        $r2 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List parameters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void addMeasurement(org.apache.commons.math.estimation.WeightedMeasurement)
    {
        org.apache.commons.math.estimation.SimpleEstimationProblem r0;
        org.apache.commons.math.estimation.WeightedMeasurement r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.estimation.SimpleEstimationProblem;

        r1 := @parameter0: org.apache.commons.math.estimation.WeightedMeasurement;

        $r2 = r0.<org.apache.commons.math.estimation.SimpleEstimationProblem: java.util.List measurements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }
}
