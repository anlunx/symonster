public class com.opengamma.analytics.math.function.ConcatenatedVectorFunction extends com.opengamma.analytics.math.function.VectorFunction
{
    private final int[] _xPartition;
    private final int[] _yPartition;
    private final int _nPartitions;
    private final com.opengamma.analytics.math.function.VectorFunction[] _functions;
    private final int _sizeDom;
    private final int _sizeRange;

    public void <init>(com.opengamma.analytics.math.function.VectorFunction[])
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        com.opengamma.analytics.math.function.VectorFunction[] r1, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        int[] $r3, $r4, $r7, $r10, $r11, $r12;
        com.opengamma.analytics.math.function.VectorFunction $r6, $r9;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.function.VectorFunction[];

        specialinvoke r0.<com.opengamma.analytics.math.function.VectorFunction: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r1, "functions");

        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.function.VectorFunction[] _functions> = r1;

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions> = $i0;

        $i1 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        $r3 = newarray (int)[$i1];

        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _xPartition> = $r3;

        $i2 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        $r4 = newarray (int)[$i2];

        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _yPartition> = $r4;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label1:
        $i3 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        if i10 >= $i3 goto label2;

        $r7 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _xPartition>;

        $r5 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.function.VectorFunction[] _functions>;

        $r6 = $r5[i10];

        $i4 = virtualinvoke $r6.<com.opengamma.analytics.math.function.VectorFunction: int getLengthOfDomain()>();

        $r7[i10] = $i4;

        $r10 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _yPartition>;

        $r8 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.function.VectorFunction[] _functions>;

        $r9 = $r8[i10];

        $i5 = virtualinvoke $r9.<com.opengamma.analytics.math.function.VectorFunction: int getLengthOfRange()>();

        $r10[i10] = $i5;

        $r11 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _xPartition>;

        $i6 = $r11[i10];

        i8 = i8 + $i6;

        $r12 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _yPartition>;

        $i7 = $r12[i10];

        i9 = i9 + $i7;

        i10 = i10 + 1;

        goto label1;

     label2:
        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _sizeDom> = i8;

        r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _sizeRange> = i9;

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D calculateJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        com.opengamma.analytics.math.function.VectorFunction[] $r6;
        com.opengamma.analytics.math.function.VectorFunction $r8;
        int[] $r9, $r10;
        double[][] $r11, $r13;
        double[] $r12, $r14;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 = specialinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] partition(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1);

        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $i2 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int getLengthOfRange()>();

        $i3 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int getLengthOfDomain()>();

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>($i2, $i3);

        i6 = 0;

        i7 = 0;

        i8 = 0;

     label1:
        $i4 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        if i8 >= $i4 goto label6;

        $r6 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.function.VectorFunction[] _functions>;

        $r8 = $r6[i8];

        $r7 = r2[i8];

        r4 = virtualinvoke $r8.<com.opengamma.analytics.math.function.VectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix2D calculateJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r7);

        $r9 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _yPartition>;

        i0 = $r9[i8];

        $r10 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _xPartition>;

        i1 = $r10[i8];

        if i1 <= 0 goto label4;

        i9 = 0;

     label2:
        if i9 >= i0 goto label3;

        $r11 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r12 = $r11[i9];

        $r13 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i5 = i6;

        i6 = i6 + 1;

        $r14 = $r13[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r14, i7, i1);

        i9 = i9 + 1;

        goto label2;

     label3:
        i7 = i7 + i1;

        goto label5;

     label4:
        i6 = i6 + i0;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return $r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r5, $r7, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r2;
        double[] r4, $r11;
        int i0, $i1, $i2, i3, i4;
        com.opengamma.analytics.math.function.VectorFunction[] $r6;
        com.opengamma.analytics.math.function.VectorFunction $r8;
        java.lang.Object $r9;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 = specialinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] partition(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1);

        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i1 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int getLengthOfRange()>();

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int)>($i1);

        i3 = 0;

        i4 = 0;

     label1:
        $i2 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        if i4 >= $i2 goto label2;

        $r6 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.function.VectorFunction[] _functions>;

        $r8 = $r6[i4];

        $r7 = r2[i4];

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.function.VectorFunction: java.lang.Object evaluate(java.lang.Object)>($r7);

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r9;

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r4;

        $r11 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r11, i3, i0);

        i3 = i3 + i0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] partition(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r8, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6;
        int[] $r7;
        double[] $r9, $r11;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x");

        $i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i2 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int getLengthOfDomain()>();

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r5;

        $i4 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int getLengthOfDomain()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "Incorrect length of x. Is {} but should be {}", $r4);

        $i5 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        r2 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i5];

        i6 = 0;

        i7 = 0;

     label3:
        $i8 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _nPartitions>;

        if i7 >= $i8 goto label4;

        $r7 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int[] _xPartition>;

        i0 = $r7[i7];

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int)>(i0);

        r2[i7] = $r8;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r10 = r2[i7];

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i6, $r11, 0, i0);

        i6 = i6 + i0;

        i7 = i7 + 1;

        goto label3;

     label4:
        return r2;
    }

    public int getLengthOfDomain()
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        $i0 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _sizeDom>;

        return $i0;
    }

    public int getLengthOfRange()
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        $i0 = r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: int _sizeRange>;

        return $i0;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r0;
        java.lang.Object r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r2);

        return $r3;
    }
}
