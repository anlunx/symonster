class com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1 extends com.opengamma.analytics.math.function.Function1D
{
    final double val$forward;
    final double val$strike;
    final double val$t;
    final com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction, double, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction r1;
        double d0, d1, d2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$strike> = d1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$t> = d2;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public final java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, d47, d48, d49, d50, d51, $d52, $d53, $d54, d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, d74, $d75, $d76, $d77, $d78;
        byte $b0, $b1;
        boolean $z0, $z1, $z2;
        java.lang.Double $r2, $r12;
        org.slf4j.Logger $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        $d7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        d4 = $d7 * 1.0E-6;

        $d8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$strike>;

        $b0 = $d8 cmpg d4;

        if $b0 >= 0 goto label1;

        $r3 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction: org.slf4j.Logger access$000()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given strike of ");

        $d46 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$strike>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d46);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than cutoff at ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", therefore the strike is taken as ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r11);

        d47 = d4;

        goto label2;

     label1:
        d47 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$strike>;

     label2:
        d5 = 1.0 - d1;

        $d9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>($d9, d47, 1.0E-15);

        if $z0 == 0 goto label3;

        $d45 = staticinvoke <java.lang.Math: double pow(double,double)>(d47, d5);

        d48 = d0 / $d45;

        goto label8;

     label3:
        $d10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d11 = $d10 / d47;

        d49 = staticinvoke <java.lang.Math: double log(double)>($d11);

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d3, 0.0, 1.0E-15);

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 1.0, 1.0E-15);

        if $z2 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        return $r2;

     label4:
        $d39 = d49 * d0;

        $d41 = $d39 * d5;

        $d40 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d42 = staticinvoke <java.lang.Math: double pow(double,double)>($d40, d5);

        $d43 = staticinvoke <java.lang.Math: double pow(double,double)>(d47, d5);

        $d44 = $d42 - $d43;

        d48 = $d41 / $d44;

        goto label8;

     label5:
        $b1 = d1 cmpl 1.0;

        if $b1 != 0 goto label6;

        $d38 = d3 * d49;

        d50 = $d38 / d0;

        d51 = d50;

        goto label7;

     label6:
        $d12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>($d12, d5);

        $d14 = staticinvoke <java.lang.Math: double pow(double,double)>(d47, d5);

        $d15 = $d13 - $d14;

        $d16 = d3 * $d15;

        $d17 = $d16 / d0;

        d50 = $d17 / d5;

        $d18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d19 = $d18 - d47;

        $d20 = d3 * $d19;

        $d24 = $d20 / d0;

        $d21 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d23 = $d21 * d47;

        $d22 = d1 / 2.0;

        $d25 = staticinvoke <java.lang.Math: double pow(double,double)>($d23, $d22);

        d51 = $d24 / $d25;

     label7:
        $d26 = 2.0 * d2;

        $d27 = d51 - $d26;

        $d28 = d51 * $d27;

        $d29 = 1.0 + $d28;

        $d30 = staticinvoke <java.lang.Math: double sqrt(double)>($d29);

        $d31 = $d30 + d51;

        $d33 = $d31 - d2;

        $d32 = 1.0 - d2;

        d6 = $d33 / $d32;

        $d34 = d3 * d49;

        $d35 = $d34 * d51;

        $d36 = $d35 / d50;

        $d37 = staticinvoke <java.lang.Math: double log(double)>(d6);

        d48 = $d36 / $d37;

     label8:
        $d52 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$forward>;

        $d53 = $d52 * d47;

        $d54 = d5 / 2.0;

        d55 = staticinvoke <java.lang.Math: double pow(double,double)>($d53, $d54);

        $d56 = d5 * d5;

        $d57 = $d56 * d0;

        $d58 = $d57 * d0;

        $d59 = $d58 / 24.0;

        $d60 = $d59 / d55;

        $d61 = $d60 / d55;

        $d62 = d2 * d0;

        $d63 = $d62 * d1;

        $d64 = $d63 * d3;

        $d65 = $d64 / 4.0;

        $d66 = $d65 / d55;

        $d67 = $d61 + $d66;

        $d68 = d3 * d3;

        $d69 = 3.0 * d2;

        $d70 = $d69 * d2;

        $d71 = 2.0 - $d70;

        $d72 = $d68 * $d71;

        $d73 = $d72 / 24.0;

        d74 = $d67 + $d73;

        $d75 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: double val$t>;

        $d76 = d74 * $d75;

        $d77 = 1.0 + $d76;

        $d78 = d48 * $d77;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d78);

        return $r12;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1 r0;
        java.lang.Object r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRHaganAlternativeVolatilityFunction$1: java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)>($r2);

        return $r3;
    }
}
