public class org.apache.commons.math3.optim.linear.SimplexSolver extends org.apache.commons.math3.optim.linear.LinearOptimizer
{
    static final int DEFAULT_ULPS;
    static final double DEFAULT_CUT_OFF;
    private static final double DEFAULT_EPSILON;
    private final double epsilon;
    private final int maxUlps;
    private final double cutOff;
    private org.apache.commons.math3.optim.linear.PivotSelectionRule pivotSelection;
    private org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback;

    public void <init>()
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void <init>(double,int,double)>(1.0E-6, 10, 1.0E-10);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void <init>(double,int,double)>(d0, 10, 1.0E-10);

        return;
    }

    public void <init>(double, int)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void <init>(double,int,double)>(d0, i0, 1.0E-10);

        return;
    }

    public void <init>(double, int, double)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        double d0, d1;
        int i0;
        org.apache.commons.math3.optim.linear.PivotSelectionRule $r1;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: void <init>()>();

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double epsilon> = d0;

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: int maxUlps> = i0;

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double cutOff> = d1;

        $r1 = <org.apache.commons.math3.optim.linear.PivotSelectionRule: org.apache.commons.math3.optim.linear.PivotSelectionRule DANTZIG>;

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.PivotSelectionRule pivotSelection> = $r1;

        return;
    }

    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyIterationsException
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        int i0, i1;
        org.apache.commons.math3.optim.OptimizationData r3;
        boolean $z0, $z1;
        org.apache.commons.math3.optim.linear.PivotSelectionRule $r4;
        org.apache.commons.math3.optim.linear.SolutionCallback $r5;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.linear.LinearOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback> = null;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        $z0 = r3 instanceof org.apache.commons.math3.optim.linear.SolutionCallback;

        if $z0 == 0 goto label2;

        $r5 = (org.apache.commons.math3.optim.linear.SolutionCallback) r3;

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback> = $r5;

        goto label3;

     label2:
        $z1 = r3 instanceof org.apache.commons.math3.optim.linear.PivotSelectionRule;

        if $z1 == 0 goto label3;

        $r4 = (org.apache.commons.math3.optim.linear.PivotSelectionRule) r3;

        r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.PivotSelectionRule pivotSelection> = $r4;

        goto label3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private java.lang.Integer getPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.linear.SimplexTableau r1;
        double d0, d1;
        int $i0, $i1, i3;
        byte $b2;
        org.apache.commons.math3.optim.linear.PivotSelectionRule $r2, $r3;
        boolean $z0;
        java.lang.Integer r4;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.linear.SimplexTableau;

        d1 = 0.0;

        r4 = null;

        i3 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label1:
        $i0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getWidth()>();

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label3;

        d0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>(0, i3);

        $b2 = d0 cmpg d1;

        if $b2 >= 0 goto label2;

        d1 = d0;

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r3 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.PivotSelectionRule pivotSelection>;

        $r2 = <org.apache.commons.math3.optim.linear.PivotSelectionRule: org.apache.commons.math3.optim.linear.PivotSelectionRule BLAND>;

        if $r3 != $r2 goto label2;

        $z0 = specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: boolean isValidPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau,int)>(r1, i3);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r4;
    }

    private boolean isValidPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau, int)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.linear.SimplexTableau r1;
        int i0, $i1, $i2, i3;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.linear.SimplexTableau;

        i0 := @parameter1: int;

        i3 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label1:
        $i1 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getHeight()>();

        if i3 >= $i1 goto label3;

        d0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>(i3, i0);

        $d1 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double cutOff>;

        $i2 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>(d0, 0.0, $d1);

        if $i2 <= 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private java.lang.Integer getPivotRow(org.apache.commons.math3.optim.linear.SimplexTableau, int)
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.linear.SimplexTableau r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18;
        double d0, $d1, $d2, d3, d4, d5, d6;
        java.util.ArrayList $r3;
        java.lang.Object $r4, $r6, $r7;
        java.lang.Integer $r5, $r8, $r9, $r10, r12, r13, r15;
        boolean $z0, $z1, $z2, $z5;
        java.util.Iterator r11, r14;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.linear.SimplexTableau;

        i0 := @parameter1: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        d3 = 1.7976931348623157E308;

        i14 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumObjectiveFunctions()>();

     label01:
        $i2 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getHeight()>();

        if i14 >= $i2 goto label04;

        $i11 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getWidth()>();

        $i12 = $i11 - 1;

        d4 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>(i14, $i12);

        d5 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>(i14, i0);

        $d1 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double cutOff>;

        $i13 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>(d5, 0.0, $d1);

        if $i13 <= 0 goto label03;

        $d2 = d4 / d5;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        i1 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d3);

        if i1 != 0 goto label02;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label03;

     label02:
        if i1 >= 0 goto label03;

        d3 = d0;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label03:
        i14 = i14 + 1;

        goto label01;

     label04:
        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i3 != 0 goto label05;

        return null;

     label05:
        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i4 <= 1 goto label14;

        $i5 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i5 <= 0 goto label10;

        r11 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.Integer) $r7;

        i15 = 0;

     label07:
        $i7 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumArtificialVariables()>();

        if i15 >= $i7 goto label09;

        $i8 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getArtificialVariableOffset()>();

        i16 = i15 + $i8;

        $i9 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        d6 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>($i9, i16);

        $i10 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: int maxUlps>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d6, 1.0, $i10);

        if $z1 == 0 goto label08;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: java.lang.Integer getBasicRow(int)>(i16);

        $z2 = virtualinvoke r12.<java.lang.Integer: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label08;

        return r12;

     label08:
        i15 = i15 + 1;

        goto label07;

     label09:
        goto label06;

     label10:
        r13 = null;

        i17 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getWidth()>();

        r14 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.Integer) $r6;

        $i6 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        i18 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getBasicVariable(int)>($i6);

        if i18 >= i17 goto label12;

        i17 = i18;

        r13 = r15;

     label12:
        goto label11;

     label13:
        return r13;

     label14:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.Integer) $r4;

        return $r5;
    }

    protected void doIteration(org.apache.commons.math3.optim.linear.SimplexTableau) throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.linear.SimplexTableau r1;
        java.lang.Integer r2, r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.optim.linear.UnboundedSolutionException $r4;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.linear.SimplexTableau;

        virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void incrementIterationCount()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: java.lang.Integer getPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau)>(r1);

        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = specialinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: java.lang.Integer getPivotRow(org.apache.commons.math3.optim.linear.SimplexTableau,int)>(r1, $i0);

        if r3 != null goto label1;

        $r4 = new org.apache.commons.math3.optim.linear.UnboundedSolutionException;

        specialinvoke $r4.<org.apache.commons.math3.optim.linear.UnboundedSolutionException: void <init>()>();

        throw $r4;

     label1:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: void performRowOperations(int,int)>($i1, $i2);

        return;
    }

    protected void solvePhase1(org.apache.commons.math3.optim.linear.SimplexTableau) throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException, org.apache.commons.math3.optim.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.linear.SimplexTableau r1;
        int $i0, $i1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.commons.math3.optim.linear.NoFeasibleSolutionException $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.linear.SimplexTableau;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getNumArtificialVariables()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: boolean isOptimal()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optim.linear.SimplexTableau)>(r1);

        goto label1;

     label2:
        $i1 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: int getRhsOffset()>();

        $d0 = virtualinvoke r1.<org.apache.commons.math3.optim.linear.SimplexTableau: double getEntry(int,int)>(0, $i1);

        $d1 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double epsilon>;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, 0.0, $d1);

        if $z1 != 0 goto label3;

        $r2 = new org.apache.commons.math3.optim.linear.NoFeasibleSolutionException;

        specialinvoke $r2.<org.apache.commons.math3.optim.linear.NoFeasibleSolutionException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    public org.apache.commons.math3.optim.PointValuePair doOptimize() throws org.apache.commons.math3.exception.TooManyIterationsException, org.apache.commons.math3.optim.linear.UnboundedSolutionException, org.apache.commons.math3.optim.linear.NoFeasibleSolutionException
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.PointValuePair r2;
        double[] r3;
        org.apache.commons.math3.optim.linear.SolutionCallback $r4, $r9, $r11, $r12;
        org.apache.commons.math3.optim.linear.SimplexTableau $r5;
        org.apache.commons.math3.optim.linear.LinearObjectiveFunction $r6;
        java.util.Collection $r7;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType $r8;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.optim.linear.NoFeasibleSolutionException $r10;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        $r4 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback>;

        if $r4 == null goto label1;

        $r12 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback>;

        virtualinvoke $r12.<org.apache.commons.math3.optim.linear.SolutionCallback: void setTableau(org.apache.commons.math3.optim.linear.SimplexTableau)>(null);

     label1:
        $r5 = new org.apache.commons.math3.optim.linear.SimplexTableau;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.LinearObjectiveFunction getFunction()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: java.util.Collection getConstraints()>();

        $r8 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: boolean isRestrictedToNonNegative()>();

        $d0 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double epsilon>;

        $i0 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: int maxUlps>;

        specialinvoke $r5.<org.apache.commons.math3.optim.linear.SimplexTableau: void <init>(org.apache.commons.math3.optim.linear.LinearObjectiveFunction,java.util.Collection,org.apache.commons.math3.optim.nonlinear.scalar.GoalType,boolean,double,int)>($r6, $r7, $r8, $z0, $d0, $i0);

        virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void solvePhase1(org.apache.commons.math3.optim.linear.SimplexTableau)>($r5);

        virtualinvoke $r5.<org.apache.commons.math3.optim.linear.SimplexTableau: void dropPhase1Objective()>();

        $r9 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback>;

        if $r9 == null goto label2;

        $r11 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.linear.SolutionCallback solutionCallback>;

        virtualinvoke $r11.<org.apache.commons.math3.optim.linear.SolutionCallback: void setTableau(org.apache.commons.math3.optim.linear.SimplexTableau)>($r5);

     label2:
        $z2 = virtualinvoke $r5.<org.apache.commons.math3.optim.linear.SimplexTableau: boolean isOptimal()>();

        if $z2 != 0 goto label3;

        virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: void doIteration(org.apache.commons.math3.optim.linear.SimplexTableau)>($r5);

        goto label2;

     label3:
        r2 = virtualinvoke $r5.<org.apache.commons.math3.optim.linear.SimplexTableau: org.apache.commons.math3.optim.PointValuePair getSolution()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: boolean isRestrictedToNonNegative()>();

        if $z1 == 0 goto label6;

        r3 = virtualinvoke r2.<org.apache.commons.math3.optim.PointValuePair: double[] getPoint()>();

        i3 = 0;

     label4:
        $i1 = lengthof r3;

        if i3 >= $i1 goto label6;

        $d2 = r3[i3];

        $d1 = r0.<org.apache.commons.math3.optim.linear.SimplexSolver: double epsilon>;

        $i2 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>($d2, 0.0, $d1);

        if $i2 >= 0 goto label5;

        $r10 = new org.apache.commons.math3.optim.linear.NoFeasibleSolutionException;

        specialinvoke $r10.<org.apache.commons.math3.optim.linear.NoFeasibleSolutionException: void <init>()>();

        throw $r10;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return r2;
    }

    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    public volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.linear.SimplexSolver r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.linear.SimplexSolver;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.linear.SimplexSolver: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optim.linear.SimplexSolver: double DEFAULT_EPSILON> = 1.0E-6;

        <org.apache.commons.math3.optim.linear.SimplexSolver: double DEFAULT_CUT_OFF> = 1.0E-10;

        <org.apache.commons.math3.optim.linear.SimplexSolver: int DEFAULT_ULPS> = 10;

        return;
    }
}
