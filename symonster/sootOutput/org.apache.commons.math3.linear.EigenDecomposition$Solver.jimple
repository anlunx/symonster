class org.apache.commons.math3.linear.EigenDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
{
    private double[] realEigenvalues;
    private double[] imagEigenvalues;
    private final org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors;

    private void <init>(double[], double[], org.apache.commons.math3.linear.ArrayRealVector[])
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] r1, r2;
        org.apache.commons.math3.linear.ArrayRealVector[] r3;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math3.linear.ArrayRealVector[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues> = r1;

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] imagEigenvalues> = r2;

        r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors> = r3;

        return;
    }

    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, $i1, $i2, i3, i4;
        double[] r2, r4, $r5, $r8;
        org.apache.commons.math3.linear.ArrayRealVector r3, $r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        org.apache.commons.math3.linear.ArrayRealVector[] $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r9;
        org.apache.commons.math3.linear.SingularMatrixException $r10;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r10 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r10.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r10;

     label1:
        $r5 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof $r5;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label2;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r9;

     label2:
        r2 = newarray (double)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        $r7 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        r3 = $r7[i3];

        r4 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math3.linear.ArrayRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $r8 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d2 = $r8[i3];

        d0 = $d1 / $d2;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $d5 = r2[i4];

        $d3 = r4[i4];

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r2[i4] = $d6;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        $r6 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i8;
        double[][] r2;
        double[] r3, r5, $r6, $r9, $r10, $r11;
        org.apache.commons.math3.linear.ArrayRealVector r4;
        boolean $z0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r7;
        org.apache.commons.math3.linear.ArrayRealVector[] $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;
        org.apache.commons.math3.exception.DimensionMismatchException $r12;
        org.apache.commons.math3.linear.SingularMatrixException $r13;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label01;

        $r13 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r13.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r13;

     label01:
        $r6 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof $r6;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 == i0 goto label02;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r12;

     label02:
        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        r3 = newarray (double)[i0];

        i4 = 0;

     label03:
        if i4 >= i1 goto label12;

        i5 = 0;

     label04:
        if i5 >= i0 goto label05;

        $d8 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i4);

        r3[i5] = $d8;

        $r11 = r2[i5];

        $r11[i4] = 0.0;

        i5 = i5 + 1;

        goto label04;

     label05:
        i6 = 0;

     label06:
        if i6 >= i0 goto label11;

        $r8 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        r4 = $r8[i6];

        r5 = virtualinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        d9 = 0.0;

        i7 = 0;

     label07:
        if i7 >= i0 goto label08;

        $d5 = virtualinvoke r4.<org.apache.commons.math3.linear.ArrayRealVector: double getEntry(int)>(i7);

        $d6 = r3[i7];

        $d7 = $d5 * $d6;

        d9 = d9 + $d7;

        i7 = i7 + 1;

        goto label07;

     label08:
        $r9 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d0 = $r9[i6];

        d10 = d9 / $d0;

        i8 = 0;

     label09:
        if i8 >= i0 goto label10;

        $r10 = r2[i8];

        $d3 = $r10[i4];

        $d1 = r5[i8];

        $d2 = d10 * $d1;

        $d4 = $d3 + $d2;

        $r10[i4] = $d4;

        i8 = i8 + 1;

        goto label09;

     label10:
        i6 = i6 + 1;

        goto label06;

     label11:
        i4 = i4 + 1;

        goto label03;

     label12:
        $r7 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r7;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] $r1, $r2;
        int $i0, $i2, i3, i4;
        byte $b1;
        double $d0, $d1, $d2, d3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        d3 = 0.0;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $d2 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double eigenvalueNorm(int)>(i3);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d3, $d2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $b1 = d3 cmpl 0.0;

        if $b1 != 0 goto label3;

        return 0;

     label3:
        i4 = 0;

     label4:
        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $i2 = lengthof $r2;

        if i4 >= $i2 goto label6;

        $d0 = specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double eigenvalueNorm(int)>(i4);

        $d1 = $d0 / d3;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d1, 0.0, 1.0E-12);

        if $z0 == 0 goto label5;

        return 0;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return 1;
    }

    private double eigenvalueNorm(int)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        int i0;
        double d0, d1, $d2, $d3, $d4, $d5;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        d0 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] imagEigenvalues>;

        d1 = $r2[i0];

        $d3 = d0 * d0;

        $d2 = d1 * d1;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        return $d5;
    }

    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        int i0, i1, i2, i3;
        double[][] r1;
        double[] r2, r3, $r4, $r8;
        boolean $z0;
        org.apache.commons.math3.linear.RealMatrix $r5;
        org.apache.commons.math3.linear.ArrayRealVector[] $r6;
        org.apache.commons.math3.linear.ArrayRealVector $r7;
        double $d0, $d1, $d2, $d3, $d4, d5;
        org.apache.commons.math3.linear.SingularMatrixException $r9;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: boolean isNonSingular()>();

        if $z0 != 0 goto label1;

        $r9 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r9.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r9;

     label1:
        $r4 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        i0 = lengthof $r4;

        r1 = newmultiarray (double)[i0][i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        d5 = 0.0;

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        $r6 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors>;

        $r7 = $r6[i3];

        r3 = virtualinvoke $r7.<org.apache.commons.math3.linear.ArrayRealVector: double[] getDataRef()>();

        $d1 = r3[i1];

        $d0 = r3[i2];

        $d3 = $d1 * $d0;

        $r8 = r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: double[] realEigenvalues>;

        $d2 = $r8[i3];

        $d4 = $d3 / $d2;

        d5 = d5 + $d4;

        i3 = i3 + 1;

        goto label4;

     label5:
        r2[i2] = d5;

        i2 = i2 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        return $r5;
    }

    void <init>(double[], double[], org.apache.commons.math3.linear.ArrayRealVector[], org.apache.commons.math3.linear.EigenDecomposition$1)
    {
        org.apache.commons.math3.linear.EigenDecomposition$Solver r0;
        double[] r1, r2;
        org.apache.commons.math3.linear.ArrayRealVector[] r3;
        org.apache.commons.math3.linear.EigenDecomposition$1 r4;

        r0 := @this: org.apache.commons.math3.linear.EigenDecomposition$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math3.linear.ArrayRealVector[];

        r4 := @parameter3: org.apache.commons.math3.linear.EigenDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.EigenDecomposition$Solver: void <init>(double[],double[],org.apache.commons.math3.linear.ArrayRealVector[])>(r1, r2, r3);

        return;
    }
}
