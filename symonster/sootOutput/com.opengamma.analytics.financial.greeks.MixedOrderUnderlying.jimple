public class com.opengamma.analytics.financial.greeks.MixedOrderUnderlying extends java.lang.Object implements com.opengamma.analytics.financial.greeks.Underlying
{
    private final java.util.List _orders;
    private final java.util.List _underlyings;
    private final int _totalOrder;

    public void <init>(java.util.NavigableMap)
    {
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r0;
        java.util.NavigableMap r1;
        com.opengamma.analytics.financial.pnl.UnderlyingType r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int i0, $i1, i2;
        java.util.ArrayList $r5, $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r11;
        java.lang.Integer $r10;
        com.opengamma.analytics.financial.greeks.NthOrderUnderlying $r12;
        java.util.List $r13, $r14;
        java.lang.IllegalArgumentException $r15, $r16;

        r0 := @this: com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        r1 := @parameter0: java.util.NavigableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "underlyings");

        $i1 = interfaceinvoke r1.<java.util.NavigableMap: int size()>();

        if $i1 >= 2 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least two underlying types to have mixed order");

        throw $r16;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _orders> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _underlyings> = $r6;

        i2 = 0;

        $r7 = interfaceinvoke r1.<java.util.NavigableMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if i0 >= 1 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Order must be at least one to have mixed order");

        throw $r15;

     label3:
        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (com.opengamma.analytics.financial.pnl.UnderlyingType) $r11;

        $r13 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _orders>;

        $r12 = new com.opengamma.analytics.financial.greeks.NthOrderUnderlying;

        specialinvoke $r12.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: void <init>(int,com.opengamma.analytics.financial.pnl.UnderlyingType)>(i0, r2);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r14 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _underlyings>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r2);

        i2 = i2 + i0;

        goto label2;

     label4:
        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: int _totalOrder> = i2;

        return;
    }

    public void <init>(java.util.List)
    {
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r0;
        java.util.List r1, $r7, $r8;
        java.util.Iterator r2;
        com.opengamma.analytics.financial.greeks.NthOrderUnderlying r3;
        int $i0, $i1, $i2, i3;
        java.util.ArrayList $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "underlyings");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least two nth order underlyings to have mixed order");

        throw $r10;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _orders> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _underlyings> = $r5;

        i3 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.opengamma.analytics.financial.greeks.NthOrderUnderlying) $r6;

        $i1 = virtualinvoke r3.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: int getOrder()>();

        if $i1 >= 1 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Order must be at least one to have mixed order");

        throw $r9;

     label3:
        $i2 = virtualinvoke r3.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: int getOrder()>();

        i3 = i3 + $i2;

        $r7 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _underlyings>;

        $r8 = virtualinvoke r3.<com.opengamma.analytics.financial.greeks.NthOrderUnderlying: java.util.List getUnderlyings()>();

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        goto label2;

     label4:
        r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: int _totalOrder> = i3;

        return;
    }

    public int getOrder()
    {
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        $i0 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: int _totalOrder>;

        return $i0;
    }

    public java.util.List getUnderlyingOrders()
    {
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        $r1 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _orders>;

        return $r1;
    }

    public java.util.List getUnderlyings()
    {
        com.opengamma.analytics.financial.greeks.MixedOrderUnderlying r0;
        java.util.List $r1;

        r0 := @this: com.opengamma.analytics.financial.greeks.MixedOrderUnderlying;

        $r1 = r0.<com.opengamma.analytics.financial.greeks.MixedOrderUnderlying: java.util.List _underlyings>;

        return $r1;
    }
}
