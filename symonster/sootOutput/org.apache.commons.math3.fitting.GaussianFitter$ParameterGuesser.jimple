public class org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser extends java.lang.Object
{
    private final double norm;
    private final double mean;
    private final double sigma;

    public void <init>(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1, r2;
        double[] r3;
        int $i0, $i1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;
        java.lang.Object[] $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r7;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 3 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i1 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        r2 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[])>(r1);

        r3 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[])>(r2);

        $d0 = r3[0];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double norm> = $d0;

        $d1 = r3[1];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double mean> = $d1;

        $d2 = r3[2];

        r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double sigma> = $d2;

        return;
    }

    public double[] guess()
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        double[] $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        $r1 = newarray (double)[3];

        $d0 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double norm>;

        $r1[0] = $d0;

        $d1 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double mean>;

        $r1[1] = $d1;

        $d2 = r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double sigma>;

        $r1[2] = $d2;

        return $r1;
    }

    private org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1, r2;
        java.lang.Object $r4;
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1 $r5;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.commons.math3.fitting.WeightedObservedPoint[]) $r4;

        $r5 = new org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1;

        specialinvoke $r5.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1: void <init>(org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r5);

        return r2;
    }

    private double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1;
        int i0, $i1, $i2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r2, $r3, $r6, $r7;
        double[] $r4;
        org.apache.commons.math3.exception.OutOfRangeException $r5;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        i0 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[])>(r1);

        $r2 = r1[i0];

        d0 = virtualinvoke $r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $r3 = r1[i0];

        d1 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

     label1:
        $d4 = d1 - d0;

        $d5 = $d4 / 2.0;

        d12 = d0 + $d5;

        d2 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>(r1, i0, -1, d12);

        d3 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>(r1, i0, 1, d12);

        d13 = d3 - d2;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $r6 = r1[$i2];

        $d10 = virtualinvoke $r6.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $r7 = r1[0];

        $d11 = virtualinvoke $r7.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        d13 = $d10 - $d11;

     label4:
        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(2.0);

        $d7 = 2.0 * $d6;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $d9 = 2.0 * $d8;

        d14 = d13 / $d9;

        $r4 = newarray (double)[3];

        $r4[0] = d0;

        $r4[1] = d1;

        $r4[2] = d14;

        return $r4;

        catch org.apache.commons.math3.exception.OutOfRangeException from label1 to label2 with label3;
    }

    private int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1;
        int $i0, i2, i3;
        org.apache.commons.math3.fitting.WeightedObservedPoint $r2, $r3;
        double $d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        i2 = 0;

        i3 = 1;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r2 = r1[i3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $r3 = r1[i2];

        $d1 = virtualinvoke $r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label2;

        i2 = i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1, r2;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        org.apache.commons.math3.fitting.WeightedObservedPoint r3, r4;
        byte $b2, $b3;
        org.apache.commons.math3.exception.ZeroException $r5;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        if i1 != 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r5.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r5;

     label1:
        r2 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[],int,int,double)>(r1, i0, i1, d0);

        r3 = r2[0];

        r4 = r2[1];

        $d1 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b2 = $d1 cmpl d0;

        if $b2 != 0 goto label2;

        $d16 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        return $d16;

     label2:
        $d2 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $b3 = $d2 cmpl d0;

        if $b3 != 0 goto label3;

        $d15 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        return $d15;

     label3:
        $d3 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d4 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d5 = d0 - $d4;

        $d6 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d7 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d8 = $d6 - $d7;

        $d9 = $d5 * $d8;

        $d10 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d11 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d12 = $d10 - $d11;

        $d13 = $d9 / $d12;

        $d14 = $d3 + $d13;

        return $d14;
    }

    private org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        org.apache.commons.math3.fitting.WeightedObservedPoint[] r1, $r8, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        double d0, $d1, $d2;
        org.apache.commons.math3.fitting.WeightedObservedPoint r2, r3;
        org.apache.commons.math3.exception.OutOfRangeException $r4;
        java.lang.Double $r5, $r6, $r7;
        boolean $z0;
        org.apache.commons.math3.exception.ZeroException $r10;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        r1 := @parameter0: org.apache.commons.math3.fitting.WeightedObservedPoint[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        if i1 != 0 goto label1;

        $r10 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r10.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r10;

     label1:
        i6 = i0;

     label2:
        if i1 >= 0 goto label3;

        $i5 = i6 + i1;

        if $i5 < 0 goto label7;

        goto label4;

     label3:
        $i3 = i6 + i1;

        $i2 = lengthof r1;

        if $i3 >= $i2 goto label7;

     label4:
        r2 = r1[i6];

        $i4 = i6 + i1;

        r3 = r1[$i4];

        $d1 = virtualinvoke r2.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $d2 = virtualinvoke r3.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getY()>();

        $z0 = specialinvoke r0.<org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser: boolean isBetween(double,double,double)>(d0, $d1, $d2);

        if $z0 == 0 goto label6;

        if i1 >= 0 goto label5;

        $r9 = newarray (org.apache.commons.math3.fitting.WeightedObservedPoint)[2];

        $r9[0] = r3;

        $r9[1] = r2;

        return $r9;

     label5:
        $r8 = newarray (org.apache.commons.math3.fitting.WeightedObservedPoint)[2];

        $r8[0] = r2;

        $r8[1] = r3;

        return $r8;

     label6:
        i6 = i6 + i1;

        goto label2;

     label7:
        $r4 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        specialinvoke $r4.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;
    }

    private boolean isBetween(double, double, double)
    {
        org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser r0;
        double d0, d1, d2;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $b3 = d0 cmpg d2;

        if $b3 <= 0 goto label2;

     label1:
        $b1 = d0 cmpl d2;

        if $b1 < 0 goto label3;

        $b2 = d0 cmpg d1;

        if $b2 > 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }
}
