public class com.opengamma.analytics.example.curveconstruction.CurveExample extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.example.curveconstruction.CurveExample r0;

        r0 := @this: com.opengamma.analytics.example.curveconstruction.CurveExample;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void constantDoublesCurveDemo(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        com.opengamma.analytics.math.curve.ConstantDoublesCurve $r2;
        java.lang.Double $r3, $r5, $r7;
        java.lang.Object $r4, $r6, $r8;

        r0 := @parameter0: java.io.PrintStream;

        $r2 = new com.opengamma.analytics.math.curve.ConstantDoublesCurve;

        specialinvoke $r2.<com.opengamma.analytics.math.curve.ConstantDoublesCurve: void <init>(double)>(5.0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = virtualinvoke $r2.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r3);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        $r6 = virtualinvoke $r2.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r5);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r6);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-10.0);

        $r8 = virtualinvoke $r2.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r7);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r8);

        return;
    }

    public static void interpolatedDoublesCurveDemo(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        double[] $r6, $r7;
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D $r8;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r9;
        java.lang.Double $r10, $r12, $r14, $r16, $r18;
        java.lang.Object $r11, $r13, $r15, $r17;
        java.lang.IllegalArgumentException $r20;

        r0 := @parameter0: java.io.PrintStream;

        $r6 = newarray (double)[3];

        $r6[0] = 1.0;

        $r6[1] = 2.0;

        $r6[2] = 3.0;

        $r7 = newarray (double)[3];

        $r7[0] = 2.0;

        $r7[1] = 4.0;

        $r7[2] = 6.0;

        $r8 = new com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.LinearInterpolator1D: void <init>()>();

        $r9 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        specialinvoke $r9.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r6, $r7, $r8, 1);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r11 = virtualinvoke $r9.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r10);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r11);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r13 = virtualinvoke $r9.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r12);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r13);

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r15 = virtualinvoke $r9.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r14);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r15);

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        $r17 = virtualinvoke $r9.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r16);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r17);

     label1:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("Trying to get y value for too large an x...");

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        virtualinvoke $r9.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r18);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("IllegalArgumentException called");

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static void interpolatorExtrapolatorDoublesCurveDemo(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        double[] $r8, $r9;
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D $r10;
        com.opengamma.analytics.math.interpolation.LinearExtrapolator1D $r11, $r12;
        com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator $r13;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r14;
        java.lang.Double $r15, $r17, $r19, $r21, $r23;
        java.lang.Object $r16, $r18, $r20, $r22, $r24;

        r0 := @parameter0: java.io.PrintStream;

        $r8 = newarray (double)[3];

        $r8[0] = 1.0;

        $r8[1] = 2.0;

        $r8[2] = 3.0;

        $r9 = newarray (double)[3];

        $r9[0] = 2.0;

        $r9[1] = 4.0;

        $r9[2] = 6.0;

        $r10 = new com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.LinearInterpolator1D: void <init>()>();

        $r11 = new com.opengamma.analytics.math.interpolation.LinearExtrapolator1D;

        specialinvoke $r11.<com.opengamma.analytics.math.interpolation.LinearExtrapolator1D: void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D)>($r10);

        $r12 = new com.opengamma.analytics.math.interpolation.LinearExtrapolator1D;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.LinearExtrapolator1D: void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D)>($r10);

        $r13 = new com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator;

        specialinvoke $r13.<com.opengamma.analytics.math.interpolation.CombinedInterpolatorExtrapolator: void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D,com.opengamma.analytics.math.interpolation.Interpolator1D,com.opengamma.analytics.math.interpolation.Interpolator1D)>($r10, $r11, $r12);

        $r14 = new com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        specialinvoke $r14.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: void <init>(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D,boolean)>($r8, $r9, $r13, 1);

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r16 = virtualinvoke $r14.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r15);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r18 = virtualinvoke $r14.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r17);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r20 = virtualinvoke $r14.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r19);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r20);

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        $r22 = virtualinvoke $r14.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r21);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r22);

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r24 = virtualinvoke $r14.<com.opengamma.analytics.math.curve.Curve: java.lang.Object getYValue(java.lang.Comparable)>($r23);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.Object)>($r24);

        return;
    }
}
