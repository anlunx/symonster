public class com.opengamma.analytics.math.minimization.SumToOne extends java.lang.Object
{
    private static final double TOL;
    private static final java.util.Map SETS;
    private final int[][] _set;
    private final int _n;

    public void <init>(int)
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        int i0;
        int[][] $r1;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.opengamma.analytics.math.minimization.SumToOne: int[][] getSet(int)>(i0);

        r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set> = $r1;

        r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n> = i0;

        return;
    }

    public double[] transform(double[])
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        double[] r1, r2, r3, r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, i19, i20;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6;
        int[][] $r7, $r9;
        int[] $r8, $r10;
        double $d0, $d1, $d2, $d3, d4, d5, d6;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: double[];

        $i2 = lengthof r1;

        $i0 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i1 = $i0 - 1;

        if $i2 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r4 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r5;

        $i4 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i5 = $i4 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "length of fitParms is {}, but must be {} ", $r4);

        $i6 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i7 = $i6 - 1;

        r2 = newarray (double)[$i7];

        $i8 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i9 = $i8 - 1;

        r3 = newarray (double)[$i9];

        i16 = 0;

     label03:
        $i17 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i18 = $i17 - 1;

        if i16 >= $i18 goto label04;

        $d2 = r1[i16];

        d4 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        d5 = d4 * d4;

        r2[i16] = d5;

        $d3 = 1.0 - d5;

        r3[i16] = $d3;

        i16 = i16 + 1;

        goto label03;

     label04:
        $i10 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        r11 = newarray (double)[$i10];

        i19 = 0;

     label05:
        $i11 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        if i19 >= $i11 goto label10;

        d6 = 1.0;

        i20 = 0;

     label06:
        $i12 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i13 = $i12 - 1;

        if i20 >= $i13 goto label09;

        $r7 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r8 = $r7[i19];

        $i14 = $r8[i20];

        if $i14 != 1 goto label07;

        $d1 = r2[i20];

        d6 = d6 * $d1;

        goto label08;

     label07:
        $r9 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r10 = $r9[i19];

        $i15 = $r10[i20];

        if $i15 != -1 goto label08;

        $d0 = r3[i20];

        d6 = d6 * $d0;

     label08:
        i20 = i20 + 1;

        goto label06;

     label09:
        r11[i19] = d6;

        i19 = i19 + 1;

        goto label05;

     label10:
        return r11;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D transform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r2;
        double[] $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: double[] transform(double[])>($r3);

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r4);

        return $r2;
    }

    public double[] inverseTransform(double[])
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        double[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i11, $i12, i13, $i14, $i15;
        java.lang.Object[] $r4, $r7;
        java.lang.Integer $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;
        byte $b8;
        java.lang.Double $r8;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        $i0 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[0] = $r5;

        $i3 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "length of modelParms is {}, but must be {} ", $r4);

        $i4 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i5 = $i4 - 1;

        r2 = newarray (double)[$i5];

        $i6 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i7 = $i6 + 1;

        r3 = newarray (double)[$i7];

        d6 = 0.0;

        i11 = 0;

     label3:
        $i12 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        if i11 >= $i12 goto label4;

        $d5 = r1[i11];

        d6 = d6 + $d5;

        $i10 = i11 + 1;

        r3[$i10] = d6;

        i11 = i11 + 1;

        goto label3;

     label4:
        $d0 = d6 - 1.0;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $b8 = $d1 cmpg 1.0E-9;

        if $b8 >= 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        $r7[0] = $r8;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "sum of elements is {}. Must be 1.0", $r7);

        $i9 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        specialinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: void cal(double[],double,int,int,int,double[])>(r3, 1.0, 0, $i9, 0, r2);

        i13 = 0;

     label7:
        $i14 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i15 = $i14 - 1;

        if i13 >= $i15 goto label8;

        $d2 = r2[i13];

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d4 = staticinvoke <java.lang.Math: double asin(double)>($d3);

        r2[i13] = $d4;

        i13 = i13 + 1;

        goto label7;

     label8:
        return r2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D inverseTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r2;
        double[] $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: double[] inverseTransform(double[])>($r3);

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r4);

        return $r2;
    }

    public double[][] jacobian(double[])
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        double[] r1, r2, r3, $r11, $r12, r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i23, $i24, $i25, i26, $i27, $i28, i29, i30, i31, i32;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6;
        int[][] $r7, $r9, $r13, $r15;
        int[] $r8, $r10, $r14, $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21;
        byte $b20, $b21;
        boolean $z0;
        double[][] r18;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: double[];

        $i2 = lengthof r1;

        $i0 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i1 = $i0 - 1;

        if $i2 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r4 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r5;

        $i4 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i5 = $i4 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "length of fitParms is {}, but must be {} ", $r4);

        $i6 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i7 = $i6 - 1;

        r2 = newarray (double)[$i7];

        $i8 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i9 = $i8 - 1;

        r3 = newarray (double)[$i9];

        i26 = 0;

     label03:
        $i27 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i28 = $i27 - 1;

        if i26 >= $i28 goto label04;

        $d17 = r1[i26];

        $d18 = staticinvoke <java.lang.Math: double sin(double)>($d17);

        r2[i26] = $d18;

        $d19 = r1[i26];

        $d20 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        r3[i26] = $d20;

        i26 = i26 + 1;

        goto label03;

     label04:
        $i10 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        r17 = newarray (double)[$i10];

        i29 = 0;

     label05:
        $i11 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        if i29 >= $i11 goto label10;

        d21 = 1.0;

        i30 = 0;

     label06:
        $i22 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i23 = $i22 - 1;

        if i30 >= $i23 goto label09;

        $r13 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r14 = $r13[i29];

        $i24 = $r14[i30];

        if $i24 != 1 goto label07;

        $d16 = r2[i30];

        d21 = d21 * $d16;

        goto label08;

     label07:
        $r15 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r16 = $r15[i29];

        $i25 = $r16[i30];

        if $i25 != -1 goto label08;

        $d15 = r3[i30];

        d21 = d21 * $d15;

     label08:
        i30 = i30 + 1;

        goto label06;

     label09:
        $d13 = 2.0 * d21;

        $d14 = $d13 * d21;

        r17[i29] = $d14;

        i29 = i29 + 1;

        goto label05;

     label10:
        $i14 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i12 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i13 = $i12 - 1;

        r18 = newmultiarray (double)[$i14][$i13];

        i31 = 0;

     label11:
        $i15 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        if i31 >= $i15 goto label16;

        i32 = 0;

     label12:
        $i16 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int _n>;

        $i17 = $i16 - 1;

        if i32 >= $i17 goto label15;

        $r7 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r8 = $r7[i31];

        $i18 = $r8[i32];

        if $i18 != 1 goto label13;

        $d7 = r17[i31];

        $b21 = $d7 cmpl 0.0;

        if $b21 == 0 goto label13;

        $r12 = r18[i31];

        $d9 = r17[i31];

        $d8 = r3[i32];

        $d11 = $d9 * $d8;

        $d10 = r2[i32];

        $d12 = $d11 / $d10;

        $r12[i32] = $d12;

        goto label14;

     label13:
        $r9 = r0.<com.opengamma.analytics.math.minimization.SumToOne: int[][] _set>;

        $r10 = $r9[i31];

        $i19 = $r10[i32];

        if $i19 != -1 goto label14;

        $d0 = r17[i31];

        $b20 = $d0 cmpl 0.0;

        if $b20 == 0 goto label14;

        $r11 = r18[i31];

        $d1 = r17[i31];

        $d3 = neg $d1;

        $d2 = r2[i32];

        $d5 = $d3 * $d2;

        $d4 = r3[i32];

        $d6 = $d5 / $d4;

        $r11[i32] = $d6;

     label14:
        i32 = i32 + 1;

        goto label12;

     label15:
        i31 = i31 + 1;

        goto label11;

     label16:
        return r18;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D jacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r2;
        double[] $r3;
        double[][] $r4;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: double[][] jacobian(double[])>($r3);

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r4);

        return $r2;
    }

    private void cal(double[], double, int, int, int, double[])
    {
        com.opengamma.analytics.math.minimization.SumToOne r0;
        double[] r1, r2;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.opengamma.analytics.math.minimization.SumToOne;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: double[];

        if i1 != 1 goto label1;

        return;

     label1:
        i3 = i1 / 2;

        i4 = i1 - i3;

        $i5 = i2 + i3;

        $d4 = r1[$i5];

        $d3 = r1[i2];

        $d5 = $d4 - $d3;

        d1 = $d5 * d0;

        d2 = 1.0 - d1;

        r2[i0] = d1;

        $d6 = d0 / d1;

        $i6 = i0 + 1;

        specialinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: void cal(double[],double,int,int,int,double[])>(r1, $d6, $i6, i3, i2, r2);

        $d7 = d0 / d2;

        $i8 = i0 + i3;

        $i7 = i2 + i3;

        specialinvoke r0.<com.opengamma.analytics.math.minimization.SumToOne: void cal(double[],double,int,int,int,double[])>(r1, $d7, $i8, i4, $i7, r2);

        return;
    }

    protected static int[][] getSet(int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        int[][] r0, r1, $r23, r24, $r25;
        java.util.Map $r2, $r20, $r26;
        java.lang.Integer $r3, $r21, $r27;
        boolean $z0, $z1;
        int[] $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.Object $r22;

        i0 := @parameter0: int;

        if i0 <= 1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "need n>1");

        $r2 = <com.opengamma.analytics.math.minimization.SumToOne: java.util.Map SETS>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label03;

        $r20 = <com.opengamma.analytics.math.minimization.SumToOne: java.util.Map SETS>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r22 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (int[][]) $r22;

        return $r23;

     label03:
        r24 = newarray (int[])[i0];

        tableswitch(i0)
        {
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label04:
        $r4 = newarray (int)[1];

        $r4[0] = 1;

        r24[0] = $r4;

        $r5 = newarray (int)[1];

        $r5[0] = -1;

        r24[1] = $r5;

        goto label13;

     label05:
        $r11 = newarray (int)[2];

        $r11[0] = 1;

        $r11[1] = 0;

        r24[0] = $r11;

        $r12 = newarray (int)[2];

        $r12[0] = -1;

        $r12[1] = 1;

        r24[1] = $r12;

        $r13 = newarray (int)[2];

        $r13[0] = -1;

        $r13[1] = -1;

        r24[2] = $r13;

        goto label13;

     label06:
        $r7 = newarray (int)[3];

        $r7[0] = 1;

        $r7[1] = 1;

        $r7[2] = 0;

        r24[0] = $r7;

        $r8 = newarray (int)[3];

        $r8[0] = 1;

        $r8[1] = -1;

        $r8[2] = 0;

        r24[1] = $r8;

        $r9 = newarray (int)[3];

        $r9[0] = -1;

        $r9[1] = 0;

        $r9[2] = 1;

        r24[2] = $r9;

        $r10 = newarray (int)[3];

        $r10[0] = -1;

        $r10[1] = 0;

        $r10[2] = -1;

        r24[3] = $r10;

        goto label13;

     label07:
        i1 = i0 / 2;

        i2 = i0 - i1;

        r0 = staticinvoke <com.opengamma.analytics.math.minimization.SumToOne: int[][] getSet(int)>(i1);

        if i1 != i2 goto label08;

        $r25 = r0;

        goto label09;

     label08:
        $r25 = staticinvoke <com.opengamma.analytics.math.minimization.SumToOne: int[][] getSet(int)>(i2);

     label09:
        r1 = $r25;

        $i3 = i0 - 1;

        r24 = newmultiarray (int)[i0][$i3];

        i8 = 0;

     label10:
        if i8 >= i1 goto label11;

        $r17 = r24[i8];

        $r17[0] = 1;

        $r19 = r0[i8];

        $r18 = r24[i8];

        $i7 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, $r18, 1, $i7);

        i8 = i8 + 1;

        goto label10;

     label11:
        i9 = 0;

     label12:
        if i9 >= i2 goto label13;

        $i4 = i9 + i1;

        $r14 = r24[$i4];

        $r14[0] = -1;

        $r16 = r1[i9];

        $i5 = i9 + i1;

        $r15 = r24[$i5];

        $i6 = i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, $r15, i1, $i6);

        i9 = i9 + 1;

        goto label12;

     label13:
        $r26 = <com.opengamma.analytics.math.minimization.SumToOne: java.util.Map SETS>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, r24);

        return r24;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <com.opengamma.analytics.math.minimization.SumToOne: double TOL> = 1.0E-9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.opengamma.analytics.math.minimization.SumToOne: java.util.Map SETS> = $r0;

        return;
    }
}
