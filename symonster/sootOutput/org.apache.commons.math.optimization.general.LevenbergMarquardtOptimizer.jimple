public class org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer extends org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
{
    private int solvedCols;
    private double[] diagR;
    private double[] jacNorm;
    private double[] beta;
    private int[] permutation;
    private int rank;
    private double lmPar;
    private double[] lmDir;
    private double initialStepBoundFactor;
    private double costRelativeTolerance;
    private double parRelativeTolerance;
    private double orthoTolerance;
    private double qrRankingThreshold;

    public void <init>()
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        specialinvoke r0.<org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setMaxIterations(int)>(1000);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setConvergenceChecker(org.apache.commons.math.optimization.VectorialConvergenceChecker)>(null);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setInitialStepBoundFactor(double)>(100.0);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setCostRelativeTolerance(double)>(1.0E-10);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setParRelativeTolerance(double)>(1.0E-10);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setOrthoTolerance(double)>(1.0E-10);

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void setQRRankingThreshold(double)>(2.2250738585072014E-308);

        return;
    }

    public void setInitialStepBoundFactor(double)
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = d0;

        return;
    }

    public void setCostRelativeTolerance(double)
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance> = d0;

        return;
    }

    public void setParRelativeTolerance(double)
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance> = d0;

        return;
    }

    public void setOrthoTolerance(double)
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance> = d0;

        return;
    }

    public void setQRRankingThreshold(double)
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double qrRankingThreshold> = d0;

        return;
    }

    protected org.apache.commons.math.optimization.VectorialPointValuePair doOptimize() throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, r5, r6, $r7, $r8, $r9, $r11, $r13, $r14, $r28, $r30, $r31, $r34, $r37, $r39, $r41, $r42, $r43, $r44, $r45, $r47, $r48, $r50, $r51, $r53, $r55, $r56, $r57, $r60, $r61, $r62, r63, r64, r68, r69, r71, r72;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i24, $i26, $i30, $i38, $i39, $i44, $i46, i49, $i50, i51, i52, i53, i55, i56, i57, i58, i59, i60, i61, $i62, i63, i64, i66, i67, i68;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, d62, d63, d64, d65, d66, $d67, d68, $d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, $d84, $d85, d86, $d87, $d88, $d89, $d90, d91, d92, $d93, $d94, $d95;
        int[] $r10, $r27, $r36, $r40, $r46, $r52, $r58;
        org.apache.commons.math.optimization.VectorialPointValuePair $r12, $r29, $r49, r65, r66;
        byte $b20, $b22, $b25, $b27, $b28, $b29, $b31, $b32, $b33, $b34, $b35, $b36, $b37, $b40, $b41, $b42, $b43, $b45, $b47, $b48, $b54, $b65, $b69, $b70;
        org.apache.commons.math.optimization.OptimizationException $r15, $r19, $r23;
        java.lang.Object[] $r16, $r20, $r24;
        org.apache.commons.math.exception.util.LocalizedFormats $r17, $r21, $r25;
        java.lang.Double $r18, $r22, $r26;
        org.apache.commons.math.optimization.VectorialConvergenceChecker $r32, $r33, $r73;
        boolean $z0, z1;
        double[][] $r38, $r54, $r59;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        $i4 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        $i3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols> = $i5;

        $i6 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r7 = newarray (double)[$i6];

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR> = $r7;

        $i7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r8 = newarray (double)[$i7];

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm> = $r8;

        $i8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r9 = newarray (double)[$i8];

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] beta> = $r9;

        $i9 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r10 = newarray (int)[$i9];

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation> = $r10;

        $i10 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r11 = newarray (double)[$i10];

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir> = $r11;

        d62 = 0.0;

        d63 = 0.0;

        $i11 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        r1 = newarray (double)[$i11];

        $i12 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        r2 = newarray (double)[$i12];

        $i13 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        r63 = newarray (double)[$i13];

        $i14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        r64 = newarray (double)[$i14];

        $i15 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        r3 = newarray (double)[$i15];

        $i16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        r4 = newarray (double)[$i16];

        $i17 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        r5 = newarray (double)[$i17];

        $i18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        r6 = newarray (double)[$i18];

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void updateResidualsAndCost()>();

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        z1 = 1;

        $r12 = new org.apache.commons.math.optimization.VectorialPointValuePair;

        $r14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $r13 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective>;

        specialinvoke $r12.<org.apache.commons.math.optimization.VectorialPointValuePair: void <init>(double[],double[])>($r14, $r13);

        r65 = $r12;

     label01:
        i49 = 0;

     label02:
        $i50 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        if i49 >= $i50 goto label03;

        $r62 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] wresiduals>;

        $d61 = $r62[i49];

        r3[i49] = $d61;

        i49 = i49 + 1;

        goto label02;

     label03:
        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void incrementIterationsCounter()>();

        r66 = r65;

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void updateJacobian()>();

        specialinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void qrDecomposition()>();

        specialinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void qTy(double[])>(r3);

        i51 = 0;

     label04:
        $i19 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i51 >= $i19 goto label05;

        $r58 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i52 = $r58[i51];

        $r59 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r61 = $r59[i51];

        $r60 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d60 = $r60[i52];

        $r61[i52] = $d60;

        i51 = i51 + 1;

        goto label04;

     label05:
        if z1 == 0 goto label11;

        d64 = 0.0;

        i53 = 0;

     label06:
        $i46 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i53 >= $i46 goto label08;

        $r56 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d65 = $r56[i53];

        $b48 = d65 cmpl 0.0;

        if $b48 != 0 goto label07;

        d65 = 1.0;

     label07:
        $r57 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $d58 = $r57[i53];

        d66 = d65 * $d58;

        $d59 = d66 * d66;

        d64 = d64 + $d59;

        r1[i53] = d65;

        i53 = i53 + 1;

        goto label06;

     label08:
        d63 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d64);

        $b47 = d63 cmpl 0.0;

        if $b47 != 0 goto label09;

        $d67 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        goto label10;

     label09:
        $d57 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d67 = $d57 * d63;

     label10:
        d62 = $d67;

     label11:
        d68 = 0.0;

        $d69 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        $b54 = $d69 cmpl 0.0;

        if $b54 == 0 goto label16;

        i55 = 0;

     label12:
        $i44 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i55 >= $i44 goto label16;

        $r52 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i56 = $r52[i55];

        $r53 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d70 = $r53[i56];

        $b45 = d70 cmpl 0.0;

        if $b45 == 0 goto label15;

        d71 = 0.0;

        i57 = 0;

     label13:
        if i57 > i55 goto label14;

        $r54 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r55 = $r54[i57];

        $d55 = $r55[i56];

        $d54 = r3[i57];

        $d56 = $d55 * $d54;

        d71 = d71 + $d56;

        i57 = i57 + 1;

        goto label13;

     label14:
        $d50 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d71);

        $d51 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        $d52 = d70 * $d51;

        $d53 = $d50 / $d52;

        d68 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d68, $d53);

     label15:
        i55 = i55 + 1;

        goto label12;

     label16:
        $d2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $b20 = d68 cmpg $d2;

        if $b20 > 0 goto label17;

        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void updateResidualsAndCost()>();

        $r49 = new org.apache.commons.math.optimization.VectorialPointValuePair;

        $r51 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $r50 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective>;

        specialinvoke $r49.<org.apache.commons.math.optimization.VectorialPointValuePair: void <init>(double[],double[])>($r51, $r50);

        return $r49;

     label17:
        i58 = 0;

     label18:
        $i21 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i58 >= $i21 goto label19;

        $d48 = r1[i58];

        $r48 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        $d47 = $r48[i58];

        $d49 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d48, $d47);

        r1[i58] = $d49;

        i58 = i58 + 1;

        goto label18;

     label19:
        d72 = 0.0;

     label20:
        $b22 = d72 cmpg 1.0E-4;

        if $b22 >= 0 goto label54;

        i59 = 0;

     label21:
        $i23 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i59 >= $i23 goto label22;

        $r46 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r46[i59];

        $r47 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $d46 = $r47[i0];

        r2[i0] = $d46;

        i59 = i59 + 1;

        goto label21;

     label22:
        d73 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        r68 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] residuals>;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] residuals> = r63;

        r63 = r68;

        r69 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective>;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective> = r64;

        r64 = r69;

        specialinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void determineLMParameter(double[],double,double[],double[],double[],double[])>(r3, d62, r1, r4, r5, r6);

        d74 = 0.0;

        i60 = 0;

     label23:
        $i24 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i60 >= $i24 goto label24;

        $r40 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r40[i60];

        $r42 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r41 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d38 = $r41[i1];

        $d39 = neg $d38;

        $r42[i1] = $d39;

        $r44 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $d41 = r2[i1];

        $r43 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d40 = $r43[i1];

        $d42 = $d41 + $d40;

        $r44[i1] = $d42;

        $d44 = r1[i1];

        $r45 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d43 = $r45[i1];

        d75 = $d44 * $d43;

        $d45 = d75 * d75;

        d74 = d74 + $d45;

        i60 = i60 + 1;

        goto label23;

     label24:
        d76 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d74);

        if z1 == 0 goto label25;

        d62 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>(d62, d76);

     label25:
        virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void updateResidualsAndCost()>();

        d77 = -1.0;

        $d3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        $d4 = 0.1 * $d3;

        $b25 = $d4 cmpg d73;

        if $b25 >= 0 goto label26;

        $d36 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        d78 = $d36 / d73;

        $d37 = d78 * d78;

        d77 = 1.0 - $d37;

     label26:
        i61 = 0;

     label27:
        $i62 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i61 >= $i62 goto label30;

        $r36 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i2 = $r36[i61];

        $r37 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        d79 = $r37[i2];

        r4[i61] = 0.0;

        i63 = 0;

     label28:
        if i63 > i61 goto label29;

        $d34 = r4[i63];

        $r38 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r39 = $r38[i63];

        $d32 = $r39[i2];

        $d33 = $d32 * d79;

        $d35 = $d34 + $d33;

        r4[i63] = $d35;

        i63 = i63 + 1;

        goto label28;

     label29:
        i61 = i61 + 1;

        goto label27;

     label30:
        d80 = 0.0;

        i64 = 0;

     label31:
        $i26 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i64 >= $i26 goto label32;

        $d30 = r4[i64];

        $d29 = r4[i64];

        $d31 = $d30 * $d29;

        d80 = d80 + $d31;

        i64 = i64 + 1;

        goto label31;

     label32:
        d81 = d73 * d73;

        d82 = d80 / d81;

        $d5 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d6 = $d5 * d76;

        $d7 = $d6 * d76;

        d83 = $d7 / d81;

        $d8 = 2.0 * d83;

        d0 = d82 + $d8;

        $d9 = d82 + d83;

        d1 = neg $d9;

        $b27 = d0 cmpl 0.0;

        if $b27 != 0 goto label33;

        $d84 = 0.0;

        goto label34;

     label33:
        $d84 = d77 / d0;

     label34:
        d72 = $d84;

        $b28 = $d84 cmpg 0.25;

        if $b28 > 0 goto label39;

        $b41 = d77 cmpg 0.0;

        if $b41 >= 0 goto label35;

        $d28 = 0.5 * d1;

        $d26 = 0.5 * d77;

        $d27 = d1 + $d26;

        $d85 = $d28 / $d27;

        goto label36;

     label35:
        $d85 = 0.5;

     label36:
        d86 = $d85;

        $d24 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost>;

        $d25 = 0.1 * $d24;

        $b42 = $d25 cmpl d73;

        if $b42 >= 0 goto label37;

        $b43 = $d85 cmpg 0.1;

        if $b43 >= 0 goto label38;

     label37:
        d86 = 0.1;

     label38:
        $d87 = 10.0 * d76;

        $d88 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>(d62, $d87);

        d62 = d86 * $d88;

        $d89 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d90 = $d89 / d86;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d90;

        goto label41;

     label39:
        $d10 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b29 = $d10 cmpl 0.0;

        if $b29 == 0 goto label40;

        $b40 = $d84 cmpl 0.75;

        if $b40 < 0 goto label41;

     label40:
        d62 = 2.0 * d76;

        $d11 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d12 = $d11 * 0.5;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d12;

     label41:
        $b65 = d72 cmpl 1.0E-4;

        if $b65 < 0 goto label44;

        z1 = 0;

        d91 = 0.0;

        i66 = 0;

     label42:
        $i38 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i66 >= $i38 goto label43;

        $d22 = r1[i66];

        $r34 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $d21 = $r34[i66];

        d92 = $d22 * $d21;

        $d23 = d92 * d92;

        d91 = d91 + $d23;

        i66 = i66 + 1;

        goto label42;

     label43:
        d63 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d91);

        $r29 = new org.apache.commons.math.optimization.VectorialPointValuePair;

        $r31 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $r30 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective>;

        specialinvoke $r29.<org.apache.commons.math.optimization.VectorialPointValuePair: void <init>(double[],double[])>($r31, $r30);

        r65 = $r29;

        $r32 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker>;

        if $r32 == null goto label47;

        $r33 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker>;

        $i39 = virtualinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int getIterations()>();

        $z0 = interfaceinvoke $r33.<org.apache.commons.math.optimization.VectorialConvergenceChecker: boolean converged(int,org.apache.commons.math.optimization.VectorialPointValuePair,org.apache.commons.math.optimization.VectorialPointValuePair)>($i39, r66, $r29);

        if $z0 == 0 goto label47;

        return $r29;

     label44:
        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double cost> = d73;

        i67 = 0;

     label45:
        $i30 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i67 >= $i30 goto label46;

        $r27 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i68 = $r27[i67];

        $r28 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] point>;

        $d20 = r2[i68];

        $r28[i68] = $d20;

        i67 = i67 + 1;

        goto label45;

     label46:
        r71 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] residuals>;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] residuals> = r68;

        r63 = r71;

        r72 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective>;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] objective> = r69;

        r64 = r72;

     label47:
        $r73 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math.optimization.VectorialConvergenceChecker checker>;

        if $r73 != null goto label50;

        $d17 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d77);

        $d18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b35 = $d17 cmpg $d18;

        if $b35 > 0 goto label48;

        $d19 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b36 = d0 cmpg $d19;

        if $b36 > 0 goto label48;

        $b37 = d72 cmpg 2.0;

        if $b37 <= 0 goto label49;

     label48:
        $d93 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d94 = $d93 * d63;

        $b69 = d62 cmpg $d94;

        if $b69 > 0 goto label50;

     label49:
        return r65;

     label50:
        $d13 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d77);

        $b31 = $d13 cmpg 2.2204E-16;

        if $b31 > 0 goto label51;

        $b33 = d0 cmpg 2.2204E-16;

        if $b33 > 0 goto label51;

        $b34 = d72 cmpg 2.0;

        if $b34 > 0 goto label51;

        $r23 = new org.apache.commons.math.optimization.OptimizationException;

        $r25 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE>;

        $r24 = newarray (java.lang.Object)[1];

        $d16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d16);

        $r24[0] = $r26;

        specialinvoke $r23.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r25, $r24);

        throw $r23;

     label51:
        $d95 = 2.2204E-16 * d63;

        $b70 = d62 cmpg $d95;

        if $b70 > 0 goto label52;

        $r19 = new org.apache.commons.math.optimization.OptimizationException;

        $r21 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE>;

        $r20 = newarray (java.lang.Object)[1];

        $d15 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        $r20[0] = $r22;

        specialinvoke $r19.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r21, $r20);

        throw $r19;

     label52:
        $b32 = d68 cmpg 2.2204E-16;

        if $b32 > 0 goto label53;

        $r15 = new org.apache.commons.math.optimization.OptimizationException;

        $r17 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE>;

        $r16 = newarray (java.lang.Object)[1];

        $d14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        $r16[0] = $r18;

        specialinvoke $r15.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r15;

     label53:
        goto label20;

     label54:
        goto label01;
    }

    private void determineLMParameter(double[], double, double[], double[], double[], double[])
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, r5, $r10, $r13, $r17, $r19, $r21, $r25, $r27, $r28, $r29, $r31, $r33, $r35, $r37;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, $d84, $d85, $d86;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i12, $i15, $i16, $i19, $i20, $i21, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, $i41, i42, i43, i44, i45, $i46, i47, i48, i49, i50, $i51, i52, i53, i54, i55, i56;
        byte $b6, $b9, $b10, $b11, $b13, $b14, $b17, $b18, $b22, $b23;
        int[] $r6, $r7, $r8, $r11, $r12, $r14, $r15, $r18, $r22, $r23, $r24, $r26, $r30, $r34, $r36;
        double[][] $r9, $r16, $r20, $r32;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        r5 := @parameter5: double[];

        i30 = 0;

     label01:
        $i2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        if i30 >= $i2 goto label02;

        $r37 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r36 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i29 = $r36[i30];

        $d62 = r1[i30];

        $r37[$i29] = $d62;

        i30 = i30 + 1;

        goto label01;

     label02:
        i31 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank>;

     label03:
        $i3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i31 >= $i3 goto label04;

        $r35 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r34 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i28 = $r34[i31];

        $r35[$i28] = 0.0;

        i31 = i31 + 1;

        goto label03;

     label04:
        $i4 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        i32 = $i4 - 1;

     label05:
        if i32 < 0 goto label08;

        $r26 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r26[i32];

        $r27 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d57 = $r27[i0];

        $r28 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d56 = $r28[i0];

        d63 = $d57 / $d56;

        i33 = 0;

     label06:
        if i33 >= i32 goto label07;

        $r31 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r30 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i27 = $r30[i33];

        $d60 = $r31[$i27];

        $r32 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r33 = $r32[i33];

        $d58 = $r33[i0];

        $d59 = d63 * $d58;

        $d61 = $d60 - $d59;

        $r31[$i27] = $d61;

        i33 = i33 + 1;

        goto label06;

     label07:
        $r29 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r29[i0] = d63;

        i32 = i32 + -1;

        goto label05;

     label08:
        d64 = 0.0;

        i34 = 0;

     label09:
        $i5 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i34 >= $i5 goto label10;

        $r24 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r24[i34];

        $d54 = r2[i1];

        $r25 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d53 = $r25[i1];

        d65 = $d54 * $d53;

        r3[i1] = d65;

        $d55 = d65 * d65;

        d64 = d64 + $d55;

        i34 = i34 + 1;

        goto label09;

     label10:
        d66 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d64);

        d67 = d66 - d0;

        $d3 = 0.1 * d0;

        $b6 = d67 cmpg $d3;

        if $b6 > 0 goto label11;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        return;

     label11:
        d68 = 0.0;

        $i8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        $i7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i8 != $i7 goto label18;

        i35 = 0;

     label12:
        $i24 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i35 >= $i24 goto label13;

        $r23 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i36 = $r23[i35];

        $d51 = r3[i36];

        $d49 = r2[i36];

        $d50 = $d49 / d66;

        $d52 = $d51 * $d50;

        r3[i36] = $d52;

        i35 = i35 + 1;

        goto label12;

     label13:
        d69 = 0.0;

        i37 = 0;

     label14:
        $i25 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i37 >= $i25 goto label17;

        $r18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i38 = $r18[i37];

        d70 = 0.0;

        i39 = 0;

     label15:
        if i39 >= i37 goto label16;

        $r20 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r21 = $r20[i39];

        $d47 = $r21[i38];

        $r22 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i26 = $r22[i39];

        $d46 = r3[$i26];

        $d48 = $d47 * $d46;

        d70 = d70 + $d48;

        i39 = i39 + 1;

        goto label15;

     label16:
        $d42 = r3[i38];

        $d44 = $d42 - d70;

        $r19 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d43 = $r19[i38];

        d71 = $d44 / $d43;

        r3[i38] = d71;

        $d45 = d71 * d71;

        d69 = d69 + $d45;

        i37 = i37 + 1;

        goto label14;

     label17:
        $d41 = d0 * d69;

        d68 = d67 / $d41;

     label18:
        d72 = 0.0;

        i40 = 0;

     label19:
        $i41 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i40 >= $i41 goto label22;

        $r15 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i42 = $r15[i40];

        d73 = 0.0;

        i43 = 0;

     label20:
        if i43 > i40 goto label21;

        $r16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r17 = $r16[i43];

        $d39 = $r17[i42];

        $d38 = r1[i43];

        $d40 = $d39 * $d38;

        d73 = d73 + $d40;

        i43 = i43 + 1;

        goto label20;

     label21:
        $d36 = r2[i42];

        d74 = d73 / $d36;

        $d37 = d74 * d74;

        d72 = d72 + $d37;

        i40 = i40 + 1;

        goto label19;

     label22:
        d75 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d72);

        d76 = d75 / d0;

        $b9 = d76 cmpl 0.0;

        if $b9 != 0 goto label23;

        $d35 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>(d0, 0.1);

        d76 = 2.2251E-308 / $d35;

     label23:
        $d4 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d4, d68);

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>(d76, $d5);

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d6;

        $d7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b10 = $d7 cmpl 0.0;

        if $b10 != 0 goto label24;

        $d34 = d75 / d66;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d34;

     label24:
        i44 = 10;

     label25:
        if i44 < 0 goto label43;

        $d8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b11 = $d8 cmpl 0.0;

        if $b11 != 0 goto label26;

        $d32 = 0.001 * d76;

        $d33 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(2.2251E-308, $d32);

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d33;

     label26:
        $d9 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d9);

        i45 = 0;

     label27:
        $i46 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i45 >= $i46 goto label28;

        $r14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i47 = $r14[i45];

        $d30 = r2[i47];

        $d31 = d1 * $d30;

        r3[i47] = $d31;

        i45 = i45 + 1;

        goto label27;

     label28:
        specialinvoke r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: void determineLMDirection(double[],double[],double[],double[])>(r1, r3, r4, r5);

        d77 = 0.0;

        i48 = 0;

     label29:
        $i12 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i48 >= $i12 goto label30;

        $r12 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i49 = $r12[i48];

        $d28 = r2[i49];

        $r13 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d27 = $r13[i49];

        d78 = $d28 * $d27;

        r5[i49] = d78;

        $d29 = d78 * d78;

        d77 = d77 + $d29;

        i48 = i48 + 1;

        goto label29;

     label30:
        d79 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d77);

        d80 = d67;

        d67 = d79 - d0;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d67);

        $d11 = 0.1 * d0;

        $b13 = $d10 cmpg $d11;

        if $b13 <= 0 goto label31;

        $b14 = d68 cmpl 0.0;

        if $b14 != 0 goto label32;

        $b22 = d67 cmpg d80;

        if $b22 > 0 goto label32;

        $b23 = d80 cmpg 0.0;

        if $b23 >= 0 goto label32;

     label31:
        return;

     label32:
        i50 = 0;

     label33:
        $i51 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i50 >= $i51 goto label34;

        $r11 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i52 = $r11[i50];

        $d24 = r5[i52];

        $d23 = r2[i52];

        $d25 = $d24 * $d23;

        $d26 = $d25 / d79;

        r3[i52] = $d26;

        i50 = i50 + 1;

        goto label33;

     label34:
        i53 = 0;

     label35:
        $i15 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i53 >= $i15 goto label38;

        $r7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i54 = $r7[i53];

        $d17 = r3[i54];

        $d16 = r4[i53];

        $d18 = $d17 / $d16;

        r3[i54] = $d18;

        d2 = r3[i54];

        i55 = i53 + 1;

     label36:
        $i20 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i55 >= $i20 goto label37;

        $r8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i21 = $r8[i55];

        $d21 = r3[$i21];

        $r9 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r10 = $r9[i55];

        $d19 = $r10[i54];

        $d20 = $d19 * d2;

        $d22 = $d21 - $d20;

        r3[$i21] = $d22;

        i55 = i55 + 1;

        goto label36;

     label37:
        i53 = i53 + 1;

        goto label35;

     label38:
        d81 = 0.0;

        i56 = 0;

     label39:
        $i16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i56 >= $i16 goto label40;

        $r6 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i19 = $r6[i56];

        d82 = r3[$i19];

        $d15 = d82 * d82;

        d81 = d81 + $d15;

        i56 = i56 + 1;

        goto label39;

     label40:
        $d12 = d0 * d81;

        d83 = d67 / $d12;

        $b17 = d67 cmpl 0.0;

        if $b17 <= 0 goto label41;

        $d14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d68 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d68, $d14);

        goto label42;

     label41:
        $b18 = d67 cmpg 0.0;

        if $b18 >= 0 goto label42;

        $d13 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d76 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>(d76, $d13);

     label42:
        $d84 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d85 = $d84 + d83;

        $d86 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d68, $d85);

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d86;

        i44 = i44 + -1;

        goto label25;

     label43:
        return;
    }

    private void determineLMDirection(double[], double[], double[], double[])
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, $r6, $r9, $r13, $r16, $r17, $r20, $r22, $r24, $r26, $r28, $r29, $r33, $r34, $r35;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, $i22, i23, $i24, i25, i26, $i27, i28, i29, i30, i31, $i32;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, d49, d50, d51, d52, d53, d54, d55;
        int[] $r5, $r7, $r10, $r12, $r15, $r18, $r27, $r32;
        double[][] $r8, $r11, $r14, $r19, $r21, $r23, $r25, $r30, $r31;
        byte $b5, $b7, $b10, $b11;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i16 = 0;

     label01:
        $i1 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i16 >= $i1 goto label04;

        $r27 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i17 = $r27[i16];

        i18 = i16 + 1;

     label02:
        $i14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i18 >= $i14 goto label03;

        $r30 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r34 = $r30[i18];

        $r31 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r33 = $r31[i16];

        $r32 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i15 = $r32[i18];

        $d47 = $r33[$i15];

        $r34[i17] = $d47;

        i18 = i18 + 1;

        goto label02;

     label03:
        $r29 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r28 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d45 = $r28[i17];

        $r29[i16] = $d45;

        $d46 = r1[i16];

        r4[i16] = $d46;

        i16 = i16 + 1;

        goto label01;

     label04:
        i19 = 0;

     label05:
        $i2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i19 >= $i2 goto label13;

        $r10 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i20 = $r10[i19];

        d48 = r2[i20];

        $b7 = d48 cmpl 0.0;

        if $b7 == 0 goto label06;

        $i13 = i19 + 1;

        $i12 = lengthof r3;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r3, $i13, $i12, 0.0);

     label06:
        r3[i19] = d48;

        d49 = 0.0;

        i21 = i19;

     label07:
        $i22 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i21 >= $i22 goto label12;

        $r18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r18[i21];

        $d14 = r3[i21];

        $b10 = $d14 cmpl 0.0;

        if $b10 == 0 goto label11;

        $r19 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r20 = $r19[i21];

        d0 = $r20[i0];

        $d15 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d16 = r3[i21];

        $d17 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d16);

        $b11 = $d15 cmpg $d17;

        if $b11 >= 0 goto label08;

        $d41 = r3[i21];

        d50 = d0 / $d41;

        $d42 = d50 * d50;

        $d43 = 1.0 + $d42;

        $d44 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d43);

        d51 = 1.0 / $d44;

        d52 = d51 * d50;

        goto label09;

     label08:
        $d18 = r3[i21];

        d53 = $d18 / d0;

        $d19 = d53 * d53;

        $d20 = 1.0 + $d19;

        $d21 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d20);

        d52 = 1.0 / $d21;

        d51 = d52 * d53;

     label09:
        $r21 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r22 = $r21[i21];

        $d24 = d52 * d0;

        $d22 = r3[i21];

        $d23 = d51 * $d22;

        $d25 = $d24 + $d23;

        $r22[i0] = $d25;

        $d26 = r4[i21];

        $d28 = d52 * $d26;

        $d27 = d51 * d49;

        d54 = $d28 + $d27;

        $d30 = neg d51;

        $d29 = r4[i21];

        $d32 = $d30 * $d29;

        $d31 = d52 * d49;

        d49 = $d32 + $d31;

        r4[i21] = d54;

        i23 = i21 + 1;

     label10:
        $i24 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i23 >= $i24 goto label11;

        $r23 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r24 = $r23[i23];

        d1 = $r24[i0];

        $d35 = d52 * d1;

        $d33 = r3[i23];

        $d34 = d51 * $d33;

        d2 = $d35 + $d34;

        $d36 = neg d51;

        $d39 = $d36 * d1;

        $d37 = r3[i23];

        $d38 = d52 * $d37;

        $d40 = $d39 + $d38;

        r3[i23] = $d40;

        $r25 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r26 = $r25[i23];

        $r26[i0] = d2;

        i23 = i23 + 1;

        goto label10;

     label11:
        i21 = i21 + 1;

        goto label07;

     label12:
        $r11 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r13 = $r11[i19];

        $r12 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i8 = $r12[i19];

        $d12 = $r13[$i8];

        r3[i19] = $d12;

        $r14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r17 = $r14[i19];

        $r15 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i9 = $r15[i19];

        $r16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d13 = $r16[i19];

        $r17[$i9] = $d13;

        i19 = i19 + 1;

        goto label05;

     label13:
        i25 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        i26 = 0;

     label14:
        $i3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i26 >= $i3 goto label17;

        $d11 = r3[i26];

        $b5 = $d11 cmpl 0.0;

        if $b5 != 0 goto label15;

        $i6 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i25 != $i6 goto label15;

        i25 = i26;

     label15:
        $i27 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i25 >= $i27 goto label16;

        r4[i26] = 0.0;

     label16:
        i26 = i26 + 1;

        goto label14;

     label17:
        if i25 <= 0 goto label21;

        i28 = i25 - 1;

     label18:
        if i28 < 0 goto label21;

        $r7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i29 = $r7[i28];

        d55 = 0.0;

        i30 = i28 + 1;

     label19:
        if i30 >= i25 goto label20;

        $r8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r9 = $r8[i30];

        $d9 = $r9[i29];

        $d8 = r4[i30];

        $d10 = $d9 * $d8;

        d55 = d55 + $d10;

        i30 = i30 + 1;

        goto label19;

     label20:
        $d4 = r4[i28];

        $d6 = $d4 - d55;

        $d5 = r3[i28];

        $d7 = $d6 / $d5;

        r4[i28] = $d7;

        i28 = i28 + -1;

        goto label18;

     label21:
        i31 = 0;

     label22:
        $r35 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $i32 = lengthof $r35;

        if i31 >= $i32 goto label23;

        $r6 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r5 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i4 = $r5[i31];

        $d3 = r4[i31];

        $r6[$i4] = $d3;

        i31 = i31 + 1;

        goto label22;

     label23:
        return;
    }

    private void qrDecomposition() throws org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d21, d22, $d23, d25, d26;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i20, $i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31;
        byte $b4, $b6, $b19;
        int[] $r1, $r2, $r3, $r4, $r14, $r21, $r30, $r32;
        double[][] $r5, $r9, $r11, $r12, $r13, $r16, $r18, $r20, $r23, $r29, $r33, $r35;
        double[] $r6, $r7, $r8, $r10, $r15, $r17, $r19, $r22, $r31, $r34, $r36;
        boolean $z0, $z1;
        org.apache.commons.math.optimization.OptimizationException $r24;
        java.lang.Object[] $r25;
        org.apache.commons.math.exception.util.LocalizedFormats $r26;
        java.lang.Integer $r27, $r28;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        i22 = 0;

     label01:
        $i0 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i22 >= $i0 goto label04;

        $r32 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r32[i22] = i22;

        d18 = 0.0;

        i23 = 0;

     label02:
        $r33 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $i21 = lengthof $r33;

        if i23 >= $i21 goto label03;

        $r35 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r36 = $r35[i23];

        d19 = $r36[i22];

        $d17 = d19 * d19;

        d18 = d18 + $d17;

        i23 = i23 + 1;

        goto label02;

     label03:
        $r34 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        $d16 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d18);

        $r34[i22] = $d16;

        i22 = i22 + 1;

        goto label01;

     label04:
        i24 = 0;

     label05:
        $i1 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i24 >= $i1 goto label22;

        i25 = -1;

        d20 = #-Infinity;

        i26 = i24;

     label06:
        $i3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i26 >= $i3 goto label12;

        d21 = 0.0;

        i27 = i24;

     label07:
        $r23 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $i16 = lengthof $r23;

        if i27 >= $i16 goto label08;

        $r29 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r31 = $r29[i27];

        $r30 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i20 = $r30[i26];

        d0 = $r31[$i20];

        $d15 = d0 * d0;

        d21 = d21 + $d15;

        i27 = i27 + 1;

        goto label07;

     label08:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d21);

        if $z0 != 0 goto label09;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d21);

        if $z1 == 0 goto label10;

     label09:
        $r24 = new org.apache.commons.math.optimization.OptimizationException;

        $r26 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN>;

        $r25 = newarray (java.lang.Object)[2];

        $i17 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r25[0] = $r27;

        $i18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r25[1] = $r28;

        specialinvoke $r24.<org.apache.commons.math.optimization.OptimizationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r26, $r25);

        throw $r24;

     label10:
        $b19 = d21 cmpl d20;

        if $b19 <= 0 goto label11;

        i25 = i26;

        d20 = d21;

     label11:
        i26 = i26 + 1;

        goto label06;

     label12:
        $d2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        $b4 = d20 cmpg $d2;

        if $b4 > 0 goto label13;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank> = i24;

        return;

     label13:
        $r1 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i28 = $r1[i25];

        $r3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i5 = $r2[i24];

        $r3[i25] = $i5;

        $r4 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r4[i24] = i28;

        $r5 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r6 = $r5[i24];

        d22 = $r6[i28];

        $b6 = d22 cmpl 0.0;

        if $b6 <= 0 goto label14;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d20);

        $d23 = neg $d14;

        goto label15;

     label14:
        $d23 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d20);

     label15:
        $d3 = d22 * $d23;

        $d4 = d20 - $d3;

        d1 = 1.0 / $d4;

        $r7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] beta>;

        $r7[i28] = d1;

        $r8 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $r8[i28] = $d23;

        $r9 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r10 = $r9[i24];

        $d5 = $r10[i28];

        $d6 = $d5 - $d23;

        $r10[i28] = $d6;

        $i7 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        $i8 = $i7 - 1;

        i29 = $i8 - i24;

     label16:
        if i29 <= 0 goto label21;

        d25 = 0.0;

        i30 = i24;

     label17:
        $r11 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $i9 = lengthof $r11;

        if i30 >= $i9 goto label18;

        $r18 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r19 = $r18[i30];

        $d12 = $r19[i28];

        $r20 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r22 = $r20[i30];

        $r21 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i13 = i24 + i29;

        $i14 = $r21[$i13];

        $d11 = $r22[$i14];

        $d13 = $d12 * $d11;

        d25 = d25 + $d13;

        i30 = i30 + 1;

        goto label17;

     label18:
        d26 = d25 * d1;

        i31 = i24;

     label19:
        $r12 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $i10 = lengthof $r12;

        if i31 >= $i10 goto label20;

        $r13 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r15 = $r13[i31];

        $r14 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i11 = i24 + i29;

        $i12 = $r14[$i11];

        $d9 = $r15[$i12];

        $r16 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r17 = $r16[i31];

        $d7 = $r17[i28];

        $d8 = d26 * $d7;

        $d10 = $d9 - $d8;

        $r15[$i12] = $d10;

        i31 = i31 + 1;

        goto label19;

     label20:
        i29 = i29 + -1;

        goto label16;

     label21:
        i24 = i24 + 1;

        goto label05;

     label22:
        $i2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rank> = $i2;

        return;
    }

    private void qTy(double[])
    {
        org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, $r3, $r5, $r7;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        int[] $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9;
        double[][] $r4, $r6;

        r0 := @this: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        i4 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int cols>;

        if i4 >= $i1 goto label6;

        $r2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r2[i4];

        d8 = 0.0;

        i5 = i4;

     label2:
        $i2 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        if i5 >= $i2 goto label3;

        $r6 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r7 = $r6[i5];

        $d6 = $r7[i0];

        $d5 = r1[i5];

        $d7 = $d6 * $d5;

        d8 = d8 + $d7;

        i5 = i5 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[] beta>;

        $d0 = $r3[i0];

        d9 = d8 * $d0;

        i6 = i4;

     label4:
        $i3 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: int rows>;

        if i6 >= $i3 goto label5;

        $d3 = r1[i6];

        $r4 = r0.<org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer: double[][] wjacobian>;

        $r5 = $r4[i6];

        $d1 = $r5[i0];

        $d2 = d9 * $d1;

        $d4 = $d3 - $d2;

        r1[i6] = $d4;

        i6 = i6 + 1;

        goto label4;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return;
    }
}
