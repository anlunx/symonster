class org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction extends java.lang.Object implements org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction
{
    private final org.apache.commons.math.optimization.fitting.ParametricRealFunction f;
    final org.apache.commons.math.optimization.fitting.CurveFitter this$0;

    public void <init>(org.apache.commons.math.optimization.fitting.CurveFitter, org.apache.commons.math.optimization.fitting.ParametricRealFunction)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math.optimization.fitting.CurveFitter r1;
        org.apache.commons.math.optimization.fitting.ParametricRealFunction r2;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.CurveFitter;

        r2 := @parameter1: org.apache.commons.math.optimization.fitting.ParametricRealFunction;

        r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.CurveFitter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.ParametricRealFunction f> = r2;

        return;
    }

    public org.apache.commons.math.analysis.MultivariateMatrixFunction jacobian()
    {
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1 $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        $r1 = new org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1;

        specialinvoke $r1.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction$1: void <init>(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction)>(r0);

        return $r1;
    }

    public double[] value(double[]) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        double[] r1, r2;
        java.util.Iterator r3;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint r4;
        org.apache.commons.math.optimization.fitting.CurveFitter $r5, $r7;
        java.util.List $r6, $r8;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r9;
        org.apache.commons.math.optimization.fitting.ParametricRealFunction $r10;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: double[];

        $r5 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.CurveFitter this$0>;

        $r6 = staticinvoke <org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math.optimization.fitting.CurveFitter)>($r5);

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        r2 = newarray (double)[$i0];

        i2 = 0;

        $r7 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.CurveFitter this$0>;

        $r8 = staticinvoke <org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math.optimization.fitting.CurveFitter)>($r7);

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math.optimization.fitting.WeightedObservedPoint) $r9;

        $i1 = i2;

        i2 = i2 + 1;

        $r10 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.ParametricRealFunction f>;

        $d0 = virtualinvoke r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d1 = interfaceinvoke $r10.<org.apache.commons.math.optimization.fitting.ParametricRealFunction: double value(double,double[])>($d0, r1);

        r2[$i1] = $d1;

        goto label1;

     label2:
        return r2;
    }

    static org.apache.commons.math.optimization.fitting.ParametricRealFunction access$100(org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math.optimization.fitting.ParametricRealFunction $r1;

        r0 := @parameter0: org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math.optimization.fitting.ParametricRealFunction f>;

        return $r1;
    }
}
