class org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Transform
{
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation;
    private org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal;
    private org.apache.commons.math3.geometry.partitioning.Transform cachedTransform;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation> = r1;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r4 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r4, 1.0, $r3);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        return $r4;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r2, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r4, r5, $r8, $r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r6;
        java.awt.geom.AffineTransform r7;
        org.apache.commons.math3.geometry.partitioning.Transform $r9, $r15;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine $r10;
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane $r11;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r12, $r13;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal>;

        if r2 == $r8 goto label1;

        r4 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r2;

        r5 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r3;

        $r12 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()>();

        $r13 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>($r12);

        r6 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r13);

        $d0 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d1 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        r7 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r14 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r2;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane cachedOriginal> = $r14;

        $r15 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.partitioning.Transform getTransform(java.awt.geom.AffineTransform)>(r7);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform> = $r15;

     label1:
        $r10 = (org.apache.commons.math3.geometry.euclidean.twod.SubLine) r1;

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.partitioning.Transform cachedTransform>;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform)>($r9);

        return $r11;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Plane $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform: org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }
}
