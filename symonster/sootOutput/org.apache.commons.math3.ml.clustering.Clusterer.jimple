public abstract class org.apache.commons.math3.ml.clustering.Clusterer extends java.lang.Object
{
    private org.apache.commons.math3.ml.distance.DistanceMeasure measure;

    protected void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.Clusterer r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.Clusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.clustering.Clusterer: org.apache.commons.math3.ml.distance.DistanceMeasure measure> = r1;

        return;
    }

    public abstract java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException;

    public org.apache.commons.math3.ml.distance.DistanceMeasure getDistanceMeasure()
    {
        org.apache.commons.math3.ml.clustering.Clusterer r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.Clusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.Clusterer: org.apache.commons.math3.ml.distance.DistanceMeasure measure>;

        return $r1;
    }

    protected double distance(org.apache.commons.math3.ml.clustering.Clusterable, org.apache.commons.math3.ml.clustering.Clusterable)
    {
        org.apache.commons.math3.ml.clustering.Clusterer r0;
        org.apache.commons.math3.ml.clustering.Clusterable r1, r2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;
        double[] $r4, $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.Clusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.Clusterable;

        r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.Clusterer: org.apache.commons.math3.ml.distance.DistanceMeasure measure>;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $r5 = interfaceinvoke r2.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $d0 = interfaceinvoke $r3.<org.apache.commons.math3.ml.distance.DistanceMeasure: double compute(double[],double[])>($r4, $r5);

        return $d0;
    }
}
