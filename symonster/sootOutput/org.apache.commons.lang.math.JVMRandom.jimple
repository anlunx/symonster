public final class org.apache.commons.lang.math.JVMRandom extends java.util.Random
{
    private static final long serialVersionUID;
    private static final java.util.Random SHARED_RANDOM;
    private boolean constructed;

    public void <init>()
    {
        org.apache.commons.lang.math.JVMRandom r0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        specialinvoke r0.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed> = 0;

        r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed> = 1;

        return;
    }

    public synchronized void setSeed(long)
    {
        org.apache.commons.lang.math.JVMRandom r0;
        long l0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        l0 := @parameter0: long;

        $z0 = r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public synchronized double nextGaussian()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void nextBytes(byte[])
    {
        org.apache.commons.lang.math.JVMRandom r0;
        byte[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int nextInt()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.math.JVMRandom: int nextInt(int)>(2147483647);

        return $i0;
    }

    public int nextInt(int)
    {
        org.apache.commons.lang.math.JVMRandom r0;
        int i0, $i1;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        i0 := @parameter0: int;

        $r1 = <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(i0);

        return $i1;
    }

    public long nextLong()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        long $l0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $l0 = staticinvoke <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>(9223372036854775807L);

        return $l0;
    }

    public static long nextLong(long)
    {
        long l0, l1, l2, $l4, $l5, $l7, $l8, $l9, $l11, $l12, $l15;
        byte $b3, $b6, $b10;
        int $i13, $i14;
        java.lang.IllegalArgumentException $r0;

        l0 := @parameter0: long;

        $b3 = l0 cmp 0L;

        if $b3 > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Upper bound for nextInt must be positive");

        throw $r0;

     label1:
        $l4 = neg l0;

        $l5 = l0 & $l4;

        $b6 = $l5 cmp l0;

        if $b6 != 0 goto label2;

        $l11 = staticinvoke <org.apache.commons.lang.math.JVMRandom: long next63bits()>();

        $l12 = l0 - 1L;

        $i13 = staticinvoke <org.apache.commons.lang.math.JVMRandom: int bitsRequired(long)>($l12);

        $i14 = 63 - $i13;

        $l15 = $l11 >> $i14;

        return $l15;

     label2:
        l2 = staticinvoke <org.apache.commons.lang.math.JVMRandom: long next63bits()>();

        l1 = l2 % l0;

        $l8 = l2 - l1;

        $l7 = l0 - 1L;

        $l9 = $l8 + $l7;

        $b10 = $l9 cmp 0L;

        if $b10 < 0 goto label2;

        return l1;
    }

    public boolean nextBoolean()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        java.util.Random $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $r1 = <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM>;

        $z0 = virtualinvoke $r1.<java.util.Random: boolean nextBoolean()>();

        return $z0;
    }

    public float nextFloat()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        java.util.Random $r1;
        float $f0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $r1 = <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        return $f0;
    }

    public double nextDouble()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        java.util.Random $r1;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $r1 = <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        return $d0;
    }

    private static long next63bits()
    {
        java.util.Random $r0;
        long $l0, $l1;

        $r0 = <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM>;

        $l0 = virtualinvoke $r0.<java.util.Random: long nextLong()>();

        $l1 = $l0 & 9223372036854775807L;

        return $l1;
    }

    private static int bitsRequired(long)
    {
        byte $b0, $b1;
        int $i2, i5;
        long l3, l4;

        l3 := @parameter0: long;

        l4 = l3;

        i5 = 0;

     label1:
        $b0 = l3 cmp 0L;

        if $b0 >= 0 goto label2;

        $i2 = 64 - i5;

        return $i2;

     label2:
        $b1 = l4 cmp 0L;

        if $b1 != 0 goto label3;

        return i5;

     label3:
        i5 = i5 + 1;

        l3 = l3 << 1;

        l4 = l4 >> 1;

        goto label1;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <org.apache.commons.lang.math.JVMRandom: long serialVersionUID> = 1L;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.commons.lang.math.JVMRandom: java.util.Random SHARED_RANDOM> = $r0;

        return;
    }
}
