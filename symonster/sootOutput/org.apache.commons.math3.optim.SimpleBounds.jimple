public class org.apache.commons.math3.optim.SimpleBounds extends java.lang.Object implements org.apache.commons.math3.optim.OptimizationData
{
    private final double[] lower;
    private final double[] upper;

    public void <init>(double[], double[])
    {
        org.apache.commons.math3.optim.SimpleBounds r0;
        double[] r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.commons.math3.optim.SimpleBounds;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        r0.<org.apache.commons.math3.optim.SimpleBounds: double[] lower> = $r4;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r5;

        r0.<org.apache.commons.math3.optim.SimpleBounds: double[] upper> = $r6;

        return;
    }

    public double[] getLower()
    {
        org.apache.commons.math3.optim.SimpleBounds r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.SimpleBounds;

        $r1 = r0.<org.apache.commons.math3.optim.SimpleBounds: double[] lower>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public double[] getUpper()
    {
        org.apache.commons.math3.optim.SimpleBounds r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.SimpleBounds;

        $r1 = r0.<org.apache.commons.math3.optim.SimpleBounds: double[] upper>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public static org.apache.commons.math3.optim.SimpleBounds unbounded(int)
    {
        int i0;
        double[] r0, r1;
        org.apache.commons.math3.optim.SimpleBounds $r2;

        i0 := @parameter0: int;

        r0 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r0, #-Infinity);

        r1 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r1, #Infinity);

        $r2 = new org.apache.commons.math3.optim.SimpleBounds;

        specialinvoke $r2.<org.apache.commons.math3.optim.SimpleBounds: void <init>(double[],double[])>(r0, r1);

        return $r2;
    }
}
