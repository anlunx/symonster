public class org.apache.commons.math3.optimization.general.GaussNewtonOptimizer extends org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer
{
    private final boolean useLU;

    public void <init>()
    {
        org.apache.commons.math3.optimization.general.GaussNewtonOptimizer r0;

        r0 := @this: org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: void <init>(boolean)>(1);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.GaussNewtonOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optimization.ConvergenceChecker)>(1, r1);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.math3.optimization.general.GaussNewtonOptimizer r0;
        boolean z0;
        org.apache.commons.math3.optimization.SimpleVectorValueChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.commons.math3.optimization.SimpleVectorValueChecker;

        specialinvoke $r1.<org.apache.commons.math3.optimization.SimpleVectorValueChecker: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: void <init>(boolean,org.apache.commons.math3.optimization.ConvergenceChecker)>(z0, $r1);

        return;
    }

    public void <init>(boolean, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.GaussNewtonOptimizer r0;
        boolean z0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: boolean useLU> = z0;

        return;
    }

    public org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.general.GaussNewtonOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        double[] r2, r4, r6, r7, r9, r11, $r18, r25, r27, r31;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        org.apache.commons.math3.linear.RealMatrix r3, r8;
        org.apache.commons.math3.optimization.PointVectorValuePair r5, $r13, r26;
        double[][] r10;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17;
        org.apache.commons.math3.exception.MathInternalError $r12;
        org.apache.commons.math3.linear.BlockRealMatrix $r14;
        boolean $z0, z1;
        org.apache.commons.math3.linear.QRDecomposition $r15;
        org.apache.commons.math3.linear.ArrayRealVector $r16;
        org.apache.commons.math3.linear.RealVector $r17;
        org.apache.commons.math3.linear.LUDecomposition $r19;
        org.apache.commons.math3.exception.NullArgumentException $r20;
        org.apache.commons.math3.linear.SingularMatrixException $r21;
        org.apache.commons.math3.exception.ConvergenceException $r22;
        java.lang.Object[] $r23;
        org.apache.commons.math3.exception.util.LocalizedFormats $r24;
        org.apache.commons.math3.linear.DecompositionSolver $r29;

        r0 := @this: org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        if r1 != null goto label01;

        $r20 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r20.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r20;

     label01:
        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double[] getTarget()>();

        i0 = lengthof r2;

        r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: org.apache.commons.math3.linear.RealMatrix getWeight()>();

        r4 = newarray (double)[i0];

        i2 = 0;

     label02:
        if i2 >= i0 goto label03;

        $d16 = interfaceinvoke r3.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i2);

        r4[i2] = $d16;

        i2 = i2 + 1;

        goto label02;

     label03:
        r25 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double[] getStartPoint()>();

        i1 = lengthof r25;

        r26 = null;

        i3 = 0;

        z1 = 0;

     label04:
        if z1 != 0 goto label20;

        i3 = i3 + 1;

        r5 = r26;

        r6 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double[] computeObjectiveValue(double[])>(r25);

        r7 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double[] computeResiduals(double[])>(r6);

        r8 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>(r25);

        $r13 = new org.apache.commons.math3.optimization.PointVectorValuePair;

        specialinvoke $r13.<org.apache.commons.math3.optimization.PointVectorValuePair: void <init>(double[],double[])>(r25, r6);

        r26 = $r13;

        r9 = newarray (double)[i1];

        r10 = newmultiarray (double)[i1][i1];

        i4 = 0;

     label05:
        if i4 >= i0 goto label12;

        r27 = interfaceinvoke r8.<org.apache.commons.math3.linear.RealMatrix: double[] getRow(int)>(i4);

        d17 = r4[i4];

        d0 = r7[i4];

        d1 = d17 * d0;

        i5 = 0;

     label06:
        if i5 >= i1 goto label07;

        $d14 = r9[i5];

        $d12 = r27[i5];

        $d13 = d1 * $d12;

        $d15 = $d14 + $d13;

        r9[i5] = $d15;

        i5 = i5 + 1;

        goto label06;

     label07:
        i6 = 0;

     label08:
        if i6 >= i1 goto label11;

        r11 = r10[i6];

        $d7 = r27[i6];

        d2 = d17 * $d7;

        i7 = 0;

     label09:
        if i7 >= i1 goto label10;

        $d10 = r11[i7];

        $d8 = r27[i7];

        $d9 = d2 * $d8;

        $d11 = $d10 + $d9;

        r11[i7] = $d11;

        i7 = i7 + 1;

        goto label09;

     label10:
        i6 = i6 + 1;

        goto label08;

     label11:
        i4 = i4 + 1;

        goto label05;

     label12:
        $r14 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r14.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r10);

        $z0 = r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: boolean useLU>;

        if $z0 == 0 goto label13;

        $r19 = new org.apache.commons.math3.linear.LUDecomposition;

        specialinvoke $r19.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r14);

        $r29 = virtualinvoke $r19.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        goto label14;

     label13:
        $r15 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke $r15.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r14);

        $r29 = virtualinvoke $r15.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

     label14:
        $r16 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r16.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r9, 0);

        $r17 = interfaceinvoke $r29.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)>($r16);

        r31 = virtualinvoke $r17.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        i8 = 0;

     label15:
        if i8 >= i1 goto label16;

        $d5 = r25[i8];

        $d4 = r31[i8];

        $d6 = $d5 + $d4;

        r25[i8] = $d6;

        i8 = i8 + 1;

        goto label15;

     label16:
        goto label18;

     label17:
        $r21 := @caughtexception;

        $r22 = new org.apache.commons.math3.exception.ConvergenceException;

        $r24 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_SOLVE_SINGULAR_PROBLEM>;

        $r23 = newarray (java.lang.Object)[0];

        specialinvoke $r22.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r24, $r23);

        throw $r22;

     label18:
        if r5 == null goto label19;

        z1 = interfaceinvoke r1.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i3, r5, $r13);

        if z1 == 0 goto label19;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double computeCost(double[])>(r7);

        r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double cost> = $d3;

        $r18 = virtualinvoke $r13.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getPoint()>();

        r0.<org.apache.commons.math3.optimization.general.GaussNewtonOptimizer: double[] point> = $r18;

        return $r13;

     label19:
        goto label04;

     label20:
        $r12 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r12.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r12;

        catch org.apache.commons.math3.linear.SingularMatrixException from label12 to label16 with label17;
    }
}
