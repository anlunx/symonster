class org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix extends java.lang.Object implements java.lang.Cloneable
{
    protected int[] dimensionSize;
    protected java.lang.Object multiDimensionalComplexArray;

    public void <init>(java.lang.Object)
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        java.lang.Object r1, r6, r8;
        boolean $z0, $z1;
        int[] $r2, $r4;
        java.lang.Object[] $r3, $r5, r7, r9;
        int $i0, $i1, i2, i3;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray> = r1;

        i2 = 0;

        r6 = r1;

     label1:
        $z0 = r6 instanceof java.lang.Object[];

        if $z0 == 0 goto label2;

        $r5 = (java.lang.Object[]) r6;

        r7 = (java.lang.Object[]) $r5;

        i2 = i2 + 1;

        r6 = r7[0];

        goto label1;

     label2:
        $r2 = newarray (int)[i2];

        r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize> = $r2;

        i3 = 0;

        r8 = r1;

     label3:
        $z1 = r8 instanceof java.lang.Object[];

        if $z1 == 0 goto label4;

        $r3 = (java.lang.Object[]) r8;

        r9 = (java.lang.Object[]) $r3;

        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = i3;

        i3 = i3 + 1;

        $i1 = lengthof r9;

        $r4[$i0] = $i1;

        r8 = r9[0];

        goto label3;

     label4:
        return;
    }

    public transient org.apache.commons.math3.complex.Complex get(int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        int[] r1, $r2, $r3, $r8, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.commons.math3.complex.Complex $r4;
        java.lang.Object[] $r5, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r7, $r10;
        java.lang.Object r12;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 := @parameter0: int[];

        if r1 != null goto label2;

        $r9 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i6 = lengthof $r9;

        if $i6 <= 0 goto label1;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r11 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i7 = lengthof $r11;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(0, $i7);

        throw $r10;

     label1:
        return null;

     label2:
        $i1 = lengthof r1;

        $r2 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label3;

        $r7 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r1;

        $r8 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i4 = lengthof $r8;

        specialinvoke $r7.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r7;

     label3:
        r12 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        i8 = 0;

     label4:
        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = lengthof $r3;

        if i8 >= $i2 goto label5;

        $r5 = (java.lang.Object[]) r12;

        $r6 = (java.lang.Object[]) $r5;

        $i3 = r1[i8];

        r12 = $r6[$i3];

        i8 = i8 + 1;

        goto label4;

     label5:
        $r4 = (org.apache.commons.math3.complex.Complex) r12;

        return $r4;
    }

    public transient org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex, int[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        org.apache.commons.math3.complex.Complex r1, r18;
        int[] r2, $r3, $r6, $r7, $r9, $r13, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.Object $r4, $r8, $r10;
        java.lang.Object[] $r5, $r11, r17;
        org.apache.commons.math3.exception.DimensionMismatchException $r12, $r15;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 := @parameter0: org.apache.commons.math3.complex.Complex;

        r2 := @parameter1: int[];

        if r2 != null goto label2;

        $r14 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i13 = lengthof $r14;

        if $i13 <= 0 goto label1;

        $r15 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r16 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i14 = lengthof $r16;

        specialinvoke $r15.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(0, $i14);

        throw $r15;

     label1:
        return null;

     label2:
        $i1 = lengthof r2;

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label3;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i12 = lengthof r2;

        $r13 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i11 = lengthof $r13;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i12, $i11);

        throw $r12;

     label3:
        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        $r5 = (java.lang.Object[]) $r4;

        r17 = (java.lang.Object[]) $r5;

        i15 = 0;

     label4:
        $r6 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = lengthof $r6;

        $i3 = $i2 - 1;

        if i15 >= $i3 goto label5;

        $i10 = r2[i15];

        $r10 = r17[$i10];

        $r11 = (java.lang.Object[]) $r10;

        r17 = (java.lang.Object[]) $r11;

        i15 = i15 + 1;

        goto label4;

     label5:
        $r7 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i4 = lengthof $r7;

        $i5 = $i4 - 1;

        $i6 = r2[$i5];

        $r8 = r17[$i6];

        r18 = (org.apache.commons.math3.complex.Complex) $r8;

        $r9 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i7 = lengthof $r9;

        $i8 = $i7 - 1;

        $i9 = r2[$i8];

        r17[$i9] = r1;

        return r18;
    }

    public int[] getDimensionSizes()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        int[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public java.lang.Object getArray()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r1 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: java.lang.Object multiDimensionalComplexArray>;

        return $r1;
    }

    public java.lang.Object clone()
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0, $r2;
        int[] $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r2 = new org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "org/apache/commons/math3/complex/Complex", $r3);

        specialinvoke $r2.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void <init>(java.lang.Object)>($r4);

        specialinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: void clone(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix)>($r2);

        return $r2;
    }

    private void clone(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix)
    {
        org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix r0, r1;
        int[] r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, r14, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16;
        org.apache.commons.math3.complex.Complex $r6;
        int[][] r12;

        r0 := @this: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        r1 := @parameter0: org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix;

        $r3 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i0 = lengthof $r3;

        r2 = newarray (int)[$i0];

        i10 = 1;

        i11 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i1 = lengthof $r4;

        if i11 >= $i1 goto label2;

        $r11 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i9 = $r11[i11];

        i10 = i10 * $i9;

        i11 = i11 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i2 = lengthof $r5;

        r12 = newmultiarray (int)[i10][$i2];

        i12 = lengthof r12;

        i13 = 0;

     label3:
        if i13 >= i12 goto label7;

        r14 = r12[i13];

        $r8 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i3 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r14, 0, $i3);

        i14 = 0;

     label4:
        $r9 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i4 = lengthof $r9;

        if i14 >= $i4 goto label6;

        $i5 = r2[i14];

        $i6 = $i5 + 1;

        r2[i14] = $i6;

        $i8 = r2[i14];

        $r10 = r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: int[] dimensionSize>;

        $i7 = $r10[i14];

        if $i8 >= $i7 goto label5;

        goto label6;

     label5:
        r2[i14] = 0;

        i14 = i14 + 1;

        goto label4;

     label6:
        i13 = i13 + 1;

        goto label3;

     label7:
        i15 = lengthof r12;

        i16 = 0;

     label8:
        if i16 >= i15 goto label9;

        r16 = r12[i16];

        $r6 = virtualinvoke r0.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex get(int[])>(r16);

        virtualinvoke r1.<org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix: org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex,int[])>($r6, r16);

        i16 = i16 + 1;

        goto label8;

     label9:
        return;
    }
}
