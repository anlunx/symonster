public class org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians extends java.lang.Object
{
    private final org.apache.commons.math.ode.FirstOrderIntegrator integrator;
    private final org.apache.commons.math.ode.jacobians.ODEWithJacobians ode;
    private int maxEvaluations;
    private int evaluations;

    public void <init>(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.jacobians.ParameterizedODE, double[], double[], double[])
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator r1;
        org.apache.commons.math.ode.jacobians.ParameterizedODE r2;
        double[] r3, r4, r5;
        int $i0, $i1, $i2;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$FiniteDifferencesWrapper $r6;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderIntegrator;

        r2 := @parameter1: org.apache.commons.math.ode.jacobians.ParameterizedODE;

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r2.<org.apache.commons.math.ode.jacobians.ParameterizedODE: int getDimension()>();

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>($i0, r4);

        $i1 = interfaceinvoke r2.<org.apache.commons.math.ode.jacobians.ParameterizedODE: int getParametersDimension()>();

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>($i1, r3);

        $i2 = interfaceinvoke r2.<org.apache.commons.math.ode.jacobians.ParameterizedODE: int getParametersDimension()>();

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>($i2, r5);

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator> = r1;

        $r6 = new org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$FiniteDifferencesWrapper;

        specialinvoke $r6.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$FiniteDifferencesWrapper: void <init>(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians,org.apache.commons.math.ode.jacobians.ParameterizedODE,double[],double[],double[])>(r0, r2, r3, r4, r5);

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode> = $r6;

        virtualinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void setMaxEvaluations(int)>(-1);

        return;
    }

    public void <init>(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.jacobians.ODEWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator r1;
        org.apache.commons.math.ode.jacobians.ODEWithJacobians r2;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderIntegrator;

        r2 := @parameter1: org.apache.commons.math.ode.jacobians.ODEWithJacobians;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator> = r1;

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode> = r2;

        virtualinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void setMaxEvaluations(int)>(-1);

        return;
    }

    public void addStepHandler(org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians r1;
        int i0, i1;
        org.apache.commons.math.ode.jacobians.ODEWithJacobians $r2, $r3;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper $r4;
        org.apache.commons.math.ode.FirstOrderIntegrator $r5;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        r1 := @parameter0: org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i0 = interfaceinvoke $r2.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getDimension()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i1 = interfaceinvoke $r3.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getParametersDimension()>();

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $r4 = new org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper;

        specialinvoke $r4.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper: void <init>(org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians,int,int)>(r1, i0, i1);

        interfaceinvoke $r5.<org.apache.commons.math.ode.FirstOrderIntegrator: void addStepHandler(org.apache.commons.math.ode.sampling.StepHandler)>($r4);

        return;
    }

    public java.util.Collection getStepHandlers()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        java.util.Iterator r2;
        org.apache.commons.math.ode.sampling.StepHandler r3;
        java.util.ArrayList $r4;
        org.apache.commons.math.ode.FirstOrderIntegrator $r5;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper $r8;
        org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians $r9;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math.ode.FirstOrderIntegrator: java.util.Collection getStepHandlers()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.ode.sampling.StepHandler) $r7;

        $z1 = r3 instanceof org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper;

        if $z1 == 0 goto label2;

        $r8 = (org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper) r3;

        $r9 = virtualinvoke $r8.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepHandlerWrapper: org.apache.commons.math.ode.jacobians.StepHandlerWithJacobians getHandler()>();

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return $r4;
    }

    public void clearStepHandlers()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator $r1;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        interfaceinvoke $r1.<org.apache.commons.math.ode.FirstOrderIntegrator: void clearStepHandlers()>();

        return;
    }

    public void addEventHandler(org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians, double, double, int)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians r1;
        double d0, d1;
        int i0, i1, i2;
        org.apache.commons.math.ode.jacobians.ODEWithJacobians $r2, $r3;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper $r4;
        org.apache.commons.math.ode.FirstOrderIntegrator $r5;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        r1 := @parameter0: org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i1 = interfaceinvoke $r2.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getDimension()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i2 = interfaceinvoke $r3.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getParametersDimension()>();

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $r4 = new org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper;

        specialinvoke $r4.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper: void <init>(org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians,int,int)>(r1, i1, i2);

        interfaceinvoke $r5.<org.apache.commons.math.ode.FirstOrderIntegrator: void addEventHandler(org.apache.commons.math.ode.events.EventHandler,double,double,int)>($r4, d0, d1, i0);

        return;
    }

    public java.util.Collection getEventHandlers()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        java.util.Iterator r2;
        org.apache.commons.math.ode.events.EventHandler r3;
        java.util.ArrayList $r4;
        org.apache.commons.math.ode.FirstOrderIntegrator $r5;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper $r8;
        org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians $r9;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math.ode.FirstOrderIntegrator: java.util.Collection getEventHandlers()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math.ode.events.EventHandler) $r7;

        $z1 = r3 instanceof org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper;

        if $z1 == 0 goto label2;

        $r8 = (org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper) r3;

        $r9 = virtualinvoke $r8.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$EventHandlerWrapper: org.apache.commons.math.ode.jacobians.EventHandlerWithJacobians getHandler()>();

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return $r4;
    }

    public void clearEventHandlers()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator $r1;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        interfaceinvoke $r1.<org.apache.commons.math.ode.FirstOrderIntegrator: void clearEventHandlers()>();

        return;
    }

    public double integrate(double, double[], double[][], double, double[], double[][], double[][]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        double d0, d1, d2;
        double[] r1, r3, r6, $r9, $r12, $r13, $r14;
        double[][] r2, r4, r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        org.apache.commons.math.ode.jacobians.ODEWithJacobians $r7, $r8;
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$MappingWrapper $r10;
        org.apache.commons.math.ode.FirstOrderIntegrator $r11;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[][];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        r4 := @parameter5: double[][];

        r5 := @parameter6: double[][];

        $r7 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i0 = interfaceinvoke $r7.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getDimension()>();

        $r8 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        i1 = interfaceinvoke $r8.<org.apache.commons.math.ode.jacobians.ODEWithJacobians: int getParametersDimension()>();

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, r1);

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, r3);

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, r4);

        $r9 = r4[0];

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, $r9);

        if i1 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, r2);

        $r13 = r2[0];

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i1, $r13);

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i0, r5);

        $r14 = r5[0];

        specialinvoke r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void checkDimension(int,java.lang.Object)>(i1, $r14);

     label1:
        $i2 = 1 + i0;

        $i3 = $i2 + i1;

        $i4 = i0 * $i3;

        r6 = newarray (double)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r6, 0, i0);

        i12 = 0;

     label2:
        if i12 >= i0 goto label3;

        $i5 = 1 + i0;

        $i6 = i12 * $i5;

        $i7 = $i6 + i0;

        r6[$i7] = 1.0;

        $r12 = r2[i12];

        $i8 = i0 + 1;

        $i10 = i0 * $i8;

        $i9 = i12 * i1;

        $i11 = $i10 + $i9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r6, $i11, i1);

        i12 = i12 + 1;

        goto label2;

     label3:
        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations> = 0;

        $r11 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $r10 = new org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$MappingWrapper;

        specialinvoke $r10.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$MappingWrapper: void <init>(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians)>(r0);

        d2 = interfaceinvoke $r11.<org.apache.commons.math.ode.FirstOrderIntegrator: double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>($r10, d0, r6, d1, r6);

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void dispatchCompoundState(double[],double[],double[][],double[][])>(r6, r3, r4, r5);

        return d2;
    }

    private static void dispatchCompoundState(double[], double[], double[][], double[][])
    {
        double[] r0, r1, $r4, $r5, $r6;
        double[][] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[][];

        r3 := @parameter3: double[][];

        i0 = lengthof r1;

        $r4 = r3[0];

        i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        i8 = 0;

     label1:
        if i8 >= i0 goto label2;

        $i6 = i8 + 1;

        $i7 = i0 * $i6;

        $r6 = r2[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i7, $r6, 0, i0);

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 0;

     label3:
        if i9 >= i0 goto label4;

        $i2 = i0 + 1;

        $i4 = i0 * $i2;

        $i3 = i9 * i1;

        $i5 = $i4 + $i3;

        $r5 = r3[i9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i5, $r5, 0, i1);

        i9 = i9 + 1;

        goto label3;

     label4:
        return;
    }

    public double getCurrentStepStart()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.ode.FirstOrderIntegrator: double getCurrentStepStart()>();

        return $d0;
    }

    public double getCurrentSignedStepsize()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.FirstOrderIntegrator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.FirstOrderIntegrator integrator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.ode.FirstOrderIntegrator: double getCurrentSignedStepsize()>();

        return $d0;
    }

    public void setMaxEvaluations(int)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int i0, $i1;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = 2147483647;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int maxEvaluations> = $i1;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $i0 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int maxEvaluations>;

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $i0 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations>;

        return $i0;
    }

    private void checkDimension(int, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

     label2:
        if $i2 == i0 goto label3;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_SIMPLE>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label3:
        return;
    }

    static org.apache.commons.math.ode.jacobians.ODEWithJacobians access$000(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        org.apache.commons.math.ode.jacobians.ODEWithJacobians $r1;

        r0 := @parameter0: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: org.apache.commons.math.ode.jacobians.ODEWithJacobians ode>;

        return $r1;
    }

    static int access$104(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int $i0, $i1;

        r0 := @parameter0: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $i0 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations> = $i1;

        return $i1;
    }

    static int access$200(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $i0 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int maxEvaluations>;

        return $i0;
    }

    static int access$112(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians, int)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int i0, $i1, $i2;

        r0 := @parameter0: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations>;

        $i2 = $i1 + i0;

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations> = $i2;

        return $i2;
    }

    static int access$100(org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians;

        $i0 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: int evaluations>;

        return $i0;
    }

    static void access$300(double[], double[], double[][], double[][])
    {
        double[] r0, r1;
        double[][] r2, r3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[][];

        r3 := @parameter3: double[][];

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians: void dispatchCompoundState(double[],double[],double[][],double[][])>(r0, r1, r2, r3);

        return;
    }
}
