public class com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction extends java.lang.Object implements com.opengamma.analytics.math.cube.CubeShiftFunction
{

    public void <init>()
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r8;
        double d0;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARALLEL_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double,java.lang.String)>(r1, d0, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double, java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r9;
        double d0, $d1, $d2;
        java.lang.String r2;
        double[] r3, r4, r5, r6, r7;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getYDataAsPrimitive()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getZDataAsPrimitive()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getValuesAsPrimitive()>();

        i0 = lengthof r6;

        r7 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r6[i1];

        $d2 = $d1 + d0;

        r7[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r9 = staticinvoke <com.opengamma.analytics.math.cube.NodalDoublesCube: com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[],double[],double[],double[],java.lang.String)>(r3, r4, r5, r7, r2);

        return $r9;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double, double, double, double)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r8;
        double d0, d1, d2, d3;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SINGLE_SHIFT_");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double,double,double,double,java.lang.String)>(r1, d0, d1, d2, d3, $r7);

        return $r8;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r19;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.String r2, $r18;
        double[] r3, r4, r5, r6, r7;
        int i0, i10;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        long $l1, $l2, $l4, $l5, $l7, $l8;
        byte $b3, $b6, $b9;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        r2 := @parameter5: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getXDataAsPrimitive()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getYDataAsPrimitive()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getZDataAsPrimitive()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getValuesAsPrimitive()>();

        i0 = lengthof r6;

        i10 = 0;

     label1:
        if i10 >= i0 goto label3;

        $d4 = r3[i10];

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label2;

        $d5 = r4[i10];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label2;

        $d6 = r5[i10];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d6);

        $l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2);

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label2;

        r7 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r6, i0);

        $d7 = r7[i10];

        $d8 = $d7 + d3;

        r7[i10] = $d8;

        $r19 = staticinvoke <com.opengamma.analytics.math.cube.NodalDoublesCube: com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[],double[],double[],double[],java.lang.String)>(r3, r4, r5, r7, r2);

        return $r19;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y-z data in cube for (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r9;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r12;
        double[] r2, r3, r4, r5;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MULTIPLE_SHIFT_");

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double[],double[],double[],double[],java.lang.String)>(r1, r2, r3, r4, r5, $r11);

        return $r12;
    }

    public com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube, double[], double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.NodalDoublesCube r1, $r19, $r43;
        double[] r2, r3, r4, r5, r7, r8, r9, r10, r11, $r39, $r40, $r41, $r42;
        java.lang.String r6, $r30, $r37;
        int i0, i1, i2, $i3, $i13, $i14, $i15, $i16, $i17, i18, $i19, i20;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.util.Iterator r13;
        java.util.ArrayList $r20;
        boolean $z0, $z1, $z3, z4;
        java.lang.IllegalArgumentException $r21, $r33;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r35, $r36;
        java.lang.Object $r31;
        java.lang.Integer $r32, $r38, $r45, $r46, $r47, $r48;
        long $l4, $l5, $l7, $l8, $l10, $l11;
        byte $b6, $b9, $b12;
        java.lang.Object[] $r44;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        r6 := @parameter5: java.lang.String;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "cube");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "x shift");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "y shift");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "z shift");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r5, "shifts");

        i0 = lengthof r2;

        if i0 != 0 goto label01;

        $r39 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getXDataAsPrimitive()>();

        $r40 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getYDataAsPrimitive()>();

        $r41 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getZDataAsPrimitive()>();

        $r42 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getValuesAsPrimitive()>();

        $r43 = staticinvoke <com.opengamma.analytics.math.cube.NodalDoublesCube: com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[],double[],double[],double[],java.lang.String)>($r39, $r40, $r41, $r42, r6);

        return $r43;

     label01:
        $i3 = lengthof r3;

        if i0 != $i3 goto label02;

        $i13 = lengthof r4;

        if i0 != $i13 goto label02;

        $i14 = lengthof r5;

        if i0 != $i14 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $r44 = newarray (java.lang.Object)[4];

        $i15 = lengthof r5;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r44[0] = $r45;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r44[1] = $r46;

        $i16 = lengthof r3;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r44[2] = $r47;

        $i17 = lengthof r4;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r44[3] = $r48;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "number of shifts {} must be equal to number of x shift positions {}, y shift positions {} and z shift positions {}", $r44);

        r7 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getXDataAsPrimitive()>();

        r8 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getYDataAsPrimitive()>();

        r9 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getZDataAsPrimitive()>();

        r10 = virtualinvoke r1.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getValuesAsPrimitive()>();

        i1 = lengthof r10;

        r11 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r10, i1);

        i18 = 0;

     label04:
        $i19 = lengthof r2;

        if i18 >= $i19 goto label13;

        d0 = r2[i18];

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        i20 = 0;

     label05:
        if i20 >= i1 goto label07;

        $d10 = r7[i20];

        $l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d10);

        $l11 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b12 = $l10 cmp $l11;

        if $b12 != 0 goto label06;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r38);

     label06:
        i20 = i20 + 1;

        goto label05;

     label07:
        $z0 = interfaceinvoke $r20.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x data in cube for value ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label08:
        z4 = 0;

        r13 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r31 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r32 = (java.lang.Integer) $r31;

        i2 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        $d3 = r8[i2];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $d4 = r3[i18];

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label10;

        $d5 = r9[i2];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $d6 = r4[i18];

        $l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d6);

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label10;

        $d8 = r11[i2];

        $d7 = r5[i18];

        $d9 = $d8 + $d7;

        r11[i2] = $d9;

        z4 = 1;

     label10:
        goto label09;

     label11:
        if z4 != 0 goto label12;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y-z data in cube for (");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d1 = r3[i18];

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d2 = r4[i18];

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r21;

     label12:
        i18 = i18 + 1;

        goto label04;

     label13:
        $r19 = staticinvoke <com.opengamma.analytics.math.cube.NodalDoublesCube: com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[],double[],double[],double[],java.lang.String)>(r7, r8, r9, r11, r6);

        return $r19;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double[], double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double[] r2, r3, r4, r5;
        java.lang.String r6;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r7, $r8;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        r6 := @parameter5: java.lang.String;

        $r7 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double[],double[],double[],double[],java.lang.String)>($r7, r2, r3, r4, r5, r6);

        return $r8;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double[] r2, r3, r4, r5;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        $r6 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double[],double[],double[],double[])>($r6, r2, r3, r4, r5);

        return $r7;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double, double, double, double, java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double d0, d1, d2, d3;
        java.lang.String r2;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        r2 := @parameter5: java.lang.String;

        $r3 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double,double,double,double,java.lang.String)>($r3, d0, d1, d2, d3, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double, double, double, double)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double d0, d1, d2, d3;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        $r2 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double,double,double,double)>($r2, d0, d1, d2, d3);

        return $r3;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double, java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double d0;
        java.lang.String r2;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r3, $r4;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        d0 := @parameter1: double;

        r2 := @parameter2: java.lang.String;

        $r3 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double,java.lang.String)>($r3, d0, r2);

        return $r4;
    }

    public volatile com.opengamma.analytics.math.cube.Cube evaluate(com.opengamma.analytics.math.cube.Cube, double)
    {
        com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction r0;
        com.opengamma.analytics.math.cube.Cube r1;
        double d0;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction;

        r1 := @parameter0: com.opengamma.analytics.math.cube.Cube;

        d0 := @parameter1: double;

        $r2 = (com.opengamma.analytics.math.cube.NodalDoublesCube) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalCubeAdditiveShiftFunction: com.opengamma.analytics.math.cube.NodalDoublesCube evaluate(com.opengamma.analytics.math.cube.NodalDoublesCube,double)>($r2, d0);

        return $r3;
    }
}
