public class org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction extends java.lang.Object implements org.apache.commons.math3.ml.neuralnet.UpdateAction
{
    private final org.apache.commons.math3.ml.distance.DistanceMeasure distance;
    private final org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor;
    private final org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize;
    private final java.util.concurrent.atomic.AtomicLong numberOfCalls;

    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction, org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction r2;
        org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction r3;
        java.util.concurrent.atomic.AtomicLong $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction;

        r3 := @parameter2: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-1L);

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls> = $r4;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.distance.DistanceMeasure distance> = r1;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor> = r2;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize> = r3;

        return;
    }

    public void update(org.apache.commons.math3.ml.neuralnet.Network, double[])
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Network r1;
        double[] r2;
        long l0;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.ml.neuralnet.Neuron r3, r7;
        int i1, i2;
        java.util.Iterator r6;
        java.util.concurrent.atomic.AtomicLong $r8;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction $r9;
        org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction $r10;
        org.apache.commons.math3.analysis.function.Gaussian $r11;
        java.util.HashSet $r12, $r13;
        java.lang.Object $r14;
        java.util.Collection r15;
        boolean $z3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Network;

        r2 := @parameter1: double[];

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls>;

        l0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r9 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor>;

        d0 = interfaceinvoke $r9.<org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction: double value(long)>(l0);

        r3 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.Neuron findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network,double[],double)>(r1, r2, d0);

        $r10 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize>;

        i1 = interfaceinvoke $r10.<org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction: int value(long)>(l0);

        $r11 = new org.apache.commons.math3.analysis.function.Gaussian;

        $d1 = (double) i1;

        $d2 = 1.0 / $d1;

        specialinvoke $r11.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double,double)>(d0, 0.0, $d2);

        if i1 <= 0 goto label4;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        r15 = $r12;

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        i2 = 1;

     label1:
        r15 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(java.lang.Iterable,java.lang.Iterable)>(r15, $r13);

        r6 = interfaceinvoke r15.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r14;

        $d3 = (double) i2;

        $d4 = virtualinvoke $r11.<org.apache.commons.math3.analysis.function.Gaussian: double value(double)>($d3);

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: void updateNeighbouringNeuron(org.apache.commons.math3.ml.neuralnet.Neuron,double[],double)>(r7, r2, $d4);

        goto label2;

     label3:
        virtualinvoke $r13.<java.util.HashSet: boolean addAll(java.util.Collection)>(r15);

        i2 = i2 + 1;

        if i2 <= i1 goto label1;

     label4:
        return;
    }

    public long getNumberOfCalls()
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: java.util.concurrent.atomic.AtomicLong numberOfCalls>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    private void updateNeighbouringNeuron(org.apache.commons.math3.ml.neuralnet.Neuron, double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1;
        double[] r2, r3, r4;
        double d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

     label1:
        r3 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        r4 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: double[] computeFeatures(double[],double[],double)>(r3, r2, d0);

        $z0 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: boolean compareAndSetFeatures(double[],double[])>(r3, r4);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    private org.apache.commons.math3.ml.neuralnet.Neuron findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network, double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        org.apache.commons.math3.ml.neuralnet.Network r1;
        double[] r2, r4, r5;
        double d0;
        org.apache.commons.math3.ml.neuralnet.Neuron r3;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Network;

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

     label1:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: org.apache.commons.math3.ml.distance.DistanceMeasure distance>;

        r3 = staticinvoke <org.apache.commons.math3.ml.neuralnet.MapUtils: org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[],java.lang.Iterable,org.apache.commons.math3.ml.distance.DistanceMeasure)>(r2, r1, $r6);

        r4 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        r5 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction: double[] computeFeatures(double[],double[],double)>(r4, r2, d0);

        $z0 = virtualinvoke r3.<org.apache.commons.math3.ml.neuralnet.Neuron: boolean compareAndSetFeatures(double[],double[])>(r4, r5);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        goto label1;
    }

    private double[] computeFeatures(double[], double[], double)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction r0;
        double[] r1, r2, $r10;
        double d0;
        org.apache.commons.math3.linear.ArrayRealVector $r5, $r6, $r7;
        org.apache.commons.math3.linear.RealVector $r8, $r9;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        $r5 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r5.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r6 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.ArrayRealVector subtract(org.apache.commons.math3.linear.RealVector)>($r5);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.linear.ArrayRealVector: org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double)>(d0);

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector)>($r5);

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        return $r10;
    }
}
