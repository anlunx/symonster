public class org.apache.commons.math3.stat.inference.ChiSquareTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double chiSquare(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] r1;
        long[] r2;
        int $i0, $i1, $i2, $i3, $i8, $i9, $i10, i11, i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d18, d19, d20, d21;
        byte $b4;
        long $l5, $l6, $l7;
        org.apache.commons.math3.exception.DimensionMismatchException $r3, $r4;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i10 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, 2);

        throw $r4;

     label1:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = lengthof r1;

        $i8 = lengthof r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, $i8);

        throw $r3;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkPositive(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r2);

        d16 = 0.0;

        d17 = 0.0;

        i11 = 0;

     label3:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label4;

        $d14 = r1[i11];

        d16 = d16 + $d14;

        $l7 = r2[i11];

        $d15 = (double) $l7;

        d17 = d17 + $d15;

        i11 = i11 + 1;

        goto label3;

     label4:
        d18 = 1.0;

        z0 = 0;

        $d0 = d16 - d17;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        $b4 = $d1 cmpl 1.0E-5;

        if $b4 <= 0 goto label5;

        d18 = d17 / d16;

        z0 = 1;

     label5:
        d19 = 0.0;

        i12 = 0;

     label6:
        $i13 = lengthof r2;

        if i12 >= $i13 goto label9;

        if z0 == 0 goto label7;

        $l6 = r2[i12];

        $d9 = (double) $l6;

        $d7 = r1[i12];

        $d8 = d18 * $d7;

        d20 = $d9 - $d8;

        $d12 = d20 * d20;

        $d10 = r1[i12];

        $d11 = d18 * $d10;

        $d13 = $d12 / $d11;

        d19 = d19 + $d13;

        goto label8;

     label7:
        $l5 = r2[i12];

        $d3 = (double) $l5;

        $d2 = r1[i12];

        d21 = $d3 - $d2;

        $d5 = d21 * d21;

        $d4 = r1[i12];

        $d6 = $d5 / $d4;

        d19 = d19 + $d6;

     label8:
        i12 = i12 + 1;

        goto label6;

     label9:
        return d19;
    }

    public double chiSquareTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] r1;
        long[] r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(double[],long[])>(r1, r2);

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean chiSquareTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        double[] r1;
        long[] r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(double[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public double chiSquare(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] r1;
        int i0, i1, i7, i8, i9, i10;
        double[] r2, r3;
        long[] $r4, $r5, $r6, $r7, $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, d19;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: void checkArray(long[][])>(r1);

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i1];

        d16 = 0.0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        i8 = 0;

     label2:
        if i8 >= i1 goto label3;

        $d10 = r2[i7];

        $r7 = r1[i7];

        $l4 = $r7[i8];

        $d9 = (double) $l4;

        $d11 = $d10 + $d9;

        r2[i7] = $d11;

        $d13 = r3[i8];

        $r8 = r1[i7];

        $l5 = $r8[i8];

        $d12 = (double) $l5;

        $d14 = $d13 + $d12;

        r3[i8] = $d14;

        $r9 = r1[i7];

        $l6 = $r9[i8];

        $d15 = (double) $l6;

        d16 = d16 + $d15;

        i8 = i8 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        d17 = 0.0;

        i9 = 0;

     label5:
        if i9 >= i0 goto label8;

        i10 = 0;

     label6:
        if i10 >= i1 goto label7;

        $d1 = r2[i9];

        $d0 = r3[i10];

        $d2 = $d1 * $d0;

        d19 = $d2 / d16;

        $r5 = r1[i9];

        $l2 = $r5[i10];

        $d3 = (double) $l2;

        $d6 = $d3 - d19;

        $r6 = r1[i9];

        $l3 = $r6[i10];

        $d4 = (double) $l3;

        $d5 = $d4 - d19;

        $d7 = $d6 * $d5;

        $d8 = $d7 / d19;

        d17 = d17 + $d8;

        i10 = i10 + 1;

        goto label6;

     label7:
        i9 = i9 + 1;

        goto label5;

     label8:
        return d17;
    }

    public double chiSquareTest(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int $i0, $i1;
        long[] $r3;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[][];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: void checkArray(long[][])>(r1);

        $i0 = lengthof r1;

        $d1 = (double) $i0;

        $d4 = $d1 - 1.0;

        $r3 = r1[0];

        $i1 = lengthof $r3;

        $d2 = (double) $i1;

        $d3 = $d2 - 1.0;

        d0 = $d4 * $d3;

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(double)>(d0);

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(long[][])>(r1);

        $d6 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d5);

        $d7 = 1.0 - $d6;

        return $d7;
    }

    public boolean chiSquareTest(long[][], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] r1;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4, $r6;
        java.lang.Integer $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[][];

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(long[][])>(r1);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public double chiSquareDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] r1, r2;
        int $i0, $i1, $i2, $i3, $i15, $i16, $i17, i20, i21, $i22;
        byte $b4, $b5, $b6, $b8, $b12;
        org.apache.commons.math3.exception.ZeroException $r3, $r4;
        long $l7, $l9, $l10, $l11, $l13, $l14, l18, l19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d13, d14, d15;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r8, $r9;
        boolean $z1, z2;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label01;

        $r9 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i17 = lengthof r1;

        specialinvoke $r9.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i17, 2);

        throw $r9;

     label01:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label02;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i16 = lengthof r1;

        $i15 = lengthof r2;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i16, $i15);

        throw $r8;

     label02:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r2);

        l18 = 0L;

        l19 = 0L;

        d8 = 0.0;

        i20 = 0;

     label03:
        $i3 = lengthof r1;

        if i20 >= $i3 goto label04;

        $l13 = r1[i20];

        l18 = l18 + $l13;

        $l14 = r2[i20];

        l19 = l19 + $l14;

        i20 = i20 + 1;

        goto label03;

     label04:
        $b4 = l18 cmp 0L;

        if $b4 == 0 goto label05;

        $b5 = l19 cmp 0L;

        if $b5 != 0 goto label06;

     label05:
        $r3 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r3.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r3;

     label06:
        $b6 = l18 cmp l19;

        if $b6 == 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z2 = $z1;

        if $z1 == 0 goto label09;

        $d6 = (double) l18;

        $d5 = (double) l19;

        $d7 = $d6 / $d5;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

     label09:
        d9 = 0.0;

        i21 = 0;

     label10:
        $i22 = lengthof r1;

        if i21 >= $i22 goto label14;

        $l7 = r1[i21];

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label11;

        $l11 = r2[i21];

        $b12 = $l11 cmp 0L;

        if $b12 != 0 goto label11;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        $r5[0] = $r7;

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label11:
        $l9 = r1[i21];

        d13 = (double) $l9;

        $l10 = r2[i21];

        d14 = (double) $l10;

        if z2 == 0 goto label12;

        $d4 = d13 / d8;

        $d3 = d14 * d8;

        d15 = $d4 - $d3;

        goto label13;

     label12:
        d15 = d13 - d14;

     label13:
        $d1 = d15 * d15;

        $d0 = d13 + d14;

        $d2 = $d1 / $d0;

        d9 = d9 + $d2;

        i21 = i21 + 1;

        goto label10;

     label14:
        return d9;
    }

    public double chiSquareTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] r1, r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareDataSetsComparison(long[],long[])>(r1, r2);

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean chiSquareTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[] r1, r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTestDataSetsComparison(long[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private void checkArray(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.stat.inference.ChiSquareTest r0;
        long[][] r1;
        int $i0, $i1, $i2, $i3;
        long[] $r2, $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r3, $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.ChiSquareTest;

        r1 := @parameter0: long[][];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, 2);

        throw $r5;

     label1:
        $r2 = r1[0];

        $i1 = lengthof $r2;

        if $i1 >= 2 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r4 = r1[0];

        $i2 = lengthof $r4;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, 2);

        throw $r3;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkRectangular(long[][])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[][])>(r1);

        return;
    }
}
