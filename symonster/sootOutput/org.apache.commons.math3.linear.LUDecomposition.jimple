public class org.apache.commons.math3.linear.LUDecomposition extends java.lang.Object
{
    private static final double DEFAULT_TOO_SMALL;
    private final double[][] lu;
    private final int[] pivot;
    private boolean even;
    private boolean singular;
    private org.apache.commons.math3.linear.RealMatrix cachedL;
    private org.apache.commons.math3.linear.RealMatrix cachedU;
    private org.apache.commons.math3.linear.RealMatrix cachedP;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.LUDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r1, 1.0E-11);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d15, d17, d18;
        int i0, $i2, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        double[] r2, $r6, $r8, $r18, $r21, r24, r25, r26, $r28;
        boolean $z0, $z1, $z2;
        double[][] $r3, $r5, $r7, $r9, $r10, $r16, $r17, $r19, $r20, $r27;
        int[] $r4, $r11, $r12, $r13, $r14, $r22;
        byte $b1, $b3;
        org.apache.commons.math3.linear.NonSquareMatrixException $r23;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label01;

        $r23 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r23.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i4, $i5);

        throw $r23;

     label01:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu> = $r3;

        $r4 = newarray (int)[i0];

        r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot> = $r4;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = null;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = null;

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = null;

        i6 = 0;

     label02:
        if i6 >= i0 goto label03;

        $r22 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r22[i6] = i6;

        i6 = i6 + 1;

        goto label02;

     label03:
        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even> = 1;

        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular> = 0;

        i7 = 0;

     label04:
        if i7 >= i0 goto label22;

        i8 = 0;

     label05:
        if i8 >= i7 goto label08;

        $r19 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r24 = $r19[i8];

        d13 = r24[i7];

        i9 = 0;

     label06:
        if i9 >= i8 goto label07;

        $d11 = r24[i9];

        $r20 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r21 = $r20[i9];

        $d10 = $r21[i7];

        $d12 = $d11 * $d10;

        d13 = d13 - $d12;

        i9 = i9 + 1;

        goto label06;

     label07:
        r24[i7] = d13;

        i8 = i8 + 1;

        goto label05;

     label08:
        i10 = i7;

        d14 = #-Infinity;

        i11 = i7;

     label09:
        if i11 >= i0 goto label13;

        $r16 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r25 = $r16[i11];

        d15 = r25[i7];

        i12 = 0;

     label10:
        if i12 >= i7 goto label11;

        $d8 = r25[i12];

        $r17 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r18 = $r17[i12];

        $d7 = $r18[i7];

        $d9 = $d8 * $d7;

        d15 = d15 - $d9;

        i12 = i12 + 1;

        goto label10;

     label11:
        r25[i7] = d15;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d15);

        $b3 = $d6 cmpl d14;

        if $b3 <= 0 goto label12;

        d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d15);

        i10 = i11;

     label12:
        i11 = i11 + 1;

        goto label09;

     label13:
        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r6 = $r5[i10];

        $d1 = $r6[i7];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b1 = $d2 cmpg d0;

        if $b1 >= 0 goto label14;

        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular> = 1;

        return;

     label14:
        if i10 == i7 goto label19;

        $r9 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r26 = $r9[i10];

        $r10 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r2 = $r10[i7];

        i13 = 0;

     label15:
        if i13 >= i0 goto label16;

        d17 = r26[i13];

        $d5 = r2[i13];

        r26[i13] = $d5;

        r2[i13] = d17;

        i13 = i13 + 1;

        goto label15;

     label16:
        $r11 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i14 = $r11[i10];

        $r13 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r12 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $i2 = $r12[i7];

        $r13[i10] = $i2;

        $r14 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r14[i7] = i14;

        $z1 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even>;

        if $z1 != 0 goto label17;

        $z2 = 1;

        goto label18;

     label17:
        $z2 = 0;

     label18:
        r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even> = $z2;

     label19:
        $r27 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r28 = $r27[i7];

        d18 = $r28[i7];

        i15 = i7 + 1;

     label20:
        if i15 >= i0 goto label21;

        $r7 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r8 = $r7[i15];

        $d3 = $r8[i7];

        $d4 = $d3 / d18;

        $r8[i7] = $d4;

        i15 = i15 + 1;

        goto label20;

     label21:
        i7 = i7 + 1;

        goto label04;

     label22:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getL()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, i1, i2;
        double[] r1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r4, $r6, $r7, $r8;
        boolean $z0;
        int[] $r3;
        double[][] $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        if $r2 != null goto label4;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r3;

        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r1 = $r5[i1];

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r7 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        $d0 = r1[i2];

        interfaceinvoke $r7.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, $d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r8 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedL>;

        return $r8;
    }

    public org.apache.commons.math3.linear.RealMatrix getU()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, i1, i2;
        double[] r1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r4, $r6, $r7;
        boolean $z0;
        int[] $r3;
        double[][] $r5;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        if $r2 != null goto label4;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r3;

        $r4 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        r1 = $r5[i1];

        i2 = i1;

     label2:
        if i2 >= i0 goto label3;

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        $d0 = r1[i2];

        interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, $d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r7 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedU>;

        return $r7;
    }

    public org.apache.commons.math3.linear.RealMatrix getP()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, $i1, i2;
        org.apache.commons.math3.linear.RealMatrix $r1, $r3, $r5, $r6;
        boolean $z0;
        int[] $r2, $r4;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        if $r1 != null goto label2;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r2;

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP> = $r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        $r4 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $i1 = $r4[i2];

        interfaceinvoke $r5.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, $i1, 1.0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition: org.apache.commons.math3.linear.RealMatrix cachedP>;

        return $r6;
    }

    public int[] getPivot()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public double getDeterminant()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        int i0, i1;
        boolean $z0, $z1;
        int[] $r1;
        double[][] $r2;
        double[] $r3;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        if $z0 == 0 goto label1;

        return 0.0;

     label1:
        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        i0 = lengthof $r1;

        $z1 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean even>;

        if $z1 == 0 goto label2;

        $d1 = 1.0;

        goto label3;

     label2:
        $d1 = -1.0;

     label3:
        d2 = $d1;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r3 = $r2[i1];

        $d0 = $r3[i1];

        d2 = d2 * $d0;

        i1 = i1 + 1;

        goto label4;

     label5:
        return d2;
    }

    public org.apache.commons.math3.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math3.linear.LUDecomposition r0;
        org.apache.commons.math3.linear.LUDecomposition$Solver $r1;
        boolean $z0;
        int[] $r2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition;

        $r1 = new org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition: double[][] lu>;

        $r2 = r0.<org.apache.commons.math3.linear.LUDecomposition: int[] pivot>;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition: boolean singular>;

        specialinvoke $r1.<org.apache.commons.math3.linear.LUDecomposition$Solver: void <init>(double[][],int[],boolean,org.apache.commons.math3.linear.LUDecomposition$1)>($r3, $r2, $z0, null);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.LUDecomposition: double DEFAULT_TOO_SMALL> = 1.0E-11;

        return;
    }
}
