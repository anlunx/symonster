public abstract class com.opengamma.analytics.math.interpolation.InterpolatorND extends java.lang.Object implements com.opengamma.analytics.math.interpolation.Interpolator
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.InterpolatorND r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.InterpolatorND;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[]);

    protected void validateInput(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[])
    {
        com.opengamma.analytics.math.interpolation.InterpolatorND r0;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle r1;
        double[] r2, $r9;
        java.util.List r3;
        int i0, $i1;
        java.lang.Object $r6, $r8;
        com.opengamma.util.tuple.Pair $r7;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.InterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle;

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "null position");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null databundle");

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle: java.util.List getData()>();

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "0 dimension");

        $r6 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (com.opengamma.util.tuple.Pair) $r6;

        $r8 = virtualinvoke $r7.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r9 = (double[]) $r8;

        $i1 = lengthof $r9;

        if $i1 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "data and requested point different dimension");

        return;
    }

    public abstract com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(double[], double[], double[], double[]);

    public abstract com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle getDataBundle(java.util.List);

    protected java.util.List transformData(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.InterpolatorND r0;
        double[] r1, r2, r3, r4, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object[] $r10, $r13, $r16;
        java.lang.Integer $r11, $r12, $r14, $r15, $r17, $r18;
        java.util.ArrayList $r19;
        double $d0, $d1, $d2, $d3;
        java.lang.Double $r21;
        com.opengamma.util.tuple.Pair $r22;
        boolean $z1, $z2, $z3;

        r0 := @this: com.opengamma.analytics.math.interpolation.InterpolatorND;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "z");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "values");

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if $i1 != i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r10 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[1] = $r12;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "number of ys {} is not equal to number of xs {}", $r10);

        $i3 = lengthof r3;

        if $i3 != i0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $r13 = newarray (java.lang.Object)[2];

        $i4 = lengthof r3;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[1] = $r15;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "number of zs {} is not equal to number of xs {}", $r13);

        $i5 = lengthof r4;

        if $i5 != i0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        $r16 = newarray (java.lang.Object)[2];

        $i6 = lengthof r4;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r16[0] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r16[1] = $r18;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "number of values {} is not equal to number of xs {}", $r16);

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>(i0);

        i7 = 0;

     label7:
        if i7 >= i0 goto label8;

        $r20 = newarray (double)[3];

        $d0 = r1[i7];

        $r20[0] = $d0;

        $d1 = r2[i7];

        $r20[1] = $d1;

        $d2 = r3[i7];

        $r20[2] = $d2;

        $d3 = r4[i7];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r22 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>($r20, $r21);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r22);

        i7 = i7 + 1;

        goto label7;

     label8:
        return $r19;
    }

    public java.util.Map getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle, double[])
    {
        com.opengamma.analytics.math.interpolation.InterpolatorND r0;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle r1;
        double[] r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.InterpolatorND;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle;

        r2 := @parameter1: double[];

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Node sensitivities cannot be calculated by this interpolator");

        throw $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.InterpolatorND r0;
        java.lang.Object r1, r2;
        double[] $r3;
        com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle $r4;
        java.lang.Double $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.InterpolatorND;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle) r1;

        $r3 = (double[]) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.InterpolatorND: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.InterpolatorNDDataBundle,double[])>($r4, $r3);

        return $r5;
    }
}
