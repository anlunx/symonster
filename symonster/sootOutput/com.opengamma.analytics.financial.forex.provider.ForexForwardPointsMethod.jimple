public final class com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod extends java.lang.Object
{
    private static final com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod INSTANCE;

    public static com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod getInstance()
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod $r0;

        $r0 = <com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface, com.opengamma.analytics.math.curve.DoublesCurve, com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r2;
        com.opengamma.analytics.math.curve.DoublesCurve r3;
        com.opengamma.util.tuple.Pair r4;
        double d0, d1, d2, d3, $d4, $d5, d6, d7;
        java.lang.Double $r5, $r7, $r10;
        java.lang.Object $r6;
        boolean $z0;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r8, $r9, $r12, $r13;
        com.opengamma.util.money.MultipleCurrencyAmount $r11;
        com.opengamma.util.money.Currency r14;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface;

        r3 := @parameter2: com.opengamma.analytics.math.curve.DoublesCurve;

        r4 := @parameter3: com.opengamma.util.tuple.Pair;

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r5);

        $r7 = (java.lang.Double) $r6;

        d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $z0 = specialinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: boolean checkCurrency(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.util.tuple.Pair)>(r1, r4);

        if $z0 == 0 goto label1;

        r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d6 = virtualinvoke $r12.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d7 = virtualinvoke $r13.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        goto label2;

     label1:
        r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d6 = virtualinvoke $r8.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r9 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d7 = virtualinvoke $r9.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

     label2:
        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d2 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>(r14, $r10);

        $d4 = d6 * d1;

        $d5 = d7 + $d4;

        d3 = d2 * $d5;

        $r11 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.Currency,double)>(r14, d3);

        return $r11;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface $r4;
        com.opengamma.analytics.math.curve.DoublesCurve $r5;
        com.opengamma.util.tuple.Pair $r6;
        com.opengamma.util.money.MultipleCurrencyAmount $r7;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "multi-curve provider");

        $r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r5 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.analytics.math.curve.DoublesCurve getForwardPointsCurve()>();

        $r6 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.util.tuple.Pair getCurrencyPair()>();

        $r7 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface,com.opengamma.analytics.math.curve.DoublesCurve,com.opengamma.util.tuple.Pair)>(r1, $r4, $r5, $r6);

        return $r7;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount currencyExposure(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface, com.opengamma.analytics.math.curve.DoublesCurve, com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r2;
        com.opengamma.analytics.math.curve.DoublesCurve r3;
        com.opengamma.util.tuple.Pair r4;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, d8, d9;
        java.lang.Double $r5, $r7, $r10;
        java.lang.Object $r6;
        boolean $z0;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r8, $r9, $r11, $r12;
        com.opengamma.util.money.Currency r13, r14;
        com.opengamma.util.money.MultipleCurrencyAmount r15, r16;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface;

        r3 := @parameter2: com.opengamma.analytics.math.curve.DoublesCurve;

        r4 := @parameter3: com.opengamma.util.tuple.Pair;

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r5);

        $r7 = (java.lang.Double) $r6;

        d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $z0 = specialinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: boolean checkCurrency(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.util.tuple.Pair)>(r1, r4);

        if $z0 == 0 goto label1;

        r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d8 = virtualinvoke $r11.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d9 = virtualinvoke $r12.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        goto label2;

     label1:
        r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d8 = virtualinvoke $r8.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r9 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d9 = virtualinvoke $r9.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

     label2:
        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d2 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>(r14, $r10);

        d3 = d9 * d2;

        d4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>(r13, r14);

        $d7 = d8 * d2;

        $d6 = d1 / d4;

        d5 = $d7 * $d6;

        r15 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.Currency,double)>(r13, d5);

        r16 = virtualinvoke r15.<com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount plus(com.opengamma.util.money.Currency,double)>(r14, d3);

        return r16;
    }

    public com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface, com.opengamma.analytics.math.curve.DoublesCurve, com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r2;
        com.opengamma.analytics.math.curve.DoublesCurve r3;
        com.opengamma.util.tuple.Pair r4;
        double d0, d1, d2, d4, $d5, $d6, $d7, $d8, $d9, d10, d11;
        com.opengamma.util.tuple.DoublesPair r5;
        java.lang.Double $r8, $r10, $r13;
        java.lang.Object $r9;
        boolean $z0;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r11, $r12, $r20, $r21;
        java.util.ArrayList $r14;
        java.util.HashMap $r15;
        java.lang.String $r16;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity $r18;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity $r19;
        com.opengamma.util.money.Currency r22;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface;

        r3 := @parameter2: com.opengamma.analytics.math.curve.DoublesCurve;

        r4 := @parameter3: com.opengamma.util.tuple.Pair;

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r8);

        $r10 = (java.lang.Double) $r9;

        d1 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $z0 = specialinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: boolean checkCurrency(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.util.tuple.Pair)>(r1, r4);

        if $z0 == 0 goto label1;

        r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d10 = virtualinvoke $r20.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d11 = virtualinvoke $r21.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        goto label2;

     label1:
        r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d10 = virtualinvoke $r11.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d11 = virtualinvoke $r12.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

     label2:
        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d2 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>(r22, $r13);

        $d5 = d10 * d1;

        $d6 = d11 + $d5;

        d4 = $d6 * 1.0;

        $d7 = neg d0;

        $d8 = $d7 * d2;

        $d9 = $d8 * d4;

        r5 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d0, $d9);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r5);

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        $r16 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: java.lang.String getName(com.opengamma.util.money.Currency)>(r22);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r14);

        $r18 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity ofYieldDiscounting(java.util.Map)>($r15);

        $r19 = staticinvoke <com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity of(com.opengamma.util.money.Currency,com.opengamma.analytics.financial.provider.sensitivity.multicurve.MulticurveSensitivity)>(r22, $r18);

        return $r19;
    }

    public com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface r2;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface $r4;
        com.opengamma.analytics.math.curve.DoublesCurve $r5;
        com.opengamma.util.tuple.Pair $r6;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity $r7;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "multi-curve provider");

        $r4 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()>();

        $r5 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.analytics.math.curve.DoublesCurve getForwardPointsCurve()>();

        $r6 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveForwardPointsProviderInterface: com.opengamma.util.tuple.Pair getCurrencyPair()>();

        $r7 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: com.opengamma.analytics.financial.provider.sensitivity.multicurve.MultipleCurrencyMulticurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface,com.opengamma.analytics.math.curve.DoublesCurve,com.opengamma.util.tuple.Pair)>(r1, $r4, $r5, $r6);

        return $r7;
    }

    public double[] presentValueForwardPointsSensitivity(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface, com.opengamma.analytics.math.curve.DoublesCurve, com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface r2;
        com.opengamma.analytics.math.curve.DoublesCurve r3;
        com.opengamma.util.tuple.Pair r4;
        double d0, d1, d3, $d4, $d5, $d6, d7;
        java.lang.Double[] r5;
        double[] r6;
        boolean $z0;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r7, $r11;
        java.lang.Double $r8, $r9, $r10;
        int $i0, i1, $i2;
        com.opengamma.util.money.Currency r12;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface;

        r3 := @parameter2: com.opengamma.analytics.math.curve.DoublesCurve;

        r4 := @parameter3: com.opengamma.util.tuple.Pair;

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $z0 = specialinvoke r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: boolean checkCurrency(com.opengamma.analytics.financial.forex.derivative.Forex,com.opengamma.util.tuple.Pair)>(r1, r4);

        if $z0 == 0 goto label1;

        r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        d7 = virtualinvoke $r11.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        goto label2;

     label1:
        r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r7 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        d7 = virtualinvoke $r7.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

     label2:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d1 = interfaceinvoke r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface: double getDiscountFactor(com.opengamma.util.money.Currency,java.lang.Double)>(r12, $r8);

        $d4 = d1 * d7;

        d3 = $d4 * 1.0;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Double[] getYValueParameterSensitivity(java.lang.Double)>($r9);

        $i0 = lengthof r5;

        r6 = newarray (double)[$i0];

        i1 = 0;

     label3:
        $i2 = lengthof r5;

        if i1 >= $i2 goto label4;

        $r10 = r5[i1];

        $d5 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d6 = $d5 * d3;

        r6[i1] = $d6;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r6;
    }

    private boolean checkCurrency(com.opengamma.analytics.financial.forex.derivative.Forex, com.opengamma.util.tuple.Pair)
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod r0;
        com.opengamma.analytics.financial.forex.derivative.Forex r1;
        com.opengamma.util.tuple.Pair r2;
        com.opengamma.util.money.Currency $r3, $r6, $r10, $r13, $r17, $r19, $r21;
        java.lang.Object $r4, $r11, $r18, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r5, $r7, $r8, $r12, $r14, $r15;
        java.lang.String $r9, $r16;

        r0 := @this: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.Forex;

        r2 := @parameter1: com.opengamma.util.tuple.Pair;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r4 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $z0 = virtualinvoke $r3.<com.opengamma.util.money.Currency: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r22 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $z4 = virtualinvoke $r21.<com.opengamma.util.money.Currency: boolean equals(java.lang.Object)>($r22);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not in currency pair for forward point method");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, $r9);

        $r10 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r11 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $z1 = virtualinvoke $r10.<com.opengamma.util.money.Currency: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label4;

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r20 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $z3 = virtualinvoke $r19.<com.opengamma.util.money.Currency: boolean equals(java.lang.Object)>($r20);

        if $z3 == 0 goto label5;

     label4:
        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not in currency pair for forward point method");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, $r16);

        $r17 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r18 = virtualinvoke r2.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $z2 = virtualinvoke $r17.<com.opengamma.util.money.Currency: boolean equals(java.lang.Object)>($r18);

        return $z2;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod $r0;

        $r0 = new com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod;

        specialinvoke $r0.<com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: void <init>()>();

        <com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod: com.opengamma.analytics.financial.forex.provider.ForexForwardPointsMethod INSTANCE> = $r0;

        return;
    }
}
