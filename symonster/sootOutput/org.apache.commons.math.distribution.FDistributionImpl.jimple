public class org.apache.commons.math.distribution.FDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.FDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private double numeratorDegreesOfFreedom;
    private double denominatorDegreesOfFreedom;
    private final double solverAbsoluteAccuracy;

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: void setNumeratorDegreesOfFreedomInternal(double)>(d0);

        specialinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: void setDenominatorDegreesOfFreedomInternal(double)>(d1);

        r0.<org.apache.commons.math.distribution.FDistributionImpl: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        $d7 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>;

        d1 = $d7 / 2.0;

        $d8 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        d2 = $d8 / 2.0;

        d3 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d0);

        $d9 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>;

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d9);

        $d10 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        d5 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d10);

        $d11 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>;

        $d13 = $d11 * d0;

        $d12 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        $d14 = $d13 + $d12;

        d6 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d14);

        $d16 = d1 * d4;

        $d15 = d1 * d3;

        $d17 = $d16 + $d15;

        $d19 = $d17 - d3;

        $d18 = d2 * d5;

        $d21 = $d19 + $d18;

        $d20 = d1 * d6;

        $d23 = $d21 - $d20;

        $d22 = d2 * d6;

        $d24 = $d23 - $d22;

        $d25 = staticinvoke <org.apache.commons.math.special.Beta: double logBeta(double,double)>(d1, d2);

        $d26 = $d24 - $d25;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d26);

        return $d27;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        d9 = 0.0;

        goto label2;

     label1:
        d1 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>;

        d2 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        $d5 = d1 * d0;

        $d3 = d1 * d0;

        $d4 = d2 + $d3;

        $d8 = $d5 / $d4;

        $d7 = 0.5 * d1;

        $d6 = 0.5 * d2;

        d9 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double)>($d8, $d7, $d6);

     label2:
        return d9;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, $d1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(d0);

        return $d1;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        return 0.0;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        return 1.7976931348623157E308;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1, $d2, d3;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        d3 = 1.0;

        d1 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        $b0 = d1 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d2 = d1 - 2.0;

        d3 = d1 / $d2;

     label1:
        return d3;
    }

    public void setNumeratorDegreesOfFreedom(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: void setNumeratorDegreesOfFreedomInternal(double)>(d0);

        return;
    }

    private void setNumeratorDegreesOfFreedomInternal(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_DEGREES_OF_FREEDOM>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom> = d0;

        return;
    }

    public double getNumeratorDegreesOfFreedom()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>;

        return $d0;
    }

    public void setDenominatorDegreesOfFreedom(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: void setDenominatorDegreesOfFreedomInternal(double)>(d0);

        return;
    }

    private void setDenominatorDegreesOfFreedomInternal(double)
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_DEGREES_OF_FREEDOM>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom> = d0;

        return;
    }

    public double getDenominatorDegreesOfFreedom()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>;

        return $d0;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.FDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, $d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: double getDenominatorDegreesOfFreedom()>();

        $b0 = d0 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d1 = d0 - 2.0;

        $d2 = d0 / $d1;

        return $d2;

     label1:
        return #NaN;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.FDistributionImpl r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.FDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: double getDenominatorDegreesOfFreedom()>();

        $b0 = d0 cmpl 4.0;

        if $b0 <= 0 goto label1;

        d1 = virtualinvoke r0.<org.apache.commons.math.distribution.FDistributionImpl: double getNumeratorDegreesOfFreedom()>();

        d2 = d0 - 2.0;

        $d3 = d0 * d0;

        $d6 = 2.0 * $d3;

        $d4 = d1 + d0;

        $d5 = $d4 - 2.0;

        $d11 = $d6 * $d5;

        $d7 = d2 * d2;

        $d9 = d1 * $d7;

        $d8 = d0 - 4.0;

        $d10 = $d9 * $d8;

        $d12 = $d11 / $d10;

        return $d12;

     label1:
        return #NaN;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.FDistributionImpl: long serialVersionUID> = -8516354193418641566L;

        <org.apache.commons.math.distribution.FDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
