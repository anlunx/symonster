public class org.apache.commons.math3.stat.inference.TTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.math3.stat.inference.TTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double pairedT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r2);

        d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double meanDifference(double[],double[])>(r1, r2);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double varianceDifference(double[],double[],double)>(r1, r2, d0);

        $i0 = lengthof r1;

        $d2 = (double) $i0;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>(d0, 0.0, $d1, $d2);

        return $d3;
    }

    public double pairedTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double d0, $d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double meanDifference(double[],double[])>(r1, r2);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double varianceDifference(double[],double[],double)>(r1, r2, d0);

        $i0 = lengthof r1;

        $d2 = (double) $i0;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>(d0, 0.0, $d1, $d2);

        return $d3;
    }

    public boolean pairedTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double pairedTTest(double[],double[])>(r1, r2);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double t(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, $d1, $d2, $d3, $d4;
        double[] r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $i0 = lengthof r1;

        $d3 = (double) $i0;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d1, d0, $d2, $d3);

        return $d4;
    }

    public double t(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d3 = (double) $l0;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>($d1, d0, $d2, $d3);

        return $d4;
    }

    public double homoscedasticT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r2);

        $d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r2);

        $i0 = lengthof r1;

        $d5 = (double) $i0;

        $i1 = lengthof r2;

        $d4 = (double) $i1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d5, $d4);

        return $d6;
    }

    public double t(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r2);

        $d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r2);

        $i0 = lengthof r1;

        $d5 = (double) $i0;

        $i1 = lengthof r2;

        $d4 = (double) $i1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d5, $d4);

        return $d6;
    }

    public double t(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r2);

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d3 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d4 = (double) $l0;

        $l1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d5 = (double) $l1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $d6;
    }

    public double homoscedasticT(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r2);

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d3 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d4 = (double) $l0;

        $l1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d5 = (double) $l1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $d6;
    }

    public double tTest(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, $d1, $d2, $d3, $d4;
        double[] r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $i0 = lengthof r1;

        $d3 = (double) $i0;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>($d1, d0, $d2, $d3);

        return $d4;
    }

    public boolean tTest(double, double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, $d2;
        double[] r1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double[])>(d0, r1);

        $b0 = $d2 cmpg d1;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d3 = (double) $l0;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double)>($d1, d0, $d2, $d3);

        return $d4;
    }

    public boolean tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, $d2;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(d0, r1);

        $b0 = $d2 cmpg d1;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double tTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r2);

        $d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r2);

        $i0 = lengthof r1;

        $d5 = (double) $i0;

        $i1 = lengthof r2;

        $d4 = (double) $i1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d5, $d4);

        return $d6;
    }

    public double homoscedasticTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(double[])>(r2);

        $d0 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r1);

        $d1 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double mean(double[])>(r2);

        $d2 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r1);

        $d3 = staticinvoke <org.apache.commons.math3.stat.StatUtils: double variance(double[])>(r2);

        $i0 = lengthof r1;

        $d5 = (double) $i0;

        $i1 = lengthof r2;

        $d4 = (double) $i1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d5, $d4);

        return $d6;
    }

    public boolean tTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double[],double[])>(r1, r2);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean homoscedasticTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1, r2;
        double d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double[],double[])>(r1, r2);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r2);

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d3 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d4 = (double) $l0;

        $l1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d5 = (double) $l1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $d6;
    }

    public double homoscedasticTTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l1;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r2);

        $d0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getMean()>();

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $d3 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: double getVariance()>();

        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d4 = (double) $l0;

        $l1 = interfaceinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $d5 = (double) $l1;

        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $d6;
    }

    public boolean tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1, r2;
        double d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r2 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.TTest: void checkSignificanceLevel(double)>(d0);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r1, r2);

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected double df(double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = d0 / d2;

        $d4 = d1 / d3;

        $d9 = $d5 + $d4;

        $d7 = d0 / d2;

        $d6 = d1 / d3;

        $d8 = $d7 + $d6;

        $d21 = $d9 * $d8;

        $d13 = d0 * d0;

        $d11 = d2 * d2;

        $d10 = d2 - 1.0;

        $d12 = $d11 * $d10;

        $d19 = $d13 / $d12;

        $d17 = d1 * d1;

        $d15 = d3 * d3;

        $d14 = d3 - 1.0;

        $d16 = $d15 * $d14;

        $d18 = $d17 / $d16;

        $d20 = $d19 + $d18;

        $d22 = $d21 / $d20;

        return $d22;
    }

    protected double t(double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = d0 - d1;

        $d4 = d2 / d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        $d7 = $d5 / $d6;

        return $d7;
    }

    protected double t(double, double, double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d9 = d0 - d1;

        $d7 = d2 / d4;

        $d6 = d3 / d5;

        $d8 = $d7 + $d6;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d8);

        $d11 = $d9 / $d10;

        return $d11;
    }

    protected double homoscedasticT(double, double, double, double, double, double)
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d7 = d4 - 1.0;

        $d10 = $d7 * d2;

        $d8 = d5 - 1.0;

        $d9 = $d8 * d3;

        $d13 = $d10 + $d9;

        $d11 = d4 + d5;

        $d12 = $d11 - 2.0;

        d6 = $d13 / $d12;

        $d18 = d0 - d1;

        $d15 = 1.0 / d4;

        $d14 = 1.0 / d5;

        $d16 = $d15 + $d14;

        $d17 = d6 * $d16;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d17);

        $d20 = $d18 / $d19;

        return $d20;
    }

    protected double tTest(double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9;
        org.apache.commons.math3.distribution.TDistribution $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double)>(d0, d1, d2, d3);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $r2 = new org.apache.commons.math3.distribution.TDistribution;

        $d6 = d3 - 1.0;

        specialinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d6);

        $d7 = neg d4;

        $d8 = virtualinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d7);

        $d9 = 2.0 * $d8;

        return $d9;
    }

    protected double tTest(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11;
        org.apache.commons.math3.distribution.TDistribution $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double t(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        d7 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double df(double,double,double,double)>(d2, d3, d4, d5);

        $r2 = new org.apache.commons.math3.distribution.TDistribution;

        specialinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, d7);

        $d9 = neg d6;

        $d10 = virtualinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d9);

        $d11 = 2.0 * $d10;

        return $d11;
    }

    protected double homoscedasticTTest(double, double, double, double, double, double) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12;
        org.apache.commons.math3.distribution.TDistribution $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $d9 = d4 + d5;

        d7 = $d9 - 2.0;

        $r2 = new org.apache.commons.math3.distribution.TDistribution;

        specialinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, d7);

        $d10 = neg d6;

        $d11 = virtualinvoke $r2.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d10);

        $d12 = 2.0 * $d11;

        return $d12;
    }

    private void checkSignificanceLevel(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double d0;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIGNIFICANCE_LEVEL>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }

    private void checkSampleData(double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        double[] r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;
        org.apache.commons.math3.exception.NullArgumentException $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA_FOR_T_STATISTIC>;

        $i1 = lengthof r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label2:
        return;
    }

    private void checkSampleData(org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.inference.TTest r0;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r1;
        long $l0, $l2;
        byte $b1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Long $r4;
        java.lang.Integer $r5;
        org.apache.commons.math3.exception.NullArgumentException $r6;

        r0 := @this: org.apache.commons.math3.stat.inference.TTest;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        if r1 != null goto label1;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label1:
        $l0 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $b1 = $l0 cmp 2L;

        if $b1 >= 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DATA_FOR_T_STATISTIC>;

        $l2 = interfaceinvoke r1.<org.apache.commons.math3.stat.descriptive.StatisticalSummary: long getN()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label2:
        return;
    }
}
