public class org.apache.commons.lang.builder.ReflectionToStringBuilder extends org.apache.commons.lang.builder.ToStringBuilder
{
    private boolean appendStatics;
    private boolean appendTransients;
    private java.lang.String[] excludeFieldNames;
    private java.lang.Class upToClass;

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)>(r0, null, 0, 0, null);

        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)
    {
        java.lang.Object r0;
        org.apache.commons.lang.builder.ToStringStyle r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)>(r0, r1, 0, 0, null);

        return $r2;
    }

    public static java.lang.String toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean)
    {
        java.lang.Object r0;
        org.apache.commons.lang.builder.ToStringStyle r1;
        boolean z0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)>(r0, r1, z0, 0, null);

        return $r2;
    }

    public static java.lang.String toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, boolean)
    {
        java.lang.Object r0;
        org.apache.commons.lang.builder.ToStringStyle r1;
        boolean z0, z1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,boolean,boolean,java.lang.Class)>(r0, r1, z0, z1, null);

        return $r2;
    }

    public static java.lang.String toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, boolean, java.lang.Class)
    {
        java.lang.Object r0;
        org.apache.commons.lang.builder.ToStringStyle r1;
        boolean z0, z1;
        java.lang.Class r2;
        org.apache.commons.lang.builder.ReflectionToStringBuilder $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: java.lang.Class;

        $r3 = new org.apache.commons.lang.builder.ReflectionToStringBuilder;

        specialinvoke $r3.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)>(r0, r1, null, r2, z0, z1);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, java.lang.Class)
    {
        java.lang.Object r0;
        org.apache.commons.lang.builder.ToStringStyle r1;
        boolean z0;
        java.lang.Class r2;
        org.apache.commons.lang.builder.ReflectionToStringBuilder $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Class;

        $r3 = new org.apache.commons.lang.builder.ReflectionToStringBuilder;

        specialinvoke $r3.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean)>(r0, r1, null, r2, z0);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String toStringExclude(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toStringExclude(java.lang.Object,java.lang.String[])>(r0, $r2);

        return $r3;
    }

    public static java.lang.String toStringExclude(java.lang.Object, java.util.Collection)
    {
        java.lang.Object r0;
        java.util.Collection r1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.util.Collection)>(r1);

        $r3 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toStringExclude(java.lang.Object,java.lang.String[])>(r0, $r2);

        return $r3;
    }

    static java.lang.String[] toNoNullStringArray(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.Object[] $r1;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.lang.Object[])>($r1);

        return $r2;
    }

    static java.lang.String[] toNoNullStringArray(java.lang.Object[])
    {
        java.lang.Object[] r0, $r5;
        java.lang.Object r2;
        java.util.ArrayList $r3;
        int $i0, $i1, i2;
        java.lang.String[] $r4, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.lang.Object[];

        $r3 = new java.util.ArrayList;

        $i0 = lengthof r0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        r2 = r0[i2];

        if r2 == null goto label2;

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public static java.lang.String toStringExclude(java.lang.Object, java.lang.String[])
    {
        java.lang.Object r0;
        java.lang.String[] r1;
        org.apache.commons.lang.builder.ReflectionToStringBuilder $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String[];

        $r2 = new org.apache.commons.lang.builder.ReflectionToStringBuilder;

        specialinvoke $r2.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void <init>(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.commons.lang.builder.ReflectionToStringBuilder: org.apache.commons.lang.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])>(r1);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void <init>(java.lang.Object)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = null;

        return;
    }

    public void <init>(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;
        org.apache.commons.lang.builder.ToStringStyle r2;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)>(r1, r2);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = null;

        return;
    }

    public void <init>(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;
        org.apache.commons.lang.builder.ToStringStyle r2;
        java.lang.StringBuffer r3;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        r3 := @parameter2: java.lang.StringBuffer;

        specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)>(r1, r2, r3);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = null;

        return;
    }

    public void <init>(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;
        org.apache.commons.lang.builder.ToStringStyle r2;
        java.lang.StringBuffer r3;
        java.lang.Class r4;
        boolean z0;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        r3 := @parameter2: java.lang.StringBuffer;

        r4 := @parameter3: java.lang.Class;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)>(r1, r2, r3);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = null;

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void setUpToClass(java.lang.Class)>(r4);

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void setAppendTransients(boolean)>(z0);

        return;
    }

    public void <init>(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean, boolean)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;
        org.apache.commons.lang.builder.ToStringStyle r2;
        java.lang.StringBuffer r3;
        java.lang.Class r4;
        boolean z0, z1;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.commons.lang.builder.ToStringStyle;

        r3 := @parameter2: java.lang.StringBuffer;

        r4 := @parameter3: java.lang.Class;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle,java.lang.StringBuffer)>(r1, r2, r3);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = 0;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = null;

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void setUpToClass(java.lang.Class)>(r4);

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void setAppendTransients(boolean)>(z0);

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void setAppendStatics(boolean)>(z1);

        return;
    }

    protected boolean accept(java.lang.reflect.Field)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.reflect.Field r1;
        java.lang.String $r2, $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r3, $r4;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(36);

        if $i0 == -1 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1);

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean isAppendTransients()>();

        if $z3 != 0 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean isAppendStatics()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r3 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] getExcludeFieldNames()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] getExcludeFieldNames()>();

        $r5 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $i3 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r4, $r5);

        if $i3 < 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    protected void appendFieldsIn(java.lang.Class)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        java.lang.reflect.Field r3;
        java.lang.String r4, $r12, $r14;
        boolean $z0, $z1;
        int $i0, i1;
        java.lang.Object $r6, r15;
        java.lang.IllegalAccessException $r8;
        java.lang.InternalError $r9;
        java.lang.StringBuffer $r10, $r11, $r13;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getObject()>();

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder reflectionAppendArray(java.lang.Object)>($r6);

        return;

     label1:
        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(r2, 1);

        i1 = 0;

     label2:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label7;

        r3 = r2[i1];

        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean accept(java.lang.reflect.Field)>(r3);

        if $z1 == 0 goto label6;

     label3:
        r15 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getValue(java.lang.reflect.Field)>(r3);

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>(r4, r15);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.InternalError;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected IllegalAccessException: ");

        $r12 = virtualinvoke $r8.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.InternalError: void <init>(java.lang.String)>($r14);

        throw $r9;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        return;

        catch java.lang.IllegalAccessException from label3 to label4 with label5;
    }

    public java.lang.String[] getExcludeFieldNames()
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        $r1 = r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] excludeFieldNames>;

        return $r1;
    }

    public java.lang.Class getUpToClass()
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        $r1 = r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass>;

        return $r1;
    }

    protected java.lang.Object getValue(java.lang.reflect.Field) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.reflect.Field r1;
        java.lang.Object $r2, $r3;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getObject()>();

        $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r2);

        return $r3;
    }

    public boolean isAppendStatics()
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        $z0 = r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics>;

        return $z0;
    }

    public boolean isAppendTransients()
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        $z0 = r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients>;

        return $z0;
    }

    public org.apache.commons.lang.builder.ToStringBuilder reflectionAppendArray(java.lang.Object)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object r1;
        org.apache.commons.lang.builder.ToStringStyle $r2;
        java.lang.StringBuffer $r3;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: org.apache.commons.lang.builder.ToStringStyle getStyle()>();

        $r3 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.StringBuffer getStringBuffer()>();

        virtualinvoke $r2.<org.apache.commons.lang.builder.ToStringStyle: void reflectionAppendArrayDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)>($r3, null, r1);

        return r0;
    }

    public void setAppendStatics(boolean)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        boolean z0;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendStatics> = z0;

        return;
    }

    public void setAppendTransients(boolean)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        boolean z0;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: boolean appendTransients> = z0;

        return;
    }

    public org.apache.commons.lang.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.String[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] excludeFieldNames> = null;

        goto label2;

     label1:
        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.lang.Object[])>(r1);

        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] excludeFieldNames> = $r2;

        $r3 = r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] excludeFieldNames>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r3);

     label2:
        return r0;
    }

    public void setUpToClass(java.lang.Class)
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Class r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        r1 := @parameter0: java.lang.Class;

        if r1 == null goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getObject()>();

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified class is not a superclass of the object");

        throw $r3;

     label1:
        r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class upToClass> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.builder.ReflectionToStringBuilder r0;
        java.lang.Object $r1, $r2;
        java.lang.Class $r3, $r5, r8;
        java.lang.String $r4, $r7;
        org.apache.commons.lang.builder.ToStringStyle $r6;

        r0 := @this: org.apache.commons.lang.builder.ReflectionToStringBuilder;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getObject()>();

        if $r1 != null goto label1;

        $r6 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: org.apache.commons.lang.builder.ToStringStyle getStyle()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.lang.builder.ToStringStyle: java.lang.String getNullText()>();

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Object getObject()>();

        r8 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void appendFieldsIn(java.lang.Class)>(r8);

     label2:
        $r3 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r3 == null goto label3;

        $r5 = virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.Class getUpToClass()>();

        if r8 == $r5 goto label3;

        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        virtualinvoke r0.<org.apache.commons.lang.builder.ReflectionToStringBuilder: void appendFieldsIn(java.lang.Class)>(r8);

        goto label2;

     label3:
        $r4 = specialinvoke r0.<org.apache.commons.lang.builder.ToStringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
