public class com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator extends com.opengamma.analytics.financial.schedule.Schedule
{

    public void <init>()
    {
        com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator;

        specialinvoke r0.<com.opengamma.analytics.financial.schedule.Schedule: void <init>()>();

        return;
    }

    public org.threeten.bp.LocalDate[] getSchedule(org.threeten.bp.LocalDate, org.threeten.bp.LocalDate, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator r0;
        org.threeten.bp.LocalDate r1, r2, r18, $r19, r20, $r21;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        java.util.ArrayList $r6;
        org.threeten.bp.LocalDate[] $r7, $r9, $r12, $r14, $r17;
        java.lang.Object[] $r8, $r13;
        int $i0, $i1, i2, i3;
        org.threeten.bp.Period $r10, $r11, $r15, $r16;

        r0 := @this: com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        r2 := @parameter1: org.threeten.bp.LocalDate;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z2 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "start date must not be after end date");

        $z3 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label01;

        $r17 = newarray (org.threeten.bp.LocalDate)[1];

        $r17[0] = r1;

        return $r17;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        if z0 == 0 goto label06;

        r18 = r2;

        i2 = 1;

     label02:
        $z6 = virtualinvoke r18.<org.threeten.bp.LocalDate: boolean isBefore(org.threeten.bp.chrono.ChronoLocalDate)>(r1);

        if $z6 != 0 goto label05;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r18);

        if z1 == 0 goto label03;

        $r16 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>(1);

        $r19 = virtualinvoke r18.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minus(org.threeten.bp.temporal.TemporalAmount)>($r16);

        goto label04;

     label03:
        $i1 = i2;

        i2 = i2 + 1;

        $r15 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>($i1);

        $r19 = virtualinvoke r2.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minus(org.threeten.bp.temporal.TemporalAmount)>($r15);

     label04:
        r18 = $r19;

        goto label02;

     label05:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6);

        $r12 = <com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator: org.threeten.bp.LocalDate[] EMPTY_LOCAL_DATE_ARRAY>;

        $r13 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.threeten.bp.LocalDate[]) $r13;

        return $r14;

     label06:
        r20 = r1;

        i3 = 1;

     label07:
        $z4 = virtualinvoke r20.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        if $z4 != 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r20);

        if z1 == 0 goto label08;

        $r11 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>(1);

        $r21 = virtualinvoke r20.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plus(org.threeten.bp.temporal.TemporalAmount)>($r11);

        goto label09;

     label08:
        $i0 = i3;

        i3 = i3 + 1;

        $r10 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>($i0);

        $r21 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plus(org.threeten.bp.temporal.TemporalAmount)>($r10);

     label09:
        r20 = $r21;

        goto label07;

     label10:
        $r7 = <com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator: org.threeten.bp.LocalDate[] EMPTY_LOCAL_DATE_ARRAY>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.threeten.bp.LocalDate[]) $r8;

        return $r9;
    }

    public org.threeten.bp.ZonedDateTime[] getSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator r0;
        org.threeten.bp.ZonedDateTime r1, r2, r18, $r19, r20, $r21;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        java.util.ArrayList $r6;
        org.threeten.bp.ZonedDateTime[] $r7, $r9, $r12, $r14, $r17;
        java.lang.Object[] $r8, $r13;
        int $i0, $i1, i2, i3;
        org.threeten.bp.Period $r10, $r11, $r15, $r16;

        r0 := @this: com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator;

        r1 := @parameter0: org.threeten.bp.ZonedDateTime;

        r2 := @parameter1: org.threeten.bp.ZonedDateTime;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z2 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "start date must not be after end date");

        $z3 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label01;

        $r17 = newarray (org.threeten.bp.ZonedDateTime)[1];

        $r17[0] = r1;

        return $r17;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        if z0 == 0 goto label06;

        r18 = r2;

        i2 = 1;

     label02:
        $z6 = virtualinvoke r18.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z6 != 0 goto label05;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r18);

        if z1 == 0 goto label03;

        $r16 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>(1);

        $r19 = virtualinvoke r18.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minus(org.threeten.bp.temporal.TemporalAmount)>($r16);

        goto label04;

     label03:
        $i1 = i2;

        i2 = i2 + 1;

        $r15 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>($i1);

        $r19 = virtualinvoke r2.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minus(org.threeten.bp.temporal.TemporalAmount)>($r15);

     label04:
        r18 = $r19;

        goto label02;

     label05:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6);

        $r12 = <com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ZONED_DATE_TIME_ARRAY>;

        $r13 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.threeten.bp.ZonedDateTime[]) $r13;

        return $r14;

     label06:
        r20 = r1;

        i3 = 1;

     label07:
        $z4 = virtualinvoke r20.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z4 != 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r20);

        if z1 == 0 goto label08;

        $r11 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>(1);

        $r21 = virtualinvoke r20.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>($r11);

        goto label09;

     label08:
        $i0 = i3;

        i3 = i3 + 1;

        $r10 = staticinvoke <org.threeten.bp.Period: org.threeten.bp.Period ofYears(int)>($i0);

        $r21 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plus(org.threeten.bp.temporal.TemporalAmount)>($r10);

     label09:
        r20 = $r21;

        goto label07;

     label10:
        $r7 = <com.opengamma.analytics.financial.schedule.AnnualScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ZONED_DATE_TIME_ARRAY>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.threeten.bp.ZonedDateTime[]) $r8;

        return $r9;
    }
}
