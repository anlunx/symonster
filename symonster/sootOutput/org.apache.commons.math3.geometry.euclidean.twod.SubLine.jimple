public class org.apache.commons.math3.geometry.euclidean.twod.SubLine extends org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane
{
    private static final double DEFAULT_TOLERANCE;

    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, r2;
        double d0;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r1, r2, d0);

        $r4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r1, r2, d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r3, $r4);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r1, r2, 1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Segment)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Segment r1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r2, $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r3, $r4;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getTolerance()>();

        $r6 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r3, $r4, $d0);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r2, $r6);

        return;
    }

    public java.util.List getSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.euclidean.twod.Line r1;
        java.util.List r2;
        java.util.Iterator r4;
        org.apache.commons.math3.geometry.euclidean.oned.Interval r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r6, r7;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r8;
        org.apache.commons.math3.geometry.partitioning.Region $r9;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r10;
        java.util.ArrayList $r11;
        int $i0;
        boolean $z0;
        java.lang.Object $r12;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r13, $r14;
        double $d0, $d1;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r15;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r1 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r8;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r10 = (org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet) $r9;

        r2 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: java.util.List asList()>();

        $r11 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.geometry.euclidean.oned.Interval) $r12;

        $r13 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d0 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getInf()>();

        specialinvoke $r13.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r13);

        $r14 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.oned.Interval: double getSup()>();

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d1);

        r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r14);

        $r15 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r6, r7, r1);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        return $r11;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0, r1;
        boolean z0;
        org.apache.commons.math3.geometry.euclidean.twod.Line r2, r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r4, $r17, $r18;
        org.apache.commons.math3.geometry.partitioning.Region$Location r5, r6, $r13, $r14, $r15, $r16;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r7, $r8;
        org.apache.commons.math3.geometry.partitioning.Region $r9, $r11;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r10, $r12;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        z0 := @parameter1: boolean;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r7;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r8;

        r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        if r4 != null goto label1;

        return null;

     label1:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r10 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r4);

        r5 = interfaceinvoke $r9.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r10);

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r4);

        r6 = interfaceinvoke $r11.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>($r12);

        if z0 == 0 goto label4;

        $r15 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if r5 == $r15 goto label2;

        $r16 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if r6 == $r16 goto label2;

        $r17 = r4;

        goto label3;

     label2:
        $r17 = null;

     label3:
        return $r17;

     label4:
        $r13 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if r5 != $r13 goto label5;

        $r14 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if r6 != $r14 goto label5;

        $r18 = r4;

        goto label6;

     label5:
        $r18 = null;

     label6:
        return $r18;
    }

    private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r0, r1;
        double d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r3;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r5, $r6;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        d0 := @parameter2: double;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r0, r1, d0);

        $r4 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r0);

        $d1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r6 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $d2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double,double,double)>($d1, $d2, d0);

        return $r4;
    }

    protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r3 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r6;
        org.apache.commons.math3.geometry.euclidean.twod.Line r2, r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r4;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r5;
        double $d0, $d1, $d2, $d3, $d4, d5;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.geometry.partitioning.Region $r7;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r8;
        org.apache.commons.math3.geometry.partitioning.Side $r9, $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r6;

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        if r4 != null goto label4;

        d5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $b1 = d5 cmpg -1.0E-10;

        if $b1 >= 0 goto label1;

        $r10 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label3;

     label1:
        $b2 = d5 cmpl 1.0E-10;

        if $b2 <= 0 goto label2;

        $r10 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label3;

     label2:
        $r10 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label3:
        return $r10;

     label4:
        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $b0 = $d3 cmpg 0.0;

        if $b0 >= 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r4);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r8 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        $d4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getTolerance()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>(r5, $z0, $d4);

        $r9 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r8);

        return $r9;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r0, $r27, $r30;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r11;
        org.apache.commons.math3.geometry.euclidean.twod.Line r2, r3, $r28, $r31;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r4;
        double d0, $d1, $d2, $d3, $d4, d5;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D r5;
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r6, r7;
        org.apache.commons.math3.geometry.partitioning.BSPTree r8, r9, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r37, $r38;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r12, $r13;
        org.apache.commons.math3.geometry.partitioning.Region $r14, $r16, $r21;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.Boolean $r19, $r24, $r33, $r34;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r26, $r36;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r29, $r32;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Line) $r11;

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Line) r1;

        r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r3);

        d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getTolerance()>();

        if r4 != null goto label03;

        d5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2);

        $b1 = d5 cmpg -1.0E-10;

        if $b1 >= 0 goto label01;

        $r36 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r36.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, r0);

        goto label02;

     label01:
        $r36 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r36.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, null);

     label02:
        return $r36;

     label03:
        $d1 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d2 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d3 = $d1 - $d2;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d3);

        $b0 = $d4 cmpg 0.0;

        if $b0 >= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z3 = $z2;

        r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r4);

        $r12 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        if $z2 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>(r5, $z4, d0);

        r6 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r13 = new org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;

        specialinvoke $r13.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: void <init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)>(r5, z3, d0);

        r7 = virtualinvoke $r13.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()>();

        $r14 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r15 = interfaceinvoke $r14.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r8 = virtualinvoke $r15.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r7);

        $r16 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r17 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = interfaceinvoke $r16.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r17);

        if $z0 == 0 goto label08;

        $r37 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r34 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r37.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r34);

        goto label09;

     label08:
        $r37 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r18 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r19);

        $r20 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke $r37.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r6, $r18, $r20, null);

     label09:
        r9 = $r37;

        $r21 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r22 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z1 = interfaceinvoke $r21.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r22);

        if $z1 == 0 goto label10;

        $r38 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r33 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r38.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r33);

        goto label11;

     label10:
        $r38 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r23 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r24 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r23.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r24);

        $r25 = virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke $r38.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r7, $r23, $r25, null);

     label11:
        $r26 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        $r27 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r28 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()>();

        $r29 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke $r29.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r9, d0);

        specialinvoke $r27.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r28, $r29);

        $r30 = new org.apache.commons.math3.geometry.euclidean.twod.SubLine;

        $r31 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()>();

        $r32 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        specialinvoke $r32.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r38, d0);

        specialinvoke $r30.<org.apache.commons.math3.geometry.euclidean.twod.SubLine: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r31, $r32);

        specialinvoke $r26.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r27, $r30);

        return $r26;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.twod.SubLine: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
