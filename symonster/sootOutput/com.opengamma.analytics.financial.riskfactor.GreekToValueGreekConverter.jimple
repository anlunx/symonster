public class com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter extends com.opengamma.analytics.math.function.Function1D
{

    public void <init>()
    {
        com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter r0;

        r0 := @this: com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.util.Map evaluate(com.opengamma.analytics.financial.riskfactor.GreekDataBundle)
    {
        com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter r0;
        com.opengamma.analytics.financial.riskfactor.GreekDataBundle r1;
        com.opengamma.analytics.financial.greeks.GreekResultCollection r2;
        java.util.Map r4;
        com.opengamma.analytics.financial.trade.OptionTradeData r5;
        java.util.Iterator r6;
        com.opengamma.util.tuple.Pair r7;
        com.opengamma.analytics.financial.greeks.Greek r8;
        java.lang.Double r9, $r16;
        java.util.HashMap $r11;
        boolean $z0;
        java.lang.Object $r12, $r13, $r14;
        com.opengamma.analytics.financial.sensitivity.ValueGreek $r15;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter;

        r1 := @parameter0: com.opengamma.analytics.financial.riskfactor.GreekDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        r2 = virtualinvoke r1.<com.opengamma.analytics.financial.riskfactor.GreekDataBundle: com.opengamma.analytics.financial.greeks.GreekResultCollection getGreekResults()>();

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.riskfactor.GreekDataBundle: java.util.Map getUnderlyingData()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.financial.riskfactor.GreekDataBundle: com.opengamma.analytics.financial.trade.OptionTradeData getOptionTradeData()>();

        r6 = virtualinvoke r2.<com.opengamma.analytics.financial.greeks.GreekResultCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.opengamma.util.tuple.Pair) $r12;

        $r13 = virtualinvoke r7.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r8 = (com.opengamma.analytics.financial.greeks.Greek) $r13;

        $r14 = virtualinvoke r7.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        r9 = (java.lang.Double) $r14;

        $r15 = new com.opengamma.analytics.financial.sensitivity.ValueGreek;

        specialinvoke $r15.<com.opengamma.analytics.financial.sensitivity.ValueGreek: void <init>(com.opengamma.analytics.financial.greeks.Greek)>(r8);

        $d0 = virtualinvoke r9.<java.lang.Double: double doubleValue()>();

        $r16 = specialinvoke r0.<com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter: java.lang.Double getValueGreek(com.opengamma.analytics.financial.greeks.Greek,double,java.util.Map,com.opengamma.analytics.financial.trade.OptionTradeData)>(r8, $d0, r4, r5);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        goto label1;

     label2:
        return $r11;
    }

    private java.lang.Double getValueGreek(com.opengamma.analytics.financial.greeks.Greek, double, java.util.Map, com.opengamma.analytics.financial.trade.OptionTradeData)
    {
        com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter r0;
        com.opengamma.analytics.financial.greeks.Greek r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.util.Map r2;
        com.opengamma.analytics.financial.trade.OptionTradeData r3;
        com.opengamma.analytics.financial.greeks.Underlying r4;
        java.lang.Double $r5;

        r0 := @this: com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter;

        r1 := @parameter0: com.opengamma.analytics.financial.greeks.Greek;

        d0 := @parameter1: double;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: com.opengamma.analytics.financial.trade.OptionTradeData;

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Underlying getUnderlying()>();

        $d1 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getValue(java.util.Map,com.opengamma.analytics.financial.greeks.Underlying)>(r2, r4);

        $d2 = $d1 * d0;

        $d3 = virtualinvoke r3.<com.opengamma.analytics.financial.trade.OptionTradeData: double getNumberOfContracts()>();

        $d4 = $d2 * $d3;

        $d5 = virtualinvoke r3.<com.opengamma.analytics.financial.trade.OptionTradeData: double getPointValue()>();

        $d6 = $d4 * $d5;

        $d7 = staticinvoke <com.opengamma.analytics.financial.riskfactor.TaylorExpansionMultiplierCalculator: double getMultiplier(com.opengamma.analytics.financial.greeks.Underlying)>(r4);

        $d8 = $d6 / $d7;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        return $r5;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter r0;
        java.lang.Object r1;
        com.opengamma.analytics.financial.riskfactor.GreekDataBundle $r2;
        java.util.Map $r3;

        r0 := @this: com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.financial.riskfactor.GreekDataBundle) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.riskfactor.GreekToValueGreekConverter: java.util.Map evaluate(com.opengamma.analytics.financial.riskfactor.GreekDataBundle)>($r2);

        return $r3;
    }
}
