public class com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference r0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double[] curveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle, double, java.lang.String, java.lang.String, double[], double, com.opengamma.analytics.financial.interestrate.method.PricingMethod, com.opengamma.analytics.math.differentiation.FiniteDifferenceType)
    {
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r0;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21;
        java.lang.String r2, r3;
        double[] r4, r7, r9, r10;
        com.opengamma.analytics.financial.interestrate.method.PricingMethod r5;
        com.opengamma.analytics.math.differentiation.FiniteDifferenceType r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r8, r23, r24, r25, r26;
        java.lang.Double $r11, $r21;
        com.opengamma.analytics.math.interpolation.LinearInterpolator1D $r12;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve $r13;
        java.lang.Boolean $r14;
        boolean $z0;
        int[] $r15;
        com.opengamma.util.money.CurrencyAmount $r16, $r17, $r18, $r19;
        java.lang.IllegalArgumentException $r20;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r22;

        r0 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        d0 := @parameter2: double;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: double[];

        d1 := @parameter6: double;

        r5 := @parameter7: com.opengamma.analytics.financial.interestrate.method.PricingMethod;

        r6 := @parameter8: com.opengamma.analytics.math.differentiation.FiniteDifferenceType;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "Instrument");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Curves");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "Method");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r6, "Difference type");

        i0 = lengthof r4;

        r7 = newarray (double)[i0];

        r8 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r2);

        $i1 = i0 + 1;

        r9 = newarray (double)[$i1];

        $i2 = i0 + 1;

        r10 = newarray (double)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r10, 1, i0);

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $d4 = virtualinvoke r8.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getInterestRate(java.lang.Object)>($r11);

        r9[0] = $d4;

        i11 = 0;

     label01:
        if i11 >= i0 goto label02;

        $i10 = i11 + 1;

        $i9 = i11 + 1;

        $d18 = r10[$i9];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        $d19 = virtualinvoke r8.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getInterestRate(java.lang.Object)>($r21);

        r9[$i10] = $d19;

        i11 = i11 + 1;

        goto label01;

     label02:
        $r12 = new com.opengamma.analytics.math.interpolation.LinearInterpolator1D;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.LinearInterpolator1D: void <init>()>();

        $r13 = staticinvoke <com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.curve.InterpolatedDoublesCurve fromSorted(double[],double[],com.opengamma.analytics.math.interpolation.Interpolator1D)>(r10, r9, $r12);

        r22 = staticinvoke <com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve 'from'(com.opengamma.analytics.math.curve.DoublesCurve)>($r13);

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.lang.Boolean containsName(java.lang.String)>(r3);

        $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label03;

        virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void setCurve(java.lang.String,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r3, r8);

     label03:
        $r15 = <com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference$1: int[] $SwitchMap$com$opengamma$analytics$math$differentiation$FiniteDifferenceType>;

        $i3 = virtualinvoke r6.<com.opengamma.analytics.math.differentiation.FiniteDifferenceType: int ordinal()>();

        $i4 = $r15[$i3];

        tableswitch($i4)
        {
            case 1: goto label04;
            case 2: goto label07;
            case 3: goto label10;
            default: goto label13;
        };

     label04:
        i12 = 0;

     label05:
        if i12 >= i0 goto label06;

        $i5 = i12 + 1;

        $d5 = r10[$i5];

        r23 = virtualinvoke r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve withSingleShift(double,double)>($d5, d1);

        virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void replaceCurve(java.lang.String,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r3, r23);

        $r16 = interfaceinvoke r5.<com.opengamma.analytics.financial.interestrate.method.PricingMethod: com.opengamma.util.money.CurrencyAmount presentValue(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r0, r1);

        d20 = virtualinvoke $r16.<com.opengamma.util.money.CurrencyAmount: double getAmount()>();

        $d6 = d20 - d0;

        $d7 = $d6 / d1;

        r7[i12] = $d7;

        i12 = i12 + 1;

        goto label05;

     label06:
        return r7;

     label07:
        i13 = 0;

     label08:
        if i13 >= i0 goto label09;

        $i7 = i13 + 1;

        $d12 = r10[$i7];

        r24 = virtualinvoke r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve withSingleShift(double,double)>($d12, d1);

        $i8 = i13 + 1;

        $d14 = r10[$i8];

        $d13 = neg d1;

        r25 = virtualinvoke r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve withSingleShift(double,double)>($d14, $d13);

        virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void replaceCurve(java.lang.String,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r3, r24);

        $r18 = interfaceinvoke r5.<com.opengamma.analytics.financial.interestrate.method.PricingMethod: com.opengamma.util.money.CurrencyAmount presentValue(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r0, r1);

        d2 = virtualinvoke $r18.<com.opengamma.util.money.CurrencyAmount: double getAmount()>();

        virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void replaceCurve(java.lang.String,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r3, r25);

        $r19 = interfaceinvoke r5.<com.opengamma.analytics.financial.interestrate.method.PricingMethod: com.opengamma.util.money.CurrencyAmount presentValue(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r0, r1);

        d3 = virtualinvoke $r19.<com.opengamma.util.money.CurrencyAmount: double getAmount()>();

        $d16 = d2 - d3;

        $d15 = 2.0 * d1;

        $d17 = $d16 / $d15;

        r7[i13] = $d17;

        i13 = i13 + 1;

        goto label08;

     label09:
        return r7;

     label10:
        i14 = 0;

     label11:
        if i14 >= i0 goto label12;

        $i6 = i14 + 1;

        $d9 = r10[$i6];

        $d8 = neg d1;

        r26 = virtualinvoke r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve withSingleShift(double,double)>($d9, $d8);

        virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void replaceCurve(java.lang.String,com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)>(r3, r26);

        $r17 = interfaceinvoke r5.<com.opengamma.analytics.financial.interestrate.method.PricingMethod: com.opengamma.util.money.CurrencyAmount presentValue(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r0, r1);

        d21 = virtualinvoke $r17.<com.opengamma.util.money.CurrencyAmount: double getAmount()>();

        $d10 = d0 - d21;

        $d11 = $d10 / d1;

        r7[i14] = $d11;

        i14 = i14 + 1;

        goto label11;

     label12:
        return r7;

     label13:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only handle forward, backward and central differencing");

        throw $r20;
    }

    public static double[] curveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle, double, java.lang.String, java.lang.String, double[], double, com.opengamma.analytics.financial.interestrate.method.PricingMethod)
    {
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r0;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r1;
        double d0, d1;
        java.lang.String r2, r3;
        double[] r4, $r7;
        com.opengamma.analytics.financial.interestrate.method.PricingMethod r5;
        com.opengamma.analytics.math.differentiation.FiniteDifferenceType $r6;

        r0 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        d0 := @parameter2: double;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: double[];

        d1 := @parameter6: double;

        r5 := @parameter7: com.opengamma.analytics.financial.interestrate.method.PricingMethod;

        $r6 = <com.opengamma.analytics.math.differentiation.FiniteDifferenceType: com.opengamma.analytics.math.differentiation.FiniteDifferenceType FORWARD>;

        $r7 = staticinvoke <com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference: double[] curveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle,double,java.lang.String,java.lang.String,double[],double,com.opengamma.analytics.financial.interestrate.method.PricingMethod,com.opengamma.analytics.math.differentiation.FiniteDifferenceType)>(r0, r1, d0, r2, r3, r4, d1, r5, $r6);

        return $r7;
    }

    public static double[] curveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle, java.lang.String, java.lang.String, double[], double, com.opengamma.analytics.financial.interestrate.method.PricingMethod)
    {
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r0;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r1;
        java.lang.String r2, r3;
        double[] r4, $r7;
        double d0;
        com.opengamma.analytics.financial.interestrate.method.PricingMethod r5;
        com.opengamma.analytics.math.differentiation.FiniteDifferenceType $r6;

        r0 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r1 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: double[];

        d0 := @parameter5: double;

        r5 := @parameter6: com.opengamma.analytics.financial.interestrate.method.PricingMethod;

        $r6 = <com.opengamma.analytics.math.differentiation.FiniteDifferenceType: com.opengamma.analytics.math.differentiation.FiniteDifferenceType CENTRAL>;

        $r7 = staticinvoke <com.opengamma.analytics.financial.interestrate.method.SensitivityFiniteDifference: double[] curveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative,com.opengamma.analytics.financial.interestrate.YieldCurveBundle,double,java.lang.String,java.lang.String,double[],double,com.opengamma.analytics.financial.interestrate.method.PricingMethod,com.opengamma.analytics.math.differentiation.FiniteDifferenceType)>(r0, r1, 0.0, r2, r3, r4, d0, r5, $r6);

        return $r7;
    }
}
