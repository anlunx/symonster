public class com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction extends com.opengamma.analytics.math.function.Function2D
{
    private final com.opengamma.analytics.math.function.Function1D _lnGamma;
    private static final double EPS;

    public void <init>()
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction r0;
        com.opengamma.analytics.math.function.special.NaturalLogGammaFunction $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function2D: void <init>()>();

        $r1 = new com.opengamma.analytics.math.function.special.NaturalLogGammaFunction;

        specialinvoke $r1.<com.opengamma.analytics.math.function.special.NaturalLogGammaFunction: void <init>()>();

        r0.<com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma> = $r1;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction r0;
        java.lang.Double r1, r2, $r7, $r8, $r9, $r11, $r12;
        double d0, d1, d3, d4, $d5, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, d80, d81, $d82, d83, d84, d85, d86, d87, d88;
        boolean $z0;
        com.opengamma.analytics.math.function.special.IncompleteGammaFunction $r4;
        com.opengamma.analytics.math.function.Function1D $r5;
        java.lang.Object $r6, $r10;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;
        int i8;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        $d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>($d5, "a");

        $d7 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.opengamma.util.ArgumentChecker: boolean isInRangeExclusive(double,double,double)>(0.0, 1.0, $d7);

        if $z0 != 0 goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p must lie between 0 and 1: have ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label01:
        d80 = 0.0;

        d81 = 0.0;

        $d8 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d3 = $d8 - 1.0;

        $r4 = new com.opengamma.analytics.math.function.special.IncompleteGammaFunction;

        $d9 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        specialinvoke $r4.<com.opengamma.analytics.math.function.special.IncompleteGammaFunction: void <init>(double)>($d9);

        $r5 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma>;

        $r6 = virtualinvoke $r5.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r1);

        $r7 = (java.lang.Double) $r6;

        d4 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d10 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b0 = $d10 cmpl 1.0;

        if $b0 <= 0 goto label05;

        d80 = staticinvoke <java.lang.Math: double log(double)>(d3);

        $d53 = d80 - 1.0;

        $d54 = d3 * $d53;

        $d55 = $d54 - d4;

        d81 = staticinvoke <java.lang.Math: double exp(double)>($d55);

        $d56 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b6 = $d56 cmpg 0.5;

        if $b6 >= 0 goto label02;

        $d82 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        goto label03;

     label02:
        $d57 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d82 = 1.0 - $d57;

     label03:
        $d58 = staticinvoke <java.lang.Math: double log(double)>($d82);

        $d59 = -2.0 * $d58;

        d83 = staticinvoke <java.lang.Math: double sqrt(double)>($d59);

        $d60 = d83 * 0.27061;

        $d65 = 2.30753 + $d60;

        $d61 = d83 * 0.04481;

        $d62 = 0.99229 + $d61;

        $d63 = d83 * $d62;

        $d64 = 1.0 + $d63;

        $d66 = $d65 / $d64;

        d84 = $d66 - d83;

        $d67 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b7 = $d67 cmpg 0.5;

        if $b7 >= 0 goto label04;

        d84 = neg d84;

     label04:
        $d68 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d69 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d70 = 9.0 * $d69;

        $d71 = 1.0 / $d70;

        $d72 = 1.0 - $d71;

        $d73 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d74 = staticinvoke <java.lang.Math: double sqrt(double)>($d73);

        $d75 = 3.0 * $d74;

        $d76 = d84 / $d75;

        $d77 = $d72 - $d76;

        $d78 = staticinvoke <java.lang.Math: double pow(double,double)>($d77, 3.0);

        $d79 = $d68 * $d78;

        d85 = staticinvoke <java.lang.Math: double max(double,double)>(0.001, $d79);

        goto label07;

     label05:
        $d11 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d12 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d13 = $d12 * 0.12;

        $d14 = 0.253 + $d13;

        $d15 = $d11 * $d14;

        d86 = 1.0 - $d15;

        $d16 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $b1 = $d16 cmpg d86;

        if $b1 >= 0 goto label06;

        $d49 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d50 = $d49 / d86;

        $d51 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d52 = 1.0 / $d51;

        d85 = staticinvoke <java.lang.Math: double pow(double,double)>($d50, $d52);

        goto label07;

     label06:
        $d17 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d19 = $d17 - d86;

        $d18 = 1.0 - d86;

        $d20 = $d19 / $d18;

        $d21 = 1.0 - $d20;

        $d22 = staticinvoke <java.lang.Math: double log(double)>($d21);

        d85 = 1.0 - $d22;

     label07:
        i8 = 0;

     label08:
        if i8 >= 12 goto label14;

        $b2 = d85 cmpg 0.0;

        if $b2 > 0 goto label09;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r12;

     label09:
        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d85);

        $r10 = virtualinvoke $r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r9);

        $r11 = (java.lang.Double) $r10;

        $d23 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d24 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        d0 = $d23 - $d24;

        $d25 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b3 = $d25 cmpl 1.0;

        if $b3 <= 0 goto label10;

        $d42 = d85 - d3;

        $d43 = neg $d42;

        $d44 = staticinvoke <java.lang.Math: double log(double)>(d85);

        $d45 = $d44 - d80;

        $d46 = d3 * $d45;

        $d47 = $d43 + $d46;

        $d48 = staticinvoke <java.lang.Math: double exp(double)>($d47);

        d87 = d81 * $d48;

        goto label11;

     label10:
        $d26 = neg d85;

        $d27 = staticinvoke <java.lang.Math: double log(double)>(d85);

        $d28 = d3 * $d27;

        $d29 = $d26 + $d28;

        $d30 = $d29 - d4;

        d87 = staticinvoke <java.lang.Math: double exp(double)>($d30);

     label11:
        d1 = d0 / d87;

        $d31 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d32 = $d31 - 1.0;

        $d33 = $d32 / d85;

        $d34 = $d33 - 1.0;

        $d35 = d1 * $d34;

        $d36 = staticinvoke <java.lang.Math: double min(double,double)>(1.0, $d35);

        $d37 = 0.5 * $d36;

        $d38 = 1.0 - $d37;

        d88 = d1 / $d38;

        d85 = d85 - d88;

        $b4 = d85 cmpg 0.0;

        if $b4 > 0 goto label12;

        $d41 = d85 + d88;

        d85 = 0.05 * $d41;

     label12:
        $d39 = staticinvoke <java.lang.Math: double abs(double)>(d88);

        $d40 = 1.0E-8 * d85;

        $b5 = $d39 cmpg $d40;

        if $b5 >= 0 goto label13;

        goto label14;

     label13:
        i8 = i8 + 1;

        goto label08;

     label14:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d85);

        return $r8;
    }

    public volatile java.lang.Object evaluate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction: java.lang.Double evaluate(java.lang.Double,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.function.special.InverseIncompleteGammaFunction: double EPS> = 1.0E-8;

        return;
    }
}
