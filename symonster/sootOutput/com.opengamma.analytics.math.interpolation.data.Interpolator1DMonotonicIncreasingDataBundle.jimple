public class com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle extends java.lang.Object implements com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle
{
    private final com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData;
    private final double[] _a;
    private final double[] _b;

    public void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1, $r5, $r6, $r7, $r10, $r13;
        double[] r2, r3, $r8, $r9, $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r25;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, i15, i16, i17;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40;
        java.lang.Double $r12, $r14;
        byte $b10, $b14;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "underlying data");

        r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData> = r1;

        $r5 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        r2 = interfaceinvoke $r5.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $r6 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        r3 = interfaceinvoke $r6.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $r7 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        i0 = interfaceinvoke $r7.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        i15 = 1;

     label01:
        if i15 >= i0 goto label04;

        $d40 = r3[i15];

        $i13 = i15 - 1;

        $d39 = r3[$i13];

        $b14 = $d40 cmpl $d39;

        if $b14 < 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Data not increasing");

        i15 = i15 + 1;

        goto label01;

     label04:
        r25 = newarray (double)[i0];

        $d1 = r2[0];

        r25[0] = $d1;

        i16 = 1;

     label05:
        if i16 >= i0 goto label06;

        $d37 = r2[i16];

        $i12 = i16 - 1;

        $d36 = r2[$i12];

        $d38 = $d37 - $d36;

        r25[i16] = $d38;

        i16 = i16 + 1;

        goto label05;

     label06:
        $i1 = i0 + 1;

        $r8 = newarray (double)[$i1];

        r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a> = $r8;

        $i2 = i0 + 1;

        $r9 = newarray (double)[$i2];

        r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b> = $r9;

        $r11 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $r10 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r12 = interfaceinvoke $r10.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstValue()>();

        $d2 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $r13 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r14 = interfaceinvoke $r13.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        $d3 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 / $d3;

        $r11[0] = $d4;

        i17 = 1;

     label07:
        if i17 >= i0 goto label10;

        $r20 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $r18 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $i6 = i17 - 1;

        $d14 = $r18[$i6];

        $r19 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b>;

        $i7 = i17 - 1;

        $d12 = $r19[$i7];

        $i8 = i17 - 1;

        $d11 = r25[$i8];

        $d13 = $d12 * $d11;

        $d15 = staticinvoke <java.lang.Math: double exp(double)>($d13);

        $d16 = $d14 * $d15;

        $r20[i17] = $d16;

        $d18 = r3[i17];

        $i9 = i17 - 1;

        $d17 = r3[$i9];

        $d20 = $d18 - $d17;

        $r21 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $d19 = $r21[i17];

        $d22 = $d20 / $d19;

        $d21 = r25[i17];

        $d23 = $d22 - $d21;

        $d25 = $d23 * 2.0;

        $d24 = r25[i17];

        $d27 = $d25 / $d24;

        $d26 = r25[i17];

        d0 = $d27 / $d26;

        $b10 = d0 cmpl 0.0;

        if $b10 != 0 goto label08;

        $r24 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b>;

        $r24[i17] = 0.0;

        goto label09;

     label08:
        $r23 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b>;

        $i11 = i17 - 1;

        $d29 = r3[$i11];

        $d28 = r3[i17];

        $d30 = $d29 - $d28;

        $r22 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $d31 = $r22[i17];

        $d32 = r25[i17];

        $d33 = staticinvoke <java.lang.Math: double min(double,double)>(10.0, d0);

        $d34 = staticinvoke <java.lang.Math: double max(double,double)>(-10.0, $d33);

        $d35 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double solveForB(double,double,double,double)>($d30, $d31, $d32, $d34);

        $r23[i17] = $d35;

     label09:
        i17 = i17 + 1;

        goto label07;

     label10:
        $r17 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $r15 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $i3 = i0 - 1;

        $d8 = $r15[$i3];

        $r16 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b>;

        $i4 = i0 - 1;

        $d6 = $r16[$i4];

        $i5 = i0 - 1;

        $d5 = r25[$i5];

        $d7 = $d6 * $d5;

        $d9 = staticinvoke <java.lang.Math: double exp(double)>($d7);

        $d10 = $d8 * $d9;

        $r17[i0] = $d10;

        return;
    }

    private double solveForB(double, double, double, double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        double d0, d1, d2, d3, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        byte $b0;
        com.opengamma.analytics.math.MathException $r1;
        int i1;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d8 = d1 / d3;

        $d7 = d3 * d2;

        $d9 = staticinvoke <java.lang.Math: double exp(double)>($d7);

        $d10 = $d9 - 1.0;

        $d11 = $d8 * $d10;

        d26 = d0 + $d11;

        d27 = d3;

        i1 = 0;

     label1:
        $d12 = staticinvoke <java.lang.Math: double abs(double)>(d26);

        $b0 = $d12 cmpl 1.0E-12;

        if $b0 <= 0 goto label3;

        $d13 = d27 * d2;

        d5 = staticinvoke <java.lang.Math: double exp(double)>($d13);

        $d14 = d2 * d5;

        $d18 = $d14 / d27;

        $d15 = d5 - 1.0;

        $d16 = $d15 / d27;

        $d17 = $d16 / d27;

        $d19 = $d18 - $d17;

        d6 = d1 * $d19;

        $d20 = d26 / d6;

        d27 = d27 - $d20;

        $d22 = d1 / d27;

        $d21 = d27 * d2;

        $d23 = staticinvoke <java.lang.Math: double exp(double)>($d21);

        $d24 = $d23 - 1.0;

        $d25 = $d22 * $d24;

        d26 = d0 + $d25;

        if i1 <= 50 goto label2;

        $r1 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r1.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("fail to solve for b");

        throw $r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return d27;
    }

    public boolean containsKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $z0 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: boolean containsKey(java.lang.Double)>(r1);

        return $z0;
    }

    public java.lang.Double firstKey()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstKey()>();

        return $r2;
    }

    public java.lang.Double firstValue()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double firstValue()>();

        return $r2;
    }

    public java.lang.Double get(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1, $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r3 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double get(java.lang.Double)>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r3 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r1);

        return $r3;
    }

    public double[] getKeys()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        double[] $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        return $r2;
    }

    public int getLowerBoundIndex(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1;
        double[] r2;
        int i0, $i2, $i4, i5, i6;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r3, $r4;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b1, $b3;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r3 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        r2 = interfaceinvoke $r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $r4 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        i0 = interfaceinvoke $r4.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = r2[0];

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label1;

        return 0;

     label1:
        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $i2 = i0 - 1;

        $d3 = r2[$i2];

        $b3 = $d2 cmpl $d3;

        if $b3 <= 0 goto label2;

        return i0;

     label2:
        $d4 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        i5 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r2, $d4);

        if i5 < 0 goto label3;

        return i5;

     label3:
        if i5 >= 0 goto label4;

        $i4 = i5 + 1;

        i6 = neg $i4;

        i5 = i6 + -1;

     label4:
        return i5;
    }

    public java.lang.Double getLowerBoundKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1, $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r3 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double getLowerBoundKey(java.lang.Double)>(r1);

        return $r3;
    }

    public double[] getValues()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        double[] $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        return $r2;
    }

    public java.lang.Double higherKey(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1, $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r3 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double higherKey(java.lang.Double)>(r1);

        return $r3;
    }

    public java.lang.Double higherValue(java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        java.lang.Double r1, $r3;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        r1 := @parameter0: java.lang.Double;

        $r2 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r3 = interfaceinvoke $r2.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double higherValue(java.lang.Double)>(r1);

        return $r3;
    }

    public java.lang.Double lastKey()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastKey()>();

        return $r2;
    }

    public java.lang.Double lastValue()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $r2 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: java.lang.Double lastValue()>();

        return $r2;
    }

    public int size()
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle _underlyingData>;

        $i0 = interfaceinvoke $r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        return $i0;
    }

    public void setYValueAtIndex(int, double)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        int i0;
        double d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        return;
    }

    public double getA(int)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _a>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double getB(int)
    {
        com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.data.Interpolator1DMonotonicIncreasingDataBundle: double[] _b>;

        $d0 = $r1[i0];

        return $d0;
    }
}
