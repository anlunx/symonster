public class com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[][] solve(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2, r3, r4, $r6, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, i3, i4;
        double[][] r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r2;

        r5 = newmultiarray (double)[i0][4];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r10 = r5[i3];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r10, 0.0);

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        $r6 = r5[i4];

        $d0 = r1[i4];

        $r6[3] = $d0;

        $r7 = r5[i4];

        $d1 = r4[i4];

        $r7[2] = $d1;

        $r8 = r5[i4];

        $d2 = r3[i4];

        $d4 = 3.0 * $d2;

        $i1 = i4 + 1;

        $d3 = r4[$i1];

        $d7 = $d4 - $d3;

        $d5 = r4[i4];

        $d6 = 2.0 * $d5;

        $d9 = $d7 - $d6;

        $d8 = r2[i4];

        $d10 = $d9 / $d8;

        $r8[1] = $d10;

        $r9 = r5[i4];

        $d11 = r3[i4];

        $d13 = 2.0 * $d11;

        $i2 = i4 + 1;

        $d12 = r4[$i2];

        $d15 = $d13 - $d12;

        $d14 = r4[i4];

        $d16 = $d15 - $d14;

        $d18 = neg $d16;

        $d17 = r2[i4];

        $d20 = $d18 / $d17;

        $d19 = r2[i4];

        $d21 = $d20 / $d19;

        $r9[0] = $d21;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r5;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[], double[], double[][], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2, r3, r6, $r12, $r13, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r28, $r29;
        double[][] r4, r8, r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r16, $r19, $r22, $r25, $r27;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r11, $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        i0 = lengthof r1;

        $r10 = r5[0];

        r6 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r7 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        r8 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r1, r2, r3, r6);

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        r7[0] = $r11;

        i8 = 0;

     label1:
        $i1 = i0 - 1;

        if i8 >= $i1 goto label4;

        r9 = newmultiarray (double)[4][i0];

        $r12 = r9[3];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r12, 0.0);

        $r13 = r9[3];

        $r13[i8] = 1.0;

        i9 = 0;

     label2:
        if i9 >= i0 goto label3;

        $r17 = r9[0];

        $r15 = r4[i8];

        $d0 = $r15[i9];

        $d1 = 2.0 * $d0;

        $i3 = i8 + 2;

        $r16 = r5[$i3];

        $r18 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d2 = $r18[i9];

        $d3 = $d1 - $d2;

        $i4 = i8 + 1;

        $r19 = r5[$i4];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d4 = $r20[i9];

        $d5 = $d3 - $d4;

        $d7 = neg $d5;

        $d6 = r2[i8];

        $d9 = $d7 / $d6;

        $d8 = r2[i8];

        $d10 = $d9 / $d8;

        $r17[i9] = $d10;

        $r23 = r9[1];

        $r21 = r4[i8];

        $d11 = $r21[i9];

        $d12 = 3.0 * $d11;

        $i5 = i8 + 2;

        $r22 = r5[$i5];

        $r24 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d13 = $r24[i9];

        $d14 = $d12 - $d13;

        $i6 = i8 + 1;

        $r25 = r5[$i6];

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d15 = $r26[i9];

        $d16 = 2.0 * $d15;

        $d18 = $d14 - $d16;

        $d17 = r2[i8];

        $d19 = $d18 / $d17;

        $r23[i9] = $d19;

        $r28 = r9[2];

        $i7 = i8 + 1;

        $r27 = r5[$i7];

        $r29 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d20 = $r29[i9];

        $r28[i9] = $d20;

        i9 = i9 + 1;

        goto label2;

     label3:
        $i2 = i8 + 1;

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r9);

        r7[$i2] = $r14;

        i8 = i8 + 1;

        goto label1;

     label4:
        return r7;
    }

    public double[][] solve(double[], double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2, r3, r4, r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        double[][] r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: double[];

        i0 = lengthof r2;

        r6 = newmultiarray (double)[i0][6];

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r13 = r6[i7];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r13, 0.0);

        i7 = i7 + 1;

        goto label1;

     label2:
        i8 = 0;

     label3:
        if i8 >= i0 goto label4;

        $r7 = r6[i8];

        $d0 = r1[i8];

        $r7[5] = $d0;

        $r8 = r6[i8];

        $d1 = r4[i8];

        $r8[4] = $d1;

        $r9 = r6[i8];

        $d2 = r5[i8];

        $d3 = 0.5 * $d2;

        $r9[3] = $d3;

        $r10 = r6[i8];

        $i1 = i8 + 1;

        $d6 = r5[$i1];

        $d4 = r5[i8];

        $d5 = 3.0 * $d4;

        $d7 = $d6 - $d5;

        $d9 = 0.5 * $d7;

        $d8 = r2[i8];

        $d23 = $d9 / $d8;

        $d10 = r3[i8];

        $d13 = 5.0 * $d10;

        $d11 = r4[i8];

        $d12 = 3.0 * $d11;

        $d16 = $d13 - $d12;

        $i2 = i8 + 1;

        $d14 = r4[$i2];

        $d15 = 2.0 * $d14;

        $d17 = $d16 - $d15;

        $d19 = 2.0 * $d17;

        $d18 = r2[i8];

        $d21 = $d19 / $d18;

        $d20 = r2[i8];

        $d22 = $d21 / $d20;

        $d24 = $d23 + $d22;

        $r10[2] = $d24;

        $r11 = r6[i8];

        $d25 = r5[i8];

        $d28 = 3.0 * $d25;

        $i3 = i8 + 1;

        $d26 = r5[$i3];

        $d27 = 2.0 * $d26;

        $d29 = $d28 - $d27;

        $d31 = 0.5 * $d29;

        $d30 = r2[i8];

        $d33 = $d31 / $d30;

        $d32 = r2[i8];

        $d48 = $d33 / $d32;

        $d34 = r4[i8];

        $d37 = 8.0 * $d34;

        $i4 = i8 + 1;

        $d35 = r4[$i4];

        $d36 = 7.0 * $d35;

        $d40 = $d37 + $d36;

        $d38 = r3[i8];

        $d39 = 15.0 * $d38;

        $d42 = $d40 - $d39;

        $d41 = r2[i8];

        $d44 = $d42 / $d41;

        $d43 = r2[i8];

        $d46 = $d44 / $d43;

        $d45 = r2[i8];

        $d47 = $d46 / $d45;

        $d49 = $d48 + $d47;

        $r11[1] = $d49;

        $r12 = r6[i8];

        $i5 = i8 + 1;

        $d51 = r5[$i5];

        $d50 = r5[i8];

        $d52 = $d51 - $d50;

        $d54 = 0.5 * $d52;

        $d53 = r2[i8];

        $d56 = $d54 / $d53;

        $d55 = r2[i8];

        $d58 = $d56 / $d55;

        $d57 = r2[i8];

        $d74 = $d58 / $d57;

        $d59 = r3[i8];

        $d61 = 2.0 * $d59;

        $i6 = i8 + 1;

        $d60 = r4[$i6];

        $d63 = $d61 - $d60;

        $d62 = r4[i8];

        $d64 = $d63 - $d62;

        $d66 = 3.0 * $d64;

        $d65 = r2[i8];

        $d68 = $d66 / $d65;

        $d67 = r2[i8];

        $d70 = $d68 / $d67;

        $d69 = r2[i8];

        $d72 = $d70 / $d69;

        $d71 = r2[i8];

        $d73 = $d72 / $d71;

        $d75 = $d74 + $d73;

        $r12[0] = $d75;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r6;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[], double[], double[][], com.opengamma.analytics.math.matrix.DoubleMatrix1D[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2, r3, r7, r8, $r15, $r16, $r19, $r20, $r22, $r23, $r25, $r27, $r29, $r30, $r32, $r34, $r36, $r37, $r39, $r40, $r42, $r43, $r45, $r47, $r49, $r50, $r52, $r53;
        double[][] r4, r10, r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r5, r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r12, $r13, $r18, $r21, $r24, $r26, $r28, $r31, $r33, $r35, $r38, $r41, $r44, $r46, $r48, $r51;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        i0 = lengthof r1;

        $r12 = r5[0];

        r7 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r13 = r6[0];

        r8 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r9 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        r10 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[],double[])>(r1, r2, r3, r7, r8);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r10);

        r9[0] = $r14;

        i17 = 0;

     label1:
        $i1 = i0 - 1;

        if i17 >= $i1 goto label4;

        r11 = newmultiarray (double)[6][i0];

        $r15 = r11[5];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r15, 0.0);

        $r16 = r11[5];

        $r16[i17] = 1.0;

        i18 = 0;

     label2:
        if i18 >= i0 goto label3;

        $r19 = r11[0];

        $i3 = i17 + 2;

        $r18 = r6[$i3];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d0 = $r20[i18];

        $i4 = i17 + 1;

        $r21 = r6[$i4];

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d1 = $r22[i18];

        $d2 = $d0 - $d1;

        $d4 = 0.5 * $d2;

        $d3 = r2[i17];

        $d6 = $d4 / $d3;

        $d5 = r2[i17];

        $d8 = $d6 / $d5;

        $d7 = r2[i17];

        $d10 = $d8 / $d7;

        $r23 = r4[i17];

        $d9 = $r23[i18];

        $d11 = 2.0 * $d9;

        $i5 = i17 + 2;

        $r24 = r5[$i5];

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d12 = $r25[i18];

        $d13 = $d11 - $d12;

        $i6 = i17 + 1;

        $r26 = r5[$i6];

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d14 = $r27[i18];

        $d15 = $d13 - $d14;

        $d17 = 3.0 * $d15;

        $d16 = r2[i17];

        $d19 = $d17 / $d16;

        $d18 = r2[i17];

        $d21 = $d19 / $d18;

        $d20 = r2[i17];

        $d23 = $d21 / $d20;

        $d22 = r2[i17];

        $d24 = $d23 / $d22;

        $d25 = $d10 + $d24;

        $r19[i18] = $d25;

        $r29 = r11[1];

        $i7 = i17 + 1;

        $r28 = r6[$i7];

        $r30 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d26 = $r30[i18];

        $d27 = 3.0 * $d26;

        $i8 = i17 + 2;

        $r31 = r6[$i8];

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d28 = $r32[i18];

        $d29 = 2.0 * $d28;

        $d30 = $d27 - $d29;

        $d32 = 0.5 * $d30;

        $d31 = r2[i17];

        $d34 = $d32 / $d31;

        $d33 = r2[i17];

        $d35 = $d34 / $d33;

        $i9 = i17 + 1;

        $r33 = r5[$i9];

        $r34 = virtualinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d36 = $r34[i18];

        $d37 = 8.0 * $d36;

        $i10 = i17 + 2;

        $r35 = r5[$i10];

        $r36 = virtualinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d38 = $r36[i18];

        $d39 = 7.0 * $d38;

        $d42 = $d37 + $d39;

        $r37 = r4[i17];

        $d40 = $r37[i18];

        $d41 = 15.0 * $d40;

        $d44 = $d42 - $d41;

        $d43 = r2[i17];

        $d46 = $d44 / $d43;

        $d45 = r2[i17];

        $d48 = $d46 / $d45;

        $d47 = r2[i17];

        $d49 = $d48 / $d47;

        $d50 = $d35 + $d49;

        $r29[i18] = $d50;

        $r39 = r11[2];

        $i11 = i17 + 2;

        $r38 = r6[$i11];

        $r40 = virtualinvoke $r38.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d51 = $r40[i18];

        $i12 = i17 + 1;

        $r41 = r6[$i12];

        $r42 = virtualinvoke $r41.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d52 = $r42[i18];

        $d53 = 3.0 * $d52;

        $d54 = $d51 - $d53;

        $d56 = 0.5 * $d54;

        $d55 = r2[i17];

        $d58 = $d56 / $d55;

        $r43 = r4[i17];

        $d57 = $r43[i18];

        $d59 = 5.0 * $d57;

        $i13 = i17 + 1;

        $r44 = r5[$i13];

        $r45 = virtualinvoke $r44.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d60 = $r45[i18];

        $d61 = 3.0 * $d60;

        $d62 = $d59 - $d61;

        $i14 = i17 + 2;

        $r46 = r5[$i14];

        $r47 = virtualinvoke $r46.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d63 = $r47[i18];

        $d64 = 2.0 * $d63;

        $d65 = $d62 - $d64;

        $d67 = 2.0 * $d65;

        $d66 = r2[i17];

        $d69 = $d67 / $d66;

        $d68 = r2[i17];

        $d70 = $d69 / $d68;

        $d71 = $d58 + $d70;

        $r39[i18] = $d71;

        $r49 = r11[3];

        $i15 = i17 + 1;

        $r48 = r6[$i15];

        $r50 = virtualinvoke $r48.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d72 = $r50[i18];

        $d73 = 0.5 * $d72;

        $r49[i18] = $d73;

        $r52 = r11[4];

        $i16 = i17 + 1;

        $r51 = r5[$i16];

        $r53 = virtualinvoke $r51.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d74 = $r53[i18];

        $r52[i18] = $d74;

        i18 = i18 + 1;

        goto label2;

     label3:
        $i2 = i17 + 1;

        $r17 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r11);

        r9[$i2] = $r17;

        i17 = i17 + 1;

        goto label1;

     label4:
        return r9;
    }

    public double[] intervalsCalculator(double[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2;
        int i0, $i1, $i2, $i3, i4;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r2 = newarray (double)[$i1];

        i4 = 0;

     label1:
        $i2 = i0 - 1;

        if i4 >= $i2 goto label2;

        $i3 = i4 + 1;

        $d1 = r1[$i3];

        $d0 = r1[i4];

        $d2 = $d1 - $d0;

        r2[i4] = $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    public double[] slopesCalculator(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, i4;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r3 = newarray (double)[$i1];

        i4 = 0;

     label1:
        $i2 = i0 - 1;

        if i4 >= $i2 goto label2;

        $i3 = i4 + 1;

        $d1 = r1[$i3];

        $d0 = r1[i4];

        $d3 = $d1 - $d0;

        $d2 = r2[i4];

        $d4 = $d3 / $d2;

        r3[i4] = $d4;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r3;
    }

    public double[][] slopeSensitivityCalculator(double[])
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double[] r1, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, i5;
        double[][] r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 - 1;

        r2 = newmultiarray (double)[$i2][i0];

        i5 = 0;

     label1:
        $i3 = i0 - 1;

        if i5 >= $i3 goto label2;

        $r3 = r2[i5];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r3, 0.0);

        $r4 = r2[i5];

        $d0 = r1[i5];

        $d1 = -1.0 / $d0;

        $r4[i5] = $d1;

        $r5 = r2[i5];

        $i4 = i5 + 1;

        $d2 = r1[i5];

        $d3 = 1.0 / $d2;

        $r5[$i4] = $d3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r2;
    }

    public double endpointDerivatives(double, double, double, double)
    {
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        byte $b0, $b1, $b2;

        r0 := @this: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = 2.0 * d0;

        $d6 = $d5 + d1;

        $d8 = $d6 * d2;

        $d7 = d0 + d1;

        $d12 = $d8 / $d7;

        $d10 = d0 * d3;

        $d9 = d0 + d1;

        $d11 = $d10 / $d9;

        d4 = $d12 - $d11;

        $d13 = staticinvoke <java.lang.Math: double signum(double)>(d4);

        $d14 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $b0 = $d13 cmpl $d14;

        if $b0 == 0 goto label1;

        return 0.0;

     label1:
        $d15 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $d16 = staticinvoke <java.lang.Math: double signum(double)>(d3);

        $b1 = $d15 cmpl $d16;

        if $b1 == 0 goto label2;

        $d17 = staticinvoke <java.lang.Math: double abs(double)>(d4);

        $d18 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $d19 = 3.0 * $d18;

        $b2 = $d17 cmpl $d19;

        if $b2 <= 0 goto label2;

        $d20 = 3.0 * d2;

        return $d20;

     label2:
        return d4;
    }
}
