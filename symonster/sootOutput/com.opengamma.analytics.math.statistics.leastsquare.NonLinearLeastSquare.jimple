public class com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare extends java.lang.Object
{
    private static final org.slf4j.Logger LOGGER;
    private static final int MAX_ATTEMPTS;
    private static final com.opengamma.analytics.math.function.Function1D UNCONSTRAINED;
    private final double _eps;
    private final com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition;
    private final com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra;

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r1;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        $r2 = <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition SV_COMMONS>;

        $r1 = <com.opengamma.analytics.math.matrix.MatrixAlgebraFactory: com.opengamma.analytics.math.matrix.OGMatrixAlgebra OG_ALGEBRA>;

        specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>($r2, $r1, 1.0E-8);

        return;
    }

    public void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition, com.opengamma.analytics.math.matrix.MatrixAlgebra, double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.linearalgebra.Decomposition r1;
        com.opengamma.analytics.math.matrix.MatrixAlgebra r2;
        double d0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.linearalgebra.Decomposition;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.MatrixAlgebra;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition> = r1;

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra> = r2;

        r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double _eps> = d0;

        return;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4, $r6;
        com.opengamma.analytics.math.function.ParameterizedFunction r3;
        int i0, $i1;
        double[] r5;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r7;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.ParameterizedFunction;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        r5 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r5, 1.0);

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, $r6, r3, r4);

        return $r7;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, double, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4, $r7;
        double d0;
        com.opengamma.analytics.math.function.ParameterizedFunction r3;
        int i0, $i1;
        double[] r5;
        java.lang.Double $r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.math.function.ParameterizedFunction;

        r4 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>($r6, "sigma");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        r5 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r5, d0);

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, $r7, r3, r4);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r3, r5;
        com.opengamma.analytics.math.function.ParameterizedFunction r4;
        int i0, $i1, $i2;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$2 $r7;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.ParameterizedFunction;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "sigma");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        $i2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i2 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "sigma wrong length");

        $r7 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$2;

        specialinvoke $r7.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$2: void <init>(com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction)>(r0, r1, r4);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r2, r3, $r7, r5, null);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5, $r7;
        com.opengamma.analytics.math.function.ParameterizedFunction r3, r4;
        int i0, $i1;
        double[] r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.ParameterizedFunction;

        r4 := @parameter3: com.opengamma.analytics.math.function.ParameterizedFunction;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "sigma");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        r6 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r6, 1.0);

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, $r7, r3, r4, r5);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, double, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5, $r7;
        double d0;
        com.opengamma.analytics.math.function.ParameterizedFunction r3, r4;
        int i0, $i1;
        double[] r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.math.function.ParameterizedFunction;

        r4 := @parameter4: com.opengamma.analytics.math.function.ParameterizedFunction;

        r5 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        r6 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r6, d0);

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.function.ParameterizedFunction,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, $r7, r3, r4, r5);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.function.ParameterizedFunction, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r3, r6;
        com.opengamma.analytics.math.function.ParameterizedFunction r4, r5;
        int i0, $i1, $i2;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$3 $r9;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$4 $r10;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r11;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.ParameterizedFunction;

        r5 := @parameter4: com.opengamma.analytics.math.function.ParameterizedFunction;

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "sigma");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i1 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "y wrong length");

        $i2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i2 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "sigma wrong length");

        $r9 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$3;

        specialinvoke $r9.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$3: void <init>(com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction)>(r0, r1, r4);

        $r10 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$4;

        specialinvoke $r10.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$4: void <init>(com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.ParameterizedFunction)>(r0, r1, r5);

        $r11 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r2, r3, $r9, $r10, r6, null);

        return $r11;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r3, $r6;
        com.opengamma.analytics.math.function.Function1D r2, $r7;
        int i0;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r5;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r5 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r5.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int,double)>(i0, 1.0);

        $r7 = virtualinvoke $r5.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r2);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, $r6, r2, $r7, r3, null);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4;
        com.opengamma.analytics.math.function.Function1D r3, $r7;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r6.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r3);

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, r3, $r7, r4, null);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r4, r5;
        com.opengamma.analytics.math.function.Function1D r3, $r8;
        com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator $r7;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r9;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r7 = new com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator;

        specialinvoke $r7.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: void <init>()>();

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.differentiation.VectorFieldFirstOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D)>(r3);

        $r9 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, r3, $r8, r4, r5);

        return $r9;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5;
        com.opengamma.analytics.math.function.Function1D r3, r4, $r6;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r7;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.Function1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED>;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, r3, r4, r5, $r6, null);

        return $r7;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5, r6;
        com.opengamma.analytics.math.function.Function1D r3, r4, $r7;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.Function1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r6 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r7 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED>;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1, r2, r3, r4, r5, $r7, r6);

        return $r8;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2, r5, r7, $r38, r74, r75, r77, r79, r81, r82, r89, r90;
        com.opengamma.analytics.math.function.Function1D r3, r4, r6, r12;
        int i0, i1, $i2, i14, i15, i16, i17, i18, i19, i22, i23, i24, i25;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r8, r9, r15, r16, $r34, $r64, r76, $r83, r84;
        com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r13;
        double[][] r14;
        double[] r17, $r60, r86;
        java.lang.Object[] $r18, $r23;
        java.lang.Integer $r19, $r20;
        java.lang.Object $r21, $r26, $r29, $r33, $r41, $r70;
        java.lang.Boolean $r22, $r30, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b20;
        com.opengamma.analytics.math.MathException $r24, $r53, $r73;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r25, $r31, $r69;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r27, $r35, $r39, $r45, $r47, $r49, $r51;
        com.opengamma.analytics.math.matrix.Matrix $r28, $r36, $r40, $r46, $r48, $r50, $r52;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, d37, d38, d39, d40, d41, d42, d43;
        com.opengamma.analytics.math.differentiation.VectorFieldSecondOrderDifferentiator $r32;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r37, $r44, $r68, $r71;
        org.slf4j.Logger $r43;
        int[] $r54, $r56, $r58, $r61, $r63, $r66;
        java.lang.Double $r55, $r57, $r59, $r62, $r65, $r67;
        java.lang.Exception $r72;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r78;
        com.opengamma.analytics.math.linearalgebra.SVDecompositionResult r85;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.function.Function1D;

        r5 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r6 := @parameter5: com.opengamma.analytics.math.function.Function1D;

        r7 := @parameter6: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "observedValues");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, " sigma");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, " func");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, " jac");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r5, "startPos");

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i1 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if i0 != $i2 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z4, "observedValues and sigma must be same length");

        if i0 < i1 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        $r18 = newarray (java.lang.Object)[2];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r18[1] = $r20;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "must have data points greater or equal to number of parameters. #date points = {}, #parameters = {}", $r18);

        $r21 = virtualinvoke r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r5);

        $r22 = (java.lang.Boolean) $r21;

        $z0 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "The inital value of the parameters (startPos) is {} - this is not an allowed value", $r23);

        r74 = r5;

        d37 = 0.0;

        r75 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r5);

        r76 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r4, r2, r5);

        d38 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r75);

        $b3 = d38 cmpl 0.0;

        if $b3 != 0 goto label05;

        $r71 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(d38, r76, r5, r2);

        return $r71;

     label05:
        r77 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r75, r76);

        i14 = 0;

     label06:
        if i14 >= 10000 goto label44;

        r8 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double)>(r76, d37);

     label07:
        $r25 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r8);

        r78 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r26;

        r79 = interfaceinvoke r78.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r77);

     label08:
        goto label10;

     label09:
        $r72 := @caughtexception;

        $r73 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r73.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r72);

        throw $r73;

     label10:
        $r27 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r74, r79);

        r81 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r28;

        $r29 = virtualinvoke r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r81);

        $r30 = (java.lang.Boolean) $r29;

        $z1 = virtualinvoke $r30.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label11;

        $z2 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: boolean allowJump(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r79, r7);

        if $z2 != 0 goto label12;

     label11:
        d37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double increaseLambda(double)>(d37);

        goto label43;

     label12:
        r82 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r81);

        d39 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r82);

        $d0 = d39 - d38;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = 1.0 + d38;

        $d4 = $d1 / $d2;

        $d3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double _eps>;

        $b4 = $d4 cmpg $d3;

        if $b4 >= 0 goto label41;

        $b6 = d37 cmpl 0.0;

        if $b6 != 0 goto label13;

        $r83 = r8;

        goto label14;

     label13:
        $r83 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double)>(r76, 0.0);

     label14:
        r9 = $r83;

        $d5 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double _eps>;

        $b7 = d39 cmpg $d5;

        if $b7 >= 0 goto label16;

        $b13 = d37 cmpl 0.0;

        if $b13 <= 0 goto label15;

        $r69 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r70 = virtualinvoke $r69.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>($r83);

        r78 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r70;

     label15:
        $r68 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.linearalgebra.DecompositionResult,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r9, r78, d39, r76, r81, r2);

        return $r68;

     label16:
        $r31 = <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition SV_COMMONS>;

        r10 = (com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons) $r31;

        $r32 = new com.opengamma.analytics.math.differentiation.VectorFieldSecondOrderDifferentiator;

        specialinvoke $r32.<com.opengamma.analytics.math.differentiation.VectorFieldSecondOrderDifferentiator: void <init>()>();

        r12 = virtualinvoke $r32.<com.opengamma.analytics.math.differentiation.VectorFieldSecondOrderDifferentiator: com.opengamma.analytics.math.function.Function1D differentiate(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D)>(r3, r6);

        $r33 = virtualinvoke r12.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r81);

        r13 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D[]) $r33;

        r14 = newmultiarray (double)[i1][i1];

        i15 = 0;

     label17:
        if i15 >= i0 goto label22;

        i16 = 0;

     label18:
        if i16 >= i1 goto label21;

        i17 = 0;

     label19:
        if i17 >= i1 goto label20;

        $r60 = r14[i16];

        $d30 = $r60[i17];

        $r61 = newarray (int)[1];

        $r61[0] = i15;

        $r62 = virtualinvoke r82.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r61);

        $d31 = virtualinvoke $r62.<java.lang.Double: double doubleValue()>();

        $r64 = r13[i15];

        $r63 = newarray (int)[2];

        $r63[0] = i16;

        $r63[1] = i17;

        $r65 = virtualinvoke $r64.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r63);

        $d32 = virtualinvoke $r65.<java.lang.Double: double doubleValue()>();

        $d33 = $d31 * $d32;

        $r66 = newarray (int)[1];

        $r66[0] = i15;

        $r67 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r66);

        $d34 = virtualinvoke $r67.<java.lang.Double: double doubleValue()>();

        $d35 = $d33 / $d34;

        $d36 = $d30 - $d35;

        $r60[i17] = $d36;

        i17 = i17 + 1;

        goto label19;

     label20:
        i16 = i16 + 1;

        goto label18;

     label21:
        i15 = i15 + 1;

        goto label17;

     label22:
        $r35 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r14);

        $r36 = virtualinvoke $r35.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r9, $r34);

        r84 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r36;

        r85 = virtualinvoke r10.<com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons: com.opengamma.analytics.math.linearalgebra.SVDecompositionResult evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r84);

        r86 = interfaceinvoke r85.<com.opengamma.analytics.math.linearalgebra.SVDecompositionResult: double[] getSingularValues()>();

        r15 = interfaceinvoke r85.<com.opengamma.analytics.math.linearalgebra.SVDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getU()>();

        r16 = interfaceinvoke r85.<com.opengamma.analytics.math.linearalgebra.SVDecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getV()>();

        r17 = newarray (double)[i1];

        z6 = 0;

        d40 = 0.0;

        i18 = 0;

     label23:
        if i18 >= i1 goto label29;

        d41 = 0.0;

        i19 = 0;

     label24:
        if i19 >= i1 goto label25;

        $r56 = newarray (int)[2];

        $r56[0] = i19;

        $r56[1] = i18;

        $r57 = virtualinvoke r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r56);

        $d27 = virtualinvoke $r57.<java.lang.Double: double doubleValue()>();

        $r58 = newarray (int)[2];

        $r58[0] = i19;

        $r58[1] = i18;

        $r59 = virtualinvoke r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r58);

        $d28 = virtualinvoke $r59.<java.lang.Double: double doubleValue()>();

        $d29 = $d27 * $d28;

        d41 = d41 + $d29;

        i19 = i19 + 1;

        goto label24;

     label25:
        $b11 = d41 cmpl 0.0;

        if $b11 <= 0 goto label26;

        $b20 = 1;

        goto label27;

     label26:
        $b20 = -1;

     label27:
        $d22 = r86[i18];

        $d21 = (double) $b20;

        $d23 = $d22 * $d21;

        $b12 = $d23 cmpg 0.0;

        if $b12 >= 0 goto label28;

        $d24 = r86[i18];

        d40 = d40 + $d24;

        $d25 = r86[i18];

        $d26 = neg $d25;

        r86[i18] = $d26;

        z6 = 1;

     label28:
        i18 = i18 + 1;

        goto label23;

     label29:
        if z6 == 0 goto label40;

        d37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double increaseLambda(double)>(d37);

        i22 = 0;

     label30:
        if i22 >= i1 goto label33;

        $d11 = r86[i22];

        $b10 = $d11 cmpg 0.0;

        if $b10 >= 0 goto label32;

        $d13 = neg d38;

        $d12 = r86[i22];

        $d14 = $d13 * $d12;

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        $d16 = 0.5 * $d15;

        d42 = $d16 / d40;

        i23 = 0;

     label31:
        if i23 >= i1 goto label32;

        $d17 = r17[i23];

        $r54 = newarray (int)[2];

        $r54[0] = i23;

        $r54[1] = i22;

        $r55 = virtualinvoke r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r54);

        $d18 = virtualinvoke $r55.<java.lang.Double: double doubleValue()>();

        $d19 = d42 * $d18;

        $d20 = $d17 + $d19;

        r17[i23] = $d20;

        i23 = i23 + 1;

        goto label31;

     label32:
        i22 = i22 + 1;

        goto label30;

     label33:
        $r38 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r38.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r17);

        $r39 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r40 = virtualinvoke $r39.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r74, $r38);

        r81 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r40;

        i24 = 0;

        d43 = 1.0;

     label34:
        $r41 = virtualinvoke r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r81);

        $r42 = (java.lang.Boolean) $r41;

        $z3 = virtualinvoke $r42.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 != 0 goto label35;

        d43 = d43 * -0.5;

        $r49 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r50 = virtualinvoke $r49.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r38, d43);

        r89 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r50;

        $r51 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r52 = virtualinvoke $r51.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r74, r89);

        r81 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r52;

        i24 = i24 + 1;

        if i24 <= 10 goto label34;

        $r53 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r53.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Could not satify constraint");

        throw $r53;

     label35:
        r82 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r81);

        d39 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r82);

        i25 = 0;

     label36:
        $b8 = d39 cmpl d38;

        if $b8 <= 0 goto label39;

        if i25 > 10 goto label37;

        $d6 = d39 - d38;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = 1.0 + d38;

        $d10 = $d7 / $d8;

        $d9 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double _eps>;

        $b9 = $d10 cmpg $d9;

        if $b9 >= 0 goto label38;

     label37:
        $r43 = <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: org.slf4j.Logger LOGGER>;

        interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String)>("Saddle point detected, but no improvement to chi^2 possible by moving away. It is recommended that a different starting point is used.");

        $r44 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.linearalgebra.DecompositionResult,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r84, r78, d38, r76, r74, r2);

        return $r44;

     label38:
        d43 = d43 / 2.0;

        $r45 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r46 = virtualinvoke $r45.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>($r38, d43);

        r90 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r46;

        $r47 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r48 = virtualinvoke $r47.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r74, r90);

        r81 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r48;

        r82 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r2, r81);

        d39 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r82);

        i25 = i25 + 1;

        goto label36;

     label39:
        goto label41;

     label40:
        $r37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.linearalgebra.DecompositionResult,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r84, r78, d39, r76, r81, r2);

        return $r37;

     label41:
        $b5 = d39 cmpg d38;

        if $b5 >= 0 goto label42;

        d37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double decreaseLambda(double)>(d37);

        r74 = r81;

        r76 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r4, r2, r81);

        r77 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r82, r76);

        d38 = d39;

        goto label43;

     label42:
        d37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: double increaseLambda(double)>(d37);

     label43:
        i14 = i14 + 1;

        goto label06;

     label44:
        $r24 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r24.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Could not converge in 10000 attempts");

        throw $r24;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    private double decreaseLambda(double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        double d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        d0 := @parameter0: double;

        $d1 = d0 / 10.0;

        return $d1;
    }

    private double increaseLambda(double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        double d0, $d1;
        byte $b0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.1;

     label1:
        $d1 = d0 * 10.0;

        return $d1;
    }

    private boolean allowJump(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r2;
        int i0, i2;
        int[] $r3, $r5;
        java.lang.Double $r4, $r6;
        double $d0, $d1, $d2;
        byte $b1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        if r2 != null goto label1;

        return 1;

     label1:
        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $r3 = newarray (int)[1];

        $r3[0] = i2;

        $r4 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r3);

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r5 = newarray (int)[1];

        $r5[0] = i2;

        $r6 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r5);

        $d2 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $b1 = $d1 cmpl $d2;

        if $b1 <= 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D calInverseJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, r4;
        com.opengamma.analytics.math.function.Function1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r5, r6, r7, $r11;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r8;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r9;
        java.lang.Object $r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        r3 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r1, r4);

        r6 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double)>(r5, 0.0);

        r7 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getBTranspose(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r5, r1);

        $r9 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r6);

        r8 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r10;

        $r11 = interfaceinvoke r8.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r7);

        return $r11;
    }

    private com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(double, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        double d0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r5;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r6;
        java.lang.Object $r7;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        d0 := @parameter0: double;

        r1 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double)>(r1, 0.0);

        $r6 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r4);

        r5 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r7;

        $r8 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.linearalgebra.DecompositionResult,double,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r4, r5, d0, r1, r2, r3);

        return $r8;
    }

    private com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults finish(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.linearalgebra.DecompositionResult, double, com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r3, r6, r7, r8, $r9;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r2;
        double d0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        int $i0;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults $r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.linearalgebra.DecompositionResult;

        d0 := @parameter2: double;

        r3 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r4 := @parameter4: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r5 := @parameter5: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r9 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>($i0);

        r6 = interfaceinvoke r2.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r9);

        r7 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getBTranspose(com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r3, r5);

        r8 = interfaceinvoke r2.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r7);

        $r10 = new com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults;

        specialinvoke $r10.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults: void <init>(double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(d0, r4, r6, r8);

        return $r10;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D getError(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3, r4, r5, $r15;
        int i0, $i1, $i2, i3;
        double[] r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        int[] $r16, $r18, $r20;
        java.lang.Double $r17, $r19, $r21;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r4);

        r5 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r7;

        $i1 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of data points different between model (");

        $i2 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and observed (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, $r14);

        r6 = newarray (double)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r16 = newarray (int)[1];

        $r16[0] = i3;

        $r17 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r16);

        $d0 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $r18 = newarray (int)[1];

        $r18[0] = i3;

        $r19 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r18);

        $d1 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 - $d1;

        $r20 = newarray (int)[1];

        $r20[0] = i3;

        $r21 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r20);

        $d3 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $d4 = $d2 / $d3;

        r6[i3] = $d4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        return $r15;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getBTranspose(com.opengamma.analytics.math.matrix.DoubleMatrix2D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2;
        int i0, i1, i2, i3;
        double[][] r3;
        double d0, $d1, $d2, $d3;
        int[] $r5, $r7;
        java.lang.Double $r6, $r9;
        double[] $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        r3 = newmultiarray (double)[i1][i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r5 = newarray (int)[1];

        $r5[0] = i2;

        $r6 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r5);

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        d0 = 1.0 / $d1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r8 = r3[i3];

        $r7 = newarray (int)[2];

        $r7[0] = i2;

        $r7[1] = i3;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r7);

        $d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d3 = $d2 * d0;

        $r8[i2] = $d3;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r4;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getJacobian(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r4;
        double[][] r5;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, $d1, $d2, $d3;
        java.lang.Object $r6;
        int[] $r7;
        java.lang.Double $r8;
        double[] $r9;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r3 := @parameter2: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r3);

        r4 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r6;

        r5 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i0 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i2 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i2 != i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "Jacobian is wrong size");

        $i3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        if $i3 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "Jacobian is wrong size");

        i4 = 0;

     label5:
        if i4 >= i0 goto label8;

        $r7 = newarray (int)[1];

        $r7[0] = i4;

        $r8 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        d0 = 1.0 / $d1;

        i5 = 0;

     label6:
        if i5 >= i1 goto label7;

        $r9 = r5[i4];

        $d2 = $r9[i5];

        $d3 = $d2 * d0;

        $r9[i5] = $d3;

        i5 = i5 + 1;

        goto label6;

     label7:
        i4 = i4 + 1;

        goto label5;

     label8:
        return r4;
    }

    private double getChiSqr(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $d0 = virtualinvoke $r2.<com.opengamma.analytics.math.matrix.MatrixAlgebra: double getInnerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r1);

        return $d0;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D getChiSqrGrad(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r3;
        com.opengamma.analytics.math.matrix.Matrix $r4;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r1, r2);

        $r5 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r4;

        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D getDiagonalCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1;
        int i0, i1, i2, i3;
        double[] r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r3;
        int[] $r4;
        java.lang.Double $r5;
        double $d0, $d1, d2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        r2 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        d2 = 0.0;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r4 = newarray (int)[2];

        $r4[0] = i3;

        $r4[1] = i2;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r4);

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $d1 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d0);

        d2 = d2 + $d1;

        i3 = i3 + 1;

        goto label2;

     label3:
        r2[i2] = d2;

        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        return $r3;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getModifiedCurvatureMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D, double)
    {
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1, r2;
        double d0, d1, $d2, $d3;
        int i0, i1;
        double[][] r3;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r4;
        double[] $r5;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        d0 := @parameter1: double;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        d1 = 1.0 + d0;

        $r4 = r0.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D matrixTransposeMultiplyMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r1);

        r3 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r3[i1];

        $d2 = $r5[i1];

        $d3 = $d2 * d1;

        $r5[i1] = $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$1 $r1;

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: int MAX_ATTEMPTS> = 10000;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/math/statistics/leastsquare/NonLinearLeastSquare");

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: org.slf4j.Logger LOGGER> = $r0;

        $r1 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$1;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare$1: void <init>()>();

        <com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED> = $r1;

        return;
    }
}
