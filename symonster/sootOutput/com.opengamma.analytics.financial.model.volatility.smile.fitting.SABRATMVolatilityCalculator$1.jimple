class com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1 extends com.opengamma.analytics.math.function.Function1D
{
    final com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData val$data;
    final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option;
    final double val$forward;
    final double val$atmVol;
    final com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator, com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r2;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r3;
        double d0, d1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        r3 := @parameter2: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData val$data> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option> = r3;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: double val$forward> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: double val$atmVol> = d1;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1 r0;
        java.lang.Double r1, $r12, $r13;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator $r7;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider $r8;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r9;
        com.opengamma.analytics.math.function.Function1D $r10;
        java.lang.Object $r11;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1;

        r1 := @parameter0: java.lang.Double;

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData val$data>;

        $d1 = virtualinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        $r5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData val$data>;

        $d2 = virtualinvoke $r5.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData val$data>;

        $d3 = virtualinvoke $r6.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        $r7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator this$0>;

        $r8 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider access$000(com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator)>($r7);

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $d4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: double val$forward>;

        $r10 = virtualinvoke $r8.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r9, $d4);

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r3);

        $r12 = (java.lang.Double) $r11;

        $d5 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: double val$atmVol>;

        $d7 = $d5 - $d6;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        return $r13;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1 r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator$1: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
