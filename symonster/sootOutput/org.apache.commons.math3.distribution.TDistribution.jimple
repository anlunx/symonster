public class org.apache.commons.math3.distribution.TDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private final double degreesOfFreedom;
    private final double solverAbsoluteAccuracy;
    private final double factor;

    public void <init>(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(double,double)>(d0, 1.0E-9);

        return;
    }

    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0, d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, d0, d1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(r1, d0, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DEGREES_OF_FREEDOM>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom> = d0;

        r0.<org.apache.commons.math3.distribution.TDistribution: double solverAbsoluteAccuracy> = d1;

        $d4 = d0 + 1.0;

        d3 = $d4 / 2.0;

        $d5 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d3);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(3.141592653589793);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d8 = $d6 + $d7;

        $d9 = 0.5 * $d8;

        $d11 = $d5 - $d9;

        $d10 = d0 / 2.0;

        $d12 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>($d10);

        $d13 = $d11 - $d12;

        r0.<org.apache.commons.math3.distribution.TDistribution: double factor> = $d13;

        return;
    }

    public double getDegreesOfFreedom()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double logDensity(double)>(d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        return $d2;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 := @parameter0: double;

        d1 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d3 = d1 + 1.0;

        d2 = $d3 / 2.0;

        $d7 = r0.<org.apache.commons.math3.distribution.TDistribution: double factor>;

        $d4 = d0 * d0;

        $d5 = $d4 / d1;

        $d6 = 1.0 + $d5;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d6);

        $d9 = d2 * $d8;

        $d10 = $d7 - $d9;

        return $d10;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        d10 = 0.5;

        goto label3;

     label1:
        $d5 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d3 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d2 = d0 * d0;

        $d4 = $d3 + $d2;

        $d8 = $d5 / $d4;

        $d6 = r0.<org.apache.commons.math3.distribution.TDistribution: double degreesOfFreedom>;

        $d7 = 0.5 * $d6;

        d1 = staticinvoke <org.apache.commons.math3.special.Beta: double regularizedBeta(double,double,double)>($d8, $d7, 0.5);

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        d10 = 0.5 * d1;

        goto label3;

     label2:
        $d9 = 0.5 * d1;

        d10 = 1.0 - $d9;

     label3:
        return d10;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double getDegreesOfFreedom()>();

        $b0 = d0 cmpl 1.0;

        if $b0 <= 0 goto label1;

        return 0.0;

     label1:
        return #NaN;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.TDistribution r0;
        double d0, $d1, $d2;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.TDistribution: double getDegreesOfFreedom()>();

        $b0 = d0 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d1 = d0 - 2.0;

        $d2 = d0 / $d1;

        return $d2;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

        $b2 = d0 cmpg 2.0;

        if $b2 > 0 goto label2;

        return #Infinity;

     label2:
        return #NaN;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 0;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.TDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.TDistribution: long serialVersionUID> = -5852615386664158222L;

        <org.apache.commons.math3.distribution.TDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
