public class org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization extends java.lang.Object
{
    private static final int DEFAULT_MAX_ITERATIONS;
    private static final double DEFAULT_THRESHOLD;
    private final double[][] data;
    private org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel;
    private double logLikelihood;

    public void <init>(double[][]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        double[][] r1, $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        double[] $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r17, $r18;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r13;
        java.lang.Integer $r14, $r15, $r20;
        org.apache.commons.math3.exception.DimensionMismatchException $r16;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r19;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = 0.0;

        $i0 = lengthof r1;

        if $i0 >= 1 goto label1;

        $r19 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $i11 = lengthof r1;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        specialinvoke $r19.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r20);

        throw $r19;

     label1:
        $i2 = lengthof r1;

        $r2 = r1[0];

        $i1 = lengthof $r2;

        $r3 = newmultiarray (double)[$i2][$i1];

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data> = $r3;

        i12 = 0;

     label2:
        $i3 = lengthof r1;

        if i12 >= $i3 goto label5;

        $r4 = r1[i12];

        $i5 = lengthof $r4;

        $r5 = r1[0];

        $i4 = lengthof $r5;

        if $i5 == $i4 goto label3;

        $r16 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r17 = r1[i12];

        $i10 = lengthof $r17;

        $r18 = r1[0];

        $i9 = lengthof $r18;

        specialinvoke $r16.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, $i9);

        throw $r16;

     label3:
        $r6 = r1[i12];

        $i6 = lengthof $r6;

        if $i6 >= 2 goto label4;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_SMALL>;

        $r12 = r1[i12];

        $i8 = lengthof $r12;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r13, $r14, $r15, 1);

        throw $r11;

     label4:
        $r9 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r8 = r1[i12];

        $r7 = r1[i12];

        $i7 = lengthof $r7;

        $r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>($r8, $i7);

        $r9[i12] = $r10;

        i12 = i12 + 1;

        goto label2;

     label5:
        return;
    }

    public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution, int, double) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r1, $r19, $r22, $r23, $r43;
        int i0, i1, i2, i3, i4, $i6, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, d32, d33, d34;
        java.util.List r2, $r12, $r13, $r20;
        double[] r3, r5, $r11, $r18, $r30, $r31, $r32, $r35, $r39, $r40, $r42, $r45, $r47, $r48, $r49, $r50, $r52, r67;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution[] r4;
        double[][] r6, $r9, $r10, $r27, $r29, $r41, $r44, $r51, r66, r68;
        org.apache.commons.math3.linear.RealMatrix r8, $r24, $r25, $r26, $r33, $r34, $r36, $r37;
        byte $b5, $b7, $b8;
        java.lang.Object $r14, $r16, $r53, $r55, $r57, $r59;
        org.apache.commons.math3.util.Pair $r15, $r54, $r58;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution $r17, $r46, $r60;
        org.apache.commons.math3.exception.ConvergenceException $r21;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r28, $r38;
        java.lang.Double $r56, $r63;
        org.apache.commons.math3.exception.DimensionMismatchException $r61;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r62, $r64;
        java.lang.Integer $r65;
        org.apache.commons.math3.linear.RealMatrix[] r69;
        double[][][] r70;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        r1 := @parameter0: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        if i0 >= 1 goto label01;

        $r64 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r64.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r65);

        throw $r64;

     label01:
        $b5 = d0 cmpg 4.9E-324;

        if $b5 >= 0 goto label02;

        $r62 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r63 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r62.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r63);

        throw $r62;

     label02:
        $r9 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        i1 = lengthof $r9;

        $r10 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r11 = $r10[0];

        i2 = lengthof $r11;

        $r12 = virtualinvoke r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        i3 = interfaceinvoke $r12.<java.util.List: int size()>();

        $r13 = virtualinvoke r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (org.apache.commons.math3.util.Pair) $r14;

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r17 = (org.apache.commons.math3.distribution.MultivariateNormalDistribution) $r16;

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double[] getMeans()>();

        i4 = lengthof $r18;

        if i4 == i2 goto label03;

        $r61 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r61.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i4, i2);

        throw $r61;

     label03:
        i9 = 0;

        d32 = 0.0;

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = #-Infinity;

        $r19 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r20 = virtualinvoke r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        specialinvoke $r19.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>($r20);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel> = $r19;

     label04:
        $i6 = i9;

        i9 = i9 + 1;

        if $i6 > i0 goto label25;

        $d4 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        $d5 = d32 - $d4;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d5);

        $b8 = $d6 cmpl d0;

        if $b8 <= 0 goto label25;

        d32 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        d33 = 0.0;

        $r22 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        r2 = virtualinvoke $r22.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        r3 = newarray (double)[i3];

        r4 = newarray (org.apache.commons.math3.distribution.MultivariateNormalDistribution)[i3];

        i10 = 0;

     label05:
        if i10 >= i3 goto label06;

        $r53 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r54 = (org.apache.commons.math3.util.Pair) $r53;

        $r55 = virtualinvoke $r54.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r56 = (java.lang.Double) $r55;

        $d31 = virtualinvoke $r56.<java.lang.Double: double doubleValue()>();

        r3[i10] = $d31;

        $r57 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r58 = (org.apache.commons.math3.util.Pair) $r57;

        $r59 = virtualinvoke $r58.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r60 = (org.apache.commons.math3.distribution.MultivariateNormalDistribution) $r59;

        r4[i10] = $r60;

        i10 = i10 + 1;

        goto label05;

     label06:
        r66 = newmultiarray (double)[i1][i3];

        r5 = newarray (double)[i3];

        r6 = newmultiarray (double)[i3][i2];

        i11 = 0;

     label07:
        if i11 >= i1 goto label12;

        $r43 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        $r41 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r42 = $r41[i11];

        d34 = virtualinvoke $r43.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: double density(double[])>($r42);

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d34);

        d33 = d33 + $d18;

        i12 = 0;

     label08:
        if i12 >= i3 goto label11;

        $r47 = r66[i11];

        $d19 = r3[i12];

        $r46 = r4[i12];

        $r44 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r45 = $r44[i11];

        $d20 = virtualinvoke $r46.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: double density(double[])>($r45);

        $d21 = $d19 * $d20;

        $d22 = $d21 / d34;

        $r47[i12] = $d22;

        $d24 = r5[i12];

        $r48 = r66[i11];

        $d23 = $r48[i12];

        $d25 = $d24 + $d23;

        r5[i12] = $d25;

        i13 = 0;

     label09:
        if i13 >= i2 goto label10;

        $r49 = r6[i12];

        $d29 = $r49[i13];

        $r50 = r66[i11];

        $d27 = $r50[i12];

        $r51 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r52 = $r51[i11];

        $d26 = $r52[i13];

        $d28 = $d27 * $d26;

        $d30 = $d29 + $d28;

        $r49[i13] = $d30;

        i13 = i13 + 1;

        goto label09;

     label10:
        i12 = i12 + 1;

        goto label08;

     label11:
        i11 = i11 + 1;

        goto label07;

     label12:
        $d7 = (double) i1;

        $d8 = d33 / $d7;

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood> = $d8;

        r67 = newarray (double)[i3];

        r68 = newmultiarray (double)[i3][i2];

        i14 = 0;

     label13:
        if i14 >= i3 goto label16;

        $d13 = r5[i14];

        $d12 = (double) i1;

        $d14 = $d13 / $d12;

        r67[i14] = $d14;

        i15 = 0;

     label14:
        if i15 >= i2 goto label15;

        $r40 = r68[i14];

        $r39 = r6[i14];

        $d16 = $r39[i15];

        $d15 = r5[i14];

        $d17 = $d16 / $d15;

        $r40[i15] = $d17;

        i15 = i15 + 1;

        goto label14;

     label15:
        i14 = i14 + 1;

        goto label13;

     label16:
        r69 = newarray (org.apache.commons.math3.linear.RealMatrix)[i3];

        i16 = 0;

     label17:
        if i16 >= i3 goto label18;

        $r38 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r38.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i2, i2);

        r69[i16] = $r38;

        i16 = i16 + 1;

        goto label17;

     label18:
        i17 = 0;

     label19:
        if i17 >= i1 goto label22;

        i18 = 0;

     label20:
        if i18 >= i3 goto label21;

        $r28 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r29 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double[][] data>;

        $r31 = $r29[i17];

        $r30 = r68[i18];

        $r32 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] ebeSubtract(double[],double[])>($r31, $r30);

        specialinvoke $r28.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[])>($r32);

        $r33 = interfaceinvoke $r28.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        $r34 = interfaceinvoke $r28.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>($r33);

        $r35 = r66[i17];

        $d11 = $r35[i18];

        r8 = interfaceinvoke $r34.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d11);

        $r36 = r69[i18];

        $r37 = interfaceinvoke $r36.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)>(r8);

        r69[i18] = $r37;

        i18 = i18 + 1;

        goto label20;

     label21:
        i17 = i17 + 1;

        goto label19;

     label22:
        r70 = newmultiarray (double)[i3][i2][i2];

        i19 = 0;

     label23:
        if i19 >= i3 goto label24;

        $r24 = r69[i19];

        $d9 = r5[i19];

        $d10 = 1.0 / $d9;

        $r25 = interfaceinvoke $r24.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>($d10);

        r69[i19] = $r25;

        $r26 = r69[i19];

        $r27 = interfaceinvoke $r26.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r70[i19] = $r27;

        i19 = i19 + 1;

        goto label23;

     label24:
        $r23 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        specialinvoke $r23.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(double[],double[][],double[][][])>(r67, r68, r70);

        r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel> = $r23;

        goto label04;

     label25:
        $d1 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        $d2 = d32 - $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b7 = $d3 cmpl d0;

        if $b7 <= 0 goto label26;

        $r21 = new org.apache.commons.math3.exception.ConvergenceException;

        specialinvoke $r21.<org.apache.commons.math3.exception.ConvergenceException: void <init>()>();

        throw $r21;

     label26:
        return;
    }

    public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution) throws org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r1;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        r1 := @parameter0: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        virtualinvoke r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution,int,double)>(r1, 1000, 1.0E-5);

        return;
    }

    public static org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution estimate(double[][], int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[][] r0, r3, r26;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow[] r1;
        double[] r4, $r5, $r14, $r15, $r17;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        java.util.ArrayList $r6;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r7;
        org.apache.commons.math3.stat.correlation.Covariance $r8;
        org.apache.commons.math3.linear.RealMatrix $r9;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution $r10;
        org.apache.commons.math3.util.Pair $r11;
        java.lang.Double $r12;
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow $r13, $r16;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r18;
        java.lang.Integer $r19, $r20, $r22, $r23, $r25;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r21;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r24;

        r0 := @parameter0: double[][];

        i0 := @parameter1: int;

        $i6 = lengthof r0;

        if $i6 >= 2 goto label01;

        $r24 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $i12 = lengthof r0;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        specialinvoke $r24.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r25);

        throw $r24;

     label01:
        if i0 >= 2 goto label02;

        $r21 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r21.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r22, $r23, 1);

        throw $r21;

     label02:
        $i7 = lengthof r0;

        if i0 <= $i7 goto label03;

        $r18 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i11 = lengthof r0;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        specialinvoke $r18.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r19, $r20, 1);

        throw $r18;

     label03:
        i1 = lengthof r0;

        $r5 = r0[0];

        i2 = lengthof $r5;

        r1 = newarray (org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow)[i1];

        i13 = 0;

     label04:
        if i13 >= i1 goto label05;

        $r16 = new org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow;

        $r17 = r0[i13];

        specialinvoke $r16.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: void <init>(double[])>($r17);

        r1[i13] = $r16;

        i13 = i13 + 1;

        goto label04;

     label05:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r1);

        $d1 = (double) i0;

        d6 = 1.0 / $d1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        i14 = 0;

     label06:
        if i14 >= i0 goto label11;

        $i8 = i14 * i1;

        i3 = $i8 / i0;

        $i9 = i14 + 1;

        $i10 = $i9 * i1;

        i4 = $i10 / i0;

        i5 = i4 - i3;

        r3 = newmultiarray (double)[i5][i2];

        r4 = newarray (double)[i2];

        i15 = i3;

        i16 = 0;

     label07:
        if i15 >= i4 goto label10;

        i17 = 0;

     label08:
        if i17 >= i2 goto label09;

        $r13 = r1[i15];

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow: double[] getRow()>();

        d0 = $r14[i17];

        $d4 = r4[i17];

        $d5 = $d4 + d0;

        r4[i17] = $d5;

        $r15 = r3[i16];

        $r15[i17] = d0;

        i17 = i17 + 1;

        goto label08;

     label09:
        i15 = i15 + 1;

        i16 = i16 + 1;

        goto label07;

     label10:
        $d2 = (double) i5;

        $d3 = 1.0 / $d2;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void scaleInPlace(double,double[])>($d3, r4);

        $r8 = new org.apache.commons.math3.stat.correlation.Covariance;

        specialinvoke $r8.<org.apache.commons.math3.stat.correlation.Covariance: void <init>(double[][])>(r3);

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()>();

        r26 = interfaceinvoke $r9.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        $r10 = new org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        specialinvoke $r10.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: void <init>(double[],double[][])>(r4, r26);

        $r11 = new org.apache.commons.math3.util.Pair;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        specialinvoke $r11.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r12, $r10);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r11);

        i14 = i14 + 1;

        goto label06;

     label11:
        $r7 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        specialinvoke $r7.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>($r6);

        return $r7;
    }

    public double getLogLikelihood()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $d0 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double logLikelihood>;

        return $d0;
    }

    public org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution getFittedModel()
    {
        org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization r0;
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution $r1, $r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;

        $r1 = new org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        $r2 = r0.<org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution fittedModel>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List getComponents()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: void <init>(java.util.List)>($r3);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: double DEFAULT_THRESHOLD> = 1.0E-5;

        <org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization: int DEFAULT_MAX_ITERATIONS> = 1000;

        return;
    }
}
