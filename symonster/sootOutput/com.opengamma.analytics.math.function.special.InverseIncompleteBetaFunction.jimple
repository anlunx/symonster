public class com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction extends com.opengamma.analytics.math.function.Function1D
{
    private final double _a;
    private final double _b;
    private final com.opengamma.analytics.math.function.Function1D _lnGamma;
    private final com.opengamma.analytics.math.function.Function1D _beta;
    private static final double EPS;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction r0;
        double d0, d1;
        com.opengamma.analytics.math.function.special.NaturalLogGammaFunction $r1;
        com.opengamma.analytics.math.function.special.IncompleteBetaFunction $r2;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        $r1 = new com.opengamma.analytics.math.function.special.NaturalLogGammaFunction;

        specialinvoke $r1.<com.opengamma.analytics.math.function.special.NaturalLogGammaFunction: void <init>()>();

        r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma> = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d0, "a");

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d1, "b");

        r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a> = d0;

        r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b> = d1;

        $r2 = new com.opengamma.analytics.math.function.special.IncompleteBetaFunction;

        specialinvoke $r2.<com.opengamma.analytics.math.function.special.IncompleteBetaFunction: void <init>(double,double)>(d0, d1);

        r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _beta> = $r2;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction r0;
        java.lang.Double r1, $r2, $r5, $r7, $r10, $r12, $r14, $r16, $r18, $r20;
        double d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, d103, $d104, d105, d106, d107, d108, d109, d110, d111, d112, d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, d124, d125, d126, d127, d128;
        boolean $z0, $z1, $z2;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        com.opengamma.analytics.math.MathException $r3;
        com.opengamma.analytics.math.function.Function1D $r4, $r9, $r13, $r17;
        java.lang.Object $r6, $r11, $r15, $r19;
        java.lang.IllegalArgumentException $r8;
        int i8;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction;

        r1 := @parameter0: java.lang.Double;

        $d5 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.opengamma.util.ArgumentChecker: boolean isInRangeInclusive(double,double,double)>(0.0, 1.0, $d5);

        if $z0 != 0 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must lie in the range 0 to 1");

        throw $r8;

     label01:
        $d6 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        d103 = $d6 - 1.0;

        $d7 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        d4 = $d7 - 1.0;

        $d8 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $b0 = $d8 cmpl 1.0;

        if $b0 < 0 goto label05;

        $d65 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $b5 = $d65 cmpl 1.0;

        if $b5 < 0 goto label05;

        $d66 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b6 = $d66 cmpg 0.5;

        if $b6 >= 0 goto label02;

        $d104 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        goto label03;

     label02:
        $d67 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d104 = 1.0 - $d67;

     label03:
        $d68 = staticinvoke <java.lang.Math: double log(double)>($d104);

        $d69 = -2.0 * $d68;

        d105 = staticinvoke <java.lang.Math: double sqrt(double)>($d69);

        $d70 = d105 * 0.27061;

        $d75 = 2.30753 + $d70;

        $d71 = d105 * 0.04481;

        $d72 = 0.99229 + $d71;

        $d73 = d105 * $d72;

        $d74 = 1.0 + $d73;

        $d76 = $d75 / $d74;

        d106 = $d76 - d105;

        $b7 = d106 cmpg 0.5;

        if $b7 >= 0 goto label04;

        d106 = d106 * -1.0;

     label04:
        $d77 = staticinvoke <java.lang.Math: double sqrt(double)>(d106);

        $d78 = $d77 - 3.0;

        d103 = $d78 / 6.0;

        $d79 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d80 = 2.0 * $d79;

        $d81 = $d80 - 1.0;

        d107 = 1.0 / $d81;

        $d82 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d83 = 2.0 * $d82;

        $d84 = $d83 - 1.0;

        d108 = 1.0 / $d84;

        $d85 = d107 + d108;

        d1 = 2.0 / $d85;

        $d86 = d103 + d1;

        $d87 = staticinvoke <java.lang.Math: double sqrt(double)>($d86);

        $d88 = d106 * $d87;

        $d95 = $d88 / d1;

        $d93 = d108 - d107;

        $d91 = d103 + 0.8333333333333334;

        $d89 = 3.0 * d1;

        $d90 = 2.0 / $d89;

        $d92 = $d91 - $d90;

        $d94 = $d93 * $d92;

        d109 = $d95 - $d94;

        $d99 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d97 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d96 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d100 = $d97 + $d96;

        $d98 = 2.0 * d109;

        $d101 = staticinvoke <java.lang.Math: double exp(double)>($d98);

        $d102 = $d100 + $d101;

        d110 = $d99 / $d102;

        goto label07;

     label05:
        $d12 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d10 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d9 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d11 = $d10 + $d9;

        $d13 = $d12 / $d11;

        d2 = staticinvoke <java.lang.Math: double log(double)>($d13);

        $d17 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d15 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d14 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d16 = $d15 + $d14;

        $d18 = $d17 / $d16;

        d3 = staticinvoke <java.lang.Math: double log(double)>($d18);

        $d19 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d20 = $d19 * d2;

        $d21 = staticinvoke <java.lang.Math: double exp(double)>($d20);

        $d22 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        d111 = $d21 / $d22;

        $d23 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d24 = $d23 * d3;

        $d25 = staticinvoke <java.lang.Math: double exp(double)>($d24);

        $d26 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        d112 = $d25 / $d26;

        d113 = d111 + d112;

        $d27 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d28 = d111 / d113;

        $b1 = $d27 cmpg $d28;

        if $b1 >= 0 goto label06;

        $d59 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d60 = $d59 * d113;

        $d61 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d64 = $d60 * $d61;

        $d62 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d63 = 1.0 / $d62;

        d110 = staticinvoke <java.lang.Math: double pow(double,double)>($d64, $d63);

        goto label07;

     label06:
        $d29 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d30 = $d29 * d113;

        $d31 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d32 = 1.0 - $d31;

        $d35 = $d30 * $d32;

        $d33 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d34 = 1.0 / $d33;

        $d36 = staticinvoke <java.lang.Math: double pow(double,double)>($d35, $d34);

        d110 = 1.0 - $d36;

     label07:
        $r9 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma>;

        $d114 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d114);

        $r11 = virtualinvoke $r9.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r10);

        $r12 = (java.lang.Double) $r11;

        $d115 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d116 = neg $d115;

        $r13 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma>;

        $d117 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d117);

        $r15 = virtualinvoke $r13.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r14);

        $r16 = (java.lang.Double) $r15;

        $d118 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $d119 = $d116 - $d118;

        $r17 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _lnGamma>;

        $d120 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _a>;

        $d121 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double _b>;

        $d122 = $d120 + $d121;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d122);

        $r19 = virtualinvoke $r17.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r18);

        $r20 = (java.lang.Double) $r19;

        $d123 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        d124 = $d119 + $d123;

        i8 = 0;

     label08:
        if i8 >= 10 goto label14;

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d110, 0.0, 1.0E-16);

        if $z1 != 0 goto label09;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d110, 1.0, 1.0E-16);

        if $z2 == 0 goto label10;

     label09:
        $r3 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r3.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("a or b too small for accurate evaluation");

        throw $r3;

     label10:
        $r4 = r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: com.opengamma.analytics.math.function.Function1D _beta>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d110);

        $r6 = virtualinvoke $r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r5);

        $r7 = (java.lang.Double) $r6;

        $d37 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d38 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d125 = $d37 - $d38;

        $d39 = staticinvoke <java.lang.Math: double log(double)>(d110);

        $d41 = d103 * $d39;

        $d40 = 1.0 - d110;

        $d42 = staticinvoke <java.lang.Math: double log(double)>($d40);

        $d43 = d4 * $d42;

        $d44 = $d41 + $d43;

        $d45 = $d44 + d124;

        d126 = staticinvoke <java.lang.Math: double exp(double)>($d45);

        d127 = d125 / d126;

        $d48 = d103 / d110;

        $d46 = 1.0 - d110;

        $d47 = d4 / $d46;

        $d49 = $d48 - $d47;

        $d50 = d127 * $d49;

        $d51 = staticinvoke <java.lang.Math: double min(double,double)>(1.0, $d50);

        $d52 = 0.5 * $d51;

        $d53 = 1.0 - $d52;

        d128 = d127 / $d53;

        d110 = d110 - d128;

        $b2 = d110 cmpg 0.0;

        if $b2 > 0 goto label11;

        $d58 = d110 + d128;

        d110 = 0.5 * $d58;

     label11:
        $b3 = d110 cmpl 1.0;

        if $b3 < 0 goto label12;

        $d56 = d110 + d128;

        $d57 = $d56 + 1.0;

        d110 = 0.5 * $d57;

     label12:
        $d54 = staticinvoke <java.lang.Math: double abs(double)>(d128);

        $d55 = 1.0E-9 * d110;

        $b4 = $d54 cmpg $d55;

        if $b4 >= 0 goto label13;

        if i8 <= 0 goto label13;

        goto label14;

     label13:
        i8 = i8 + 1;

        goto label08;

     label14:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d110);

        return $r2;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.function.special.InverseIncompleteBetaFunction: double EPS> = 1.0E-9;

        return;
    }
}
