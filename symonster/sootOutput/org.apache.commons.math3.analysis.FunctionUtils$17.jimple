final class org.apache.commons.math3.analysis.FunctionUtils$17 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction
{
    final org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f;

    void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        double[] r1;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: double value(double[])>(r1);

        return $d0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$17 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        double[] r2, r3, r22;
        int[] r4;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r16, $r18;
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction $r7, $r8;
        org.apache.commons.math3.analysis.MultivariateVectorFunction $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;
        org.apache.commons.math3.exception.DimensionMismatchException $r15, $r17;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r19;
        java.lang.Integer $r20, $r21;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$17;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $r5 = r1[0];

        i0 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r6 = r1[0];

        i1 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        i2 = lengthof r1;

        if i1 <= 1 goto label01;

        $r19 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r19.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r20, $r21, 1);

        throw $r19;

     label01:
        i9 = 0;

     label02:
        if i9 >= i2 goto label05;

        $r13 = r1[i9];

        $i5 = virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        if $i5 == i0 goto label03;

        $r17 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r18 = r1[i9];

        $i8 = virtualinvoke $r18.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        specialinvoke $r17.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i8, i0);

        throw $r17;

     label03:
        $r14 = r1[i9];

        $i6 = virtualinvoke $r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        if $i6 == i1 goto label04;

        $r15 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r16 = r1[i9];

        $i7 = virtualinvoke $r16.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r15.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i7, i1);

        throw $r15;

     label04:
        i9 = i9 + 1;

        goto label02;

     label05:
        r22 = newarray (double)[i2];

        i10 = 0;

     label06:
        if i10 >= i2 goto label07;

        $r12 = r1[i10];

        $d5 = virtualinvoke $r12.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r22[i10] = $d5;

        i10 = i10 + 1;

        goto label06;

     label07:
        $r7 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        d6 = interfaceinvoke $r7.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: double value(double[])>(r22);

        $r8 = r0.<org.apache.commons.math3.analysis.FunctionUtils$17: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction val$f>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.DifferentiableMultivariateFunction: org.apache.commons.math3.analysis.MultivariateVectorFunction gradient()>();

        r2 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.MultivariateVectorFunction: double[] value(double[])>(r22);

        $i3 = i0 + 1;

        r3 = newarray (double)[$i3];

        r3[0] = d6;

        r4 = newarray (int)[i0];

        i11 = 0;

     label08:
        if i11 >= i0 goto label11;

        r4[i11] = 1;

        i12 = 0;

     label09:
        if i12 >= i2 goto label10;

        $i4 = i11 + 1;

        $d0 = r3[$i4];

        $d1 = r2[i12];

        $r11 = r1[i12];

        $d2 = virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r4);

        $d3 = $d1 * $d2;

        $d4 = $d0 + $d3;

        r3[$i4] = $d4;

        i12 = i12 + 1;

        goto label09;

     label10:
        r4[i11] = 0;

        i11 = i11 + 1;

        goto label08;

     label11:
        $r10 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>(i0, i1, r3);

        return $r10;
    }
}
