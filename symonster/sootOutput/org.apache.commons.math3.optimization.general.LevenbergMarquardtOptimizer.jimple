public class org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer extends org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer
{
    private int solvedCols;
    private double[] diagR;
    private double[] jacNorm;
    private double[] beta;
    private int[] permutation;
    private int rank;
    private double lmPar;
    private double[] lmDir;
    private final double initialStepBoundFactor;
    private final double costRelativeTolerance;
    private final double parRelativeTolerance;
    private final double orthoTolerance;
    private final double qrRankingThreshold;
    private double[] weightedResidual;
    private double[][] weightedJacobian;

    public void <init>()
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }

    public void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        $d0 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void <init>(double,org.apache.commons.math3.optimization.ConvergenceChecker,double,double,double,double)>(100.0, r1, 1.0E-10, 1.0E-10, 1.0E-10, $d0);

        return;
    }

    public void <init>(double, org.apache.commons.math3.optimization.ConvergenceChecker, double, double, double, double)
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0, d1, d2, d3, d4;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.optimization.ConvergenceChecker;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = d0;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance> = d1;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance> = d2;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance> = d3;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double qrRankingThreshold> = d4;

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void <init>(double,double,double,double,double)>(100.0, d0, d1, d2, $d3);

        return;
    }

    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double d0, d1, d2, d3, d4;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(null);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor> = d0;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance> = d1;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance> = d2;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance> = d3;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double qrRankingThreshold> = d4;

        return;
    }

    protected org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i9, $i10, $i12, $i16, $i27, i31, i32, i33, i34, i35, i37, i38, i39, i40, i41, i42, i43, $i44, i45, i46, i48, i49, i50;
        double[] r1, r2, r3, r4, r5, r6, r7, $r11, $r12, $r13, $r14, $r16, $r19, $r34, $r36, $r39, $r41, $r43, $r44, $r45, $r46, $r48, $r49, $r51, $r53, $r54, $r57, $r58, $r59, r60, r61, r62, r63, r65, r69;
        org.apache.commons.math3.linear.RealMatrix r8, $r18;
        org.apache.commons.math3.optimization.ConvergenceChecker r9;
        org.apache.commons.math3.optimization.PointVectorValuePair r10, $r17, $r20, $r21, r64;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, d56, d57, d58, d59, d60, d61, $d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, $d78, $d79, d80, $d81, $d82, $d83, $d84, d85, d86, $d87, $d88, $d89, $d90, $d91;
        int[] $r15, $r35, $r38, $r42, $r47, $r50, $r55;
        byte $b7, $b8, $b11, $b13, $b14, $b15, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b24, $b25, $b26, $b28, $b29, $b30, $b36, $b47, $b51, $b52, $b53;
        org.apache.commons.math3.exception.ConvergenceException $r22, $r26, $r30;
        java.lang.Object[] $r23, $r27, $r31;
        org.apache.commons.math3.exception.util.LocalizedFormats $r24, $r28, $r32;
        java.lang.Double $r25, $r29, $r33;
        boolean $z0, z1;
        double[][] $r40, $r52, $r56;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        $r11 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] getTarget()>();

        i0 = lengthof $r11;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] getStartPoint()>();

        i1 = lengthof r1;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols> = $i5;

        $r12 = newarray (double)[i1];

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR> = $r12;

        $r13 = newarray (double)[i1];

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm> = $r13;

        $r14 = newarray (double)[i1];

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] beta> = $r14;

        $r15 = newarray (int)[i1];

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation> = $r15;

        $r16 = newarray (double)[i1];

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir> = $r16;

        d56 = 0.0;

        d57 = 0.0;

        r2 = newarray (double)[i1];

        r3 = newarray (double)[i1];

        r60 = newarray (double)[i0];

        r61 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        r5 = newarray (double)[i1];

        r6 = newarray (double)[i1];

        r7 = newarray (double)[i1];

        r8 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math3.linear.RealMatrix getWeightSquareRoot()>();

        r62 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] computeObjectiveValue(double[])>(r1);

        r63 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] computeResiduals(double[])>(r62);

        $r17 = new org.apache.commons.math3.optimization.PointVectorValuePair;

        specialinvoke $r17.<org.apache.commons.math3.optimization.PointVectorValuePair: void <init>(double[],double[])>(r1, r62);

        r64 = $r17;

        d58 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double computeCost(double[])>(r63);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        z1 = 1;

        i31 = 0;

        r9 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

     label01:
        i31 = i31 + 1;

        r10 = r64;

        $r18 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void qrDecomposition(org.apache.commons.math3.linear.RealMatrix)>($r18);

        $r19 = interfaceinvoke r8.<org.apache.commons.math3.linear.RealMatrix: double[] operate(double[])>(r63);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual> = $r19;

        i32 = 0;

     label02:
        if i32 >= i0 goto label03;

        $r59 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        $d55 = $r59[i32];

        r4[i32] = $d55;

        i32 = i32 + 1;

        goto label02;

     label03:
        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void qTy(double[])>(r4);

        i33 = 0;

     label04:
        $i6 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i33 >= $i6 goto label05;

        $r55 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i34 = $r55[i33];

        $r56 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r58 = $r56[i33];

        $r57 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d54 = $r57[i34];

        $r58[i34] = $d54;

        i33 = i33 + 1;

        goto label04;

     label05:
        if z1 == 0 goto label11;

        d59 = 0.0;

        i35 = 0;

     label06:
        if i35 >= i1 goto label08;

        $r54 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d60 = $r54[i35];

        $b30 = d60 cmpl 0.0;

        if $b30 != 0 goto label07;

        d60 = 1.0;

     label07:
        $d52 = r1[i35];

        d61 = d60 * $d52;

        $d53 = d61 * d61;

        d59 = d59 + $d53;

        r2[i35] = d60;

        i35 = i35 + 1;

        goto label06;

     label08:
        d57 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d59);

        $b29 = d57 cmpl 0.0;

        if $b29 != 0 goto label09;

        $d62 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        goto label10;

     label09:
        $d51 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double initialStepBoundFactor>;

        $d62 = $d51 * d57;

     label10:
        d56 = $d62;

     label11:
        d63 = 0.0;

        $b36 = d58 cmpl 0.0;

        if $b36 == 0 goto label16;

        i37 = 0;

     label12:
        $i27 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i37 >= $i27 goto label16;

        $r50 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i38 = $r50[i37];

        $r51 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        d64 = $r51[i38];

        $b28 = d64 cmpl 0.0;

        if $b28 == 0 goto label15;

        d65 = 0.0;

        i39 = 0;

     label13:
        if i39 > i37 goto label14;

        $r52 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r53 = $r52[i39];

        $d49 = $r53[i38];

        $d48 = r4[i39];

        $d50 = $d49 * $d48;

        d65 = d65 + $d50;

        i39 = i39 + 1;

        goto label13;

     label14:
        $d45 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d65);

        $d46 = d64 * d58;

        $d47 = $d45 / $d46;

        d63 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d63, $d47);

     label15:
        i37 = i37 + 1;

        goto label12;

     label16:
        $d2 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $b7 = d63 cmpg $d2;

        if $b7 > 0 goto label17;

        virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void setCost(double)>(d58);

        $r49 = virtualinvoke r64.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getPoint()>();

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] point> = $r49;

        return r64;

     label17:
        i40 = 0;

     label18:
        if i40 >= i1 goto label19;

        $d43 = r2[i40];

        $r48 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        $d42 = $r48[i40];

        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d43, $d42);

        r2[i40] = $d44;

        i40 = i40 + 1;

        goto label18;

     label19:
        d66 = 0.0;

     label20:
        $b8 = d66 cmpg 1.0E-4;

        if $b8 >= 0 goto label54;

        i41 = 0;

     label21:
        $i9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i41 >= $i9 goto label22;

        $r47 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i2 = $r47[i41];

        $d41 = r1[i2];

        r3[i2] = $d41;

        i41 = i41 + 1;

        goto label21;

     label22:
        d67 = d58;

        r65 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual> = r60;

        r60 = r65;

        r61 = r62;

        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void determineLMParameter(double[],double,double[],double[],double[],double[])>(r4, d56, r2, r5, r6, r7);

        d68 = 0.0;

        i42 = 0;

     label23:
        $i10 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i42 >= $i10 goto label24;

        $r42 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i3 = $r42[i42];

        $r44 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r43 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d33 = $r43[i3];

        $d34 = neg $d33;

        $r44[i3] = $d34;

        $d36 = r3[i3];

        $r45 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d35 = $r45[i3];

        $d37 = $d36 + $d35;

        r1[i3] = $d37;

        $d39 = r2[i3];

        $r46 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d38 = $r46[i3];

        d69 = $d39 * $d38;

        $d40 = d69 * d69;

        d68 = d68 + $d40;

        i42 = i42 + 1;

        goto label23;

     label24:
        d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d68);

        if z1 == 0 goto label25;

        d56 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d56, d70);

     label25:
        r62 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] computeObjectiveValue(double[])>(r1);

        r63 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] computeResiduals(double[])>(r62);

        $r20 = new org.apache.commons.math3.optimization.PointVectorValuePair;

        specialinvoke $r20.<org.apache.commons.math3.optimization.PointVectorValuePair: void <init>(double[],double[])>(r1, r62);

        r64 = $r20;

        d58 = virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double computeCost(double[])>(r63);

        d71 = -1.0;

        $d3 = 0.1 * d58;

        $b11 = $d3 cmpg d67;

        if $b11 >= 0 goto label26;

        d72 = d58 / d67;

        $d32 = d72 * d72;

        d71 = 1.0 - $d32;

     label26:
        i43 = 0;

     label27:
        $i44 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i43 >= $i44 goto label30;

        $r38 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i4 = $r38[i43];

        $r39 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        d73 = $r39[i4];

        r5[i43] = 0.0;

        i45 = 0;

     label28:
        if i45 > i43 goto label29;

        $d30 = r5[i45];

        $r40 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r41 = $r40[i45];

        $d28 = $r41[i4];

        $d29 = $d28 * d73;

        $d31 = $d30 + $d29;

        r5[i45] = $d31;

        i45 = i45 + 1;

        goto label28;

     label29:
        i43 = i43 + 1;

        goto label27;

     label30:
        d74 = 0.0;

        i46 = 0;

     label31:
        $i12 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i46 >= $i12 goto label32;

        $d26 = r5[i46];

        $d25 = r5[i46];

        $d27 = $d26 * $d25;

        d74 = d74 + $d27;

        i46 = i46 + 1;

        goto label31;

     label32:
        d75 = d67 * d67;

        d76 = d74 / d75;

        $d4 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d5 = $d4 * d70;

        $d6 = $d5 * d70;

        d77 = $d6 / d75;

        $d7 = 2.0 * d77;

        d0 = d76 + $d7;

        $d8 = d76 + d77;

        d1 = neg $d8;

        $b13 = d0 cmpl 0.0;

        if $b13 != 0 goto label33;

        $d78 = 0.0;

        goto label34;

     label33:
        $d78 = d71 / d0;

     label34:
        d66 = $d78;

        $b14 = $d78 cmpg 0.25;

        if $b14 > 0 goto label39;

        $b24 = d71 cmpg 0.0;

        if $b24 >= 0 goto label35;

        $d24 = 0.5 * d1;

        $d22 = 0.5 * d71;

        $d23 = d1 + $d22;

        $d79 = $d24 / $d23;

        goto label36;

     label35:
        $d79 = 0.5;

     label36:
        d80 = $d79;

        $d21 = 0.1 * d58;

        $b25 = $d21 cmpl d67;

        if $b25 >= 0 goto label37;

        $b26 = $d79 cmpg 0.1;

        if $b26 >= 0 goto label38;

     label37:
        d80 = 0.1;

     label38:
        $d81 = 10.0 * d70;

        $d82 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d56, $d81);

        d56 = d80 * $d82;

        $d83 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d84 = $d83 / d80;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d84;

        goto label41;

     label39:
        $d9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b15 = $d9 cmpl 0.0;

        if $b15 == 0 goto label40;

        $b23 = $d78 cmpl 0.75;

        if $b23 < 0 goto label41;

     label40:
        d56 = 2.0 * d70;

        $d10 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d11 = $d10 * 0.5;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d11;

     label41:
        $b47 = d66 cmpl 1.0E-4;

        if $b47 < 0 goto label44;

        z1 = 0;

        d85 = 0.0;

        i48 = 0;

     label42:
        if i48 >= i1 goto label43;

        $d19 = r2[i48];

        $d18 = r1[i48];

        d86 = $d19 * $d18;

        $d20 = d86 * d86;

        d85 = d85 + $d20;

        i48 = i48 + 1;

        goto label42;

     label43:
        d57 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d85);

        if r9 == null goto label47;

        $z0 = interfaceinvoke r9.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i31, r10, $r20);

        if $z0 == 0 goto label47;

        virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void setCost(double)>(d58);

        $r36 = virtualinvoke $r20.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getPoint()>();

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] point> = $r36;

        return $r20;

     label44:
        d58 = d67;

        i49 = 0;

     label45:
        $i16 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i49 >= $i16 goto label46;

        $r35 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i50 = $r35[i49];

        $d17 = r3[i50];

        r1[i50] = $d17;

        i49 = i49 + 1;

        goto label45;

     label46:
        r69 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual>;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] weightedResidual> = r65;

        r60 = r69;

        r62 = r61;

        $r21 = new org.apache.commons.math3.optimization.PointVectorValuePair;

        specialinvoke $r21.<org.apache.commons.math3.optimization.PointVectorValuePair: void <init>(double[],double[])>(r1, r62);

        r64 = $r21;

     label47:
        $d87 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d71);

        $d88 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b51 = $d87 cmpg $d88;

        if $b51 > 0 goto label48;

        $d16 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $b21 = d0 cmpg $d16;

        if $b21 > 0 goto label48;

        $b22 = d66 cmpg 2.0;

        if $b22 <= 0 goto label49;

     label48:
        $d89 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $d90 = $d89 * d57;

        $b52 = d56 cmpg $d90;

        if $b52 > 0 goto label50;

     label49:
        virtualinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void setCost(double)>(d58);

        $r34 = virtualinvoke r64.<org.apache.commons.math3.optimization.PointVectorValuePair: double[] getPoint()>();

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] point> = $r34;

        return r64;

     label50:
        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d71);

        $b17 = $d12 cmpg 2.2204E-16;

        if $b17 > 0 goto label51;

        $b19 = d0 cmpg 2.2204E-16;

        if $b19 > 0 goto label51;

        $b20 = d66 cmpg 2.0;

        if $b20 > 0 goto label51;

        $r30 = new org.apache.commons.math3.exception.ConvergenceException;

        $r32 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_COST_RELATIVE_TOLERANCE>;

        $r31 = newarray (java.lang.Object)[1];

        $d15 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double costRelativeTolerance>;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        $r31[0] = $r33;

        specialinvoke $r30.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r32, $r31);

        throw $r30;

     label51:
        $d91 = 2.2204E-16 * d57;

        $b53 = d56 cmpg $d91;

        if $b53 > 0 goto label52;

        $r26 = new org.apache.commons.math3.exception.ConvergenceException;

        $r28 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE>;

        $r27 = newarray (java.lang.Object)[1];

        $d14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double parRelativeTolerance>;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d14);

        $r27[0] = $r29;

        specialinvoke $r26.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r28, $r27);

        throw $r26;

     label52:
        $b18 = d63 cmpg 2.2204E-16;

        if $b18 > 0 goto label53;

        $r22 = new org.apache.commons.math3.exception.ConvergenceException;

        $r24 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats TOO_SMALL_ORTHOGONALITY_TOLERANCE>;

        $r23 = newarray (java.lang.Object)[1];

        $d13 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double orthoTolerance>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        $r23[0] = $r25;

        specialinvoke $r22.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r24, $r23);

        throw $r22;

     label53:
        goto label20;

     label54:
        goto label01;
    }

    private void determineLMParameter(double[], double, double[], double[], double[], double[])
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, r5, $r7, $r12, $r15, $r19, $r21, $r23, $r27, $r29, $r30, $r31, $r33, $r35, $r37, $r39;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, $d84, $d85, $d86;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i12, $i15, $i16, $i19, $i20, $i21, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, $i41, i42, i43, i44, i45, $i46, i47, i48, i49, i50, $i51, i52, i53, i54, i55, i56;
        double[][] $r6, $r11, $r18, $r22, $r34;
        byte $b6, $b9, $b10, $b11, $b13, $b14, $b17, $b18, $b22, $b23;
        int[] $r8, $r9, $r10, $r13, $r14, $r16, $r17, $r20, $r24, $r25, $r26, $r28, $r32, $r36, $r38;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        r5 := @parameter5: double[];

        $r6 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r7 = $r6[0];

        i0 = lengthof $r7;

        i30 = 0;

     label01:
        $i3 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        if i30 >= $i3 goto label02;

        $r39 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r38 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i29 = $r38[i30];

        $d62 = r1[i30];

        $r39[$i29] = $d62;

        i30 = i30 + 1;

        goto label01;

     label02:
        i31 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank>;

     label03:
        if i31 >= i0 goto label04;

        $r37 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r36 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i28 = $r36[i31];

        $r37[$i28] = 0.0;

        i31 = i31 + 1;

        goto label03;

     label04:
        $i4 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        i32 = $i4 - 1;

     label05:
        if i32 < 0 goto label08;

        $r28 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i1 = $r28[i32];

        $r29 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d57 = $r29[i1];

        $r30 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d56 = $r30[i1];

        d63 = $d57 / $d56;

        i33 = 0;

     label06:
        if i33 >= i32 goto label07;

        $r33 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r32 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i27 = $r32[i33];

        $d60 = $r33[$i27];

        $r34 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r35 = $r34[i33];

        $d58 = $r35[i1];

        $d59 = d63 * $d58;

        $d61 = $d60 - $d59;

        $r33[$i27] = $d61;

        i33 = i33 + 1;

        goto label06;

     label07:
        $r31 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r31[i1] = d63;

        i32 = i32 + -1;

        goto label05;

     label08:
        d64 = 0.0;

        i34 = 0;

     label09:
        $i5 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i34 >= $i5 goto label10;

        $r26 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i2 = $r26[i34];

        $d54 = r2[i2];

        $r27 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d53 = $r27[i2];

        d65 = $d54 * $d53;

        r3[i2] = d65;

        $d55 = d65 * d65;

        d64 = d64 + $d55;

        i34 = i34 + 1;

        goto label09;

     label10:
        d66 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d64);

        d67 = d66 - d0;

        $d3 = 0.1 * d0;

        $b6 = d67 cmpg $d3;

        if $b6 > 0 goto label11;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = 0.0;

        return;

     label11:
        d68 = 0.0;

        $i8 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank>;

        $i7 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if $i8 != $i7 goto label18;

        i35 = 0;

     label12:
        $i24 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i35 >= $i24 goto label13;

        $r25 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i36 = $r25[i35];

        $d51 = r3[i36];

        $d49 = r2[i36];

        $d50 = $d49 / d66;

        $d52 = $d51 * $d50;

        r3[i36] = $d52;

        i35 = i35 + 1;

        goto label12;

     label13:
        d69 = 0.0;

        i37 = 0;

     label14:
        $i25 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i37 >= $i25 goto label17;

        $r20 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i38 = $r20[i37];

        d70 = 0.0;

        i39 = 0;

     label15:
        if i39 >= i37 goto label16;

        $r22 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r23 = $r22[i39];

        $d47 = $r23[i38];

        $r24 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i26 = $r24[i39];

        $d46 = r3[$i26];

        $d48 = $d47 * $d46;

        d70 = d70 + $d48;

        i39 = i39 + 1;

        goto label15;

     label16:
        $d42 = r3[i38];

        $d44 = $d42 - d70;

        $r21 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d43 = $r21[i38];

        d71 = $d44 / $d43;

        r3[i38] = d71;

        $d45 = d71 * d71;

        d69 = d69 + $d45;

        i37 = i37 + 1;

        goto label14;

     label17:
        $d41 = d0 * d69;

        d68 = d67 / $d41;

     label18:
        d72 = 0.0;

        i40 = 0;

     label19:
        $i41 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i40 >= $i41 goto label22;

        $r17 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i42 = $r17[i40];

        d73 = 0.0;

        i43 = 0;

     label20:
        if i43 > i40 goto label21;

        $r18 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r19 = $r18[i43];

        $d39 = $r19[i42];

        $d38 = r1[i43];

        $d40 = $d39 * $d38;

        d73 = d73 + $d40;

        i43 = i43 + 1;

        goto label20;

     label21:
        $d36 = r2[i42];

        d74 = d73 / $d36;

        $d37 = d74 * d74;

        d72 = d72 + $d37;

        i40 = i40 + 1;

        goto label19;

     label22:
        d75 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d72);

        d76 = d75 / d0;

        $b9 = d76 cmpl 0.0;

        if $b9 != 0 goto label23;

        $d35 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d0, 0.1);

        d76 = 2.2251E-308 / $d35;

     label23:
        $d4 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d4, d68);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d76, $d5);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d6;

        $d7 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b10 = $d7 cmpl 0.0;

        if $b10 != 0 goto label24;

        $d34 = d75 / d66;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d34;

     label24:
        i44 = 10;

     label25:
        if i44 < 0 goto label43;

        $d8 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $b11 = $d8 cmpl 0.0;

        if $b11 != 0 goto label26;

        $d32 = 0.001 * d76;

        $d33 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(2.2251E-308, $d32);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d33;

     label26:
        $d9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d9);

        i45 = 0;

     label27:
        $i46 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i45 >= $i46 goto label28;

        $r16 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i47 = $r16[i45];

        $d30 = r2[i47];

        $d31 = d1 * $d30;

        r3[i47] = $d31;

        i45 = i45 + 1;

        goto label27;

     label28:
        specialinvoke r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: void determineLMDirection(double[],double[],double[],double[])>(r1, r3, r4, r5);

        d77 = 0.0;

        i48 = 0;

     label29:
        $i12 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i48 >= $i12 goto label30;

        $r14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i49 = $r14[i48];

        $d28 = r2[i49];

        $r15 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d27 = $r15[i49];

        d78 = $d28 * $d27;

        r5[i49] = d78;

        $d29 = d78 * d78;

        d77 = d77 + $d29;

        i48 = i48 + 1;

        goto label29;

     label30:
        d79 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d77);

        d80 = d67;

        d67 = d79 - d0;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d67);

        $d11 = 0.1 * d0;

        $b13 = $d10 cmpg $d11;

        if $b13 <= 0 goto label31;

        $b14 = d68 cmpl 0.0;

        if $b14 != 0 goto label32;

        $b22 = d67 cmpg d80;

        if $b22 > 0 goto label32;

        $b23 = d80 cmpg 0.0;

        if $b23 >= 0 goto label32;

     label31:
        return;

     label32:
        i50 = 0;

     label33:
        $i51 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i50 >= $i51 goto label34;

        $r13 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i52 = $r13[i50];

        $d24 = r5[i52];

        $d23 = r2[i52];

        $d25 = $d24 * $d23;

        $d26 = $d25 / d79;

        r3[i52] = $d26;

        i50 = i50 + 1;

        goto label33;

     label34:
        i53 = 0;

     label35:
        $i15 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i53 >= $i15 goto label38;

        $r9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i54 = $r9[i53];

        $d17 = r3[i54];

        $d16 = r4[i53];

        $d18 = $d17 / $d16;

        r3[i54] = $d18;

        d2 = r3[i54];

        i55 = i53 + 1;

     label36:
        $i20 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i55 >= $i20 goto label37;

        $r10 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i21 = $r10[i55];

        $d21 = r3[$i21];

        $r11 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r12 = $r11[i55];

        $d19 = $r12[i54];

        $d20 = $d19 * d2;

        $d22 = $d21 - $d20;

        r3[$i21] = $d22;

        i55 = i55 + 1;

        goto label36;

     label37:
        i53 = i53 + 1;

        goto label35;

     label38:
        d81 = 0.0;

        i56 = 0;

     label39:
        $i16 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i56 >= $i16 goto label40;

        $r8 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i19 = $r8[i56];

        d82 = r3[$i19];

        $d15 = d82 * d82;

        d81 = d81 + $d15;

        i56 = i56 + 1;

        goto label39;

     label40:
        $d12 = d0 * d81;

        d83 = d67 / $d12;

        $b17 = d67 cmpl 0.0;

        if $b17 <= 0 goto label41;

        $d14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d68 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d68, $d14);

        goto label42;

     label41:
        $b18 = d67 cmpg 0.0;

        if $b18 >= 0 goto label42;

        $d13 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        d76 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(d76, $d13);

     label42:
        $d84 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar>;

        $d85 = $d84 + d83;

        $d86 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d68, $d85);

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double lmPar> = $d86;

        i44 = i44 + -1;

        goto label25;

     label43:
        return;
    }

    private void determineLMDirection(double[], double[], double[], double[])
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, r2, r3, r4, $r6, $r9, $r13, $r16, $r17, $r20, $r22, $r24, $r26, $r28, $r29, $r33, $r34, $r35;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, $i22, i23, $i24, i25, i26, $i27, i28, i29, i30, i31, $i32;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, d49, d50, d51, d52, d53, d54, d55;
        int[] $r5, $r7, $r10, $r12, $r15, $r18, $r27, $r32;
        double[][] $r8, $r11, $r14, $r19, $r21, $r23, $r25, $r30, $r31;
        byte $b5, $b7, $b10, $b11;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i16 = 0;

     label01:
        $i1 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i16 >= $i1 goto label04;

        $r27 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i17 = $r27[i16];

        i18 = i16 + 1;

     label02:
        $i14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i18 >= $i14 goto label03;

        $r30 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r34 = $r30[i18];

        $r31 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r33 = $r31[i16];

        $r32 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i15 = $r32[i18];

        $d47 = $r33[$i15];

        $r34[i17] = $d47;

        i18 = i18 + 1;

        goto label02;

     label03:
        $r29 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r28 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $d45 = $r28[i17];

        $r29[i16] = $d45;

        $d46 = r1[i16];

        r4[i16] = $d46;

        i16 = i16 + 1;

        goto label01;

     label04:
        i19 = 0;

     label05:
        $i2 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i19 >= $i2 goto label13;

        $r10 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i20 = $r10[i19];

        d48 = r2[i20];

        $b7 = d48 cmpl 0.0;

        if $b7 == 0 goto label06;

        $i13 = i19 + 1;

        $i12 = lengthof r3;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r3, $i13, $i12, 0.0);

     label06:
        r3[i19] = d48;

        d49 = 0.0;

        i21 = i19;

     label07:
        $i22 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i21 >= $i22 goto label12;

        $r18 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i0 = $r18[i21];

        $d14 = r3[i21];

        $b10 = $d14 cmpl 0.0;

        if $b10 == 0 goto label11;

        $r19 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r20 = $r19[i21];

        d0 = $r20[i0];

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d16 = r3[i21];

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d16);

        $b11 = $d15 cmpg $d17;

        if $b11 >= 0 goto label08;

        $d41 = r3[i21];

        d50 = d0 / $d41;

        $d42 = d50 * d50;

        $d43 = 1.0 + $d42;

        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d43);

        d51 = 1.0 / $d44;

        d52 = d51 * d50;

        goto label09;

     label08:
        $d18 = r3[i21];

        d53 = $d18 / d0;

        $d19 = d53 * d53;

        $d20 = 1.0 + $d19;

        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d20);

        d52 = 1.0 / $d21;

        d51 = d52 * d53;

     label09:
        $r21 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r22 = $r21[i21];

        $d24 = d52 * d0;

        $d22 = r3[i21];

        $d23 = d51 * $d22;

        $d25 = $d24 + $d23;

        $r22[i0] = $d25;

        $d26 = r4[i21];

        $d28 = d52 * $d26;

        $d27 = d51 * d49;

        d54 = $d28 + $d27;

        $d30 = neg d51;

        $d29 = r4[i21];

        $d32 = $d30 * $d29;

        $d31 = d52 * d49;

        d49 = $d32 + $d31;

        r4[i21] = d54;

        i23 = i21 + 1;

     label10:
        $i24 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i23 >= $i24 goto label11;

        $r23 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r24 = $r23[i23];

        d1 = $r24[i0];

        $d35 = d52 * d1;

        $d33 = r3[i23];

        $d34 = d51 * $d33;

        d2 = $d35 + $d34;

        $d36 = neg d51;

        $d39 = $d36 * d1;

        $d37 = r3[i23];

        $d38 = d52 * $d37;

        $d40 = $d39 + $d38;

        r3[i23] = $d40;

        $r25 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r26 = $r25[i23];

        $r26[i0] = d2;

        i23 = i23 + 1;

        goto label10;

     label11:
        i21 = i21 + 1;

        goto label07;

     label12:
        $r11 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r13 = $r11[i19];

        $r12 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i8 = $r12[i19];

        $d12 = $r13[$i8];

        r3[i19] = $d12;

        $r14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r17 = $r14[i19];

        $r15 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i9 = $r15[i19];

        $r16 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $d13 = $r16[i19];

        $r17[$i9] = $d13;

        i19 = i19 + 1;

        goto label05;

     label13:
        i25 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        i26 = 0;

     label14:
        $i3 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i26 >= $i3 goto label17;

        $d11 = r3[i26];

        $b5 = $d11 cmpl 0.0;

        if $b5 != 0 goto label15;

        $i6 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i25 != $i6 goto label15;

        i25 = i26;

     label15:
        $i27 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        if i25 >= $i27 goto label16;

        r4[i26] = 0.0;

     label16:
        i26 = i26 + 1;

        goto label14;

     label17:
        if i25 <= 0 goto label21;

        i28 = i25 - 1;

     label18:
        if i28 < 0 goto label21;

        $r7 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i29 = $r7[i28];

        d55 = 0.0;

        i30 = i28 + 1;

     label19:
        if i30 >= i25 goto label20;

        $r8 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r9 = $r8[i30];

        $d9 = $r9[i29];

        $d8 = r4[i30];

        $d10 = $d9 * $d8;

        d55 = d55 + $d10;

        i30 = i30 + 1;

        goto label19;

     label20:
        $d4 = r4[i28];

        $d6 = $d4 - d55;

        $d5 = r3[i28];

        $d7 = $d6 / $d5;

        r4[i28] = $d7;

        i28 = i28 + -1;

        goto label18;

     label21:
        i31 = 0;

     label22:
        $r35 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $i32 = lengthof $r35;

        if i31 >= $i32 goto label23;

        $r6 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] lmDir>;

        $r5 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i4 = $r5[i31];

        $d3 = r4[i31];

        $r6[$i4] = $d3;

        i31 = i31 + 1;

        goto label22;

     label23:
        return;
    }

    private void qrDecomposition(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;
        int i0, i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d21, d22, $d23, d25, d26;
        double[][] $r3, $r4, $r5, $r11, $r15, $r17, $r20, $r22, $r24, $r32, $r37;
        double[] $r6, $r12, $r13, $r14, $r16, $r19, $r21, $r23, $r26, $r34, $r36, $r38;
        byte $b3, $b5, $b12;
        int[] $r7, $r8, $r9, $r10, $r18, $r25, $r33, $r35;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.ConvergenceException $r27;
        java.lang.Object[] $r28;
        org.apache.commons.math3.exception.util.LocalizedFormats $r29;
        java.lang.Integer $r30, $r31;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian> = $r3;

        $r4 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        i0 = lengthof $r4;

        $r5 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r6 = $r5[0];

        i1 = lengthof $r6;

        i14 = 0;

     label01:
        if i14 >= i1 goto label04;

        $r35 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r35[i14] = i14;

        d18 = 0.0;

        i15 = 0;

     label02:
        if i15 >= i0 goto label03;

        $r37 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r38 = $r37[i15];

        d19 = $r38[i14];

        $d17 = d19 * d19;

        d18 = d18 + $d17;

        i15 = i15 + 1;

        goto label02;

     label03:
        $r36 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] jacNorm>;

        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d18);

        $r36[i14] = $d16;

        i14 = i14 + 1;

        goto label01;

     label04:
        i16 = 0;

     label05:
        if i16 >= i1 goto label22;

        i17 = -1;

        d20 = #-Infinity;

        i18 = i16;

     label06:
        if i18 >= i1 goto label12;

        d21 = 0.0;

        i19 = i16;

     label07:
        if i19 >= i0 goto label08;

        $r32 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r34 = $r32[i19];

        $r33 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i13 = $r33[i18];

        d0 = $r34[$i13];

        $d15 = d0 * d0;

        d21 = d21 + $d15;

        i19 = i19 + 1;

        goto label07;

     label08:
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d21);

        if $z0 != 0 goto label09;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d21);

        if $z1 == 0 goto label10;

     label09:
        $r27 = new org.apache.commons.math3.exception.ConvergenceException;

        $r29 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN>;

        $r28 = newarray (java.lang.Object)[2];

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r28[0] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r28[1] = $r31;

        specialinvoke $r27.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r29, $r28);

        throw $r27;

     label10:
        $b12 = d21 cmpl d20;

        if $b12 <= 0 goto label11;

        i17 = i18;

        d20 = d21;

     label11:
        i18 = i18 + 1;

        goto label06;

     label12:
        $d2 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double qrRankingThreshold>;

        $b3 = d20 cmpg $d2;

        if $b3 > 0 goto label13;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank> = i16;

        return;

     label13:
        $r7 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i20 = $r7[i17];

        $r9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r8 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i4 = $r8[i16];

        $r9[i17] = $i4;

        $r10 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $r10[i16] = i20;

        $r11 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r12 = $r11[i16];

        d22 = $r12[i20];

        $b5 = d22 cmpl 0.0;

        if $b5 <= 0 goto label14;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d20);

        $d23 = neg $d14;

        goto label15;

     label14:
        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d20);

     label15:
        $d3 = d22 * $d23;

        $d4 = d20 - $d3;

        d1 = 1.0 / $d4;

        $r13 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] beta>;

        $r13[i20] = d1;

        $r14 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] diagR>;

        $r14[i20] = $d23;

        $r15 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r16 = $r15[i16];

        $d5 = $r16[i20];

        $d6 = $d5 - $d23;

        $r16[i20] = $d6;

        $i6 = i1 - 1;

        i21 = $i6 - i16;

     label16:
        if i21 <= 0 goto label21;

        d25 = 0.0;

        i22 = i16;

     label17:
        if i22 >= i0 goto label18;

        $r22 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r23 = $r22[i22];

        $d12 = $r23[i20];

        $r24 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r26 = $r24[i22];

        $r25 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i9 = i16 + i21;

        $i10 = $r25[$i9];

        $d11 = $r26[$i10];

        $d13 = $d12 * $d11;

        d25 = d25 + $d13;

        i22 = i22 + 1;

        goto label17;

     label18:
        d26 = d25 * d1;

        i23 = i16;

     label19:
        if i23 >= i0 goto label20;

        $r17 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r19 = $r17[i23];

        $r18 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        $i7 = i16 + i21;

        $i8 = $r18[$i7];

        $d9 = $r19[$i8];

        $r20 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r21 = $r20[i23];

        $d7 = $r21[i20];

        $d8 = d26 * $d7;

        $d10 = $d9 - $d8;

        $r19[$i8] = $d10;

        i23 = i23 + 1;

        goto label19;

     label20:
        i21 = i21 + -1;

        goto label16;

     label21:
        i16 = i16 + 1;

        goto label05;

     label22:
        $i2 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int solvedCols>;

        r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int rank> = $i2;

        return;
    }

    private void qTy(double[])
    {
        org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer r0;
        double[] r1, $r4, $r6, $r8, $r10;
        int i0, i1, i2, i3, i4, i5;
        double[][] $r2, $r3, $r7, $r9;
        int[] $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9;

        r0 := @this: org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        i0 = lengthof $r2;

        $r3 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i1 goto label6;

        $r5 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: int[] permutation>;

        i2 = $r5[i3];

        d8 = 0.0;

        i4 = i3;

     label2:
        if i4 >= i0 goto label3;

        $r9 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r10 = $r9[i4];

        $d6 = $r10[i2];

        $d5 = r1[i4];

        $d7 = $d6 * $d5;

        d8 = d8 + $d7;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r6 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[] beta>;

        $d0 = $r6[i2];

        d9 = d8 * $d0;

        i5 = i3;

     label4:
        if i5 >= i0 goto label5;

        $d3 = r1[i5];

        $r7 = r0.<org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer: double[][] weightedJacobian>;

        $r8 = $r7[i5];

        $d1 = $r8[i2];

        $d2 = d9 * $d1;

        $d4 = $d3 - $d2;

        r1[i5] = $d4;

        i5 = i5 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }
}
