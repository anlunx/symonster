public class org.apache.commons.math.complex.ComplexUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math.complex.ComplexUtils r0;

        r0 := @this: org.apache.commons.math.complex.ComplexUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math.complex.Complex polar2Complex(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math.complex.Complex $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_COMPLEX_MODULE>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        $r0 = new org.apache.commons.math.complex.Complex;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>(d1);

        $d3 = d0 * $d2;

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>(d1);

        $d5 = d0 * $d4;

        specialinvoke $r0.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d3, $d5);

        return $r0;
    }
}
