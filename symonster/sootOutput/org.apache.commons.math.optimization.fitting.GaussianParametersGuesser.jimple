public class org.apache.commons.math.optimization.fitting.GaussianParametersGuesser extends java.lang.Object
{
    private final org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] observations;
    private double[] parameters;

    public void <init>(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1, $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        org.apache.commons.math.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math.exception.NullArgumentException $r7;
        org.apache.commons.math.exception.util.LocalizedFormats $r8;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new org.apache.commons.math.exception.NullArgumentException;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INPUT_ARRAY>;

        specialinvoke $r7.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r8);

        throw $r7;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 3 goto label2;

        $r4 = new org.apache.commons.math.exception.NumberIsTooSmallException;

        $i1 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r4.<org.apache.commons.math.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 1);

        throw $r4;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]) $r2;

        r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] observations> = $r3;

        return;
    }

    public double[] guess()
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        double[] $r1, $r2, $r4, $r6;
        java.lang.Object $r3;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] $r5;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double[] parameters>;

        if $r1 != null goto label1;

        $r5 = r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] observations>;

        $r6 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double[] basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])>($r5);

        r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double[] parameters> = $r6;

     label1:
        $r2 = r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double[] parameters>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        return $r4;
    }

    private double[] basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1;
        double[] r2;
        int i0, i1, $i2, $i3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18;
        java.util.Comparator $r3;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint $r4, $r5, $r6, $r8, $r9;
        org.apache.commons.math.exception.OutOfRangeException $r7;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        $r3 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: java.util.Comparator createWeightedObservedPointComparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r3);

        r2 = newarray (double)[4];

        i0 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: int findMinY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])>(r1);

        $r4 = r1[i0];

        $d2 = virtualinvoke $r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        r2[0] = $d2;

        i1 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: int findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])>(r1);

        $r5 = r1[i1];

        $d3 = virtualinvoke $r5.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        r2[1] = $d3;

        $r6 = r1[i1];

        $d4 = virtualinvoke $r6.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        r2[2] = $d4;

     label1:
        $d9 = r2[0];

        $d6 = r2[1];

        $d5 = r2[0];

        $d7 = $d6 - $d5;

        $d8 = $d7 / 2.0;

        d17 = $d9 + $d8;

        d0 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[],int,int,double)>(r1, i1, -1, d17);

        d1 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: double interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[],int,int,double)>(r1, i1, 1, d17);

        d18 = d1 - d0;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $r8 = r1[$i3];

        $d15 = virtualinvoke $r8.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        $r9 = r1[0];

        $d16 = virtualinvoke $r9.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        d18 = $d15 - $d16;

     label4:
        $d10 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d11 = 2.0 * $d10;

        $d12 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        $d13 = 2.0 * $d12;

        $d14 = d18 / $d13;

        r2[3] = $d14;

        return r2;

        catch org.apache.commons.math.exception.OutOfRangeException from label1 to label2 with label3;
    }

    private int findMinY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1;
        int $i0, i2, i3;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint $r2, $r3;
        double $d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        i2 = 0;

        i3 = 1;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r2 = r1[i3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $r3 = r1[i2];

        $d1 = virtualinvoke $r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $b1 = $d0 cmpg $d1;

        if $b1 >= 0 goto label2;

        i2 = i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private int findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1;
        int $i0, i2, i3;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint $r2, $r3;
        double $d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        i2 = 0;

        i3 = 1;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r2 = r1[i3];

        $d0 = virtualinvoke $r2.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $r3 = r1[i2];

        $d1 = virtualinvoke $r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label2;

        i2 = i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private double interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math.exception.OutOfRangeException
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1, r2;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint r3, r4;
        byte $b2, $b3;
        org.apache.commons.math.exception.ZeroException $r5;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        if i1 != 0 goto label1;

        $r5 = new org.apache.commons.math.exception.ZeroException;

        specialinvoke $r5.<org.apache.commons.math.exception.ZeroException: void <init>()>();

        throw $r5;

     label1:
        r2 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[],int,int,double)>(r1, i0, i1, d0);

        r3 = r2[0];

        r4 = r2[1];

        $d1 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $b2 = $d1 cmpl d0;

        if $b2 != 0 goto label2;

        $d16 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        return $d16;

     label2:
        $d2 = virtualinvoke r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $b3 = $d2 cmpl d0;

        if $b3 != 0 goto label3;

        $d15 = virtualinvoke r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        return $d15;

     label3:
        $d3 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d4 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d5 = d0 - $d4;

        $d6 = virtualinvoke r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d7 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getX()>();

        $d8 = $d6 - $d7;

        $d9 = $d5 * $d8;

        $d10 = virtualinvoke r4.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d11 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $d12 = $d10 - $d11;

        $d13 = $d9 / $d12;

        $d14 = $d3 + $d13;

        return $d14;
    }

    private org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double) throws org.apache.commons.math.exception.OutOfRangeException
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] r1, $r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        double d0, $d1, $d2, $d3, $d4, d5, d6;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint r3, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.commons.math.exception.OutOfRangeException $r4;
        java.lang.Double $r5, $r6, $r7;
        boolean $z0;
        org.apache.commons.math.exception.ZeroException $r14;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        if i1 != 0 goto label01;

        $r14 = new org.apache.commons.math.exception.ZeroException;

        specialinvoke $r14.<org.apache.commons.math.exception.ZeroException: void <init>()>();

        throw $r14;

     label01:
        i9 = i0;

     label02:
        if i1 >= 0 goto label03;

        $i8 = i9 + i1;

        if $i8 < 0 goto label08;

        goto label04;

     label03:
        $i4 = i9 + i1;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label08;

     label04:
        $r8 = r1[i9];

        $d3 = virtualinvoke $r8.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $i5 = i9 + i1;

        $r9 = r1[$i5];

        $d4 = virtualinvoke $r9.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        $z0 = specialinvoke r0.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser: boolean isBetween(double,double,double)>(d0, $d3, $d4);

        if $z0 == 0 goto label07;

        if i1 >= 0 goto label05;

        $r15 = newarray (org.apache.commons.math.optimization.fitting.WeightedObservedPoint)[2];

        $i7 = i9 + i1;

        $r12 = r1[$i7];

        $r15[0] = $r12;

        $r13 = r1[i9];

        $r15[1] = $r13;

        goto label06;

     label05:
        $r15 = newarray (org.apache.commons.math.optimization.fitting.WeightedObservedPoint)[2];

        $r10 = r1[i9];

        $r15[0] = $r10;

        $i6 = i9 + i1;

        $r11 = r1[$i6];

        $r15[1] = $r11;

     label06:
        return $r15;

     label07:
        i9 = i9 + i1;

        goto label02;

     label08:
        d5 = #Infinity;

        d6 = #-Infinity;

        i2 = lengthof r1;

        i10 = 0;

     label09:
        if i10 >= i2 goto label10;

        r3 = r1[i10];

        $d1 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        d5 = staticinvoke <java.lang.Math: double min(double,double)>(d5, $d1);

        $d2 = virtualinvoke r3.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        d6 = staticinvoke <java.lang.Math: double max(double,double)>(d6, $d2);

        i10 = i10 + 1;

        goto label09;

     label10:
        $r4 = new org.apache.commons.math.exception.OutOfRangeException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        specialinvoke $r4.<org.apache.commons.math.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, $r7);

        throw $r4;
    }

    private boolean isBetween(double, double, double)
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        double d0, d1, d2;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $b3 = d0 cmpg d2;

        if $b3 <= 0 goto label2;

     label1:
        $b1 = d0 cmpl d2;

        if $b1 < 0 goto label3;

        $b2 = d0 cmpg d1;

        if $b2 > 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private java.util.Comparator createWeightedObservedPointComparator()
    {
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser r0;
        org.apache.commons.math.optimization.fitting.GaussianParametersGuesser$1 $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.GaussianParametersGuesser;

        $r1 = new org.apache.commons.math.optimization.fitting.GaussianParametersGuesser$1;

        specialinvoke $r1.<org.apache.commons.math.optimization.fitting.GaussianParametersGuesser$1: void <init>(org.apache.commons.math.optimization.fitting.GaussianParametersGuesser)>(r0);

        return $r1;
    }
}
