public class org.apache.commons.math3.random.EmpiricalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final int DEFAULT_BIN_COUNT;
    private static final java.lang.String FILE_CHARSET;
    private static final long serialVersionUID;
    protected final org.apache.commons.math3.random.RandomDataGenerator randomData;
    private final java.util.List binStats;
    private org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats;
    private double max;
    private double min;
    private double delta;
    private final int binCount;
    private boolean loaded;
    private double[] upperBounds;

    public void <init>()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int)>(1000);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>(i0, $r1);

        return;
    }

    public void <init>(int, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.random.RandomDataGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        $r2 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>(i0, $r2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomGenerator)>(1000, r1);

        return;
    }

    public void <init>(int, org.apache.commons.math3.random.RandomDataImpl)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        org.apache.commons.math3.random.RandomDataImpl r1;
        org.apache.commons.math3.random.RandomDataGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.random.RandomDataImpl;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator getDelegate()>();

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataGenerator)>(i0, $r2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomDataImpl)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void <init>(int,org.apache.commons.math3.random.RandomDataImpl)>(1000, r1);

        return;
    }

    private void <init>(int, org.apache.commons.math3.random.RandomDataGenerator)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        org.apache.commons.math3.random.RandomDataGenerator r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.random.RandomDataGenerator;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>($r2);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats> = null;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max> = #-Infinity;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min> = #Infinity;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta> = 0.0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds> = null;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount> = i0;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData> = r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats> = $r3;

        return;
    }

    public void load(double[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double[] r1;
        org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter $r4, $r5;
        java.io.IOException $r6;
        org.apache.commons.math3.exception.MathInternalError $r7;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: double[];

        $r4 = new org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter;

        specialinvoke $r4.<org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,double[])>(r0, r1);

     label1:
        virtualinvoke $r4.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

        $r5 = new org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter;

        specialinvoke $r5.<org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,double[])>(r0, r1);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r7;

     label4:
        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void load(java.net.URL) throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.net.URL r1;
        java.nio.charset.Charset r2;
        java.io.BufferedReader $r5, $r10, r20;
        java.io.InputStreamReader $r6, $r11;
        java.io.InputStream $r7, $r12;
        org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter $r8, $r13;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r9;
        long $l0;
        byte $b1;
        org.apache.commons.math3.exception.ZeroException $r14;
        java.lang.Object[] $r15;
        org.apache.commons.math3.exception.util.LocalizedFormats $r16;
        java.io.IOException $r17, $r18;
        java.lang.Throwable $r19;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: java.net.URL;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        $r5 = new java.io.BufferedReader;

        $r6 = new java.io.InputStreamReader;

        $r7 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, r2);

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);

        r20 = $r5;

     label01:
        $r8 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke $r8.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, $r5);

        virtualinvoke $r8.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

        $r9 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l0 = virtualinvoke $r9.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label02;

        $r14 = new org.apache.commons.math3.exception.ZeroException;

        $r16 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats URL_CONTAINS_NO_DATA>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r1;

        specialinvoke $r14.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label02:
        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.InputStreamReader;

        $r12 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r12, r2);

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

        r20 = $r10;

        $r13 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke $r13.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, $r10);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>($r13);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

     label03:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

     label04:
        goto label11;

     label05:
        $r17 := @caughtexception;

        goto label11;

     label06:
        $r19 := @caughtexception;

     label07:
        virtualinvoke r20.<java.io.BufferedReader: void close()>();

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

     label10:
        throw $r19;

     label11:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void load(java.io.File) throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.io.File r1;
        java.nio.charset.Charset r2;
        java.io.FileInputStream $r5, $r9;
        java.io.BufferedReader $r6, $r10, r17;
        java.io.InputStreamReader $r7, $r11;
        org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter $r8, $r12;
        java.io.IOException $r13, $r14;
        java.lang.Throwable $r15;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, r2);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

        r17 = $r6;

     label01:
        $r8 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke $r8.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, $r6);

        virtualinvoke $r8.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeStats()>();

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.InputStreamReader;

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r9, r2);

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

        r17 = $r10;

        $r12 = new org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter;

        specialinvoke $r12.<org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter: void <init>(org.apache.commons.math3.random.EmpiricalDistribution,java.io.BufferedReader)>(r0, $r10);

        specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter)>($r12);

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded> = 1;

     label02:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

     label03:
        goto label10;

     label04:
        $r13 := @caughtexception;

        goto label10;

     label05:
        $r15 := @caughtexception;

     label06:
        virtualinvoke r17.<java.io.BufferedReader: void close()>();

     label07:
        goto label09;

     label08:
        $r14 := @caughtexception;

     label09:
        throw $r15;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter) throws java.io.IOException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter r1;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r3, $r4, $r10, $r11, $r17, $r18, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, i11, $i12, i13;
        java.util.List $r5, $r7, $r14, $r20, $r21;
        boolean $z0;
        double[] $r6, $r8, $r12, $r13, $r15;
        java.lang.Object $r9, $r16;
        long $l2, $l3, $l9, $l10;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter;

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMin()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min> = $d0;

        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d1 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMax()>();

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max> = $d1;

        $d3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $d2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d5 = $d3 - $d2;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $d4 = (double) $i0;

        $d6 = $d5 / $d4;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta> = $d6;

        $r5 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r21 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        interfaceinvoke $r21.<java.util.List: void clear()>();

     label1:
        i11 = 0;

     label2:
        $i12 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        if i11 >= $i12 goto label3;

        $r19 = new org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        specialinvoke $r19.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: void <init>()>();

        $r20 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        interfaceinvoke $r20.<java.util.List: void add(int,java.lang.Object)>(i11, $r19);

        i11 = i11 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter: void computeBinStats()>();

        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $r6 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds> = $r6;

        $r8 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $r7 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r9;

        $l2 = virtualinvoke $r10.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d7 = (double) $l2;

        $r11 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l3 = virtualinvoke $r11.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d8 = (double) $l3;

        $d9 = $d7 / $d8;

        $r8[0] = $d9;

        i13 = 1;

     label4:
        $i4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i5 = $i4 - 1;

        if i13 >= $i5 goto label5;

        $r15 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $r13 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i8 = i13 - 1;

        $d10 = $r13[$i8];

        $r14 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r16 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i13);

        $r17 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r16;

        $l9 = virtualinvoke $r17.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d11 = (double) $l9;

        $r18 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $l10 = virtualinvoke $r18.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $d12 = (double) $l10;

        $d13 = $d11 / $d12;

        $d14 = $d10 + $d13;

        $r15[i13] = $d14;

        i13 = i13 + 1;

        goto label4;

     label5:
        $r12 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i6 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i7 = $i6 - 1;

        $r12[$i7] = 1.0;

        return;
    }

    private int findBin(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d3 = d0 - $d1;

        $d2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d4);

        $i0 = (int) $d5;

        $i1 = $i0 - 1;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i1, 0);

        $i3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i4 = $i3 - 1;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i4);

        return $i5;
    }

    public double getNextValue() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        boolean $z0;
        double $d0;
        org.apache.commons.math3.exception.MathIllegalStateException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $z0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded>;

        if $z0 != 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DISTRIBUTION_NOT_LOADED>;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double sample()>();

        return $d0;
    }

    public org.apache.commons.math3.stat.descriptive.StatisticalSummary getSampleStats()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        return $r1;
    }

    public int getBinCount()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        return $i0;
    }

    public java.util.List getBinStats()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        return $r1;
    }

    public double[] getUpperBounds()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $i0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        r1 = newarray (double)[$i0];

        i6 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i2 = $i1 - 1;

        if i6 >= $i2 goto label2;

        $d4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double delta>;

        $i5 = i6 + 1;

        $d1 = (double) $i5;

        $d3 = $d2 * $d1;

        $d5 = $d4 + $d3;

        r1[i6] = $d5;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: int binCount>;

        $i4 = $i3 - 1;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        r1[$i4] = $d0;

        return r1;
    }

    public double[] getGeneratorUpperBounds()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        double[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        i0 = lengthof $r2;

        r1 = newarray (double)[i0];

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        return r1;
    }

    public boolean isLoaded()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $z0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: boolean loaded>;

        return $z0;
    }

    public void reSeed(long)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        long l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed(long)>(l0);

        return;
    }

    public double probability(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        return 0.0;
    }

    public double density(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        byte $b1, $b2;
        java.util.List $r2;
        java.lang.Object $r3;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $b1 = d0 cmpg $d1;

        if $b1 < 0 goto label1;

        $d2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $b2 = d0 cmpl $d2;

        if $b2 <= 0 goto label2;

     label1:
        return 0.0;

     label2:
        i0 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>(d0);

        $r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r3;

        r1 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r4);

        $d3 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double density(double)>(d0);

        $d4 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>(i0);

        $d5 = $d3 * $d4;

        $d6 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>(i0);

        $d7 = $d5 / $d6;

        return $d7;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0, d1, d2, d3, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        int i0, $i3;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2;
        byte $b1, $b2, $b4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        $d6 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $b1 = d0 cmpg $d6;

        if $b1 >= 0 goto label1;

        return 0.0;

     label1:
        $d7 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        $b2 = d0 cmpl $d7;

        if $b2 < 0 goto label2;

        return 1.0;

     label2:
        i0 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>(d0);

        d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pBminus(int)>(i0);

        d2 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>(i0);

        r1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution k(double)>(d0);

        $z0 = r1 instanceof org.apache.commons.math3.distribution.ConstantRealDistribution;

        if $z0 == 0 goto label4;

        $d13 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double getNumericalMean()>();

        $b4 = d0 cmpg $d13;

        if $b4 >= 0 goto label3;

        return d1;

     label3:
        $d14 = d1 + d2;

        return $d14;

     label4:
        r2 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        d3 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>(i0);

        if i0 != 0 goto label5;

        $d15 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        goto label6;

     label5:
        $i3 = i0 - 1;

        $d15 = r2[$i3];

     label6:
        $d8 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>(d0);

        $d9 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>($d15);

        $d10 = $d8 - $d9;

        d5 = $d10 / d3;

        $d11 = d2 * d5;

        $d12 = d1 + $d11;

        return $d12;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0, d1, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2;
        byte $b0, $b1, $b2, $b3, $b4, $b6;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;
        java.util.List $r7;
        java.lang.Object $r8;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r9;
        int $i5, i7;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        $d13 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double getSupportLowerBound()>();

        return $d13;

     label3:
        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label4;

        $d12 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double getSupportUpperBound()>();

        return $d12;

     label4:
        i7 = 0;

     label5:
        $d7 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double cumBinP(int)>(i7);

        $b4 = $d7 cmpg d0;

        if $b4 >= 0 goto label6;

        i7 = i7 + 1;

        goto label5;

     label6:
        $r7 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i7);

        $r9 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r8;

        r1 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r9);

        d1 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double kB(int)>(i7);

        r2 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        if i7 != 0 goto label7;

        $d14 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        goto label8;

     label7:
        $i5 = i7 - 1;

        $d14 = r2[$i5];

     label8:
        d3 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>($d14);

        d4 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pB(int)>(i7);

        d5 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double pBminus(int)>(i7);

        d6 = d0 - d5;

        $b6 = d6 cmpg 0.0;

        if $b6 > 0 goto label9;

        return $d14;

     label9:
        $d8 = d6 * d1;

        $d9 = $d8 / d4;

        $d10 = d3 + $d9;

        $d11 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double inverseCumulativeProbability(double)>($d10);

        return $d11;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getVariance()>();

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        return $d0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        $d0 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double max>;

        return $d0;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        return 1;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        long l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed(long)>(l0);

        return;
    }

    private double pB(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0, $i1;
        double[] $r1, $r2, $r3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d2 = $r3[0];

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d1 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i1 = i0 - 1;

        $d0 = $r2[$i1];

        $d2 = $d1 - $d0;

     label2:
        return $d2;
    }

    private double pBminus(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0, $i1;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $d0 = 0.0;

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $i1 = i0 - 1;

        $d0 = $r1[$i1];

     label2:
        return $d0;
    }

    private double kB(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0, $i1;
        double[] r1;
        org.apache.commons.math3.distribution.RealDistribution r2;
        java.util.List $r3;
        java.lang.Object $r4;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r5;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] getUpperBounds()>();

        $r3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r4;

        r2 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r5);

        if i0 != 0 goto label1;

        $d3 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double min>;

        $d2 = r1[0];

        $d4 = interfaceinvoke r2.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double,double)>($d3, $d2);

        goto label2;

     label1:
        $i1 = i0 - 1;

        $d1 = r1[$i1];

        $d0 = r1[i0];

        $d4 = interfaceinvoke r2.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double,double)>($d1, $d0);

     label2:
        return $d4;
    }

    private org.apache.commons.math3.distribution.RealDistribution k(double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r3;
        org.apache.commons.math3.distribution.RealDistribution $r4;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter0: double;

        i0 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>(d0);

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.commons.math3.stat.descriptive.SummaryStatistics) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>($r3);

        return $r4;
    }

    private double cumBinP(int)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: double[] upperBounds>;

        $d0 = $r1[i0];

        return $d0;
    }

    protected org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics r1;
        long $l0;
        byte $b1, $b2;
        org.apache.commons.math3.distribution.ConstantRealDistribution $r2;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.distribution.NormalDistribution $r3;
        org.apache.commons.math3.random.RandomDataGenerator $r4;
        org.apache.commons.math3.random.RandomGenerator $r5;

        r0 := @this: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        $l0 = virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: long getN()>();

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label1;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getVariance()>();

        $b2 = $d1 cmpl 0.0;

        if $b2 != 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.distribution.ConstantRealDistribution;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        specialinvoke $r2.<org.apache.commons.math3.distribution.ConstantRealDistribution: void <init>(double)>($d0);

        return $r2;

     label2:
        $r3 = new org.apache.commons.math3.distribution.NormalDistribution;

        $r4 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.random.RandomDataGenerator randomData>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d2 = virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getMean()>();

        $d3 = virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.SummaryStatistics: double getStandardDeviation()>();

        specialinvoke $r3.<org.apache.commons.math3.distribution.NormalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r5, $d2, $d3, 1.0E-9);

        return $r3;
    }

    static int access$100(org.apache.commons.math3.random.EmpiricalDistribution, double)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        double d0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        d0 := @parameter1: double;

        $i0 = specialinvoke r0.<org.apache.commons.math3.random.EmpiricalDistribution: int findBin(double)>(d0);

        return $i0;
    }

    static java.util.List access$200(org.apache.commons.math3.random.EmpiricalDistribution)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: java.util.List binStats>;

        return $r1;
    }

    static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$302(org.apache.commons.math3.random.EmpiricalDistribution, org.apache.commons.math3.stat.descriptive.SummaryStatistics)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics r1;

        r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.SummaryStatistics;

        r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats> = r1;

        return r1;
    }

    static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$300(org.apache.commons.math3.random.EmpiricalDistribution)
    {
        org.apache.commons.math3.random.EmpiricalDistribution r0;
        org.apache.commons.math3.stat.descriptive.SummaryStatistics $r1;

        r0 := @parameter0: org.apache.commons.math3.random.EmpiricalDistribution;

        $r1 = r0.<org.apache.commons.math3.random.EmpiricalDistribution: org.apache.commons.math3.stat.descriptive.SummaryStatistics sampleStats>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.random.EmpiricalDistribution: long serialVersionUID> = 5729073523949762654L;

        <org.apache.commons.math3.random.EmpiricalDistribution: java.lang.String FILE_CHARSET> = "US-ASCII";

        <org.apache.commons.math3.random.EmpiricalDistribution: int DEFAULT_BIN_COUNT> = 1000;

        return;
    }
}
