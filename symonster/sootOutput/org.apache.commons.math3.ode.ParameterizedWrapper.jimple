class org.apache.commons.math3.ode.ParameterizedWrapper extends java.lang.Object implements org.apache.commons.math3.ode.ParameterizedODE
{
    private final org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode;

    public void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations)
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations r1;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.ParameterizedWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode> = r1;

        return;
    }

    public int getDimension()
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        $r1 = r0.<org.apache.commons.math3.ode.ParameterizedWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: int getDimension()>();

        return $i0;
    }

    public void computeDerivatives(double, double[], double[]) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        double d0;
        double[] r1, r2;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r3;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $r3 = r0.<org.apache.commons.math3.ode.ParameterizedWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode>;

        interfaceinvoke $r3.<org.apache.commons.math3.ode.FirstOrderDifferentialEquations: void computeDerivatives(double,double[],double[])>(d0, r1, r2);

        return;
    }

    public java.util.Collection getParametersNames()
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public boolean isSupported(java.lang.String)
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public double getParameter(java.lang.String) throws org.apache.commons.math3.ode.UnknownParameterException
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        java.lang.String r1;
        boolean $z0;
        org.apache.commons.math3.ode.UnknownParameterException $r2;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.ode.ParameterizedWrapper: boolean isSupported(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.ode.UnknownParameterException;

        specialinvoke $r2.<org.apache.commons.math3.ode.UnknownParameterException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return #NaN;
    }

    public void setParameter(java.lang.String, double)
    {
        org.apache.commons.math3.ode.ParameterizedWrapper r0;
        java.lang.String r1;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.ParameterizedWrapper;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        return;
    }
}
