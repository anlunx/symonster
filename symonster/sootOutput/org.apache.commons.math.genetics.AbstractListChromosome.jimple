public abstract class org.apache.commons.math.genetics.AbstractListChromosome extends org.apache.commons.math.genetics.Chromosome
{
    private final java.util.List representation;

    public void <init>(java.util.List)
    {
        org.apache.commons.math.genetics.AbstractListChromosome r0;
        java.util.List r1, $r4;
        java.util.ArrayList $r3;
        org.apache.commons.math.genetics.InvalidRepresentationException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.Class $r8;
        java.lang.String $r9, $r10;

        r0 := @this: org.apache.commons.math.genetics.AbstractListChromosome;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math.genetics.Chromosome: void <init>()>();

     label1:
        virtualinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: void checkValidity(java.util.List)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid representation for %s", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

     label4:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List representation> = $r4;

        return;

        catch org.apache.commons.math.genetics.InvalidRepresentationException from label1 to label2 with label3;
    }

    public void <init>(java.lang.Object[])
    {
        org.apache.commons.math.genetics.AbstractListChromosome r0;
        java.lang.Object[] r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.genetics.AbstractListChromosome;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: void <init>(java.util.List)>($r2);

        return;
    }

    protected abstract void checkValidity(java.util.List) throws org.apache.commons.math.genetics.InvalidRepresentationException;

    protected java.util.List getRepresentation()
    {
        org.apache.commons.math.genetics.AbstractListChromosome r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math.genetics.AbstractListChromosome;

        $r1 = r0.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List representation>;

        return $r1;
    }

    public int getLength()
    {
        org.apache.commons.math.genetics.AbstractListChromosome r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.genetics.AbstractListChromosome;

        $r1 = virtualinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public abstract org.apache.commons.math.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List);

    public java.lang.String toString()
    {
        org.apache.commons.math.genetics.AbstractListChromosome r0;
        java.lang.Object[] $r1;
        double $d0;
        java.lang.Double $r2;
        java.util.List $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.math.genetics.AbstractListChromosome;

        $r1 = newarray (java.lang.Object)[2];

        $d0 = virtualinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: double getFitness()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(f=%s %s)", $r1);

        return $r4;
    }
}
