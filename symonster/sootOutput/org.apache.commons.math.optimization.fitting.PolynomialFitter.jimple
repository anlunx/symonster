public class org.apache.commons.math.optimization.fitting.PolynomialFitter extends java.lang.Object
{
    private final org.apache.commons.math.optimization.fitting.CurveFitter fitter;
    private final int degree;

    public void <init>(int, org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter r0;
        int i0;
        org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer r1;
        org.apache.commons.math.optimization.fitting.CurveFitter $r2;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math.optimization.fitting.CurveFitter;

        specialinvoke $r2.<org.apache.commons.math.optimization.fitting.CurveFitter: void <init>(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)>(r1);

        r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.optimization.fitting.CurveFitter fitter> = $r2;

        r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: int degree> = i0;

        return;
    }

    public void addObservedPoint(double, double, double)
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter r0;
        double d0, d1, d2;
        org.apache.commons.math.optimization.fitting.CurveFitter $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.optimization.fitting.CurveFitter fitter>;

        virtualinvoke $r1.<org.apache.commons.math.optimization.fitting.CurveFitter: void addObservedPoint(double,double,double)>(d0, d1, d2);

        return;
    }

    public void clearObservations()
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter r0;
        org.apache.commons.math.optimization.fitting.CurveFitter $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.optimization.fitting.CurveFitter fitter>;

        virtualinvoke $r1.<org.apache.commons.math.optimization.fitting.CurveFitter: void clearObservations()>();

        return;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction fit() throws org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.fitting.PolynomialFitter r0;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r2;
        org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial $r3;
        org.apache.commons.math.optimization.fitting.CurveFitter $r4;
        int $i0, $i1;
        double[] $r5, $r6;
        org.apache.commons.math.FunctionEvaluationException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: org.apache.commons.math.optimization.fitting.PolynomialFitter;

     label1:
        $r2 = new org.apache.commons.math.analysis.polynomials.PolynomialFunction;

        $r4 = r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.optimization.fitting.CurveFitter fitter>;

        $r3 = new org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial;

        specialinvoke $r3.<org.apache.commons.math.optimization.fitting.PolynomialFitter$ParametricPolynomial: void <init>(org.apache.commons.math.optimization.fitting.PolynomialFitter$1)>(null);

        $i0 = r0.<org.apache.commons.math.optimization.fitting.PolynomialFitter: int degree>;

        $i1 = $i0 + 1;

        $r5 = newarray (double)[$i1];

        $r6 = virtualinvoke $r4.<org.apache.commons.math.optimization.fitting.CurveFitter: double[] fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction,double[])>($r3, $r5);

        specialinvoke $r2.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: void <init>(double[])>($r6);

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch org.apache.commons.math.FunctionEvaluationException from label1 to label2 with label3;
    }
}
