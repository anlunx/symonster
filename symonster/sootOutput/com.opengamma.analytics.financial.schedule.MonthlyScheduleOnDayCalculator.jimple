public class com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator extends com.opengamma.analytics.financial.schedule.Schedule
{
    private final int _dayOfMonth;

    public void <init>(int)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator r0;
        int i0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator;

        i0 := @parameter0: int;

        specialinvoke r0.<com.opengamma.analytics.financial.schedule.Schedule: void <init>()>();

        if i0 <= 0 goto label1;

        if i0 >= 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "invalid day of month");

        r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth> = i0;

        return;
    }

    public org.threeten.bp.LocalDate[] getSchedule(org.threeten.bp.LocalDate, org.threeten.bp.LocalDate, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator r0;
        org.threeten.bp.LocalDate r1, r2;
        boolean z0, z1;
        org.threeten.bp.LocalDate[] $r3;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        r2 := @parameter1: org.threeten.bp.LocalDate;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: org.threeten.bp.LocalDate[] getSchedule(org.threeten.bp.LocalDate,org.threeten.bp.LocalDate)>(r1, r2);

        return $r3;
    }

    public org.threeten.bp.LocalDate[] getSchedule(org.threeten.bp.LocalDate, org.threeten.bp.LocalDate)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator r0;
        org.threeten.bp.LocalDate r1, r2, $r7, r15;
        boolean $z0, $z1, $z2, $z4;
        java.util.ArrayList $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        org.threeten.bp.LocalDate[] $r8, $r10, $r13;
        java.lang.Object[] $r9;
        org.threeten.bp.Month $r11, r14;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        r2 := @parameter1: org.threeten.bp.LocalDate;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z0 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "start date must not be after end date");

        $z1 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $i5 = virtualinvoke r1.<org.threeten.bp.LocalDate: int getDayOfMonth()>();

        $i6 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        if $i5 != $i6 goto label1;

        $r13 = newarray (org.threeten.bp.LocalDate)[1];

        $r13[0] = r1;

        return $r13;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start date and end date were the same but their day of month was not the same as that required");

        throw $r12;

     label2:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<org.threeten.bp.LocalDate: int getYear()>();

        r14 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.Month getMonth()>();

        $i0 = virtualinvoke r14.<org.threeten.bp.Month: int getValue()>();

        $r7 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate withMonth(int)>($i0);

        $i1 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        r15 = virtualinvoke $r7.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate withDayOfMonth(int)>($i1);

        $z2 = virtualinvoke r15.<org.threeten.bp.LocalDate: boolean isBefore(org.threeten.bp.chrono.ChronoLocalDate)>(r1);

        if $z2 == 0 goto label3;

        r14 = virtualinvoke r14.<org.threeten.bp.Month: org.threeten.bp.Month plus(long)>(1L);

        $i4 = virtualinvoke r14.<org.threeten.bp.Month: int getValue()>();

        r15 = virtualinvoke r15.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate withMonth(int)>($i4);

     label3:
        i8 = virtualinvoke r15.<org.threeten.bp.LocalDate: int getYear()>();

     label4:
        $z4 = virtualinvoke r15.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        if $z4 != 0 goto label6;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r15);

        r14 = virtualinvoke r14.<org.threeten.bp.Month: org.threeten.bp.Month plus(long)>(1L);

        $r11 = <org.threeten.bp.Month: org.threeten.bp.Month JANUARY>;

        if r14 != $r11 goto label5;

        i8 = i8 + 1;

     label5:
        $i2 = virtualinvoke r14.<org.threeten.bp.Month: int getValue()>();

        $i3 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        r15 = staticinvoke <org.threeten.bp.LocalDate: org.threeten.bp.LocalDate of(int,int,int)>(i8, $i2, $i3);

        goto label4;

     label6:
        $r8 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: org.threeten.bp.LocalDate[] EMPTY_LOCAL_DATE_ARRAY>;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.threeten.bp.LocalDate[]) $r9;

        return $r10;
    }

    public org.threeten.bp.ZonedDateTime[] getSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator r0;
        org.threeten.bp.ZonedDateTime r1, r2;
        boolean z0, z1;
        org.threeten.bp.ZonedDateTime[] $r3;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator;

        r1 := @parameter0: org.threeten.bp.ZonedDateTime;

        r2 := @parameter1: org.threeten.bp.ZonedDateTime;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: org.threeten.bp.ZonedDateTime[] getSchedule(org.threeten.bp.ZonedDateTime,org.threeten.bp.ZonedDateTime)>(r1, r2);

        return $r3;
    }

    public org.threeten.bp.ZonedDateTime[] getSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator r0;
        org.threeten.bp.ZonedDateTime r1, r2, $r7, r16;
        boolean $z0, $z1, $z2, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        org.threeten.bp.ZonedDateTime[] $r8, $r10, $r14;
        java.lang.Object[] $r9;
        org.threeten.bp.Month $r11, r15;
        org.threeten.bp.LocalDate $r12;
        java.lang.IllegalArgumentException r17;
        java.util.ArrayList r18;
        org.threeten.bp.temporal.TemporalAdjuster r19;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator;

        r1 := @parameter0: org.threeten.bp.ZonedDateTime;

        r2 := @parameter1: org.threeten.bp.ZonedDateTime;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z0 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "start date must not be after end date");

        $z1 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $i5 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: int getDayOfMonth()>();

        $i6 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        if $i5 != $i6 goto label1;

        $r14 = newarray (org.threeten.bp.ZonedDateTime)[1];

        $r14[0] = r1;

        return $r14;

     label1:
        r17 = new java.lang.IllegalArgumentException;

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start date and end date were the same but their day of month was not the same as that required");

        throw r17;

     label2:
        r18 = new java.util.ArrayList;

        specialinvoke r18.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<org.threeten.bp.ZonedDateTime: int getYear()>();

        r15 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.Month getMonth()>();

        $i0 = virtualinvoke r15.<org.threeten.bp.Month: int getValue()>();

        $r7 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withMonth(int)>($i0);

        $i1 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        r16 = virtualinvoke $r7.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withDayOfMonth(int)>($i1);

        $z2 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z2 == 0 goto label3;

        r15 = virtualinvoke r15.<org.threeten.bp.Month: org.threeten.bp.Month plus(long)>(1L);

        $i4 = virtualinvoke r15.<org.threeten.bp.Month: int getValue()>();

        r16 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime withMonth(int)>($i4);

     label3:
        i8 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: int getYear()>();

     label4:
        $z4 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z4 != 0 goto label6;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>(r16);

        r15 = virtualinvoke r15.<org.threeten.bp.Month: org.threeten.bp.Month plus(long)>(1L);

        $r11 = <org.threeten.bp.Month: org.threeten.bp.Month JANUARY>;

        if r15 != $r11 goto label5;

        i8 = i8 + 1;

     label5:
        $i2 = virtualinvoke r15.<org.threeten.bp.Month: int getValue()>();

        $i3 = r0.<com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: int _dayOfMonth>;

        $r12 = staticinvoke <org.threeten.bp.LocalDate: org.threeten.bp.LocalDate of(int,int,int)>(i8, $i2, $i3);

        r19 = (org.threeten.bp.temporal.TemporalAdjuster) $r12;

        r16 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime 'with'(org.threeten.bp.temporal.TemporalAdjuster)>(r19);

        goto label4;

     label6:
        $r8 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleOnDayCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ZONED_DATE_TIME_ARRAY>;

        $r9 = interfaceinvoke r18.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.threeten.bp.ZonedDateTime[]) $r9;

        return $r10;
    }
}
