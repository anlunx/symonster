public abstract class org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod extends org.jcp.xml.dsig.internal.dom.DOMSignatureMethod
{
    private static java.util.logging.Logger log;
    private javax.crypto.Mac hmac;
    private int outputLength;
    private boolean outputLengthSet;

    void <init>(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.spec.AlgorithmParameterSpec r1;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMSignatureMethod: void <init>(java.security.spec.AlgorithmParameterSpec)>(r1);

        return;
    }

    void <init>(org.w3c.dom.Element) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMSignatureMethod: void <init>(org.w3c.dom.Element)>(r1);

        return;
    }

    void checkParams(javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec r1;
        boolean $z0, $z1;
        javax.xml.crypto.dsig.spec.HMACParameterSpec $r2;
        int $i0, $i1;
        java.util.logging.Level $r3, $r7;
        java.util.logging.Logger $r4, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r10;
        java.security.InvalidAlgorithmParameterException $r11;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;

        if r1 == null goto label2;

        $z0 = r1 instanceof javax.xml.crypto.dsig.spec.HMACParameterSpec;

        if $z0 != 0 goto label1;

        $r11 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r11.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("params must be of type HMACParameterSpec");

        throw $r11;

     label1:
        $r2 = (javax.xml.crypto.dsig.spec.HMACParameterSpec) r1;

        $i0 = virtualinvoke $r2.<javax.xml.crypto.dsig.spec.HMACParameterSpec: int getOutputLength()>();

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength> = $i0;

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet> = 1;

        $r4 = <org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.util.logging.Logger log>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z1 == 0 goto label3;

        $r6 = <org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.util.logging.Logger log>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting outputLength from HMACParameterSpec to: ");

        $i1 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r7, $r10);

        goto label3;

     label2:
        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength> = -1;

     label3:
        return;
    }

    javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec unmarshalParams(org.w3c.dom.Element) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.w3c.dom.Element r1;
        java.lang.Integer $r2;
        org.w3c.dom.Node $r3;
        java.lang.String $r4, $r13;
        int $i0, $i1, $i2;
        java.util.logging.Level $r5, $r10;
        java.util.logging.Logger $r6, $r9;
        boolean $z0;
        javax.xml.crypto.dsig.spec.HMACParameterSpec $r7;
        java.lang.StringBuilder $r8, $r11, $r12;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = new java.lang.Integer;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        specialinvoke $r2.<java.lang.Integer: void <init>(java.lang.String)>($r4);

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength> = $i0;

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet> = 1;

        $r6 = <org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.util.logging.Logger log>;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r5);

        if $z0 == 0 goto label1;

        $r9 = <org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.util.logging.Logger log>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unmarshalled outputLength: ");

        $i2 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r10, $r13);

     label1:
        $r7 = new javax.xml.crypto.dsig.spec.HMACParameterSpec;

        $i1 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        specialinvoke $r7.<javax.xml.crypto.dsig.spec.HMACParameterSpec: void <init>(int)>($i1);

        return $r7;
    }

    void marshalParams(org.w3c.dom.Element, java.lang.String) throws javax.xml.crypto.MarshalException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.w3c.dom.Element r1, r4;
        java.lang.String r2, $r5;
        org.w3c.dom.Document r3;
        int $i0;
        org.w3c.dom.Text $r6;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        r3 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Document getOwnerDocument(org.w3c.dom.Node)>(r1);

        r4 = staticinvoke <org.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Element createElement(org.w3c.dom.Document,java.lang.String,java.lang.String,java.lang.String)>(r3, "HMACOutputLength", "http://www.w3.org/2000/09/xmldsig#", r2);

        $i0 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r6 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r5);

        interfaceinvoke r4.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r4);

        return;
    }

    boolean verify(java.security.Key, org.jcp.xml.dsig.internal.dom.DOMSignedInfo, byte[], javax.xml.crypto.dsig.XMLValidateContext) throws java.security.InvalidKeyException, java.security.SignatureException, javax.xml.crypto.dsig.XMLSignatureException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.Key r1;
        org.jcp.xml.dsig.internal.dom.DOMSignedInfo r2;
        byte[] r3, r23;
        javax.xml.crypto.dsig.XMLValidateContext r4;
        boolean $z0, $z1, $z2;
        javax.crypto.Mac $r5, $r7, $r9, $r10, $r17;
        javax.crypto.SecretKey $r6;
        org.jcp.xml.dsig.internal.MacOutputStream $r8;
        int $i0, $i1, $i2;
        javax.xml.crypto.dsig.XMLSignatureException $r11, $r20;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15, $r16;
        java.security.InvalidKeyException $r18;
        java.security.NoSuchAlgorithmException $r19;
        java.lang.NullPointerException $r21;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: org.jcp.xml.dsig.internal.dom.DOMSignedInfo;

        r3 := @parameter2: byte[];

        r4 := @parameter3: javax.xml.crypto.dsig.XMLValidateContext;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>()>();

        throw $r21;

     label2:
        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label3;

        $r18 = new java.security.InvalidKeyException;

        specialinvoke $r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key must be SecretKey");

        throw $r18;

     label3:
        $r5 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        if $r5 != null goto label7;

     label4:
        $r16 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.lang.String getSignatureAlgorithm()>();

        $r17 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r16);

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac> = $r17;

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        $r20 = new javax.xml.crypto.dsig.XMLSignatureException;

        specialinvoke $r20.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label7:
        $z1 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet>;

        if $z1 == 0 goto label8;

        $i0 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        if $i0 >= $i1 goto label8;

        $r11 = new javax.xml.crypto.dsig.XMLSignatureException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HMACOutputLength must not be less than ");

        $i2 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label8:
        $r7 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        $r6 = (javax.crypto.SecretKey) r1;

        virtualinvoke $r7.<javax.crypto.Mac: void init(java.security.Key)>($r6);

        $r8 = new org.jcp.xml.dsig.internal.MacOutputStream;

        $r9 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        specialinvoke $r8.<org.jcp.xml.dsig.internal.MacOutputStream: void <init>(javax.crypto.Mac)>($r9);

        virtualinvoke r2.<org.jcp.xml.dsig.internal.dom.DOMSignedInfo: void canonicalize(javax.xml.crypto.XMLCryptoContext,java.io.ByteArrayOutputStream)>(r4, $r8);

        $r10 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        r23 = virtualinvoke $r10.<javax.crypto.Mac: byte[] doFinal()>();

        $z2 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r3, r23);

        return $z2;

        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
    }

    byte[] sign(java.security.Key, org.jcp.xml.dsig.internal.dom.DOMSignedInfo, javax.xml.crypto.dsig.XMLSignContext) throws java.security.InvalidKeyException, javax.xml.crypto.dsig.XMLSignatureException
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.Key r1;
        org.jcp.xml.dsig.internal.dom.DOMSignedInfo r2;
        javax.xml.crypto.dsig.XMLSignContext r3;
        java.lang.NullPointerException $r5;
        boolean $z0, $z1;
        javax.crypto.Mac $r6, $r8, $r10, $r11, $r19;
        javax.crypto.SecretKey $r7;
        org.jcp.xml.dsig.internal.MacOutputStream $r9;
        byte[] $r12;
        int $i0, $i1, $i2;
        javax.xml.crypto.dsig.XMLSignatureException $r13, $r22;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17, $r18;
        java.security.InvalidKeyException $r20;
        java.security.NoSuchAlgorithmException $r21;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: org.jcp.xml.dsig.internal.dom.DOMSignedInfo;

        r3 := @parameter2: javax.xml.crypto.dsig.XMLSignContext;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label2:
        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label3;

        $r20 = new java.security.InvalidKeyException;

        specialinvoke $r20.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key must be SecretKey");

        throw $r20;

     label3:
        $r6 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        if $r6 != null goto label7;

     label4:
        $r18 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.lang.String getSignatureAlgorithm()>();

        $r19 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r18);

        r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac> = $r19;

     label5:
        goto label7;

     label6:
        $r21 := @caughtexception;

        $r22 = new javax.xml.crypto.dsig.XMLSignatureException;

        specialinvoke $r22.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label7:
        $z1 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet>;

        if $z1 == 0 goto label8;

        $i0 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        if $i0 >= $i1 goto label8;

        $r13 = new javax.xml.crypto.dsig.XMLSignatureException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HMACOutputLength must not be less than ");

        $i2 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label8:
        $r8 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        $r7 = (javax.crypto.SecretKey) r1;

        virtualinvoke $r8.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        $r9 = new org.jcp.xml.dsig.internal.MacOutputStream;

        $r10 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        specialinvoke $r9.<org.jcp.xml.dsig.internal.MacOutputStream: void <init>(javax.crypto.Mac)>($r10);

        virtualinvoke r2.<org.jcp.xml.dsig.internal.dom.DOMSignedInfo: void canonicalize(javax.xml.crypto.XMLCryptoContext,java.io.ByteArrayOutputStream)>(r3, $r9);

        $r11 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        $r12 = virtualinvoke $r11.<javax.crypto.Mac: byte[] doFinal()>();

        return $r12;

        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
    }

    boolean paramsEqual(java.security.spec.AlgorithmParameterSpec)
    {
        org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.spec.AlgorithmParameterSpec r1, $r3;
        javax.xml.crypto.dsig.spec.HMACParameterSpec r2;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r3 = virtualinvoke r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        if $r3 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof javax.xml.crypto.dsig.spec.HMACParameterSpec;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (javax.xml.crypto.dsig.spec.HMACParameterSpec) r1;

        $i0 = r0.<org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r2.<javax.xml.crypto.dsig.spec.HMACParameterSpec: int getOutputLength()>();

        if $i0 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    abstract int getDigestLength();

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("org.jcp.xml.dsig.internal.dom");

        <org.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.util.logging.Logger log> = $r0;

        return;
    }
}
