public final class org.apache.commons.math3.util.MathUtils extends java.lang.Object
{
    public static final double TWO_PI;
    public static final double PI_SQUARED;

    private void <init>()
    {
        org.apache.commons.math3.util.MathUtils r0;

        r0 := @this: org.apache.commons.math3.util.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hash(double)
    {
        double d0;
        java.lang.Double $r0;
        int $i0;

        d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        $i0 = virtualinvoke $r0.<java.lang.Double: int hashCode()>();

        return $i0;
    }

    public static boolean equals(double, double)
    {
        double d0, d1;
        java.lang.Double $r0, $r1;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d1);

        $z0 = virtualinvoke $r0.<java.lang.Double: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public static int hash(double[])
    {
        double[] r0;
        int $i0;

        r0 := @parameter0: double[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(double[])>(r0);

        return $i0;
    }

    public static double normalizeAngle(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 + 3.141592653589793;

        $d3 = $d2 - d1;

        $d4 = $d3 / 6.283185307179586;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d4);

        $d6 = 6.283185307179586 * $d5;

        $d7 = d0 - $d6;

        return $d7;
    }

    public static double reduce(double, double, double)
    {
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d4 = d0 - d2;

        $d5 = $d4 / d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d5);

        $d7 = d3 * $d6;

        $d8 = d0 - $d7;

        $d9 = $d8 - d2;

        return $d9;
    }

    public static byte copySign(byte, byte) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        byte b0, b1, $b2, $b3;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        if b0 < 0 goto label1;

        if b1 >= 0 goto label2;

     label1:
        if b0 >= 0 goto label3;

        if b1 >= 0 goto label3;

     label2:
        return b0;

     label3:
        if b1 < 0 goto label4;

        if b0 != -128 goto label4;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label4:
        $b2 = neg b0;

        $b3 = (byte) $b2;

        return $b3;
    }

    public static short copySign(short, short) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        short s0, s1, $s2, $s3;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        if s0 < 0 goto label1;

        if s1 >= 0 goto label2;

     label1:
        if s0 >= 0 goto label3;

        if s1 >= 0 goto label3;

     label2:
        return s0;

     label3:
        if s1 < 0 goto label4;

        if s0 != -32768 goto label4;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label4:
        $s2 = neg s0;

        $s3 = (short) $s2;

        return $s3;
    }

    public static int copySign(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        if i0 >= 0 goto label3;

        if i1 >= 0 goto label3;

     label2:
        return i0;

     label3:
        if i1 < 0 goto label4;

        if i0 != -2147483648 goto label4;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label4:
        $i2 = neg i0;

        return $i2;
    }

    public static long copySign(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, $l5;
        byte $b2, $b3, $b4, $b6, $b7, $b8;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b8 = l1 cmp 0L;

        if $b8 >= 0 goto label2;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label3;

        $b7 = l1 cmp 0L;

        if $b7 >= 0 goto label3;

     label2:
        return l0;

     label3:
        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label4;

        $b6 = l0 cmp -9223372036854775808L;

        if $b6 != 0 goto label4;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label4:
        $l5 = neg l0;

        return $l5;
    }

    public static void checkFinite(double) throws org.apache.commons.math3.exception.NotFiniteNumberException
    {
        double d0;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.NotFiniteNumberException $r0;
        java.lang.Double $r1;
        java.lang.Object[] $r2;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(java.lang.Number,java.lang.Object[])>($r1, $r2);

        throw $r0;

     label2:
        return;
    }

    public static void checkFinite(double[]) throws org.apache.commons.math3.exception.NotFiniteNumberException
    {
        double[] r0;
        double d0;
        int $i0, i1;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.NotFiniteNumberException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        r0 := @parameter0: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label4;

        d0 = r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label3;

     label2:
        $r1 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ELEMENT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[0] = $r5;

        specialinvoke $r1.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r2, $r3, $r4);

        throw $r1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public static transient void checkNotNull(java.lang.Object, org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]) throws org.apache.commons.math3.exception.NullArgumentException
    {
        java.lang.Object r0;
        org.apache.commons.math3.exception.util.Localizable r1;
        java.lang.Object[] r2;
        org.apache.commons.math3.exception.NullArgumentException $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.math3.exception.util.Localizable;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>(r1, r2);

        throw $r3;

     label1:
        return;
    }

    public static void checkNotNull(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        java.lang.Object r0;
        org.apache.commons.math3.exception.NullArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.util.MathUtils: double PI_SQUARED> = 9.869604401089358;

        <org.apache.commons.math3.util.MathUtils: double TWO_PI> = 6.283185307179586;

        return;
    }
}
