public class org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain extends org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D
{

    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean)>(z0);

        return;
    }

    public void <init>(boolean, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean z0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        z0 := @parameter0: boolean;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean,double)>(z0, d0);

        return;
    }

    public java.util.Collection findHullVertices(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        java.util.Collection r1;
        java.util.ArrayList $r4, $r6, $r7, $r8;
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1 $r5;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        java.lang.Object $r9, $r10, $r11, $r12, $r13;
        java.util.Iterator r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r15, r17;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        r1 := @parameter0: java.util.Collection;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1: void <init>(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r14 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r13;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)>(r15, $r6);

        goto label1;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i9 = $i0 - 1;

     label3:
        if i9 < 0 goto label4;

        $r12 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i9);

        r17 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r12;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)>(r17, $r7);

        i9 = i9 + -1;

        goto label3;

     label4:
        $r8 = new java.util.ArrayList;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i3 = $i1 + $i2;

        $i4 = $i3 - 2;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i4);

        i10 = 0;

     label5:
        $i5 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        if i10 >= $i6 goto label6;

        $r11 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i10);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        i10 = i10 + 1;

        goto label5;

     label6:
        i11 = 0;

     label7:
        $i7 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        if i11 >= $i8 goto label8;

        $r10 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i11);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        i11 = i11 + 1;

        goto label7;

     label8:
        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label9;

        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label9;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label9:
        return $r8;
    }

    private void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r1, r3, r4, r11;
        java.util.List r2;
        double d0, d1, d2, d3, $d4, $d5, $d6;
        int $i1, $i2, $i3, $i6, $i10, $i13, i14, $i15;
        java.lang.Object $r5, $r6, $r10;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r7;
        byte $b4, $b5, $b7, $b8, $b9, $b11, $b12;
        boolean $z1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        r2 := @parameter1: java.util.List;

        d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: double getTolerance()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r11 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r10;

        $d6 = virtualinvoke r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r1);

        $b12 = $d6 cmpg d0;

        if $b12 >= 0 goto label1;

        return;

     label1:
        $i13 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i13 < 2 goto label9;

        i14 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = i14 - 2;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r5;

        $i3 = i14 - 1;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i3);

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D) $r6;

        $r7 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r3, r4, d0);

        d1 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Vector)>(r1);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b4 = $d4 cmpg d0;

        if $b4 >= 0 goto label8;

        d2 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r1);

        $b7 = d2 cmpg d0;

        if $b7 < 0 goto label2;

        $d5 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r1);

        $b8 = $d5 cmpg d0;

        if $b8 >= 0 goto label3;

     label2:
        return;

     label3:
        d3 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.Vector)>(r4);

        $z1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain: boolean isIncludeCollinearPoints()>();

        if $z1 == 0 goto label6;

        $b11 = d2 cmpg d3;

        if $b11 >= 0 goto label4;

        $i15 = i14 - 1;

        goto label5;

     label4:
        $i15 = i14;

     label5:
        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>($i15, r1);

        goto label7;

     label6:
        $b9 = d2 cmpl d3;

        if $b9 <= 0 goto label7;

        $i10 = i14 - 1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label7:
        return;

     label8:
        $b5 = d1 cmpl 0.0;

        if $b5 <= 0 goto label9;

        $i6 = i14 - 1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i6);

        goto label1;

     label9:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public volatile org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        java.util.Collection r1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection)>(r1);

        return $r2;
    }

    public volatile boolean isIncludeCollinearPoints()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean isIncludeCollinearPoints()>();

        return $z0;
    }

    public volatile double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain;

        $d0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double getTolerance()>();

        return $d0;
    }
}
