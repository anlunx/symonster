public class com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final double ERROR;
    private static final double EPS;
    private static final double SMALL;
    private final com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r1 = new com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke $r1.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver> = $r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r2, r3, r4, r5, $r15, $r16, $r17, r18, r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i11, i12, i13, i14, i15;
        double[][] r6;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r9, $r10, $r11;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;
        byte $b8, $b10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "(xValues length = yValues length) should be true");

        $i3 = lengthof r1;

        if $i3 <= 2 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be >= 3");

        i0 = lengthof r1;

        i11 = 0;

     label05:
        if i11 >= i0 goto label06;

        $d17 = r1[i11];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d17);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xValues containing NaN");

        $d18 = r1[i11];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d18);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xValues containing Infinity");

        $d19 = r2[i11];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d19);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValues containing NaN");

        $d20 = r2[i11];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d20);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yValues containing Infinity");

        i11 = i11 + 1;

        goto label05;

     label06:
        i12 = 0;

     label07:
        $i4 = i0 - 1;

        if i12 >= $i4 goto label12;

        i13 = i12 + 1;

     label08:
        if i13 >= i0 goto label11;

        $d16 = r1[i12];

        $d15 = r1[i13];

        $b10 = $d16 cmpl $d15;

        if $b10 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i13 = i13 + 1;

        goto label08;

     label11:
        i12 = i12 + 1;

        goto label07;

     label12:
        r18 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r19 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r18, r19);

        $r9 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r9.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r18);

        $r10 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r19, r3);

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] firstDerivativeCalculator(double[])>(r4);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r6 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r19, r3, r4, r5);

        i14 = 0;

     label13:
        $i5 = i0 - 1;

        if i14 >= $i5 goto label18;

        d21 = 0.0;

        i15 = 0;

     label14:
        if i15 >= 4 goto label15;

        $r15 = r6[i14];

        $d10 = $r15[i15];

        $d9 = r3[i14];

        $i9 = 3 - i15;

        $d8 = (double) $i9;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, $d8);

        $d12 = $d10 * $d11;

        d21 = d21 + $d12;

        $r16 = r6[i14];

        $d13 = $r16[i15];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r17 = r6[i14];

        $d14 = $r17[i15];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d14);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i15 = i15 + 1;

        goto label14;

     label15:
        $d0 = staticinvoke <java.lang.Math: double abs(double)>(d21);

        $i6 = i14 + 1;

        $d1 = r19[$i6];

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d3 = $d0 + $d2;

        d22 = staticinvoke <java.lang.Math: double max(double,double)>($d3, 0.1);

        $i7 = i14 + 1;

        $d4 = r19[$i7];

        $d5 = d21 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $d7 = 1.0E-13 * d22;

        $b8 = $d6 cmpg $d7;

        if $b8 >= 0 goto label16;

        $z9 = 1;

        goto label17;

     label16:
        $z9 = 0;

     label17:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Input is too large/small or data points are too close");

        i14 = i14 + 1;

        goto label13;

     label18:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r18);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r13, $r14, 4, 1);

        return $r12;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, $r5, $r6, $r14, $r15, $r23, $r26, $r29, $r30, $r31, r32, r34, r35, r36, r37;
        double[][] r2, $r20, $r22, $r25, $r28, r38;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r8, $r11, $r12, $r18, $r21, $r24, $r27;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r13;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r16, $r17, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;
        byte $b12, $b14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r33;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r5 = r2[0];

        $i3 = lengthof $r5;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "(xValues length = yValuesMatrix\'s row vector length) should be true");

        $i5 = lengthof r1;

        if $i5 <= 2 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be >= 3");

        i0 = lengthof r1;

        $r6 = r2[0];

        i1 = lengthof $r6;

        i2 = lengthof r2;

        i15 = 0;

     label05:
        if i15 >= i0 goto label06;

        $d19 = r1[i15];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d19);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d20 = r1[i15];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d20);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i15 = i15 + 1;

        goto label05;

     label06:
        i16 = 0;

     label07:
        if i16 >= i1 goto label10;

        i17 = 0;

     label08:
        if i17 >= i2 goto label09;

        $r30 = r2[i17];

        $d17 = $r30[i16];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d17);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValuesMatrix containing NaN");

        $r31 = r2[i17];

        $d18 = $r31[i16];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d18);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing Infinity");

        i17 = i17 + 1;

        goto label08;

     label09:
        i16 = i16 + 1;

        goto label07;

     label10:
        i18 = 0;

     label11:
        if i18 >= i0 goto label16;

        i19 = i18 + 1;

     label12:
        if i19 >= i0 goto label15;

        $d16 = r1[i18];

        $d15 = r1[i19];

        $b14 = $d16 cmpl $d15;

        if $b14 != 0 goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i19 = i19 + 1;

        goto label12;

     label15:
        i18 = i18 + 1;

        goto label11;

     label16:
        r32 = newarray (double)[i0];

        r33 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i20 = 0;

     label17:
        if i20 >= i2 goto label24;

        r32 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r15 = r2[i20];

        r34 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r15, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r32, r34);

        $r16 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r35 = virtualinvoke $r16.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r32);

        $r17 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r36 = virtualinvoke $r17.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r34, r35);

        r37 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] firstDerivativeCalculator(double[])>(r36);

        $r18 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r19 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r34, r35, r36, r37);

        specialinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r20);

        r33[i20] = $r18;

        i21 = 0;

     label18:
        $i9 = lengthof r35;

        if i21 >= $i9 goto label23;

        d21 = 0.0;

        i22 = 0;

     label19:
        if i22 >= 4 goto label20;

        $r21 = r33[i20];

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r23 = $r22[i21];

        $d10 = $r23[i22];

        $d9 = r35[i21];

        $i13 = 3 - i22;

        $d8 = (double) $i13;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, $d8);

        $d12 = $d10 * $d11;

        d21 = d21 + $d12;

        $r24 = r33[i20];

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r26 = $r25[i21];

        $d13 = $r26[i22];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r27 = r33[i20];

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r29 = $r28[i21];

        $d14 = $r29[i22];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d14);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i22 = i22 + 1;

        goto label19;

     label20:
        $d0 = staticinvoke <java.lang.Math: double abs(double)>(d21);

        $i10 = i21 + 1;

        $d1 = r34[$i10];

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d3 = $d0 + $d2;

        d22 = staticinvoke <java.lang.Math: double max(double,double)>($d3, 0.1);

        $i11 = i21 + 1;

        $d4 = r34[$i11];

        $d5 = d21 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $d7 = 1.0E-13 * d22;

        $b12 = $d6 cmpg $d7;

        if $b12 >= 0 goto label21;

        $z9 = 1;

        goto label22;

     label21:
        $z9 = 0;

     label22:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Input is too large/small or data points are too close");

        i21 = i21 + 1;

        goto label18;

     label23:
        i20 = i20 + 1;

        goto label17;

     label24:
        $r7 = r33[0];

        i23 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r8 = r33[0];

        i24 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i6 = i2 * i23;

        r38 = newmultiarray (double)[$i6][i24];

        i25 = 0;

     label25:
        if i25 >= i23 goto label28;

        i26 = 0;

     label26:
        if i26 >= i2 goto label27;

        $i7 = i2 * i25;

        $i8 = $i7 + i26;

        $r12 = r33[i26];

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i25);

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r38[$i8] = $r14;

        i26 = i26 + 1;

        goto label26;

     label27:
        i25 = i25 + 1;

        goto label25;

     label28:
        $r9 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r32);

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r38);

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r10, $r11, i24, i2);

        return $r9;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r2, $r15, r18, r19;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        double[][] r3, $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r5, r22;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r8, $r9, $r10, $r11;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21;
        byte $b11, $b13;
        int[] $r16;
        java.lang.Double $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r20, r21;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "(xValues length = yValues length) should be true");

        $i4 = lengthof r1;

        if $i4 <= 2 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Data points should be >= 3");

        i0 = lengthof r1;

        i14 = 0;

     label05:
        if i14 >= i0 goto label06;

        $d16 = r1[i14];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d16);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "xValues containing NaN");

        $d17 = r1[i14];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d17);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xValues containing Infinity");

        $d18 = r2[i14];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d18);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing NaN");

        $d19 = r2[i14];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d19);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValues containing Infinity");

        i14 = i14 + 1;

        goto label05;

     label06:
        i15 = 0;

     label07:
        $i5 = i0 - 1;

        if i15 >= $i5 goto label12;

        i16 = i15 + 1;

     label08:
        if i16 >= i0 goto label11;

        $d15 = r1[i15];

        $d14 = r1[i16];

        $b13 = $d15 cmpl $d14;

        if $b13 != 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z7, "xValues should be distinct");

        i16 = i16 + 1;

        goto label08;

     label11:
        i15 = i15 + 1;

        goto label07;

     label12:
        $r8 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r18 = virtualinvoke $r8.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r1);

        $r9 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r19 = virtualinvoke $r9.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r2, r18);

        $r10 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] slopeSensitivityCalculator(double[])>(r18);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[],double[],double[],double[][])>(r2, r18, r19, r3);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r5 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[],double[],double[][],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r2, r18, r19, r3, r4);

        i17 = 0;

     label13:
        if i17 >= i0 goto label18;

        r20 = r5[i17];

        i18 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i19 = 0;

     label14:
        if i19 >= i18 goto label17;

        i20 = 0;

     label15:
        if i20 >= i1 goto label16;

        $r16 = newarray (int)[2];

        $r16[0] = i19;

        $r16[1] = i20;

        $r17 = virtualinvoke r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r16);

        $d13 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i20 = i20 + 1;

        goto label15;

     label16:
        i19 = i19 + 1;

        goto label14;

     label17:
        i17 = i17 + 1;

        goto label13;

     label18:
        r21 = r5[0];

        i21 = 0;

     label19:
        $i6 = i0 - 1;

        if i21 >= $i6 goto label24;

        d20 = 0.0;

        i22 = 0;

     label20:
        if i22 >= 4 goto label21;

        $r14 = virtualinvoke r21.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r15 = $r14[i21];

        $d10 = $r15[i22];

        $d9 = r18[i21];

        $i12 = 3 - i22;

        $d8 = (double) $i12;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, $d8);

        $d12 = $d10 * $d11;

        d20 = d20 + $d12;

        i22 = i22 + 1;

        goto label20;

     label21:
        $d0 = staticinvoke <java.lang.Math: double abs(double)>(d20);

        $i9 = i21 + 1;

        $d1 = r2[$i9];

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d3 = $d0 + $d2;

        d21 = staticinvoke <java.lang.Math: double max(double,double)>($d3, 0.1);

        $i10 = i21 + 1;

        $d4 = r2[$i10];

        $d5 = d20 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $d7 = 1.0E-13 * d21;

        $b11 = $d6 cmpg $d7;

        if $b11 >= 0 goto label22;

        $z8 = 1;

        goto label23;

     label22:
        $z8 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Input is too large/small or data points are too close");

        i21 = i21 + 1;

        goto label19;

     label24:
        $i7 = i0 - 1;

        r22 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i7];

        $i8 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 1, r22, 0, $i8);

        i23 = virtualinvoke r21.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r13, r21, i23, 1, r22);

        return $r12;
    }

    private double[] firstDerivativeCalculator(double[])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, i20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40;
        byte $b4, $b6, $b16;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r2 = newarray (double)[i0];

        r3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] getExtraPoints(double[])>(r1);

        i20 = 0;

     label1:
        if i20 >= i0 goto label6;

        $i2 = i20 + 3;

        $d1 = r3[$i2];

        $i3 = i20 + 2;

        $d0 = r3[$i3];

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b4 = $d3 cmpl 0.0;

        if $b4 != 0 goto label3;

        $i15 = i20 + 1;

        $d33 = r3[$i15];

        $d32 = r3[i20];

        $d34 = $d33 - $d32;

        $d35 = staticinvoke <java.lang.Math: double abs(double)>($d34);

        $b16 = $d35 cmpl 0.0;

        if $b16 != 0 goto label2;

        $i18 = i20 + 1;

        $d38 = r3[$i18];

        $i19 = i20 + 2;

        $d37 = r3[$i19];

        $d39 = $d38 + $d37;

        $d40 = 0.5 * $d39;

        r2[i20] = $d40;

        goto label5;

     label2:
        $i17 = i20 + 2;

        $d36 = r3[$i17];

        r2[i20] = $d36;

        goto label5;

     label3:
        $i5 = i20 + 1;

        $d5 = r3[$i5];

        $d4 = r3[i20];

        $d6 = $d5 - $d4;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $b6 = $d7 cmpl 0.0;

        if $b6 != 0 goto label4;

        $d31 = r3[i20];

        r2[i20] = $d31;

        goto label5;

     label4:
        $i7 = i20 + 3;

        $d9 = r3[$i7];

        $i8 = i20 + 2;

        $d8 = r3[$i8];

        $d10 = $d9 - $d8;

        $d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $i9 = i20 + 1;

        $d12 = r3[$i9];

        $d16 = $d11 * $d12;

        $i10 = i20 + 1;

        $d14 = r3[$i10];

        $d13 = r3[i20];

        $d15 = $d14 - $d13;

        $d17 = staticinvoke <java.lang.Math: double abs(double)>($d15);

        $i11 = i20 + 2;

        $d18 = r3[$i11];

        $d19 = $d17 * $d18;

        $d23 = $d16 + $d19;

        $i12 = i20 + 3;

        $d21 = r3[$i12];

        $i13 = i20 + 2;

        $d20 = r3[$i13];

        $d22 = $d21 - $d20;

        $d24 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $i14 = i20 + 1;

        $d26 = r3[$i14];

        $d25 = r3[i20];

        $d27 = $d26 - $d25;

        $d28 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $d29 = $d24 + $d28;

        $d30 = $d23 / $d29;

        r2[i20] = $d30;

     label5:
        i20 = i20 + 1;

        goto label1;

     label6:
        return r2;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[], double[], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r2, r3, r5, r9, r10, r11, $r15, $r17, $r19, $r21, $r24, $r25, $r27, $r28, $r30, $r32, $r34, $r36, $r38, $r39, $r41, $r42, $r46, $r47, r49;
        double[][] r4, r6;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, i24, i25, i26, i27;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r7, r48;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r14, $r16, $r18, $r20, $r22, $r23, $r26, $r29, $r31, $r33, $r35, $r45;
        byte $b4, $b19, $b20, $b21;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r37, $r40;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        i0 = lengthof r1;

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] getExtraPoints(double[])>(r3);

        $i1 = i0 + 3;

        r6 = newmultiarray (double)[i0][$i1];

        $i2 = i0 + 1;

        r7 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i2];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r4);

        i24 = 0;

     label01:
        if i24 >= i0 goto label02;

        $r45 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getColumnVector(int)>(i24);

        $r46 = virtualinvoke $r45.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r47 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] getExtraPoints(double[])>($r46);

        r6[i24] = $r47;

        i24 = i24 + 1;

        goto label01;

     label02:
        r48 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] modSlopesWithSensitivityCalculator(double[],double[][])>(r5, r6);

        r9 = newarray (double)[i0];

        i25 = 0;

     label03:
        if i25 >= i0 goto label15;

        r10 = newarray (double)[i0];

        $r14 = r48[0];

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i3 = i25 + 2;

        $d4 = $r15[$i3];

        $r16 = r48[0];

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d5 = $r17[i25];

        d0 = $d4 + $d5;

        $b4 = d0 cmpl 0.0;

        if $b4 != 0 goto label12;

        $i17 = i25 + 1;

        $d38 = r5[$i17];

        $i18 = i25 + 2;

        $d37 = r5[$i18];

        $d39 = $d38 + $d37;

        $d40 = 0.5 * $d39;

        r9[i25] = $d40;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r10, 0.0);

        r49 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r11 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        i26 = 0;

     label04:
        if i26 >= i0 goto label11;

        $d41 = r1[i26];

        $d42 = staticinvoke <java.lang.Math: double abs(double)>($d41);

        $b19 = $d42 cmpg 1.0E-14;

        if $b19 >= 0 goto label05;

        $d55 = 1.0E-7;

        goto label06;

     label05:
        $d43 = r1[i26];

        $d55 = $d43 * 1.0E-7;

     label06:
        d1 = $d55;

        $i23 = i26;

        $d44 = r1[i26];

        $d45 = staticinvoke <java.lang.Math: double abs(double)>($d44);

        $b20 = $d45 cmpg 1.0E-14;

        if $b20 >= 0 goto label07;

        $d56 = 1.0E-7;

        goto label08;

     label07:
        $d46 = r1[i26];

        $d56 = $d46 * 1.0000001;

     label08:
        r49[$i23] = $d56;

        $i22 = i26;

        $d47 = r1[i26];

        $d48 = staticinvoke <java.lang.Math: double abs(double)>($d47);

        $b21 = $d48 cmpg 1.0E-14;

        if $b21 >= 0 goto label09;

        $d57 = -1.0E-7;

        goto label10;

     label09:
        $d49 = r1[i26];

        $d57 = $d49 * 0.9999999;

     label10:
        r11[$i22] = $d57;

        $r37 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r38 = virtualinvoke $r37.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r49, r2);

        $r39 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] firstDerivativeCalculator(double[])>($r38);

        d2 = $r39[i25];

        $r40 = r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r41 = virtualinvoke $r40.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r11, r2);

        $r42 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double[] firstDerivativeCalculator(double[])>($r41);

        d3 = $r42[i25];

        $d50 = d2 - d3;

        $d51 = 0.5 * $d50;

        $d52 = $d51 / d1;

        r10[i26] = $d52;

        $d53 = r1[i26];

        r49[i26] = $d53;

        $d54 = r1[i26];

        r11[i26] = $d54;

        i26 = i26 + 1;

        goto label04;

     label11:
        goto label14;

     label12:
        $r18 = r48[0];

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i5 = i25 + 2;

        $d7 = $r19[$i5];

        $i6 = i25 + 1;

        $d6 = r5[$i6];

        $d8 = $d7 * $d6;

        $d9 = $d8 / d0;

        $r20 = r48[0];

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d11 = $r21[i25];

        $i7 = i25 + 2;

        $d10 = r5[$i7];

        $d12 = $d11 * $d10;

        $d13 = $d12 / d0;

        $d14 = $d9 + $d13;

        r9[i25] = $d14;

        i27 = 0;

     label13:
        if i27 >= i0 goto label14;

        $r23 = r48[0];

        $r24 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i9 = i25 + 2;

        $d16 = $r24[$i9];

        $r25 = r6[i27];

        $i10 = i25 + 1;

        $d15 = $r25[$i10];

        $d17 = $d16 * $d15;

        $r26 = r48[0];

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d19 = $r27[i25];

        $r28 = r6[i27];

        $i11 = i25 + 2;

        $d18 = $r28[$i11];

        $d20 = $d19 * $d18;

        $d21 = $d17 + $d20;

        $d24 = $d21 / d0;

        $i12 = i25 + 2;

        $d23 = r5[$i12];

        $i13 = i25 + 1;

        $d22 = r5[$i13];

        $d25 = $d23 - $d22;

        $r29 = r48[0];

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i14 = i25 + 2;

        $d26 = $r30[$i14];

        $i15 = i25 + 1;

        $r31 = r48[$i15];

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d27 = $r32[i27];

        $d28 = $d26 * $d27;

        $r33 = r48[0];

        $r34 = virtualinvoke $r33.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d29 = $r34[i25];

        $i16 = i25 + 3;

        $r35 = r48[$i16];

        $r36 = virtualinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d30 = $r36[i27];

        $d31 = $d29 * $d30;

        $d32 = $d28 - $d31;

        $d33 = $d25 * $d32;

        $d34 = $d33 / d0;

        $d35 = $d34 / d0;

        $d36 = $d24 + $d35;

        r10[i27] = $d36;

        i27 = i27 + 1;

        goto label13;

     label14:
        $i8 = i25 + 1;

        $r22 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r10);

        r7[$i8] = $r22;

        i25 = i25 + 1;

        goto label03;

     label15:
        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r9);

        r7[0] = $r13;

        return r7;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] modSlopesWithSensitivityCalculator(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r3, r5, $r7, $r8, $r9, $r10;
        double[][] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, i13, i14, i15, $i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r6, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        byte $b6, $b8;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $i1 = lengthof r1;

        i0 = $i1 - 3;

        $i2 = i0 + 2;

        r3 = newarray (double)[$i2];

        $i3 = i0 + 3;

        r4 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i3];

        i13 = 0;

     label1:
        $i4 = i0 + 2;

        if i13 >= $i4 goto label8;

        r5 = newarray (double)[i0];

        $i5 = i13 + 1;

        $d1 = r1[$i5];

        $d0 = r1[i13];

        $b6 = $d1 cmpl $d0;

        if $b6 != 0 goto label2;

        r3[i13] = 0.0;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r5, 0.0);

        goto label7;

     label2:
        $i7 = i13 + 1;

        $d3 = r1[$i7];

        $d2 = r1[i13];

        $b8 = $d3 cmpl $d2;

        if $b8 <= 0 goto label5;

        $i11 = i13 + 1;

        $d13 = r1[$i11];

        $d12 = r1[i13];

        $d14 = $d13 - $d12;

        r3[i13] = $d14;

        i14 = 0;

     label3:
        if i14 >= i0 goto label4;

        $r9 = r2[i14];

        $i12 = i13 + 1;

        $d16 = $r9[$i12];

        $r10 = r2[i14];

        $d15 = $r10[i13];

        $d17 = $d16 - $d15;

        r5[i14] = $d17;

        i14 = i14 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        $i9 = i13 + 1;

        $d4 = r1[$i9];

        $d6 = neg $d4;

        $d5 = r1[i13];

        $d7 = $d6 + $d5;

        r3[i13] = $d7;

        i15 = 0;

     label6:
        if i15 >= i0 goto label7;

        $r7 = r2[i15];

        $i10 = i13 + 1;

        $d8 = $r7[$i10];

        $d10 = neg $d8;

        $r8 = r2[i15];

        $d9 = $r8[i13];

        $d11 = $d10 + $d9;

        r5[i15] = $d11;

        i15 = i15 + 1;

        goto label6;

     label7:
        $i16 = i13 + 1;

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        r4[$i16] = $r11;

        i13 = i13 + 1;

        goto label1;

     label8:
        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        r4[0] = $r6;

        return r4;
    }

    private double[] getExtraPoints(double[])
    {
        com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator r0;
        double[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        $i2 = i0 + 3;

        r2 = newarray (double)[$i2];

        $d0 = r1[0];

        $d3 = 3.0 * $d0;

        $d1 = r1[1];

        $d2 = 2.0 * $d1;

        $d4 = $d3 - $d2;

        r2[0] = $d4;

        $d5 = r1[0];

        $d7 = 2.0 * $d5;

        $d6 = r1[1];

        $d8 = $d7 - $d6;

        r2[1] = $d8;

        $i5 = i0 + 1;

        $i3 = i0 - 2;

        $d9 = r1[$i3];

        $d11 = 2.0 * $d9;

        $i4 = i0 - 3;

        $d10 = r1[$i4];

        $d12 = $d11 - $d10;

        r2[$i5] = $d12;

        $i8 = i0 + 2;

        $i6 = i0 - 2;

        $d13 = r1[$i6];

        $d16 = 3.0 * $d13;

        $i7 = i0 - 3;

        $d14 = r1[$i7];

        $d15 = 2.0 * $d14;

        $d17 = $d16 - $d15;

        r2[$i8] = $d17;

        $i9 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 2, $i9);

        return r2;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double SMALL> = 1.0E-14;

        <com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double EPS> = 1.0E-7;

        <com.opengamma.analytics.math.interpolation.SemiLocalCubicSplineInterpolator: double ERROR> = 1.0E-13;

        return;
    }
}
