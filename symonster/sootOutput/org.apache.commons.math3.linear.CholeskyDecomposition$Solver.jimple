class org.apache.commons.math3.linear.CholeskyDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
{
    private final double[][] lTData;

    private void <init>(double[][])
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData> = r1;

        return;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        return 1;
    }

    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, $i1, $i2, i3, i4, i5, i6;
        double[] r2, $r6, $r8, r11;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        double[][] $r3, $r5, $r7, $r9;
        org.apache.commons.math3.linear.ArrayRealVector $r4;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        i0 = lengthof $r3;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label1;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r10;

     label1:
        r2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        $r9 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r11 = $r9[i3];

        $d9 = r2[i3];

        $d8 = r11[i3];

        $d10 = $d9 / $d8;

        r2[i3] = $d10;

        d0 = r2[i3];

        i4 = i3 + 1;

     label3:
        if i4 >= i0 goto label4;

        $d13 = r2[i4];

        $d11 = r11[i4];

        $d12 = d0 * $d11;

        $d14 = $d13 - $d12;

        r2[i4] = $d14;

        i4 = i4 + 1;

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i5 = i0 - 1;

     label6:
        if i5 < 0 goto label9;

        $d2 = r2[i5];

        $r5 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $r6 = $r5[i5];

        $d1 = $r6[i5];

        $d3 = $d2 / $d1;

        r2[i5] = $d3;

        d15 = r2[i5];

        i6 = 0;

     label7:
        if i6 >= i5 goto label8;

        $d6 = r2[i6];

        $r7 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $r8 = $r7[i6];

        $d4 = $r8[i5];

        $d5 = d15 * $d4;

        $d7 = $d6 - $d5;

        r2[i6] = $d7;

        i6 = i6 + 1;

        goto label7;

     label8:
        i5 = i5 + -1;

        goto label6;

     label9:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r4;
    }

    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11;
        double[][] r2, $r4, $r6, $r8, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, d15;
        double[] r3, $r7, $r9, r12, r13, r14, r15;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r4 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        i0 = lengthof $r4;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 == i0 goto label01;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r11;

     label01:
        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        i4 = 0;

     label02:
        if i4 >= i0 goto label09;

        $r10 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        r12 = $r10[i4];

        d0 = r12[i4];

        r13 = r2[i4];

        i5 = 0;

     label03:
        if i5 >= i1 goto label04;

        $d12 = r13[i5];

        $d13 = $d12 / d0;

        r13[i5] = $d13;

        i5 = i5 + 1;

        goto label03;

     label04:
        i6 = i4 + 1;

     label05:
        if i6 >= i0 goto label08;

        r14 = r2[i6];

        d1 = r12[i6];

        i7 = 0;

     label06:
        if i7 >= i1 goto label07;

        $d10 = r14[i7];

        $d8 = r13[i7];

        $d9 = $d8 * d1;

        $d11 = $d10 - $d9;

        r14[i7] = $d11;

        i7 = i7 + 1;

        goto label06;

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        i4 = i4 + 1;

        goto label02;

     label09:
        i8 = i0 - 1;

     label10:
        if i8 < 0 goto label17;

        $r6 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $r7 = $r6[i8];

        d14 = $r7[i8];

        r3 = r2[i8];

        i9 = 0;

     label11:
        if i9 >= i1 goto label12;

        $d6 = r3[i9];

        $d7 = $d6 / d14;

        r3[i9] = $d7;

        i9 = i9 + 1;

        goto label11;

     label12:
        i10 = 0;

     label13:
        if i10 >= i8 goto label16;

        r15 = r2[i10];

        $r8 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $r9 = $r8[i10];

        d15 = $r9[i8];

        i11 = 0;

     label14:
        if i11 >= i1 goto label15;

        $d4 = r15[i11];

        $d2 = r3[i11];

        $d3 = $d2 * d15;

        $d5 = $d4 - $d3;

        r15[i11] = $d5;

        i11 = i11 + 1;

        goto label14;

     label15:
        i10 = i10 + 1;

        goto label13;

     label16:
        i8 = i8 + -1;

        goto label10;

     label17:
        $r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>(r2);

        return $r5;
    }

    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] $r1;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: double[][] lTData>;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r3;
    }

    void <init>(double[][], org.apache.commons.math3.linear.CholeskyDecomposition$1)
    {
        org.apache.commons.math3.linear.CholeskyDecomposition$Solver r0;
        double[][] r1;
        org.apache.commons.math3.linear.CholeskyDecomposition$1 r2;

        r0 := @this: org.apache.commons.math3.linear.CholeskyDecomposition$Solver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: org.apache.commons.math3.linear.CholeskyDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.CholeskyDecomposition$Solver: void <init>(double[][])>(r1);

        return;
    }
}
