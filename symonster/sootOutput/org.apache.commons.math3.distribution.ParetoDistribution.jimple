public class org.apache.commons.math3.distribution.ParetoDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private final double scale;
    private final double shape;
    private final double solverAbsoluteAccuracy;

    public void <init>()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        specialinvoke r0.<org.apache.commons.math3.distribution.ParetoDistribution: void <init>(double,double)>(1.0, 1.0);

        return;
    }

    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ParetoDistribution: void <init>(double,double,double)>(d0, d1, 1.0E-9);

        return;
    }

    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, d1, d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.ParetoDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, d0, d1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ParetoDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>(r1, d0, d1, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d2;
        byte $b0, $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2, $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3, $r6;
        java.lang.Double $r4, $r7;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SCALE>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label1:
        $b1 = d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SHAPE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label2:
        r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale> = d0;

        r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape> = d1;

        r0.<org.apache.commons.math3.distribution.ParetoDistribution: double solverAbsoluteAccuracy> = d2;

        return;
    }

    public double getScale()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        return $d0;
    }

    public double getShape()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d3 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d2 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d2);

        $d5 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d6 = $d5 + 1.0;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d6);

        $d9 = $d4 / $d7;

        $d8 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d10 = $d9 * $d8;

        return $d10;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return #-Infinity;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d4 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d5 = $d3 * $d4;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d7 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d8 = $d7 + 1.0;

        $d9 = $d6 * $d8;

        $d11 = $d5 - $d9;

        $d10 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d10);

        $d13 = $d11 + $d12;

        return $d13;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $b0 = d0 cmpg $d1;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d4 = $d2 / d0;

        $d3 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, $d3);

        $d6 = 1.0 - $d5;

        return $d6;
    }

    public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.ParetoDistribution: double probability(double,double)>(d0, d1);

        return $d2;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $b0 = $d0 cmpg 1.0;

        if $b0 > 0 goto label1;

        return #Infinity;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d5 = $d2 * $d1;

        $d3 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d4 = $d3 - 1.0;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $b0 = $d1 cmpg 2.0;

        if $b0 > 0 goto label1;

        return #Infinity;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        d0 = $d2 - 1.0;

        $d4 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d3 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d6 = $d4 * $d3;

        $d5 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d8 = $d6 * $d5;

        $d7 = d0 * d0;

        $d11 = $d8 / $d7;

        $d9 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d10 = $d9 - 2.0;

        $d12 = $d11 / $d10;

        return $d12;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        return $d0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        return 1;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.ParetoDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.ParetoDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d3 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double scale>;

        $d1 = r0.<org.apache.commons.math3.distribution.ParetoDistribution: double shape>;

        $d2 = 1.0 / $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d2);

        $d5 = $d3 / $d4;

        return $d5;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.ParetoDistribution: long serialVersionUID> = 20130424L;

        <org.apache.commons.math3.distribution.ParetoDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
