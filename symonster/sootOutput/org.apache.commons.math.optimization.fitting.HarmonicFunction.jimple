public class org.apache.commons.math.optimization.fitting.HarmonicFunction extends java.lang.Object implements org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction
{
    private final double a;
    private final double omega;
    private final double phi;

    public void <init>(double, double, double)
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double a> = d0;

        r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double omega> = d1;

        r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double phi> = d2;

        return;
    }

    public double value(double)
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        d0 := @parameter0: double;

        $d5 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double a>;

        $d1 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double omega>;

        $d3 = $d1 * d0;

        $d2 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double phi>;

        $d4 = $d3 + $d2;

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>($d4);

        $d7 = $d5 * $d6;

        return $d7;
    }

    public org.apache.commons.math.optimization.fitting.HarmonicFunction derivative()
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0, $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $r1 = new org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $d1 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double a>;

        $d0 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double omega>;

        $d5 = $d1 * $d0;

        $d4 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double omega>;

        $d2 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double phi>;

        $d3 = $d2 + 1.5707963267948966;

        specialinvoke $r1.<org.apache.commons.math.optimization.fitting.HarmonicFunction: void <init>(double,double,double)>($d5, $d4, $d3);

        return $r1;
    }

    public double getAmplitude()
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $d0 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double a>;

        return $d0;
    }

    public double getPulsation()
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $d0 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double omega>;

        return $d0;
    }

    public double getPhase()
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0;
        double $d0;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $d0 = r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: double phi>;

        return $d0;
    }

    public volatile org.apache.commons.math.analysis.UnivariateRealFunction derivative()
    {
        org.apache.commons.math.optimization.fitting.HarmonicFunction r0, $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.HarmonicFunction;

        $r1 = virtualinvoke r0.<org.apache.commons.math.optimization.fitting.HarmonicFunction: org.apache.commons.math.optimization.fitting.HarmonicFunction derivative()>();

        return $r1;
    }
}
