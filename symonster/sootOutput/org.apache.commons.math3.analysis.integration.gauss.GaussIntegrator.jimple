public class org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator extends java.lang.Object
{
    private final double[] points;
    private final double[] weights;

    public void <init>(double[], double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        double[] r1, r2, $r5, $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r3;
        java.lang.Object $r4, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, $i2);

        throw $r8;

     label1:
        $r3 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>(r1, $r3, 1, 1);

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points> = $r5;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights> = $r7;

        return;
    }

    public void <init>(org.apache.commons.math3.util.Pair) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        org.apache.commons.math3.util.Pair r1;
        java.lang.Object $r2, $r4;
        double[] $r3, $r5;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        r1 := @parameter0: org.apache.commons.math3.util.Pair;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getFirst()>();

        $r3 = (double[]) $r2;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.util.Pair: java.lang.Object getSecond()>();

        $r5 = (double[]) $r4;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: void <init>(double[],double[])>($r3, $r5);

        return;
    }

    public double integrate(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, d7, d8;
        double[] $r2, $r3, $r4;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        d7 = 0.0;

        d8 = 0.0;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        d0 = $r3[i1];

        $r4 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights>;

        d1 = $r4[i1];

        $d4 = interfaceinvoke r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        $d5 = d1 * $d4;

        d2 = $d5 - d8;

        d3 = d7 + d2;

        $d6 = d3 - d7;

        d8 = $d6 - d2;

        d7 = d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d7;
    }

    public int getNumberOfPoints()
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public double getPoint(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] points>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double getWeight(int)
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double[] weights>;

        $d0 = $r1[i0];

        return $d0;
    }
}
