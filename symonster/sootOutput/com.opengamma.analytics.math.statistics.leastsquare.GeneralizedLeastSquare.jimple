public class com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare extends java.lang.Object
{
    private final com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition;
    private final com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra;

    public void <init>()
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons $r1;
        com.opengamma.analytics.math.matrix.ColtMatrixAlgebra $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons;

        specialinvoke $r1.<com.opengamma.analytics.math.linearalgebra.SVDecompositionCommons: void <init>()>();

        r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition> = $r1;

        $r2 = new com.opengamma.analytics.math.matrix.ColtMatrixAlgebra;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.ColtMatrixAlgebra: void <init>()>();

        r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra> = $r2;

        return;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.lang.Object[], double[], double[], java.util.List)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.lang.Object[] r1;
        double[] r2, r3;
        java.util.List r4;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r5;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.util.List;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.lang.Object[],double[],double[],java.util.List,double,int)>(r1, r2, r3, r4, 0.0, 0);

        return $r5;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.lang.Object[], double[], double[], java.util.List, double, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.lang.Object[] r1;
        double[] r2, r3;
        java.util.List r4;
        double d0;
        int i0, i1, $i2, $i3;
        java.util.ArrayList r5, r6, r7;
        byte $b4;
        java.lang.Double[] $r12, $r13;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r14;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.util.List;

        d0 := @parameter4: double;

        i0 := @parameter5: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "x null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "y null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "sigma null");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r4, "empty basisFunctions");

        i1 = lengthof r1;

        if i1 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "no data");

        $i2 = lengthof r2;

        if $i2 != i1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "y wrong length");

        $i3 = lengthof r3;

        if $i3 != i1 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "sigma wrong length");

        $b4 = d0 cmpl 0.0;

        if $b4 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "negative lambda");

        if i0 < 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "difference order");

        r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>(r1);

        $r12 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Double[] toObject(double[])>(r2);

        r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r12);

        $r13 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Double[] toObject(double[])>(r3);

        r7 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r13);

        $r14 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solveImp(java.util.List,java.util.List,java.util.List,java.util.List,double,int)>(r5, r6, r7, r4, d0, i0);

        return $r14;
    }

    com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(double[], double[], double[], java.util.List, double, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        double[] r1, r2, r3;
        java.util.List r4;
        double d0;
        int i0;
        java.lang.Double[] $r5;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r6;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: java.util.List;

        d0 := @parameter4: double;

        i0 := @parameter5: int;

        $r5 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Double[] toObject(double[])>(r1);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.lang.Object[],double[],double[],java.util.List,double,int)>($r5, r2, r3, r4, d0, i0);

        return $r6;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.util.List r1, r2, r3, r4;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r5;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.util.List,java.util.List,java.util.List,java.util.List,double,int)>(r1, r2, r3, r4, 0.0, 0);

        return $r5;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.util.List, java.util.List, java.util.List, java.util.List, double, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.util.List r1, r2, r3, r4;
        double d0;
        int i0, i1, $i2, $i3;
        byte $b4;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r9;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        d0 := @parameter4: double;

        i0 := @parameter5: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r1, "empty measurement points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r2, "empty measurement values");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r3, "empty measurement errors");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r4, "empty basisFunctions");

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "no data");

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 != i1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "y wrong length");

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 != i1 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "sigma wrong length");

        $b4 = d0 cmpl 0.0;

        if $b4 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "negative lambda");

        if i0 < 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "difference order");

        $r9 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solveImp(java.util.List,java.util.List,java.util.List,java.util.List,double,int)>(r1, r2, r3, r4, d0, i0);

        return $r9;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solve(java.util.List, java.util.List, java.util.List, java.util.List, int[], double[], int[])
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.util.List r1, r2, r3, r4;
        int[] r5, r7;
        double[] r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, i11;
        java.lang.Object[] $r12, $r15;
        java.lang.Integer $r13, $r14, $r16, $r17;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r18;
        double $d0;
        byte $b9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: int[];

        r6 := @parameter5: double[];

        r7 := @parameter6: int[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r1, "empty measurement points");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r2, "empty measurement values");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r3, "empty measurement errors");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.util.Collection notEmpty(java.util.Collection,java.lang.String)>(r4, "empty basisFunctions");

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "no data");

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 != i0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "y wrong length");

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 != i0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "sigma wrong length");

        i1 = lengthof r5;

        $i4 = lengthof r6;

        if i1 != $i4 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        $r12 = newarray (java.lang.Object)[2];

        $i5 = lengthof r6;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[1] = $r14;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "number of penalty functions {} must be equal to number of directions {}", $r12);

        $i6 = lengthof r7;

        if i1 != $i6 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        $r15 = newarray (java.lang.Object)[2];

        $i7 = lengthof r7;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r15[1] = $r17;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "number of difference order {} must be equal to number of directions {}", $r15);

        i11 = 0;

     label11:
        if i11 >= i1 goto label18;

        $i8 = r5[i11];

        if $i8 <= 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "sizes must be >= 1");

        $d0 = r6[i11];

        $b9 = $d0 cmpl 0.0;

        if $b9 < 0 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "negative lambda");

        $i10 = r7[i11];

        if $i10 < 0 goto label16;

        $z7 = 1;

        goto label17;

     label16:
        $z7 = 0;

     label17:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "difference order");

        i11 = i11 + 1;

        goto label11;

     label18:
        $r18 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solveImp(java.util.List,java.util.List,java.util.List,java.util.List,int[],double[],int[])>(r1, r2, r3, r4, r5, r6, r7);

        return $r18;
    }

    private com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solveImp(java.util.List, java.util.List, java.util.List, java.util.List, double, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.util.List r1, r2, r3, r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, d20;
        int i0, i1, i2, i5, i6, i7, i8, i9, i10, i11;
        double[] r5, r6, $r20, $r27, $r28;
        double[][] r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r10, $r14, r36, r37;
        byte $b3, $b4;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r12;
        java.lang.Object $r13, $r16, $r25, $r29, $r31, $r32, $r34;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r15;
        java.lang.Double $r17, $r19, $r26, $r33, $r35;
        int[] $r18;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r21, $r22;
        com.opengamma.analytics.math.matrix.Matrix $r23, $r24;
        com.opengamma.analytics.math.function.Function1D $r30;
        boolean $z0;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r38;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        d0 := @parameter4: double;

        i0 := @parameter5: int;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = interfaceinvoke r4.<java.util.List: int size()>();

        r5 = newarray (double)[i2];

        r6 = newarray (double)[i1];

        r7 = newmultiarray (double)[i2][i1];

        i5 = 0;

     label01:
        if i5 >= i1 goto label04;

        $r34 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        $r35 = (java.lang.Double) $r34;

        d17 = virtualinvoke $r35.<java.lang.Double: double doubleValue()>();

        $b4 = d17 cmpl 0.0;

        if $b4 <= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "sigma must be greater than zero");

        $d15 = 1.0 / d17;

        $d16 = $d15 / d17;

        r6[i5] = $d16;

        i5 = i5 + 1;

        goto label01;

     label04:
        i6 = 0;

     label05:
        if i6 >= i2 goto label08;

        i7 = 0;

     label06:
        if i7 >= i1 goto label07;

        $r28 = r7[i6];

        $r29 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i6);

        $r30 = (com.opengamma.analytics.math.function.Function1D) $r29;

        $r31 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        $r32 = virtualinvoke $r30.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r31);

        $r33 = (java.lang.Double) $r32;

        $d14 = virtualinvoke $r33.<java.lang.Double: double doubleValue()>();

        $r28[i7] = $d14;

        i7 = i7 + 1;

        goto label06;

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        i8 = 0;

     label09:
        if i8 >= i2 goto label12;

        d18 = 0.0;

        i9 = 0;

     label10:
        if i9 >= i1 goto label11;

        $r25 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i9);

        $r26 = (java.lang.Double) $r25;

        $d9 = virtualinvoke $r26.<java.lang.Double: double doubleValue()>();

        $r27 = r7[i8];

        $d10 = $r27[i9];

        $d12 = $d9 * $d10;

        $d11 = r6[i9];

        $d13 = $d12 * $d11;

        d18 = d18 + $d13;

        i9 = i9 + 1;

        goto label10;

     label11:
        r5[i8] = d18;

        i8 = i8 + 1;

        goto label09;

     label12:
        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r5);

        r36 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getAMatrix(double[][],double[])>(r7, r6);

        $b3 = d0 cmpl 0.0;

        if $b3 <= 0 goto label13;

        r37 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getDiffMatrix(int,int)>(i2, i0);

        $r22 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r21 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r23 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>(r37, d0);

        $r24 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r36, $r23);

        r36 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r24;

     label13:
        $r12 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r36);

        r38 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r13;

        r9 = interfaceinvoke r38.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r11);

        $r14 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i2);

        r10 = interfaceinvoke r38.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r14);

        d19 = 0.0;

        i10 = 0;

     label14:
        if i10 >= i1 goto label17;

        d20 = 0.0;

        i11 = 0;

     label15:
        if i11 >= i2 goto label16;

        $r18 = newarray (int)[1];

        $r18[0] = i11;

        $r19 = virtualinvoke r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r18);

        $d6 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $r20 = r7[i11];

        $d7 = $r20[i10];

        $d8 = $d6 * $d7;

        d20 = d20 + $d8;

        i11 = i11 + 1;

        goto label15;

     label16:
        $r16 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r17 = (java.lang.Double) $r16;

        $d1 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $d2 = $d1 - d20;

        $d3 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d2);

        $d4 = r6[i10];

        $d5 = $d3 * $d4;

        d19 = d19 + $d5;

        i10 = i10 + 1;

        goto label14;

     label17:
        $r15 = new com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults;

        specialinvoke $r15.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults: void <init>(java.util.List,double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r4, d19, r9, r10);

        return $r15;
    }

    private com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults solveImp(java.util.List, java.util.List, java.util.List, java.util.List, int[], double[], int[])
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        java.util.List r1, r2, r3, r4;
        int[] r5, r7, $r21;
        double[] r6, r8, r9, $r23, $r30, $r31;
        int i0, i1, i2, $i4, i6, i7, i8, i9, i10, i11, i12, i13;
        double[][] r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r12, $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r13, $r17, r39, r40;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r15;
        java.lang.Object $r16, $r19, $r28, $r32, $r34, $r35, $r37;
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults $r18;
        java.lang.Double $r20, $r22, $r29, $r36, $r38;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d21;
        byte $b3, $b5;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r24, $r25;
        com.opengamma.analytics.math.matrix.Matrix $r26, $r27;
        com.opengamma.analytics.math.function.Function1D $r33;
        boolean $z0;
        com.opengamma.analytics.math.linearalgebra.DecompositionResult r41;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: int[];

        r6 := @parameter5: double[];

        r7 := @parameter6: int[];

        i0 = lengthof r5;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = interfaceinvoke r4.<java.util.List: int size()>();

        r8 = newarray (double)[i2];

        r9 = newarray (double)[i1];

        r10 = newmultiarray (double)[i2][i1];

        i6 = 0;

     label01:
        if i6 >= i1 goto label04;

        $r37 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i6);

        $r38 = (java.lang.Double) $r37;

        d18 = virtualinvoke $r38.<java.lang.Double: double doubleValue()>();

        $b5 = d18 cmpl 0.0;

        if $b5 <= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "sigma must be great than zero");

        $d16 = 1.0 / d18;

        $d17 = $d16 / d18;

        r9[i6] = $d17;

        i6 = i6 + 1;

        goto label01;

     label04:
        i7 = 0;

     label05:
        if i7 >= i2 goto label08;

        i8 = 0;

     label06:
        if i8 >= i1 goto label07;

        $r31 = r10[i7];

        $r32 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i7);

        $r33 = (com.opengamma.analytics.math.function.Function1D) $r32;

        $r34 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        $r35 = virtualinvoke $r33.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r34);

        $r36 = (java.lang.Double) $r35;

        $d15 = virtualinvoke $r36.<java.lang.Double: double doubleValue()>();

        $r31[i8] = $d15;

        i8 = i8 + 1;

        goto label06;

     label07:
        i7 = i7 + 1;

        goto label05;

     label08:
        i9 = 0;

     label09:
        if i9 >= i2 goto label12;

        d19 = 0.0;

        i10 = 0;

     label10:
        if i10 >= i1 goto label11;

        $r28 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i10);

        $r29 = (java.lang.Double) $r28;

        $d10 = virtualinvoke $r29.<java.lang.Double: double doubleValue()>();

        $r30 = r10[i9];

        $d11 = $r30[i10];

        $d13 = $d10 * $d11;

        $d12 = r9[i10];

        $d14 = $d13 * $d12;

        d19 = d19 + $d14;

        i10 = i10 + 1;

        goto label10;

     label11:
        r8[i9] = d19;

        i9 = i9 + 1;

        goto label09;

     label12:
        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r8);

        r39 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getAMatrix(double[][],double[])>(r10, r9);

        i11 = 0;

     label13:
        if i11 >= i0 goto label15;

        $d8 = r6[i11];

        $b3 = $d8 cmpl 0.0;

        if $b3 <= 0 goto label14;

        $i4 = r7[i11];

        r40 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getDiffMatrix(int[],int,int)>(r5, $i4, i11);

        $r25 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r24 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $d9 = r6[i11];

        $r26 = virtualinvoke $r24.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix scale(com.opengamma.analytics.math.matrix.Matrix,double)>(r40, $d9);

        $r27 = virtualinvoke $r25.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix add(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r39, $r26);

        r39 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r27;

     label14:
        i11 = i11 + 1;

        goto label13;

     label15:
        $r15 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.linearalgebra.Decomposition _decomposition>;

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.linearalgebra.Decomposition: java.lang.Object evaluate(java.lang.Object)>(r39);

        r41 = (com.opengamma.analytics.math.linearalgebra.DecompositionResult) $r16;

        r12 = interfaceinvoke r41.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r14);

        $r17 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i2);

        r13 = interfaceinvoke r41.<com.opengamma.analytics.math.linearalgebra.DecompositionResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(com.opengamma.analytics.math.matrix.DoubleMatrix2D)>($r17);

        d20 = 0.0;

        i12 = 0;

     label16:
        if i12 >= i1 goto label19;

        d21 = 0.0;

        i13 = 0;

     label17:
        if i13 >= i2 goto label18;

        $r21 = newarray (int)[1];

        $r21[0] = i13;

        $r22 = virtualinvoke r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r21);

        $d5 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

        $r23 = r10[i13];

        $d6 = $r23[i12];

        $d7 = $d5 * $d6;

        d21 = d21 + $d7;

        i13 = i13 + 1;

        goto label17;

     label18:
        $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i12);

        $r20 = (java.lang.Double) $r19;

        $d0 = virtualinvoke $r20.<java.lang.Double: double doubleValue()>();

        $d1 = $d0 - d21;

        $d2 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d1);

        $d3 = r9[i12];

        $d4 = $d2 * $d3;

        d20 = d20 + $d4;

        i12 = i12 + 1;

        goto label16;

     label19:
        $r18 = new com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults;

        specialinvoke $r18.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquareResults: void <init>(java.util.List,double,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r4, d20, r12, r13);

        return $r18;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getAMatrix(double[][], double[])
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        double[][] r1, r3;
        double[] r2, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, i1, i2, i3, i4, i5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $r4 = r1[0];

        i1 = lengthof $r4;

        r3 = newmultiarray (double)[i0][i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label8;

        d9 = 0.0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $r11 = r1[i2];

        $d5 = $r11[i3];

        $d6 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: double square(double)>($d5);

        $d7 = r2[i3];

        $d8 = $d6 * $d7;

        d9 = d9 + $d8;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r6 = r3[i2];

        $r6[i2] = d9;

        i4 = i2 + 1;

     label4:
        if i4 >= i0 goto label7;

        d10 = 0.0;

        i5 = 0;

     label5:
        if i5 >= i1 goto label6;

        $r9 = r1[i2];

        $d1 = $r9[i5];

        $r10 = r1[i4];

        $d0 = $r10[i5];

        $d3 = $d1 * $d0;

        $d2 = r2[i5];

        $d4 = $d3 * $d2;

        d10 = d10 + $d4;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r7 = r3[i2];

        $r7[i4] = d10;

        $r8 = r3[i4];

        $r8[i2] = d10;

        i4 = i4 + 1;

        goto label4;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getDiffMatrix(int, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i10, i11, i12, i13, i14, i15;
        double[][] r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r2, $r6, $r8, r12;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r3, $r4;
        com.opengamma.analytics.math.matrix.Matrix $r5;
        double $d0;
        double[] $r7, $r9;
        long $l7, $l8, $l9;
        boolean $z0;
        int[] r10;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= i0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "difference order too high");

        r1 = newmultiarray (double)[i0][i0];

        if i0 != 0 goto label05;

        i11 = 0;

     label03:
        if i11 >= i0 goto label04;

        $r9 = r1[i11];

        $r9[i11] = 1.0;

        i11 = i11 + 1;

        goto label03;

     label04:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r1);

        return $r8;

     label05:
        $i2 = i1 + 1;

        r10 = newarray (int)[$i2];

        i12 = 1;

        i13 = i1;

     label06:
        if i13 < 0 goto label07;

        $l7 = (long) i12;

        $l8 = staticinvoke <org.apache.commons.math.util.MathUtils: long binomialCoefficient(int,int)>(i1, i13);

        $l9 = $l7 * $l8;

        $i10 = (int) $l9;

        r10[i13] = $i10;

        i12 = i12 * -1;

        i13 = i13 + -1;

        goto label06;

     label07:
        i14 = i1;

     label08:
        if i14 >= i0 goto label11;

        i15 = 0;

     label09:
        $i3 = i1 + 1;

        if i15 >= $i3 goto label10;

        $r7 = r1[i14];

        $i4 = i15 + i14;

        $i6 = $i4 - i1;

        $i5 = r10[i15];

        $d0 = (double) $i5;

        $r7[$i6] = $d0;

        i15 = i15 + 1;

        goto label09;

     label10:
        i14 = i14 + 1;

        goto label08;

     label11:
        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r1);

        $r3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        r12 = virtualinvoke $r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.DoubleMatrix2D getTranspose(com.opengamma.analytics.math.matrix.Matrix)>($r2);

        $r4 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix multiply(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r12, $r2);

        $r6 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r5;

        return $r6;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getDiffMatrix(int[], int, int)
    {
        com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, i9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2, $r4, $r7, r9;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r3, $r6;
        com.opengamma.analytics.math.matrix.Matrix $r5, $r8;

        r0 := @this: com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r1;

        $i3 = r1[i1];

        r2 = specialinvoke r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.DoubleMatrix2D getDiffMatrix(int,int)>($i3, i0);

        i6 = 1;

        i7 = 1;

        i8 = i1 + 1;

     label1:
        if i8 >= i2 goto label2;

        $i5 = r1[i8];

        i6 = i6 * $i5;

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 0;

     label3:
        if i9 >= i1 goto label4;

        $i4 = r1[i9];

        i7 = i7 * $i4;

        i9 = i9 + 1;

        goto label3;

     label4:
        r9 = r2;

        if i6 == 1 goto label5;

        $r6 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r7 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i6);

        $r8 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix kroneckerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>($r7, r2);

        r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r8;

     label5:
        if i7 == 1 goto label6;

        $r3 = r0.<com.opengamma.analytics.math.statistics.leastsquare.GeneralizedLeastSquare: com.opengamma.analytics.math.matrix.MatrixAlgebra _algebra>;

        $r4 = staticinvoke <com.opengamma.analytics.math.matrix.DoubleMatrixUtils: com.opengamma.analytics.math.matrix.DoubleMatrix2D getIdentityMatrix2D(int)>(i7);

        $r5 = virtualinvoke $r3.<com.opengamma.analytics.math.matrix.MatrixAlgebra: com.opengamma.analytics.math.matrix.Matrix kroneckerProduct(com.opengamma.analytics.math.matrix.Matrix,com.opengamma.analytics.math.matrix.Matrix)>(r9, $r4);

        r9 = (com.opengamma.analytics.math.matrix.DoubleMatrix2D) $r5;

     label6:
        return r9;
    }
}
