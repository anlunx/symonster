public class org.apache.commons.math3.ode.events.EventState extends java.lang.Object
{
    private final org.apache.commons.math3.ode.events.EventHandler handler;
    private final double maxCheckInterval;
    private final double convergence;
    private final int maxIterationCount;
    private org.apache.commons.math3.ode.ExpandableStatefulODE expandable;
    private double t0;
    private double g0;
    private boolean g0Positive;
    private boolean pendingEvent;
    private double pendingEventTime;
    private double previousEventTime;
    private boolean forward;
    private boolean increasing;
    private org.apache.commons.math3.ode.events.EventHandler$Action nextAction;
    private final org.apache.commons.math3.analysis.solvers.UnivariateSolver solver;

    public void <init>(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler r1;
        double d0, d1, $d2;
        int i0;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r2;
        org.apache.commons.math3.ode.events.EventHandler$Action $r3;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math3.ode.events.EventHandler;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        r2 := @parameter4: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler> = r1;

        r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval> = d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        r0.<org.apache.commons.math3.ode.events.EventState: double convergence> = $d2;

        r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount> = i0;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver> = r2;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable> = null;

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = 1;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime> = #NaN;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing> = 1;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action CONTINUE>;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r3;

        return;
    }

    public org.apache.commons.math3.ode.events.EventHandler getEventHandler()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler $r1;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r1 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        return $r1;
    }

    public void setExpandable(org.apache.commons.math3.ode.ExpandableStatefulODE)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable> = r1;

        return;
    }

    public double getMaxCheckInterval()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $d0 = r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval>;

        return $d0;
    }

    public double getConvergence()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $d0 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        return $d0;
    }

    public int getMaxIterationCount()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $i0 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        return $i0;
    }

    public void reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        org.apache.commons.math3.ode.events.EventHandler $r2, $r7;
        double[] $r3, $r8;
        byte $b0, $b1;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getPreviousTime()>();

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = $d2;

        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d3);

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $d4 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $r3 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        $d5 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>($d4, $r3);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = $d5;

        $d6 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b0 = $d6 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r5 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $d8 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $d9 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

        $d10 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $d11 = $d9 * $d10;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d11);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d8, $d12);

        $d14 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $d13 = 0.5 * d0;

        d1 = $d14 + $d13;

        interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d1);

        $r7 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $r8 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        $d15 = interfaceinvoke $r7.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>(d1, $r8);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = $d15;

     label1:
        $d7 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b1 = $d7 cmpl 0.0;

        if $b1 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z0;

        return;
    }

    private double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        double[] r2, $r8, $r10;
        org.apache.commons.math3.ode.EquationsMapper[] r3;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math3.ode.EquationsMapper r4, $r7;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r5, $r6, $r9;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $r5 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        $i1 = virtualinvoke $r5.<org.apache.commons.math3.ode.ExpandableStatefulODE: int getTotalDimension()>();

        r2 = newarray (double)[$i1];

        $r6 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r8 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke $r7.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r8, r2);

        i3 = 0;

        $r9 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.ExpandableStatefulODE expandable>;

        r3 = virtualinvoke $r9.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i0 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r4 = r3[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r10 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double[] getInterpolatedSecondaryState(int)>($i2);

        virtualinvoke r4.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r10, r2);

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    public boolean evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator) throws org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31, d32, $d33, d34, $d35, $d37, $d38, $d39, $d40;
        int i0, i1, $i3, $i4, $i7, $i8, $i9, $i15, $i16, $i17, i18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        byte $b2, $b5, $b6, $b10, $b11, $b12, $b13, $b14;
        org.apache.commons.math3.ode.events.EventState$1 $r4;
        org.apache.commons.math3.ode.events.EventHandler $r5;
        double[] $r6;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver $r7, $r8, $r9, $r11, $r12, $r15, $r16;
        org.apache.commons.math3.analysis.solvers.PegasusSolver $r10;
        org.apache.commons.math3.analysis.solvers.AllowedSolution $r13, $r14, $r17, $r18;
        org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException $r20;
        org.apache.commons.math3.exception.MaxCountExceededException $r21;
        org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver r22;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.StepInterpolator;

     label01:
        $z0 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: boolean isForward()>();

        r0.<org.apache.commons.math3.ode.events.EventState: boolean forward> = $z0;

        d30 = interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d4 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        d0 = d30 - $d4;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b2 = $d5 cmpg $d6;

        if $b2 >= 0 goto label03;

     label02:
        return 0;

     label03:
        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d8 = r0.<org.apache.commons.math3.ode.events.EventState: double maxCheckInterval>;

        $d9 = $d7 / $d8;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d9);

        $i3 = (int) $d10;

        i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(1, $i3);

        $d11 = (double) i0;

        d1 = d0 / $d11;

        $r4 = new org.apache.commons.math3.ode.events.EventState$1;

        specialinvoke $r4.<org.apache.commons.math3.ode.events.EventState$1: void <init>(org.apache.commons.math3.ode.events.EventState,org.apache.commons.math3.ode.sampling.StepInterpolator)>(r0, r1);

        d31 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        d32 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        i18 = 0;

     label04:
        if i18 >= i0 goto label32;

        $d14 = r0.<org.apache.commons.math3.ode.events.EventState: double t0>;

        $i4 = i18 + 1;

        $d12 = (double) $i4;

        $d13 = $d12 * d1;

        d2 = $d14 + $d13;

        interfaceinvoke r1.<org.apache.commons.math3.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d2);

        $r5 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $r6 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        d3 = interfaceinvoke $r5.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>(d2, $r6);

        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive>;

        $b5 = d3 cmpl 0.0;

        if $b5 < 0 goto label05;

        $z13 = 1;

        goto label06;

     label05:
        $z13 = 0;

     label06:
        $z2 = $z1 ^ $z13;

        if $z2 == 0 goto label30;

        $b6 = d3 cmpl d32;

        if $b6 < 0 goto label07;

        $z14 = 1;

        goto label08;

     label07:
        $z14 = 0;

     label08:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing> = $z14;

        $r7 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $z3 = $r7 instanceof org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver;

        if $z3 == 0 goto label11;

        $r16 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        r22 = (org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver) $r16;

        $z12 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z12 == 0 goto label09;

        $i17 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r18 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution RIGHT_SIDE>;

        $d33 = interfaceinvoke r22.<org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i17, $r4, d31, d2, $r18);

        goto label10;

     label09:
        $i16 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r17 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution LEFT_SIDE>;

        $d33 = interfaceinvoke r22.<org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>($i16, $r4, d2, d31, $r17);

     label10:
        d34 = $d33;

        goto label16;

     label11:
        $z4 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z4 == 0 goto label12;

        $r15 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i15 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $d35 = interfaceinvoke $r15.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i15, $r4, d31, d2);

        goto label13;

     label12:
        $r8 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i7 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $d35 = interfaceinvoke $r8.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double solve(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>($i7, $r4, d2, d31);

     label13:
        $i8 = r0.<org.apache.commons.math3.ode.events.EventState: int maxIterationCount>;

        $r9 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $i9 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: int getEvaluations()>();

        i1 = $i8 - $i9;

        $r10 = new org.apache.commons.math3.analysis.solvers.PegasusSolver;

        $r11 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $d15 = interfaceinvoke $r11.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

        $r12 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.analysis.solvers.UnivariateSolver solver>;

        $d16 = interfaceinvoke $r12.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        specialinvoke $r10.<org.apache.commons.math3.analysis.solvers.PegasusSolver: void <init>(double,double)>($d15, $d16);

        $z5 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z5 == 0 goto label14;

        $r14 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution RIGHT_SIDE>;

        $d37 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>(i1, $r4, $r10, $d35, d31, d2, $r14);

        goto label15;

     label14:
        $r13 = <org.apache.commons.math3.analysis.solvers.AllowedSolution: org.apache.commons.math3.analysis.solvers.AllowedSolution LEFT_SIDE>;

        $d37 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double forceSide(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver,double,double,double,org.apache.commons.math3.analysis.solvers.AllowedSolution)>(i1, $r4, $r10, $d35, d2, d31, $r13);

     label15:
        d34 = $d37;

     label16:
        $d38 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        $z15 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d38);

        if $z15 != 0 goto label25;

        $d21 = d34 - d31;

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d21);

        $d23 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b11 = $d22 cmpg $d23;

        if $b11 > 0 goto label25;

        $d24 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        $d25 = d34 - $d24;

        $d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d25);

        $d27 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b12 = $d26 cmpg $d27;

        if $b12 > 0 goto label25;

     label17:
        $z7 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z7 == 0 goto label18;

        $d29 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $d39 = d31 + $d29;

        goto label19;

     label18:
        $d28 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $d39 = d31 - $d28;

     label19:
        d31 = $d39;

        d32 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d39);

        $z8 = r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive>;

        $b13 = d32 cmpl 0.0;

        if $b13 < 0 goto label20;

        $z16 = 1;

        goto label21;

     label20:
        $z16 = 0;

     label21:
        $z9 = $z8 ^ $z16;

        if $z9 == 0 goto label24;

        $z10 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        $b14 = d31 cmpl d2;

        if $b14 < 0 goto label22;

        $z17 = 1;

        goto label23;

     label22:
        $z17 = 0;

     label23:
        $z11 = $z10 ^ $z17;

        if $z11 != 0 goto label17;

     label24:
        i18 = i18 + -1;

        goto label29;

     label25:
        $d40 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        $z18 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d40);

        if $z18 != 0 goto label26;

        $d17 = r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime>;

        $d18 = $d17 - d34;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d18);

        $d20 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b10 = $d19 cmpl $d20;

        if $b10 <= 0 goto label28;

     label26:
        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = d34;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 1;

     label27:
        return 1;

     label28:
        d31 = d2;

        d32 = d3;

     label29:
        goto label31;

     label30:
        d31 = d2;

        d32 = d3;

     label31:
        i18 = i18 + 1;

        goto label04;

     label32:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

     label33:
        return 0;

     label34:
        $r20 := @caughtexception;

        $r21 = virtualinvoke $r20.<org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException: org.apache.commons.math3.exception.MaxCountExceededException getException()>();

        throw $r21;

        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label01 to label02 with label34;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label03 to label27 with label34;
        catch org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException from label28 to label33 with label34;
    }

    public double getEventTime()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label1;

        $d0 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        goto label3;

     label1:
        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        if $z1 == 0 goto label2;

        $d0 = #Infinity;

        goto label3;

     label2:
        $d0 = #-Infinity;

     label3:
        return $d0;
    }

    public void stepAccepted(double, double[])
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[] r1;
        org.apache.commons.math3.ode.events.EventHandler $r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1;
        org.apache.commons.math3.ode.events.EventHandler$Action $r3, $r6;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r0.<org.apache.commons.math3.ode.events.EventState: double t0> = d0;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.ode.events.EventHandler: double g(double,double[])>(d0, r1);

        r0.<org.apache.commons.math3.ode.events.EventState: double g0> = $d1;

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label3;

        $d3 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        $d4 = $d3 - d0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d6 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b1 = $d5 cmpg $d6;

        if $b1 > 0 goto label3;

        r0.<org.apache.commons.math3.ode.events.EventState: double previousEventTime> = d0;

        $z1 = r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing>;

        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z1;

        $r5 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        $z3 = r0.<org.apache.commons.math3.ode.events.EventState: boolean increasing>;

        $z2 = r0.<org.apache.commons.math3.ode.events.EventState: boolean forward>;

        $z4 = $z3 ^ $z2;

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.ode.events.EventHandler: org.apache.commons.math3.ode.events.EventHandler$Action eventOccurred(double,double[],boolean)>(d0, r1, $z5);

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r6;

        goto label6;

     label3:
        $d2 = r0.<org.apache.commons.math3.ode.events.EventState: double g0>;

        $b0 = $d2 cmpl 0.0;

        if $b0 < 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean g0Positive> = $z6;

        $r3 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action CONTINUE>;

        r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction> = $r3;

     label6:
        return;
    }

    public boolean stop()
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler$Action $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        $r2 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r1 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action STOP>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean reset(double, double[])
    {
        org.apache.commons.math3.ode.events.EventState r0;
        double d0, $d1, $d2, $d3, $d4;
        double[] r1;
        boolean $z0, $z1;
        byte $b0;
        org.apache.commons.math3.ode.events.EventHandler$Action $r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.commons.math3.ode.events.EventHandler $r8;

        r0 := @this: org.apache.commons.math3.ode.events.EventState;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $z0 = r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime>;

        $d2 = $d1 - d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $d4 = r0.<org.apache.commons.math3.ode.events.EventState: double convergence>;

        $b0 = $d3 cmpg $d4;

        if $b0 <= 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r2 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_STATE>;

        if $r3 != $r2 goto label3;

        $r8 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        interfaceinvoke $r8.<org.apache.commons.math3.ode.events.EventHandler: void resetState(double,double[])>(d0, r1);

     label3:
        r0.<org.apache.commons.math3.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math3.ode.events.EventState: double pendingEventTime> = #NaN;

        $r5 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r4 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_STATE>;

        if $r5 == $r4 goto label4;

        $r7 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler$Action nextAction>;

        $r6 = <org.apache.commons.math3.ode.events.EventHandler$Action: org.apache.commons.math3.ode.events.EventHandler$Action RESET_DERIVATIVES>;

        if $r7 != $r6 goto label5;

     label4:
        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    static double[] access$000(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.sampling.StepInterpolator)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator r1;
        double[] $r2;

        r0 := @parameter0: org.apache.commons.math3.ode.events.EventState;

        r1 := @parameter1: org.apache.commons.math3.ode.sampling.StepInterpolator;

        $r2 = specialinvoke r0.<org.apache.commons.math3.ode.events.EventState: double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.ode.events.EventHandler access$100(org.apache.commons.math3.ode.events.EventState)
    {
        org.apache.commons.math3.ode.events.EventState r0;
        org.apache.commons.math3.ode.events.EventHandler $r1;

        r0 := @parameter0: org.apache.commons.math3.ode.events.EventState;

        $r1 = r0.<org.apache.commons.math3.ode.events.EventState: org.apache.commons.math3.ode.events.EventHandler handler>;

        return $r1;
    }
}
