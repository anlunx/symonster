class com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2 extends com.opengamma.analytics.math.function.Function1D
{
    final double val$theta;
    final com.opengamma.analytics.math.function.Function1D val$adjointFunc;
    final com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter, double, com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2 r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r1;
        double d0;
        com.opengamma.analytics.math.function.Function1D r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.math.function.Function1D;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: double val$theta> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: com.opengamma.analytics.math.function.Function1D val$adjointFunc> = r2;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2 r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        double[][] r4, r5;
        int[] $r6, $r8, $r10;
        java.lang.Double $r7, $r9, $r11;
        double[] $r12, $r17, $r18, $r19, $r20, $r21, $r22;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData $r13;
        com.opengamma.analytics.math.function.Function1D $r14;
        java.lang.Object $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r16;
        int i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r6);

        d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r8);

        d1 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $r10 = newarray (int)[1];

        $r10[0] = 2;

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = newarray (double)[4];

        $r12[0] = d0;

        $r12[1] = d1;

        $d3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: double val$theta>;

        $r12[2] = $d3;

        $r12[3] = d2;

        $r13 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        specialinvoke $r13.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[])>($r12);

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: com.opengamma.analytics.math.function.Function1D val$adjointFunc>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r13);

        r4 = (double[][]) $r15;

        r5 = newmultiarray (double)[3][3];

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r18 = r5[i0];

        $r17 = r4[i0];

        $d4 = $r17[0];

        $r18[0] = $d4;

        $r20 = r5[i0];

        $r19 = r4[i0];

        $d5 = $r19[1];

        $r20[1] = $d5;

        $r22 = r5[i0];

        $r21 = r4[i0];

        $d6 = $r21[3];

        $r22[2] = $d6;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r16 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r16;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2 r0;
        java.lang.Object r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$2: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r2);

        return $r3;
    }
}
