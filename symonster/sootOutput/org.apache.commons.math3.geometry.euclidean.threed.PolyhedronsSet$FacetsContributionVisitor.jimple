class org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    final org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$000(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>(r1, 0.0);

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(0.0, 0.0, 0.0);

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$100(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>(r1, $r2);

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r2;
        java.lang.Object $r3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r2 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r3;

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r4 == null goto label1;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r7, 0);

     label1:
        $r5 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)>($r6, 1);

     label2:
        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor r0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r1;
        boolean z0, $z1;
        org.apache.commons.math3.geometry.partitioning.Region r2;
        double d0, $d1, $d2, $d3, d4;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r4, $r8, $r11, $r15, $r17;
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane $r5;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r6;
        org.apache.commons.math3.geometry.Point $r7, $r14;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet $r9, $r10, $r12, $r13, $r16, $r18;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        z0 := @parameter1: boolean;

        $r5 = (org.apache.commons.math3.geometry.euclidean.threed.SubPlane) r1;

        r2 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        d0 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: double getSize()>();

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label1;

        $r16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$200(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>($r16, #Infinity);

        $r18 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r17 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN>;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$300(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>($r18, $r17);

        goto label3;

     label1:
        $r6 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r6;

        $r7 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.Point getBarycenter()>();

        r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $d1 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r8);

        d4 = d0 * $d1;

        if z0 == 0 goto label2;

        d4 = neg d4;

     label2:
        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $d2 = virtualinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: double getSize()>();

        $d3 = $d2 + d4;

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$400(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,double)>($r10, $d3);

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r11 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet this$0>;

        $r14 = virtualinvoke $r12.<org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r15 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) $r14;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r15, d4, r4);

        staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet: void access$500(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet,org.apache.commons.math3.geometry.Point)>($r13, $r11);

     label3:
        return;
    }
}
