public class com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver extends com.opengamma.analytics.math.interpolation.CubicSplineSolver
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;
        double[] r1, r2, r3, $r5, $r6;
        double[][] $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[] getDiffs(double[])>(r1);

        $r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[][] getMatrix(double[])>(r3);

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[] getCommonVectorElements(double[],double[])>(r2, r3);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[] matrixEqnSolver(double[][],double[])>($r4, $r5);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, $r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;
        double[] r1, r2, r3, r5;
        double[][] r4, r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[] getDiffs(double[])>(r1);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[][] getMatrix(double[])>(r3);

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[] getCommonVectorElements(double[],double[])>(r2, r3);

        r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[][] getCommonVectorSensitivity(double[])>(r3);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonCoefficientWithSensitivity(double[],double[],double[],double[][],double[],double[][])>(r1, r2, r3, r4, r5, r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[], com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;
        double[] r1, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2, $r6;
        int i0, i1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i1);

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r1, $r5);

        r3[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[][] getMatrix(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;
        double[] r1, $r2, $r3;
        int i0, $i1, $i2, $i3;
        double[][] r4, r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r4 = newmultiarray (double)[i0][i0];

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: double[][] getCommonMatrixElements(double[])>(r1);

        $r2 = r5[0];

        $r2[0] = 1.0;

        $i2 = i0 - 1;

        $r3 = r5[$i2];

        $i3 = i0 - 1;

        $r3[$i3] = 1.0;

        return r5;
    }

    public volatile com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver r0;
        double[] r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        $r2 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r1);

        return $r2;
    }
}
