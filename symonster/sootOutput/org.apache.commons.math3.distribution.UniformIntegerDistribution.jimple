public class org.apache.commons.math3.distribution.UniformIntegerDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    private static final long serialVersionUID;
    private final int lower;
    private final int upper;

    public void <init>(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0, i1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r1, i0, i1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        if i0 <= i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower> = i0;

        r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper> = i1;

        return;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if i0 < $i1 goto label1;

        $i2 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if i0 <= $i2 goto label2;

     label1:
        return 0.0;

     label2:
        $i4 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i3 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i5 = $i4 - $i3;

        $i6 = $i5 + 1;

        $d0 = (double) $i6;

        $d1 = 1.0 / $d0;

        return $d1;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if i0 >= $i1 goto label1;

        return 0.0;

     label1:
        $i2 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if i0 <= $i2 goto label2;

        return 1.0;

     label2:
        $i3 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i4 = i0 - $i3;

        $d0 = (double) $i4;

        $d3 = $d0 + 1.0;

        $i6 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i5 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i7 = $i6 - $i5;

        $d1 = (double) $i7;

        $d2 = $d1 + 1.0;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i2 = $i1 + $i0;

        $d0 = (double) $i2;

        $d1 = 0.5 * $d0;

        return $d1;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        double d0, $d1, $d2, $d3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i2 = $i1 - $i0;

        $i3 = $i2 + 1;

        d0 = (double) $i3;

        $d1 = d0 * d0;

        $d2 = $d1 - 1.0;

        $d3 = $d2 / 12.0;

        return $d3;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        return $i0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        return $i0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        return 1;
    }

    public int sample()
    {
        org.apache.commons.math3.distribution.UniformIntegerDistribution r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.commons.math3.random.RandomGenerator $r1, $r2;

        r0 := @this: org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $i3 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        $i2 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $i4 = $i3 - $i2;

        i0 = $i4 + 1;

        if i0 > 0 goto label3;

     label1:
        $r2 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        i1 = interfaceinvoke $r2.<org.apache.commons.math3.random.RandomGenerator: int nextInt()>();

        $i8 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        if i1 < $i8 goto label2;

        $i9 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int upper>;

        if i1 > $i9 goto label2;

        return i1;

     label2:
        goto label1;

     label3:
        $i5 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int lower>;

        $r1 = r0.<org.apache.commons.math3.distribution.UniformIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $i6 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        $i7 = $i5 + $i6;

        return $i7;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.UniformIntegerDistribution: long serialVersionUID> = 20120109L;

        return;
    }
}
