public class org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet extends org.apache.commons.math3.geometry.partitioning.AbstractRegion
{
    private static final double DEFAULT_TOLERANCE;
    private org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices;

    public void <init>(double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(double)>(d0);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, d0);

        return;
    }

    public void <init>(java.util.Collection, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.Collection r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(java.util.Collection,double)>(r1, d0);

        return;
    }

    public void <init>(double, double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double d0, d1, d2, d3, d4;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $r1 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Line[] boxBoundary(double,double,double,double,double)>(d0, d1, d2, d3, d4);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane[],double)>($r1, d4);

        return;
    }

    public transient void <init>(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double d0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>(d0, r1);

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractRegion: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r2, d0);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double)>(1.0E-10);

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(java.util.Collection,double)>(r1, 1.0E-10);

        return;
    }

    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(double,double,double,double,double)>(d0, d1, d2, d3, 1.0E-10);

        return;
    }

    private static org.apache.commons.math3.geometry.euclidean.twod.Line[] boxBoundary(double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r4, $r5, $r6, $r7;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] $r8;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r9, $r10, $r11, $r12;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $d5 = d1 - d4;

        $b0 = d0 cmpl $d5;

        if $b0 >= 0 goto label1;

        $d6 = d3 - d4;

        $b1 = d2 cmpl $d6;

        if $b1 < 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(d0, d2);

        $r5 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(d0, d3);

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(d1, d2);

        $r7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(d1, d3);

        $r8 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Line)[4];

        $r9 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r4, $r6, d4);

        $r8[0] = $r9;

        $r10 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r6, $r7, d4);

        $r8[1] = $r10;

        $r11 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r7, $r5, d4);

        $r8[2] = $r11;

        $r12 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r12.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r5, $r4, d4);

        $r8[3] = $r12;

        return $r8;
    }

    private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        double d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r0;
        int i0, i1, $i2, $i3, i5, i6, i7;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex[] r1;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex r2, r3, r5, $r13;
        java.util.ArrayList $r6;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r7, $r15;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge $r8;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r9, $r11, $r12, $r14;
        byte $b4;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r10, r18;
        java.lang.Boolean $r16;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        $r15 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r16 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r15.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r16);

        return $r15;

     label1:
        r1 = newarray (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex)[i0];

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r13 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex;

        $r14 = r0[i5];

        specialinvoke $r13.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>($r14);

        r1[i5] = $r13;

        i5 = i5 + 1;

        goto label2;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        i6 = 0;

     label4:
        if i6 >= i0 goto label9;

        r2 = r1[i6];

        $i2 = i6 + 1;

        $i3 = $i2 % i0;

        r3 = r1[$i3];

        r18 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Line sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex)>(r3);

        if r18 != null goto label5;

        $r10 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $r11 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $r12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>($r11, $r12, d0);

        r18 = $r10;

     label5:
        $r8 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: void <init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r2, r3, r18);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = lengthof r1;

        i7 = 0;

     label6:
        if i7 >= i1 goto label8;

        r5 = r1[i7];

        if r5 == r2 goto label7;

        if r5 == r3 goto label7;

        $r9 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        $d1 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r9);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b4 = $d2 cmpg d0;

        if $b4 > 0 goto label7;

        virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: void bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line)>(r18);

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        i6 = i6 + 1;

        goto label4;

     label9:
        $r7 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        specialinvoke $r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r7, $r6);

        return $r7;
    }

    private static void insertEdges(double, org.apache.commons.math3.geometry.partitioning.BSPTree, java.util.List)
    {
        double d0, d1, d2, $d3, $d4;
        org.apache.commons.math3.geometry.partitioning.BSPTree r0, $r9, $r11, $r13, $r14, $r33, $r36, r39;
        java.util.List r1;
        java.util.Iterator r3;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge r4, $r24, $r25, $r28, $r29, r38;
        org.apache.commons.math3.geometry.partitioning.Side r5, $r22, $r26, $r30, $r31, $r41, $r42;
        java.util.ArrayList $r7, $r8;
        boolean $z0, $z1, $z2, $z11;
        java.lang.Boolean $r10, $r12, $r32, $r34;
        java.lang.Object $r15, $r35;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r16, $r19, $r23, $r27, $r37;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex $r17, $r20, r44, r45;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r18, $r21;
        byte $b0, $b1, $b2, $b6;
        int $i3, $i4, i5, $i7, $i8;
        int[] $r43;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r1 := @parameter2: java.util.List;

        i5 = 0;

        r38 = null;

     label01:
        if r38 != null goto label04;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if i5 >= $i3 goto label04;

        $i4 = i5;

        i5 = i5 + 1;

        $r35 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i4);

        r38 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) $r35;

        $r36 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        if $r36 != null goto label03;

        $r37 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $z11 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r37);

        if $z11 == 0 goto label02;

        virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: void setNode(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r0);

        goto label01;

     label02:
        r38 = null;

        goto label01;

     label03:
        r38 = null;

        goto label01;

     label04:
        if r38 != null goto label08;

        r39 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getParent()>();

        if r39 == null goto label05;

        $r33 = virtualinvoke r39.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        if r0 != $r33 goto label06;

     label05:
        $r32 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r32);

        goto label07;

     label06:
        $r34 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r34);

     label07:
        return;

     label08:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) $r15;

        if r4 == r38 goto label22;

        $r16 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r17 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getStart()>();

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        d1 = virtualinvoke $r16.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r18);

        $r19 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r20 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getEnd()>();

        $r21 = virtualinvoke $r20.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()>();

        d2 = virtualinvoke $r19.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getOffset(org.apache.commons.math3.geometry.Point)>($r21);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $b0 = $d3 cmpg d0;

        if $b0 > 0 goto label10;

        $r41 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

        goto label12;

     label10:
        $b1 = d1 cmpg 0.0;

        if $b1 >= 0 goto label11;

        $r41 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label12;

     label11:
        $r41 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

     label12:
        r5 = $r41;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $b6 = $d4 cmpg d0;

        if $b6 > 0 goto label13;

        $r42 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

        goto label15;

     label13:
        $b2 = d2 cmpg 0.0;

        if $b2 >= 0 goto label14;

        $r42 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label15;

     label14:
        $r42 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

     label15:
        $r43 = <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $i7 = virtualinvoke r5.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i8 = $r43[$i7];

        lookupswitch($i8)
        {
            case 1: goto label16;
            case 2: goto label18;
            default: goto label20;
        };

     label16:
        $r26 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        if $r42 != $r26 goto label17;

        $r27 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        r44 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex split(org.apache.commons.math3.geometry.euclidean.twod.Line)>($r27);

        $r28 = virtualinvoke r44.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getOutgoing()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = virtualinvoke r44.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getIncoming()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label22;

     label17:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label22;

     label18:
        $r22 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r42 != $r22 goto label19;

        $r23 = virtualinvoke r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        r45 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex split(org.apache.commons.math3.geometry.euclidean.twod.Line)>($r23);

        $r24 = virtualinvoke r45.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getIncoming()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r24);

        $r25 = virtualinvoke r45.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getOutgoing()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label22;

     label19:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label22;

     label20:
        $r30 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r42 != $r30 goto label21;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label22;

     label21:
        $r31 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        if $r42 != $r31 goto label22;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r4);

     label22:
        goto label09;

     label23:
        $z1 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label24;

        $r14 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r14, $r7);

        goto label25;

     label24:
        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r10);

     label25:
        $z2 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label26;

        $r13 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void insertEdges(double,org.apache.commons.math3.geometry.partitioning.BSPTree,java.util.List)>(d0, $r13, $r8);

        goto label27;

     label26:
        $r11 = virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r11.<org.apache.commons.math3.geometry.partitioning.BSPTree: void setAttribute(java.lang.Object)>($r12);

     label27:
        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r1, $d0);

        return $r2;
    }

    protected void computeGeometricalProperties()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r3, $r6;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r17;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, d15, d16, d17, d18;
        byte $b3;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r13;
        java.lang.Object $r15;
        java.lang.Boolean $r16;
        boolean $z0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r18;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()>();

        $i2 = lengthof r1;

        if $i2 != 0 goto label03;

        r18 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r13 = virtualinvoke r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r13 != null goto label01;

        $r15 = virtualinvoke r18.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r16 = (java.lang.Boolean) $r15;

        $z0 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        $r17 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r17);

        goto label02;

     label01:
        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(0.0);

        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>(0.0, 0.0);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r14);

     label02:
        goto label10;

     label03:
        $r6 = r1[0];

        $r7 = $r6[0];

        if $r7 != null goto label04;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        $r12 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r12);

        goto label10;

     label04:
        d14 = 0.0;

        d15 = 0.0;

        d16 = 0.0;

        i0 = lengthof r1;

        i8 = 0;

     label05:
        if i8 >= i0 goto label08;

        r3 = r1[i8];

        $i4 = lengthof r3;

        $i5 = $i4 - 1;

        $r10 = r3[$i5];

        d17 = virtualinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $i6 = lengthof r3;

        $i7 = $i6 - 1;

        $r11 = r3[$i7];

        d18 = virtualinvoke $r11.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        i1 = lengthof r3;

        i9 = 0;

     label06:
        if i9 >= i1 goto label07;

        r5 = r3[i9];

        d0 = d17;

        d1 = d18;

        d17 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d18 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d9 = d0 * d18;

        $d8 = d1 * d17;

        d2 = $d9 - $d8;

        d14 = d14 + d2;

        $d10 = d0 + d17;

        $d11 = d2 * $d10;

        d15 = d15 + $d11;

        $d12 = d1 + d18;

        $d13 = d2 * $d12;

        d16 = d16 + $d13;

        i9 = i9 + 1;

        goto label06;

     label07:
        i8 = i8 + 1;

        goto label05;

     label08:
        $b3 = d14 cmpg 0.0;

        if $b3 >= 0 goto label09;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>(#Infinity);

        $r9 = <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN>;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r9);

        goto label10;

     label09:
        $d3 = d14 / 2.0;

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setSize(double)>($d3);

        $r8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

        $d4 = 3.0 * d14;

        $d7 = d15 / $d4;

        $d5 = 3.0 * d14;

        $d6 = d16 / $d5;

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: void <init>(double,double)>($d7, $d6);

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void setBarycenter(org.apache.commons.math3.geometry.Point)>($r8);

     label10:
        return;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r2, r4, r50;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $r5, $r11, $r17, $r21, $r24, $r48, $r62, $r64;
        org.apache.commons.math3.geometry.partitioning.BSPTree $r6, $r9;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, d9, d10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, i19, i20, i22, i23, i24, i25;
        java.util.ArrayList $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r12, $r13, $r22, $r25, $r39, $r42, $r45, $r53, $r63;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r14, $r40, $r43, $r46, $r54, r58, r61;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r15, r56, r59;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r16, $r19, $r28, $r30, $r35, $r37;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r18, $r20, $r23, $r27, $r31, $r32, $r34, $r38, $r41, $r44, $r47, $r55;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r26, $r29, $r33, $r36, r52;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r49;
        java.util.Iterator r51, r57, r60;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        if $r5 != null goto label20;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r7 != null goto label01;

        $r48 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices> = $r48;

        goto label20;

     label01:
        $r8 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: void <init>(double)>($d0);

        $r9 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(1);

        virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor)>($r8);

        r2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder: java.util.List getSegments()>();

        i19 = interfaceinvoke r2.<java.util.List: int size()>();

        $i0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int naturalFollowerConnections(java.util.List)>(r2);

        i20 = i19 - $i0;

        if i20 <= 0 goto label02;

        $i18 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int splitEdgeConnections(java.util.List)>(r2);

        i20 = i20 - $i18;

     label02:
        if i20 <= 0 goto label03;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: int closeVerticesConnections(java.util.List)>(r2);

     label03:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r49 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)>(r2);

     label04:
        if r49 == null goto label07;

        r50 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: java.util.List followLoop(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r49);

        if r50 == null goto label06;

        $r45 = interfaceinvoke r50.<java.util.List: java.lang.Object get(int)>(0);

        $r46 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r45;

        $r47 = virtualinvoke $r46.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r47 != null goto label05;

        virtualinvoke $r10.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r50);

        goto label06;

     label05:
        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r50);

     label06:
        r49 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)>(r2);

        goto label04;

     label07:
        $i1 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r11 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])[$i1];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices> = $r11;

        i22 = 0;

        r51 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r12 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.List) $r12;

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i2 < 2 goto label09;

        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i4 != 2 goto label10;

        $r39 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r39;

        $r41 = virtualinvoke $r40.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r41 != null goto label10;

        $r42 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);

        $r43 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r42;

        $r44 = virtualinvoke $r43.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        if $r44 != null goto label10;

     label09:
        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r13;

        r52 = virtualinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r17 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $i3 = i22;

        i22 = i22 + 1;

        $r15 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[3];

        $r15[0] = null;

        $r16 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r16.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(-3.4028234663852886E38);

        $r18 = virtualinvoke r52.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r16);

        $r15[1] = $r18;

        $r19 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(3.4028234663852886E38);

        $r20 = virtualinvoke r52.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r19);

        $r15[2] = $r20;

        $r17[$i3] = $r15;

        goto label19;

     label10:
        $r53 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r54 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r53;

        $r55 = virtualinvoke $r54.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r55 != null goto label16;

        $i8 = interfaceinvoke r4.<java.util.List: int size()>();

        $i9 = $i8 + 2;

        r56 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i9];

        i23 = 0;

        r57 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r25 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r25;

        if i23 != 0 goto label12;

        $r33 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r34 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r35 = virtualinvoke $r33.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r34);

        d7 = virtualinvoke $r35.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d4 = d7 / 2.0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(1.0, $d5);

        d8 = d7 - $d6;

        i24 = i23 + 1;

        r56[i23] = null;

        i23 = i24 + 1;

        $r36 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r37 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r37.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d8);

        $r38 = virtualinvoke $r36.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r37);

        r56[i24] = $r38;

     label12:
        $i11 = lengthof r56;

        $i12 = $i11 - 1;

        if i23 >= $i12 goto label13;

        $i16 = i23;

        i23 = i23 + 1;

        $r32 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        r56[$i16] = $r32;

     label13:
        $i13 = lengthof r56;

        $i14 = $i13 - 1;

        if i23 != $i14 goto label14;

        $r26 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r27 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r28 = virtualinvoke $r26.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>($r27);

        d9 = virtualinvoke $r28.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $d1 = d9 / 2.0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(1.0, $d2);

        d10 = d9 + $d3;

        $i15 = i23;

        i23 = i23 + 1;

        $r29 = virtualinvoke r58.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $r30 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        specialinvoke $r30.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>(d10);

        $r31 = virtualinvoke $r29.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point)>($r30);

        r56[$i15] = $r31;

     label14:
        goto label11;

     label15:
        $r24 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $i10 = i22;

        i22 = i22 + 1;

        $r24[$i10] = r56;

        goto label19;

     label16:
        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        r59 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i5];

        i25 = 0;

        r60 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r22 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r22;

        $i7 = i25;

        i25 = i25 + 1;

        $r23 = virtualinvoke r61.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        r59[$i7] = $r23;

        goto label17;

     label18:
        $r21 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $i6 = i22;

        i22 = i22 + 1;

        $r21[$i6] = r59;

     label19:
        goto label08;

     label20:
        $r62 = r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices>;

        $r63 = virtualinvoke $r62.<java.lang.Object: java.lang.Object clone()>();

        $r64 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][]) $r63;

        return $r64;
    }

    private int naturalFollowerConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        java.util.Iterator r2, r6;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r3, r7, $r9, $r11;
        org.apache.commons.math3.geometry.partitioning.BSPTree r4, r5, $r12, $r13;
        boolean $z0, $z1;
        java.lang.Object $r8, $r10;
        int i0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r8;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r9 != null goto label4;

        r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getEndNode()>();

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r10;

        $r11 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r11 != null goto label3;

        $r12 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        if $r12 != r5 goto label3;

        $r13 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getStartNode()>();

        if $r13 != r4 goto label3;

        virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r7);

        virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r3);

        i0 = i0 + 1;

        goto label4;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return i0;
    }

    private int splitEdgeConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        java.util.Iterator r2, r6;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r3, r7, $r9, $r13;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r4, $r16;
        org.apache.commons.math3.geometry.partitioning.BSPTree r5, $r10, $r14, $r17;
        boolean $z0, $z1;
        java.lang.Object $r8, $r12;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r11, $r15;
        int i0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r8;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r9 != null goto label4;

        $r10 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        r4 = interfaceinvoke $r11.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getEndNode()>();

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r12;

        $r13 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r13 != null goto label3;

        $r14 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getNode()>();

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r16 = interfaceinvoke $r15.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        if $r16 != r4 goto label3;

        $r17 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.partitioning.BSPTree getStartNode()>();

        if $r17 != r5 goto label3;

        virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r7);

        virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r3);

        i0 = i0 + 1;

        goto label4;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return i0;
    }

    private int closeVerticesConnections(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        java.util.Iterator r2, r5;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r3, r6, $r8, $r11, r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r4, $r9, $r12, $r13;
        double d0, $d1, d2;
        boolean $z0, $z1;
        java.lang.Object $r7, $r10;
        byte $b0, $b1;
        int i2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i2 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r7;

        $r8 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        if $r8 != null goto label5;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        if $r9 == null goto label5;

        r4 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        r14 = null;

        d2 = #Infinity;

        r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r10;

        $r11 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        if $r11 != null goto label3;

        $r12 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r12 == null goto label3;

        $r13 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)>(r4, $r13);

        $b1 = d0 cmpg d2;

        if $b1 >= 0 goto label3;

        r14 = r6;

        d2 = d0;

     label3:
        goto label2;

     label4:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double getTolerance()>();

        $b0 = d2 cmpg $d1;

        if $b0 > 0 goto label5;

        virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setNext(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r14);

        virtualinvoke r14.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setPrevious(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)>(r3);

        i2 = i2 + 1;

     label5:
        goto label1;

     label6:
        return i2;
    }

    private org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getUnprocessed(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment) $r4;

        $z1 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: boolean isProcessed()>();

        if $z1 != 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    private java.util.List followLoop(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment r1, r7, r8;
        java.util.ArrayList $r3;
        int $i0;
        java.lang.Object $r4;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

     label1:
        if r7 == r1 goto label2;

        if r7 == null goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r7);

        virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        r7 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getNext()>();

        goto label1;

     label2:
        if r7 != null goto label4;

        r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

     label3:
        if r8 == null goto label4;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(0, r8);

        virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: void setProcessed(boolean)>(1);

        r8 = virtualinvoke r8.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ConnectableSegment getPrevious()>();

        goto label3;

     label4:
        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void filterSpuriousVertices(java.util.List)>($r3);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 2 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        if $r6 == null goto label5;

        return null;

     label5:
        return $r3;
    }

    private void filterSpuriousVertices(java.util.List)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0;
        java.util.List r1;
        org.apache.commons.math3.geometry.euclidean.twod.Segment r2, r3, $r8;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r4, $r5;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r6, $r7, $r11;
        double $d0, $d1, $d2;
        boolean $z0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D $r9, $r10;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: java.util.List;

        i5 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i5 >= $i1 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r4;

        $i2 = i5 + 1;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = $i2 % $i3;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.apache.commons.math3.geometry.euclidean.twod.Segment) $r5;

        if r3 == null goto label2;

        $r6 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d0 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $r7 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        $d1 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: double getAngle()>();

        $d2 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>($d0, $d1, $d2);

        if $z0 == 0 goto label2;

        $r8 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r9 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()>();

        $r10 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()>();

        $r11 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>($r9, $r10, $r11);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r8);

        $i4 = i5;

        i5 = i5 + -1;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>($i4);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet r0, $r2;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
