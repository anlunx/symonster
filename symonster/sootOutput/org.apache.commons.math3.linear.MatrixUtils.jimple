public class org.apache.commons.math3.linear.MatrixUtils extends java.lang.Object
{
    public static final org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT;
    public static final org.apache.commons.math3.linear.RealMatrixFormat OCTAVE_FORMAT;

    private void <init>()
    {
        org.apache.commons.math3.linear.MatrixUtils r0;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(int, int)
    {
        int i0, i1, $i2;
        org.apache.commons.math3.linear.AbstractRealMatrix $r0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r1;
        org.apache.commons.math3.linear.BlockRealMatrix r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * i1;

        if $i2 > 4096 goto label1;

        r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r0 = r1;

        specialinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i0, i1);

        goto label2;

     label1:
        r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $r0 = r2;

        specialinvoke r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i0, i1);

     label2:
        return $r0;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int i0, i1, $i2;
        org.apache.commons.math3.linear.AbstractFieldMatrix $r1;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r2;
        org.apache.commons.math3.linear.BlockFieldMatrix r3;

        r0 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 * i1;

        if $i2 > 4096 goto label1;

        r2 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r1 = r2;

        specialinvoke r2.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        r3 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r1 = r3;

        specialinvoke r3.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.Field,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException
    {
        double[][] r0;
        double[] $r2, $r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.AbstractRealMatrix $r4;
        org.apache.commons.math3.exception.NullArgumentException r5;
        org.apache.commons.math3.linear.Array2DRowRealMatrix r6;
        org.apache.commons.math3.linear.BlockRealMatrix r7;

        r0 := @parameter0: double[][];

        if r0 == null goto label1;

        $r2 = r0[0];

        if $r2 != null goto label2;

     label1:
        r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw r5;

     label2:
        $i1 = lengthof r0;

        $r3 = r0[0];

        $i0 = lengthof $r3;

        $i2 = $i1 * $i0;

        if $i2 > 4096 goto label3;

        r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r4 = r6;

        specialinvoke r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][])>(r0);

        goto label4;

     label3:
        r7 = new org.apache.commons.math3.linear.BlockRealMatrix;

        $r4 = r7;

        specialinvoke r7.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r0);

     label4:
        return $r4;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.FieldElement[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[][] r0;
        org.apache.commons.math3.FieldElement[] $r2, $r3;
        int $i0, $i1, $i2;
        org.apache.commons.math3.linear.AbstractFieldMatrix $r4;
        org.apache.commons.math3.exception.NullArgumentException r5;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix r6;
        org.apache.commons.math3.linear.BlockFieldMatrix r7;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[][];

        if r0 == null goto label1;

        $r2 = r0[0];

        if $r2 != null goto label2;

     label1:
        r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw r5;

     label2:
        $i1 = lengthof r0;

        $r3 = r0[0];

        $i0 = lengthof $r3;

        $i2 = $i1 * $i0;

        if $i2 > 4096 goto label3;

        r6 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r4 = r6;

        specialinvoke r6.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][])>(r0);

        goto label4;

     label3:
        r7 = new org.apache.commons.math3.linear.BlockFieldMatrix;

        $r4 = r7;

        specialinvoke r7.<org.apache.commons.math3.linear.BlockFieldMatrix: void <init>(org.apache.commons.math3.FieldElement[][])>(r0);

     label4:
        return $r4;
    }

    public static org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)
    {
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix r0;

        i0 := @parameter0: int;

        r0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createFieldIdentityMatrix(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int i0, i1;
        org.apache.commons.math3.FieldElement r1, r2;
        org.apache.commons.math3.FieldElement[][] r3;
        org.apache.commons.math3.FieldElement[] r4;
        java.lang.Object $r5, $r6;
        java.lang.Object[][] $r7;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r8;

        r0 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        $r5 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r1 = (org.apache.commons.math3.FieldElement) $r5;

        $r6 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getOne()>();

        r2 = (org.apache.commons.math3.FieldElement) $r6;

        $r7 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[][] buildArray(org.apache.commons.math3.Field,int,int)>(r0, i0, i0);

        r3 = (org.apache.commons.math3.FieldElement[][]) $r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r4, r1);

        r4[i1] = r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        specialinvoke $r8.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][],boolean)>(r0, r3, 0);

        return $r8;
    }

    public static org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[])
    {
        double[] r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int $i0, $i1, $i2, i3;
        double $d0;

        r0 := @parameter0: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>($i1, $i0);

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $d0 = r0[i3];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i3, i3, $d0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[])
    {
        org.apache.commons.math3.FieldElement[] r0;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement $r2, $r4;
        org.apache.commons.math3.Field $r3;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        $i1 = lengthof r0;

        $i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r3, $i1, $i0);

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label2;

        $r4 = r0[i3];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i3, i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math3.linear.RealVector createRealVector(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0;
        org.apache.commons.math3.linear.ArrayRealVector $r1;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r0, 1);

        return $r1;
    }

    public static org.apache.commons.math3.linear.FieldVector createFieldVector(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.FieldElement[] r0;
        int $i0;
        org.apache.commons.math3.linear.ArrayFieldVector $r1;
        org.apache.commons.math3.FieldElement $r2;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.exception.ZeroException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.ZeroException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label2:
        $r1 = new org.apache.commons.math3.linear.ArrayFieldVector;

        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.ArrayFieldVector: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[],boolean)>($r3, r0, 1);

        return $r1;
    }

    public static org.apache.commons.math3.linear.RealMatrix createRowRealMatrix(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix r1;
        double $d0;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(1, i0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(0, i1, $d0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createRowFieldMatrix(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement $r2, $r4;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.exception.NoDataException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label1:
        i0 = lengthof r0;

        if i0 != 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r6);

        throw $r5;

     label2:
        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r3, 1, i0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(0, i1, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static org.apache.commons.math3.linear.RealMatrix createColumnRealMatrix(double[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0;
        int i0, i1;
        org.apache.commons.math3.linear.RealMatrix r1;
        double $d0;
        org.apache.commons.math3.exception.NullArgumentException $r2;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r2;

     label1:
        i0 = lengthof r0;

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(int,int)>(i0, 1);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, 0, $d0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static org.apache.commons.math3.linear.FieldMatrix createColumnFieldMatrix(org.apache.commons.math3.FieldElement[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.FieldElement[] r0;
        int i0, i1;
        org.apache.commons.math3.linear.FieldMatrix r1;
        org.apache.commons.math3.FieldElement $r2, $r4;
        org.apache.commons.math3.Field $r3;
        org.apache.commons.math3.exception.NoDataException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;

        r0 := @parameter0: org.apache.commons.math3.FieldElement[];

        if r0 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label1:
        i0 = lengthof r0;

        if i0 != 0 goto label2;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r6);

        throw $r5;

     label2:
        $r2 = r0[0];

        $r3 = interfaceinvoke $r2.<org.apache.commons.math3.FieldElement: org.apache.commons.math3.Field getField()>();

        r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field,int,int)>($r3, i0, 1);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = r0[i1];

        interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: void setEntry(int,int,org.apache.commons.math3.FieldElement)>(i1, 0, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return r1;
    }

    private static boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix, double, boolean)
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean z0;
        int i0, $i1, $i3, i4, i5;
        byte $b2;
        org.apache.commons.math3.linear.NonSymmetricMatrixException $r1;
        org.apache.commons.math3.linear.NonSquareMatrixException $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i0 == $i1 goto label2;

        if z0 == 0 goto label1;

        $r2 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>(i0, $i3);

        throw $r2;

     label1:
        return 0;

     label2:
        i4 = 0;

     label3:
        if i4 >= i0 goto label8;

        i5 = i4 + 1;

     label4:
        if i5 >= i0 goto label7;

        d1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i4, i5);

        d2 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i4);

        $d3 = d1 - d2;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d2);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, $d6);

        $d8 = $d7 * d0;

        $b2 = $d4 cmpl $d8;

        if $b2 <= 0 goto label6;

        if z0 == 0 goto label5;

        $r1 = new org.apache.commons.math3.linear.NonSymmetricMatrixException;

        specialinvoke $r1.<org.apache.commons.math3.linear.NonSymmetricMatrixException: void <init>(int,int,double)>(i4, i5, d0);

        throw $r1;

     label5:
        return 0;

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        i4 = i4 + 1;

        goto label3;

     label8:
        return 1;
    }

    public static void checkSymmetric(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        double d0;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)>(r0, d0, 1);

        return;
    }

    public static boolean isSymmetric(org.apache.commons.math3.linear.RealMatrix, double)
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        double d0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        $z0 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix,double,boolean)>(r0, d0, 0);

        return $z0;
    }

    public static void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix r0;
        int i0, i1;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i1);

        return;
    }

    public static void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROW_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i2 = $i1 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }

    public static void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats COLUMN_INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i2 = $i1 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }

    public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix r0;
        int i0, i1, i2, i3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r1, $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r6;
        java.lang.Integer $r3, $r4, $r7, $r8;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i1);

        if i1 >= i0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r6, $r7, $r8, 0);

        throw $r5;

     label1:
        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i2);

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i3);

        if i3 >= i2 goto label2;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_COLUMN_AFTER_FINAL_COLUMN>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 0);

        throw $r1;

     label2:
        return;
    }

    public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int[], int[]) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.AnyMatrix r0;
        int[] r1, r2;
        int $i0, $i1, i2, i3, i4, i5, i6, i7;
        org.apache.commons.math3.exception.NoDataException $r3, $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4, $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7, $r8;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        if r1 != null goto label1;

        $r8 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r8.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label2:
        $i0 = lengthof r1;

        if $i0 != 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NoDataException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_ROW_INDEX_ARRAY>;

        specialinvoke $r5.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r6);

        throw $r5;

     label3:
        $i1 = lengthof r2;

        if $i1 != 0 goto label4;

        $r3 = new org.apache.commons.math3.exception.NoDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_SELECTED_COLUMN_INDEX_ARRAY>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r4);

        throw $r3;

     label4:
        i2 = lengthof r1;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        i4 = r1[i3];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i4);

        i3 = i3 + 1;

        goto label5;

     label6:
        i5 = lengthof r2;

        i6 = 0;

     label7:
        if i6 >= i5 goto label8;

        i7 = r2[i6];

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix,int)>(r0, i7);

        i6 = i6 + 1;

        goto label7;

     label8:
        return;
    }

    public static void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i6 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i7 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if $i6 == $i7 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i2 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i5 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i2, $i3, $i4, $i5);

        throw $r2;

     label2:
        return;
    }

    public static void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.linear.MatrixDimensionMismatchException $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $i6 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i7 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        if $i6 == $i7 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.MatrixDimensionMismatchException;

        $i2 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i4 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        $i5 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixDimensionMismatchException: void <init>(int,int,int,int)>($i2, $i3, $i4, $i5);

        throw $r2;

     label2:
        return;
    }

    public static void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.AnyMatrix r0, r1;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @parameter0: org.apache.commons.math3.linear.AnyMatrix;

        r1 := @parameter1: org.apache.commons.math3.linear.AnyMatrix;

        $i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i2 = interfaceinvoke r0.<org.apache.commons.math3.linear.AnyMatrix: int getColumnDimension()>();

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.AnyMatrix: int getRowDimension()>();

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, $i3);

        throw $r2;

     label1:
        return;
    }

    public static org.apache.commons.math3.linear.Array2DRowRealMatrix fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)
    {
        org.apache.commons.math3.linear.FieldMatrix r0;
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter $r2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;

        r0 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $r2 = new org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>($r2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r4;
    }

    public static org.apache.commons.math3.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix)
    {
        org.apache.commons.math3.linear.FieldMatrix r0;
        org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter $r2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;

        r0 := @parameter0: org.apache.commons.math3.linear.FieldMatrix;

        $r2 = new org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter;

        specialinvoke $r2.<org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter: void <init>()>();

        interfaceinvoke r0.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)>($r2);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()>();

        return $r4;
    }

    public static void serializeRealVector(org.apache.commons.math3.linear.RealVector, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.io.ObjectOutputStream r1;
        int i0, i1;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter1: java.io.ObjectOutputStream;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void deserializeRealVector(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.io.ObjectInputStream r2;
        java.lang.reflect.Field r3;
        org.apache.commons.math3.linear.ArrayRealVector $r4;
        java.lang.Class $r5;
        double $d0;
        java.lang.NoSuchFieldException $r6;
        java.io.IOException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        int i0, i1;
        double[] r12;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.ObjectInputStream;

     label1:
        i0 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        r12 = newarray (double)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = virtualinvoke r2.<java.io.ObjectInputStream: double readDouble()>();

        r12[i1] = $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r12, 0);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>()>();

        virtualinvoke $r7.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>()>();

        virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r10;

     label7:
        return;

        catch java.lang.NoSuchFieldException from label1 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label4 with label6;
    }

    public static void serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix, java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r1 := @parameter1: java.io.ObjectOutputStream;

        i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public static void deserializeRealMatrix(java.lang.Object, java.lang.String, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.io.ObjectInputStream r2;
        double[][] r3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r4;
        java.lang.Class $r5;
        double $d0;
        java.lang.NoSuchFieldException $r6;
        java.io.IOException $r7, $r10;
        java.lang.IllegalAccessException $r9;
        int i0, i1, i2, i3;
        double[] r12;
        java.lang.reflect.Field r14;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.ObjectInputStream;

     label1:
        i0 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        i1 = virtualinvoke r2.<java.io.ObjectInputStream: int readInt()>();

        r3 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r12 = r3[i2];

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $d0 = virtualinvoke r2.<java.io.ObjectInputStream: double readDouble()>();

        r12[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r4 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r3, 0);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r14 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r14.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r14.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>()>();

        virtualinvoke $r7.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

     label8:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>()>();

        virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r10;

     label9:
        return;

        catch java.lang.NoSuchFieldException from label1 to label6 with label7;
        catch java.lang.IllegalAccessException from label1 to label6 with label8;
    }

    public static void solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, i12, i13;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.linear.NonSquareMatrixException $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        if r0 == null goto label01;

        if r1 == null goto label01;

        $i2 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == $i3 goto label06;

     label01:
        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        if r0 != null goto label02;

        $i10 = 0;

        goto label03;

     label02:
        $i10 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

     label03:
        if r1 != null goto label04;

        $i11 = 0;

        goto label05;

     label04:
        $i11 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

     label05:
        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, $i11);

        throw $r6;

     label06:
        $i4 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i5 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i4 == $i5 goto label07;

        $r5 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i7 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i8 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i7, $i8);

        throw $r5;

     label07:
        i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i12 = 0;

     label08:
        if i12 >= i0 goto label12;

        d0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i12, i12);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b6 = $d2 cmpg $d3;

        if $b6 >= 0 goto label09;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label09:
        $d4 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i12);

        d1 = $d4 / d0;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i12, d1);

        i13 = i12 + 1;

     label10:
        if i13 >= i0 goto label11;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i13);

        $d6 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i13, i12);

        $d7 = d1 * $d6;

        $d8 = $d5 - $d7;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i13, $d8);

        i13 = i13 + 1;

        goto label10;

     label11:
        i12 = i12 + 1;

        goto label08;

     label12:
        return;
    }

    public static void solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, i12, i13;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        org.apache.commons.math3.linear.NonSquareMatrixException $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r6;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        if r0 == null goto label01;

        if r1 == null goto label01;

        $i2 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i2 == $i3 goto label06;

     label01:
        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        if r0 != null goto label02;

        $i10 = 0;

        goto label03;

     label02:
        $i10 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

     label03:
        if r1 != null goto label04;

        $i11 = 0;

        goto label05;

     label04:
        $i11 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

     label05:
        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, $i11);

        throw $r6;

     label06:
        $i4 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $i5 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i4 == $i5 goto label07;

        $r5 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i7 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i8 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i7, $i8);

        throw $r5;

     label07:
        i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i12 = i0 - 1;

     label08:
        if i12 <= -1 goto label12;

        d0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i12, i12);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d3 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b6 = $d2 cmpg $d3;

        if $b6 >= 0 goto label09;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_DENOMINATOR>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label09:
        $d4 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i12);

        d1 = $d4 / d0;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i12, d1);

        i13 = i12 - 1;

     label10:
        if i13 <= -1 goto label11;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i13);

        $d6 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i13, i12);

        $d7 = d1 * $d6;

        $d8 = $d5 - $d7;

        virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i13, $d8);

        i13 = i13 + -1;

        goto label10;

     label11:
        i12 = i12 + -1;

        goto label08;

     label12:
        return;
    }

    public static org.apache.commons.math3.linear.RealMatrix blockInverse(org.apache.commons.math3.linear.RealMatrix, int)
    {
        org.apache.commons.math3.linear.RealMatrix r0, r1, r2, r3, r4, r7, r10, r11, r14, r15, r18, r19, r20, $r24, $r25, $r27, $r28, $r30, $r31, $r32, $r33;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.commons.math3.linear.DecompositionSolver r6, r9, r13, r17;
        org.apache.commons.math3.linear.SingularValueDecomposition $r22, $r23, $r26, $r29;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r34;
        double[][] $r35, $r36, $r37, $r38;
        org.apache.commons.math3.linear.SingularMatrixException $r39, $r40, $r41, $r42;
        org.apache.commons.math3.linear.NonSquareMatrixException $r43;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if $i3 == i1 goto label1;

        $r43 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i8 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i9 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r43.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i8, $i9);

        throw $r43;

     label1:
        i2 = i0 + 1;

        r1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, i0, 0, i0);

        $i4 = i1 - 1;

        r2 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, i0, i2, $i4);

        $i5 = i1 - 1;

        r3 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i2, $i5, 0, i0);

        $i7 = i1 - 1;

        $i6 = i1 - 1;

        r4 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix getSubMatrix(int,int,int,int)>(i2, $i7, i2, $i6);

        $r22 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke $r22.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r1);

        r6 = virtualinvoke $r22.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z0 = interfaceinvoke r6.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label2;

        $r42 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r42.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r42;

     label2:
        r7 = interfaceinvoke r6.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r23 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke $r23.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r4);

        r9 = virtualinvoke $r23.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z1 = interfaceinvoke r9.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z1 != 0 goto label3;

        $r41 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r41.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r41;

     label3:
        r10 = interfaceinvoke r9.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r24 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r10);

        $r25 = interfaceinvoke $r24.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r3);

        r11 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r25);

        $r26 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke $r26.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r11);

        r13 = virtualinvoke $r26.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z2 = interfaceinvoke r13.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z2 != 0 goto label4;

        $r40 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r40.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r40;

     label4:
        r14 = interfaceinvoke r13.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r27 = interfaceinvoke r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r7);

        $r28 = interfaceinvoke $r27.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r2);

        r15 = interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)>($r28);

        $r29 = new org.apache.commons.math3.linear.SingularValueDecomposition;

        specialinvoke $r29.<org.apache.commons.math3.linear.SingularValueDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r15);

        r17 = virtualinvoke $r29.<org.apache.commons.math3.linear.SingularValueDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $z3 = interfaceinvoke r17.<org.apache.commons.math3.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z3 != 0 goto label5;

        $r39 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r39.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r39;

     label5:
        r18 = interfaceinvoke r17.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        $r30 = interfaceinvoke r7.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r2);

        $r31 = interfaceinvoke $r30.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r18);

        r19 = interfaceinvoke $r31.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r32 = interfaceinvoke r10.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r3);

        $r33 = interfaceinvoke $r32.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r14);

        r20 = interfaceinvoke $r33.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)>(-1.0);

        $r34 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r34.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i1, i1);

        $r35 = interfaceinvoke r14.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke $r34.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r35, 0, 0);

        $r36 = interfaceinvoke r19.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke $r34.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r36, 0, i2);

        $r37 = interfaceinvoke r20.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke $r34.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r37, i2, 0);

        $r38 = interfaceinvoke r18.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        interfaceinvoke $r34.<org.apache.commons.math3.linear.RealMatrix: void setSubMatrix(double[][],int,int)>($r38, i2, i2);

        return $r34;
    }

    public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix r0, $r1;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r1 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix,double)>(r0, 0.0);

        return $r1;
    }

    public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.linear.SingularMatrixException, org.apache.commons.math3.linear.NonSquareMatrixException
    {
        org.apache.commons.math3.linear.RealMatrix r0, $r4;
        double d0;
        boolean $z0, $z1;
        org.apache.commons.math3.linear.QRDecomposition $r2;
        org.apache.commons.math3.linear.DecompositionSolver $r3;
        org.apache.commons.math3.linear.DiagonalMatrix $r5, $r6;
        org.apache.commons.math3.linear.NonSquareMatrixException $r7;
        int $i0, $i1;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r7 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i1 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r7.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i0, $i1);

        throw $r7;

     label1:
        $z1 = r0 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z1 == 0 goto label2;

        $r5 = (org.apache.commons.math3.linear.DiagonalMatrix) r0;

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.linear.DiagonalMatrix: org.apache.commons.math3.linear.DiagonalMatrix inverse(double)>(d0);

        return $r6;

     label2:
        $r2 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r0, d0);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        return $r4;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.linear.RealMatrixFormat $r0, $r1;

        $r0 = staticinvoke <org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrixFormat getInstance()>();

        <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrixFormat DEFAULT_FORMAT> = $r0;

        $r1 = new org.apache.commons.math3.linear.RealMatrixFormat;

        specialinvoke $r1.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("[", "]", "", "", "; ", ", ");

        <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrixFormat OCTAVE_FORMAT> = $r1;

        return;
    }
}
