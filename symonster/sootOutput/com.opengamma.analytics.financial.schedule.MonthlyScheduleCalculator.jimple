public class com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator extends com.opengamma.analytics.financial.schedule.Schedule
{

    public void <init>()
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator;

        specialinvoke r0.<com.opengamma.analytics.financial.schedule.Schedule: void <init>()>();

        return;
    }

    public org.threeten.bp.LocalDate[] getSchedule(org.threeten.bp.LocalDate, org.threeten.bp.LocalDate, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator r0;
        org.threeten.bp.LocalDate r1, r2, r14, $r15, r16, $r17;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        java.util.ArrayList $r6;
        org.threeten.bp.LocalDate[] $r7, $r9, $r10, $r12, $r13;
        java.lang.Object[] $r8, $r11;
        int $i0, $i2, i4, i5;
        long $l1, $l3;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        r2 := @parameter1: org.threeten.bp.LocalDate;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z2 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "start date must not be after end date");

        $z3 = virtualinvoke r1.<org.threeten.bp.LocalDate: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label01;

        $r13 = newarray (org.threeten.bp.LocalDate)[1];

        $r13[0] = r1;

        return $r13;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        if z0 == 0 goto label06;

        r14 = r2;

        i4 = 1;

     label02:
        $z6 = virtualinvoke r14.<org.threeten.bp.LocalDate: boolean isBefore(org.threeten.bp.chrono.ChronoLocalDate)>(r1);

        if $z6 != 0 goto label05;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r14);

        if z1 == 0 goto label03;

        $r15 = virtualinvoke r14.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minusMonths(long)>(1L);

        goto label04;

     label03:
        $i2 = i4;

        i4 = i4 + 1;

        $l3 = (long) $i2;

        $r15 = virtualinvoke r2.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate minusMonths(long)>($l3);

     label04:
        r14 = $r15;

        goto label02;

     label05:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6);

        $r10 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator: org.threeten.bp.LocalDate[] EMPTY_LOCAL_DATE_ARRAY>;

        $r11 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (org.threeten.bp.LocalDate[]) $r11;

        return $r12;

     label06:
        r16 = r1;

        i5 = 1;

     label07:
        $z4 = virtualinvoke r16.<org.threeten.bp.LocalDate: boolean isAfter(org.threeten.bp.chrono.ChronoLocalDate)>(r2);

        if $z4 != 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r16);

        if z1 == 0 goto label08;

        $r17 = virtualinvoke r16.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusMonths(long)>(1L);

        goto label09;

     label08:
        $i0 = i5;

        i5 = i5 + 1;

        $l1 = (long) $i0;

        $r17 = virtualinvoke r1.<org.threeten.bp.LocalDate: org.threeten.bp.LocalDate plusMonths(long)>($l1);

     label09:
        r16 = $r17;

        goto label07;

     label10:
        $r7 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator: org.threeten.bp.LocalDate[] EMPTY_LOCAL_DATE_ARRAY>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.threeten.bp.LocalDate[]) $r8;

        return $r9;
    }

    public org.threeten.bp.ZonedDateTime[] getSchedule(org.threeten.bp.ZonedDateTime, org.threeten.bp.ZonedDateTime, boolean, boolean)
    {
        com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator r0;
        org.threeten.bp.ZonedDateTime r1, r2, r14, $r15, r16, $r17;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        java.util.ArrayList $r6;
        org.threeten.bp.ZonedDateTime[] $r7, $r9, $r10, $r12, $r13;
        java.lang.Object[] $r8, $r11;
        int $i0, $i2, i4, i5;
        long $l1, $l3;

        r0 := @this: com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator;

        r1 := @parameter0: org.threeten.bp.ZonedDateTime;

        r2 := @parameter1: org.threeten.bp.ZonedDateTime;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "start date");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "end date");

        $z2 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "start date must not be after end date");

        $z3 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label01;

        $r13 = newarray (org.threeten.bp.ZonedDateTime)[1];

        $r13[0] = r1;

        return $r13;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        if z0 == 0 goto label06;

        r14 = r2;

        i4 = 1;

     label02:
        $z6 = virtualinvoke r14.<org.threeten.bp.ZonedDateTime: boolean isBefore(org.threeten.bp.chrono.ChronoZonedDateTime)>(r1);

        if $z6 != 0 goto label05;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r14);

        if z1 == 0 goto label03;

        $r15 = virtualinvoke r14.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusMonths(long)>(1L);

        goto label04;

     label03:
        $i2 = i4;

        i4 = i4 + 1;

        $l3 = (long) $i2;

        $r15 = virtualinvoke r2.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime minusMonths(long)>($l3);

     label04:
        r14 = $r15;

        goto label02;

     label05:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6);

        $r10 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ZONED_DATE_TIME_ARRAY>;

        $r11 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (org.threeten.bp.ZonedDateTime[]) $r11;

        return $r12;

     label06:
        r16 = r1;

        i5 = 1;

     label07:
        $z4 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: boolean isAfter(org.threeten.bp.chrono.ChronoZonedDateTime)>(r2);

        if $z4 != 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r16);

        if z1 == 0 goto label08;

        $r17 = virtualinvoke r16.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusMonths(long)>(1L);

        goto label09;

     label08:
        $i0 = i5;

        i5 = i5 + 1;

        $l1 = (long) $i0;

        $r17 = virtualinvoke r1.<org.threeten.bp.ZonedDateTime: org.threeten.bp.ZonedDateTime plusMonths(long)>($l1);

     label09:
        r16 = $r17;

        goto label07;

     label10:
        $r7 = <com.opengamma.analytics.financial.schedule.MonthlyScheduleCalculator: org.threeten.bp.ZonedDateTime[] EMPTY_ZONED_DATE_TIME_ARRAY>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.threeten.bp.ZonedDateTime[]) $r8;

        return $r9;
    }
}
