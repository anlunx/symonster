public class org.apache.commons.math3.util.MathArrays extends java.lang.Object
{
    private static final int SPLIT_FACTOR;

    private void <init>()
    {
        org.apache.commons.math3.util.MathArrays r0;

        r0 := @this: org.apache.commons.math3.util.MathArrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double[] scale(double, double[])
    {
        double d0, $d1, $d2;
        double[] r0, r1;
        int $i0, $i1, i2;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $i0 = lengthof r0;

        r1 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $d1 = r0[i2];

        $d2 = $d1 * d0;

        r1[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void scaleInPlace(double, double[])
    {
        double d0, $d1, $d2;
        double[] r0;
        int $i0, i1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d2 = $d1 * d0;

        r0[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static double[] ebeAdd(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r0;

        $i3 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r3;

        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label3;

        $d1 = r2[i5];

        $d0 = r1[i5];

        $d2 = $d1 + $d0;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static double[] ebeSubtract(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r0;

        $i3 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r3;

        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label3;

        $d1 = r2[i5];

        $d0 = r1[i5];

        $d2 = $d1 - $d0;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static double[] ebeMultiply(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r0;

        $i3 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r3;

        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label3;

        $d1 = r2[i5];

        $d0 = r1[i5];

        $d2 = $d1 * $d0;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static double[] ebeDivide(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r0;

        $i3 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r3;

        i5 = 0;

     label2:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label3;

        $d1 = r2[i5];

        $d0 = r1[i5];

        $d2 = $d1 / $d0;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static double distance1(double[], double[])
    {
        double[] r0, r1;
        int $i0, i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d0 = r1[i1];

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public static int distance1(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label2;

        $i2 = r0[i6];

        $i1 = r1[i6];

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i3);

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public static double distance(double[], double[])
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        int $i0, i1;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d5 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d3 = r0[i1];

        $d2 = r1[i1];

        d0 = $d3 - $d2;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public static double distance(int[], int[])
    {
        int[] r0, r1;
        double d0, $d1, $d2, d3;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        d3 = 0.0;

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $i2 = r0[i4];

        $i1 = r1[i4];

        $i3 = $i2 - $i1;

        d0 = (double) $i3;

        $d2 = d0 * d0;

        d3 = d3 + $d2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        return $d1;
    }

    public static double distanceInf(double[], double[])
    {
        double[] r0, r1;
        int $i0, i1;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d0 = r1[i1];

        $d2 = $d1 - $d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d4, $d3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public static int distanceInf(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label2;

        $i2 = r0[i6];

        $i1 = r1[i6];

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i3);

        i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i5, $i4);

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public static boolean isMonotonic(java.lang.Comparable[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean)
    {
        java.lang.Comparable[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection r1;
        boolean z0;
        int i0, $i1, $i2, i3, i4, i5;
        int[] $r2;
        java.lang.Comparable $r3, $r4, r6;
        org.apache.commons.math3.exception.MathInternalError $r5;

        r0 := @parameter0: java.lang.Comparable[];

        r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        z0 := @parameter2: boolean;

        r6 = r0[0];

        i0 = lengthof r0;

        i3 = 1;

     label1:
        if i3 >= i0 goto label8;

        $r2 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$OrderDirection>;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.util.MathArrays$OrderDirection: int ordinal()>();

        $i2 = $r2[$i1];

        lookupswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label4;
            default: goto label6;
        };

     label2:
        $r4 = r0[i3];

        i4 = interfaceinvoke r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        if z0 == 0 goto label3;

        if i4 < 0 goto label7;

        return 0;

     label3:
        if i4 <= 0 goto label7;

        return 0;

     label4:
        $r3 = r0[i3];

        i5 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r6);

        if z0 == 0 goto label5;

        if i5 < 0 goto label7;

        return 0;

     label5:
        if i5 <= 0 goto label7;

        return 0;

     label6:
        $r5 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r5;

     label7:
        r6 = r0[i3];

        i3 = i3 + 1;

        goto label1;

     label8:
        return 1;
    }

    public static boolean isMonotonic(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean)
    {
        double[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection r1;
        boolean z0, $z1;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>(r0, r1, z0, 0);

        return $z1;
    }

    public static boolean checkOrder(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean, boolean) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection r1;
        boolean z0, z1;
        int i0, $i1, $i2, i7;
        org.apache.commons.math3.exception.NonMonotonicSequenceException $r2;
        double $d0, $d1, $d2, $d3, $d4, d5;
        java.lang.Double $r3, $r4;
        int[] $r5;
        byte $b3, $b4, $b5, $b6;
        org.apache.commons.math3.exception.MathInternalError $r6;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        d5 = r0[0];

        i0 = lengthof r0;

        i7 = 1;

     label01:
        if i7 >= i0 goto label08;

        $r5 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$OrderDirection>;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.util.MathArrays$OrderDirection: int ordinal()>();

        $i2 = $r5[$i1];

        lookupswitch($i2)
        {
            case 1: goto label02;
            case 2: goto label04;
            default: goto label06;
        };

     label02:
        if z0 == 0 goto label03;

        $d4 = r0[i7];

        $b6 = $d4 cmpg d5;

        if $b6 > 0 goto label07;

        goto label08;

     label03:
        $d3 = r0[i7];

        $b5 = $d3 cmpg d5;

        if $b5 >= 0 goto label07;

        goto label08;

     label04:
        if z0 == 0 goto label05;

        $d2 = r0[i7];

        $b4 = $d2 cmpl d5;

        if $b4 < 0 goto label07;

        goto label08;

     label05:
        $d1 = r0[i7];

        $b3 = $d1 cmpl d5;

        if $b3 <= 0 goto label07;

        goto label08;

     label06:
        $r6 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r6;

     label07:
        d5 = r0[i7];

        i7 = i7 + 1;

        goto label01;

     label08:
        if i7 != i0 goto label09;

        return 1;

     label09:
        if z1 == 0 goto label10;

        $r2 = new org.apache.commons.math3.exception.NonMonotonicSequenceException;

        $d0 = r0[i7];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        specialinvoke $r2.<org.apache.commons.math3.exception.NonMonotonicSequenceException: void <init>(java.lang.Number,java.lang.Number,int,org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)>($r3, $r4, i7, r1, z0);

        throw $r2;

     label10:
        return 0;
    }

    public static void checkOrder(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, boolean) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection r1;
        boolean z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.math3.util.MathArrays: boolean checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean,boolean)>(r0, r1, z0, 1);

        return;
    }

    public static void checkOrder(double[]) throws org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        double[] r0;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r1;

        r0 := @parameter0: double[];

        $r1 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,boolean)>(r0, $r1, 1);

        return;
    }

    public static void checkRectangular(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        long[][] r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        long[] $r1, $r2, $r4, $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @parameter0: long[][];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        i5 = 1;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label3;

        $r1 = r0[i5];

        $i2 = lengthof $r1;

        $r2 = r0[0];

        $i1 = lengthof $r2;

        if $i2 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r4 = r0[i5];

        $i4 = lengthof $r4;

        $r5 = r0[0];

        $i3 = lengthof $r5;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(org.apache.commons.math3.exception.util.Localizable,int,int)>($r6, $i4, $i3);

        throw $r3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public static void checkPositive(double[]) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        double[] r0;
        int $i0, i2;
        double $d0, $d1;
        byte $b1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Double $r2;

        r0 := @parameter0: double[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        $d0 = r0[i2];

        $b1 = $d0 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $d1 = r0[i2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public static void checkNotNaN(double[]) throws org.apache.commons.math3.exception.NotANumberException
    {
        double[] r0;
        int $i0, i1;
        double $d0;
        boolean $z0;
        org.apache.commons.math3.exception.NotANumberException $r1;

        r0 := @parameter0: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $d0 = r0[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void checkNonNegative(long[]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long[] r0;
        int $i0, i4;
        long $l1, $l3;
        byte $b2;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        java.lang.Long $r2;

        r0 := @parameter0: long[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label3;

        $l1 = r0[i4];

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $l3 = r0[i4];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    public static void checkNonNegative(long[][]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long[][] r0;
        int $i0, $i1, i5, i6;
        long[] $r1, $r2, $r4;
        long $l2, $l4;
        byte $b3;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        java.lang.Long $r5;

        r0 := @parameter0: long[][];

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label5;

        i6 = 0;

     label2:
        $r1 = r0[i5];

        $i1 = lengthof $r1;

        if i6 >= $i1 goto label4;

        $r2 = r0[i5];

        $l2 = $r2[i6];

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = r0[i5];

        $l4 = $r4[i6];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r3;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    public static double safeNorm(double[])
    {
        double[] r0;
        double d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36;
        int $i0, $i1, i11;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10;

        r0 := @parameter0: double[];

        d27 = 0.0;

        d28 = 0.0;

        d29 = 0.0;

        d30 = 0.0;

        d31 = 0.0;

        $i0 = lengthof r0;

        d2 = (double) $i0;

        d3 = 1.304E19 / d2;

        i11 = 0;

     label01:
        $i1 = lengthof r0;

        if i11 >= $i1 goto label08;

        $d19 = r0[i11];

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d19);

        $b5 = d4 cmpg 3.834E-20;

        if $b5 < 0 goto label02;

        $b10 = d4 cmpl d3;

        if $b10 <= 0 goto label06;

     label02:
        $b6 = d4 cmpl 3.834E-20;

        if $b6 <= 0 goto label04;

        $b9 = d4 cmpl d30;

        if $b9 <= 0 goto label03;

        d32 = d30 / d4;

        $d24 = d27 * d32;

        $d25 = $d24 * d32;

        d27 = 1.0 + $d25;

        d30 = d4;

        goto label07;

     label03:
        d33 = d4 / d30;

        $d23 = d33 * d33;

        d27 = d27 + $d23;

        goto label07;

     label04:
        $b7 = d4 cmpl d31;

        if $b7 <= 0 goto label05;

        d34 = d31 / d4;

        $d21 = d29 * d34;

        $d22 = $d21 * d34;

        d29 = 1.0 + $d22;

        d31 = d4;

        goto label07;

     label05:
        $b8 = d4 cmpl 0.0;

        if $b8 == 0 goto label07;

        d35 = d4 / d31;

        $d20 = d35 * d35;

        d29 = d29 + $d20;

        goto label07;

     label06:
        $d26 = d4 * d4;

        d28 = d28 + $d26;

     label07:
        i11 = i11 + 1;

        goto label01;

     label08:
        $b2 = d27 cmpl 0.0;

        if $b2 == 0 goto label09;

        $d15 = d28 / d30;

        $d16 = $d15 / d30;

        $d17 = d27 + $d16;

        $d18 = staticinvoke <java.lang.Math: double sqrt(double)>($d17);

        d36 = d30 * $d18;

        goto label12;

     label09:
        $b3 = d28 cmpl 0.0;

        if $b3 != 0 goto label10;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>(d29);

        d36 = d31 * $d14;

        goto label12;

     label10:
        $b4 = d28 cmpl d31;

        if $b4 < 0 goto label11;

        $d10 = d31 / d28;

        $d9 = d31 * d29;

        $d11 = $d10 * $d9;

        $d12 = 1.0 + $d11;

        $d13 = d28 * $d12;

        d36 = staticinvoke <java.lang.Math: double sqrt(double)>($d13);

        goto label12;

     label11:
        $d6 = d28 / d31;

        $d5 = d31 * d29;

        $d7 = $d6 + $d5;

        $d8 = d31 * $d7;

        d36 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

     label12:
        return d36;
    }

    public static transient void sortInPlace(double[], double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0;
        double[][] r1;
        org.apache.commons.math3.util.MathArrays$OrderDirection $r2;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[][];

        $r2 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void sortInPlace(double[],org.apache.commons.math3.util.MathArrays$OrderDirection,double[][])>(r0, $r2, r1);

        return;
    }

    public static transient void sortInPlace(double[], org.apache.commons.math3.util.MathArrays$OrderDirection, double[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r4, r19, r24;
        org.apache.commons.math3.util.MathArrays$OrderDirection r1, $r6;
        double[][] r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        int[] r3;
        java.lang.Object $r7, $r8, $r9, $r11;
        double $d0, $d1, $d2;
        java.lang.Double $r10, $r14;
        java.lang.Integer $r12, $r15;
        java.util.Comparator $r21;
        org.apache.commons.math3.util.Pair r23, r29;
        org.apache.commons.math3.exception.NullArgumentException r25, r26;
        org.apache.commons.math3.exception.DimensionMismatchException r27;
        java.util.ArrayList r28;
        org.apache.commons.math3.util.MathArrays$1 r30;
        org.apache.commons.math3.util.MathArrays$2 r31;

        r0 := @parameter0: double[];

        r1 := @parameter1: org.apache.commons.math3.util.MathArrays$OrderDirection;

        r2 := @parameter2: double[][];

        if r0 != null goto label01;

        r25 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke r25.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw r25;

     label01:
        i0 = lengthof r2;

        i1 = lengthof r0;

        i6 = 0;

     label02:
        if i6 >= i0 goto label05;

        r19 = r2[i6];

        if r19 != null goto label03;

        r26 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke r26.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw r26;

     label03:
        $i4 = lengthof r19;

        if $i4 == i1 goto label04;

        r27 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r19;

        specialinvoke r27.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, i1);

        throw r27;

     label04:
        i6 = i6 + 1;

        goto label02;

     label05:
        r28 = new java.util.ArrayList;

        specialinvoke r28.<java.util.ArrayList: void <init>(int)>(i1);

        i7 = 0;

     label06:
        if i7 >= i1 goto label07;

        r29 = new org.apache.commons.math3.util.Pair;

        $d2 = r0[i7];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        specialinvoke r29.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r14, $r15);

        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>(r29);

        i7 = i7 + 1;

        goto label06;

     label07:
        $r6 = <org.apache.commons.math3.util.MathArrays$OrderDirection: org.apache.commons.math3.util.MathArrays$OrderDirection INCREASING>;

        if r1 != $r6 goto label08;

        r30 = new org.apache.commons.math3.util.MathArrays$1;

        $r21 = r30;

        specialinvoke r30.<org.apache.commons.math3.util.MathArrays$1: void <init>()>();

        goto label09;

     label08:
        r31 = new org.apache.commons.math3.util.MathArrays$2;

        $r21 = r31;

        specialinvoke r31.<org.apache.commons.math3.util.MathArrays$2: void <init>()>();

     label09:
        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r28, $r21);

        r3 = newarray (int)[i1];

        i8 = 0;

     label10:
        if i8 >= i1 goto label11;

        $r8 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(i8);

        r23 = (org.apache.commons.math3.util.Pair) $r8;

        $r9 = virtualinvoke r23.<org.apache.commons.math3.util.Pair: java.lang.Object getKey()>();

        $r10 = (java.lang.Double) $r9;

        $d1 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        r0[i8] = $d1;

        $r11 = virtualinvoke r23.<org.apache.commons.math3.util.Pair: java.lang.Object getValue()>();

        $r12 = (java.lang.Integer) $r11;

        $i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        r3[i8] = $i3;

        i8 = i8 + 1;

        goto label10;

     label11:
        i9 = 0;

     label12:
        if i9 >= i0 goto label15;

        r24 = r2[i9];

        $r7 = virtualinvoke r24.<java.lang.Object: java.lang.Object clone()>();

        r4 = (double[]) $r7;

        i10 = 0;

     label13:
        if i10 >= i1 goto label14;

        $i2 = r3[i10];

        $d0 = r4[$i2];

        r24[i10] = $d0;

        i10 = i10 + 1;

        goto label13;

     label14:
        i9 = i9 + 1;

        goto label12;

     label15:
        return;
    }

    public static int[] copyOf(int[])
    {
        int[] r0, $r1;
        int $i0;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>(r0, $i0);

        return $r1;
    }

    public static double[] copyOf(double[])
    {
        double[] r0, $r1;
        int $i0;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[],int)>(r0, $i0);

        return $r1;
    }

    public static int[] copyOf(int[], int)
    {
        int[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 = newarray (int)[i0];

        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;
    }

    public static double[] copyOf(double[], int)
    {
        double[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        r1 = newarray (double)[i0];

        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;
    }

    public static double[] copyOfRange(double[], int, int)
    {
        double[] r0, r1;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 - i0;

        r1 = newarray (double)[i2];

        $i3 = lengthof r0;

        $i4 = $i3 - i0;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i2, $i4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i5);

        return r1;
    }

    public static double linearCombination(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0, r1, r2;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43;
        boolean $z0;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 = lengthof r0;

        $i2 = lengthof r1;

        if i0 == $i2 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i0, $i4);

        throw $r3;

     label1:
        if i0 != 1 goto label2;

        $d31 = r0[0];

        $d30 = r1[0];

        $d32 = $d31 * $d30;

        return $d32;

     label2:
        r2 = newarray (double)[i0];

        d33 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        d0 = r0[i5];

        d1 = 1.34217729E8 * d0;

        $d19 = d1 - d0;

        d2 = d1 - $d19;

        d3 = d0 - d2;

        d4 = r1[i5];

        d34 = 1.34217729E8 * d4;

        $d20 = d34 - d4;

        d35 = d34 - $d20;

        d6 = d4 - d35;

        $d21 = d0 * d4;

        r2[i5] = $d21;

        $d29 = d3 * d6;

        $d23 = r2[i5];

        $d22 = d2 * d35;

        $d25 = $d23 - $d22;

        $d24 = d3 * d35;

        $d27 = $d25 - $d24;

        $d26 = d2 * d6;

        $d28 = $d27 - $d26;

        d7 = $d29 - $d28;

        d33 = d33 + d7;

        i5 = i5 + 1;

        goto label3;

     label4:
        d36 = r2[0];

        d37 = r2[1];

        d38 = d36 + d37;

        d39 = d38 - d37;

        $d8 = d38 - d39;

        $d10 = d37 - $d8;

        $d9 = d36 - d39;

        d40 = $d10 + $d9;

        i1 = i0 - 1;

        i6 = 1;

     label5:
        if i6 >= i1 goto label6;

        $i3 = i6 + 1;

        d41 = r2[$i3];

        d5 = d38 + d41;

        d42 = d5 - d41;

        $d15 = d5 - d42;

        $d17 = d41 - $d15;

        $d16 = d38 - d42;

        $d18 = $d17 + $d16;

        d40 = d40 + $d18;

        d38 = d5;

        i6 = i6 + 1;

        goto label5;

     label6:
        $d11 = d33 + d40;

        d43 = d38 + $d11;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d43);

        if $z0 == 0 goto label8;

        d43 = 0.0;

        i7 = 0;

     label7:
        if i7 >= i0 goto label8;

        $d13 = r0[i7];

        $d12 = r1[i7];

        $d14 = $d13 * $d12;

        d43 = d43 + $d14;

        i7 = i7 + 1;

        goto label7;

     label8:
        return d43;
    }

    public static double linearCombination(double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 = 1.34217729E8 * d0;

        $d23 = d4 - d0;

        d5 = d4 - $d23;

        d6 = d0 - d5;

        d7 = 1.34217729E8 * d1;

        $d24 = d7 - d1;

        d8 = d7 - $d24;

        d9 = d1 - d8;

        d10 = d0 * d1;

        $d31 = d6 * d9;

        $d25 = d5 * d8;

        $d27 = d10 - $d25;

        $d26 = d6 * d8;

        $d29 = $d27 - $d26;

        $d28 = d5 * d9;

        $d30 = $d29 - $d28;

        d11 = $d31 - $d30;

        d12 = 1.34217729E8 * d2;

        $d32 = d12 - d2;

        d13 = d12 - $d32;

        d14 = d2 - d13;

        d15 = 1.34217729E8 * d3;

        $d33 = d15 - d3;

        d16 = d15 - $d33;

        d17 = d3 - d16;

        d18 = d2 * d3;

        $d40 = d14 * d17;

        $d34 = d13 * d16;

        $d36 = d18 - $d34;

        $d35 = d14 * d16;

        $d38 = $d36 - $d35;

        $d37 = d13 * d17;

        $d39 = $d38 - $d37;

        d19 = $d40 - $d39;

        d20 = d10 + d18;

        d21 = d20 - d18;

        $d41 = d20 - d21;

        $d43 = d18 - $d41;

        $d42 = d10 - d21;

        d22 = $d43 + $d42;

        $d44 = d11 + d19;

        $d45 = $d44 + d22;

        d48 = d20 + $d45;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d48);

        if $z0 == 0 goto label1;

        $d47 = d0 * d1;

        $d46 = d2 * d3;

        d48 = $d47 + $d46;

     label1:
        return d48;
    }

    public static double linearCombination(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, d77;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 = 1.34217729E8 * d0;

        $d36 = d6 - d0;

        d7 = d6 - $d36;

        d8 = d0 - d7;

        d9 = 1.34217729E8 * d1;

        $d37 = d9 - d1;

        d10 = d9 - $d37;

        d11 = d1 - d10;

        d12 = d0 * d1;

        $d44 = d8 * d11;

        $d38 = d7 * d10;

        $d40 = d12 - $d38;

        $d39 = d8 * d10;

        $d42 = $d40 - $d39;

        $d41 = d7 * d11;

        $d43 = $d42 - $d41;

        d13 = $d44 - $d43;

        d14 = 1.34217729E8 * d2;

        $d45 = d14 - d2;

        d15 = d14 - $d45;

        d16 = d2 - d15;

        d17 = 1.34217729E8 * d3;

        $d46 = d17 - d3;

        d18 = d17 - $d46;

        d19 = d3 - d18;

        d20 = d2 * d3;

        $d53 = d16 * d19;

        $d47 = d15 * d18;

        $d49 = d20 - $d47;

        $d48 = d16 * d18;

        $d51 = $d49 - $d48;

        $d50 = d15 * d19;

        $d52 = $d51 - $d50;

        d21 = $d53 - $d52;

        d22 = 1.34217729E8 * d4;

        $d54 = d22 - d4;

        d23 = d22 - $d54;

        d24 = d4 - d23;

        d25 = 1.34217729E8 * d5;

        $d55 = d25 - d5;

        d26 = d25 - $d55;

        d27 = d5 - d26;

        d28 = d4 * d5;

        $d62 = d24 * d27;

        $d56 = d23 * d26;

        $d58 = d28 - $d56;

        $d57 = d24 * d26;

        $d60 = $d58 - $d57;

        $d59 = d23 * d27;

        $d61 = $d60 - $d59;

        d29 = $d62 - $d61;

        d30 = d12 + d20;

        d31 = d30 - d20;

        $d63 = d30 - d31;

        $d65 = d20 - $d63;

        $d64 = d12 - d31;

        d32 = $d65 + $d64;

        d33 = d30 + d28;

        d34 = d33 - d28;

        $d66 = d33 - d34;

        $d68 = d28 - $d66;

        $d67 = d30 - d34;

        d35 = $d68 + $d67;

        $d69 = d13 + d21;

        $d70 = $d69 + d29;

        $d71 = $d70 + d32;

        $d72 = $d71 + d35;

        d77 = d33 + $d72;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d77);

        if $z0 == 0 goto label1;

        $d74 = d0 * d1;

        $d73 = d2 * d3;

        $d76 = $d74 + $d73;

        $d75 = d4 * d5;

        d77 = $d76 + $d75;

     label1:
        return d77;
    }

    public static double linearCombination(double, double, double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, d106;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        d8 = 1.34217729E8 * d0;

        $d49 = d8 - d0;

        d9 = d8 - $d49;

        d10 = d0 - d9;

        d11 = 1.34217729E8 * d1;

        $d50 = d11 - d1;

        d12 = d11 - $d50;

        d13 = d1 - d12;

        d14 = d0 * d1;

        $d57 = d10 * d13;

        $d51 = d9 * d12;

        $d53 = d14 - $d51;

        $d52 = d10 * d12;

        $d55 = $d53 - $d52;

        $d54 = d9 * d13;

        $d56 = $d55 - $d54;

        d15 = $d57 - $d56;

        d16 = 1.34217729E8 * d2;

        $d58 = d16 - d2;

        d17 = d16 - $d58;

        d18 = d2 - d17;

        d19 = 1.34217729E8 * d3;

        $d59 = d19 - d3;

        d20 = d19 - $d59;

        d21 = d3 - d20;

        d22 = d2 * d3;

        $d66 = d18 * d21;

        $d60 = d17 * d20;

        $d62 = d22 - $d60;

        $d61 = d18 * d20;

        $d64 = $d62 - $d61;

        $d63 = d17 * d21;

        $d65 = $d64 - $d63;

        d23 = $d66 - $d65;

        d24 = 1.34217729E8 * d4;

        $d67 = d24 - d4;

        d25 = d24 - $d67;

        d26 = d4 - d25;

        d27 = 1.34217729E8 * d5;

        $d68 = d27 - d5;

        d28 = d27 - $d68;

        d29 = d5 - d28;

        d30 = d4 * d5;

        $d75 = d26 * d29;

        $d69 = d25 * d28;

        $d71 = d30 - $d69;

        $d70 = d26 * d28;

        $d73 = $d71 - $d70;

        $d72 = d25 * d29;

        $d74 = $d73 - $d72;

        d31 = $d75 - $d74;

        d32 = 1.34217729E8 * d6;

        $d76 = d32 - d6;

        d33 = d32 - $d76;

        d34 = d6 - d33;

        d35 = 1.34217729E8 * d7;

        $d77 = d35 - d7;

        d36 = d35 - $d77;

        d37 = d7 - d36;

        d38 = d6 * d7;

        $d84 = d34 * d37;

        $d78 = d33 * d36;

        $d80 = d38 - $d78;

        $d79 = d34 * d36;

        $d82 = $d80 - $d79;

        $d81 = d33 * d37;

        $d83 = $d82 - $d81;

        d39 = $d84 - $d83;

        d40 = d14 + d22;

        d41 = d40 - d22;

        $d85 = d40 - d41;

        $d87 = d22 - $d85;

        $d86 = d14 - d41;

        d42 = $d87 + $d86;

        d43 = d40 + d30;

        d44 = d43 - d30;

        $d88 = d43 - d44;

        $d90 = d30 - $d88;

        $d89 = d40 - d44;

        d45 = $d90 + $d89;

        d46 = d43 + d38;

        d47 = d46 - d38;

        $d91 = d46 - d47;

        $d93 = d38 - $d91;

        $d92 = d43 - d47;

        d48 = $d93 + $d92;

        $d94 = d15 + d23;

        $d95 = $d94 + d31;

        $d96 = $d95 + d39;

        $d97 = $d96 + d42;

        $d98 = $d97 + d45;

        $d99 = $d98 + d48;

        d106 = d46 + $d99;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d106);

        if $z0 == 0 goto label1;

        $d101 = d0 * d1;

        $d100 = d2 * d3;

        $d103 = $d101 + $d100;

        $d102 = d4 * d5;

        $d105 = $d103 + $d102;

        $d104 = d6 * d7;

        d106 = $d105 + $d104;

     label1:
        return d106;
    }

    public static boolean equals(float[], float[])
    {
        float[] r0, r1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $f1 = r0[i3];

        $f0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float)>($f1, $f0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equalsIncludingNaN(float[], float[])
    {
        float[] r0, r1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $f1 = r0[i3];

        $f0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>($f1, $f0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equals(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $d1 = r0[i3];

        $d0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static boolean equalsIncludingNaN(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 == null goto label01;

        if r1 != null goto label08;

     label01:
        if r0 != null goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if r1 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = $z1 ^ $z2;

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i3 = 0;

     label10:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label12;

        $d1 = r0[i3];

        $d0 = r1[i3];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d1, $d0);

        if $z0 != 0 goto label11;

        return 0;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        return 1;
    }

    public static double[] normalizeArray(double[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        int i0, i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3, $r6, $r11, $r14;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4, $r7, $r12, $r15;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5, $r10, $r13;
        java.lang.Double $r8;
        java.lang.Integer $r9;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label01;

        $r13 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_INFINITE>;

        $r14 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

     label01:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label02;

        $r10 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NORMALIZE_NAN>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label02:
        d9 = 0.0;

        i0 = lengthof r0;

        r1 = newarray (double)[i0];

        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

        $d5 = r0[i2];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        if $z3 == 0 goto label04;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r6 = newarray (java.lang.Object)[2];

        $d8 = r0[i2];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label04:
        $d6 = r0[i2];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        if $z4 != 0 goto label05;

        $d7 = r0[i2];

        d9 = d9 + $d7;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        $b1 = d9 cmpl 0.0;

        if $b1 != 0 goto label07;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_SUMS_TO_ZERO>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label07:
        i3 = 0;

     label08:
        if i3 >= i0 goto label11;

        $d1 = r0[i3];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z2 == 0 goto label09;

        r1[i3] = #NaN;

        goto label10;

     label09:
        $d2 = r0[i3];

        $d3 = $d2 * d0;

        $d4 = $d3 / d9;

        r1[i3] = $d4;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        return r1;
    }

    public static java.lang.Object[] buildArray(org.apache.commons.math3.Field, int)
    {
        org.apache.commons.math3.Field r0;
        int i0;
        java.lang.Object[] r1, $r4;
        java.lang.Class $r2;
        java.lang.Object $r3, $r5;

        r0 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Class getRuntimeClass()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, i0);

        $r4 = (java.lang.Object[]) $r3;

        r1 = (java.lang.Object[]) $r4;

        $r5 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, $r5);

        return r1;
    }

    public static java.lang.Object[][] buildArray(org.apache.commons.math3.Field, int, int)
    {
        org.apache.commons.math3.Field r0;
        int i0, i1, i2;
        java.lang.Class $r1, $r7;
        int[] $r2;
        java.lang.Object $r3, $r6, $r8;
        java.lang.Object[][] $r4, $r9, r11;
        java.lang.Object[] $r5, r10;

        r0 := @parameter0: org.apache.commons.math3.Field;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 >= 0 goto label1;

        r10 = staticinvoke <org.apache.commons.math3.util.MathArrays: java.lang.Object[] buildArray(org.apache.commons.math3.Field,int)>(r0, 0);

        $r7 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r7, i0);

        $r9 = (java.lang.Object[][]) $r8;

        r11 = (java.lang.Object[][]) $r9;

        goto label3;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Class getRuntimeClass()>();

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $r2[1] = i1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r1, $r2);

        $r4 = (java.lang.Object[][]) $r3;

        r11 = (java.lang.Object[][]) $r4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r5 = r11[i2];

        $r6 = interfaceinvoke r0.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r5, $r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r11;
    }

    public static double[] convolve(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException
    {
        double[] r0, r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        org.apache.commons.math3.exception.NoDataException $r3;
        double $d0, $d1, $d2, d3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i0 = lengthof r0;

        i1 = lengthof r1;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NoDataException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NoDataException: void <init>()>();

        throw $r3;

     label2:
        $i3 = i0 + i1;

        i2 = $i3 - 1;

        r2 = newarray (double)[i2];

        i8 = 0;

     label3:
        if i8 >= i2 goto label6;

        d3 = 0.0;

        $i4 = i8 + 1;

        $i5 = $i4 - i0;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i5);

        i10 = i8 - i9;

     label4:
        if i9 >= i1 goto label5;

        if i10 < 0 goto label5;

        $i6 = i10;

        i10 = i10 + -1;

        $d1 = r0[$i6];

        $i7 = i9;

        i9 = i9 + 1;

        $d0 = r1[$i7];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        goto label4;

     label5:
        r2[i8] = d3;

        i8 = i8 + 1;

        goto label3;

     label6:
        return r2;
    }

    public static void shuffle(int[], int, org.apache.commons.math3.util.MathArrays$Position)
    {
        int[] r0;
        int i0;
        org.apache.commons.math3.util.MathArrays$Position r1;
        org.apache.commons.math3.random.Well19937c $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.util.MathArrays$Position;

        $r2 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r2.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],int,org.apache.commons.math3.util.MathArrays$Position,org.apache.commons.math3.random.RandomGenerator)>(r0, i0, r1, $r2);

        return;
    }

    public static void shuffle(int[], int, org.apache.commons.math3.util.MathArrays$Position, org.apache.commons.math3.random.RandomGenerator)
    {
        int[] r0, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11;
        org.apache.commons.math3.util.MathArrays$Position r1;
        org.apache.commons.math3.random.RandomGenerator r2;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r4, $r5;
        org.apache.commons.math3.exception.MathInternalError $r6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.util.MathArrays$Position;

        r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        $r3 = <org.apache.commons.math3.util.MathArrays$3: int[] $SwitchMap$org$apache$commons$math3$util$MathArrays$Position>;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.util.MathArrays$Position: int ordinal()>();

        $i2 = $r3[$i1];

        lookupswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label06;
            default: goto label11;
        };

     label01:
        $i4 = lengthof r0;

        i6 = $i4 - 1;

     label02:
        if i6 < i0 goto label05;

        if i6 != i0 goto label03;

        i7 = i0;

        goto label04;

     label03:
        $r5 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        specialinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>(r2, i0, i6);

        i7 = virtualinvoke $r5.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

     label04:
        i8 = r0[i7];

        $i5 = r0[i6];

        r0[i7] = $i5;

        r0[i6] = i8;

        i6 = i6 + -1;

        goto label02;

     label05:
        goto label12;

     label06:
        i9 = 0;

     label07:
        if i9 > i0 goto label10;

        if i9 != i0 goto label08;

        i10 = i0;

        goto label09;

     label08:
        $r4 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        specialinvoke $r4.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>(r2, i9, i0);

        i10 = virtualinvoke $r4.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

     label09:
        i11 = r0[i10];

        $i3 = r0[i9];

        r0[i10] = $i3;

        r0[i9] = i11;

        i9 = i9 + 1;

        goto label07;

     label10:
        goto label12;

     label11:
        $r6 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r6;

     label12:
        return;
    }

    public static void shuffle(int[], org.apache.commons.math3.random.RandomGenerator)
    {
        int[] r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.util.MathArrays$Position $r2;

        r0 := @parameter0: int[];

        r1 := @parameter1: org.apache.commons.math3.random.RandomGenerator;

        $r2 = <org.apache.commons.math3.util.MathArrays$Position: org.apache.commons.math3.util.MathArrays$Position TAIL>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],int,org.apache.commons.math3.util.MathArrays$Position,org.apache.commons.math3.random.RandomGenerator)>(r0, 0, $r2, r1);

        return;
    }

    public static void shuffle(int[])
    {
        int[] r0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @parameter0: int[];

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],org.apache.commons.math3.random.RandomGenerator)>(r0, $r1);

        return;
    }

    public static int[] natural(int)
    {
        int i0;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] sequence(int,int,int)>(i0, 0, 1);

        return $r0;
    }

    public static int[] sequence(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, i5;
        int[] r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 = newarray (int)[i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i3 = i5 * i2;

        $i4 = i1 + $i3;

        r0[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static boolean verifyValues(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>(r0, i0, i1, 0);

        return $z0;
    }

    public static boolean verifyValues(double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r6, $r9, $r13;
        java.lang.Integer $r3, $r4, $r7, $r10;
        org.apache.commons.math3.exception.NotPositiveException $r5, $r8;
        org.apache.commons.math3.exception.NullArgumentException $r11;
        java.lang.Object[] $r12;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        $r11 = new org.apache.commons.math3.exception.NullArgumentException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r11;

     label1:
        if i0 >= 0 goto label2;

        $r8 = new org.apache.commons.math3.exception.NotPositiveException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats START_POSITION>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r8.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r9, $r10);

        throw $r8;

     label2:
        if i1 >= 0 goto label3;

        $r5 = new org.apache.commons.math3.exception.NotPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label3:
        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label4;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SUBARRAY_ENDS_AFTER_ARRAY_END>;

        $i4 = i0 + i1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $i5 = lengthof r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label4:
        if i1 != 0 goto label5;

        if z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public static boolean verifyValues(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] r0, r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],double[],int,int,boolean)>(r0, r1, i0, i1, 0);

        return $z0;
    }

    public static boolean verifyValues(double[], double[], int, int, boolean) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, i9;
        boolean z0, $z1, $z2, $z3, z4;
        double d0;
        org.apache.commons.math3.exception.NullArgumentException $r2;
        java.lang.Object[] $r3, $r6, $r9, $r14, $r19;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4, $r7, $r10, $r15, $r20;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5, $r8, $r13, $r18;
        byte $b5, $b6;
        java.lang.Integer $r11, $r17, $r21;
        java.lang.Double $r12, $r16;
        org.apache.commons.math3.exception.DimensionMismatchException $r22;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        if r1 == null goto label01;

        if r0 != null goto label02;

     label01:
        $r2 = new org.apache.commons.math3.exception.NullArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INPUT_ARRAY>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label02:
        $i3 = lengthof r1;

        $i2 = lengthof r0;

        if $i3 == $i2 goto label03;

        $r22 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i8 = lengthof r1;

        $i7 = lengthof r0;

        specialinvoke $r22.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i8, $i7);

        throw $r22;

     label03:
        z4 = 0;

        i9 = i0;

     label04:
        $i4 = i0 + i1;

        if i9 >= $i4 goto label09;

        d0 = r1[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z2 == 0 goto label05;

        $r18 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r20 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NAN_ELEMENT_AT_INDEX>;

        $r19 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r19[0] = $r21;

        specialinvoke $r18.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r20, $r19);

        throw $r18;

     label05:
        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z3 == 0 goto label06;

        $r13 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_ARRAY_ELEMENT>;

        $r14 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r14[1] = $r17;

        specialinvoke $r13.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

     label06:
        $b5 = d0 cmpg 0.0;

        if $b5 >= 0 goto label07;

        $r8 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NEGATIVE_ELEMENT_AT_INDEX>;

        $r9 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r9[1] = $r12;

        specialinvoke $r8.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label07:
        if z4 != 0 goto label08;

        $b6 = d0 cmpl 0.0;

        if $b6 <= 0 goto label08;

        z4 = 1;

     label08:
        i9 = i9 + 1;

        goto label04;

     label09:
        if z4 != 0 goto label10;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats WEIGHT_AT_LEAST_ONE_NON_ZERO>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label10:
        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean verifyValues(double[],int,int,boolean)>(r0, i0, i1, z0);

        return $z1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.util.MathArrays: int SPLIT_FACTOR> = 134217729;

        return;
    }
}
