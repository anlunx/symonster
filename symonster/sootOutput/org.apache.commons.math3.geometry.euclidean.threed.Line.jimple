public class org.apache.commons.math3.geometry.euclidean.threed.Line extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Embedding
{
    private static final double DEFAULT_TOLERANCE;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero;
    private final double tolerance;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1, r2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance> = d0;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r2;

        $r3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero> = $r3;

        $d0 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance> = $d0;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, 1.0E-10);

        return;
    }

    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3, $r4, $r5;
        double d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>(r1);

        d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNormSq()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label1:
        $r4 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d2 = 1.0 / $d1;

        specialinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d2, r3);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r4;

        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r3);

        $d4 = neg $d3;

        $d5 = $d4 / d0;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r1, $d5, r3);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero> = $r5;

        return;
    }

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        return $d0;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Line revert()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Line;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line)>(r0);

        $r3 = $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction> = $r4;

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        return $r1;
    }

    public double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2, $r3, $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r2);

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        return $d0;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        double d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r3, d0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Vector r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Vector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.Vector1D;

        $r3 = (org.apache.commons.math3.geometry.euclidean.threed.Vector3D) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3);

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: void <init>(double)>($d0);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.euclidean.oned.Vector1D) r1;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.Vector1D: double getX()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double)>($d0);

        return $r3;
    }

    public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;
        byte $b0, $b1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r2 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3, $r2);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $d3 = 3.141592653589793 - $d2;

        $b1 = d0 cmpl $d3;

        if $b1 <= 0 goto label2;

     label1:
        $r4 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double $d0, $d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1);

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, $r4, $r5, $r6, $r7;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r4);

        $r5 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r6);

        $d1 = neg $d0;

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, r2, $d1, $r7);

        $d2 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        return $d2;
    }

    public double distance(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r3, $r4, $r5, $r6, $r7, $r8;
        double d0, d1, $d2, $d3, $d4, $d5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        r2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4, $r3);

        d0 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b0 = d0 cmpg $d2;

        if $b0 >= 0 goto label1;

        $r8 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r8);

        return $d5;

     label1:
        $r6 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r5);

        $d3 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r2);

        d1 = $d3 / d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        return $d4;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        byte $b0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $r3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        d0 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d4 = d0 * d0;

        d1 = 1.0 - $d4;

        $d5 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $b0 = d1 cmpg $d5;

        if $b0 >= 0 goto label1;

        $r12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        return $r12;

     label1:
        $r6 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $r5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        r2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r5);

        $r7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r7);

        $r8 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        d3 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r8);

        $r9 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        $d6 = d3 * d0;

        $d7 = d2 - $d6;

        $d8 = $d7 / d1;

        $r10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(1.0, $r11, $d8, $r10);

        return $r9;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0, r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line)>(r1);

        $z0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r2);

        if $z0 == 0 goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.SubLine wholeLine()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.euclidean.threed.SubLine $r1;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        $r2 = new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Line,org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)>(r0, $r2);

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.threed.Line: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
