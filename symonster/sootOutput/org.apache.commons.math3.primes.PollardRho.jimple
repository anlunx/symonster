class org.apache.commons.math3.primes.PollardRho extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.primes.PollardRho r0;

        r0 := @this: org.apache.commons.math3.primes.PollardRho;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List primeFactors(int)
    {
        int i0, $i1, i2, i3;
        java.util.ArrayList $r1;
        boolean $z0;
        java.lang.Integer $r2, $r3, $r4;

        i2 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i3 = staticinvoke <org.apache.commons.math3.primes.SmallPrimes: int smallTrialDivision(int,java.util.List)>(i2, $r1);

        if 1 != i3 goto label1;

        return $r1;

     label1:
        $z0 = staticinvoke <org.apache.commons.math3.primes.SmallPrimes: boolean millerRabinPrimeTest(int)>(i3);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r1;

     label2:
        i0 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int rhoBrent(int)>(i3);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i1 = i3 / i0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r1;
    }

    static int rhoBrent(int)
    {
        int i0, i3, $i7, $i8, $i15, $i16, $i21, $i22, $i23, $i24, i31, i32, i33, i34, i36, i37, i38, i39, i40;
        long l4, l5, l6, $l9, $l10, $l11, $l12, $l13, $l14, $l18, $l19, $l20, $l25, $l26, $l27, $l28, $l29, $l30, l35;
        byte $b17;

        i0 := @parameter0: int;

        i31 = <org.apache.commons.math3.primes.SmallPrimes: int PRIMES_LAST>;

        i32 = 2;

        i33 = 1;

     label1:
        i3 = i32;

        i34 = 0;

     label2:
        if i34 >= i33 goto label3;

        $l26 = (long) i32;

        $l25 = (long) i32;

        l35 = $l26 * $l25;

        $l27 = (long) i31;

        $l29 = l35 + $l27;

        $l28 = (long) i0;

        $l30 = $l29 % $l28;

        i32 = (int) $l30;

        i34 = i34 + 1;

        goto label2;

     label3:
        i36 = 0;

     label4:
        $i7 = i33 - i36;

        i37 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(25, $i7);

        i38 = 1;

        i39 = -3;

     label5:
        if i39 >= i37 goto label8;

        $l10 = (long) i32;

        $l9 = (long) i32;

        l4 = $l10 * $l9;

        $l11 = (long) i31;

        $l13 = l4 + $l11;

        $l12 = (long) i0;

        $l14 = $l13 % $l12;

        i32 = (int) $l14;

        $i15 = i3 - i32;

        $i16 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i15);

        l5 = (long) $i16;

        $b17 = 0L cmp l5;

        if $b17 != 0 goto label6;

        $i24 = <org.apache.commons.math3.primes.SmallPrimes: int PRIMES_LAST>;

        i31 = i31 + $i24;

        i36 = -25;

        i32 = 2;

        i33 = 1;

        goto label8;

     label6:
        $l18 = (long) i38;

        l6 = l5 * $l18;

        $l19 = (long) i0;

        $l20 = l6 % $l19;

        i38 = (int) $l20;

        if 0 != i38 goto label7;

        $i21 = (int) l5;

        $i22 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i21);

        $i23 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int gcdPositive(int,int)>($i22, i0);

        return $i23;

     label7:
        i39 = i39 + 1;

        goto label5;

     label8:
        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>(i38);

        i40 = staticinvoke <org.apache.commons.math3.primes.PollardRho: int gcdPositive(int,int)>($i8, i0);

        if 1 == i40 goto label9;

        return i40;

     label9:
        i36 = i36 + 25;

        if i36 < i33 goto label4;

        i33 = 2 * i33;

        goto label1;
    }

    static int gcdPositive(int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8, i9, i10;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        if i6 != 0 goto label1;

        return i7;

     label1:
        if i7 != 0 goto label2;

        return i6;

     label2:
        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i6);

        i8 = i6 >> i0;

        i1 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i7);

        i9 = i7 >> i1;

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

     label3:
        if i8 == i9 goto label4;

        i3 = i8 - i9;

        i9 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i8, i9);

        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>(i3);

        $i5 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i10);

        i8 = i10 >> $i5;

        goto label3;

     label4:
        $i4 = i8 << i2;

        return $i4;
    }
}
