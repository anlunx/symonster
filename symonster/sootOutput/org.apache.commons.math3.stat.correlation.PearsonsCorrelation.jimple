public class org.apache.commons.math3.stat.correlation.PearsonsCorrelation extends java.lang.Object
{
    private final org.apache.commons.math3.linear.RealMatrix correlationMatrix;
    private final int nObs;

    public void <init>()
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix> = null;

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs> = 0;

        return;
    }

    public void <init>(double[][])
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        double[][] r1;
        org.apache.commons.math3.linear.BlockRealMatrix $r2;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: double[][];

        $r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: void <init>(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs> = $i0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix)>(r1);

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix> = $r2;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.correlation.Covariance)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.stat.correlation.Covariance r1;
        org.apache.commons.math3.linear.RealMatrix r2, $r3;
        int $i0;
        org.apache.commons.math3.exception.NullArgumentException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.stat.correlation.Covariance;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<org.apache.commons.math3.stat.correlation.Covariance: org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()>();

        if r2 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.NullArgumentException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats COVARIANCE_MATRIX>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<org.apache.commons.math3.stat.correlation.Covariance: int getN()>();

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs> = $i0;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix covarianceToCorrelation(org.apache.commons.math3.linear.RealMatrix)>(r2);

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix> = $r3;

        return;
    }

    public void <init>(org.apache.commons.math3.linear.RealMatrix, int)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix r1, $r2;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs> = i0;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix covarianceToCorrelation(org.apache.commons.math3.linear.RealMatrix)>(r1);

        r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix> = $r2;

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getCorrelationMatrix()
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        $r1 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix>;

        return $r1;
    }

    public org.apache.commons.math3.linear.RealMatrix getCorrelationStandardErrors()
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        int i0, $i1, $i2, i3, i4;
        double[][] r1;
        double d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.commons.math3.linear.RealMatrix $r2, $r4;
        org.apache.commons.math3.linear.BlockRealMatrix $r3;
        double[] $r5;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        $r2 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix>;

        i0 = interfaceinvoke $r2.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r1 = newmultiarray (double)[i0][i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $r4 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix>;

        d0 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i3, i4);

        $r5 = r1[i3];

        $d1 = d0 * d0;

        $d3 = 1.0 - $d1;

        $i1 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs>;

        $i2 = $i1 - 2;

        $d2 = (double) $i2;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        $r5[i4] = $d5;

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix getCorrelationPValues()
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        double[][] r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        org.apache.commons.math3.distribution.TDistribution $r3;
        org.apache.commons.math3.linear.RealMatrix $r4, $r6;
        org.apache.commons.math3.linear.BlockRealMatrix $r5;
        double[] $r7, $r8;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        $r3 = new org.apache.commons.math3.distribution.TDistribution;

        $i1 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs>;

        $i2 = $i1 - 2;

        $d2 = (double) $i2;

        specialinvoke $r3.<org.apache.commons.math3.distribution.TDistribution: void <init>(double)>($d2);

        $r4 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix>;

        i0 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label6;

        i6 = 0;

     label2:
        if i6 >= i0 goto label5;

        if i5 != i6 goto label3;

        $r8 = r2[i5];

        $r8[i6] = 0.0;

        goto label4;

     label3:
        $r6 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix correlationMatrix>;

        d0 = interfaceinvoke $r6.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i6);

        $i3 = r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: int nObs>;

        $i4 = $i3 - 2;

        $d5 = (double) $i4;

        $d3 = d0 * d0;

        $d4 = 1.0 - $d3;

        $d6 = $d5 / $d4;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d6);

        $d8 = d0 * $d7;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $r7 = r2[i5];

        $d9 = neg d1;

        $d10 = virtualinvoke $r3.<org.apache.commons.math3.distribution.TDistribution: double cumulativeProbability(double)>($d9);

        $d11 = 2.0 * $d10;

        $r7[i6] = $d11;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $r5 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r2);

        return $r5;
    }

    public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, i2;
        double d0;
        org.apache.commons.math3.linear.BlockRealMatrix $r3;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: void checkSufficientData(org.apache.commons.math3.linear.RealMatrix)>(r1);

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i0, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i1);

        $r5 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[] getColumn(int)>(i2);

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: double correlation(double[],double[])>($r4, $r5);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, d0);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i1, d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i1 = i1 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(double[][])
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        double[][] r1;
        org.apache.commons.math3.linear.BlockRealMatrix $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: double[][];

        $r2 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(double[][])>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.stat.correlation.PearsonsCorrelation: org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r3;
    }

    public double correlation(double[], double[])
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        double[] r1, r2;
        org.apache.commons.math3.stat.regression.SimpleRegression $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r5;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        java.lang.Integer $r8, $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r4 = new org.apache.commons.math3.stat.regression.SimpleRegression;

        specialinvoke $r4.<org.apache.commons.math3.stat.regression.SimpleRegression: void <init>()>();

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, $i5);

        throw $r10;

     label1:
        $i2 = lengthof r1;

        if $i2 >= 2 goto label2;

        $r5 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r6 = newarray (java.lang.Object)[2];

        $i4 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label2:
        i7 = 0;

     label3:
        $i3 = lengthof r1;

        if i7 >= $i3 goto label4;

        $d2 = r1[i7];

        $d1 = r2[i7];

        virtualinvoke $r4.<org.apache.commons.math3.stat.regression.SimpleRegression: void addData(double,double)>($d2, $d1);

        i7 = i7 + 1;

        goto label3;

     label4:
        $d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.regression.SimpleRegression: double getR()>();

        return $d0;
    }

    public org.apache.commons.math3.linear.RealMatrix covarianceToCorrelation(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, i2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.linear.BlockRealMatrix $r3;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = new org.apache.commons.math3.linear.BlockRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.BlockRealMatrix: void <init>(int,int)>(i0, i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d2);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, 1.0);

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $d3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i2);

        $d4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i2, i2);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d4);

        $d6 = d0 * $d5;

        d1 = $d3 / $d6;

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i2, d1);

        interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i1, d1);

        i2 = i2 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r3;
    }

    private void checkSufficientData(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.stat.correlation.PearsonsCorrelation r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.correlation.PearsonsCorrelation;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i0 < 2 goto label1;

        if i1 >= 2 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_ROWS_AND_COLUMNS>;

        $r3 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r6;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        return;
    }
}
