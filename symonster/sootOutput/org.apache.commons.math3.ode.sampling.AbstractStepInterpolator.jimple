public abstract class org.apache.commons.math3.ode.sampling.AbstractStepInterpolator extends java.lang.Object implements org.apache.commons.math3.ode.sampling.StepInterpolator
{
    protected double h;
    protected double[] currentState;
    protected double interpolatedTime;
    protected double[] interpolatedState;
    protected double[] interpolatedDerivatives;
    protected double[] interpolatedPrimaryState;
    protected double[] interpolatedPrimaryDerivatives;
    protected double[][] interpolatedSecondaryState;
    protected double[][] interpolatedSecondaryDerivatives;
    private double globalPreviousTime;
    private double globalCurrentTime;
    private double softPreviousTime;
    private double softCurrentTime;
    private boolean finalized;
    private boolean forward;
    private boolean dirtyState;
    private org.apache.commons.math3.ode.EquationsMapper primaryMapper;
    private org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers;

    protected void <init>()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = null;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>(-1);

        return;
    }

    protected void <init>(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[])
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] r1;
        boolean z0;
        org.apache.commons.math3.ode.EquationsMapper r2;
        org.apache.commons.math3.ode.EquationsMapper[] r3, $r6;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.commons.math3.ode.EquationsMapper;

        r3 := @parameter3: org.apache.commons.math3.ode.EquationsMapper[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = r1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = z0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = r2;

        if r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (org.apache.commons.math3.ode.EquationsMapper[]) $r4;

     label2:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r6;

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>($i0);

        return;
    }

    protected void <init>(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        double[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r29, $r32, $r34, $r37;
        java.lang.Object $r4, $r7, $r10, $r13, $r16, $r26, $r31, $r36;
        double[][] $r18, $r19, $r20, $r21, $r22, $r28, $r30, $r33, $r35;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.ode.EquationsMapper $r23;
        org.apache.commons.math3.ode.EquationsMapper[] $r24, $r25, $r38;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r1 := @parameter0: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d1 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = $d1;

        $d2 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d2;

        $d3 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d3;

        $d4 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d4;

        $d5 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = $d5;

        $r2 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r2 != null goto label1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = null;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>(-1);

        goto label3;

     label1:
        $r3 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r5;

        $r6 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (double[]) $r7;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = $r8;

        $r9 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (double[]) $r10;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = $r11;

        $r12 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Object clone()>();

        $r14 = (double[]) $r13;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = $r14;

        $r15 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Object clone()>();

        $r17 = (double[]) $r16;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = $r17;

        $r18 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $i0 = lengthof $r18;

        $r19 = newarray (double[])[$i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r19;

        $r20 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $i1 = lengthof $r20;

        $r21 = newarray (double[])[$i1];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r21;

        i3 = 0;

     label2:
        $r22 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $i2 = lengthof $r22;

        if i3 >= $i2 goto label3;

        $r30 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r28 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r29 = $r28[i3];

        $r31 = virtualinvoke $r29.<java.lang.Object: java.lang.Object clone()>();

        $r32 = (double[]) $r31;

        $r30[i3] = $r32;

        $r35 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r33 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r34 = $r33[i3];

        $r36 = virtualinvoke $r34.<java.lang.Object: java.lang.Object clone()>();

        $r37 = (double[]) $r36;

        $r35[i3] = $r37;

        i3 = i3 + 1;

        goto label2;

     label3:
        $z0 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = $z0;

        $z1 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z1;

        $z2 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = $z2;

        $r23 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r23;

        $r24 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        if $r24 != null goto label4;

        $r38 = null;

        goto label5;

     label4:
        $r25 = r1.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.Object clone()>();

        $r38 = (org.apache.commons.math3.ode.EquationsMapper[]) $r26;

     label5:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r38;

        return;
    }

    private void allocateInterpolatedArrays(int)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        double[] $r1, $r2, $r4, $r6, $r16, $r20;
        org.apache.commons.math3.ode.EquationsMapper $r3, $r5, $r14, $r18;
        org.apache.commons.math3.ode.EquationsMapper[] $r7, $r8, $r10, $r12, $r13, $r17;
        double[][] $r9, $r11, $r15, $r19, $r21, $r22, $r23, $r24;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = null;

        $r23 = (double[][]) null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r23;

        $r24 = (double[][]) null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r24;

        goto label4;

     label1:
        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState> = $r1;

        $r2 = newarray (double)[i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives> = $r2;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState> = $r4;

        $r5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $i2 = virtualinvoke $r5.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r6 = newarray (double)[$i2];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives> = $r6;

        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        if $r7 != null goto label2;

        $r21 = (double[][]) null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r21;

        $r22 = (double[][]) null;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r22;

        goto label4;

     label2:
        $r8 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i3 = lengthof $r8;

        $r9 = newarray (double[])[$i3];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState> = $r9;

        $r10 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i4 = lengthof $r10;

        $r11 = newarray (double[])[$i4];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives> = $r11;

        i8 = 0;

     label3:
        $r12 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i5 = lengthof $r12;

        if i8 >= $i5 goto label4;

        $r15 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r13 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r14 = $r13[i8];

        $i6 = virtualinvoke $r14.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r16 = newarray (double)[$i6];

        $r15[i8] = $r16;

        $r19 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r17 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r18 = $r17[i8];

        $i7 = virtualinvoke $r18.<org.apache.commons.math3.ode.EquationsMapper: int getDimension()>();

        $r20 = newarray (double)[$i7];

        $r19[i8] = $r20;

        i8 = i8 + 1;

        goto label3;

     label4:
        return;
    }

    protected void reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[])
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] r1;
        boolean z0;
        org.apache.commons.math3.ode.EquationsMapper r2;
        org.apache.commons.math3.ode.EquationsMapper[] r3, $r5;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.commons.math3.ode.EquationsMapper;

        r3 := @parameter3: org.apache.commons.math3.ode.EquationsMapper[];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = r1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = z0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = r2;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (org.apache.commons.math3.ode.EquationsMapper[]) $r4;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r5;

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>($i0);

        return;
    }

    public org.apache.commons.math3.ode.sampling.StepInterpolator copy() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        org.apache.commons.math3.ode.sampling.StepInterpolator $r1;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void finalizeStep()>();

        $r1 = virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()>();

        return $r1;
    }

    protected abstract org.apache.commons.math3.ode.sampling.StepInterpolator doCopy();

    public void shift()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d1;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d2;

        return;
    }

    public void storeTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = d0;

        $d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d1;

        $d3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        $d4 = $d3 - $d2;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d4;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void setInterpolatedTime(double)>(d0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 0;

        return;
    }

    public void setSoftPreviousTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = d0;

        return;
    }

    public void setSoftCurrentTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = d0;

        return;
    }

    public double getGlobalPreviousTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        return $d0;
    }

    public double getGlobalCurrentTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        return $d0;
    }

    public double getPreviousTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        return $d0;
    }

    public double getCurrentTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        return $d0;
    }

    public double getInterpolatedTime()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        return $d0;
    }

    public void setInterpolatedTime(double)
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = d0;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        return;
    }

    public boolean isForward()
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        return $z0;
    }

    protected abstract void computeInterpolatedStateAndDerivatives(double, double) throws org.apache.commons.math3.exception.MaxCountExceededException;

    private void evaluateCompleteInterpolatedState() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState>;

        if $z0 == 0 goto label3;

        $d3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        d0 = $d3 - $d2;

        $d4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        $b0 = $d4 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d8 = 0.0;

        goto label2;

     label1:
        $d5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        $d7 = $d5 - d0;

        $d6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        $d8 = $d7 / $d6;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void computeInterpolatedStateAndDerivatives(double,double)>($d8, d0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 0;

     label3:
        return;
    }

    public double[] getInterpolatedState() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1, $r2, $r4;
        org.apache.commons.math3.ode.EquationsMapper $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r2, $r1);

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryState>;

        return $r4;
    }

    public double[] getInterpolatedDerivatives() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        double[] $r1, $r2, $r4;
        org.apache.commons.math3.ode.EquationsMapper $r3;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        virtualinvoke $r3.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r2, $r1);

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedPrimaryDerivatives>;

        return $r4;
    }

    public double[] getInterpolatedSecondaryState(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int i0;
        org.apache.commons.math3.ode.EquationsMapper[] $r1;
        double[][] $r2, $r6;
        double[] $r3, $r4, $r7;
        org.apache.commons.math3.ode.EquationsMapper $r5;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r5 = $r1[i0];

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedState>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r3 = $r2[i0];

        virtualinvoke $r5.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r4, $r3);

        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryState>;

        $r7 = $r6[i0];

        return $r7;
    }

    public double[] getInterpolatedSecondaryDerivatives(int) throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        int i0;
        org.apache.commons.math3.ode.EquationsMapper[] $r1;
        double[][] $r2, $r6;
        double[] $r3, $r4, $r7;
        org.apache.commons.math3.ode.EquationsMapper $r5;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void evaluateCompleteInterpolatedState()>();

        $r1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r5 = $r1[i0];

        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] interpolatedDerivatives>;

        $r2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r3 = $r2[i0];

        virtualinvoke $r5.<org.apache.commons.math3.ode.EquationsMapper: void extractEquationData(double[],double[])>($r4, $r3);

        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[][] interpolatedSecondaryDerivatives>;

        $r7 = $r6[i0];

        return $r7;
    }

    public final void finalizeStep() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void doFinalize()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 1;

     label1:
        return;
    }

    protected void doFinalize() throws org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        return;
    }

    public abstract void writeExternal(java.io.ObjectOutput) throws java.io.IOException;

    public abstract void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;

    protected void writeBaseExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        java.io.ObjectOutput r1;
        org.apache.commons.math3.ode.EquationsMapper r2, $r5;
        double[] $r3, $r4, $r7, $r8, $r9;
        int $i0, $i1, $i2, i3, i4, i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        org.apache.commons.math3.ode.EquationsMapper[] $r6, r14;
        org.apache.commons.math3.exception.MaxCountExceededException $r10;
        java.io.IOException $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r1 := @parameter0: java.io.ObjectOutput;

        $r3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r3 != null goto label01;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>(-1);

        goto label02;

     label01:
        $r4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $i0 = lengthof $r4;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i0);

     label02:
        $d0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        $d1 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d1);

        $d2 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d2);

        $d3 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d3);

        $d4 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d4);

        $z0 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeBoolean(boolean)>($z0);

        $r5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i1 = lengthof $r6;

        interfaceinvoke r1.<java.io.ObjectOutput: void write(int)>($i1);

        r14 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        i3 = lengthof r14;

        i4 = 0;

     label03:
        if i4 >= i3 goto label04;

        r2 = r14[i4];

        interfaceinvoke r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>(r2);

        i4 = i4 + 1;

        goto label03;

     label04:
        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        if $r7 == null goto label06;

        i5 = 0;

     label05:
        $r8 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $i2 = lengthof $r8;

        if i5 >= $i2 goto label06;

        $r9 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $d6 = $r9[i5];

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d6);

        i5 = i5 + 1;

        goto label05;

     label06:
        $d5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d5);

     label07:
        virtualinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void finalizeStep()>();

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.String getLocalizedMessage()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        virtualinvoke $r11.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r10);

        throw $r11;

     label10:
        return;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label07 to label08 with label09;
    }

    protected double readBaseExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math3.ode.sampling.AbstractStepInterpolator r0;
        java.io.ObjectInput r1;
        int i0, $i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0;
        java.lang.Object $r2, $r10;
        org.apache.commons.math3.ode.EquationsMapper $r3, $r11;
        org.apache.commons.math3.ode.EquationsMapper[] $r4, $r5, $r9;
        double[] $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.ode.sampling.AbstractStepInterpolator;

        r1 := @parameter0: java.io.ObjectInput;

        i0 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        $d0 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalPreviousTime> = $d0;

        $d1 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double globalCurrentTime> = $d1;

        $d2 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softPreviousTime> = $d2;

        $d3 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double softCurrentTime> = $d3;

        $d4 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double h> = $d4;

        $z0 = interfaceinvoke r1.<java.io.ObjectInput: boolean readBoolean()>();

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean forward> = $z0;

        $r2 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r3 = (org.apache.commons.math3.ode.EquationsMapper) $r2;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper primaryMapper> = $r3;

        $i1 = interfaceinvoke r1.<java.io.ObjectInput: int read()>();

        $r4 = newarray (org.apache.commons.math3.ode.EquationsMapper)[$i1];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers> = $r4;

        i4 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $i2 = lengthof $r5;

        if i4 >= $i2 goto label2;

        $r9 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers>;

        $r10 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r11 = (org.apache.commons.math3.ode.EquationsMapper) $r10;

        $r9[i4] = $r11;

        i4 = i4 + 1;

        goto label1;

     label2:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean dirtyState> = 1;

        if i0 >= 0 goto label3;

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = null;

        goto label5;

     label3:
        $r6 = newarray (double)[i0];

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState> = $r6;

        i5 = 0;

     label4:
        $r7 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $i3 = lengthof $r7;

        if i5 >= $i3 goto label5;

        $r8 = r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double[] currentState>;

        $d6 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        $r8[i5] = $d6;

        i5 = i5 + 1;

        goto label4;

     label5:
        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: double interpolatedTime> = #NaN;

        specialinvoke r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: void allocateInterpolatedArrays(int)>(i0);

        r0.<org.apache.commons.math3.ode.sampling.AbstractStepInterpolator: boolean finalized> = 1;

        $d5 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        return $d5;
    }
}
