public class org.apache.commons.math3.geometry.spherical.oned.LimitAngle extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Hyperplane
{
    private org.apache.commons.math3.geometry.spherical.oned.S1Point location;
    private boolean direct;
    private final double tolerance;

    public void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point, boolean, double)
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.S1Point r1;
        boolean z0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.oned.S1Point;

        z0 := @parameter1: boolean;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point location> = r1;

        r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct> = z0;

        r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: double tolerance> = d0;

        return;
    }

    public org.apache.commons.math3.geometry.spherical.oned.LimitAngle copySelf()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        return r0;
    }

    public double getOffset(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.Point r1;
        double d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) r1;

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point location>;

        $d2 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        d0 = $d1 - $d2;

        $z0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct>;

        if $z0 == 0 goto label1;

        $d3 = d0;

        goto label2;

     label1:
        $d3 = neg d0;

     label2:
        return $d3;
    }

    public boolean isDirect()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $z0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct>;

        return $z0;
    }

    public org.apache.commons.math3.geometry.spherical.oned.LimitAngle getReverse()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0, $r1;
        boolean $z0, $z1;
        double $d0;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = new org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point location>;

        $z0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: void <init>(org.apache.commons.math3.geometry.spherical.oned.S1Point,boolean,double)>($r2, $z1, $d0);

        return $r1;
    }

    public org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = new org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r0, null);

        return $r1;
    }

    public org.apache.commons.math3.geometry.spherical.oned.ArcsSet wholeSpace()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(double)>($d0);

        return $r1;
    }

    public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0, $r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $z1 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct>;

        $r2 = (org.apache.commons.math3.geometry.spherical.oned.LimitAngle) r1;

        $z0 = $r2.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: boolean direct>;

        $z2 = $z1 ^ $z0;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point location>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.S1Point location>;

        return $r2;
    }

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: double tolerance>;

        return $d0;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.ArcsSet wholeSpace()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0;
        org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()
    {
        org.apache.commons.math3.geometry.spherical.oned.LimitAngle r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.oned.LimitAngle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.oned.LimitAngle: org.apache.commons.math3.geometry.spherical.oned.LimitAngle copySelf()>();

        return $r1;
    }
}
