class org.apache.commons.math3.util.FastMathCalc extends java.lang.Object
{
    private static final long HEX_40000000;
    private static final double[] FACT;
    private static final double[][] LN_SPLIT_COEF;
    private static final java.lang.String TABLE_START_DECL;
    private static final java.lang.String TABLE_END_DECL;

    private void <init>()
    {
        org.apache.commons.math3.util.FastMathCalc r0;

        r0 := @this: org.apache.commons.math3.util.FastMathCalc;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void buildSinCosTables(double[], double[], double[], double[], int, double[], double[])
    {
        double[] r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d38, $d39, $d41, $d42, d43;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        i0 := @parameter4: int;

        r4 := @parameter5: double[];

        r5 := @parameter6: double[];

        r6 = newarray (double)[2];

        i18 = 0;

     label1:
        if i18 >= 7 goto label2;

        $d36 = (double) i18;

        d43 = $d36 / 8.0;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: double slowSin(double,double[])>(d43, r6);

        $d38 = r6[0];

        r0[i18] = $d38;

        $d39 = r6[1];

        r1[i18] = $d39;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: double slowCos(double,double[])>(d43, r6);

        $d41 = r6[0];

        r2[i18] = $d41;

        $d42 = r6[1];

        r3[i18] = $d42;

        i18 = i18 + 1;

        goto label1;

     label2:
        i19 = 7;

     label3:
        if i19 >= i0 goto label6;

        r9 = newarray (double)[2];

        r10 = newarray (double)[2];

        r11 = newarray (double)[2];

        r7 = newarray (double)[2];

        r8 = newarray (double)[2];

        $i1 = i19 & 1;

        if $i1 != 0 goto label4;

        $i14 = i19 / 2;

        $d22 = r0[$i14];

        r9[0] = $d22;

        $i15 = i19 / 2;

        $d23 = r1[$i15];

        r9[1] = $d23;

        $i16 = i19 / 2;

        $d24 = r2[$i16];

        r10[0] = $d24;

        $i17 = i19 / 2;

        $d25 = r3[$i17];

        r10[1] = $d25;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r10, r6);

        $d26 = r6[0];

        $d27 = $d26 * 2.0;

        r0[i19] = $d27;

        $d28 = r6[1];

        $d29 = $d28 * 2.0;

        r1[i19] = $d29;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r10, r11);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r9, r8);

        $d30 = r8[0];

        $d31 = neg $d30;

        r8[0] = $d31;

        $d32 = r8[1];

        $d33 = neg $d32;

        r8[1] = $d33;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r11, r8, r6);

        $d34 = r6[0];

        r2[i19] = $d34;

        $d35 = r6[1];

        r3[i19] = $d35;

        goto label5;

     label4:
        $i2 = i19 / 2;

        $d6 = r0[$i2];

        r9[0] = $d6;

        $i3 = i19 / 2;

        $d7 = r1[$i3];

        r9[1] = $d7;

        $i4 = i19 / 2;

        $d8 = r2[$i4];

        r10[0] = $d8;

        $i5 = i19 / 2;

        $d9 = r3[$i5];

        r10[1] = $d9;

        $i6 = i19 / 2;

        $i7 = $i6 + 1;

        $d10 = r0[$i7];

        r11[0] = $d10;

        $i8 = i19 / 2;

        $i9 = $i8 + 1;

        $d11 = r1[$i9];

        r11[1] = $d11;

        $i10 = i19 / 2;

        $i11 = $i10 + 1;

        $d12 = r2[$i11];

        r7[0] = $d12;

        $i12 = i19 / 2;

        $i13 = $i12 + 1;

        $d13 = r3[$i13];

        r7[1] = $d13;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r7, r8);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r11, r6);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r6, r8, r6);

        $d14 = r6[0];

        r0[i19] = $d14;

        $d15 = r6[1];

        r1[i19] = $d15;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r10, r7, r6);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r9, r11, r8);

        $d16 = r8[0];

        $d17 = neg $d16;

        r8[0] = $d17;

        $d18 = r8[1];

        $d19 = neg $d18;

        r8[1] = $d19;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r6, r8, r6);

        $d20 = r6[0];

        r2[i19] = $d20;

        $d21 = r6[1];

        r3[i19] = $d21;

     label5:
        i19 = i19 + 1;

        goto label3;

     label6:
        i20 = 0;

     label7:
        if i20 >= i0 goto label8;

        r12 = newarray (double)[2];

        r13 = newarray (double)[2];

        r14 = newarray (double)[2];

        $d0 = r2[i20];

        r14[0] = $d0;

        $d1 = r3[i20];

        r14[1] = $d1;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r14, r13);

        $d2 = r0[i20];

        r12[0] = $d2;

        $d3 = r1[i20];

        r12[1] = $d3;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r12, r13, r14);

        $d4 = r14[0];

        r4[i20] = $d4;

        $d5 = r14[1];

        r5[i20] = $d5;

        i20 = i20 + 1;

        goto label7;

     label8:
        return;
    }

    static double slowCos(double, double[])
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r0, r1, r2, r3, r4, $r5, $r6;
        int $i0, $i1, $i2, i3;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(d0, r1);

        r2[1] = 0.0;

        r2[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label5;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r1, r2, r4);

        $d6 = r4[0];

        r2[0] = $d6;

        $d7 = r4[1];

        r2[1] = $d7;

        $i1 = i3 & 1;

        if $i1 == 0 goto label2;

        goto label4;

     label2:
        $r6 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d8 = $r6[i3];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d8, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r4, r3);

        $i2 = i3 & 2;

        if $i2 == 0 goto label3;

        $d11 = r3[0];

        $d12 = neg $d11;

        r3[0] = $d12;

        $d13 = r3[1];

        $d14 = neg $d13;

        r3[1] = $d14;

     label3:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r2, r3, r4);

        $d9 = r4[0];

        r2[0] = $d9;

        $d10 = r4[1];

        r2[1] = $d10;

     label4:
        i3 = i3 + -1;

        goto label1;

     label5:
        if r0 == null goto label6;

        $d4 = r2[0];

        r0[0] = $d4;

        $d5 = r2[1];

        r0[1] = $d5;

     label6:
        $d2 = r2[0];

        $d1 = r2[1];

        $d3 = $d2 + $d1;

        return $d3;
    }

    static double slowSin(double, double[])
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r0, r1, r2, r3, r4, $r5, $r6;
        int $i0, $i1, $i2, i3;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(d0, r1);

        r2[1] = 0.0;

        r2[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label5;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r1, r2, r4);

        $d6 = r4[0];

        r2[0] = $d6;

        $d7 = r4[1];

        r2[1] = $d7;

        $i1 = i3 & 1;

        if $i1 != 0 goto label2;

        goto label4;

     label2:
        $r6 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d8 = $r6[i3];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d8, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r4, r3);

        $i2 = i3 & 2;

        if $i2 == 0 goto label3;

        $d11 = r3[0];

        $d12 = neg $d11;

        r3[0] = $d12;

        $d13 = r3[1];

        $d14 = neg $d13;

        r3[1] = $d14;

     label3:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r2, r3, r4);

        $d9 = r4[0];

        r2[0] = $d9;

        $d10 = r4[1];

        r2[1] = $d10;

     label4:
        i3 = i3 + -1;

        goto label1;

     label5:
        if r0 == null goto label6;

        $d4 = r2[0];

        r0[0] = $d4;

        $d5 = r2[1];

        r0[1] = $d5;

     label6:
        $d2 = r2[0];

        $d1 = r2[1];

        $d3 = $d2 + $d1;

        return $d3;
    }

    static double slowexp(double, double[])
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[] r0, r1, r2, r3, r4, $r5, $r6;
        int $i0, i1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(d0, r1);

        r2[1] = 0.0;

        r2[0] = 0.0;

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $i0 = lengthof $r5;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r1, r2, r4);

        $d6 = r4[0];

        r2[0] = $d6;

        $d7 = r4[1];

        r2[1] = $d7;

        $r6 = <org.apache.commons.math3.util.FastMathCalc: double[] FACT>;

        $d8 = $r6[i1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d8, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r4, r3);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r2, r3, r4);

        $d9 = r4[0];

        r2[0] = $d9;

        $d10 = r4[1];

        r2[1] = $d10;

        i1 = i1 + -1;

        goto label1;

     label2:
        if r0 == null goto label3;

        $d4 = r2[0];

        r0[0] = $d4;

        $d5 = r2[1];

        r0[1] = $d5;

     label3:
        $d2 = r2[0];

        $d1 = r2[1];

        $d3 = $d2 + $d1;

        return $d3;
    }

    private static void split(double, double[])
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11;
        double[] r0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $b0 = d0 cmpg 8.0E298;

        if $b0 >= 0 goto label1;

        $b1 = d0 cmpl -8.0E298;

        if $b1 <= 0 goto label1;

        d10 = d0 * 1.073741824E9;

        $d6 = d0 + d10;

        $d7 = $d6 - d10;

        r0[0] = $d7;

        $d8 = r0[0];

        $d9 = d0 - $d8;

        r0[1] = $d9;

        goto label2;

     label1:
        d11 = d0 * 9.313225746154785E-10;

        $d1 = d0 + d11;

        $d2 = $d1 - d0;

        $d3 = $d2 * 1.073741824E9;

        r0[0] = $d3;

        $d4 = r0[0];

        $d5 = d0 - $d4;

        r0[1] = $d5;

     label2:
        return;
    }

    private static void resplit(double[])
    {
        double[] r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20;
        byte $b0, $b1;

        r0 := @parameter0: double[];

        $d3 = r0[0];

        $d2 = r0[1];

        d0 = $d3 + $d2;

        $d4 = r0[0];

        $d6 = d0 - $d4;

        $d5 = r0[1];

        $d7 = $d6 - $d5;

        d1 = neg $d7;

        $b0 = d0 cmpg 8.0E298;

        if $b0 >= 0 goto label1;

        $b1 = d0 cmpl -8.0E298;

        if $b1 <= 0 goto label1;

        d19 = d0 * 1.073741824E9;

        $d14 = d0 + d19;

        $d15 = $d14 - d19;

        r0[0] = $d15;

        $d16 = r0[0];

        $d17 = d0 - $d16;

        $d18 = $d17 + d1;

        r0[1] = $d18;

        goto label2;

     label1:
        d20 = d0 * 9.313225746154785E-10;

        $d8 = d0 + d20;

        $d9 = $d8 - d0;

        $d10 = $d9 * 1.073741824E9;

        r0[0] = $d10;

        $d11 = r0[0];

        $d12 = d0 - $d11;

        $d13 = $d12 + d1;

        r0[1] = $d13;

     label2:
        return;
    }

    private static void splitMult(double[], double[], double[])
    {
        double[] r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $d1 = r0[0];

        $d0 = r1[0];

        $d2 = $d1 * $d0;

        r2[0] = $d2;

        $d4 = r0[0];

        $d3 = r1[1];

        $d8 = $d4 * $d3;

        $d6 = r0[1];

        $d5 = r1[0];

        $d7 = $d6 * $d5;

        $d12 = $d8 + $d7;

        $d10 = r0[1];

        $d9 = r1[1];

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        r2[1] = $d13;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r2);

        return;
    }

    private static void splitAdd(double[], double[], double[])
    {
        double[] r0, r1, r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        $d1 = r0[0];

        $d0 = r1[0];

        $d2 = $d1 + $d0;

        r2[0] = $d2;

        $d4 = r0[1];

        $d3 = r1[1];

        $d5 = $d4 + $d3;

        r2[1] = $d5;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r2);

        return;
    }

    static void splitReciprocal(double[], double[])
    {
        double[] r0, r1;
        double $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, d41, d42;
        byte $b0, $b1;
        int i2;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $d2 = r0[0];

        $b0 = $d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d40 = r0[1];

        r0[0] = $d40;

        r0[1] = 0.0;

     label1:
        $d3 = r0[0];

        $d4 = 0.9999997615814209 / $d3;

        r1[0] = $d4;

        $d5 = r0[0];

        $d8 = 2.384185791015625E-7 * $d5;

        $d6 = r0[1];

        $d7 = 0.9999997615814209 * $d6;

        $d16 = $d8 - $d7;

        $d10 = r0[0];

        $d9 = r0[0];

        $d14 = $d10 * $d9;

        $d12 = r0[0];

        $d11 = r0[1];

        $d13 = $d12 * $d11;

        $d15 = $d14 + $d13;

        $d17 = $d16 / $d15;

        r1[1] = $d17;

        $d19 = r1[1];

        $d18 = r1[1];

        $b1 = $d19 cmpl $d18;

        if $b1 == 0 goto label2;

        r1[1] = 0.0;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r1);

        i2 = 0;

     label3:
        if i2 >= 2 goto label4;

        $d21 = r1[0];

        $d20 = r0[0];

        $d22 = $d21 * $d20;

        $d26 = 1.0 - $d22;

        $d24 = r1[0];

        $d23 = r0[1];

        $d25 = $d24 * $d23;

        $d30 = $d26 - $d25;

        $d28 = r1[1];

        $d27 = r0[0];

        $d29 = $d28 * $d27;

        $d34 = $d30 - $d29;

        $d32 = r1[1];

        $d31 = r0[1];

        $d33 = $d32 * $d31;

        d41 = $d34 - $d33;

        $d36 = r1[0];

        $d35 = r1[1];

        $d37 = $d36 + $d35;

        d42 = d41 * $d37;

        $d38 = r1[1];

        $d39 = $d38 + d42;

        r1[1] = $d39;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    private static void quadMult(double[], double[], double[])
    {
        double[] r0, r1, r2, r3, r4, r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, d57, d58, d59, d60, d61, d62;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 = newarray (double)[2];

        r4 = newarray (double)[2];

        r5 = newarray (double)[2];

        $d0 = r0[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d0, r3);

        $d1 = r1[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d1, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d2 = r5[0];

        r2[0] = $d2;

        $d3 = r5[1];

        r2[1] = $d3;

        $d4 = r1[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d4, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d6 = r2[0];

        $d5 = r5[0];

        d57 = $d6 + $d5;

        $d11 = r2[1];

        $d7 = r2[0];

        $d9 = d57 - $d7;

        $d8 = r5[0];

        $d10 = $d9 - $d8;

        $d12 = $d11 - $d10;

        r2[1] = $d12;

        r2[0] = d57;

        $d14 = r2[0];

        $d13 = r5[1];

        d58 = $d14 + $d13;

        $d19 = r2[1];

        $d15 = r2[0];

        $d17 = d58 - $d15;

        $d16 = r5[1];

        $d18 = $d17 - $d16;

        $d20 = $d19 - $d18;

        r2[1] = $d20;

        r2[0] = d58;

        $d21 = r0[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d21, r3);

        $d22 = r1[0];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d22, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d24 = r2[0];

        $d23 = r5[0];

        d59 = $d24 + $d23;

        $d29 = r2[1];

        $d25 = r2[0];

        $d27 = d59 - $d25;

        $d26 = r5[0];

        $d28 = $d27 - $d26;

        $d30 = $d29 - $d28;

        r2[1] = $d30;

        r2[0] = d59;

        $d32 = r2[0];

        $d31 = r5[1];

        d60 = $d32 + $d31;

        $d37 = r2[1];

        $d33 = r2[0];

        $d35 = d60 - $d33;

        $d34 = r5[1];

        $d36 = $d35 - $d34;

        $d38 = $d37 - $d36;

        r2[1] = $d38;

        r2[0] = d60;

        $d39 = r0[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d39, r3);

        $d40 = r1[1];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>($d40, r4);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r3, r4, r5);

        $d42 = r2[0];

        $d41 = r5[0];

        d61 = $d42 + $d41;

        $d47 = r2[1];

        $d43 = r2[0];

        $d45 = d61 - $d43;

        $d44 = r5[0];

        $d46 = $d45 - $d44;

        $d48 = $d47 - $d46;

        r2[1] = $d48;

        r2[0] = d61;

        $d50 = r2[0];

        $d49 = r5[1];

        d62 = $d50 + $d49;

        $d55 = r2[1];

        $d51 = r2[0];

        $d53 = d62 - $d51;

        $d52 = r5[1];

        $d54 = $d53 - $d52;

        $d56 = $d55 - $d54;

        r2[1] = $d56;

        r2[0] = d62;

        return;
    }

    static double expint(int, double[])
    {
        double[] r0, r1, r2, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int $i0, i1;

        i1 := @parameter0: int;

        r0 := @parameter1: double[];

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        r1[0] = 2.718281828459045;

        r1[1] = 1.4456468917292502E-16;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(1.0, r3);

     label1:
        if i1 <= 0 goto label3;

        $i0 = i1 & 1;

        if $i0 == 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void quadMult(double[],double[],double[])>(r3, r1, r2);

        $d7 = r2[0];

        r3[0] = $d7;

        $d8 = r2[1];

        r3[1] = $d8;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void quadMult(double[],double[],double[])>(r1, r1, r2);

        $d5 = r2[0];

        r1[0] = $d5;

        $d6 = r2[1];

        r1[1] = $d6;

        i1 = i1 >> 1;

        goto label1;

     label3:
        if r0 == null goto label4;

        $d3 = r3[0];

        r0[0] = $d3;

        $d4 = r3[1];

        r0[1] = $d4;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r0);

     label4:
        $d1 = r3[0];

        $d0 = r3[1];

        $d2 = $d1 + $d0;

        return $d2;
    }

    static double[] slowLog(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r0, r1, r2, r3, $r6, $r9, $r12;
        double[][] $r4, $r5, $r7, $r8, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5;

        d0 := @parameter0: double;

        r0 = newarray (double)[2];

        r1 = newarray (double)[2];

        r2 = newarray (double)[2];

        r3 = newarray (double)[2];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void split(double,double[])>(d0, r0);

        $d1 = r0[0];

        $d2 = $d1 + 1.0;

        r0[0] = $d2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r0);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitReciprocal(double[],double[])>(r0, r3);

        $d3 = r0[0];

        $d4 = $d3 - 2.0;

        r0[0] = $d4;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void resplit(double[])>(r0);

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r0, r3, r2);

        $d5 = r2[0];

        r0[0] = $d5;

        $d6 = r2[1];

        r0[1] = $d6;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r0, r0, r1);

        $r5 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r4 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i0 = lengthof $r4;

        $i1 = $i0 - 1;

        $r6 = $r5[$i1];

        $d7 = $r6[0];

        r2[0] = $d7;

        $r8 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r7 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i2 = lengthof $r7;

        $i3 = $i2 - 1;

        $r9 = $r8[$i3];

        $d8 = $r9[1];

        r2[1] = $d8;

        $r10 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $i4 = lengthof $r10;

        i5 = $i4 - 2;

     label1:
        if i5 < 0 goto label2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r2, r1, r3);

        $d11 = r3[0];

        r2[0] = $d11;

        $d12 = r3[1];

        r2[1] = $d12;

        $r11 = <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF>;

        $r12 = $r11[i5];

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitAdd(double[],double[],double[])>(r2, $r12, r3);

        $d13 = r3[0];

        r2[0] = $d13;

        $d14 = r3[1];

        r2[1] = $d14;

        i5 = i5 + -1;

        goto label1;

     label2:
        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void splitMult(double[],double[],double[])>(r2, r0, r3);

        $d9 = r3[0];

        r2[0] = $d9;

        $d10 = r3[1];

        r2[1] = $d10;

        return r2;
    }

    static void printarray(java.io.PrintStream, java.lang.String, int, double[][])
    {
        java.io.PrintStream r0;
        java.lang.String r1, $r9, $r11;
        int i0, i1, i2, $i3, $i4, i5, i6, i7;
        double[][] r2;
        double[] r4;
        double d0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.Object[] $r10;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: double[][];

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $i3 = lengthof r2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void checkLen(int,int)>(i0, $i3);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("    { ");

        i5 = 0;

        i1 = lengthof r2;

        i6 = 0;

     label1:
        if i6 >= i1 goto label4;

        r4 = r2[i6];

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("        {");

        i2 = lengthof r4;

        i7 = 0;

     label2:
        if i7 >= i2 goto label3;

        d0 = r4[i7];

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <org.apache.commons.math3.util.FastMathCalc: java.lang.String format(double)>(d0);

        $r10[0] = $r11;

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%-25.25s", $r10);

        i7 = i7 + 1;

        goto label2;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, // ");

        $i4 = i5;

        i5 = i5 + 1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r9);

        i6 = i6 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("    };");

        return;
    }

    static void printarray(java.io.PrintStream, java.lang.String, int, double[])
    {
        java.io.PrintStream r0;
        java.lang.String r1, $r7, $r9;
        int i0, i1, $i2, i3;
        double[] r2;
        double d0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.Object[] $r8;

        r0 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: double[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $i2 = lengthof r2;

        staticinvoke <org.apache.commons.math3.util.FastMathCalc: void checkLen(int,int)>(i0, $i2);

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("    {");

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        d0 = r2[i3];

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <org.apache.commons.math3.util.FastMathCalc: java.lang.String format(double)>(d0);

        $r8[0] = $r9;

        virtualinvoke r0.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("        %s%n", $r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("    };");

        return;
    }

    static java.lang.String format(double)
    {
        double d0;
        byte $b0, $b1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return "Double.NaN,";

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label2;

        $r6 = "+";

        goto label3;

     label2:
        $r6 = "";

     label3:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d,");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void checkLen(int, int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        int i0, i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label1;

        $r0 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r0.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r0;

     label1:
        return;
    }

    static void <clinit>()
    {
        double[] $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        double[][] $r1;

        <org.apache.commons.math3.util.FastMathCalc: java.lang.String TABLE_END_DECL> = "    };";

        <org.apache.commons.math3.util.FastMathCalc: java.lang.String TABLE_START_DECL> = "    {";

        <org.apache.commons.math3.util.FastMathCalc: long HEX_40000000> = 1073741824L;

        $r0 = newarray (double)[20];

        $r0[0] = 1.0;

        $r0[1] = 1.0;

        $r0[2] = 2.0;

        $r0[3] = 6.0;

        $r0[4] = 24.0;

        $r0[5] = 120.0;

        $r0[6] = 720.0;

        $r0[7] = 5040.0;

        $r0[8] = 40320.0;

        $r0[9] = 362880.0;

        $r0[10] = 3628800.0;

        $r0[11] = 3.99168E7;

        $r0[12] = 4.790016E8;

        $r0[13] = 6.2270208E9;

        $r0[14] = 8.71782912E10;

        $r0[15] = 1.307674368E12;

        $r0[16] = 2.0922789888E13;

        $r0[17] = 3.55687428096E14;

        $r0[18] = 6.402373705728E15;

        $r0[19] = 1.21645100408832E17;

        <org.apache.commons.math3.util.FastMathCalc: double[] FACT> = $r0;

        $r1 = newarray (double[])[16];

        $r2 = newarray (double)[2];

        $r2[0] = 2.0;

        $r2[1] = 0.0;

        $r1[0] = $r2;

        $r3 = newarray (double)[2];

        $r3[0] = 0.6666666269302368;

        $r3[1] = 3.9736429850260626E-8;

        $r1[1] = $r3;

        $r4 = newarray (double)[2];

        $r4[0] = 0.3999999761581421;

        $r4[1] = 2.3841857910019882E-8;

        $r1[2] = $r4;

        $r5 = newarray (double)[2];

        $r5[0] = 0.2857142686843872;

        $r5[1] = 1.7029898543501842E-8;

        $r1[3] = $r5;

        $r6 = newarray (double)[2];

        $r6[0] = 0.2222222089767456;

        $r6[1] = 1.3245471311735498E-8;

        $r1[4] = $r6;

        $r7 = newarray (double)[2];

        $r7[0] = 0.1818181574344635;

        $r7[1] = 2.4384203044354907E-8;

        $r1[5] = $r7;

        $r8 = newarray (double)[2];

        $r8[0] = 0.1538461446762085;

        $r8[1] = 9.140260083262505E-9;

        $r1[6] = $r8;

        $r9 = newarray (double)[2];

        $r9[0] = 0.13333332538604736;

        $r9[1] = 9.220590270857665E-9;

        $r1[7] = $r9;

        $r10 = newarray (double)[2];

        $r10[0] = 0.11764700710773468;

        $r10[1] = 1.2393345855018391E-8;

        $r1[8] = $r10;

        $r11 = newarray (double)[2];

        $r11[0] = 0.10526403784751892;

        $r11[1] = 8.251545029714408E-9;

        $r1[9] = $r11;

        $r12 = newarray (double)[2];

        $r12[0] = 0.0952233225107193;

        $r12[1] = 1.2675934823758863E-8;

        $r1[10] = $r12;

        $r13 = newarray (double)[2];

        $r13[0] = 0.08713622391223907;

        $r13[1] = 1.1430250008909141E-8;

        $r1[11] = $r13;

        $r14 = newarray (double)[2];

        $r14[0] = 0.07842259109020233;

        $r14[1] = 2.404307984052299E-9;

        $r1[12] = $r14;

        $r15 = newarray (double)[2];

        $r15[0] = 0.08371849358081818;

        $r15[1] = 1.176342548272881E-8;

        $r1[13] = $r15;

        $r16 = newarray (double)[2];

        $r16[0] = 0.030589580535888672;

        $r16[1] = 1.2958646899018938E-9;

        $r1[14] = $r16;

        $r17 = newarray (double)[2];

        $r17[0] = 0.14982303977012634;

        $r17[1] = 1.225743062930824E-8;

        $r1[15] = $r17;

        <org.apache.commons.math3.util.FastMathCalc: double[][] LN_SPLIT_COEF> = $r1;

        return;
    }
}
