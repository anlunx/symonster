public class org.apache.commons.lang.ObjectUtils extends java.lang.Object
{
    public static final org.apache.commons.lang.ObjectUtils$Null NULL;

    public void <init>()
    {
        org.apache.commons.lang.ObjectUtils r0;

        r0 := @this: org.apache.commons.lang.ObjectUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object defaultIfNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean notEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int hashCode(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        return $i0;
    }

    public static java.lang.String identityToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <org.apache.commons.lang.ObjectUtils: void identityToString(java.lang.StringBuffer,java.lang.Object)>($r2, r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void identityToString(java.lang.StringBuffer, java.lang.Object)
    {
        java.lang.StringBuffer r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;
        int $i0;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get the toString of a null identity");

        throw $r8;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        return;
    }

    public static java.lang.StringBuffer appendIdentityToString(java.lang.StringBuffer, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, r8;
        int $i0;

        r8 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        if r8 != null goto label2;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        r8 = $r7;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        return $r6;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;
    }

    public static java.lang.Object min(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable r0, r1, $r2;
        int $i0;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <org.apache.commons.lang.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r0, r1, 1);

        if $i0 > 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static java.lang.Object max(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable r0, r1, $r2;
        int $i0;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <org.apache.commons.lang.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r0, r1, 0);

        if $i0 < 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static int compare(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <org.apache.commons.lang.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r0, r1, 0);

        return $i0;
    }

    public static int compare(java.lang.Comparable, java.lang.Comparable, boolean)
    {
        java.lang.Comparable r0, r1;
        boolean z0;
        int $i0;
        byte $b1, $b2;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        z0 := @parameter2: boolean;

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label4;

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;

     label4:
        if r1 != null goto label7;

        if z0 == 0 goto label5;

        $b2 = -1;

        goto label6;

     label5:
        $b2 = 1;

     label6:
        return $b2;

     label7:
        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        return $i0;
    }

    public static java.lang.Object clone(java.lang.Object)
    {
        java.lang.Object r0, $r3, r33;
        boolean $z0, $z1, $z2;
        java.lang.Class $r1, $r2, $r10, $r19, $r28, r32;
        int $i0, i1;
        java.lang.Object[] $r4, $r5;
        java.lang.NoSuchMethodException $r6;
        org.apache.commons.lang.exception.CloneFailedException $r7, $r16, $r25;
        java.lang.StringBuffer $r8, $r9, $r12, $r13, $r17, $r18, $r21, $r26, $r27, $r30;
        java.lang.String $r11, $r14, $r20, $r22, $r29, $r31;
        java.lang.reflect.InvocationTargetException $r15;
        java.lang.Throwable $r23;
        java.lang.IllegalAccessException $r24;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Cloneable;

        if $z0 == 0 goto label10;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label04;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r32 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke r32.<java.lang.Class: boolean isPrimitive()>();

        if $z2 != 0 goto label01;

        $r4 = (java.lang.Object[]) r0;

        $r5 = (java.lang.Object[]) $r4;

        r33 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label01:
        i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        r33 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r32, i1);

     label02:
        $i0 = i1;

        i1 = i1 + -1;

        if $i0 <= 0 goto label03;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r33, i1, $r3);

        goto label02;

     label03:
        goto label09;

     label04:
        r33 = staticinvoke <org.apache.commons.lang.reflect.MethodUtils: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "clone", null);

     label05:
        goto label09;

     label06:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.lang.exception.CloneFailedException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cloneable type ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has no clone method");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.lang.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r6);

        throw $r7;

     label07:
        $r24 := @caughtexception;

        $r25 = new org.apache.commons.lang.exception.CloneFailedException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot clone Cloneable type ");

        $r28 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.commons.lang.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r24);

        throw $r25;

     label08:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.lang.exception.CloneFailedException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception cloning Cloneable type ");

        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = virtualinvoke $r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r16.<org.apache.commons.lang.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r23);

        throw $r16;

     label09:
        return r33;

     label10:
        return null;

        catch java.lang.NoSuchMethodException from label04 to label05 with label06;
        catch java.lang.IllegalAccessException from label04 to label05 with label07;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
    }

    public static java.lang.Object cloneIfPossible(java.lang.Object)
    {
        java.lang.Object r0, r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <org.apache.commons.lang.ObjectUtils: java.lang.Object clone(java.lang.Object)>(r0);

        if r1 != null goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        org.apache.commons.lang.ObjectUtils$Null $r0;

        $r0 = new org.apache.commons.lang.ObjectUtils$Null;

        specialinvoke $r0.<org.apache.commons.lang.ObjectUtils$Null: void <init>()>();

        <org.apache.commons.lang.ObjectUtils: org.apache.commons.lang.ObjectUtils$Null NULL> = $r0;

        return;
    }
}
