class org.apache.commons.math3.linear.TriDiagonalTransformer extends java.lang.Object
{
    private final double[][] householderVectors;
    private final double[] main;
    private final double[] secondary;
    private org.apache.commons.math3.linear.RealMatrix cachedQ;
    private org.apache.commons.math3.linear.RealMatrix cachedQt;
    private org.apache.commons.math3.linear.RealMatrix cachedT;

    public void <init>(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        double[][] $r2;
        double[] $r3, $r4;
        org.apache.commons.math3.linear.NonSquareMatrixException $r5;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: boolean isSquare()>();

        if $z0 != 0 goto label1;

        $r5 = new org.apache.commons.math3.linear.NonSquareMatrixException;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        specialinvoke $r5.<org.apache.commons.math3.linear.NonSquareMatrixException: void <init>(int,int)>($i2, $i3);

        throw $r5;

     label1:
        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors> = $r2;

        $r3 = newarray (double)[i0];

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main> = $r3;

        $i1 = i0 - 1;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary> = $r4;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ> = null;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt> = null;

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = null;

        specialinvoke r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: void transform()>();

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getQ()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        org.apache.commons.math3.linear.RealMatrix $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix getQT()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQ>;

        return $r2;
    }

    public org.apache.commons.math3.linear.RealMatrix getQT()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        int i0, $i1, $i3, $i4, i5, i6, i7, i8, i9;
        double[][] r1, $r5, $r8;
        double[] r2, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, d21, d22;
        org.apache.commons.math3.linear.RealMatrix $r3, $r4, $r7;
        byte $b2;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r3 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt>;

        if $r3 != null goto label11;

        $r5 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r5;

        r1 = newmultiarray (double)[i0][i0];

        i5 = i0 - 1;

     label01:
        if i5 < 1 goto label10;

        $r8 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $i1 = i5 - 1;

        r2 = $r8[$i1];

        $r9 = r1[i5];

        $r9[i5] = 1.0;

        $d1 = r2[i5];

        $b2 = $d1 cmpl 0.0;

        if $b2 == 0 goto label09;

        $r10 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i3 = i5 - 1;

        $d3 = $r10[$i3];

        $d2 = r2[i5];

        $d4 = $d3 * $d2;

        d0 = 1.0 / $d4;

        $r11 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i4 = i5 - 1;

        $d5 = $r11[$i4];

        d20 = 1.0 / $d5;

        $r12 = r1[i5];

        $d6 = r2[i5];

        $d7 = d20 * $d6;

        $d8 = 1.0 + $d7;

        $r12[i5] = $d8;

        i6 = i5 + 1;

     label02:
        if i6 >= i0 goto label03;

        $r16 = r1[i5];

        $d18 = r2[i6];

        $d19 = d20 * $d18;

        $r16[i6] = $d19;

        i6 = i6 + 1;

        goto label02;

     label03:
        i7 = i5 + 1;

     label04:
        if i7 >= i0 goto label09;

        d21 = 0.0;

        i8 = i5 + 1;

     label05:
        if i8 >= i0 goto label06;

        $r15 = r1[i7];

        $d16 = $r15[i8];

        $d15 = r2[i8];

        $d17 = $d16 * $d15;

        d21 = d21 + $d17;

        i8 = i8 + 1;

        goto label05;

     label06:
        d22 = d21 * d0;

        $r13 = r1[i7];

        $d9 = r2[i5];

        $d10 = d22 * $d9;

        $r13[i5] = $d10;

        i9 = i5 + 1;

     label07:
        if i9 >= i0 goto label08;

        $r14 = r1[i7];

        $d13 = $r14[i9];

        $d11 = r2[i9];

        $d12 = d22 * $d11;

        $d14 = $d13 + $d12;

        $r14[i9] = $d14;

        i9 = i9 + 1;

        goto label07;

     label08:
        i7 = i7 + 1;

        goto label04;

     label09:
        i5 = i5 + -1;

        goto label01;

     label10:
        $r6 = r1[0];

        $r6[0] = 1.0;

        $r7 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt> = $r7;

     label11:
        $r4 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedQt>;

        return $r4;
    }

    public org.apache.commons.math3.linear.RealMatrix getT()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double[][] r1;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3, $r5;
        double[] $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r2 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        if $r2 != null goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        i0 = lengthof $r4;

        r1 = newmultiarray (double)[i0][i0];

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        $r7 = r1[i6];

        $r6 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $d0 = $r6[i6];

        $r7[i6] = $d0;

        if i6 <= 0 goto label2;

        $r12 = r1[i6];

        $i5 = i6 - 1;

        $r11 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $i4 = i6 - 1;

        $d2 = $r11[$i4];

        $r12[$i5] = $d2;

     label2:
        $r8 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $i1 = lengthof $r8;

        $i2 = $i1 - 1;

        if i6 >= $i2 goto label3;

        $r10 = r1[i6];

        $i3 = i6 + 1;

        $r9 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $d1 = $r9[i6];

        $r10[$i3] = $d1;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r5 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT> = $r5;

     label5:
        $r3 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: org.apache.commons.math3.linear.RealMatrix cachedT>;

        return $r3;
    }

    double[][] getHouseholderVectorsRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        return $r1;
    }

    double[] getMainDiagonalRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        return $r1;
    }

    double[] getSecondaryDiagonalRef()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r1 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        return $r1;
    }

    private void transform()
    {
        org.apache.commons.math3.linear.TriDiagonalTransformer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18;
        double[] r1, r2, r3, r4, $r7, $r8, $r10, $r11;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, $d39, d41, d42, d43, d44;
        double[][] $r5, $r6, $r9, $r12, $r13;
        byte $b6, $b7;

        r0 := @this: org.apache.commons.math3.linear.TriDiagonalTransformer;

        $r5 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        i0 = lengthof $r5;

        r1 = newarray (double)[i0];

        i11 = 0;

     label01:
        $i1 = i0 - 1;

        if i11 >= $i1 goto label18;

        $r9 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        r2 = $r9[i11];

        $r10 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $d4 = r2[i11];

        $r10[i11] = $d4;

        d38 = 0.0;

        i12 = i11 + 1;

     label02:
        if i12 >= i0 goto label03;

        d0 = r2[i12];

        $d37 = d0 * d0;

        d38 = d38 + $d37;

        i12 = i12 + 1;

        goto label02;

     label03:
        $i5 = i11 + 1;

        $d5 = r2[$i5];

        $b6 = $d5 cmpl 0.0;

        if $b6 <= 0 goto label04;

        $d36 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d38);

        $d39 = neg $d36;

        goto label05;

     label04:
        $d39 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d38);

     label05:
        $r11 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] secondary>;

        $r11[i11] = $d39;

        $b7 = $d39 cmpl 0.0;

        if $b7 == 0 goto label17;

        $i8 = i11 + 1;

        $d6 = r2[$i8];

        $d7 = $d6 - $d39;

        r2[$i8] = $d7;

        $i9 = i11 + 1;

        $d8 = r2[$i9];

        $d9 = $d39 * $d8;

        d1 = -1.0 / $d9;

        $i10 = i11 + 1;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r1, $i10, i0, 0.0);

        i13 = i11 + 1;

     label06:
        if i13 >= i0 goto label09;

        $r13 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        r3 = $r13[i13];

        d41 = r2[i13];

        $d27 = r3[i13];

        d42 = $d27 * d41;

        i14 = i13 + 1;

     label07:
        if i14 >= i0 goto label08;

        d2 = r3[i14];

        $d31 = r2[i14];

        $d32 = d2 * $d31;

        d42 = d42 + $d32;

        $d34 = r1[i14];

        $d33 = d2 * d41;

        $d35 = $d34 + $d33;

        r1[i14] = $d35;

        i14 = i14 + 1;

        goto label07;

     label08:
        $d28 = r1[i13];

        $d29 = $d28 + d42;

        $d30 = d1 * $d29;

        r1[i13] = $d30;

        i13 = i13 + 1;

        goto label06;

     label09:
        d43 = 0.0;

        i15 = i11 + 1;

     label10:
        if i15 >= i0 goto label11;

        $d25 = r1[i15];

        $d24 = r2[i15];

        $d26 = $d25 * $d24;

        d43 = d43 + $d26;

        i15 = i15 + 1;

        goto label10;

     label11:
        $d10 = d1 / 2.0;

        d44 = d43 * $d10;

        i16 = i11 + 1;

     label12:
        if i16 >= i0 goto label13;

        $d22 = r1[i16];

        $d20 = r2[i16];

        $d21 = d44 * $d20;

        $d23 = $d22 - $d21;

        r1[i16] = $d23;

        i16 = i16 + 1;

        goto label12;

     label13:
        i17 = i11 + 1;

     label14:
        if i17 >= i0 goto label17;

        $r12 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        r4 = $r12[i17];

        i18 = i17;

     label15:
        if i18 >= i0 goto label16;

        $d18 = r4[i18];

        $d12 = r2[i17];

        $d11 = r1[i18];

        $d16 = $d12 * $d11;

        $d14 = r1[i17];

        $d13 = r2[i18];

        $d15 = $d14 * $d13;

        $d17 = $d16 + $d15;

        $d19 = $d18 - $d17;

        r4[i18] = $d19;

        i18 = i18 + 1;

        goto label15;

     label16:
        i17 = i17 + 1;

        goto label14;

     label17:
        i11 = i11 + 1;

        goto label01;

     label18:
        $r8 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[] main>;

        $i4 = i0 - 1;

        $r6 = r0.<org.apache.commons.math3.linear.TriDiagonalTransformer: double[][] householderVectors>;

        $i2 = i0 - 1;

        $r7 = $r6[$i2];

        $i3 = i0 - 1;

        $d3 = $r7[$i3];

        $r8[$i4] = $d3;

        return;
    }
}
