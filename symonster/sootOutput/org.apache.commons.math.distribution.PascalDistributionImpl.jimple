public class org.apache.commons.math.distribution.PascalDistributionImpl extends org.apache.commons.math.distribution.AbstractIntegerDistribution implements org.apache.commons.math.distribution.PascalDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    private int numberOfSuccesses;
    private double probabilityOfSuccess;

    public void <init>(int, double)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: void setNumberOfSuccessesInternal(int)>(i0);

        specialinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: void setProbabilityOfSuccessInternal(double)>(d0);

        return;
    }

    public int getNumberOfSuccesses()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses>;

        return $i0;
    }

    public double getProbabilityOfSuccess()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double probabilityOfSuccess>;

        return $d0;
    }

    public void setNumberOfSuccesses(int)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: void setNumberOfSuccessesInternal(int)>(i0);

        return;
    }

    private void setNumberOfSuccessesInternal(int)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_SUCCESSES>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses> = i0;

        return;
    }

    public void setProbabilityOfSuccess(double)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: void setProbabilityOfSuccessInternal(double)>(d0);

        return;
    }

    private void setProbabilityOfSuccessInternal(double)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0;
        byte $b0, $b1;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats OUT_OF_RANGE_SIMPLE>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r1[2] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r6;

     label2:
        r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double probabilityOfSuccess> = d0;

        return;
    }

    protected int getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 := @parameter0: double;

        return -1;
    }

    protected int getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 := @parameter0: double;

        return 2147483646;
    }

    public double cumulativeProbability(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d3 = 0.0;

        goto label2;

     label1:
        $d2 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double probabilityOfSuccess>;

        $i1 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses>;

        $d1 = (double) $i1;

        $i2 = i0 + 1;

        $d0 = (double) $i2;

        d3 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double)>($d2, $d1, $d0);

     label2:
        return d3;
    }

    public double probability(int)
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        d9 = 0.0;

        goto label2;

     label1:
        $i1 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses>;

        $i2 = i0 + $i1;

        $i5 = $i2 - 1;

        $i3 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses>;

        $i4 = $i3 - 1;

        $d0 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientDouble(int,int)>($i5, $i4);

        $d2 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double probabilityOfSuccess>;

        $i6 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int numberOfSuccesses>;

        $d1 = (double) $i6;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d2, $d1);

        $d7 = $d0 * $d3;

        $d4 = r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double probabilityOfSuccess>;

        $d6 = 1.0 - $d4;

        $d5 = (double) i0;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d6, $d5);

        d9 = $d7 * $d8;

     label2:
        return d9;
    }

    public int inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0;
        byte $b0, $b1;
        int i2;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        i2 = -1;

        goto label3;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        i2 = 2147483647;

        goto label3;

     label2:
        i2 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: int inverseCumulativeProbability(double)>(d0);

     label3:
        return i2;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        return 2147483647;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0, d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int getNumberOfSuccesses()>();

        d1 = (double) $i0;

        $d3 = d1 * d0;

        $d2 = 1.0 - d0;

        $d4 = $d3 / $d2;

        return $d4;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.PascalDistributionImpl r0;
        double d0, d1, d2, $d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.PascalDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: double getProbabilityOfSuccess()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.PascalDistributionImpl: int getNumberOfSuccesses()>();

        d1 = (double) $i0;

        d2 = 1.0 - d0;

        $d4 = d1 * d0;

        $d3 = d2 * d2;

        $d5 = $d4 / $d3;

        return $d5;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.PascalDistributionImpl: long serialVersionUID> = 6751309484392813623L;

        return;
    }
}
