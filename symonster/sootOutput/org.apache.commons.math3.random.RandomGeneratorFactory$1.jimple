final class org.apache.commons.math3.random.RandomGeneratorFactory$1 extends java.lang.Object implements org.apache.commons.math3.random.RandomGenerator
{
    final java.util.Random val$rng;

    void <init>(java.util.Random)
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random r1;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        r1 := @parameter0: java.util.Random;

        r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setSeed(int)
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        int i0;
        long $l1;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $l1 = (long) i0;

        virtualinvoke $r1.<java.util.Random: void setSeed(long)>($l1);

        return;
    }

    public void setSeed(int[])
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        int[] r1;
        java.util.Random $r2;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        r1 := @parameter0: int[];

        $r2 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $l0 = staticinvoke <org.apache.commons.math3.random.RandomGeneratorFactory: long convertToLong(int[])>(r1);

        virtualinvoke $r2.<java.util.Random: void setSeed(long)>($l0);

        return;
    }

    public void setSeed(long)
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        long l0;
        java.util.Random $r1;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        virtualinvoke $r1.<java.util.Random: void setSeed(long)>(l0);

        return;
    }

    public void nextBytes(byte[])
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        byte[] r1;
        java.util.Random $r2;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        virtualinvoke $r2.<java.util.Random: void nextBytes(byte[])>(r1);

        return;
    }

    public int nextInt()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        return $i0;
    }

    public int nextInt(int)
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        int i0, $i1;
        java.util.Random $r1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(i0);

        return $i1;
    }

    public long nextLong()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $l0 = virtualinvoke $r1.<java.util.Random: long nextLong()>();

        return $l0;
    }

    public boolean nextBoolean()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $z0 = virtualinvoke $r1.<java.util.Random: boolean nextBoolean()>();

        return $z0;
    }

    public float nextFloat()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        float $f0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        return $f0;
    }

    public double nextDouble()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextDouble()>();

        return $d0;
    }

    public double nextGaussian()
    {
        org.apache.commons.math3.random.RandomGeneratorFactory$1 r0;
        java.util.Random $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.random.RandomGeneratorFactory$1;

        $r1 = r0.<org.apache.commons.math3.random.RandomGeneratorFactory$1: java.util.Random val$rng>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextGaussian()>();

        return $d0;
    }
}
