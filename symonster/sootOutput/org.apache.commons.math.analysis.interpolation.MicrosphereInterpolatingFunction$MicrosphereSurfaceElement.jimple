class org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement extends java.lang.Object
{
    private final org.apache.commons.math.linear.RealVector normal;
    private double brightestIllumination;
    private java.util.Map$Entry brightestSample;

    void <init>(double[])
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;
        double[] r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[])>(r1);

        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: org.apache.commons.math.linear.RealVector normal> = $r2;

        return;
    }

    org.apache.commons.math.linear.RealVector normal()
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;
        org.apache.commons.math.linear.RealVector $r1;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        $r1 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: org.apache.commons.math.linear.RealVector normal>;

        return $r1;
    }

    void reset()
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double brightestIllumination> = 0.0;

        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: java.util.Map$Entry brightestSample> = null;

        return;
    }

    void store(double, java.util.Map$Entry)
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;
        double d0, $d1;
        java.util.Map$Entry r1;
        byte $b0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        d0 := @parameter0: double;

        r1 := @parameter1: java.util.Map$Entry;

        $d1 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double brightestIllumination>;

        $b0 = d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double brightestIllumination> = d0;

        r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: java.util.Map$Entry brightestSample> = r1;

     label1:
        return;
    }

    double illumination()
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;
        double $d0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        $d0 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: double brightestIllumination>;

        return $d0;
    }

    java.util.Map$Entry sample()
    {
        org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement r0;
        java.util.Map$Entry $r1;

        r0 := @this: org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;

        $r1 = r0.<org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement: java.util.Map$Entry brightestSample>;

        return $r1;
    }
}
