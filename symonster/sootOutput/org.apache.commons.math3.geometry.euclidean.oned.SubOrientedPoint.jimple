public class org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint extends org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane
{

    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return;
    }

    public double getSize()
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        return 0.0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        return 0;
    }

    protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r3 = new org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r2;
        double d0;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.partitioning.Side $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r2;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r4);

        $b0 = d0 cmpg -1.0E-10;

        if $b0 >= 0 goto label1;

        $r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label3;

     label1:
        $b1 = d0 cmpl 1.0E-10;

        if $b1 <= 0 goto label2;

        $r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label3;

     label2:
        $r5 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label3:
        return $r5;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r2;
        double d0;
        org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint $r3;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4;
        byte $b0;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r5;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) $r2;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint: org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()>();

        d0 = interfaceinvoke r1.<org.apache.commons.math3.geometry.partitioning.Hyperplane: double getOffset(org.apache.commons.math3.geometry.Point)>($r4);

        $b0 = d0 cmpg -1.0E-10;

        if $b0 >= 0 goto label1;

        $r5 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, r0);

        goto label2;

     label1:
        $r5 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, null);

     label2:
        return $r5;
    }
}
