public class com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData extends java.lang.Object implements com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData
{
    private static final double TOL;
    private final com.opengamma.analytics.math.minimization.SumToOne _sto;
    private final int _nNorms;
    private final int _nParams;
    private final double[] _sigmas;
    private final double[] _w;
    private final double[] _f;
    private final boolean _shiftedMeans;
    private final double[] _parameters;

    public void <init>(double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r1 := @parameter0: double[];

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r1, 1);

        return;
    }

    public void <init>(double[], boolean)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1, r2, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r30, r31;
        boolean z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;
        java.lang.Object[] $r4, $r25, $r28;
        java.lang.Integer $r5, $r26, $r29;
        com.opengamma.analytics.math.minimization.SumToOne $r6, $r11, $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b12, $b14;
        java.lang.Double $r27;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "parameters");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams> = $i0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans> = z0;

        if z0 == 0 goto label03;

        $i15 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $i16 = $i15 % 3;

        if $i16 != 1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r28 = newarray (java.lang.Object)[1];

        $i17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r28[0] = $r29;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "Wrong length of parameters - length {}, but must be 3n-2, where n is an integer", $r28);

        $i18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $i19 = $i18 + 2;

        i20 = $i19 / 3;

        goto label06;

     label03:
        $i1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $i2 = $i1 % 2;

        if $i2 != 1 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $r4 = newarray (java.lang.Object)[1];

        $i3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "Wrong length of parameters - length {}, but must be 2n-1, where n is an integer", $r4);

        $i4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $i5 = $i4 + 1;

        i20 = $i5 / 2;

     label06:
        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms> = i20;

        i21 = 0;

     label07:
        if i21 >= i20 goto label10;

        $d8 = r1[i21];

        $b14 = $d8 cmpl 0.0;

        if $b14 < 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        $r25 = newarray (java.lang.Object)[2];

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        $r25[0] = $r26;

        $d9 = r1[i21];

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r25[1] = $r27;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "parameters {} have value {}, must be >= 0", $r25);

        i21 = i21 + 1;

        goto label07;

     label10:
        $r6 = new com.opengamma.analytics.math.minimization.SumToOne;

        specialinvoke $r6.<com.opengamma.analytics.math.minimization.SumToOne: void <init>(int)>(i20);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto> = $r6;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters> = r1;

        $r7 = newarray (double)[i20];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas> = $r7;

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $r8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $d0 = $r8[0];

        $r9[0] = $d0;

        i22 = 1;

     label11:
        if i22 >= i20 goto label12;

        $r24 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $r22 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $i13 = i22 - 1;

        $d6 = $r22[$i13];

        $r23 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $d5 = $r23[i22];

        $d7 = $d6 + $d5;

        $r24[i22] = $d7;

        i22 = i22 + 1;

        goto label11;

     label12:
        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i6 = 2 * i20;

        $i7 = $i6 - 1;

        r30 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r10, i20, $i7);

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.minimization.SumToOne: double[] transform(double[])>(r30);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w> = $r12;

        if z0 == 0 goto label17;

        $r15 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i8 = 2 * i20;

        $i11 = $i8 - 1;

        $i9 = 3 * i20;

        $i10 = $i9 - 2;

        r31 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r15, $i11, $i10);

        $r16 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        r2 = virtualinvoke $r16.<com.opengamma.analytics.math.minimization.SumToOne: double[] transform(double[])>(r31);

        $r17 = newarray (double)[i20];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f> = $r17;

        i23 = 0;

     label13:
        if i23 >= i20 goto label16;

        $r18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $d1 = $r18[i23];

        $b12 = $d1 cmpl 0.0;

        if $b12 <= 0 goto label14;

        $r21 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $d3 = r2[i23];

        $r20 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $d2 = $r20[i23];

        $d4 = $d3 / $d2;

        $r21[i23] = $d4;

        goto label15;

     label14:
        $r19 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $r19[i23] = 1.0;

     label15:
        i23 = i23 + 1;

        goto label13;

     label16:
        goto label18;

     label17:
        $r13 = newarray (double)[i20];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f> = $r13;

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r14, 1.0);

     label18:
        return;
    }

    public void <init>(double[], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1, r2, $r5, $r6, $r8, $r9, $r11, $r12, r13;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, i11, i12;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        byte $b2, $b8, $b9, $b10;
        com.opengamma.analytics.math.minimization.SumToOne $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "null sigmas");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null weights");

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans> = 0;

        i0 = lengthof r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms> = i0;

        $i1 = lengthof r1;

        if i0 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Weights not the same length as sigmas");

        if i0 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "no weights");

        d9 = 0.0;

        i11 = 0;

     label05:
        if i11 >= i0 goto label10;

        $d6 = r2[i11];

        $b9 = $d6 cmpl 0.0;

        if $b9 <= 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "zero or negative sigma");

        $d7 = r1[i11];

        $b10 = $d7 cmpl 0.0;

        if $b10 < 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "negative weight");

        $d8 = r1[i11];

        d9 = d9 + $d8;

        i11 = i11 + 1;

        goto label05;

     label10:
        $d1 = d9 - 1.0;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b2 = $d2 cmpg 1.0E-9;

        if $b2 >= 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "Weights do not sum to 1.0");

        $i3 = 2 * i0;

        $i4 = $i3 - 1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams> = $i4;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w> = r1;

        $r5 = newarray (double)[i0];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f> = $r5;

        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r6, 1.0);

        $r7 = new com.opengamma.analytics.math.minimization.SumToOne;

        specialinvoke $r7.<com.opengamma.analytics.math.minimization.SumToOne: void <init>(int)>(i0);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto> = $r7;

        $i5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $r8 = newarray (double)[$i5];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters> = $r8;

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $d3 = r2[0];

        $r9[0] = $d3;

        i12 = 1;

     label13:
        if i12 >= i0 goto label16;

        $d5 = r2[i12];

        $i7 = i12 - 1;

        $d4 = r2[$i7];

        d0 = $d5 - $d4;

        $b8 = d0 cmpl 0.0;

        if $b8 < 0 goto label14;

        $z5 = 1;

        goto label15;

     label14:
        $z5 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "sigmas must be increasing");

        $r12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $r12[i12] = d0;

        i12 = i12 + 1;

        goto label13;

     label16:
        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        r13 = virtualinvoke $r10.<com.opengamma.analytics.math.minimization.SumToOne: double[] inverseTransform(double[])>(r1);

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i6 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, $r11, i0, $i6);

        return;
    }

    public void <init>(double[], double[], double[])
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1, r2, r3, r4, $r8, $r9, $r11, $r13, $r14, r15, r16;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i17, i18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d15, d16;
        byte $b3, $b4, $b13, $b14, $b15, $b16;
        com.opengamma.analytics.math.minimization.SumToOne $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans> = 1;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "null sigmas");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null weights");

        i0 = lengthof r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms> = i0;

        $i1 = lengthof r1;

        if i0 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Weights not the same length as sigmas");

        $i2 = lengthof r3;

        if i0 != $i2 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Partial forwards not the same length as sigmas");

        if i0 <= 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "no weights");

        d13 = 0.0;

        d14 = 0.0;

        r4 = newarray (double)[i0];

        i17 = 0;

     label07:
        if i17 >= i0 goto label14;

        $d7 = r2[i17];

        $b14 = $d7 cmpl 0.0;

        if $b14 <= 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "zero or negative sigma");

        $d8 = r1[i17];

        $b15 = $d8 cmpl 0.0;

        if $b15 < 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "negative weight");

        $d9 = r3[i17];

        $b16 = $d9 cmpl 0.0;

        if $b16 <= 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "zero of negative partial forward");

        $d10 = r1[i17];

        d13 = d13 + $d10;

        $d12 = r1[i17];

        $d11 = r3[i17];

        d15 = $d12 * $d11;

        d14 = d14 + d15;

        r4[i17] = d15;

        i17 = i17 + 1;

        goto label07;

     label14:
        $d0 = d13 - 1.0;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $b3 = $d1 cmpg 1.0E-9;

        if $b3 >= 0 goto label15;

        $z6 = 1;

        goto label16;

     label15:
        $z6 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Weights do not sum to 1.0");

        $d2 = d14 - 1.0;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b4 = $d3 cmpg 1.0E-9;

        if $b4 >= 0 goto label17;

        $z7 = 1;

        goto label18;

     label17:
        $z7 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Weighted partial forwards do not sum to forward");

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f> = r3;

        $i5 = 3 * i0;

        $i6 = $i5 - 2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams> = $i6;

        $r7 = new com.opengamma.analytics.math.minimization.SumToOne;

        specialinvoke $r7.<com.opengamma.analytics.math.minimization.SumToOne: void <init>(int)>(i0);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto> = $r7;

        $i7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        $r8 = newarray (double)[$i7];

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters> = $r8;

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $d4 = r2[0];

        $r9[0] = $d4;

        i18 = 1;

     label19:
        if i18 >= i0 goto label22;

        $d6 = r2[i18];

        $i12 = i18 - 1;

        $d5 = r2[$i12];

        d16 = $d6 - $d5;

        $b13 = d16 cmpl 0.0;

        if $b13 < 0 goto label20;

        $z8 = 1;

        goto label21;

     label20:
        $z8 = 0;

     label21:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "sigmas must be increasing");

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $r14[i18] = d16;

        i18 = i18 + 1;

        goto label19;

     label22:
        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        r15 = virtualinvoke $r10.<com.opengamma.analytics.math.minimization.SumToOne: double[] inverseTransform(double[])>(r1);

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i8 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 0, $r11, i0, $i8);

        $r12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        r16 = virtualinvoke $r12.<com.opengamma.analytics.math.minimization.SumToOne: double[] inverseTransform(double[])>(r4);

        $r13 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i9 = 2 * i0;

        $i11 = $i9 - 1;

        $i10 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r16, 0, $r13, $i11, $i10);

        return;
    }

    public boolean isAllowed(int, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        int i0, $i1;
        double d0;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $i1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms>;

        if i0 >= $i1 goto label3;

        $b2 = d0 cmpl 0.0;

        if $b2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 1;
    }

    public double[] getWeights()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        return $r1;
    }

    public double[] getVolatilities()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        return $r1;
    }

    public double[] getRelativeForwards()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        return $r1;
    }

    public double[][] getWeightsJacobian()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1, $r2;
        int $i0, $i1, $i2, $i3;
        com.opengamma.analytics.math.minimization.SumToOne $r3;
        double[][] $r4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms>;

        $i0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms>;

        $i1 = 2 * $i0;

        $i2 = $i1 - 1;

        r1 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r2, $i3, $i2);

        $r3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.minimization.SumToOne: double[][] jacobian(double[])>(r1);

        return $r4;
    }

    public double[][] getRelativeForwardsJacobian()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] r1, $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.opengamma.analytics.math.minimization.SumToOne $r3;
        double[][] $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This model does not used shifted means, therefore no Jacobian exists");

        throw $r5;

     label1:
        $r2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms>;

        $i1 = 2 * $i0;

        $i5 = $i1 - 1;

        $i2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nNorms>;

        $i3 = 3 * $i2;

        $i4 = $i3 - 2;

        r1 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r2, $i5, $i4);

        $r3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: com.opengamma.analytics.math.minimization.SumToOne _sto>;

        $r4 = virtualinvoke $r3.<com.opengamma.analytics.math.minimization.SumToOne: double[][] jacobian(double[])>(r1);

        return $r4;
    }

    public int getNumberOfParameters()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $i0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        return $i0;
    }

    public double getParameter(int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        int i0;
        double d0, $d1;
        double[] $r1;
        byte $b1, $b2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        d0 = $r1[i0];

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label1;

        $b2 = d0 cmpg 1.5707963267948966;

        if $b2 > 0 goto label1;

        return d0;

     label1:
        $d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double toZeroToPiByTwo(double)>(d0);

        return $d1;
    }

    public com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0, $r3;
        int i0, $i1, $i2;
        double d0;
        double[] r1, $r2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $i1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        r1 = newarray (double)[$i1];

        $r2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _parameters>;

        $i2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int _nParams>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2);

        r1[i0] = d0;

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: void <init>(double[],boolean)>(r1, $z0);

        return $r3;
    }

    private double toZeroToPiByTwo(double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        int i0;
        byte $b1, $b2, $b3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        d0 := @parameter0: double;

        d5 = d0;

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label1;

        d5 = neg d0;

     label1:
        $b2 = d5 cmpl 1.5707963267948966;

        if $b2 <= 0 goto label2;

        $d1 = d5 / 3.141592653589793;

        i0 = (int) $d1;

        $d2 = (double) i0;

        $d3 = $d2 * 3.141592653589793;

        d5 = d5 - $d3;

        $b3 = d5 cmpl 1.5707963267948966;

        if $b3 <= 0 goto label2;

        $d4 = neg d5;

        d5 = $d4 + 3.141592653589793;

     label2:
        return d5;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        double[] $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i11, i12, i13;
        boolean $z0;
        short $s10;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i9 = $i1 + $i2;

        $i3 = 31 * i9;

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        if $z0 == 0 goto label1;

        $s10 = 1231;

        goto label2;

     label1:
        $s10 = 1237;

     label2:
        i11 = $i3 + $s10;

        $i4 = 31 * i11;

        $r2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $i5 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r2);

        i12 = $i4 + $i5;

        $i6 = 31 * i12;

        $r3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $i7 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r3);

        i13 = $i6 + $i7;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double[] $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData) r1;

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        if $z0 == 0 goto label4;

        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $r9 = r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r10, $r9);

        if $z5 != 0 goto label4;

        return 0;

     label4:
        $z2 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        $z1 = r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: boolean _shiftedMeans>;

        if $z2 == $z1 goto label5;

        return 0;

     label5:
        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $r5 = r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z3 != 0 goto label6;

        return 0;

     label6:
        $r8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $r7 = r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z4 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;
        double[] $r3, $r7, $r11;
        java.lang.String $r4, $r8, $r12, $r15;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MixedLogNormalModelData [_sigmas=");

        $r3 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _sigmas>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", _w=");

        $r7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _w>;

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", _f=");

        $r11 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] _f>;

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double TOL> = 1.0E-9;

        return;
    }
}
