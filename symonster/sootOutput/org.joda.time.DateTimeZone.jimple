public abstract class org.joda.time.DateTimeZone extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.joda.time.DateTimeZone UTC;
    private static final int MAX_MILLIS;
    private static final java.util.concurrent.atomic.AtomicReference cProvider;
    private static final java.util.concurrent.atomic.AtomicReference cNameProvider;
    private static final java.util.concurrent.atomic.AtomicReference cDefault;
    private final java.lang.String iID;

    public static org.joda.time.DateTimeZone getDefault()
    {
        java.util.concurrent.atomic.AtomicReference $r0, $r2, $r3;
        java.lang.Object $r1, $r4;
        boolean $z0;
        java.util.TimeZone $r5;
        java.lang.RuntimeException $r6;
        java.lang.IllegalArgumentException $r7;
        org.joda.time.DateTimeZone r8;
        java.lang.String r9;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r8 = (org.joda.time.DateTimeZone) $r1;

        if r8 != null goto label9;

     label1:
        r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone");

        if r9 == null goto label2;

        r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r9);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        if r8 != null goto label5;

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r5);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        if r8 != null goto label8;

        r8 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

     label8:
        $r2 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r8);

        if $z0 != 0 goto label9;

        $r3 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r8 = (org.joda.time.DateTimeZone) $r4;

     label9:
        return r8;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label5 with label6;
    }

    public static void setDefault(org.joda.time.DateTimeZone) throws java.lang.SecurityException
    {
        org.joda.time.DateTimeZone r0;
        java.lang.SecurityManager r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.JodaTimePermission $r4;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r1 == null goto label1;

        $r4 = new org.joda.time.JodaTimePermission;

        specialinvoke $r4.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setDefault");

        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r4);

     label1:
        if r0 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The datetime zone must not be null");

        throw $r3;

     label2:
        $r2 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r0);

        return;
    }

    public static org.joda.time.DateTimeZone forID(java.lang.String)
    {
        org.joda.time.DateTimeZone r0, $r2, $r3, $r10, $r11;
        int i0;
        boolean $z0, $z1, $z2;
        org.joda.time.tz.Provider $r1;
        long $l1;
        byte $b2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9, r12, r13;

        r12 := @parameter0: java.lang.String;

        if r12 != null goto label1;

        $r11 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r11;

     label1:
        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label2;

        $r10 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r10;

     label2:
        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        r0 = interfaceinvoke $r1.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r12);

        if r0 == null goto label3;

        return r0;

     label3:
        $z1 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 == 0 goto label6;

     label4:
        i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r12);

        $l1 = (long) i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label5;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r3;

     label5:
        r13 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0);

        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r13, i0);

        return $r2;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The datetime zone id \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not recognised");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public static org.joda.time.DateTimeZone forOffsetHours(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        org.joda.time.DateTimeZone $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>(i0, 0);

        return $r0;
    }

    public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1, i2, i3, i4, i5;
        java.lang.IllegalArgumentException $r0, $r5, $r11, $r18;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r12, $r13, $r14;
        java.lang.String $r4, $r9, $r15;
        org.joda.time.DateTimeZone $r10, $r16;
        java.lang.ArithmeticException $r17;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 != 0 goto label01;

        if i2 != 0 goto label01;

        $r16 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r16;

     label01:
        if i0 < -23 goto label02;

        if i0 <= 23 goto label03;

     label02:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hours out of range: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label03:
        if i2 < -59 goto label04;

        if i2 <= 59 goto label05;

     label04:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label05:
        if i0 <= 0 goto label06;

        if i2 >= 0 goto label06;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Positive hours must not have negative minutes: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label06:
        i3 = i0 * 60;

        if i3 >= 0 goto label07;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        i4 = i3 - $i1;

        goto label08;

     label07:
        i4 = i3 + i2;

     label08:
        i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000);

     label09:
        goto label11;

     label10:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset is too large");

        throw $r18;

     label11:
        $r10 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5);

        return $r10;

        catch java.lang.ArithmeticException from label06 to label09 with label10;
    }

    public static org.joda.time.DateTimeZone forOffsetMillis(int)
    {
        int i0;
        java.lang.String r0, $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        org.joda.time.DateTimeZone $r6;

        i0 := @parameter0: int;

        if i0 < -86399999 goto label1;

        if i0 <= 86399999 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Millis out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0);

        $r6 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0);

        return $r6;
    }

    public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)
    {
        java.util.TimeZone r0;
        java.lang.String r1, $r8, r15, r17, r18;
        org.joda.time.tz.Provider r2;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3, $r12;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        long $l1;
        byte $b2;
        org.joda.time.DateTimeZone $r9, $r10, $r11, $r13, r14;

        r0 := @parameter0: java.util.TimeZone;

        if r0 != null goto label1;

        $r13 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r13;

     label1:
        r1 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getID()>();

        if r1 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The TimeZone id must not be null");

        throw $r12;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label3;

        $r11 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r11;

     label3:
        r14 = null;

        r15 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>(r1);

        r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        if r15 == null goto label4;

        r14 = interfaceinvoke r2.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r15);

     label4:
        if r14 != null goto label5;

        r14 = interfaceinvoke r2.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r1);

     label5:
        if r14 == null goto label6;

        return r14;

     label6:
        if r15 != null goto label9;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("GMT+");

        if $z1 != 0 goto label7;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("GMT-");

        if $z2 == 0 goto label9;

     label7:
        r17 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(3);

        i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r17);

        $l1 = (long) i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label8;

        $r10 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r10;

     label8:
        r18 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0);

        $r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r18, i0);

        return $r9;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The datetime zone id \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not recognised");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    private static org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        org.joda.time.tz.FixedDateTimeZone $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r2;

     label1:
        $r1 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r1.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, null, i0, i0);

        return $r1;
    }

    public static java.util.Set getAvailableIDs()
    {
        org.joda.time.tz.Provider $r0;
        java.util.Set $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>();

        $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>();

        return $r1;
    }

    public static org.joda.time.tz.Provider getProvider()
    {
        java.util.concurrent.atomic.AtomicReference $r0, $r2, $r3;
        java.lang.Object $r1, $r4;
        boolean $z0;
        org.joda.time.tz.Provider r5;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.joda.time.tz.Provider) $r1;

        if r5 != null goto label1;

        r5 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>();

        $r2 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r5);

        if $z0 != 0 goto label1;

        $r3 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.joda.time.tz.Provider) $r4;

     label1:
        return r5;
    }

    public static void setProvider(org.joda.time.tz.Provider) throws java.lang.SecurityException
    {
        java.lang.SecurityManager r0;
        java.util.concurrent.atomic.AtomicReference $r2;
        org.joda.time.JodaTimePermission $r3;
        org.joda.time.tz.Provider r4;

        r4 := @parameter0: org.joda.time.tz.Provider;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r3 = new org.joda.time.JodaTimePermission;

        specialinvoke $r3.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setProvider");

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label1:
        if r4 != null goto label2;

        r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>();

        goto label3;

     label2:
        staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>(r4);

     label3:
        $r2 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r4);

        return;
    }

    private static org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)
    {
        org.joda.time.tz.Provider r0;
        java.util.Set r1;
        java.lang.IllegalArgumentException $r2, $r5, $r6;
        int $i0;
        boolean $z0, $z1;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @parameter0: org.joda.time.tz.Provider;

        r1 = interfaceinvoke r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>();

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t have any available ids");

        throw $r2;

     label2:
        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>("UTC");

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t support UTC");

        throw $r6;

     label3:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r4 = interfaceinvoke r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC");

        $z1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid UTC zone provided");

        throw $r5;

     label4:
        return r0;
    }

    private static org.joda.time.tz.Provider getDefaultProvider()
    {
        org.joda.time.tz.ZoneInfoProvider $r0, $r2;
        org.joda.time.tz.Provider $r1, $r4, $r7, r17;
        java.io.File $r3;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.Exception $r8, $r10, $r13;
        java.lang.RuntimeException $r9, $r14;
        org.joda.time.tz.UTCProvider $r11;
        java.lang.SecurityException $r12, $r15;
        java.lang.String r16, r20;

     label01:
        r16 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Provider");

        if r16 == null goto label05;

     label02:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r16);

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        r17 = (org.joda.time.tz.Provider) $r6;

        $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>(r17);

     label03:
        return $r7;

     label04:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

     label07:
        r20 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Folder");

        if r20 == null goto label11;

     label08:
        $r2 = new org.joda.time.tz.ZoneInfoProvider;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r20);

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>($r3);

        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r2);

     label09:
        return $r4;

     label10:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

     label13:
        $r0 = new org.joda.time.tz.ZoneInfoProvider;

        specialinvoke $r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>("org/joda/time/tz/data");

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>($r0);

     label14:
        return $r1;

     label15:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r11 = new org.joda.time.tz.UTCProvider;

        specialinvoke $r11.<org.joda.time.tz.UTCProvider: void <init>()>();

        return $r11;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.SecurityException from label01 to label03 with label06;
        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.SecurityException from label07 to label09 with label12;
        catch java.lang.SecurityException from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public static org.joda.time.tz.NameProvider getNameProvider()
    {
        java.util.concurrent.atomic.AtomicReference $r0, $r2, $r3;
        java.lang.Object $r1, $r4;
        boolean $z0;
        org.joda.time.tz.NameProvider r5;

        $r0 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.joda.time.tz.NameProvider) $r1;

        if r5 != null goto label1;

        r5 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>();

        $r2 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r5);

        if $z0 != 0 goto label1;

        $r3 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.joda.time.tz.NameProvider) $r4;

     label1:
        return r5;
    }

    public static void setNameProvider(org.joda.time.tz.NameProvider) throws java.lang.SecurityException
    {
        java.lang.SecurityManager r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        org.joda.time.JodaTimePermission $r2;
        org.joda.time.tz.NameProvider r3;

        r3 := @parameter0: org.joda.time.tz.NameProvider;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r2 = new org.joda.time.JodaTimePermission;

        specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setNameProvider");

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        if r3 != null goto label2;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>();

     label2:
        $r1 = <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3);

        return;
    }

    private static org.joda.time.tz.NameProvider getDefaultNameProvider()
    {
        org.joda.time.tz.DefaultNameProvider $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;
        java.lang.RuntimeException $r6;
        org.joda.time.tz.NameProvider r7;
        java.lang.String r8;

        r7 = null;

     label1:
        r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.NameProvider");

        if r8 == null goto label5;

     label2:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r8);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.joda.time.tz.NameProvider) $r3;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        if r7 != null goto label8;

        $r1 = new org.joda.time.tz.DefaultNameProvider;

        specialinvoke $r1.<org.joda.time.tz.DefaultNameProvider: void <init>()>();

        r7 = $r1;

     label8:
        return r7;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.SecurityException from label1 to label5 with label6;
    }

    private static java.lang.String getConvertedId(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.joda.time.DateTimeZone$LazyInit: java.util.Map CONVERSION_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private static int parseOffset(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;
        long $l0;
        int $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter OFFSET_FORMATTER>;

        $l0 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0);

        $i1 = (int) $l0;

        $i2 = neg $i1;

        return $i2;
    }

    private static java.lang.String printOffset(int)
    {
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, i9;
        java.lang.StringBuffer $r1;
        java.lang.String $r6, $r7, $r8;

        i6 := @parameter0: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if i6 < 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i6 = neg i6;

     label2:
        i0 = i6 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r1, i0, 2);

        $i3 = i0 * 3600000;

        i7 = i6 - $i3;

        i1 = i7 / 60000;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r1, i1, 2);

        $i4 = i1 * 60000;

        i8 = i7 - $i4;

        if i8 != 0 goto label3;

        $r8 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label3:
        i2 = i8 / 1000;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r1, i2, 2);

        $i5 = i2 * 1000;

        i9 = i8 - $i5;

        if i9 != 0 goto label4;

        $r7 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r1, i9, 3);

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    protected void <init>(java.lang.String)
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.DateTimeZone: java.lang.String iID> = r1;

        return;
    }

    public final java.lang.String getID()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r1;
    }

    public abstract java.lang.String getNameKey(long);

    public final java.lang.String getShortName(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getShortName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String r1, $r3, $r4, $r6, $r7, r9;
        org.joda.time.tz.NameProvider r2;
        boolean $z0, $z1;
        int $i1;
        org.joda.time.tz.DefaultNameProvider $r5;
        java.util.Locale r8;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        r8 := @parameter1: java.util.Locale;

        if r8 != null goto label1;

        r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0);

        if r1 != null goto label2;

        $r7 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r7;

     label2:
        r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>();

        $z0 = r2 instanceof org.joda.time.tz.DefaultNameProvider;

        if $z0 == 0 goto label3;

        $r5 = (org.joda.time.tz.DefaultNameProvider) r2;

        $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $z1 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>(l0);

        r9 = virtualinvoke $r5.<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>(r8, $r6, r1, $z1);

        goto label4;

     label3:
        $r3 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        r9 = interfaceinvoke r2.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>(r8, $r3, r1);

     label4:
        if r9 == null goto label5;

        return r9;

     label5:
        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $r4 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r4;
    }

    public final java.lang.String getName(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String r1, $r3, $r4, $r6, $r7, r9;
        org.joda.time.tz.NameProvider r2;
        boolean $z0, $z1;
        int $i1;
        org.joda.time.tz.DefaultNameProvider $r5;
        java.util.Locale r8;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        r8 := @parameter1: java.util.Locale;

        if r8 != null goto label1;

        r8 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0);

        if r1 != null goto label2;

        $r7 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r7;

     label2:
        r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>();

        $z0 = r2 instanceof org.joda.time.tz.DefaultNameProvider;

        if $z0 == 0 goto label3;

        $r5 = (org.joda.time.tz.DefaultNameProvider) r2;

        $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $z1 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>(l0);

        r9 = virtualinvoke $r5.<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>(r8, $r6, r1, $z1);

        goto label4;

     label3:
        $r3 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        r9 = interfaceinvoke r2.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>(r8, $r3, r1);

     label4:
        if r9 == null goto label5;

        return r9;

     label5:
        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $r4 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r4;
    }

    public abstract int getOffset(long);

    public final int getOffset(org.joda.time.ReadableInstant)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.ReadableInstant r1;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        if r1 != null goto label1;

        $l2 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        return $i3;

     label1:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        return $i1;
    }

    public abstract int getStandardOffset(long);

    public boolean isStandardOffset(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(l0);

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getOffsetFromLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0, l2, $l5, $l7, $l8, $l11, $l12, $l14, $l15, $l16, $l17, l20, l21, l22;
        int i1, i3, i4, $i10, i23;
        byte $b6, $b9, $b13, $b18, $b19;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l5 = (long) i1;

        l2 = l0 - $l5;

        i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l2);

        if i1 == i3 goto label4;

        $i10 = i1 - i3;

        if $i10 >= 0 goto label5;

        l20 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>(l2);

        $l11 = (long) i1;

        $l12 = l0 - $l11;

        $b13 = l20 cmp $l12;

        if $b13 != 0 goto label1;

        l20 = 9223372036854775807L;

     label1:
        $l14 = (long) i3;

        $l15 = l0 - $l14;

        l21 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l15);

        $l16 = (long) i3;

        $l17 = l0 - $l16;

        $b18 = l21 cmp $l17;

        if $b18 != 0 goto label2;

        l21 = 9223372036854775807L;

     label2:
        $b19 = l20 cmp l21;

        if $b19 == 0 goto label3;

        return i1;

     label3:
        goto label5;

     label4:
        if i1 < 0 goto label5;

        l22 = virtualinvoke r0.<org.joda.time.DateTimeZone: long previousTransition(long)>(l2);

        $b6 = l22 cmp l2;

        if $b6 >= 0 goto label5;

        i23 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l22);

        i4 = i23 - i1;

        $l8 = l2 - l22;

        $l7 = (long) i4;

        $b9 = $l8 cmp $l7;

        if $b9 > 0 goto label5;

        return i23;

     label5:
        return i3;
    }

    public long convertUTCToLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0, l2, $l3, $l4, $l6, $l7;
        int i1;
        byte $b5, $b8;
        java.lang.ArithmeticException $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l3 = (long) i1;

        l2 = l0 + $l3;

        $l4 = l0 ^ l2;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label1;

        $l6 = (long) i1;

        $l7 = l0 ^ $l6;

        $b8 = $l7 cmp 0L;

        if $b8 < 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r1;

     label1:
        return l2;
    }

    public long convertLocalToUTC(long, boolean, long)
    {
        org.joda.time.DateTimeZone r0;
        long l0, l1, l3, $l5, $l6;
        boolean z0;
        int i2, i4;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        l1 := @parameter2: long;

        i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1);

        $l5 = (long) i2;

        l3 = l0 - $l5;

        i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3);

        if i4 != i2 goto label1;

        return l3;

     label1:
        $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0);

        return $l6;
    }

    public long convertLocalToUTC(long, boolean)
    {
        org.joda.time.DateTimeZone r0;
        long l0, $l2, $l3, $l4, $l5, $l7, $l8, $l9, $l10, $l12, $l13, $l14, $l15, l19, l20, $l21, l22, $l23;
        boolean z0;
        int i1, i18;
        byte $b6, $b11, $b16, $b17, $b24;
        java.lang.ArithmeticException $r1;
        org.joda.time.IllegalInstantException $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) i1;

        $l3 = l0 - $l2;

        i18 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3);

        if i1 == i18 goto label5;

        if z0 != 0 goto label1;

        if i1 >= 0 goto label5;

     label1:
        $l7 = (long) i1;

        $l8 = l0 - $l7;

        l19 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l8);

        $l9 = (long) i1;

        $l10 = l0 - $l9;

        $b11 = l19 cmp $l10;

        if $b11 != 0 goto label2;

        l19 = 9223372036854775807L;

     label2:
        $l12 = (long) i18;

        $l13 = l0 - $l12;

        l20 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l13);

        $l14 = (long) i18;

        $l15 = l0 - $l14;

        $b16 = l20 cmp $l15;

        if $b16 != 0 goto label3;

        l20 = 9223372036854775807L;

     label3:
        $b17 = l19 cmp l20;

        if $b17 == 0 goto label5;

        if z0 == 0 goto label4;

        $r2 = new org.joda.time.IllegalInstantException;

        $r3 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r2.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>(l0, $r3);

        throw $r2;

     label4:
        i18 = i1;

     label5:
        $l21 = (long) i18;

        l22 = l0 - $l21;

        $l23 = l0 ^ l22;

        $b24 = $l23 cmp 0L;

        if $b24 >= 0 goto label6;

        $l4 = (long) i18;

        $l5 = l0 ^ $l4;

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label6;

        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow");

        throw $r1;

     label6:
        return l22;
    }

    public long getMillisKeepLocal(org.joda.time.DateTimeZone, long)
    {
        org.joda.time.DateTimeZone r0, r1;
        long l0, l1, $l2;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        l0 := @parameter1: long;

        if r1 != null goto label1;

        r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        if r1 != r0 goto label2;

        return l0;

     label2:
        l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l1, 0, l0);

        return $l2;
    }

    public boolean isLocalDateTimeGap(org.joda.time.LocalDateTime)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.LocalDateTime r1;
        boolean $z0;
        org.joda.time.IllegalInstantException $r4;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: org.joda.time.LocalDateTime;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isFixed()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0);

     label2:
        return 0;

     label3:
        $r4 := @caughtexception;

        return 1;

        catch org.joda.time.IllegalInstantException from label1 to label2 with label3;
    }

    public long adjustOffset(long, boolean)
    {
        org.joda.time.DateTimeZone r0;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, $l16, $l17;
        boolean z0;
        int $i10, $i11;
        byte $b12, $b13, $b14, $b15;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        l1 = l0 - 10800000L;

        l2 = l0 + 10800000L;

        $i10 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1);

        l3 = (long) $i10;

        $i11 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l2);

        l4 = (long) $i11;

        $b12 = l3 cmp l4;

        if $b12 > 0 goto label1;

        return l0;

     label1:
        l5 = l3 - l4;

        l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>(l1);

        l7 = l6 - l5;

        l8 = l6 + l5;

        $b13 = l0 cmp l7;

        if $b13 < 0 goto label2;

        $b14 = l0 cmp l8;

        if $b14 < 0 goto label3;

     label2:
        return l0;

     label3:
        l9 = l0 - l7;

        $b15 = l9 cmp l5;

        if $b15 < 0 goto label6;

        if z0 == 0 goto label4;

        $l16 = l0;

        goto label5;

     label4:
        $l16 = l0 - l5;

     label5:
        return $l16;

     label6:
        if z0 == 0 goto label7;

        $l17 = l0 + l5;

        goto label8;

     label7:
        $l17 = l0;

     label8:
        return $l17;
    }

    public abstract boolean isFixed();

    public abstract long nextTransition(long);

    public abstract long previousTransition(long);

    public java.util.TimeZone toTimeZone()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;
        java.util.TimeZone $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1);

        return $r2;
    }

    public abstract boolean equals(java.lang.Object);

    public int hashCode()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 57 + $i0;

        return $i1;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        return $r1;
    }

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.DateTimeZone$Stub $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = new org.joda.time.DateTimeZone$Stub;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        specialinvoke $r1.<org.joda.time.DateTimeZone$Stub: void <init>(java.lang.String)>($r2);

        return $r1;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r2, $r3;

        <org.joda.time.DateTimeZone: int MAX_MILLIS> = 86399999;

        <org.joda.time.DateTimeZone: long serialVersionUID> = 5546345482340108586L;

        $r0 = <org.joda.time.UTCDateTimeZone: org.joda.time.DateTimeZone INSTANCE>;

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cProvider> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cNameProvider> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.concurrent.atomic.AtomicReference cDefault> = $r3;

        return;
    }
}
