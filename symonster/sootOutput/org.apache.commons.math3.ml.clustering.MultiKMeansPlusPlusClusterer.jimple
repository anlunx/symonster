public class org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer extends org.apache.commons.math3.ml.clustering.Clusterer
{
    private final org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer;
    private final int numTrials;
    private final org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator;

    public void <init>(org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer, int)
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r1;
        int i0;
        org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances $r2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter1: int;

        $r2 = new org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.distance.DistanceMeasure getDistanceMeasure()>();

        specialinvoke $r2.<org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r3);

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: void <init>(org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer,int,org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator)>(r1, i0, $r2);

        return;
    }

    public void <init>(org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer, int, org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator)
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r1;
        int i0;
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator r2;
        org.apache.commons.math3.ml.distance.DistanceMeasure $r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        r1 := @parameter0: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.distance.DistanceMeasure getDistanceMeasure()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.Clusterer: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>($r3);

        r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer> = r1;

        r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: int numTrials> = i0;

        r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator> = r2;

        return;
    }

    public org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer getClusterer()
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer>;

        return $r1;
    }

    public int getNumTrials()
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: int numTrials>;

        return $i0;
    }

    public org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator getClusterEvaluator()
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator>;

        return $r1;
    }

    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        java.util.List r2, r6;
        double d0, d1;
        int $i0, i1;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer $r3;
        org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        r6 = null;

        d1 = #Infinity;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: int numTrials>;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer>;

        r2 = virtualinvoke $r3.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: java.util.List cluster(java.util.Collection)>(r1);

        $r4 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator>;

        d0 = virtualinvoke $r4.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: double score(java.util.List)>(r2);

        $r5 = r0.<org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator>;

        $z0 = virtualinvoke $r5.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: boolean isBetterScore(double,double)>(d0, d1);

        if $z0 == 0 goto label2;

        r6 = r2;

        d1 = d0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r6;
    }
}
