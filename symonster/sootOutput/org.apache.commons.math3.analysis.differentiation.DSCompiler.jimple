public class org.apache.commons.math3.analysis.differentiation.DSCompiler extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicReference compilers;
    private final int parameters;
    private final int order;
    private final int[][] sizes;
    private final int[][] derivativesIndirection;
    private final int[] lowerIndirection;
    private final int[][][] multIndirection;
    private final int[][][] compIndirection;

    private void <init>(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1, r2;
        int i0, i1;
        int[][] $r3, $r4, $r8, $r9;
        int[] $r5, $r6;
        int[][][] $r7, $r10;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters> = i0;

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order> = i1;

        $r3 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] compileSizes(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler)>(i0, i1, r1);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes> = $r3;

        $r4 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] compileDerivativesIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>(i0, i1, r1, r2);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection> = $r4;

        $r5 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] compileLowerIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>(i0, i1, r1, r2);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection> = $r5;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $r7 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compileMultiplicationIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[])>(i0, i1, r1, r2, $r6);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection> = $r7;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $r8 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r10 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compileCompositionIndirection(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler,int[][],int[][])>(i0, i1, r1, r2, $r9, $r8);

        r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection> = $r10;

        return;
    }

    public static org.apache.commons.math3.analysis.differentiation.DSCompiler getCompiler(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i18, i19, i20, $i21, i22;
        org.apache.commons.math3.analysis.differentiation.DSCompiler[][] r0, r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r2, $r9, $r11, $r14, $r21, $r23, $r24, $r25;
        java.util.concurrent.atomic.AtomicReference $r4, $r7;
        java.lang.Object $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler[] $r6, $r8, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r22;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (org.apache.commons.math3.analysis.differentiation.DSCompiler[][]) $r5;

        if r0 == null goto label01;

        $i15 = lengthof r0;

        if $i15 <= i0 goto label01;

        $r19 = r0[i0];

        $i16 = lengthof $r19;

        if $i16 <= i1 goto label01;

        $r20 = r0[i0];

        $r21 = $r20[i1];

        if $r21 == null goto label01;

        $r22 = r0[i0];

        $r23 = $r22[i1];

        return $r23;

     label01:
        if r0 != null goto label02;

        $i17 = 0;

        goto label03;

     label02:
        $i17 = lengthof r0;

     label03:
        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i0, $i17);

        if r0 != null goto label04;

        $i18 = 0;

        goto label05;

     label04:
        $r6 = r0[0];

        $i18 = lengthof $r6;

     label05:
        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i1, $i18);

        $i6 = i2 + 1;

        $i5 = i3 + 1;

        r1 = newmultiarray (org.apache.commons.math3.analysis.differentiation.DSCompiler)[$i6][$i5];

        if r0 == null goto label07;

        i19 = 0;

     label06:
        $i11 = lengthof r0;

        if i19 >= $i11 goto label07;

        $r18 = r0[i19];

        $r17 = r1[i19];

        $r16 = r0[i19];

        $i12 = lengthof $r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r17, 0, $i12);

        i19 = i19 + 1;

        goto label06;

     label07:
        i20 = 0;

     label08:
        $i21 = i0 + i1;

        if i20 > $i21 goto label16;

        $i7 = i20 - i0;

        i22 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i7);

     label09:
        $i8 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, i20);

        if i22 > $i8 goto label15;

        i4 = i20 - i22;

        $r10 = r1[i4];

        $r11 = $r10[i22];

        if $r11 != null goto label14;

        if i4 != 0 goto label10;

        $r24 = null;

        goto label11;

     label10:
        $i9 = i4 - 1;

        $r12 = r1[$i9];

        $r24 = $r12[i22];

     label11:
        r2 = $r24;

        if i22 != 0 goto label12;

        $r25 = null;

        goto label13;

     label12:
        $r13 = r1[i4];

        $i10 = i22 - 1;

        $r25 = $r13[$i10];

     label13:
        $r15 = r1[i4];

        $r14 = new org.apache.commons.math3.analysis.differentiation.DSCompiler;

        specialinvoke $r14.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void <init>(int,int,org.apache.commons.math3.analysis.differentiation.DSCompiler,org.apache.commons.math3.analysis.differentiation.DSCompiler)>(i4, i22, r2, $r25);

        $r15[i22] = $r14;

     label14:
        i22 = i22 + 1;

        goto label09;

     label15:
        i20 = i20 + 1;

        goto label08;

     label16:
        $r7 = <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r0, r1);

        $r8 = r1[i0];

        $r9 = $r8[i1];

        return $r9;
    }

    private static int[][] compileSizes(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int[][] r1, $r2;
        int[] $r3, $r4, $r5, $r6, $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        r1 = newmultiarray (int)[$i3][$i2];

        if i0 != 0 goto label1;

        $r7 = r1[0];

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r7, 1);

        goto label3;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i0);

        $r3 = r1[i0];

        $r3[0] = 1;

        i10 = 0;

     label2:
        if i10 >= i1 goto label3;

        $r6 = r1[i0];

        $i9 = i10 + 1;

        $r4 = r1[i0];

        $i7 = $r4[i10];

        $i4 = i0 - 1;

        $r5 = r1[$i4];

        $i5 = i10 + 1;

        $i6 = $r5[$i5];

        $i8 = $i7 + $i6;

        $r6[$i9] = $i8;

        i10 = i10 + 1;

        goto label2;

     label3:
        return r1;
    }

    private static int[][] compileDerivativesIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1;
        int[][] r2, $r3, $r4, $r5, $r6, $r10;
        int[] $r7, $r8, $r9, $r11, $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        $r3 = newmultiarray (int)[1][i0];

        return $r3;

     label2:
        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        i2 = lengthof $r4;

        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        i3 = lengthof $r5;

        $i4 = i2 + i3;

        r2 = newmultiarray (int)[$i4][i0];

        i11 = 0;

     label3:
        if i11 >= i2 goto label4;

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r12 = $r10[i11];

        $r11 = r2[i11];

        $i10 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, 0, $i10);

        i11 = i11 + 1;

        goto label3;

     label4:
        i12 = 0;

     label5:
        if i12 >= i3 goto label6;

        $r6 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r8 = $r6[i12];

        $i5 = i2 + i12;

        $r7 = r2[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, i0);

        $i6 = i2 + i12;

        $r9 = r2[$i6];

        $i7 = i0 - 1;

        $i8 = $r9[$i7];

        $i9 = $i8 + 1;

        $r9[$i7] = $i9;

        i12 = i12 + 1;

        goto label5;

     label6:
        return r2;
    }

    private static int[] compileLowerIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1;
        int[] r2, $r3, $r4, $r5, $r6, $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        if i0 == 0 goto label1;

        if i1 > 1 goto label2;

     label1:
        $r3 = newarray (int)[1];

        $r3[0] = 0;

        return $r3;

     label2:
        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        i2 = lengthof $r4;

        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        i3 = lengthof $r5;

        $i4 = i2 + i3;

        r2 = newarray (int)[$i4];

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, i2);

        i9 = 0;

     label3:
        if i9 >= i3 goto label4;

        $i5 = i2 + i9;

        $i6 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $r7 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] lowerIndirection>;

        $i7 = $r7[i9];

        $i8 = $i6 + $i7;

        r2[$i5] = $i8;

        i9 = i9 + 1;

        goto label3;

     label4:
        return r2;
    }

    private static int[][][] compileMultiplicationIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[])
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1;
        int[] r2, r6, r7, $r10, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        int[][][] r3, $r8, $r11, $r12, $r13, $r14;
        int[][] r4, $r9, $r17, $r19;
        java.util.ArrayList $r15, $r16;
        java.lang.Object[] $r18;
        java.lang.Object $r20, $r21;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r2 := @parameter4: int[];

        if i0 == 0 goto label01;

        if i1 != 0 goto label02;

     label01:
        $r8 = newarray (int[][])[1];

        $r9 = newarray (int[])[1];

        $r10 = newarray (int)[3];

        $r10[0] = 1;

        $r10[1] = 0;

        $r10[2] = 0;

        $r9[0] = $r10;

        $r8[0] = $r9;

        return $r8;

     label02:
        $r11 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        i2 = lengthof $r11;

        $r12 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        i3 = lengthof $r12;

        $i4 = i2 + i3;

        r3 = newarray (int[][])[$i4];

        $r13 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r3, 0, i2);

        i31 = 0;

     label03:
        if i31 >= i3 goto label12;

        $r14 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        r4 = $r14[i31];

        $r15 = new java.util.ArrayList;

        $i5 = lengthof r4;

        $i6 = $i5 * 2;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i6);

        i32 = 0;

     label04:
        $i7 = lengthof r4;

        if i32 >= $i7 goto label05;

        $r22 = newarray (int)[3];

        $r23 = r4[i32];

        $i21 = $r23[0];

        $r22[0] = $i21;

        $r24 = r4[i32];

        $i22 = $r24[1];

        $i23 = r2[$i22];

        $r22[1] = $i23;

        $r25 = r4[i32];

        $i24 = $r25[2];

        $i25 = i2 + $i24;

        $r22[2] = $i25;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r22);

        $r26 = newarray (int)[3];

        $r27 = r4[i32];

        $i26 = $r27[0];

        $r26[0] = $i26;

        $r28 = r4[i32];

        $i27 = $r28[1];

        $i28 = i2 + $i27;

        $r26[1] = $i28;

        $r29 = r4[i32];

        $i29 = $r29[2];

        $i30 = r2[$i29];

        $r26[2] = $i30;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r26);

        i32 = i32 + 1;

        goto label04;

     label05:
        $r16 = new java.util.ArrayList;

        $i8 = interfaceinvoke $r15.<java.util.List: int size()>();

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i8);

        i33 = 0;

     label06:
        $i9 = interfaceinvoke $r15.<java.util.List: int size()>();

        if i33 >= $i9 goto label11;

        $r20 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i33);

        r6 = (int[]) $r20;

        $i12 = r6[0];

        if $i12 <= 0 goto label10;

        i34 = i33 + 1;

     label07:
        $i13 = interfaceinvoke $r15.<java.util.List: int size()>();

        if i34 >= $i13 goto label09;

        $r21 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i34);

        r7 = (int[]) $r21;

        $i15 = r6[1];

        $i14 = r7[1];

        if $i15 != $i14 goto label08;

        $i17 = r6[2];

        $i16 = r7[2];

        if $i17 != $i16 goto label08;

        $i19 = r6[0];

        $i18 = r7[0];

        $i20 = $i19 + $i18;

        r6[0] = $i20;

        r7[0] = 0;

     label08:
        i34 = i34 + 1;

        goto label07;

     label09:
        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>(r6);

     label10:
        i33 = i33 + 1;

        goto label06;

     label11:
        $i10 = i2 + i31;

        $i11 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r17 = newarray (int[])[$i11];

        $r18 = interfaceinvoke $r16.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        $r19 = (int[][]) $r18;

        r3[$i10] = $r19;

        i31 = i31 + 1;

        goto label03;

     label12:
        return r3;
    }

    private static int[][][] compileCompositionIndirection(int, int, org.apache.commons.math3.analysis.differentiation.DSCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler, int[][], int[][]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, i45, i46, i47, i48, i49, i50, i51, i52;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1;
        int[][] r2, r3, $r8, $r16, $r18, $r21, $r23, r24;
        int[][][] r4, $r7, $r10, $r11, $r12, $r14;
        int[] r6, $r9, $r22, r25, r26, r27, r29, r30;
        java.util.ArrayList $r13, $r15;
        java.lang.Object[] $r17;
        java.lang.Object $r19, $r20;
        boolean $z1, $z4, z5, $z6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter3: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r2 := @parameter4: int[][];

        r3 := @parameter5: int[][];

        if i0 == 0 goto label01;

        if i1 != 0 goto label02;

     label01:
        $r7 = newarray (int[][])[1];

        $r8 = newarray (int[])[1];

        $r9 = newarray (int)[2];

        $r9[0] = 1;

        $r9[1] = 0;

        $r8[0] = $r9;

        $r7[0] = $r8;

        return $r7;

     label02:
        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        i2 = lengthof $r10;

        $r11 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        i3 = lengthof $r11;

        $i4 = i2 + i3;

        r4 = newarray (int[][])[$i4];

        $r12 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r4, 0, i2);

        i44 = 0;

     label03:
        if i44 >= i3 goto label25;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        r24 = $r14[i44];

        i45 = lengthof r24;

        i46 = 0;

     label04:
        if i46 >= i45 goto label12;

        r25 = r24[i46];

        $i19 = lengthof r25;

        $i20 = $i19 + 1;

        r26 = newarray (int)[$i20];

        $i21 = r25[0];

        r26[0] = $i21;

        $i22 = r25[1];

        $i23 = $i22 + 1;

        r26[1] = $i23;

        r27 = newarray (int)[i0];

        $i24 = i0 - 1;

        r27[$i24] = 1;

        $i25 = lengthof r25;

        $i26 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>(i0, i1, r2, r27);

        r26[$i25] = $i26;

        i47 = 2;

     label05:
        $i27 = lengthof r25;

        if i47 >= $i27 goto label06;

        $i42 = r25[i47];

        $r23 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $i43 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int convertIndex(int,int,int[][],int,int,int[][])>($i42, i0, $r23, i0, i1, r2);

        r26[i47] = $i43;

        i47 = i47 + 1;

        goto label05;

     label06:
        $i28 = lengthof r26;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r26, 2, $i28);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r26);

        i48 = 2;

     label07:
        $i29 = lengthof r25;

        if i48 >= $i29 goto label11;

        $i30 = lengthof r25;

        r6 = newarray (int)[$i30];

        $i31 = r25[0];

        r6[0] = $i31;

        $i32 = r25[1];

        r6[1] = $i32;

        i49 = 2;

     label08:
        $i33 = lengthof r25;

        if i49 >= $i33 goto label10;

        $i35 = r25[i49];

        $r21 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $i36 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int convertIndex(int,int,int[][],int,int,int[][])>($i35, i0, $r21, i0, i1, r2);

        r6[i49] = $i36;

        if i49 != i48 goto label09;

        $i37 = r6[i49];

        $r22 = r3[$i37];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r27, 0, i0);

        $i38 = i0 - 1;

        $i39 = r27[$i38];

        $i40 = $i39 + 1;

        r27[$i38] = $i40;

        $i41 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>(i0, i1, r2, r27);

        r6[i49] = $i41;

     label09:
        i49 = i49 + 1;

        goto label08;

     label10:
        $i34 = lengthof r6;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r6, 2, $i34);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r6);

        i48 = i48 + 1;

        goto label07;

     label11:
        i46 = i46 + 1;

        goto label04;

     label12:
        $r15 = new java.util.ArrayList;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i5);

        i50 = 0;

     label13:
        $i6 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i50 >= $i6 goto label24;

        $r19 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i50);

        r29 = (int[]) $r19;

        $i9 = r29[0];

        if $i9 <= 0 goto label23;

        i51 = i50 + 1;

     label14:
        $i10 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i51 >= $i10 goto label22;

        $r20 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i51);

        r30 = (int[]) $r20;

        $i12 = lengthof r29;

        $i11 = lengthof r30;

        if $i12 != $i11 goto label15;

        $z4 = 1;

        goto label16;

     label15:
        $z4 = 0;

     label16:
        z5 = $z4;

        i52 = 1;

     label17:
        if z5 == 0 goto label20;

        $i16 = lengthof r29;

        if i52 >= $i16 goto label20;

        $z1 = z5;

        $i18 = r29[i52];

        $i17 = r30[i52];

        if $i18 != $i17 goto label18;

        $z6 = 1;

        goto label19;

     label18:
        $z6 = 0;

     label19:
        z5 = $z1 & $z6;

        i52 = i52 + 1;

        goto label17;

     label20:
        if z5 == 0 goto label21;

        $i14 = r29[0];

        $i13 = r30[0];

        $i15 = $i14 + $i13;

        r29[0] = $i15;

        r30[0] = 0;

     label21:
        i51 = i51 + 1;

        goto label14;

     label22:
        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r29);

     label23:
        i50 = i50 + 1;

        goto label13;

     label24:
        $i7 = i2 + i44;

        $i8 = interfaceinvoke $r15.<java.util.List: int size()>();

        $r16 = newarray (int[])[$i8];

        $r17 = interfaceinvoke $r15.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (int[][]) $r17;

        r4[$i7] = $r18;

        i44 = i44 + 1;

        goto label03;

     label25:
        return r4;
    }

    public transient int getPartialDerivativeIndex(int[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[][] $r2;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: int[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        if $i0 == $i1 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r1;

        $i6 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i6);

        throw $r3;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $i4 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>($i3, $i2, $r2, r1);

        return $i4;
    }

    private static transient int getPartialDerivativeIndex(int, int, int[][], int[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        int[][] r0;
        int[] r1, $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Integer $r4, $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[][];

        r1 := @parameter3: int[];

        i5 = 0;

        i6 = i1;

        i7 = 0;

        i8 = i0 - 1;

     label1:
        if i8 < 0 goto label4;

        i9 = r1[i8];

        i7 = i7 + i9;

        if i7 <= i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label2:
        $i2 = i9;

        i9 = i9 + -1;

        if $i2 <= 0 goto label3;

        $r2 = r0[i8];

        $i3 = i6;

        i6 = i6 + -1;

        $i4 = $r2[$i3];

        i5 = i5 + $i4;

        goto label2;

     label3:
        i8 = i8 + -1;

        goto label1;

     label4:
        return i5;
    }

    private static int convertIndex(int, int, int[][], int, int, int[][]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        int i0, i1, i2, i3, $i4, $i5;
        int[][] r0, r1;
        int[] r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[][];

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: int[][];

        r2 = newarray (int)[i2];

        $r3 = r0[i0];

        $i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i4);

        $i5 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int,int,int[][],int[])>(i2, i3, r1, r2);

        return $i5;
    }

    public int[] getPartialDerivativeOrders(int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int i0;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] derivativesIndirection>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getFreeParameters()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        return $i0;
    }

    public int getOrder()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        return $i0;
    }

    public int getSize()
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        int $i0, $i1, $i2;
        int[][] $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][] sizes>;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $r2 = $r1[$i0];

        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = $r2[$i1];

        return $i2;
    }

    public void linearCombination(double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double d0, d1, $d2, $d3, $d4;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        d1 := @parameter3: double;

        r2 := @parameter4: double[];

        i1 := @parameter5: int;

        r3 := @parameter6: double[];

        i2 := @parameter7: int;

        i7 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i7 >= $i3 goto label2;

        $i6 = i2 + i7;

        $i4 = i0 + i7;

        $d3 = r1[$i4];

        $i5 = i1 + i7;

        $d2 = r2[$i5];

        $d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, $d3, d1, $d2);

        r3[$i6] = $d4;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void linearCombination(double, double[], int, double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        double[] r1, r2, r3, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        d1 := @parameter3: double;

        r2 := @parameter4: double[];

        i1 := @parameter5: int;

        d2 := @parameter6: double;

        r3 := @parameter7: double[];

        i2 := @parameter8: int;

        r4 := @parameter9: double[];

        i3 := @parameter10: int;

        i9 = 0;

     label1:
        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i9 >= $i4 goto label2;

        $i8 = i3 + i9;

        $i5 = i0 + i9;

        $d5 = r1[$i5];

        $i6 = i1 + i9;

        $d4 = r2[$i6];

        $i7 = i2 + i9;

        $d3 = r3[$i7];

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>(d0, $d5, d1, $d4, d2, $d3);

        r4[$i8] = $d6;

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }

    public void linearCombination(double, double[], int, double, double[], int, double, double[], int, double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        double[] r1, r2, r3, r4, r5;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        d1 := @parameter3: double;

        r2 := @parameter4: double[];

        i1 := @parameter5: int;

        d2 := @parameter6: double;

        r3 := @parameter7: double[];

        i2 := @parameter8: int;

        d3 := @parameter9: double;

        r4 := @parameter10: double[];

        i3 := @parameter11: int;

        r5 := @parameter12: double[];

        i4 := @parameter13: int;

        i11 = 0;

     label1:
        $i5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i11 >= $i5 goto label2;

        $i10 = i4 + i11;

        $i6 = i0 + i11;

        $d7 = r1[$i6];

        $i7 = i1 + i11;

        $d6 = r2[$i7];

        $i8 = i2 + i11;

        $d5 = r3[$i8];

        $i9 = i3 + i11;

        $d4 = r4[$i9];

        $d8 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>(d0, $d7, d1, $d6, d2, $d5, d3, $d4);

        r5[$i10] = $d8;

        i11 = i11 + 1;

        goto label1;

     label2:
        return;
    }

    public void add(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        i7 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i7 >= $i3 goto label2;

        $i6 = i2 + i7;

        $i4 = i0 + i7;

        $d1 = r1[$i4];

        $i5 = i1 + i7;

        $d0 = r2[$i5];

        $d2 = $d1 + $d0;

        r3[$i6] = $d2;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void subtract(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        i7 = 0;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i7 >= $i3 goto label2;

        $i6 = i2 + i7;

        $i4 = i0 + i7;

        $d1 = r1[$i4];

        $i5 = i1 + i7;

        $d0 = r2[$i5];

        $d2 = $d1 - $d0;

        r3[$i6] = $d2;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void multiply(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        int[][] r4;
        int[][][] $r5, $r6;
        int[] $r7, $r8, $r9;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        i11 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        $i3 = lengthof $r5;

        if i11 >= $i3 goto label4;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] multIndirection>;

        r4 = $r6[i11];

        d5 = 0.0;

        i12 = 0;

     label2:
        $i4 = lengthof r4;

        if i12 >= $i4 goto label3;

        $r7 = r4[i12];

        $i6 = $r7[0];

        $d1 = (double) $i6;

        $r8 = r4[i12];

        $i7 = $r8[1];

        $i8 = i0 + $i7;

        $d0 = r1[$i8];

        $d3 = $d1 * $d0;

        $r9 = r4[i12];

        $i9 = $r9[2];

        $i10 = i1 + $i9;

        $d2 = r2[$i10];

        $d4 = $d3 * $d2;

        d5 = d5 + $d4;

        i12 = i12 + 1;

        goto label2;

     label3:
        $i5 = i2 + i11;

        r3[$i5] = d5;

        i11 = i11 + 1;

        goto label1;

     label4:
        return;
    }

    public void divide(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, i2, $i3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,int,double[],int)>(r2, i0, -1, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>(r1, i0, r4, 0, r3, i2);

        return;
    }

    public void remainder(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        $d3 = r1[i0];

        $d2 = r2[i1];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d3, $d2);

        $d4 = r1[i0];

        $d6 = $d4 - d0;

        $d5 = r2[i1];

        $d7 = $d6 / $d5;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d7);

        r3[i2] = d0;

        i7 = 1;

     label1:
        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        if i7 >= $i3 goto label2;

        $i6 = i2 + i7;

        $i4 = i0 + i7;

        $d10 = r1[$i4];

        $i5 = i1 + i7;

        $d8 = r2[$i5];

        $d9 = d1 * $d8;

        $d11 = $d10 - $d9;

        r3[$i6] = $d11;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void pow(double, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i5, $i6, $i9, i10, i11;
        byte $b4, $b7, $b8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        r2 := @parameter3: double[];

        i1 := @parameter4: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $b4 = d0 cmpl 0.0;

        if $b4 != 0 goto label4;

        $d5 = r1[i0];

        $b7 = $d5 cmpl 0.0;

        if $b7 != 0 goto label3;

        r3[0] = 1.0;

        d7 = #Infinity;

        i10 = 1;

     label1:
        $i9 = lengthof r3;

        if i10 >= $i9 goto label2;

        d7 = neg d7;

        r3[i10] = d7;

        i10 = i10 + 1;

        goto label1;

     label2:
        goto label6;

     label3:
        $d6 = r1[i0];

        $b8 = $d6 cmpg 0.0;

        if $b8 >= 0 goto label6;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, #NaN);

        goto label6;

     label4:
        $d1 = r1[i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d0, $d1);

        r3[0] = $d2;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        i11 = 1;

     label5:
        $i5 = lengthof r3;

        if i11 >= $i5 goto label6;

        $i6 = i11 - 1;

        $d3 = r3[$i6];

        $d4 = d8 * $d3;

        r3[i11] = $d4;

        i11 = i11 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void pow(double[], int, double, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        r2 := @parameter3: double[];

        i1 := @parameter4: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d3 = r1[i0];

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $d1 = (double) $i4;

        $d2 = d0 - $d1;

        d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d2);

        i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

     label1:
        if i6 <= 0 goto label2;

        r3[i6] = d9;

        $d8 = r1[i0];

        d9 = d9 * $d8;

        i6 = i6 + -1;

        goto label1;

     label2:
        r3[0] = d9;

        d10 = d0;

        i7 = 1;

     label3:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label4;

        $d4 = r3[i7];

        $d5 = $d4 * d10;

        r3[i7] = $d5;

        $d6 = (double) i7;

        $d7 = d0 - $d6;

        d10 = d10 * $d7;

        i7 = i7 + 1;

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void pow(double[], int, int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, $i17;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8, d9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: double[];

        i2 := @parameter4: int;

        if i1 != 0 goto label1;

        r2[i2] = 1.0;

        $i10 = i2 + 1;

        $i11 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $i12 = i2 + $i11;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r2, $i10, $i12, 0.0);

        return;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i4 = 1 + $i3;

        r3 = newarray (double)[$i4];

        if i1 <= 0 goto label4;

        $i8 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        i13 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i8, i1);

        $d4 = r1[i0];

        $i9 = i1 - i13;

        d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d4, $i9);

        i14 = i13;

     label2:
        if i14 <= 0 goto label3;

        r3[i14] = d6;

        $d5 = r1[i0];

        d6 = d6 * $d5;

        i14 = i14 + -1;

        goto label2;

     label3:
        r3[0] = d6;

        goto label6;

     label4:
        $d0 = r1[i0];

        d7 = 1.0 / $d0;

        $i5 = neg i1;

        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d7, $i5);

        i15 = 0;

     label5:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i15 > $i6 goto label6;

        r3[i15] = d8;

        d8 = d8 * d7;

        i15 = i15 + 1;

        goto label5;

     label6:
        d9 = (double) i1;

        i16 = 1;

     label7:
        $i17 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i16 > $i17 goto label8;

        $d1 = r3[i16];

        $d2 = $d1 * d9;

        r3[i16] = $d2;

        $i7 = i1 - i16;

        $d3 = (double) $i7;

        d9 = d9 * $d3;

        i16 = i16 + 1;

        goto label7;

     label8:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i2);

        return;
    }

    public void pow(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4, r5;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void log(double[],int,double[],int)>(r1, i0, r4, 0);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r5 = newarray (double)[$i4];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>(r4, 0, r2, i1, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void exp(double[],int,double[],int)>(r5, 0, r3, i2);

        return;
    }

    public void rootN(double[], int, int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, $d23, $d24;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: double[];

        i2 := @parameter4: int;

        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i4 = 1 + $i3;

        r3 = newarray (double)[$i4];

        if i1 != 2 goto label1;

        $d19 = r1[i0];

        $d20 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d19);

        r3[0] = $d20;

        $d21 = r3[0];

        d22 = 0.5 / $d21;

        goto label3;

     label1:
        if i1 != 3 goto label2;

        $d13 = r1[i0];

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double cbrt(double)>($d13);

        r3[0] = $d14;

        $d15 = r3[0];

        $d17 = 3.0 * $d15;

        $d16 = r3[0];

        $d18 = $d17 * $d16;

        d22 = 1.0 / $d18;

        goto label3;

     label2:
        $d4 = r1[i0];

        $d2 = (double) i1;

        $d3 = 1.0 / $d2;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d4, $d3);

        r3[0] = $d5;

        $d7 = (double) i1;

        $d6 = r3[0];

        $i5 = i1 - 1;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d6, $i5);

        $d9 = $d7 * $d8;

        d22 = 1.0 / $d9;

     label3:
        $d23 = (double) i1;

        d0 = 1.0 / $d23;

        $d24 = r1[i0];

        d1 = 1.0 / $d24;

        i6 = 1;

     label4:
        $i7 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i6 > $i7 goto label5;

        r3[i6] = d22;

        $d10 = (double) i6;

        $d11 = d0 - $d10;

        $d12 = d1 * $d11;

        d22 = d22 * $d12;

        i6 = i6 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i2);

        return;
    }

    public void exp(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d0);

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, $d1);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void expm1(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double expm1(double)>($d0);

        r3[0] = $d1;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i5 = 1 + $i4;

        $d2 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d2);

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r3, 1, $i5, $d3);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void log(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d1 = r1[i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        r3[0] = $d2;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d3 = r1[i0];

        d0 = 1.0 / $d3;

        d6 = d0;

        i7 = 1;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        r3[i7] = d6;

        $i6 = neg i7;

        $d4 = (double) $i6;

        $d5 = $d4 * d0;

        d6 = d6 * $d5;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void log1p(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d1 = r1[i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d1);

        r3[0] = $d2;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d3 = r1[i0];

        $d4 = 1.0 + $d3;

        d0 = 1.0 / $d4;

        d7 = d0;

        i7 = 1;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        r3[i7] = d7;

        $i6 = neg i7;

        $d5 = (double) $i6;

        $d6 = $d5 * d0;

        d7 = d7 * $d6;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void log10(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d1 = r1[i0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log10(double)>($d1);

        r3[0] = $d2;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d3 = r1[i0];

        d0 = 1.0 / $d3;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(10.0);

        d7 = d0 / $d4;

        i7 = 1;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        r3[i7] = d7;

        $i6 = neg i7;

        $d5 = (double) $i6;

        $d6 = $d5 * d0;

        d7 = d7 * $d6;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void cos(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d0);

        r3[0] = $d1;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d2 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d2);

        $d4 = neg $d3;

        r3[1] = $d4;

        i7 = 2;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        $i6 = i7 - 2;

        $d5 = r3[$i6];

        $d6 = neg $d5;

        r3[i7] = $d6;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void sin(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d0);

        r3[0] = $d1;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d2 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>($d2);

        r3[1] = $d3;

        i7 = 2;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        $i6 = i7 - 2;

        $d4 = r3[$i6];

        $d5 = neg $d4;

        r3[i7] = $d5;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void tan(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d2 = r1[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tan(double)>($d2);

        r3[0] = d0;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i6 = $i5 + 2;

        r4 = newarray (double)[$i6];

        r4[1] = 1.0;

        d1 = d0 * d0;

        i15 = 1;

     label1:
        $i7 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i15 > $i7 goto label7;

        d16 = 0.0;

        $i8 = i15 + 1;

        $d4 = (double) i15;

        $d3 = r4[i15];

        $d5 = $d4 * $d3;

        r4[$i8] = $d5;

        i16 = i15 + 1;

     label2:
        if i16 < 0 goto label5;

        $d7 = d16 * d1;

        $d6 = r4[i16];

        d16 = $d7 + $d6;

        if i16 <= 2 goto label3;

        $i14 = i16 - 2;

        $i10 = i16 - 1;

        $d10 = (double) $i10;

        $i11 = i16 - 1;

        $d9 = r4[$i11];

        $d14 = $d10 * $d9;

        $i12 = i16 - 3;

        $d12 = (double) $i12;

        $i13 = i16 - 3;

        $d11 = r4[$i13];

        $d13 = $d12 * $d11;

        $d15 = $d14 + $d13;

        r4[$i14] = $d15;

        goto label4;

     label3:
        if i16 != 2 goto label4;

        $d8 = r4[1];

        r4[0] = $d8;

     label4:
        i16 = i16 + -2;

        goto label2;

     label5:
        $i9 = i15 & 1;

        if $i9 != 0 goto label6;

        d16 = d16 * d0;

     label6:
        r3[i15] = d16;

        i15 = i15 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void acos(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = -1.0;

        d1 = d0 * d0;

        $d4 = 1.0 - d1;

        d2 = 1.0 / $d4;

        d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d5 = r4[0];

        $d6 = d21 * $d5;

        r3[1] = $d6;

        i17 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i17 > $i6 goto label7;

        d22 = 0.0;

        $i9 = i17 - 1;

        $i7 = i17 - 1;

        $d8 = (double) $i7;

        $i8 = i17 - 2;

        $d7 = r4[$i8];

        $d9 = $d8 * $d7;

        r4[$i9] = $d9;

        i18 = i17 - 1;

     label2:
        if i18 < 0 goto label5;

        $d12 = d22 * d1;

        $d11 = r4[i18];

        d22 = $d12 + $d11;

        if i18 <= 2 goto label3;

        $i16 = i18 - 2;

        $i11 = i18 - 1;

        $d15 = (double) $i11;

        $i12 = i18 - 1;

        $d14 = r4[$i12];

        $d19 = $d15 * $d14;

        $i13 = 2 * i17;

        $i14 = $i13 - i18;

        $d17 = (double) $i14;

        $i15 = i18 - 3;

        $d16 = r4[$i15];

        $d18 = $d17 * $d16;

        $d20 = $d19 + $d18;

        r4[$i16] = $d20;

        goto label4;

     label3:
        if i18 != 2 goto label4;

        $d13 = r4[1];

        r4[0] = $d13;

     label4:
        i18 = i18 + -2;

        goto label2;

     label5:
        $i10 = i17 & 1;

        if $i10 != 0 goto label6;

        d22 = d22 * d0;

     label6:
        d21 = d21 * d2;

        $d10 = d21 * d22;

        r3[i17] = $d10;

        i17 = i17 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void asin(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = 1.0;

        d1 = d0 * d0;

        $d4 = 1.0 - d1;

        d2 = 1.0 / $d4;

        d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d5 = r4[0];

        $d6 = d21 * $d5;

        r3[1] = $d6;

        i17 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i17 > $i6 goto label7;

        d22 = 0.0;

        $i9 = i17 - 1;

        $i7 = i17 - 1;

        $d8 = (double) $i7;

        $i8 = i17 - 2;

        $d7 = r4[$i8];

        $d9 = $d8 * $d7;

        r4[$i9] = $d9;

        i18 = i17 - 1;

     label2:
        if i18 < 0 goto label5;

        $d12 = d22 * d1;

        $d11 = r4[i18];

        d22 = $d12 + $d11;

        if i18 <= 2 goto label3;

        $i16 = i18 - 2;

        $i11 = i18 - 1;

        $d15 = (double) $i11;

        $i12 = i18 - 1;

        $d14 = r4[$i12];

        $d19 = $d15 * $d14;

        $i13 = 2 * i17;

        $i14 = $i13 - i18;

        $d17 = (double) $i14;

        $i15 = i18 - 3;

        $d16 = r4[$i15];

        $d18 = $d17 * $d16;

        $d20 = $d19 + $d18;

        r4[$i16] = $d20;

        goto label4;

     label3:
        if i18 != 2 goto label4;

        $d13 = r4[1];

        r4[0] = $d13;

     label4:
        i18 = i18 + -2;

        goto label2;

     label5:
        $i10 = i17 & 1;

        if $i10 != 0 goto label6;

        d22 = d22 * d0;

     label6:
        d21 = d21 * d2;

        $d10 = d21 * d22;

        r3[i17] = $d10;

        i17 = i17 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void atan(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = 1.0;

        d1 = d0 * d0;

        $d4 = 1.0 + d1;

        d2 = 1.0 / $d4;

        d21 = d2;

        $d5 = r4[0];

        $d6 = d2 * $d5;

        r3[1] = $d6;

        i18 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i18 > $i6 goto label7;

        d22 = 0.0;

        $i9 = i18 - 1;

        $i7 = neg i18;

        $d8 = (double) $i7;

        $i8 = i18 - 2;

        $d7 = r4[$i8];

        $d9 = $d8 * $d7;

        r4[$i9] = $d9;

        i19 = i18 - 1;

     label2:
        if i19 < 0 goto label5;

        $d12 = d22 * d1;

        $d11 = r4[i19];

        d22 = $d12 + $d11;

        if i19 <= 2 goto label3;

        $i17 = i19 - 2;

        $i11 = i19 - 1;

        $d15 = (double) $i11;

        $i12 = i19 - 1;

        $d14 = r4[$i12];

        $d19 = $d15 * $d14;

        $i14 = i19 - 1;

        $i13 = 2 * i18;

        $i15 = $i14 - $i13;

        $d17 = (double) $i15;

        $i16 = i19 - 3;

        $d16 = r4[$i16];

        $d18 = $d17 * $d16;

        $d20 = $d19 + $d18;

        r4[$i17] = $d20;

        goto label4;

     label3:
        if i19 != 2 goto label4;

        $d13 = r4[1];

        r4[0] = $d13;

     label4:
        i19 = i19 + -2;

        goto label2;

     label5:
        $i10 = i18 & 1;

        if $i10 != 0 goto label6;

        d22 = d22 * d0;

     label6:
        d21 = d21 * d2;

        $d10 = d21 * d22;

        r3[i18] = $d10;

        i18 = i18 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void atan2(double[], int, double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4, r5;
        int i0, i1, i2, $i3, $i4, $i7, $i9, $i10, i11, i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        byte $b5, $b6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r3 := @parameter4: double[];

        i2 := @parameter5: int;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r4 = newarray (double)[$i3];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>(r2, i1, r2, i1, r4, 0);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        r5 = newarray (double)[$i4];

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>(r1, i0, r1, i0, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void add(double[],int,double[],int,double[],int)>(r4, 0, r5, 0, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void rootN(double[],int,int,double[],int)>(r5, 0, 2, r4, 0);

        $d0 = r2[i1];

        $b5 = $d0 cmpl 0.0;

        if $b5 < 0 goto label3;

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void add(double[],int,double[],int,double[],int)>(r4, 0, r2, i1, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void divide(double[],int,double[],int,double[],int)>(r1, i0, r5, 0, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan(double[],int,double[],int)>(r4, 0, r5, 0);

        i11 = 0;

     label1:
        $i9 = lengthof r5;

        if i11 >= $i9 goto label2;

        $i10 = i2 + i11;

        $d10 = r5[i11];

        $d11 = 2.0 * $d10;

        r3[$i10] = $d11;

        i11 = i11 + 1;

        goto label1;

     label2:
        goto label7;

     label3:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void subtract(double[],int,double[],int,double[],int)>(r4, 0, r2, i1, r5, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void divide(double[],int,double[],int,double[],int)>(r1, i0, r5, 0, r4, 0);

        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan(double[],int,double[],int)>(r4, 0, r5, 0);

        $d1 = r5[0];

        $b6 = $d1 cmpg 0.0;

        if $b6 > 0 goto label4;

        $d12 = -3.141592653589793;

        goto label5;

     label4:
        $d12 = 3.141592653589793;

     label5:
        $d2 = r5[0];

        $d3 = 2.0 * $d2;

        $d4 = $d12 - $d3;

        r3[i2] = $d4;

        i12 = 1;

     label6:
        $i13 = lengthof r5;

        if i12 >= $i13 goto label7;

        $i7 = i2 + i12;

        $d8 = r5[i12];

        $d9 = -2.0 * $d8;

        r3[$i7] = $d9;

        i12 = i12 + 1;

        goto label6;

     label7:
        $d6 = r1[i0];

        $d5 = r2[i1];

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d6, $d5);

        r3[i2] = $d7;

        return;
    }

    public void cosh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d0);

        r3[0] = $d1;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d2 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d2);

        r3[1] = $d3;

        i7 = 2;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        $i6 = i7 - 2;

        $d4 = r3[$i6];

        r3[i7] = $d4;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void sinh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d0 = r1[i0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sinh(double)>($d0);

        r3[0] = $d1;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label2;

        $d2 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double cosh(double)>($d2);

        r3[1] = $d3;

        i7 = 2;

     label1:
        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i7 > $i5 goto label2;

        $i6 = i7 - 2;

        $d4 = r3[$i6];

        r3[i7] = $d4;

        i7 = i7 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void tanh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        $d2 = r1[i0];

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double tanh(double)>($d2);

        r3[0] = d0;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i6 = $i5 + 2;

        r4 = newarray (double)[$i6];

        r4[1] = 1.0;

        d1 = d0 * d0;

        i16 = 1;

     label1:
        $i7 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i16 > $i7 goto label7;

        d16 = 0.0;

        $i9 = i16 + 1;

        $i8 = neg i16;

        $d4 = (double) $i8;

        $d3 = r4[i16];

        $d5 = $d4 * $d3;

        r4[$i9] = $d5;

        i17 = i16 + 1;

     label2:
        if i17 < 0 goto label5;

        $d7 = d16 * d1;

        $d6 = r4[i17];

        d16 = $d7 + $d6;

        if i17 <= 2 goto label3;

        $i15 = i17 - 2;

        $i11 = i17 - 1;

        $d10 = (double) $i11;

        $i12 = i17 - 1;

        $d9 = r4[$i12];

        $d14 = $d10 * $d9;

        $i13 = i17 - 3;

        $d12 = (double) $i13;

        $i14 = i17 - 3;

        $d11 = r4[$i14];

        $d13 = $d12 * $d11;

        $d15 = $d14 - $d13;

        r4[$i15] = $d15;

        goto label4;

     label3:
        if i17 != 2 goto label4;

        $d8 = r4[1];

        r4[0] = $d8;

     label4:
        i17 = i17 + -2;

        goto label2;

     label5:
        $i10 = i16 & 1;

        if $i10 != 0 goto label6;

        d16 = d16 * d0;

     label6:
        r3[i16] = d16;

        i16 = i16 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void acosh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double acosh(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = 1.0;

        d1 = d0 * d0;

        $d4 = d1 - 1.0;

        d2 = 1.0 / $d4;

        d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d5 = r4[0];

        $d6 = d22 * $d5;

        r3[1] = $d6;

        i17 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i17 > $i6 goto label7;

        d23 = 0.0;

        $i9 = i17 - 1;

        $i7 = 1 - i17;

        $d8 = (double) $i7;

        $i8 = i17 - 2;

        $d7 = r4[$i8];

        $d9 = $d8 * $d7;

        r4[$i9] = $d9;

        i18 = i17 - 1;

     label2:
        if i18 < 0 goto label5;

        $d12 = d23 * d1;

        $d11 = r4[i18];

        d23 = $d12 + $d11;

        if i18 <= 2 goto label3;

        $i16 = i18 - 2;

        $i11 = 1 - i18;

        $d16 = (double) $i11;

        $i12 = i18 - 1;

        $d15 = r4[$i12];

        $d20 = $d16 * $d15;

        $i13 = 2 * i17;

        $i14 = i18 - $i13;

        $d18 = (double) $i14;

        $i15 = i18 - 3;

        $d17 = r4[$i15];

        $d19 = $d18 * $d17;

        $d21 = $d20 + $d19;

        r4[$i16] = $d21;

        goto label4;

     label3:
        if i18 != 2 goto label4;

        $d13 = r4[1];

        $d14 = neg $d13;

        r4[0] = $d14;

     label4:
        i18 = i18 + -2;

        goto label2;

     label5:
        $i10 = i17 & 1;

        if $i10 != 0 goto label6;

        d23 = d23 * d0;

     label6:
        d22 = d22 * d2;

        $d10 = d22 * d23;

        r3[i17] = $d10;

        i17 = i17 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void asinh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double asinh(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = 1.0;

        d1 = d0 * d0;

        $d4 = 1.0 + d1;

        d2 = 1.0 / $d4;

        d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d2);

        $d5 = r4[0];

        $d6 = d21 * $d5;

        r3[1] = $d6;

        i17 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i17 > $i6 goto label7;

        d22 = 0.0;

        $i9 = i17 - 1;

        $i7 = 1 - i17;

        $d8 = (double) $i7;

        $i8 = i17 - 2;

        $d7 = r4[$i8];

        $d9 = $d8 * $d7;

        r4[$i9] = $d9;

        i18 = i17 - 1;

     label2:
        if i18 < 0 goto label5;

        $d12 = d22 * d1;

        $d11 = r4[i18];

        d22 = $d12 + $d11;

        if i18 <= 2 goto label3;

        $i16 = i18 - 2;

        $i11 = i18 - 1;

        $d15 = (double) $i11;

        $i12 = i18 - 1;

        $d14 = r4[$i12];

        $d19 = $d15 * $d14;

        $i13 = 2 * i17;

        $i14 = i18 - $i13;

        $d17 = (double) $i14;

        $i15 = i18 - 3;

        $d16 = r4[$i15];

        $d18 = $d17 * $d16;

        $d20 = $d19 + $d18;

        r4[$i16] = $d20;

        goto label4;

     label3:
        if i18 != 2 goto label4;

        $d13 = r4[1];

        r4[0] = $d13;

     label4:
        i18 = i18 + -2;

        goto label2;

     label5:
        $i10 = i17 & 1;

        if $i10 != 0 goto label6;

        d22 = d22 * d0;

     label6:
        d21 = d21 * d2;

        $d10 = d21 * d22;

        r3[i17] = $d10;

        i17 = i17 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void atanh(double[], int, double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i3 = 1 + $i2;

        r3 = newarray (double)[$i3];

        d0 = r1[i0];

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double atanh(double)>(d0);

        r3[0] = $d3;

        $i4 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i4 <= 0 goto label7;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        r4 = newarray (double)[$i5];

        r4[0] = 1.0;

        d1 = d0 * d0;

        $d4 = 1.0 - d1;

        d2 = 1.0 / $d4;

        d21 = d2;

        $d5 = r4[0];

        $d6 = d2 * $d5;

        r3[1] = $d6;

        i17 = 2;

     label1:
        $i6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if i17 > $i6 goto label7;

        d22 = 0.0;

        $i8 = i17 - 1;

        $d8 = (double) i17;

        $i7 = i17 - 2;

        $d7 = r4[$i7];

        $d9 = $d8 * $d7;

        r4[$i8] = $d9;

        i18 = i17 - 1;

     label2:
        if i18 < 0 goto label5;

        $d12 = d22 * d1;

        $d11 = r4[i18];

        d22 = $d12 + $d11;

        if i18 <= 2 goto label3;

        $i16 = i18 - 2;

        $i10 = i18 - 1;

        $d15 = (double) $i10;

        $i11 = i18 - 1;

        $d14 = r4[$i11];

        $d19 = $d15 * $d14;

        $i12 = 2 * i17;

        $i13 = $i12 - i18;

        $i14 = $i13 + 1;

        $d17 = (double) $i14;

        $i15 = i18 - 3;

        $d16 = r4[$i15];

        $d18 = $d17 * $d16;

        $d20 = $d19 + $d18;

        r4[$i16] = $d20;

        goto label4;

     label3:
        if i18 != 2 goto label4;

        $d13 = r4[1];

        r4[0] = $d13;

     label4:
        i18 = i18 + -2;

        goto label2;

     label5:
        $i9 = i17 & 1;

        if $i9 != 0 goto label6;

        d22 = d22 * d0;

     label6:
        d21 = d21 * d2;

        $d10 = d21 * d22;

        r3[i17] = $d10;

        i17 = i17 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>(r1, i0, r3, r2, i1);

        return;
    }

    public void compose(double[], int, double[], double[], int)
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        int[][] r4;
        int[] r5;
        int[][][] $r6, $r7;
        double $d0, $d1, $d2, d3, d4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        i1 := @parameter4: int;

        i10 = 0;

     label1:
        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        $i2 = lengthof $r6;

        if i10 >= $i2 goto label6;

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[][][] compIndirection>;

        r4 = $r7[i10];

        d3 = 0.0;

        i11 = 0;

     label2:
        $i3 = lengthof r4;

        if i11 >= $i3 goto label5;

        r5 = r4[i11];

        $i5 = r5[0];

        $d1 = (double) $i5;

        $i6 = r5[1];

        $d0 = r2[$i6];

        d4 = $d1 * $d0;

        i12 = 2;

     label3:
        $i7 = lengthof r5;

        if i12 >= $i7 goto label4;

        $i8 = r5[i12];

        $i9 = i0 + $i8;

        $d2 = r1[$i9];

        d4 = d4 * $d2;

        i12 = i12 + 1;

        goto label3;

     label4:
        d3 = d3 + d4;

        i11 = i11 + 1;

        goto label2;

     label5:
        $i4 = i1 + i10;

        r3[$i4] = d3;

        i10 = i10 + 1;

        goto label1;

     label6:
        return;
    }

    public transient double taylor(double[], int, double[]) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0;
        double[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9;
        int[] r3;
        double $d0, $d1, $d2, $d3, d4, d5;
        long $l7;
        org.apache.commons.math3.exception.NotPositiveException $r5;
        org.apache.commons.math3.exception.MathInternalError $r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        d4 = 0.0;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        i8 = $i1 - 1;

     label1:
        if i8 < 0 goto label8;

        r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int[] getPartialDerivativeOrders(int)>(i8);

        $i2 = i0 + i8;

        d5 = r1[$i2];

        i9 = 0;

     label2:
        $i3 = lengthof r3;

        if i9 >= $i3 goto label7;

        $i4 = r3[i9];

        if $i4 <= 0 goto label6;

     label3:
        $d0 = r2[i9];

        $i5 = r3[i9];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d0, $i5);

        $i6 = r3[i9];

        $l7 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>($i6);

        $d2 = (double) $l7;

        $d3 = $d1 / $d2;

        d5 = d5 * $d3;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathInternalError: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        d4 = d4 + d5;

        i8 = i8 + -1;

        goto label1;

     label8:
        return d4;

        catch org.apache.commons.math3.exception.NotPositiveException from label3 to label4 with label5;
    }

    public void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DSCompiler r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.exception.DimensionMismatchException $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i0 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        if $i1 == $i0 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i7 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        $i6 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int parameters>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i7, $i6);

        throw $r3;

     label1:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i2 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        if $i3 == $i2 goto label2;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = r0.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        $i4 = r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int order>;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r2;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <org.apache.commons.math3.analysis.differentiation.DSCompiler: java.util.concurrent.atomic.AtomicReference compilers> = $r0;

        return;
    }
}
