public class org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma extends java.lang.Object implements org.apache.commons.math3.optim.OptimizationData
{
    private final double[] sigma;

    public void <init>(double[]) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma r0;
        double[] r1, $r3;
        int $i0, i2;
        java.lang.Object $r2;
        double $d0, $d1;
        byte $b1;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $d0 = r1[i2];

        $b1 = $d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $d1 = r1[i2];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma: double[] sigma> = $r3;

        return;
    }

    public double[] getSigma()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma;

        $r1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma: double[] sigma>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }
}
