public class org.apache.commons.lang.builder.HashCodeBuilder extends java.lang.Object
{
    private static final java.lang.ThreadLocal REGISTRY;
    private final int iConstant;
    private int iTotal;
    static java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder;

    static java.util.Set getRegistry()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.Set $r2;

        $r0 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.ThreadLocal REGISTRY>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.Set) $r1;

        return $r2;
    }

    static boolean isRegistered(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Set r1;
        org.apache.commons.lang.builder.IDKey $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.util.Set getRegistry()>();

        if r1 == null goto label1;

        $r2 = new org.apache.commons.lang.builder.IDKey;

        specialinvoke $r2.<org.apache.commons.lang.builder.IDKey: void <init>(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static void reflectionAppend(java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.HashCodeBuilder, boolean, java.lang.String[])
    {
        java.lang.Object r0, r13;
        java.lang.Class r1;
        org.apache.commons.lang.builder.HashCodeBuilder r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String[] r3;
        java.lang.reflect.Field[] r4;
        java.lang.reflect.Field r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r7, $r8;
        java.lang.Throwable $r10;
        java.lang.IllegalAccessException $r11;
        java.lang.InternalError $r12;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.apache.commons.lang.builder.HashCodeBuilder;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String[];

        $z1 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: boolean isRegistered(java.lang.Object)>(r0);

        if $z1 == 0 goto label01;

        return;

     label01:
        staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: void register(java.lang.Object)>(r0);

        r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(r4, 1);

        i4 = 0;

     label02:
        $i0 = lengthof r4;

        if i4 >= $i0 goto label08;

        r5 = r4[i4];

        $r7 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z2 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r3, $r7);

        if $z2 != 0 goto label07;

        $r8 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $i1 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>(36);

        if $i1 != -1 goto label07;

        if z0 != 0 goto label03;

        $i3 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i3);

        if $z4 != 0 goto label07;

     label03:
        $i2 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z3 != 0 goto label07;

     label04:
        r13 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        virtualinvoke r2.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)>(r13);

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        $r12 = new java.lang.InternalError;

        specialinvoke $r12.<java.lang.InternalError: void <init>(java.lang.String)>("Unexpected IllegalAccessException");

        throw $r12;

     label07:
        i4 = i4 + 1;

        goto label02;

     label08:
        staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: void unregister(java.lang.Object)>(r0);

        goto label11;

     label09:
        $r10 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: void unregister(java.lang.Object)>(r0);

        throw $r10;

     label11:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static int reflectionHashCode(int, int, java.lang.Object)
    {
        int i0, i1, $i2;
        java.lang.Object r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        $i2 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(i0, i1, r0, 0, null, null);

        return $i2;
    }

    public static int reflectionHashCode(int, int, java.lang.Object, boolean)
    {
        int i0, i1, $i2;
        java.lang.Object r0;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $i2 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(i0, i1, r0, z0, null, null);

        return $i2;
    }

    public static int reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class)
    {
        int i0, i1, $i2;
        java.lang.Object r0;
        boolean z0;
        java.lang.Class r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.Class;

        $i2 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(i0, i1, r0, z0, r1, null);

        return $i2;
    }

    public static int reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])
    {
        int i0, i1, $i2;
        java.lang.Object r0;
        boolean z0;
        java.lang.Class r1, $r5, r7;
        java.lang.String[] r2;
        org.apache.commons.lang.builder.HashCodeBuilder $r4;
        java.lang.IllegalArgumentException $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.Class;

        r2 := @parameter5: java.lang.String[];

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The object to build a hash code for must not be null");

        throw $r6;

     label1:
        $r4 = new org.apache.commons.lang.builder.HashCodeBuilder;

        specialinvoke $r4.<org.apache.commons.lang.builder.HashCodeBuilder: void <init>(int,int)>(i0, i1);

        r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])>(r0, r7, $r4, z0, r2);

     label2:
        $r5 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r5 == null goto label3;

        if r7 == r1 goto label3;

        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: void reflectionAppend(java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.HashCodeBuilder,boolean,java.lang.String[])>(r0, r7, $r4, z0, r2);

        goto label2;

     label3:
        $i2 = virtualinvoke $r4.<org.apache.commons.lang.builder.HashCodeBuilder: int toHashCode()>();

        return $i2;
    }

    public static int reflectionHashCode(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(17, 37, r0, 0, null, null);

        return $i0;
    }

    public static int reflectionHashCode(java.lang.Object, boolean)
    {
        java.lang.Object r0;
        boolean z0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(17, 37, r0, z0, null, null);

        return $i0;
    }

    public static int reflectionHashCode(java.lang.Object, java.util.Collection)
    {
        java.lang.Object r0;
        java.util.Collection r1;
        java.lang.String[] $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.util.Collection;

        $r2 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.util.Collection)>(r1);

        $i0 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,java.lang.String[])>(r0, $r2);

        return $i0;
    }

    public static int reflectionHashCode(java.lang.Object, java.lang.String[])
    {
        java.lang.Object r0;
        java.lang.String[] r1;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String[];

        $i0 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(17, 37, r0, 0, null, r1);

        return $i0;
    }

    static void register(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3, $r10;
        java.util.Set $r4, $r5;
        org.apache.commons.lang.builder.IDKey $r6;
        java.util.HashSet $r7;
        java.lang.ThreadLocal $r8;
        java.lang.Throwable $r9;

        r0 := @parameter0: java.lang.Object;

        $r3 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder>;

        if $r3 != null goto label1;

        $r10 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$(java.lang.String)>("org.apache.commons.lang.builder.HashCodeBuilder");

        <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder>;

     label2:
        r1 = $r10;

        entermonitor $r10;

     label3:
        $r4 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.util.Set getRegistry()>();

        if $r4 != null goto label4;

        $r8 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.ThreadLocal REGISTRY>;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r7);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        exitmonitor r1;

     label7:
        throw $r9;

     label8:
        $r5 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.util.Set getRegistry()>();

        $r6 = new org.apache.commons.lang.builder.IDKey;

        specialinvoke $r6.<org.apache.commons.lang.builder.IDKey: void <init>(java.lang.Object)>(r0);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static void unregister(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r4, $r8;
        org.apache.commons.lang.builder.IDKey $r3;
        boolean $z1;
        java.lang.ThreadLocal $r5;
        java.lang.Throwable $r6;
        java.util.Set r7, r9;

        r0 := @parameter0: java.lang.Object;

        r7 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.util.Set getRegistry()>();

        if r7 == null goto label8;

        $r3 = new org.apache.commons.lang.builder.IDKey;

        specialinvoke $r3.<org.apache.commons.lang.builder.IDKey: void <init>(java.lang.Object)>(r0);

        interfaceinvoke r7.<java.util.Set: boolean remove(java.lang.Object)>($r3);

        $r4 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder>;

        if $r4 != null goto label1;

        $r8 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$(java.lang.String)>("org.apache.commons.lang.builder.HashCodeBuilder");

        <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder> = $r8;

        goto label2;

     label1:
        $r8 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.Class class$org$apache$commons$lang$builder$HashCodeBuilder>;

     label2:
        r1 = $r8;

        entermonitor $r8;

     label3:
        r9 = staticinvoke <org.apache.commons.lang.builder.HashCodeBuilder: java.util.Set getRegistry()>();

        if r9 == null goto label4;

        $z1 = interfaceinvoke r9.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r5 = <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.ThreadLocal REGISTRY>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        exitmonitor r1;

     label7:
        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void <init>()
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = 0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant> = 37;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = 17;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = 0;

        if i0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HashCodeBuilder requires a non zero initial value");

        throw $r4;

     label1:
        $i2 = i0 % 2;

        if $i2 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HashCodeBuilder requires an odd initial value");

        throw $r3;

     label2:
        if i1 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HashCodeBuilder requires a non zero multiplier");

        throw $r2;

     label3:
        $i3 = i1 % 2;

        if $i3 != 0 goto label4;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HashCodeBuilder requires an odd multiplier");

        throw $r1;

     label4:
        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant> = i1;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = i0;

        return;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(boolean)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        z0 := @parameter0: boolean;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i0 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i2 = $i1 * $i0;

        if z0 == 0 goto label1;

        $b4 = 0;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i3 = $i2 + $b4;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i3;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(boolean[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        boolean[] r1;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: boolean[];

        if r1 != null goto label1;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i3;

        goto label3;

     label1:
        i4 = 0;

     label2:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label3;

        $z0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(boolean)>($z0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(byte)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        byte b0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        b0 := @parameter0: byte;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        $i4 = $i3 + b0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(byte[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        byte[] r1;
        int $i0, $i2, $i3, $i4, i5;
        byte $b1;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $i3 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i4 = $i3 * $i2;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        goto label3;

     label1:
        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $b1 = r1[i5];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(byte)>($b1);

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(char)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        char c0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        c0 := @parameter0: char;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        $i4 = $i3 + c0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(char[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        char[] r1;
        int $i0, $i2, $i3, $i4, i5;
        char $c1;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: char[];

        if r1 != null goto label1;

        $i3 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i4 = $i3 * $i2;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        goto label3;

     label1:
        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $c1 = r1[i5];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(char)>($c1);

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(double)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0, $r1;
        double d0;
        long $l0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $r1 = virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(long)>($l0);

        return $r1;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(double[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, i4;
        double $d0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i3;

        goto label3;

     label1:
        i4 = 0;

     label2:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(double)>($d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(float)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        float f0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        f0 := @parameter0: float;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i0 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i2 = $i1 * $i0;

        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i4 = $i2 + $i3;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(float[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        float[] r1;
        int $i0, $i1, $i2, $i3, i4;
        float $f0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: float[];

        if r1 != null goto label1;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i3;

        goto label3;

     label1:
        i4 = 0;

     label2:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label3;

        $f0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(float)>($f0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(int)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        $i4 = $i3 + i0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(int[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: int[];

        if r1 != null goto label1;

        $i3 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i4 = $i3 * $i2;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        goto label3;

     label1:
        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $i1 = r1[i5];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(int)>($i1);

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(long)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        long l0, $l3, $l4;
        int $i1, $i2, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        l0 := @parameter0: long;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i6 = $i2 * $i1;

        $l3 = l0 >> 32;

        $l4 = l0 ^ $l3;

        $i5 = (int) $l4;

        $i7 = $i6 + $i5;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i7;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(long[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        long[] r1;
        int $i0, $i2, $i3, $i4, i5;
        long $l1;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: long[];

        if r1 != null goto label1;

        $i3 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i4 = $i3 * $i2;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        goto label3;

     label1:
        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $l1 = r1[i5];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(long)>($l1);

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r3, $r4;
        boolean[] $r6, $r7;
        float[] $r9, $r10;
        double[] $r12, $r13;
        byte[] $r15, $r16;
        char[] $r18, $r19;
        short[] $r21, $r22;
        int[] $r24, $r25;
        long[] $r27, $r28;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        $i6 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i5 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i7 = $i6 * $i5;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i7;

        goto label11;

     label01:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label10;

        $z1 = r1 instanceof long[];

        if $z1 == 0 goto label02;

        $r27 = (long[]) r1;

        $r28 = (long[]) $r27;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(long[])>($r28);

        goto label11;

     label02:
        $z2 = r1 instanceof int[];

        if $z2 == 0 goto label03;

        $r24 = (int[]) r1;

        $r25 = (int[]) $r24;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(int[])>($r25);

        goto label11;

     label03:
        $z3 = r1 instanceof short[];

        if $z3 == 0 goto label04;

        $r21 = (short[]) r1;

        $r22 = (short[]) $r21;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(short[])>($r22);

        goto label11;

     label04:
        $z4 = r1 instanceof char[];

        if $z4 == 0 goto label05;

        $r18 = (char[]) r1;

        $r19 = (char[]) $r18;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(char[])>($r19);

        goto label11;

     label05:
        $z5 = r1 instanceof byte[];

        if $z5 == 0 goto label06;

        $r15 = (byte[]) r1;

        $r16 = (byte[]) $r15;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(byte[])>($r16);

        goto label11;

     label06:
        $z6 = r1 instanceof double[];

        if $z6 == 0 goto label07;

        $r12 = (double[]) r1;

        $r13 = (double[]) $r12;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(double[])>($r13);

        goto label11;

     label07:
        $z7 = r1 instanceof float[];

        if $z7 == 0 goto label08;

        $r9 = (float[]) r1;

        $r10 = (float[]) $r9;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(float[])>($r10);

        goto label11;

     label08:
        $z8 = r1 instanceof boolean[];

        if $z8 == 0 goto label09;

        $r6 = (boolean[]) r1;

        $r7 = (boolean[]) $r6;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(boolean[])>($r7);

        goto label11;

     label09:
        $r3 = (java.lang.Object[]) r1;

        $r4 = (java.lang.Object[]) $r3;

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object[])>($r4);

        goto label11;

     label10:
        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i0 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i2 = $i1 * $i0;

        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i4 = $i2 + $i3;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

     label11:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        java.lang.Object[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: java.lang.Object[];

        if r1 != null goto label1;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i3;

        goto label3;

     label1:
        i4 = 0;

     label2:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label3;

        $r2 = r1[i4];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)>($r2);

        i4 = i4 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(short)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        short s0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        s0 := @parameter0: short;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        $i4 = $i3 + s0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder append(short[])
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        short[] r1;
        int $i0, $i2, $i3, $i4, i5;
        short $s1;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        r1 := @parameter0: short[];

        if r1 != null goto label1;

        $i3 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i4 = $i3 * $i2;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        goto label3;

     label1:
        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $s1 = r1[i5];

        virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(short)>($s1);

        i5 = i5 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.apache.commons.lang.builder.HashCodeBuilder appendSuper(int)
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        $i1 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iConstant>;

        $i3 = $i2 * $i1;

        $i4 = $i3 + i0;

        r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal> = $i4;

        return r0;
    }

    public int toHashCode()
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        $i0 = r0.<org.apache.commons.lang.builder.HashCodeBuilder: int iTotal>;

        return $i0;
    }

    public int hashCode()
    {
        org.apache.commons.lang.builder.HashCodeBuilder r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.builder.HashCodeBuilder;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.builder.HashCodeBuilder: int toHashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.NoClassDefFoundError $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.NoClassDefFoundError;

        $r5 = virtualinvoke $r3.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.commons.lang.builder.HashCodeBuilder: java.lang.ThreadLocal REGISTRY> = $r0;

        return;
    }
}
