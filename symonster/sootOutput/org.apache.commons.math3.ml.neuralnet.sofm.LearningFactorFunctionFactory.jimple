public class org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory r0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction exponentialDecay(double, double, long)
    {
        double d0, d1;
        long l0;
        byte $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$1 $r4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 := @parameter2: long;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $r4 = new org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$1;

        specialinvoke $r4.<org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$1: void <init>(double,double,long)>(d0, d1, l0);

        return $r4;
    }

    public static org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction quasiSigmoidDecay(double, double, long)
    {
        double d0, d1;
        long l0;
        byte $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r0;
        java.lang.Double $r1;
        java.lang.Integer $r2, $r3;
        org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$2 $r4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 := @parameter2: long;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d0 cmpl 1.0;

        if $b2 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r0.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r1, $r2, $r3);

        throw $r0;

     label2:
        $r4 = new org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$2;

        specialinvoke $r4.<org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$2: void <init>(double,double,long)>(d0, d1, l0);

        return $r4;
    }
}
