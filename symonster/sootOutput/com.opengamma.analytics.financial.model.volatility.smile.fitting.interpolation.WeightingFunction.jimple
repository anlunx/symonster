public abstract class com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double getWeight(double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r0;
        double[] r1;
        double d0, d1, $d2;
        int i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "strikes");

        i0 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.SurfaceArrayUtils: int getLowerBoundIndex(double[],double)>(r1, d0);

        d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getY(double[],int,double)>(r1, i0, d0);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double)>(d1);

        return $d2;
    }

    public double getWeight(double[], int, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r0;
        double[] r1;
        int i0;
        double d0, d1, $d2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "strikes");

        d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getY(double[],int,double)>(r1, i0, d0);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double)>(d1);

        return $d2;
    }

    private double getY(double[], int, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction r0;
        double[] r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "strikes");

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "index");

        $i2 = lengthof r1;

        $i3 = $i2 - 2;

        if i0 > $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $i4 = lengthof r1;

        $i5 = $i4 - 2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "index cannot be larger than {}, have {}", $r3);

        $i6 = i0 + 1;

        $d1 = r1[$i6];

        $d5 = $d1 - d0;

        $i7 = i0 + 1;

        $d3 = r1[$i7];

        $d2 = r1[i0];

        $d4 = $d3 - $d2;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public abstract double getWeight(double);
}
